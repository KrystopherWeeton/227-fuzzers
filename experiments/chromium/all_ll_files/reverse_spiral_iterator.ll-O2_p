; ModuleID = '../../cc/base/reverse_spiral_iterator.cc'
source_filename = "../../cc/base/reverse_spiral_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cc::ReverseSpiralIterator" = type { %"class.cc::IndexRect", %"class.cc::IndexRect", %"class.cc::IndexRect", i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.cc::IndexRect" = type { i32, i32, i32, i32 }

@_ZN2cc21ReverseSpiralIteratorC1Ev = hidden unnamed_addr alias void (%"class.cc::ReverseSpiralIterator"*), void (%"class.cc::ReverseSpiralIterator"*)* @_ZN2cc21ReverseSpiralIteratorC2Ev
@_ZN2cc21ReverseSpiralIteratorC1ERKNS_9IndexRectES3_S3_ = hidden unnamed_addr alias void (%"class.cc::ReverseSpiralIterator"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*), void (%"class.cc::ReverseSpiralIterator"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*, %"class.cc::IndexRect"*)* @_ZN2cc21ReverseSpiralIteratorC2ERKNS_9IndexRectES3_S3_

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc21ReverseSpiralIteratorC2Ev(%"class.cc::ReverseSpiralIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.cc::ReverseSpiralIterator"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 -1, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc21ReverseSpiralIteratorC2ERKNS_9IndexRectES3_S3_(%"class.cc::ReverseSpiralIterator"*, %"class.cc::IndexRect"* nocapture readonly dereferenceable(16), %"class.cc::IndexRect"* nocapture readonly dereferenceable(16), %"class.cc::IndexRect"* nocapture readonly dereferenceable(16)) unnamed_addr #1 align 2 {
  %5 = bitcast %"class.cc::ReverseSpiralIterator"* %0 to i8*
  %6 = bitcast %"class.cc::IndexRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 16, i1 false)
  %7 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1
  %8 = bitcast %"class.cc::IndexRect"* %7 to i8*
  %9 = bitcast %"class.cc::IndexRect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 16, i1 false)
  %10 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 2
  %11 = bitcast %"class.cc::IndexRect"* %10 to i8*
  %12 = bitcast %"class.cc::IndexRect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false)
  %13 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 4
  %15 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 5
  store i32 0, i32* %15, align 4
  %16 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 6
  store i32 -1, i32* %16, align 4
  %17 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 7
  %18 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 9
  %19 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 10
  %20 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 0, i32 2
  %21 = bitcast i32* %17 to i64*
  store i64 0, i64* %21, align 4
  %22 = load i32, i32* %20, align 4
  %23 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = sub nsw i32 %22, %24
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %7, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = sub nsw i32 %29, %31
  %33 = icmp slt i32 %27, %32
  %34 = select i1 %33, i32 %32, i32 %27
  %35 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = sub nsw i32 %36, %38
  %40 = icmp slt i32 %34, %39
  %41 = select i1 %40, i32 %39, i32 %34
  %42 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = sub nsw i32 %43, %45
  %47 = icmp slt i32 %41, %46
  %48 = select i1 %47, i32 %46, i32 %41
  %49 = shl nuw nsw i32 %48, 1
  %50 = sub i32 1, %22
  %51 = add i32 %50, %38
  %52 = add i32 %51, %49
  store i32 %52, i32* %19, align 4
  %53 = add i32 %45, 1
  %54 = sub i32 %53, %29
  %55 = add nsw i32 %54, %49
  store i32 %55, i32* %18, align 4
  %56 = add i32 %53, %48
  store i32 %56, i32* %13, align 4
  %57 = add nsw i32 %48, %38
  store i32 %57, i32* %14, align 4
  %58 = tail call dereferenceable(80) %"class.cc::ReverseSpiralIterator"* @_ZN2cc21ReverseSpiralIteratorppEv(%"class.cc::ReverseSpiralIterator"* %0)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(80) %"class.cc::ReverseSpiralIterator"* @_ZN2cc21ReverseSpiralIteratorppEv(%"class.cc::ReverseSpiralIterator"* returned) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  %7 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %2, i32 %4, i32 %6) #6
  br i1 %7, label %173, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 8
  %10 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 10
  %12 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 9
  %13 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 2
  %17 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 3
  %18 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %15, i64 0, i32 0
  %19 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 1, i32 1
  %20 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 2
  %21 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 2, i32 1
  %22 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 2, i32 3
  %23 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %20, i64 0, i32 0
  %24 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 2, i32 2
  br label %25

25:                                               ; preds = %8, %168
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %10, align 4
  switch i32 %27, label %28 [
    i32 1, label %29
    i32 3, label %29
  ]

28:                                               ; preds = %25
  br label %29

29:                                               ; preds = %25, %25, %28
  %30 = phi i32* [ %12, %28 ], [ %11, %25 ], [ %11, %25 ]
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %26, %31
  %33 = load i32, i32* %13, align 4
  %34 = load i32, i32* %14, align 4
  br i1 %32, label %44, label %35

35:                                               ; preds = %29
  %36 = sub nsw i32 0, %34
  store i32 %36, i32* %13, align 4
  store i32 %33, i32* %14, align 4
  store i32 0, i32* %9, align 4
  %37 = add nsw i32 %27, 1
  %38 = srem i32 %37, 4
  store i32 %38, i32* %10, align 4
  switch i32 %38, label %44 [
    i32 1, label %39
    i32 3, label %39
  ]

39:                                               ; preds = %35, %35
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, -1
  store i32 %41, i32* %11, align 4
  %42 = load i32, i32* %12, align 4
  %43 = add nsw i32 %42, -1
  store i32 %43, i32* %12, align 4
  br label %44

44:                                               ; preds = %29, %39, %35
  %45 = phi i32 [ 0, %39 ], [ 0, %35 ], [ %26, %29 ]
  %46 = phi i32 [ %33, %39 ], [ %33, %35 ], [ %34, %29 ]
  %47 = phi i32 [ %36, %39 ], [ %36, %35 ], [ %33, %29 ]
  %48 = load i32, i32* %3, align 4
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %3, align 4
  %50 = load i32, i32* %5, align 4
  %51 = add nsw i32 %50, %46
  store i32 %51, i32* %5, align 4
  %52 = add nsw i32 %45, 1
  store i32 %52, i32* %9, align 4
  %53 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %2, i32 %49, i32 %51) #6
  br i1 %53, label %173, label %54

54:                                               ; preds = %44
  %55 = load i32, i32* %3, align 4
  %56 = load i32, i32* %5, align 4
  %57 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %15, i32 %55, i32 %56) #6
  br i1 %57, label %58, label %91

58:                                               ; preds = %54
  %59 = load i32, i32* %3, align 4
  %60 = load i32, i32* %5, align 4
  %61 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %20, i32 %59, i32 %60) #6
  br i1 %61, label %62, label %173

62:                                               ; preds = %58
  %63 = load i32, i32* %10, align 4
  switch i32 %63, label %74 [
    i32 1, label %67
    i32 0, label %64
    i32 3, label %65
    i32 2, label %66
  ]

64:                                               ; preds = %62
  br label %67

65:                                               ; preds = %62
  br label %67

66:                                               ; preds = %62
  br label %67

67:                                               ; preds = %62, %65, %64, %66
  %68 = phi i32* [ %21, %66 ], [ %3, %64 ], [ %22, %65 ], [ %5, %62 ]
  %69 = phi i32* [ %3, %66 ], [ %23, %64 ], [ %5, %65 ], [ %24, %62 ]
  %70 = phi i32* [ %12, %66 ], [ %12, %64 ], [ %11, %65 ], [ %11, %62 ]
  %71 = load i32, i32* %68, align 4
  %72 = load i32, i32* %69, align 4
  %73 = sub nsw i32 %71, %72
  br label %74

74:                                               ; preds = %67, %62
  %75 = phi i32 [ 0, %62 ], [ %73, %67 ]
  %76 = phi i32* [ %12, %62 ], [ %70, %67 ]
  %77 = load i32, i32* %76, align 4
  %78 = load i32, i32* %9, align 4
  %79 = sub nsw i32 %77, %78
  %80 = icmp slt i32 %79, %75
  %81 = select i1 %80, i32 %79, i32 %75
  %82 = load i32, i32* %13, align 4
  %83 = mul nsw i32 %81, %82
  %84 = load i32, i32* %3, align 4
  %85 = add nsw i32 %83, %84
  store i32 %85, i32* %3, align 4
  %86 = load i32, i32* %14, align 4
  %87 = mul nsw i32 %86, %81
  %88 = load i32, i32* %5, align 4
  %89 = add nsw i32 %88, %87
  store i32 %89, i32* %5, align 4
  %90 = add nsw i32 %81, %78
  br label %168

91:                                               ; preds = %54
  %92 = load i32, i32* %10, align 4
  switch i32 %92, label %93 [
    i32 1, label %94
    i32 3, label %94
  ]

93:                                               ; preds = %91
  br label %94

94:                                               ; preds = %91, %91, %93
  %95 = phi i32* [ %12, %93 ], [ %11, %91 ], [ %11, %91 ]
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* %9, align 4
  %98 = sub nsw i32 %96, %97
  switch i32 %92, label %155 [
    i32 1, label %99
    i32 0, label %113
    i32 3, label %127
    i32 2, label %141
  ]

99:                                               ; preds = %94
  %100 = load i32, i32* %3, align 4
  %101 = load i32, i32* %18, align 4
  %102 = icmp sgt i32 %101, %100
  br i1 %102, label %155, label %103

103:                                              ; preds = %99
  %104 = load i32, i32* %19, align 4
  %105 = icmp slt i32 %104, %100
  br i1 %105, label %155, label %106

106:                                              ; preds = %103
  %107 = load i32, i32* %17, align 4
  %108 = load i32, i32* %5, align 4
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %110, label %155

110:                                              ; preds = %106
  %111 = xor i32 %107, -1
  %112 = add i32 %108, %111
  br label %155

113:                                              ; preds = %94
  %114 = load i32, i32* %5, align 4
  %115 = load i32, i32* %16, align 4
  %116 = icmp sgt i32 %115, %114
  br i1 %116, label %155, label %117

117:                                              ; preds = %113
  %118 = load i32, i32* %17, align 4
  %119 = icmp slt i32 %118, %114
  br i1 %119, label %155, label %120

120:                                              ; preds = %117
  %121 = load i32, i32* %19, align 4
  %122 = load i32, i32* %3, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %155

124:                                              ; preds = %120
  %125 = xor i32 %121, -1
  %126 = add i32 %122, %125
  br label %155

127:                                              ; preds = %94
  %128 = load i32, i32* %3, align 4
  %129 = load i32, i32* %18, align 4
  %130 = icmp sgt i32 %129, %128
  br i1 %130, label %155, label %131

131:                                              ; preds = %127
  %132 = load i32, i32* %19, align 4
  %133 = icmp slt i32 %132, %128
  br i1 %133, label %155, label %134

134:                                              ; preds = %131
  %135 = load i32, i32* %16, align 4
  %136 = load i32, i32* %5, align 4
  %137 = icmp sgt i32 %135, %136
  br i1 %137, label %138, label %155

138:                                              ; preds = %134
  %139 = xor i32 %136, -1
  %140 = add i32 %135, %139
  br label %155

141:                                              ; preds = %94
  %142 = load i32, i32* %5, align 4
  %143 = load i32, i32* %16, align 4
  %144 = icmp sgt i32 %143, %142
  br i1 %144, label %155, label %145

145:                                              ; preds = %141
  %146 = load i32, i32* %17, align 4
  %147 = icmp slt i32 %146, %142
  br i1 %147, label %155, label %148

148:                                              ; preds = %145
  %149 = load i32, i32* %18, align 4
  %150 = load i32, i32* %3, align 4
  %151 = icmp sgt i32 %149, %150
  br i1 %151, label %152, label %155

152:                                              ; preds = %148
  %153 = xor i32 %150, -1
  %154 = add i32 %149, %153
  br label %155

155:                                              ; preds = %103, %117, %131, %145, %141, %127, %113, %99, %148, %152, %134, %138, %120, %124, %106, %110, %94
  %156 = phi i32 [ %98, %94 ], [ %154, %152 ], [ %98, %148 ], [ %98, %145 ], [ %140, %138 ], [ %98, %134 ], [ %98, %131 ], [ %126, %124 ], [ %98, %120 ], [ %98, %117 ], [ %112, %110 ], [ %98, %106 ], [ %98, %103 ], [ %98, %99 ], [ %98, %113 ], [ %98, %127 ], [ %98, %141 ]
  %157 = icmp slt i32 %98, %156
  %158 = select i1 %157, i32 %98, i32 %156
  %159 = load i32, i32* %13, align 4
  %160 = mul nsw i32 %158, %159
  %161 = load i32, i32* %3, align 4
  %162 = add nsw i32 %160, %161
  store i32 %162, i32* %3, align 4
  %163 = load i32, i32* %14, align 4
  %164 = mul nsw i32 %163, %158
  %165 = load i32, i32* %5, align 4
  %166 = add nsw i32 %165, %164
  store i32 %166, i32* %5, align 4
  %167 = add nsw i32 %158, %97
  br label %168

168:                                              ; preds = %74, %155
  %169 = phi i32 [ %166, %155 ], [ %89, %74 ]
  %170 = phi i32 [ %162, %155 ], [ %85, %74 ]
  %171 = phi i32 [ %167, %155 ], [ %90, %74 ]
  store i32 %171, i32* %9, align 4
  %172 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %2, i32 %170, i32 %169) #6
  br i1 %172, label %173, label %25

173:                                              ; preds = %44, %58, %168, %1
  %174 = load i32, i32* %3, align 4
  %175 = load i32, i32* %5, align 4
  %176 = tail call zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* %2, i32 %174, i32 %175) #6
  br i1 %176, label %177, label %178

177:                                              ; preds = %173
  store i32 -1, i32* %3, align 4
  store i32 -1, i32* %5, align 4
  br label %178

178:                                              ; preds = %177, %173
  ret %"class.cc::ReverseSpiralIterator"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc21ReverseSpiralIteratorcvbEv(%"class.cc::ReverseSpiralIterator"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, -1
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

declare zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"*, i32, i32) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc21ReverseSpiralIterator22needs_direction_switchEv(%"class.cc::ReverseSpiralIterator"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %8 [
    i32 1, label %6
    i32 3, label %6
  ]

6:                                                ; preds = %1, %1
  %7 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 10
  br label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 9
  br label %10

10:                                               ; preds = %6, %8
  %11 = phi i32* [ %7, %6 ], [ %9, %8 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp sge i32 %3, %12
  ret i1 %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc21ReverseSpiralIterator16switch_directionEv(%"class.cc::ReverseSpiralIterator"* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 4
  %6 = sub nsw i32 0, %5
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %4, align 4
  %7 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 8
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 1
  %11 = srem i32 %10, 4
  store i32 %11, i32* %8, align 4
  switch i32 %11, label %19 [
    i32 1, label %12
    i32 3, label %12
  ]

12:                                               ; preds = %1, %1
  %13 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, -1
  store i32 %15, i32* %13, align 4
  %16 = getelementptr inbounds %"class.cc::ReverseSpiralIterator", %"class.cc::ReverseSpiralIterator"* %0, i64 0, i32 9
  %17 = load i32, i32* %16, align 4
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %16, align 4
  br label %19

19:                                               ; preds = %1, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
