; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/temporal_filter_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/temporal_filter_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_mv = type { i32 }
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }

@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_apply_temporal_filter_sse2(%struct.yv12_buffer_config* nocapture readonly, %struct.macroblockd* nocapture readonly, i8 zeroext, i32, i32, i32, double* nocapture readonly, %struct.mv* nocapture readonly, i32* nocapture readonly, i32, i32, i8* nocapture readonly, i32* nocapture, i16* nocapture) local_unnamed_addr #0 {
  %15 = alloca [32 x [32 x i32]], align 16
  %16 = alloca [4 x double], align 16
  %17 = alloca [1152 x i16], align 16
  %18 = alloca [1024 x i32], align 16
  %19 = zext i8 %2 to i64
  %20 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %19
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp slt i32 %27, %29
  %31 = select i1 %30, i32 %27, i32 %29
  %32 = sitofp i32 %9 to double
  %33 = fdiv double %32, 2.000000e+01
  %34 = fmul double %33, %33
  %35 = fcmp olt double %34, 1.000000e-05
  %36 = fcmp ogt double %34, 1.000000e+00
  %37 = select i1 %36, double 1.000000e+00, double %34
  %38 = select i1 %35, double 1.000000e-05, double %37
  %39 = icmp sgt i32 %9, 127
  br i1 %39, label %40, label %44

40:                                               ; preds = %14
  %41 = fmul double %32, 1.562500e-02
  %42 = fmul double %41, %41
  %43 = fmul double %42, 5.000000e-01
  br label %44

44:                                               ; preds = %40, %14
  %45 = phi double [ %43, %40 ], [ %38, %14 ]
  %46 = sitofp i32 %10 to double
  %47 = fmul double %46, 2.500000e-01
  %48 = fmul double %47, %47
  %49 = fcmp ogt double %48, 1.000000e+00
  %50 = select i1 %49, double 1.000000e+00, double %48
  %51 = bitcast [4 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #4
  %52 = bitcast [1152 x i16]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %52) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 0, i64 2304, i1 false)
  %53 = bitcast [1024 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %53) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 0, i64 4096, i1 false)
  %54 = sitofp i32 %31 to double
  %55 = fmul double %54, 1.000000e-01
  %56 = fcmp ogt double %55, 1.000000e+00
  %57 = select i1 %56, double %55, double 1.000000e+00
  %58 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 0
  %59 = load i16, i16* %58, align 2
  %60 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 0, i32 1
  %61 = load i16, i16* %60, align 2
  %62 = sitofp i16 %59 to double
  %63 = fmul double %62, %62
  %64 = sitofp i16 %61 to double
  %65 = fmul double %64, %64
  %66 = fadd double %63, %65
  %67 = tail call double @sqrt(double %66) #4
  %68 = fdiv double %67, %57
  %69 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 0
  %70 = fcmp ogt double %68, 1.000000e+00
  %71 = select i1 %70, double %68, double 1.000000e+00
  store double %71, double* %69, align 16
  %72 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 1, i32 0
  %73 = load i16, i16* %72, align 2
  %74 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 1, i32 1
  %75 = load i16, i16* %74, align 2
  %76 = sitofp i16 %73 to double
  %77 = fmul double %76, %76
  %78 = sitofp i16 %75 to double
  %79 = fmul double %78, %78
  %80 = fadd double %77, %79
  %81 = tail call double @sqrt(double %80) #4
  %82 = fdiv double %81, %57
  %83 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 1
  %84 = fcmp ogt double %82, 1.000000e+00
  %85 = select i1 %84, double %82, double 1.000000e+00
  store double %85, double* %83, align 8
  %86 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 2, i32 0
  %87 = load i16, i16* %86, align 2
  %88 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 2, i32 1
  %89 = load i16, i16* %88, align 2
  %90 = sitofp i16 %87 to double
  %91 = fmul double %90, %90
  %92 = sitofp i16 %89 to double
  %93 = fmul double %92, %92
  %94 = fadd double %91, %93
  %95 = tail call double @sqrt(double %94) #4
  %96 = fdiv double %95, %57
  %97 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 2
  %98 = fcmp ogt double %96, 1.000000e+00
  %99 = select i1 %98, double %96, double 1.000000e+00
  store double %99, double* %97, align 16
  %100 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 3, i32 0
  %101 = load i16, i16* %100, align 2
  %102 = getelementptr inbounds %struct.mv, %struct.mv* %7, i64 3, i32 1
  %103 = load i16, i16* %102, align 2
  %104 = sitofp i16 %101 to double
  %105 = fmul double %104, %104
  %106 = sitofp i16 %103 to double
  %107 = fmul double %106, %106
  %108 = fadd double %105, %107
  %109 = tail call double @sqrt(double %108) #4
  %110 = fdiv double %109, %57
  %111 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 3
  %112 = fcmp ogt double %110, 1.000000e+00
  %113 = select i1 %112, double %110, double 1.000000e+00
  store double %113, double* %111, align 8
  %114 = fcmp olt double %48, 1.000000e-05
  %115 = select i1 %114, double 1.000000e-05, double %50
  %116 = icmp sgt i32 %5, 0
  br i1 %116, label %117, label %127

117:                                              ; preds = %44
  %118 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %119 = bitcast %union.anon.6* %118 to [2 x i32]*
  %120 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %121 = bitcast %union.anon.8* %120 to [3 x i8*]*
  %122 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 0, i32 1
  %123 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 0, i32 2
  %124 = bitcast [32 x [32 x i32]]* %15 to i8*
  %125 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 0
  %126 = zext i32 %5 to i64
  br label %128

127:                                              ; preds = %648, %44
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %53) #4
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %52) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #4
  ret void

128:                                              ; preds = %648, %117
  %129 = phi i64 [ 0, %117 ], [ %651, %648 ]
  %130 = phi i32 [ 0, %117 ], [ %650, %648 ]
  %131 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 %129, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = lshr i32 %22, %132
  %134 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i64 %129, i32 1
  %135 = load i32, i32* %134, align 4
  %136 = lshr i32 %25, %135
  %137 = icmp ne i64 %129, 0
  %138 = zext i1 %137 to i64
  %139 = getelementptr inbounds [2 x i32], [2 x i32]* %119, i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = mul i32 %133, %3
  %142 = mul i32 %141, %140
  %143 = mul i32 %136, %4
  %144 = add i32 %142, %143
  %145 = getelementptr inbounds [3 x i8*], [3 x i8*]* %121, i64 0, i64 %129
  %146 = load i8*, i8** %145, align 8
  %147 = sext i32 %144 to i64
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  %149 = load i32, i32* %122, align 4
  %150 = sub nsw i32 %135, %149
  %151 = load i32, i32* %123, align 8
  %152 = sub nsw i32 %132, %151
  %153 = icmp eq i64 %129, 0
  %154 = add nsw i32 %152, %150
  %155 = shl i32 1, %154
  %156 = add i32 %155, 25
  %157 = sitofp i32 %156 to double
  %158 = fdiv double 1.000000e+00, %157
  %159 = select i1 %153, double 4.000000e-02, double %158
  %160 = getelementptr inbounds double, double* %6, i64 %129
  %161 = load double, double* %160, align 8
  %162 = fmul double %161, 2.000000e+00
  %163 = fadd double %162, 5.000000e+00
  %164 = tail call double @log(double %163) #4
  %165 = fadd double %164, 5.000000e-01
  %166 = fmul double %45, %165
  %167 = fmul double %115, %166
  %168 = fdiv double 1.000000e+00, %167
  %169 = icmp eq i64 %129, 1
  %170 = icmp ne i32 %133, 0
  %171 = and i1 %169, %170
  br i1 %171, label %172, label %320

172:                                              ; preds = %128
  %173 = icmp eq i32 %136, 0
  %174 = shl i32 1, %152
  %175 = icmp eq i32 %152, 31
  %176 = shl i32 1, %150
  %177 = icmp eq i32 %150, 31
  %178 = sext i32 %176 to i64
  %179 = zext i32 %136 to i64
  %180 = icmp sgt i64 %178, 1
  %181 = select i1 %180, i64 %178, i64 1
  %182 = icmp sgt i64 %178, 1
  %183 = select i1 %182, i64 %178, i64 1
  %184 = add nsw i64 %183, -1
  %185 = and i64 %181, 9223372036854775800
  %186 = add nsw i64 %185, -8
  %187 = lshr exact i64 %186, 3
  %188 = add nuw nsw i64 %187, 1
  %189 = icmp ult i64 %181, 8
  %190 = trunc i64 %184 to i32
  %191 = icmp ugt i64 %184, 4294967295
  %192 = and i64 %181, 9223372036854775800
  %193 = and i64 %188, 1
  %194 = icmp eq i64 %186, 0
  %195 = sub nuw nsw i64 %188, %193
  %196 = icmp eq i64 %193, 0
  %197 = icmp eq i64 %181, %192
  br label %198

198:                                              ; preds = %215, %172
  %199 = phi i32 [ 0, %172 ], [ %216, %215 ]
  br i1 %173, label %215, label %200

200:                                              ; preds = %198
  %201 = shl i32 %199, %152
  %202 = shl i32 %199, 5
  %203 = mul i32 %201, 36
  %204 = or i32 %203, 2
  br label %205

205:                                              ; preds = %300, %200
  %206 = phi i64 [ 0, %200 ], [ %301, %300 ]
  br i1 %175, label %300, label %207

207:                                              ; preds = %205
  %208 = trunc i64 %206 to i32
  %209 = shl i32 %208, %150
  %210 = add i32 %209, 2
  %211 = add i32 %202, %208
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds [1024 x i32], [1024 x i32]* %18, i64 0, i64 %212
  %214 = add i32 %204, %209
  br label %218

215:                                              ; preds = %300, %198
  %216 = add nuw i32 %199, 1
  %217 = icmp eq i32 %216, %133
  br i1 %217, label %320, label %198

218:                                              ; preds = %207, %305
  %219 = phi i32 [ 0, %207 ], [ %306, %305 ]
  %220 = mul i32 %219, 36
  %221 = add i32 %214, %220
  br i1 %177, label %305, label %222

222:                                              ; preds = %218
  %223 = add i32 %219, %201
  %224 = mul nsw i32 %223, 36
  %225 = add i32 %210, %224
  %226 = load i32, i32* %213, align 4
  br i1 %189, label %227, label %230

227:                                              ; preds = %291, %230, %222
  %228 = phi i64 [ 0, %230 ], [ 0, %222 ], [ %192, %291 ]
  %229 = phi i32 [ %226, %230 ], [ %226, %222 ], [ %299, %291 ]
  br label %308

230:                                              ; preds = %222
  %231 = add i32 %221, %190
  %232 = icmp slt i32 %231, %221
  %233 = or i1 %232, %191
  br i1 %233, label %227, label %234

234:                                              ; preds = %230
  %235 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %226, i32 0
  br i1 %194, label %271, label %236

236:                                              ; preds = %234, %236
  %237 = phi i64 [ %268, %236 ], [ 0, %234 ]
  %238 = phi <4 x i32> [ %266, %236 ], [ %235, %234 ]
  %239 = phi <4 x i32> [ %267, %236 ], [ zeroinitializer, %234 ]
  %240 = phi i64 [ %269, %236 ], [ %195, %234 ]
  %241 = trunc i64 %237 to i32
  %242 = add i32 %225, %241
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 %243
  %245 = bitcast i16* %244 to <4 x i16>*
  %246 = load <4 x i16>, <4 x i16>* %245, align 2
  %247 = getelementptr inbounds i16, i16* %244, i64 4
  %248 = bitcast i16* %247 to <4 x i16>*
  %249 = load <4 x i16>, <4 x i16>* %248, align 2
  %250 = zext <4 x i16> %246 to <4 x i32>
  %251 = zext <4 x i16> %249 to <4 x i32>
  %252 = add <4 x i32> %238, %250
  %253 = add <4 x i32> %239, %251
  %254 = trunc i64 %237 to i32
  %255 = or i32 %254, 8
  %256 = add i32 %225, %255
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 %257
  %259 = bitcast i16* %258 to <4 x i16>*
  %260 = load <4 x i16>, <4 x i16>* %259, align 2
  %261 = getelementptr inbounds i16, i16* %258, i64 4
  %262 = bitcast i16* %261 to <4 x i16>*
  %263 = load <4 x i16>, <4 x i16>* %262, align 2
  %264 = zext <4 x i16> %260 to <4 x i32>
  %265 = zext <4 x i16> %263 to <4 x i32>
  %266 = add <4 x i32> %252, %264
  %267 = add <4 x i32> %253, %265
  %268 = add i64 %237, 16
  %269 = add i64 %240, -2
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %236, !llvm.loop !2

271:                                              ; preds = %236, %234
  %272 = phi <4 x i32> [ undef, %234 ], [ %266, %236 ]
  %273 = phi <4 x i32> [ undef, %234 ], [ %267, %236 ]
  %274 = phi i64 [ 0, %234 ], [ %268, %236 ]
  %275 = phi <4 x i32> [ %235, %234 ], [ %266, %236 ]
  %276 = phi <4 x i32> [ zeroinitializer, %234 ], [ %267, %236 ]
  br i1 %196, label %291, label %277

277:                                              ; preds = %271
  %278 = trunc i64 %274 to i32
  %279 = add i32 %225, %278
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 %280
  %282 = getelementptr inbounds i16, i16* %281, i64 4
  %283 = bitcast i16* %282 to <4 x i16>*
  %284 = load <4 x i16>, <4 x i16>* %283, align 2
  %285 = zext <4 x i16> %284 to <4 x i32>
  %286 = add <4 x i32> %276, %285
  %287 = bitcast i16* %281 to <4 x i16>*
  %288 = load <4 x i16>, <4 x i16>* %287, align 2
  %289 = zext <4 x i16> %288 to <4 x i32>
  %290 = add <4 x i32> %275, %289
  br label %291

291:                                              ; preds = %271, %277
  %292 = phi <4 x i32> [ %272, %271 ], [ %290, %277 ]
  %293 = phi <4 x i32> [ %273, %271 ], [ %286, %277 ]
  %294 = add <4 x i32> %293, %292
  %295 = shufflevector <4 x i32> %294, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %296 = add <4 x i32> %294, %295
  %297 = shufflevector <4 x i32> %296, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %298 = add <4 x i32> %296, %297
  %299 = extractelement <4 x i32> %298, i32 0
  br i1 %197, label %303, label %227

300:                                              ; preds = %305, %205
  %301 = add nuw nsw i64 %206, 1
  %302 = icmp eq i64 %301, %179
  br i1 %302, label %215, label %205

303:                                              ; preds = %308, %291
  %304 = phi i32 [ %299, %291 ], [ %317, %308 ]
  store i32 %304, i32* %213, align 4
  br label %305

305:                                              ; preds = %218, %303
  %306 = add nuw nsw i32 %219, 1
  %307 = icmp slt i32 %306, %174
  br i1 %307, label %218, label %300

308:                                              ; preds = %227, %308
  %309 = phi i64 [ %318, %308 ], [ %228, %227 ]
  %310 = phi i32 [ %317, %308 ], [ %229, %227 ]
  %311 = trunc i64 %309 to i32
  %312 = add i32 %225, %311
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 %313
  %315 = load i16, i16* %314, align 2
  %316 = zext i16 %315 to i32
  %317 = add i32 %310, %316
  %318 = add nuw nsw i64 %309, 1
  %319 = icmp slt i64 %318, %178
  br i1 %319, label %308, label %303, !llvm.loop !4

320:                                              ; preds = %215, %128
  %321 = sext i32 %130 to i64
  %322 = getelementptr inbounds i8, i8* %11, i64 %321
  %323 = getelementptr inbounds i32, i32* %12, i64 %321
  %324 = getelementptr inbounds i16, i16* %13, i64 %321
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %124) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %124, i8 -86, i64 4096, i1 false) #4
  %325 = icmp sgt i32 %133, 0
  br i1 %325, label %326, label %373

326:                                              ; preds = %320
  %327 = icmp sgt i32 %136, 0
  %328 = sext i32 %136 to i64
  %329 = zext i32 %140 to i64
  %330 = zext i32 %136 to i64
  br label %331

331:                                              ; preds = %338, %326
  %332 = phi i8* [ %148, %326 ], [ %342, %338 ]
  %333 = phi i8* [ %322, %326 ], [ %343, %338 ]
  %334 = phi i16* [ %125, %326 ], [ %344, %338 ]
  %335 = phi i32 [ 0, %326 ], [ %345, %338 ]
  br i1 %327, label %336, label %338

336:                                              ; preds = %331
  %337 = bitcast i16* %334 to i32*
  store i32 0, i32* %337, align 4
  br label %347

338:                                              ; preds = %347, %331
  %339 = getelementptr inbounds i16, i16* %334, i64 2
  %340 = getelementptr inbounds i16, i16* %339, i64 %328
  %341 = bitcast i16* %340 to i32*
  store i32 0, i32* %341, align 4
  %342 = getelementptr inbounds i8, i8* %332, i64 %329
  %343 = getelementptr inbounds i8, i8* %333, i64 %330
  %344 = getelementptr inbounds i16, i16* %334, i64 36
  %345 = add nuw nsw i32 %335, 1
  %346 = icmp eq i32 %345, %133
  br i1 %346, label %373, label %331

347:                                              ; preds = %347, %336
  %348 = phi i64 [ 0, %336 ], [ %371, %347 ]
  %349 = getelementptr inbounds i8, i8* %332, i64 %348
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1
  %352 = getelementptr inbounds i8, i8* %333, i64 %348
  %353 = bitcast i8* %352 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1
  %355 = icmp ugt <16 x i8> %351, %354
  %356 = select <16 x i1> %355, <16 x i8> %351, <16 x i8> %354
  %357 = icmp ult <16 x i8> %351, %354
  %358 = select <16 x i1> %357, <16 x i8> %351, <16 x i8> %354
  %359 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %356, <16 x i8> %358) #4
  %360 = shufflevector <16 x i8> %359, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %361 = shufflevector <16 x i8> %359, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %362 = bitcast <16 x i8> %360 to <8 x i16>
  %363 = mul <8 x i16> %362, %362
  %364 = bitcast <16 x i8> %361 to <8 x i16>
  %365 = mul <8 x i16> %364, %364
  %366 = getelementptr inbounds i16, i16* %334, i64 %348
  %367 = getelementptr inbounds i16, i16* %366, i64 2
  %368 = bitcast i16* %367 to <8 x i16>*
  store <8 x i16> %363, <8 x i16>* %368, align 1
  %369 = getelementptr inbounds i16, i16* %366, i64 10
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %365, <8 x i16>* %370, align 1
  %371 = add nuw nsw i64 %348, 16
  %372 = icmp slt i64 %371, %328
  br i1 %372, label %347, label %338

373:                                              ; preds = %338, %320
  %374 = icmp sgt i32 %136, 0
  br i1 %374, label %375, label %382

375:                                              ; preds = %373
  %376 = add nsw i32 %136, -4
  %377 = add nsw i32 %133, -4
  %378 = sext i32 %377 to i64
  %379 = sext i32 %376 to i64
  %380 = sext i32 %136 to i64
  %381 = zext i32 %133 to i64
  br label %390

382:                                              ; preds = %466, %373
  br i1 %325, label %383, label %648

383:                                              ; preds = %382
  %384 = lshr i32 %133, 1
  %385 = sdiv i32 %136, 2
  %386 = sext i32 %385 to i64
  %387 = zext i32 %384 to i64
  %388 = zext i32 %133 to i64
  %389 = zext i32 %136 to i64
  br label %549

390:                                              ; preds = %466, %375
  %391 = phi i64 [ 0, %375 ], [ %467, %466 ]
  %392 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i64 0, i64 %391
  %393 = icmp eq i64 %391, 0
  %394 = icmp slt i64 %391, %379
  %395 = bitcast i16* %392 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 8
  %397 = shufflevector <8 x i16> %396, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %398 = bitcast <8 x i16> %397 to <2 x i64>
  %399 = shufflevector <8 x i16> %396, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %400 = bitcast <8 x i16> %399 to <2 x i64>
  br i1 %393, label %407, label %411

401:                                              ; preds = %646
  %402 = bitcast <2 x i64> %647 to <4 x i32>
  %403 = getelementptr inbounds i16, i16* %392, i64 108
  %404 = or i64 %391, 1
  %405 = or i64 %391, 2
  %406 = or i64 %391, 3
  br label %428

407:                                              ; preds = %390
  %408 = bitcast <8 x i16> %397 to <4 x i32>
  %409 = shufflevector <4 x i32> %408, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 3>
  %410 = bitcast <4 x i32> %409 to <2 x i64>
  br label %411

411:                                              ; preds = %407, %390
  %412 = phi <2 x i64> [ %410, %407 ], [ %398, %390 ]
  %413 = bitcast <2 x i64> %412 to <4 x i32>
  br i1 %394, label %418, label %414

414:                                              ; preds = %411
  %415 = bitcast <8 x i16> %399 to <4 x i32>
  %416 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %417 = bitcast <4 x i32> %416 to <2 x i64>
  br label %418

418:                                              ; preds = %414, %411
  %419 = phi <2 x i64> [ %417, %414 ], [ %400, %411 ]
  %420 = getelementptr inbounds i16, i16* %392, i64 36
  %421 = bitcast i16* %420 to <8 x i16>*
  %422 = load <8 x i16>, <8 x i16>* %421, align 8
  %423 = shufflevector <8 x i16> %422, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %424 = bitcast <8 x i16> %423 to <2 x i64>
  %425 = shufflevector <8 x i16> %422, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %426 = bitcast <8 x i16> %425 to <2 x i64>
  %427 = bitcast <2 x i64> %419 to <4 x i32>
  br i1 %393, label %614, label %618

428:                                              ; preds = %491, %401
  %429 = phi <2 x i64> [ %647, %401 ], [ %492, %491 ]
  %430 = phi <2 x i64> [ %640, %401 ], [ %493, %491 ]
  %431 = phi <2 x i64> [ %626, %401 ], [ %429, %491 ]
  %432 = phi <2 x i64> [ %619, %401 ], [ %430, %491 ]
  %433 = phi <2 x i64> [ %419, %401 ], [ %431, %491 ]
  %434 = phi <2 x i64> [ %412, %401 ], [ %432, %491 ]
  %435 = phi <2 x i64> [ %419, %401 ], [ %433, %491 ]
  %436 = phi <2 x i64> [ %412, %401 ], [ %434, %491 ]
  %437 = phi <4 x i32> [ %402, %401 ], [ %494, %491 ]
  %438 = phi <4 x i32> [ %641, %401 ], [ %495, %491 ]
  %439 = phi <4 x i32> [ %634, %401 ], [ %465, %491 ]
  %440 = phi <4 x i32> [ %620, %401 ], [ %464, %491 ]
  %441 = phi <4 x i32> [ %427, %401 ], [ %463, %491 ]
  %442 = phi <4 x i32> [ %413, %401 ], [ %462, %491 ]
  %443 = phi <4 x i32> [ %427, %401 ], [ %461, %491 ]
  %444 = phi <4 x i32> [ %413, %401 ], [ %460, %491 ]
  %445 = phi <4 x i32> [ %427, %401 ], [ %459, %491 ]
  %446 = phi <4 x i32> [ %413, %401 ], [ %458, %491 ]
  %447 = phi i64 [ 0, %401 ], [ %547, %491 ]
  %448 = phi i16* [ %403, %401 ], [ %496, %491 ]
  %449 = add <4 x i32> %440, %438
  %450 = add <4 x i32> %449, %442
  %451 = add <4 x i32> %450, %444
  %452 = add <4 x i32> %451, %446
  %453 = add <4 x i32> %439, %437
  %454 = add <4 x i32> %453, %441
  %455 = add <4 x i32> %454, %443
  %456 = add <4 x i32> %455, %445
  %457 = icmp sgt i64 %447, %378
  %458 = bitcast <2 x i64> %436 to <4 x i32>
  %459 = bitcast <2 x i64> %435 to <4 x i32>
  %460 = bitcast <2 x i64> %434 to <4 x i32>
  %461 = bitcast <2 x i64> %433 to <4 x i32>
  %462 = bitcast <2 x i64> %432 to <4 x i32>
  %463 = bitcast <2 x i64> %431 to <4 x i32>
  %464 = bitcast <2 x i64> %430 to <4 x i32>
  %465 = bitcast <2 x i64> %429 to <4 x i32>
  br i1 %457, label %491, label %469

466:                                              ; preds = %491, %646
  %467 = add nuw nsw i64 %391, 4
  %468 = icmp slt i64 %467, %380
  br i1 %468, label %390, label %382

469:                                              ; preds = %428
  %470 = bitcast i16* %448 to <8 x i16>*
  %471 = load <8 x i16>, <8 x i16>* %470, align 1
  %472 = shufflevector <8 x i16> %471, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %473 = bitcast <8 x i16> %472 to <2 x i64>
  %474 = shufflevector <8 x i16> %471, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %475 = bitcast <8 x i16> %474 to <2 x i64>
  br i1 %393, label %476, label %480

476:                                              ; preds = %469
  %477 = bitcast <8 x i16> %472 to <4 x i32>
  %478 = shufflevector <4 x i32> %477, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 3>
  %479 = bitcast <4 x i32> %478 to <2 x i64>
  br label %480

480:                                              ; preds = %476, %469
  %481 = phi <2 x i64> [ %479, %476 ], [ %473, %469 ]
  %482 = bitcast <2 x i64> %481 to <4 x i32>
  br i1 %394, label %487, label %483

483:                                              ; preds = %480
  %484 = bitcast <8 x i16> %474 to <4 x i32>
  %485 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  br label %487

487:                                              ; preds = %483, %480
  %488 = phi <2 x i64> [ %486, %483 ], [ %475, %480 ]
  %489 = getelementptr inbounds i16, i16* %448, i64 36
  %490 = bitcast <2 x i64> %488 to <4 x i32>
  br label %491

491:                                              ; preds = %487, %428
  %492 = phi <2 x i64> [ %488, %487 ], [ %429, %428 ]
  %493 = phi <2 x i64> [ %481, %487 ], [ %430, %428 ]
  %494 = phi <4 x i32> [ %490, %487 ], [ %465, %428 ]
  %495 = phi <4 x i32> [ %482, %487 ], [ %464, %428 ]
  %496 = phi i16* [ %489, %487 ], [ %448, %428 ]
  %497 = and <4 x i32> %456, <i32 -1, i32 0, i32 0, i32 0>
  %498 = add <4 x i32> %497, %452
  %499 = bitcast <4 x i32> %498 to <16 x i8>
  %500 = shufflevector <16 x i8> %499, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %501 = bitcast <16 x i8> %500 to <4 x i32>
  %502 = add <4 x i32> %498, %501
  %503 = bitcast <4 x i32> %502 to <16 x i8>
  %504 = shufflevector <16 x i8> %503, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %505 = bitcast <16 x i8> %504 to <4 x i32>
  %506 = add <4 x i32> %502, %505
  %507 = extractelement <4 x i32> %506, i32 0
  %508 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %447, i64 %391
  store i32 %507, i32* %508, align 16
  %509 = and <4 x i32> %452, <i32 0, i32 -1, i32 -1, i32 -1>
  %510 = and <4 x i32> %456, <i32 -1, i32 -1, i32 0, i32 0>
  %511 = add <4 x i32> %509, %510
  %512 = bitcast <4 x i32> %511 to <16 x i8>
  %513 = shufflevector <16 x i8> %512, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %514 = bitcast <16 x i8> %513 to <4 x i32>
  %515 = add <4 x i32> %511, %514
  %516 = bitcast <4 x i32> %515 to <16 x i8>
  %517 = shufflevector <16 x i8> %516, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %518 = bitcast <16 x i8> %517 to <4 x i32>
  %519 = add <4 x i32> %515, %518
  %520 = extractelement <4 x i32> %519, i32 0
  %521 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %447, i64 %404
  store i32 %520, i32* %521, align 4
  %522 = and <4 x i32> %452, <i32 0, i32 0, i32 -1, i32 -1>
  %523 = and <4 x i32> %456, <i32 -1, i32 -1, i32 -1, i32 0>
  %524 = add <4 x i32> %522, %523
  %525 = bitcast <4 x i32> %524 to <16 x i8>
  %526 = shufflevector <16 x i8> %525, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %527 = bitcast <16 x i8> %526 to <4 x i32>
  %528 = add <4 x i32> %524, %527
  %529 = bitcast <4 x i32> %528 to <16 x i8>
  %530 = shufflevector <16 x i8> %529, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %531 = bitcast <16 x i8> %530 to <4 x i32>
  %532 = add <4 x i32> %528, %531
  %533 = extractelement <4 x i32> %532, i32 0
  %534 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %447, i64 %405
  store i32 %533, i32* %534, align 8
  %535 = and <4 x i32> %452, <i32 0, i32 0, i32 0, i32 -1>
  %536 = add <4 x i32> %535, %456
  %537 = bitcast <4 x i32> %536 to <16 x i8>
  %538 = shufflevector <16 x i8> %537, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %539 = bitcast <16 x i8> %538 to <4 x i32>
  %540 = add <4 x i32> %536, %539
  %541 = bitcast <4 x i32> %540 to <16 x i8>
  %542 = shufflevector <16 x i8> %541, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %543 = bitcast <16 x i8> %542 to <4 x i32>
  %544 = add <4 x i32> %540, %543
  %545 = extractelement <4 x i32> %544, i32 0
  %546 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %447, i64 %406
  store i32 %545, i32* %546, align 4
  %547 = add nuw nsw i64 %447, 1
  %548 = icmp eq i64 %547, %381
  br i1 %548, label %466, label %428

549:                                              ; preds = %563, %383
  %550 = phi i64 [ 0, %383 ], [ %565, %563 ]
  %551 = phi i32 [ 0, %383 ], [ %564, %563 ]
  br i1 %374, label %552, label %563

552:                                              ; preds = %549
  %553 = trunc i64 %550 to i32
  %554 = mul i32 %136, %553
  %555 = shl i64 %550, 5
  %556 = icmp uge i64 %550, %387
  %557 = zext i1 %556 to i64
  %558 = shl nuw nsw i64 %557, 1
  %559 = and i64 %555, 4294967264
  %560 = sext i32 %551 to i64
  br label %567

561:                                              ; preds = %567
  %562 = trunc i64 %612 to i32
  br label %563

563:                                              ; preds = %561, %549
  %564 = phi i32 [ %551, %549 ], [ %562, %561 ]
  %565 = add nuw nsw i64 %550, 1
  %566 = icmp eq i64 %565, %388
  br i1 %566, label %648, label %549

567:                                              ; preds = %567, %552
  %568 = phi i64 [ %560, %552 ], [ %612, %567 ]
  %569 = phi i64 [ 0, %552 ], [ %611, %567 ]
  %570 = trunc i64 %569 to i32
  %571 = add i32 %554, %570
  %572 = zext i32 %571 to i64
  %573 = getelementptr inbounds i8, i8* %322, i64 %572
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  %576 = getelementptr inbounds [32 x [32 x i32]], [32 x [32 x i32]]* %15, i64 0, i64 %550, i64 %569
  %577 = load i32, i32* %576, align 4
  %578 = add nuw nsw i64 %569, %559
  %579 = getelementptr inbounds [1024 x i32], [1024 x i32]* %18, i64 0, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = add i32 %580, %577
  %582 = uitofp i32 %581 to double
  %583 = fmul double %159, %582
  %584 = icmp sge i64 %569, %386
  %585 = zext i1 %584 to i64
  %586 = or i64 %558, %585
  %587 = getelementptr inbounds i32, i32* %8, i64 %586
  %588 = load i32, i32* %587, align 4
  %589 = sitofp i32 %588 to double
  %590 = fmul double %583, 0x3FA5555555555555
  %591 = fmul double %589, 0x3F81111111111111
  %592 = fadd double %591, %590
  %593 = getelementptr inbounds [4 x double], [4 x double]* %16, i64 0, i64 %586
  %594 = load double, double* %593, align 8
  %595 = fmul double %594, %592
  %596 = fmul double %168, %595
  %597 = fcmp olt double %596, 7.000000e+00
  %598 = select i1 %597, double %596, double 7.000000e+00
  %599 = fsub double -0.000000e+00, %598
  %600 = tail call double @exp(double %599) #4
  %601 = fmul double %600, 1.000000e+03
  %602 = fptosi double %601 to i32
  %603 = getelementptr inbounds i16, i16* %324, i64 %568
  %604 = load i16, i16* %603, align 2
  %605 = trunc i32 %602 to i16
  %606 = add i16 %604, %605
  store i16 %606, i16* %603, align 2
  %607 = mul nsw i32 %602, %575
  %608 = getelementptr inbounds i32, i32* %323, i64 %568
  %609 = load i32, i32* %608, align 4
  %610 = add i32 %609, %607
  store i32 %610, i32* %608, align 4
  %611 = add nuw nsw i64 %569, 1
  %612 = add nsw i64 %568, 1
  %613 = icmp eq i64 %611, %389
  br i1 %613, label %561, label %567

614:                                              ; preds = %418
  %615 = bitcast <8 x i16> %423 to <4 x i32>
  %616 = shufflevector <4 x i32> %615, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 3>
  %617 = bitcast <4 x i32> %616 to <2 x i64>
  br label %618

618:                                              ; preds = %614, %418
  %619 = phi <2 x i64> [ %617, %614 ], [ %424, %418 ]
  %620 = bitcast <2 x i64> %619 to <4 x i32>
  br i1 %394, label %625, label %621

621:                                              ; preds = %618
  %622 = bitcast <8 x i16> %425 to <4 x i32>
  %623 = shufflevector <4 x i32> %622, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %624 = bitcast <4 x i32> %623 to <2 x i64>
  br label %625

625:                                              ; preds = %621, %618
  %626 = phi <2 x i64> [ %624, %621 ], [ %426, %618 ]
  %627 = getelementptr inbounds i16, i16* %392, i64 72
  %628 = bitcast i16* %627 to <8 x i16>*
  %629 = load <8 x i16>, <8 x i16>* %628, align 8
  %630 = shufflevector <8 x i16> %629, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %631 = bitcast <8 x i16> %630 to <2 x i64>
  %632 = shufflevector <8 x i16> %629, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %633 = bitcast <8 x i16> %632 to <2 x i64>
  %634 = bitcast <2 x i64> %626 to <4 x i32>
  br i1 %393, label %635, label %639

635:                                              ; preds = %625
  %636 = bitcast <8 x i16> %630 to <4 x i32>
  %637 = shufflevector <4 x i32> %636, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 3>
  %638 = bitcast <4 x i32> %637 to <2 x i64>
  br label %639

639:                                              ; preds = %635, %625
  %640 = phi <2 x i64> [ %638, %635 ], [ %631, %625 ]
  %641 = bitcast <2 x i64> %640 to <4 x i32>
  br i1 %394, label %646, label %642

642:                                              ; preds = %639
  %643 = bitcast <8 x i16> %632 to <4 x i32>
  %644 = shufflevector <4 x i32> %643, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  br label %646

646:                                              ; preds = %642, %639
  %647 = phi <2 x i64> [ %645, %642 ], [ %633, %639 ]
  br i1 %325, label %401, label %466

648:                                              ; preds = %563, %382
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %124) #4
  %649 = mul i32 %136, %133
  %650 = add i32 %649, %130
  %651 = add nuw nsw i64 %129, 1
  %652 = icmp eq i64 %651, %126
  br i1 %652, label %127, label %128
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
