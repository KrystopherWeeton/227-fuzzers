; ModuleID = '../../third_party/pdfium/core/fxge/cfx_face.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_face.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.11", %"class.fxcrt::RetainPtr" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %struct.FT_FaceRec_* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::Retainable"* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.1" = type { %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.CFX_Face* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%struct.FT_Open_Args_ = type { i32, i8*, i64, i8*, %struct.FT_StreamRec_*, %struct.FT_ModuleRec_*, i32, %struct.FT_Parameter_* }
%struct.FT_ModuleRec_ = type opaque
%struct.FT_Parameter_ = type { i64, i8* }

$_ZN5fxcrt10RetainableD2Ev = comdat any

$_ZN5fxcrt10RetainableD0Ev = comdat any

$_ZTVN5fxcrt10RetainableE = comdat any

@_ZTV8CFX_Face = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_Face*)* @_ZN8CFX_FaceD2Ev to i8*), i8* bitcast (void (%class.CFX_Face*)* @_ZN8CFX_FaceD0Ev to i8*)] }, align 8
@_ZTVN5fxcrt10RetainableE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD2Ev to i8*), i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD0Ev to i8*)] }, comdat, align 8

@_ZN8CFX_FaceC1EP11FT_FaceRec_RKN5fxcrt9RetainPtrINS2_10RetainableEEE = hidden unnamed_addr alias void (%class.CFX_Face*, %struct.FT_FaceRec_*, %"class.fxcrt::RetainPtr"*), void (%class.CFX_Face*, %struct.FT_FaceRec_*, %"class.fxcrt::RetainPtr"*)* @_ZN8CFX_FaceC2EP11FT_FaceRec_RKN5fxcrt9RetainPtrINS2_10RetainableEEE
@_ZN8CFX_FaceD1Ev = hidden unnamed_addr alias void (%class.CFX_Face*), void (%class.CFX_Face*)* @_ZN8CFX_FaceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8CFX_Face3NewEP14FT_LibraryRec_RKN5fxcrt9RetainPtrINS2_10RetainableEEEN6pdfium4spanIKhEEl(%"class.fxcrt::RetainPtr.1"* noalias nocapture sret, %struct.FT_LibraryRec_*, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), %"class.pdfium::span"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.FT_FaceRec_*, align 8
  %7 = bitcast %struct.FT_FaceRec_** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %6, align 8
  %8 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = call i32 @FT_New_Memory_Face(%struct.FT_LibraryRec_* %1, i8* %9, i64 %11, i64 %4, %struct.FT_FaceRec_** nonnull %6) #6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %5
  %15 = bitcast %"class.fxcrt::RetainPtr.1"* %0 to i64*
  store i64 0, i64* %15, align 8
  br label %42

16:                                               ; preds = %5
  %17 = call i8* @_Znwm(i64 56) #7
  %18 = bitcast %struct.FT_FaceRec_** %6 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i8* %17 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %21 = getelementptr inbounds i8, i8* %17, i64 8
  %22 = bitcast i8* %21 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds i8, i8* %17, i64 16
  %24 = bitcast i8* %23 to %"class.fxcrt::Observable"*
  call void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"* %24) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV8CFX_Face, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %20, align 8
  %25 = getelementptr inbounds i8, i8* %17, i64 40
  %26 = bitcast i8* %25 to i64*
  store i64 %19, i64* %26, align 8
  %27 = getelementptr inbounds i8, i8* %17, i64 48
  %28 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load %"class.fxcrt::Retainable"*, %"class.fxcrt::Retainable"** %28, align 8
  %30 = ptrtoint %"class.fxcrt::Retainable"* %29 to i64
  %31 = bitcast i8* %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = icmp eq %"class.fxcrt::Retainable"* %29, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %16
  %34 = getelementptr inbounds %"class.fxcrt::Retainable", %"class.fxcrt::Retainable"* %29, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add nsw i64 %35, 1
  store i64 %36, i64* %34, align 8
  br label %37

37:                                               ; preds = %16, %33
  %38 = ptrtoint i8* %17 to i64
  %39 = bitcast %"class.fxcrt::RetainPtr.1"* %0 to i64*
  store i64 %38, i64* %39, align 8, !alias.scope !2
  %40 = load i64, i64* %22, align 8, !noalias !2
  %41 = add nsw i64 %40, 1
  store i64 %41, i64* %22, align 8, !noalias !2
  br label %42

42:                                               ; preds = %37, %14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @FT_New_Memory_Face(%struct.FT_LibraryRec_*, i8*, i64, i64, %struct.FT_FaceRec_**) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8CFX_Face4OpenEP14FT_LibraryRec_PK13FT_Open_Args_l(%"class.fxcrt::RetainPtr.1"* noalias nocapture sret, %struct.FT_LibraryRec_*, %struct.FT_Open_Args_*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.FT_FaceRec_*, align 8
  %6 = bitcast %struct.FT_FaceRec_** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %5, align 8
  %7 = call i32 @FT_Open_Face(%struct.FT_LibraryRec_* %1, %struct.FT_Open_Args_* %2, i64 %3, %struct.FT_FaceRec_** nonnull %5) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = bitcast %"class.fxcrt::RetainPtr.1"* %0 to i64*
  store i64 0, i64* %10, align 8
  br label %28

11:                                               ; preds = %4
  %12 = call i8* @_Znwm(i64 56) #7
  %13 = bitcast %struct.FT_FaceRec_** %5 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds i8, i8* %12, i64 8
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %12, i64 16
  %19 = bitcast i8* %18 to %"class.fxcrt::Observable"*
  call void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"* %19) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV8CFX_Face, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %20 = getelementptr inbounds i8, i8* %12, i64 40
  %21 = bitcast i8* %20 to i64*
  store i64 %14, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %12, i64 48
  %23 = bitcast i8* %22 to i64*
  store i64 0, i64* %23, align 8
  %24 = ptrtoint i8* %12 to i64
  %25 = bitcast %"class.fxcrt::RetainPtr.1"* %0 to i64*
  store i64 %24, i64* %25, align 8, !alias.scope !5
  %26 = load i64, i64* %17, align 8, !noalias !5
  %27 = add nsw i64 %26, 1
  store i64 %27, i64* %17, align 8, !noalias !5
  br label %28

28:                                               ; preds = %11, %9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret void
}

declare i32 @FT_Open_Face(%struct.FT_LibraryRec_*, %struct.FT_Open_Args_*, i64, %struct.FT_FaceRec_**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8CFX_FaceC2EP11FT_FaceRec_RKN5fxcrt9RetainPtrINS2_10RetainableEEE(%class.CFX_Face*, %struct.FT_FaceRec_*, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"* %6) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV8CFX_Face, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 2
  %8 = ptrtoint %struct.FT_FaceRec_* %1 to i64
  %9 = bitcast %"class.std::__1::unique_ptr.11"* %7 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %"class.fxcrt::Retainable"*, %"class.fxcrt::Retainable"** %11, align 8
  %13 = ptrtoint %"class.fxcrt::Retainable"* %12 to i64
  %14 = bitcast %"class.fxcrt::RetainPtr"* %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = icmp eq %"class.fxcrt::Retainable"* %12, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.fxcrt::Retainable", %"class.fxcrt::Retainable"* %12, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add nsw i64 %18, 1
  store i64 %19, i64* %17, align 8
  br label %20

20:                                               ; preds = %3, %16
  ret void
}

declare void @_ZN5fxcrt10ObservableC2Ev(%"class.fxcrt::Observable"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8CFX_FaceD2Ev(%class.CFX_Face*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV8CFX_Face, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.fxcrt::Retainable"*, %"class.fxcrt::Retainable"** %3, align 8
  store %"class.fxcrt::Retainable"* null, %"class.fxcrt::Retainable"** %3, align 8
  %5 = icmp eq %"class.fxcrt::Retainable"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.fxcrt::Retainable", %"class.fxcrt::Retainable"* %4, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = bitcast %"class.fxcrt::Retainable"* %4 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %4) #6
  br label %16

16:                                               ; preds = %1, %6, %11
  %17 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %17, align 8
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %17, align 8
  %19 = icmp eq %struct.FT_FaceRec_* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = tail call i32 @FT_Done_Face(%struct.FT_FaceRec_* nonnull %18) #6
  br label %22

22:                                               ; preds = %16, %20
  %23 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %23) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8CFX_FaceD0Ev(%class.CFX_Face*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV8CFX_Face, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.fxcrt::Retainable"*, %"class.fxcrt::Retainable"** %3, align 8
  store %"class.fxcrt::Retainable"* null, %"class.fxcrt::Retainable"** %3, align 8
  %5 = icmp eq %"class.fxcrt::Retainable"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.fxcrt::Retainable", %"class.fxcrt::Retainable"* %4, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = bitcast %"class.fxcrt::Retainable"* %4 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %4) #6
  br label %16

16:                                               ; preds = %11, %6, %1
  %17 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %17, align 8
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %17, align 8
  %19 = icmp eq %struct.FT_FaceRec_* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %16
  %21 = tail call i32 @FT_Done_Face(%struct.FT_FaceRec_* nonnull %18) #6
  br label %22

22:                                               ; preds = %16, %20
  %23 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10ObservableD2Ev(%"class.fxcrt::Observable"* %23) #6
  %24 = bitcast %class.CFX_Face* %0 to i8*
  tail call void @_ZdlPv(i8* %24) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD2Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD0Ev(%"class.fxcrt::Retainable"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.fxcrt::Retainable"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

declare i32 @FT_Done_Face(%struct.FT_FaceRec_*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6pdfium10WrapRetainI8CFX_FaceEEN5fxcrt9RetainPtrIT_EEPS4_: argument 0"}
!4 = distinct !{!4, !"_ZN6pdfium10WrapRetainI8CFX_FaceEEN5fxcrt9RetainPtrIT_EEPS4_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6pdfium10WrapRetainI8CFX_FaceEEN5fxcrt9RetainPtrIT_EEPS4_: argument 0"}
!7 = distinct !{!7, !"_ZN6pdfium10WrapRetainI8CFX_FaceEEN5fxcrt9RetainPtrIT_EEPS4_"}
