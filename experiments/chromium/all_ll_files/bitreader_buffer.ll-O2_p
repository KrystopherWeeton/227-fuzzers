; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/bitreader_buffer.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/bitreader_buffer.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_read_bit_buffer = type { i8*, i8*, i64, i8*, void (i8*)* }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @vpx_rb_bytes_read(%struct.vpx_read_bit_buffer* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 7
  %5 = lshr i64 %4, 3
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_rb_read_bit(%struct.vpx_read_bit_buffer* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 3
  %5 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 %4
  %8 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ult i8* %7, %9
  br i1 %10, label %11, label %20

11:                                               ; preds = %1
  %12 = trunc i64 %3 to i32
  %13 = and i32 %12, 7
  %14 = xor i32 %13, 7
  %15 = load i8, i8* %7, align 1
  %16 = zext i8 %15 to i32
  %17 = lshr i32 %16, %14
  %18 = and i32 %17, 1
  %19 = add i64 %3, 1
  store i64 %19, i64* %2, align 8
  br label %27

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %22 = load void (i8*)*, void (i8*)** %21, align 8
  %23 = icmp eq void (i8*)* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  %26 = load i8*, i8** %25, align 8
  tail call void %22(i8* %26) #2
  br label %27

27:                                               ; preds = %24, %20, %11
  %28 = phi i32 [ %18, %11 ], [ 0, %20 ], [ 0, %24 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_rb_read_literal(%struct.vpx_read_bit_buffer* nocapture, i32) local_unnamed_addr #1 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %39

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %9 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  br label %10

10:                                               ; preds = %4, %34
  %11 = phi i32 [ %1, %4 ], [ %13, %34 ]
  %12 = phi i32 [ 0, %4 ], [ %37, %34 ]
  %13 = add nsw i32 %11, -1
  %14 = load i64, i64* %5, align 8
  %15 = lshr i64 %14, 3
  %16 = load i8*, i8** %6, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %15
  %18 = load i8*, i8** %7, align 8
  %19 = icmp ult i8* %17, %18
  br i1 %19, label %20, label %29

20:                                               ; preds = %10
  %21 = trunc i64 %14 to i32
  %22 = and i32 %21, 7
  %23 = xor i32 %22, 7
  %24 = load i8, i8* %17, align 1
  %25 = zext i8 %24 to i32
  %26 = lshr i32 %25, %23
  %27 = and i32 %26, 1
  %28 = add i64 %14, 1
  store i64 %28, i64* %5, align 8
  br label %34

29:                                               ; preds = %10
  %30 = load void (i8*)*, void (i8*)** %8, align 8
  %31 = icmp eq void (i8*)* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = load i8*, i8** %9, align 8
  tail call void %30(i8* %33) #2
  br label %34

34:                                               ; preds = %20, %29, %32
  %35 = phi i32 [ %27, %20 ], [ 0, %29 ], [ 0, %32 ]
  %36 = shl i32 %35, %13
  %37 = or i32 %36, %12
  %38 = icmp sgt i32 %13, 0
  br i1 %38, label %10, label %39

39:                                               ; preds = %34, %2
  %40 = phi i32 [ 0, %2 ], [ %37, %34 ]
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_rb_read_signed_literal(%struct.vpx_read_bit_buffer* nocapture, i32) local_unnamed_addr #1 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %39

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %9 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  br label %10

10:                                               ; preds = %34, %4
  %11 = phi i32 [ %1, %4 ], [ %13, %34 ]
  %12 = phi i32 [ 0, %4 ], [ %37, %34 ]
  %13 = add nsw i32 %11, -1
  %14 = load i64, i64* %5, align 8
  %15 = lshr i64 %14, 3
  %16 = load i8*, i8** %6, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %15
  %18 = load i8*, i8** %7, align 8
  %19 = icmp ult i8* %17, %18
  br i1 %19, label %20, label %29

20:                                               ; preds = %10
  %21 = trunc i64 %14 to i32
  %22 = and i32 %21, 7
  %23 = xor i32 %22, 7
  %24 = load i8, i8* %17, align 1
  %25 = zext i8 %24 to i32
  %26 = lshr i32 %25, %23
  %27 = and i32 %26, 1
  %28 = add i64 %14, 1
  store i64 %28, i64* %5, align 8
  br label %34

29:                                               ; preds = %10
  %30 = load void (i8*)*, void (i8*)** %8, align 8
  %31 = icmp eq void (i8*)* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = load i8*, i8** %9, align 8
  tail call void %30(i8* %33) #2
  br label %34

34:                                               ; preds = %32, %29, %20
  %35 = phi i32 [ %27, %20 ], [ 0, %29 ], [ 0, %32 ]
  %36 = shl i32 %35, %13
  %37 = or i32 %36, %12
  %38 = icmp sgt i32 %13, 0
  br i1 %38, label %10, label %39

39:                                               ; preds = %34, %2
  %40 = phi i32 [ 0, %2 ], [ %37, %34 ]
  %41 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = lshr i64 %42, 3
  %44 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %43
  %47 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ult i8* %46, %48
  br i1 %49, label %57, label %50

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %52 = load void (i8*)*, void (i8*)** %51, align 8
  %53 = icmp eq void (i8*)* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  tail call void %52(i8* %56) #2
  br label %68

57:                                               ; preds = %39
  %58 = trunc i64 %42 to i32
  %59 = and i32 %58, 7
  %60 = xor i32 %59, 7
  %61 = load i8, i8* %46, align 1
  %62 = zext i8 %61 to i32
  %63 = add i64 %42, 1
  store i64 %63, i64* %41, align 8
  %64 = shl i32 1, %60
  %65 = and i32 %64, %62
  %66 = icmp eq i32 %65, 0
  %67 = sub nsw i32 0, %40
  br i1 %66, label %68, label %69

68:                                               ; preds = %54, %50, %57
  br label %69

69:                                               ; preds = %57, %68
  %70 = phi i32 [ %40, %68 ], [ %67, %57 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_rb_read_inv_signed_literal(%struct.vpx_read_bit_buffer* nocapture, i32) local_unnamed_addr #1 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %39

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %9 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  br label %10

10:                                               ; preds = %34, %4
  %11 = phi i32 [ %1, %4 ], [ %13, %34 ]
  %12 = phi i32 [ 0, %4 ], [ %37, %34 ]
  %13 = add nsw i32 %11, -1
  %14 = load i64, i64* %5, align 8
  %15 = lshr i64 %14, 3
  %16 = load i8*, i8** %6, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %15
  %18 = load i8*, i8** %7, align 8
  %19 = icmp ult i8* %17, %18
  br i1 %19, label %20, label %29

20:                                               ; preds = %10
  %21 = trunc i64 %14 to i32
  %22 = and i32 %21, 7
  %23 = xor i32 %22, 7
  %24 = load i8, i8* %17, align 1
  %25 = zext i8 %24 to i32
  %26 = lshr i32 %25, %23
  %27 = and i32 %26, 1
  %28 = add i64 %14, 1
  store i64 %28, i64* %5, align 8
  br label %34

29:                                               ; preds = %10
  %30 = load void (i8*)*, void (i8*)** %8, align 8
  %31 = icmp eq void (i8*)* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = load i8*, i8** %9, align 8
  tail call void %30(i8* %33) #2
  br label %34

34:                                               ; preds = %32, %29, %20
  %35 = phi i32 [ %27, %20 ], [ 0, %29 ], [ 0, %32 ]
  %36 = shl i32 %35, %13
  %37 = or i32 %36, %12
  %38 = icmp sgt i32 %13, 0
  br i1 %38, label %10, label %39

39:                                               ; preds = %34, %2
  %40 = phi i32 [ 0, %2 ], [ %37, %34 ]
  %41 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = lshr i64 %42, 3
  %44 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %43
  %47 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ult i8* %46, %48
  br i1 %49, label %57, label %50

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 4
  %52 = load void (i8*)*, void (i8*)** %51, align 8
  %53 = icmp eq void (i8*)* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.vpx_read_bit_buffer, %struct.vpx_read_bit_buffer* %0, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  tail call void %52(i8* %56) #2
  br label %68

57:                                               ; preds = %39
  %58 = trunc i64 %42 to i32
  %59 = and i32 %58, 7
  %60 = xor i32 %59, 7
  %61 = load i8, i8* %46, align 1
  %62 = zext i8 %61 to i32
  %63 = add i64 %42, 1
  store i64 %63, i64* %41, align 8
  %64 = shl i32 1, %60
  %65 = and i32 %64, %62
  %66 = icmp eq i32 %65, 0
  %67 = sub nsw i32 0, %40
  br i1 %66, label %68, label %69

68:                                               ; preds = %57, %54, %50
  br label %69

69:                                               ; preds = %57, %68
  %70 = phi i32 [ %40, %68 ], [ %67, %57 ]
  ret i32 %70
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
