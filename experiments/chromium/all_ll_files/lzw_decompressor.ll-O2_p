; ModuleID = '../../third_party/pdfium/core/fxcodec/gif/lzw_decompressor.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/gif/lzw_decompressor.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::LZWDecompressor" = type <{ i8, i8, i16, i16, i16, i16, i8, [5 x i8], %"class.std::__1::vector", i64, i16, [6 x i8], i8*, i32, i8, [3 x i8], i32, [4096 x %"struct.fxcodec::LZWDecompressor::CodeEntry"], [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { i8* }
%"struct.fxcodec::LZWDecompressor::CodeEntry" = type { i16, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

@_ZN7fxcodec15LZWDecompressorC1Ehh = hidden unnamed_addr alias void (%"class.fxcodec::LZWDecompressor"*, i8, i8), void (%"class.fxcodec::LZWDecompressor"*, i8, i8)* @_ZN7fxcodec15LZWDecompressorC2Ehh
@_ZN7fxcodec15LZWDecompressorD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::LZWDecompressor"*), void (%"class.fxcodec::LZWDecompressor"*)* @_ZN7fxcodec15LZWDecompressorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::LZWDecompressor"* @_ZN7fxcodec15LZWDecompressor6CreateEhh(i8 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = icmp ult i8 %1, 13
  %4 = icmp ult i8 %0, %1
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %34

6:                                                ; preds = %2
  %7 = tail call i8* @_Znwm(i64 16464) #6
  %8 = bitcast i8* %7 to %"class.fxcodec::LZWDecompressor"*
  store i8 %1, i8* %7, align 8
  %9 = getelementptr inbounds i8, i8* %7, i64 1
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %7, i64 2
  %11 = bitcast i8* %10 to i16*
  %12 = zext i8 %0 to i32
  %13 = shl i32 2, %12
  %14 = trunc i32 %13 to i16
  store i16 %14, i16* %11, align 2
  %15 = getelementptr inbounds i8, i8* %7, i64 4
  %16 = bitcast i8* %15 to i16*
  %17 = zext i8 %1 to i32
  %18 = shl i32 1, %17
  %19 = trunc i32 %18 to i16
  store i16 %19, i16* %16, align 4
  %20 = getelementptr inbounds i8, i8* %7, i64 6
  %21 = bitcast i8* %20 to i16*
  %22 = add nuw nsw i16 %19, 1
  store i16 %22, i16* %21, align 2
  %23 = getelementptr inbounds i8, i8* %7, i64 8
  %24 = bitcast i8* %23 to i16*
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds i8, i8* %7, i64 10
  store i8 0, i8* %25, align 2
  %26 = getelementptr inbounds i8, i8* %7, i64 16
  %27 = getelementptr inbounds i8, i8* %7, i64 56
  %28 = bitcast i8* %27 to i8**
  store i8* null, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %7, i64 64
  %30 = bitcast i8* %29 to i32*
  store i32 0, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %7, i64 68
  store i8 0, i8* %31, align 4
  %32 = getelementptr inbounds i8, i8* %7, i64 72
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 34, i1 false) #7
  br label %34

34:                                               ; preds = %2, %6
  %35 = phi %"class.fxcodec::LZWDecompressor"* [ %8, %6 ], [ null, %2 ]
  ret %"class.fxcodec::LZWDecompressor"* %35
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec15LZWDecompressorC2Ehh(%"class.fxcodec::LZWDecompressor"* nocapture, i8 zeroext, i8 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 0
  store i8 %2, i8* %4, align 8
  %5 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 2
  %7 = zext i8 %1 to i32
  %8 = shl i32 2, %7
  %9 = trunc i32 %8 to i16
  store i16 %9, i16* %6, align 2
  %10 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 3
  %11 = zext i8 %2 to i32
  %12 = shl i32 1, %11
  %13 = trunc i32 %12 to i16
  store i16 %13, i16* %10, align 4
  %14 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 4
  %15 = add i16 %13, 1
  store i16 %15, i16* %14, align 2
  %16 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 5
  store i16 0, i16* %16, align 8
  %17 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 6
  store i8 0, i8* %17, align 2
  %18 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8
  %19 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 12
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 13
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 14
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 16
  store i32 0, i32* %22, align 8
  %23 = bitcast %"class.std::__1::vector"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 34, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec15LZWDecompressorD2Ev(%"class.fxcodec::LZWDecompressor"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %3) #7
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec15LZWDecompressor6DecodeEPKhjPhPj(%"class.fxcodec::LZWDecompressor"*, i8*, i32, i8*, i32*) local_unnamed_addr #0 align 2 {
  %6 = icmp ne i8* %1, null
  %7 = icmp ne i32 %2, 0
  %8 = and i1 %6, %7
  %9 = icmp ne i8* %3, null
  %10 = and i1 %8, %9
  %11 = icmp ne i32* %4, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %423

13:                                               ; preds = %5
  %14 = load i32, i32* %4, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %423, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 12
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 13
  store i32 %2, i32* %18, align 8
  %19 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 0
  %20 = load i8, i8* %19, align 8
  %21 = add i8 %20, 1
  %22 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 1
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 4
  %24 = load i16, i16* %23, align 2
  %25 = add i16 %24, 1
  %26 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 5
  store i16 %25, i16* %26, align 8
  %27 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 10
  store i16 -1, i16* %27, align 8
  %28 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17
  %29 = bitcast [4096 x %"struct.fxcodec::LZWDecompressor::CodeEntry"]* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 16384, i1 false) #7
  %30 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 3
  %31 = load i16, i16* %30, align 4
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %51, label %33

33:                                               ; preds = %16
  %34 = zext i16 %31 to i64
  %35 = add nsw i64 %34, -1
  %36 = and i64 %34, 7
  %37 = icmp ult i64 %35, 7
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = sub nsw i64 %34, %36
  br label %71

40:                                               ; preds = %71, %33
  %41 = phi i64 [ 0, %33 ], [ %97, %71 ]
  %42 = icmp eq i64 %36, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %40, %43
  %44 = phi i64 [ %48, %43 ], [ %41, %40 ]
  %45 = phi i64 [ %49, %43 ], [ %36, %40 ]
  %46 = trunc i64 %44 to i8
  %47 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %44, i32 1
  store i8 %46, i8* %47, align 2
  %48 = add nuw nsw i64 %44, 1
  %49 = add i64 %45, -1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %43, !llvm.loop !2

51:                                               ; preds = %40, %43, %16
  %52 = phi i64 [ 0, %16 ], [ %34, %43 ], [ %34, %40 ]
  %53 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8
  %54 = zext i16 %25 to i64
  %55 = sub nsw i64 %54, %52
  %56 = add nsw i64 %55, 1
  %57 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 1
  %58 = bitcast i8** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.std::__1::vector"* %53 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %59, %61
  %63 = icmp ugt i64 %56, %62
  %64 = inttoptr i64 %61 to i8*
  br i1 %63, label %65, label %67

65:                                               ; preds = %51
  %66 = sub i64 %56, %62
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %53, i64 %66) #7
  br label %100

67:                                               ; preds = %51
  %68 = icmp ult i64 %56, %62
  br i1 %68, label %69, label %100

69:                                               ; preds = %67
  %70 = getelementptr inbounds i8, i8* %64, i64 %56
  store i8* %70, i8** %57, align 8
  br label %100

71:                                               ; preds = %71, %38
  %72 = phi i64 [ 0, %38 ], [ %97, %71 ]
  %73 = phi i64 [ %39, %38 ], [ %98, %71 ]
  %74 = trunc i64 %72 to i8
  %75 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %72, i32 1
  store i8 %74, i8* %75, align 2
  %76 = or i64 %72, 1
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %76, i32 1
  store i8 %77, i8* %78, align 2
  %79 = or i64 %72, 2
  %80 = trunc i64 %79 to i8
  %81 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %79, i32 1
  store i8 %80, i8* %81, align 2
  %82 = or i64 %72, 3
  %83 = trunc i64 %82 to i8
  %84 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %82, i32 1
  store i8 %83, i8* %84, align 2
  %85 = or i64 %72, 4
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %85, i32 1
  store i8 %86, i8* %87, align 2
  %88 = or i64 %72, 5
  %89 = trunc i64 %88 to i8
  %90 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %88, i32 1
  store i8 %89, i8* %90, align 2
  %91 = or i64 %72, 6
  %92 = trunc i64 %91 to i8
  %93 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %91, i32 1
  store i8 %92, i8* %93, align 2
  %94 = or i64 %72, 7
  %95 = trunc i64 %94 to i8
  %96 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %94, i32 1
  store i8 %95, i8* %96, align 2
  %97 = add nuw nsw i64 %72, 8
  %98 = add i64 %73, -8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %40, label %71

100:                                              ; preds = %69, %67, %65
  %101 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 9
  store i64 0, i64* %101, align 8
  %102 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 14
  %103 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 16
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %53, i64 0, i32 0, i32 0
  %105 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 6
  %106 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 0
  br label %112

107:                                              ; preds = %412, %144
  %108 = phi i8* [ %114, %144 ], [ %413, %412 ]
  %109 = phi i32 [ %113, %144 ], [ %414, %412 ]
  %110 = load i32, i32* %4, align 4
  %111 = icmp ugt i32 %109, %110
  br i1 %111, label %418, label %112

112:                                              ; preds = %100, %107
  %113 = phi i32 [ 0, %100 ], [ %109, %107 ]
  %114 = phi i8* [ %3, %100 ], [ %108, %107 ]
  %115 = load i32, i32* %18, align 8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %121

117:                                              ; preds = %112
  %118 = load i8, i8* %102, align 4
  %119 = load i8, i8* %22, align 1
  %120 = icmp ult i8 %118, %119
  br i1 %120, label %421, label %123

121:                                              ; preds = %112
  %122 = load i8, i8* %22, align 1
  br label %123

123:                                              ; preds = %121, %117
  %124 = phi i8 [ %122, %121 ], [ %119, %117 ]
  %125 = icmp ugt i8 %124, 12
  br i1 %125, label %423, label %126

126:                                              ; preds = %123
  %127 = load i8, i8* %102, align 4
  br i1 %116, label %144, label %128

128:                                              ; preds = %126
  %129 = icmp ugt i8 %127, 31
  br i1 %129, label %423, label %130

130:                                              ; preds = %128
  %131 = load i8*, i8** %17, align 8
  %132 = getelementptr inbounds i8, i8* %131, i64 1
  store i8* %132, i8** %17, align 8
  %133 = load i8, i8* %131, align 1
  %134 = zext i8 %133 to i32
  %135 = zext i8 %127 to i32
  %136 = shl i32 %134, %135
  %137 = lshr i32 %136, %135
  %138 = icmp eq i32 %137, %134
  br i1 %138, label %139, label %423

139:                                              ; preds = %130
  %140 = load i32, i32* %103, align 8
  %141 = or i32 %140, %136
  store i32 %141, i32* %103, align 8
  %142 = add i32 %115, -1
  store i32 %142, i32* %18, align 8
  %143 = add nuw nsw i8 %127, 8
  store i8 %143, i8* %102, align 4
  br label %144

144:                                              ; preds = %126, %139
  %145 = phi i8 [ %143, %139 ], [ %127, %126 ]
  %146 = icmp ult i8 %145, %124
  br i1 %146, label %107, label %147

147:                                              ; preds = %144, %412
  %148 = phi i8 [ %416, %412 ], [ %124, %144 ]
  %149 = phi i8 [ %415, %412 ], [ %145, %144 ]
  %150 = phi i32 [ %414, %412 ], [ %113, %144 ]
  %151 = phi i8* [ %413, %412 ], [ %114, %144 ]
  %152 = zext i8 %148 to i32
  %153 = load i32, i32* %103, align 8
  %154 = shl nsw i32 -1, %152
  %155 = xor i32 %154, 65535
  %156 = and i32 %153, %155
  %157 = trunc i32 %156 to i16
  %158 = lshr i32 %153, %152
  store i32 %158, i32* %103, align 8
  %159 = sub i8 %149, %148
  store i8 %159, i8* %102, align 4
  %160 = and i32 %156, 65535
  %161 = load i16, i16* %30, align 4
  %162 = icmp eq i16 %161, %157
  br i1 %162, label %163, label %234

163:                                              ; preds = %147
  %164 = load i8, i8* %19, align 8
  %165 = add i8 %164, 1
  store i8 %165, i8* %22, align 1
  %166 = load i16, i16* %23, align 2
  %167 = add i16 %166, 1
  store i16 %167, i16* %26, align 8
  store i16 -1, i16* %27, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 16384, i1 false) #7
  %168 = icmp eq i16 %157, 0
  br i1 %168, label %188, label %169

169:                                              ; preds = %163
  %170 = and i32 %156, 65535
  %171 = zext i32 %170 to i64
  %172 = add nsw i64 %171, -1
  %173 = and i64 %171, 7
  %174 = icmp ult i64 %172, 7
  br i1 %174, label %177, label %175

175:                                              ; preds = %169
  %176 = sub nsw i64 %171, %173
  br label %204

177:                                              ; preds = %204, %169
  %178 = phi i64 [ 0, %169 ], [ %230, %204 ]
  %179 = icmp eq i64 %173, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %177, %180
  %181 = phi i64 [ %185, %180 ], [ %178, %177 ]
  %182 = phi i64 [ %186, %180 ], [ %173, %177 ]
  %183 = trunc i64 %181 to i8
  %184 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %181, i32 1
  store i8 %183, i8* %184, align 2
  %185 = add nuw nsw i64 %181, 1
  %186 = add i64 %182, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %180, !llvm.loop !4

188:                                              ; preds = %177, %180, %163
  %189 = phi i64 [ 0, %163 ], [ %171, %180 ], [ %171, %177 ]
  %190 = zext i16 %167 to i64
  %191 = sub nsw i64 %190, %189
  %192 = add nsw i64 %191, 1
  %193 = load i64, i64* %58, align 8
  %194 = load i64, i64* %60, align 8
  %195 = sub i64 %193, %194
  %196 = icmp ugt i64 %192, %195
  %197 = inttoptr i64 %194 to i8*
  br i1 %196, label %198, label %200

198:                                              ; preds = %188
  %199 = sub i64 %192, %195
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %53, i64 %199) #7
  br label %233

200:                                              ; preds = %188
  %201 = icmp ult i64 %192, %195
  br i1 %201, label %202, label %233

202:                                              ; preds = %200
  %203 = getelementptr inbounds i8, i8* %197, i64 %192
  store i8* %203, i8** %57, align 8
  br label %233

204:                                              ; preds = %204, %175
  %205 = phi i64 [ 0, %175 ], [ %230, %204 ]
  %206 = phi i64 [ %176, %175 ], [ %231, %204 ]
  %207 = trunc i64 %205 to i8
  %208 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %205, i32 1
  store i8 %207, i8* %208, align 2
  %209 = or i64 %205, 1
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %209, i32 1
  store i8 %210, i8* %211, align 2
  %212 = or i64 %205, 2
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %212, i32 1
  store i8 %213, i8* %214, align 2
  %215 = or i64 %205, 3
  %216 = trunc i64 %215 to i8
  %217 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %215, i32 1
  store i8 %216, i8* %217, align 2
  %218 = or i64 %205, 4
  %219 = trunc i64 %218 to i8
  %220 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %218, i32 1
  store i8 %219, i8* %220, align 2
  %221 = or i64 %205, 5
  %222 = trunc i64 %221 to i8
  %223 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %221, i32 1
  store i8 %222, i8* %223, align 2
  %224 = or i64 %205, 6
  %225 = trunc i64 %224 to i8
  %226 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %224, i32 1
  store i8 %225, i8* %226, align 2
  %227 = or i64 %205, 7
  %228 = trunc i64 %227 to i8
  %229 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %227, i32 1
  store i8 %228, i8* %229, align 2
  %230 = add nuw nsw i64 %205, 8
  %231 = add i64 %206, -8
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %177, label %204

233:                                              ; preds = %198, %200, %202
  store i64 0, i64* %101, align 8
  br label %412

234:                                              ; preds = %147
  %235 = load i16, i16* %23, align 2
  %236 = icmp eq i16 %235, %157
  br i1 %236, label %237, label %238

237:                                              ; preds = %234
  store i32 %150, i32* %4, align 4
  br label %423

238:                                              ; preds = %234
  %239 = load i16, i16* %27, align 8
  %240 = icmp eq i16 %239, -1
  br i1 %240, label %289, label %241

241:                                              ; preds = %238
  %242 = load i16, i16* %26, align 8
  %243 = zext i16 %242 to i32
  %244 = icmp ult i16 %242, 4096
  br i1 %244, label %245, label %291

245:                                              ; preds = %241
  %246 = icmp eq i32 %160, %243
  br i1 %246, label %247, label %262

247:                                              ; preds = %245
  %248 = load i8, i8* %105, align 2
  %249 = zext i16 %242 to i64
  %250 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %249, i32 0
  store i16 %239, i16* %250, align 4
  %251 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %249, i32 1
  store i8 %248, i8* %251, align 2
  %252 = add nuw nsw i16 %242, 1
  store i16 %252, i16* %26, align 8
  %253 = icmp ult i16 %252, 4096
  br i1 %253, label %254, label %260

254:                                              ; preds = %247
  %255 = zext i16 %252 to i32
  %256 = lshr i32 %255, %152
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %260, label %258

258:                                              ; preds = %254
  %259 = add i8 %148, 1
  store i8 %259, i8* %22, align 1
  br label %260

260:                                              ; preds = %247, %254, %258
  %261 = tail call zeroext i1 @_ZN7fxcodec15LZWDecompressor12DecodeStringEt(%"class.fxcodec::LZWDecompressor"* %0, i16 zeroext %157)
  br i1 %261, label %291, label %423

262:                                              ; preds = %245
  %263 = icmp ugt i32 %160, %243
  br i1 %263, label %423, label %264

264:                                              ; preds = %262
  %265 = tail call zeroext i1 @_ZN7fxcodec15LZWDecompressor12DecodeStringEt(%"class.fxcodec::LZWDecompressor"* %0, i16 zeroext %157)
  br i1 %265, label %266, label %423

266:                                              ; preds = %264
  %267 = load i16, i16* %26, align 8
  %268 = icmp eq i16 %267, 4096
  br i1 %268, label %291, label %269

269:                                              ; preds = %266
  %270 = load i16, i16* %27, align 8
  %271 = load i8*, i8** %104, align 8
  %272 = load i64, i64* %101, align 8
  %273 = add i64 %272, -1
  %274 = getelementptr inbounds i8, i8* %271, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = zext i16 %267 to i64
  %277 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %276, i32 0
  store i16 %270, i16* %277, align 4
  %278 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %276, i32 1
  store i8 %275, i8* %278, align 2
  %279 = add i16 %267, 1
  store i16 %279, i16* %26, align 8
  %280 = icmp ult i16 %279, 4096
  br i1 %280, label %281, label %291

281:                                              ; preds = %269
  %282 = zext i16 %279 to i32
  %283 = load i8, i8* %22, align 1
  %284 = zext i8 %283 to i32
  %285 = lshr i32 %282, %284
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %291, label %287

287:                                              ; preds = %281
  %288 = add i8 %283, 1
  store i8 %288, i8* %22, align 1
  br label %291

289:                                              ; preds = %238
  %290 = tail call zeroext i1 @_ZN7fxcodec15LZWDecompressor12DecodeStringEt(%"class.fxcodec::LZWDecompressor"* %0, i16 zeroext %157)
  br i1 %290, label %291, label %423

291:                                              ; preds = %287, %281, %269, %266, %289, %241, %260
  store i16 %157, i16* %27, align 8
  %292 = load i32, i32* %4, align 4
  %293 = sub i32 %292, %150
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %402, label %295

295:                                              ; preds = %291
  %296 = zext i32 %293 to i64
  %297 = load i64, i64* %101, align 8
  %298 = icmp ult i64 %297, %296
  %299 = trunc i64 %297 to i32
  %300 = select i1 %298, i32 %299, i32 %293
  %301 = load i8*, i8** %106, align 8
  %302 = getelementptr inbounds i8, i8* %301, i64 %297
  %303 = zext i32 %300 to i64
  %304 = sub nsw i64 0, %303
  %305 = getelementptr inbounds i8, i8* %302, i64 %304
  %306 = icmp eq i32 %300, 0
  br i1 %306, label %399, label %307

307:                                              ; preds = %295
  %308 = icmp ult i32 %300, 16
  br i1 %308, label %387, label %309

309:                                              ; preds = %307
  %310 = getelementptr i8, i8* %151, i64 %303
  %311 = icmp ult i8* %151, %302
  %312 = icmp ult i8* %305, %310
  %313 = and i1 %311, %312
  br i1 %313, label %387, label %314

314:                                              ; preds = %309
  %315 = and i64 %303, 4294967280
  %316 = getelementptr i8, i8* %151, i64 %315
  %317 = sub nsw i64 0, %315
  %318 = getelementptr i8, i8* %302, i64 %317
  %319 = add nsw i64 %315, -16
  %320 = lshr exact i64 %319, 4
  %321 = add nuw nsw i64 %320, 1
  %322 = and i64 %321, 1
  %323 = icmp eq i64 %319, 0
  br i1 %323, label %365, label %324

324:                                              ; preds = %314
  %325 = sub nuw nsw i64 %321, %322
  %326 = getelementptr i8, i8* %302, i64 -1
  %327 = getelementptr i8, i8* %302, i64 -1
  br label %328

328:                                              ; preds = %328, %324
  %329 = phi i64 [ 0, %324 ], [ %362, %328 ]
  %330 = phi i64 [ %325, %324 ], [ %363, %328 ]
  %331 = getelementptr i8, i8* %151, i64 %329
  %332 = sub i64 0, %329
  %333 = getelementptr inbounds i8, i8* %326, i64 %332
  %334 = getelementptr inbounds i8, i8* %333, i64 -7
  %335 = bitcast i8* %334 to <8 x i8>*
  %336 = load <8 x i8>, <8 x i8>* %335, align 1, !alias.scope !5
  %337 = shufflevector <8 x i8> %336, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %338 = getelementptr inbounds i8, i8* %333, i64 -8
  %339 = getelementptr inbounds i8, i8* %338, i64 -7
  %340 = bitcast i8* %339 to <8 x i8>*
  %341 = load <8 x i8>, <8 x i8>* %340, align 1, !alias.scope !5
  %342 = shufflevector <8 x i8> %341, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %343 = bitcast i8* %331 to <8 x i8>*
  store <8 x i8> %337, <8 x i8>* %343, align 1, !alias.scope !8, !noalias !5
  %344 = getelementptr i8, i8* %331, i64 8
  %345 = bitcast i8* %344 to <8 x i8>*
  store <8 x i8> %342, <8 x i8>* %345, align 1, !alias.scope !8, !noalias !5
  %346 = or i64 %329, 16
  %347 = getelementptr i8, i8* %151, i64 %346
  %348 = sub nuw nsw i64 -16, %329
  %349 = getelementptr inbounds i8, i8* %327, i64 %348
  %350 = getelementptr inbounds i8, i8* %349, i64 -7
  %351 = bitcast i8* %350 to <8 x i8>*
  %352 = load <8 x i8>, <8 x i8>* %351, align 1, !alias.scope !5
  %353 = shufflevector <8 x i8> %352, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %354 = getelementptr inbounds i8, i8* %349, i64 -8
  %355 = getelementptr inbounds i8, i8* %354, i64 -7
  %356 = bitcast i8* %355 to <8 x i8>*
  %357 = load <8 x i8>, <8 x i8>* %356, align 1, !alias.scope !5
  %358 = shufflevector <8 x i8> %357, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %359 = bitcast i8* %347 to <8 x i8>*
  store <8 x i8> %353, <8 x i8>* %359, align 1, !alias.scope !8, !noalias !5
  %360 = getelementptr i8, i8* %347, i64 8
  %361 = bitcast i8* %360 to <8 x i8>*
  store <8 x i8> %358, <8 x i8>* %361, align 1, !alias.scope !8, !noalias !5
  %362 = add i64 %329, 32
  %363 = add i64 %330, -2
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %328, !llvm.loop !10

365:                                              ; preds = %328, %314
  %366 = phi i64 [ 0, %314 ], [ %362, %328 ]
  %367 = icmp eq i64 %322, 0
  br i1 %367, label %385, label %368

368:                                              ; preds = %365
  %369 = getelementptr i8, i8* %151, i64 %366
  %370 = sub i64 0, %366
  %371 = getelementptr i8, i8* %302, i64 -1
  %372 = getelementptr inbounds i8, i8* %371, i64 %370
  %373 = getelementptr inbounds i8, i8* %372, i64 -7
  %374 = bitcast i8* %373 to <8 x i8>*
  %375 = load <8 x i8>, <8 x i8>* %374, align 1, !alias.scope !5
  %376 = shufflevector <8 x i8> %375, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %377 = getelementptr inbounds i8, i8* %372, i64 -8
  %378 = getelementptr inbounds i8, i8* %377, i64 -7
  %379 = bitcast i8* %378 to <8 x i8>*
  %380 = load <8 x i8>, <8 x i8>* %379, align 1, !alias.scope !5
  %381 = shufflevector <8 x i8> %380, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %382 = bitcast i8* %369 to <8 x i8>*
  store <8 x i8> %376, <8 x i8>* %382, align 1, !alias.scope !8, !noalias !5
  %383 = getelementptr i8, i8* %369, i64 8
  %384 = bitcast i8* %383 to <8 x i8>*
  store <8 x i8> %381, <8 x i8>* %384, align 1, !alias.scope !8, !noalias !5
  br label %385

385:                                              ; preds = %365, %368
  %386 = icmp eq i64 %315, %303
  br i1 %386, label %397, label %387

387:                                              ; preds = %385, %309, %307
  %388 = phi i8* [ %151, %309 ], [ %151, %307 ], [ %316, %385 ]
  %389 = phi i8* [ %302, %309 ], [ %302, %307 ], [ %318, %385 ]
  br label %390

390:                                              ; preds = %387, %390
  %391 = phi i8* [ %395, %390 ], [ %388, %387 ]
  %392 = phi i8* [ %393, %390 ], [ %389, %387 ]
  %393 = getelementptr inbounds i8, i8* %392, i64 -1
  %394 = load i8, i8* %393, align 1
  store i8 %394, i8* %391, align 1
  %395 = getelementptr inbounds i8, i8* %391, i64 1
  %396 = icmp eq i8* %393, %305
  br i1 %396, label %397, label %390, !llvm.loop !12

397:                                              ; preds = %390, %385
  %398 = load i64, i64* %101, align 8
  br label %399

399:                                              ; preds = %397, %295
  %400 = phi i64 [ %398, %397 ], [ %297, %295 ]
  %401 = sub i64 %400, %303
  store i64 %401, i64* %101, align 8
  br label %404

402:                                              ; preds = %291
  %403 = load i64, i64* %101, align 8
  br label %404

404:                                              ; preds = %402, %399
  %405 = phi i64 [ %403, %402 ], [ %401, %399 ]
  %406 = phi i32 [ 0, %402 ], [ %300, %399 ]
  %407 = icmp eq i64 %405, 0
  br i1 %407, label %408, label %423

408:                                              ; preds = %404
  %409 = zext i32 %406 to i64
  %410 = getelementptr inbounds i8, i8* %151, i64 %409
  %411 = add i32 %406, %150
  br label %412

412:                                              ; preds = %408, %233
  %413 = phi i8* [ %151, %233 ], [ %410, %408 ]
  %414 = phi i32 [ %150, %233 ], [ %411, %408 ]
  %415 = load i8, i8* %102, align 4
  %416 = load i8, i8* %22, align 1
  %417 = icmp ult i8 %415, %416
  br i1 %417, label %107, label %147

418:                                              ; preds = %107
  %419 = load i32, i32* %18, align 8
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %421, label %423

421:                                              ; preds = %117, %418
  %422 = phi i32 [ %109, %418 ], [ %113, %117 ]
  store i32 %422, i32* %4, align 4
  br label %423

423:                                              ; preds = %130, %123, %128, %404, %289, %264, %262, %260, %237, %421, %418, %13, %5
  %424 = phi i32 [ 0, %5 ], [ 3, %13 ], [ 2, %421 ], [ 0, %418 ], [ 1, %237 ], [ 0, %260 ], [ 0, %262 ], [ 0, %264 ], [ 0, %289 ], [ 3, %404 ], [ 0, %128 ], [ 0, %123 ], [ 0, %130 ]
  ret i32 %424
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec15LZWDecompressor10ClearTableEv(%"class.fxcodec::LZWDecompressor"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = add i8 %3, 1
  %5 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 1
  store i8 %4, i8* %5, align 1
  %6 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 4
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, 1
  %9 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 5
  store i16 %8, i16* %9, align 8
  %10 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 10
  store i16 -1, i16* %10, align 8
  %11 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17
  %12 = bitcast [4096 x %"struct.fxcodec::LZWDecompressor::CodeEntry"]* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 16384, i1 false)
  %13 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 3
  %14 = load i16, i16* %13, align 4
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %36, label %16

16:                                               ; preds = %1
  %17 = zext i16 %14 to i64
  %18 = add nsw i64 %17, -1
  %19 = and i64 %17, 7
  %20 = icmp ult i64 %18, 7
  br i1 %20, label %23, label %21

21:                                               ; preds = %16
  %22 = sub nsw i64 %17, %19
  br label %58

23:                                               ; preds = %58, %16
  %24 = phi i64 [ 0, %16 ], [ %84, %58 ]
  %25 = icmp eq i64 %19, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %23, %26
  %27 = phi i64 [ %31, %26 ], [ %24, %23 ]
  %28 = phi i64 [ %32, %26 ], [ %19, %23 ]
  %29 = trunc i64 %27 to i8
  %30 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %27, i32 1
  store i8 %29, i8* %30, align 2
  %31 = add nuw nsw i64 %27, 1
  %32 = add i64 %28, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %26, !llvm.loop !13

34:                                               ; preds = %26, %23
  %35 = zext i16 %14 to i64
  br label %36

36:                                               ; preds = %1, %34
  %37 = phi i64 [ %35, %34 ], [ 0, %1 ]
  %38 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8
  %39 = zext i16 %8 to i64
  %40 = sub nsw i64 %39, %37
  %41 = add nsw i64 %40, 1
  %42 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 1
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector"* %38 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = icmp ugt i64 %41, %47
  %49 = inttoptr i64 %46 to i8*
  br i1 %48, label %50, label %52

50:                                               ; preds = %36
  %51 = sub i64 %41, %47
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %38, i64 %51) #7
  br label %56

52:                                               ; preds = %36
  %53 = icmp ult i64 %41, %47
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = getelementptr inbounds i8, i8* %49, i64 %41
  store i8* %55, i8** %42, align 8
  br label %56

56:                                               ; preds = %50, %52, %54
  %57 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 9
  store i64 0, i64* %57, align 8
  ret void

58:                                               ; preds = %58, %21
  %59 = phi i64 [ 0, %21 ], [ %84, %58 ]
  %60 = phi i64 [ %22, %21 ], [ %85, %58 ]
  %61 = trunc i64 %59 to i8
  %62 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %59, i32 1
  store i8 %61, i8* %62, align 2
  %63 = or i64 %59, 1
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %63, i32 1
  store i8 %64, i8* %65, align 2
  %66 = or i64 %59, 2
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %66, i32 1
  store i8 %67, i8* %68, align 2
  %69 = or i64 %59, 3
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %69, i32 1
  store i8 %70, i8* %71, align 2
  %72 = or i64 %59, 4
  %73 = trunc i64 %72 to i8
  %74 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %72, i32 1
  store i8 %73, i8* %74, align 2
  %75 = or i64 %59, 5
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %75, i32 1
  store i8 %76, i8* %77, align 2
  %78 = or i64 %59, 6
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %78, i32 1
  store i8 %79, i8* %80, align 2
  %81 = or i64 %59, 7
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %81, i32 1
  store i8 %82, i8* %83, align 2
  %84 = add nuw nsw i64 %59, 8
  %85 = add i64 %60, -8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %23, label %58
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec15LZWDecompressor11ExtractDataEPhj(%"class.fxcodec::LZWDecompressor"* nocapture, i8* nocapture, i32) local_unnamed_addr #2 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %114, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 9
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  %10 = trunc i64 %8 to i32
  %11 = select i1 %9, i32 %10, i32 %2
  %12 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 %8
  %15 = zext i32 %11 to i64
  %16 = sub nsw i64 0, %15
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %111, label %19

19:                                               ; preds = %5
  %20 = icmp ult i32 %11, 16
  br i1 %20, label %99, label %21

21:                                               ; preds = %19
  %22 = getelementptr i8, i8* %1, i64 %15
  %23 = icmp ugt i8* %14, %1
  %24 = icmp ult i8* %17, %22
  %25 = and i1 %23, %24
  br i1 %25, label %99, label %26

26:                                               ; preds = %21
  %27 = and i64 %15, 4294967280
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = sub nsw i64 0, %27
  %30 = getelementptr i8, i8* %14, i64 %29
  %31 = add nsw i64 %27, -16
  %32 = lshr exact i64 %31, 4
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %77, label %36

36:                                               ; preds = %26
  %37 = sub nuw nsw i64 %33, %34
  %38 = getelementptr i8, i8* %14, i64 -1
  %39 = getelementptr i8, i8* %14, i64 -1
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ 0, %36 ], [ %74, %40 ]
  %42 = phi i64 [ %37, %36 ], [ %75, %40 ]
  %43 = getelementptr i8, i8* %1, i64 %41
  %44 = sub i64 0, %41
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = getelementptr inbounds i8, i8* %45, i64 -7
  %47 = bitcast i8* %46 to <8 x i8>*
  %48 = load <8 x i8>, <8 x i8>* %47, align 1, !alias.scope !14
  %49 = shufflevector <8 x i8> %48, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %50 = getelementptr inbounds i8, i8* %45, i64 -8
  %51 = getelementptr inbounds i8, i8* %50, i64 -7
  %52 = bitcast i8* %51 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1, !alias.scope !14
  %54 = shufflevector <8 x i8> %53, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %55 = bitcast i8* %43 to <8 x i8>*
  store <8 x i8> %49, <8 x i8>* %55, align 1, !alias.scope !17, !noalias !14
  %56 = getelementptr i8, i8* %43, i64 8
  %57 = bitcast i8* %56 to <8 x i8>*
  store <8 x i8> %54, <8 x i8>* %57, align 1, !alias.scope !17, !noalias !14
  %58 = or i64 %41, 16
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = sub nuw nsw i64 -16, %41
  %61 = getelementptr inbounds i8, i8* %39, i64 %60
  %62 = getelementptr inbounds i8, i8* %61, i64 -7
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !14
  %65 = shufflevector <8 x i8> %64, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %66 = getelementptr inbounds i8, i8* %61, i64 -8
  %67 = getelementptr inbounds i8, i8* %66, i64 -7
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1, !alias.scope !14
  %70 = shufflevector <8 x i8> %69, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %71 = bitcast i8* %59 to <8 x i8>*
  store <8 x i8> %65, <8 x i8>* %71, align 1, !alias.scope !17, !noalias !14
  %72 = getelementptr i8, i8* %59, i64 8
  %73 = bitcast i8* %72 to <8 x i8>*
  store <8 x i8> %70, <8 x i8>* %73, align 1, !alias.scope !17, !noalias !14
  %74 = add i64 %41, 32
  %75 = add i64 %42, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %40, !llvm.loop !19

77:                                               ; preds = %40, %26
  %78 = phi i64 [ 0, %26 ], [ %74, %40 ]
  %79 = icmp eq i64 %34, 0
  br i1 %79, label %97, label %80

80:                                               ; preds = %77
  %81 = getelementptr i8, i8* %1, i64 %78
  %82 = sub i64 0, %78
  %83 = getelementptr i8, i8* %14, i64 -1
  %84 = getelementptr inbounds i8, i8* %83, i64 %82
  %85 = getelementptr inbounds i8, i8* %84, i64 -7
  %86 = bitcast i8* %85 to <8 x i8>*
  %87 = load <8 x i8>, <8 x i8>* %86, align 1, !alias.scope !14
  %88 = shufflevector <8 x i8> %87, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %89 = getelementptr inbounds i8, i8* %84, i64 -8
  %90 = getelementptr inbounds i8, i8* %89, i64 -7
  %91 = bitcast i8* %90 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 1, !alias.scope !14
  %93 = shufflevector <8 x i8> %92, <8 x i8> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %94 = bitcast i8* %81 to <8 x i8>*
  store <8 x i8> %88, <8 x i8>* %94, align 1, !alias.scope !17, !noalias !14
  %95 = getelementptr i8, i8* %81, i64 8
  %96 = bitcast i8* %95 to <8 x i8>*
  store <8 x i8> %93, <8 x i8>* %96, align 1, !alias.scope !17, !noalias !14
  br label %97

97:                                               ; preds = %77, %80
  %98 = icmp eq i64 %27, %15
  br i1 %98, label %109, label %99

99:                                               ; preds = %97, %21, %19
  %100 = phi i8* [ %1, %21 ], [ %1, %19 ], [ %28, %97 ]
  %101 = phi i8* [ %14, %21 ], [ %14, %19 ], [ %30, %97 ]
  br label %102

102:                                              ; preds = %99, %102
  %103 = phi i8* [ %107, %102 ], [ %100, %99 ]
  %104 = phi i8* [ %105, %102 ], [ %101, %99 ]
  %105 = getelementptr inbounds i8, i8* %104, i64 -1
  %106 = load i8, i8* %105, align 1
  store i8 %106, i8* %103, align 1
  %107 = getelementptr inbounds i8, i8* %103, i64 1
  %108 = icmp eq i8* %105, %17
  br i1 %108, label %109, label %102, !llvm.loop !20

109:                                              ; preds = %102, %97
  %110 = load i64, i64* %7, align 8
  br label %111

111:                                              ; preds = %109, %5
  %112 = phi i64 [ %110, %109 ], [ %8, %5 ]
  %113 = sub i64 %112, %15
  store i64 %113, i64* %7, align 8
  br label %114

114:                                              ; preds = %3, %111
  %115 = phi i32 [ %11, %111 ], [ 0, %3 ]
  ret i32 %115
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN7fxcodec15LZWDecompressor7AddCodeEth(%"class.fxcodec::LZWDecompressor"* nocapture, i16 zeroext, i8 zeroext) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 5
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 4096
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = zext i16 %5 to i64
  %9 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %8, i32 0
  store i16 %1, i16* %9, align 4
  %10 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %8, i32 1
  store i8 %2, i8* %10, align 2
  %11 = add i16 %5, 1
  store i16 %11, i16* %4, align 8
  %12 = icmp ult i16 %11, 4096
  br i1 %12, label %13, label %22

13:                                               ; preds = %7
  %14 = zext i16 %11 to i32
  %15 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = lshr i32 %14, %17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %13
  %21 = add i8 %16, 1
  store i8 %21, i8* %15, align 1
  br label %22

22:                                               ; preds = %13, %20, %3, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7fxcodec15LZWDecompressor12DecodeStringEt(%"class.fxcodec::LZWDecompressor"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8
  %4 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 5
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i64
  %7 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 3
  %8 = load i16, i16* %7, align 4
  %9 = zext i16 %8 to i64
  %10 = sub nsw i64 %6, %9
  %11 = add nsw i64 %10, 1
  %12 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 8, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %3 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = icmp ugt i64 %11, %17
  %19 = inttoptr i64 %16 to i8*
  br i1 %18, label %20, label %23

20:                                               ; preds = %2
  %21 = sub i64 %11, %17
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"* %3, i64 %21) #7
  %22 = load i16, i16* %7, align 4
  br label %27

23:                                               ; preds = %2
  %24 = icmp ult i64 %11, %17
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = getelementptr inbounds i8, i8* %19, i64 %11
  store i8* %26, i8** %12, align 8
  br label %27

27:                                               ; preds = %20, %23, %25
  %28 = phi i16 [ %22, %20 ], [ %8, %23 ], [ %8, %25 ]
  %29 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 9
  store i64 0, i64* %29, align 8
  %30 = icmp ugt i16 %28, %1
  br i1 %30, label %55, label %31

31:                                               ; preds = %27, %46
  %32 = phi i16 [ %52, %46 ], [ %1, %27 ]
  %33 = load i16, i16* %4, align 8
  %34 = icmp ugt i16 %32, %33
  br i1 %34, label %55, label %35

35:                                               ; preds = %31
  %36 = zext i16 %32 to i64
  %37 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %36, i32 0
  %38 = load i16, i16* %37, align 4
  %39 = icmp eq i16 %32, %38
  br i1 %39, label %68, label %40

40:                                               ; preds = %35
  %41 = load i64, i64* %29, align 8
  %42 = load i64, i64* %13, align 8
  %43 = load i64, i64* %15, align 8
  %44 = sub i64 %42, %43
  %45 = icmp ult i64 %41, %44
  br i1 %45, label %46, label %68

46:                                               ; preds = %40
  %47 = inttoptr i64 %43 to i8*
  %48 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 17, i64 %36, i32 1
  %49 = load i8, i8* %48, align 2
  %50 = add nuw i64 %41, 1
  store i64 %50, i64* %29, align 8
  %51 = getelementptr inbounds i8, i8* %47, i64 %41
  store i8 %49, i8* %51, align 1
  %52 = load i16, i16* %37, align 4
  %53 = load i16, i16* %7, align 4
  %54 = icmp ult i16 %52, %53
  br i1 %54, label %55, label %31

55:                                               ; preds = %46, %31, %27
  %56 = phi i16 [ %1, %27 ], [ %32, %31 ], [ %52, %46 ]
  %57 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 2
  %58 = load i16, i16* %57, align 2
  %59 = icmp ult i16 %56, %58
  br i1 %59, label %60, label %68

60:                                               ; preds = %55
  %61 = trunc i16 %56 to i8
  %62 = load i64, i64* %29, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %29, align 8
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %62
  store i8 %61, i8* %66, align 1
  %67 = getelementptr inbounds %"class.fxcodec::LZWDecompressor", %"class.fxcodec::LZWDecompressor"* %0, i64 0, i32 6
  store i8 %61, i8* %67, align 2
  br label %68

68:                                               ; preds = %35, %40, %55, %60
  %69 = phi i1 [ true, %60 ], [ false, %55 ], [ false, %40 ], [ false, %35 ]
  ret i1 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #8
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #7
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !21
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !24, !noalias !21
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !21
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !24, !noalias !21
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !21
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !24, !noalias !21
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !21
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !24, !noalias !21
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !26

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !21
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !24, !noalias !21
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !27

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !28

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #7
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !3}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !11}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !11}
