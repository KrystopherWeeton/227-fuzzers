; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/convolve_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/convolve_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_y_sr_12tap_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = lshr i16 %10, 1
  %12 = zext i16 %11 to i32
  %13 = add nsw i32 %12, -1
  %14 = mul nsw i32 %13, %1
  %15 = sext i32 %14 to i64
  %16 = sub nsw i64 0, %15
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = and i32 %7, 15
  %19 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %20 = load i16*, i16** %19, align 8
  %21 = zext i16 %10 to i32
  %22 = mul nuw nsw i32 %18, %21
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %20, i64 %23
  %25 = bitcast i16* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 1
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %29 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %30 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %31 = getelementptr inbounds i16, i16* %24, i64 8
  %32 = bitcast i16* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <4 x i32>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> zeroinitializer
  %37 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %38 = mul nsw i32 %1, 10
  %39 = sext i32 %38 to i64
  %40 = sext i32 %1 to i64
  %41 = shl nsw i32 %1, 1
  %42 = sext i32 %41 to i64
  %43 = mul nsw i32 %1, 3
  %44 = sext i32 %43 to i64
  %45 = shl nsw i32 %1, 2
  %46 = sext i32 %45 to i64
  %47 = mul nsw i32 %1, 5
  %48 = sext i32 %47 to i64
  %49 = mul nsw i32 %1, 6
  %50 = sext i32 %49 to i64
  %51 = mul nsw i32 %1, 7
  %52 = sext i32 %51 to i64
  %53 = shl nsw i32 %1, 3
  %54 = sext i32 %53 to i64
  %55 = mul nsw i32 %1, 9
  %56 = sext i32 %55 to i64
  %57 = mul nsw i32 %1, 11
  %58 = sext i32 %57 to i64
  %59 = mul nsw i32 %1, 12
  %60 = sext i32 %59 to i64
  %61 = bitcast <4 x i32> %27 to <8 x i16>
  %62 = bitcast <4 x i32> %28 to <8 x i16>
  %63 = bitcast <4 x i32> %29 to <8 x i16>
  %64 = bitcast <4 x i32> %30 to <8 x i16>
  %65 = bitcast <4 x i32> %36 to <8 x i16>
  %66 = bitcast <4 x i32> %37 to <8 x i16>
  %67 = sext i32 %5 to i64
  %68 = sext i32 %3 to i64
  %69 = sext i32 %4 to i64
  br label %70

70:                                               ; preds = %284, %8
  %71 = phi i64 [ %285, %284 ], [ 0, %8 ]
  %72 = getelementptr inbounds i8, i8* %17, i64 %71
  %73 = getelementptr inbounds i8, i8* %72, i64 %39
  %74 = bitcast i8* %73 to i64*
  %75 = load i64, i64* %74, align 1
  %76 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %75, i32 0
  %77 = bitcast i8* %72 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = getelementptr inbounds i8, i8* %72, i64 %40
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %82, i32 0
  %84 = bitcast <2 x i64> %79 to <16 x i8>
  %85 = bitcast <2 x i64> %83 to <16 x i8>
  %86 = shufflevector <16 x i8> %84, <16 x i8> %85, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %87 = getelementptr inbounds i8, i8* %72, i64 %42
  %88 = bitcast i8* %87 to i64*
  %89 = load i64, i64* %88, align 1
  %90 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %89, i32 0
  %91 = bitcast <2 x i64> %90 to <16 x i8>
  %92 = shufflevector <16 x i8> %85, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = getelementptr inbounds i8, i8* %72, i64 %44
  %94 = bitcast i8* %93 to i64*
  %95 = load i64, i64* %94, align 1
  %96 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %95, i32 0
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %91, <16 x i8> %97, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = getelementptr inbounds i8, i8* %72, i64 %46
  %100 = bitcast i8* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %101, i32 0
  %103 = bitcast <2 x i64> %102 to <16 x i8>
  %104 = shufflevector <16 x i8> %97, <16 x i8> %103, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = getelementptr inbounds i8, i8* %72, i64 %48
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %107, i32 0
  %109 = bitcast <2 x i64> %108 to <16 x i8>
  %110 = shufflevector <16 x i8> %103, <16 x i8> %109, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = getelementptr inbounds i8, i8* %72, i64 %50
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 1
  %114 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %113, i32 0
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %109, <16 x i8> %115, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = getelementptr inbounds i8, i8* %72, i64 %52
  %118 = bitcast i8* %117 to i64*
  %119 = load i64, i64* %118, align 1
  %120 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %119, i32 0
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = shufflevector <16 x i8> %115, <16 x i8> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = getelementptr inbounds i8, i8* %72, i64 %54
  %124 = bitcast i8* %123 to i64*
  %125 = load i64, i64* %124, align 1
  %126 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %125, i32 0
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = shufflevector <16 x i8> %121, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %129 = getelementptr inbounds i8, i8* %72, i64 %56
  %130 = bitcast i8* %129 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %131, i32 0
  %133 = bitcast <2 x i64> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %127, <16 x i8> %133, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %135 = bitcast <2 x i64> %76 to <16 x i8>
  %136 = shufflevector <16 x i8> %133, <16 x i8> %135, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = getelementptr inbounds i8, i8* %2, i64 %71
  br label %138

138:                                              ; preds = %138, %70
  %139 = phi i64 [ %282, %138 ], [ 0, %70 ]
  %140 = phi <16 x i8> [ %166, %138 ], [ %136, %70 ]
  %141 = phi <16 x i8> [ %160, %138 ], [ %134, %70 ]
  %142 = phi <16 x i8> [ %140, %138 ], [ %128, %70 ]
  %143 = phi <16 x i8> [ %141, %138 ], [ %122, %70 ]
  %144 = phi <16 x i8> [ %142, %138 ], [ %116, %70 ]
  %145 = phi <16 x i8> [ %143, %138 ], [ %110, %70 ]
  %146 = phi <16 x i8> [ %144, %138 ], [ %104, %70 ]
  %147 = phi <16 x i8> [ %145, %138 ], [ %98, %70 ]
  %148 = phi <16 x i8> [ %146, %138 ], [ %92, %70 ]
  %149 = phi <16 x i8> [ %147, %138 ], [ %86, %70 ]
  %150 = phi <2 x i64> [ %164, %138 ], [ %76, %70 ]
  %151 = mul nsw i64 %139, %40
  %152 = add nsw i64 %151, %71
  %153 = getelementptr inbounds i8, i8* %17, i64 %152
  %154 = getelementptr inbounds i8, i8* %153, i64 %58
  %155 = bitcast i8* %154 to i64*
  %156 = load i64, i64* %155, align 1
  %157 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %156, i32 0
  %158 = bitcast <2 x i64> %150 to <16 x i8>
  %159 = bitcast <2 x i64> %157 to <16 x i8>
  %160 = shufflevector <16 x i8> %158, <16 x i8> %159, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %161 = getelementptr inbounds i8, i8* %153, i64 %60
  %162 = bitcast i8* %161 to i64*
  %163 = load i64, i64* %162, align 1
  %164 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %163, i32 0
  %165 = bitcast <2 x i64> %164 to <16 x i8>
  %166 = shufflevector <16 x i8> %159, <16 x i8> %165, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %167 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %169 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = shufflevector <16 x i8> %143, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %171 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %172 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = bitcast <16 x i8> %167 to <8 x i16>
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %173, <8 x i16> %61) #3
  %175 = bitcast <16 x i8> %168 to <8 x i16>
  %176 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %175, <8 x i16> %62) #3
  %177 = bitcast <16 x i8> %169 to <8 x i16>
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> %63) #3
  %179 = bitcast <16 x i8> %170 to <8 x i16>
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %179, <8 x i16> %64) #3
  %181 = bitcast <16 x i8> %171 to <8 x i16>
  %182 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %181, <8 x i16> %65) #3
  %183 = bitcast <16 x i8> %172 to <8 x i16>
  %184 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %183, <8 x i16> %66) #3
  %185 = shufflevector <16 x i8> %149, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %186 = shufflevector <16 x i8> %147, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %187 = shufflevector <16 x i8> %145, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %188 = shufflevector <16 x i8> %143, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = shufflevector <16 x i8> %141, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = shufflevector <16 x i8> %160, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %191 = bitcast <16 x i8> %185 to <8 x i16>
  %192 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %191, <8 x i16> %61) #3
  %193 = bitcast <16 x i8> %186 to <8 x i16>
  %194 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %193, <8 x i16> %62) #3
  %195 = bitcast <16 x i8> %187 to <8 x i16>
  %196 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %195, <8 x i16> %63) #3
  %197 = bitcast <16 x i8> %188 to <8 x i16>
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %197, <8 x i16> %64) #3
  %199 = bitcast <16 x i8> %189 to <8 x i16>
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %199, <8 x i16> %65) #3
  %201 = bitcast <16 x i8> %190 to <8 x i16>
  %202 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %201, <8 x i16> %66) #3
  %203 = add <4 x i32> %174, <i32 64, i32 64, i32 64, i32 64>
  %204 = add <4 x i32> %203, %176
  %205 = add <4 x i32> %204, %178
  %206 = add <4 x i32> %205, %180
  %207 = add <4 x i32> %206, %182
  %208 = add <4 x i32> %207, %184
  %209 = ashr <4 x i32> %208, <i32 7, i32 7, i32 7, i32 7>
  %210 = add <4 x i32> %192, <i32 64, i32 64, i32 64, i32 64>
  %211 = add <4 x i32> %210, %194
  %212 = add <4 x i32> %211, %196
  %213 = add <4 x i32> %212, %198
  %214 = add <4 x i32> %213, %200
  %215 = add <4 x i32> %214, %202
  %216 = ashr <4 x i32> %215, <i32 7, i32 7, i32 7, i32 7>
  %217 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %209, <4 x i32> %216) #3
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %217, <8 x i16> undef) #3
  %219 = bitcast <16 x i8> %218 to <2 x i64>
  %220 = mul nsw i64 %139, %68
  %221 = getelementptr inbounds i8, i8* %137, i64 %220
  %222 = extractelement <2 x i64> %219, i32 0
  %223 = bitcast i8* %221 to i64*
  store i64 %222, i64* %223, align 1
  %224 = or i64 %139, 1
  %225 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %227 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %230 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %231 = bitcast <16 x i8> %225 to <8 x i16>
  %232 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %231, <8 x i16> %61) #3
  %233 = bitcast <16 x i8> %226 to <8 x i16>
  %234 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %233, <8 x i16> %62) #3
  %235 = bitcast <16 x i8> %227 to <8 x i16>
  %236 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %235, <8 x i16> %63) #3
  %237 = bitcast <16 x i8> %228 to <8 x i16>
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %237, <8 x i16> %64) #3
  %239 = bitcast <16 x i8> %229 to <8 x i16>
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %239, <8 x i16> %65) #3
  %241 = bitcast <16 x i8> %230 to <8 x i16>
  %242 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %241, <8 x i16> %66) #3
  %243 = shufflevector <16 x i8> %148, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %244 = shufflevector <16 x i8> %146, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %245 = shufflevector <16 x i8> %144, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %246 = shufflevector <16 x i8> %142, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %247 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %248 = shufflevector <16 x i8> %166, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %249 = bitcast <16 x i8> %243 to <8 x i16>
  %250 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %249, <8 x i16> %61) #3
  %251 = bitcast <16 x i8> %244 to <8 x i16>
  %252 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %251, <8 x i16> %62) #3
  %253 = bitcast <16 x i8> %245 to <8 x i16>
  %254 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %253, <8 x i16> %63) #3
  %255 = bitcast <16 x i8> %246 to <8 x i16>
  %256 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %255, <8 x i16> %64) #3
  %257 = bitcast <16 x i8> %247 to <8 x i16>
  %258 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %257, <8 x i16> %65) #3
  %259 = bitcast <16 x i8> %248 to <8 x i16>
  %260 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %259, <8 x i16> %66) #3
  %261 = add <4 x i32> %232, <i32 64, i32 64, i32 64, i32 64>
  %262 = add <4 x i32> %261, %234
  %263 = add <4 x i32> %262, %236
  %264 = add <4 x i32> %263, %238
  %265 = add <4 x i32> %264, %240
  %266 = add <4 x i32> %265, %242
  %267 = ashr <4 x i32> %266, <i32 7, i32 7, i32 7, i32 7>
  %268 = add <4 x i32> %250, <i32 64, i32 64, i32 64, i32 64>
  %269 = add <4 x i32> %268, %252
  %270 = add <4 x i32> %269, %254
  %271 = add <4 x i32> %270, %256
  %272 = add <4 x i32> %271, %258
  %273 = add <4 x i32> %272, %260
  %274 = ashr <4 x i32> %273, <i32 7, i32 7, i32 7, i32 7>
  %275 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %267, <4 x i32> %274) #3
  %276 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %275, <8 x i16> undef) #3
  %277 = bitcast <16 x i8> %276 to <2 x i64>
  %278 = mul nsw i64 %224, %68
  %279 = getelementptr inbounds i8, i8* %137, i64 %278
  %280 = extractelement <2 x i64> %277, i32 0
  %281 = bitcast i8* %279 to i64*
  store i64 %280, i64* %281, align 1
  %282 = add nuw nsw i64 %139, 2
  %283 = icmp slt i64 %282, %67
  br i1 %283, label %138, label %284

284:                                              ; preds = %138
  %285 = add nuw nsw i64 %71, 8
  %286 = icmp slt i64 %285, %69
  br i1 %286, label %70, label %287

287:                                              ; preds = %284
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_y_sr_sse2(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = icmp ugt i16 %10, 8
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = icmp slt i32 %4, 8
  br i1 %13, label %14, label %15

14:                                               ; preds = %12
  tail call void @av1_convolve_y_sr_c(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, %struct.InterpFilterParams* %6, i32 %7) #3
  br label %366

15:                                               ; preds = %12
  tail call void @av1_convolve_y_sr_12tap_sse2(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, %struct.InterpFilterParams* %6, i32 %7)
  br label %366

16:                                               ; preds = %8
  %17 = lshr i16 %10, 1
  %18 = zext i16 %17 to i32
  %19 = add nsw i32 %18, -1
  %20 = mul nsw i32 %19, %1
  %21 = sext i32 %20 to i64
  %22 = sub nsw i64 0, %21
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = and i32 %7, 15
  %25 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %26 = load i16*, i16** %25, align 8
  %27 = zext i16 %10 to i32
  %28 = mul nuw nsw i32 %24, %27
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %26, i64 %29
  %31 = bitcast i16* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 1
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %34 = bitcast <4 x i32> %33 to <2 x i64>
  %35 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %34, <2 x i64> undef, <2 x i32> zeroinitializer
  %38 = shufflevector <2 x i64> %34, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %39 = shufflevector <2 x i64> %36, <2 x i64> undef, <2 x i32> zeroinitializer
  %40 = shufflevector <2 x i64> %36, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %41 = icmp slt i32 %4, 5
  %42 = mul nsw i32 %1, 6
  %43 = sext i32 %42 to i64
  br i1 %41, label %65, label %44

44:                                               ; preds = %16
  %45 = sext i32 %1 to i64
  %46 = shl nsw i32 %1, 1
  %47 = sext i32 %46 to i64
  %48 = mul nsw i32 %1, 3
  %49 = sext i32 %48 to i64
  %50 = shl nsw i32 %1, 2
  %51 = sext i32 %50 to i64
  %52 = mul nsw i32 %1, 5
  %53 = sext i32 %52 to i64
  %54 = mul nsw i32 %1, 7
  %55 = sext i32 %54 to i64
  %56 = shl nsw i32 %1, 3
  %57 = sext i32 %56 to i64
  %58 = bitcast <2 x i64> %37 to <8 x i16>
  %59 = bitcast <2 x i64> %38 to <8 x i16>
  %60 = bitcast <2 x i64> %39 to <8 x i16>
  %61 = bitcast <2 x i64> %40 to <8 x i16>
  %62 = sext i32 %5 to i64
  %63 = sext i32 %3 to i64
  %64 = sext i32 %4 to i64
  br label %209

65:                                               ; preds = %16
  %66 = getelementptr inbounds i8, i8* %23, i64 %43
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %68, i32 0
  %70 = bitcast i8* %23 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %71, i32 0
  %73 = sext i32 %1 to i64
  %74 = getelementptr inbounds i8, i8* %23, i64 %73
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %76, i32 0
  %78 = bitcast <4 x i32> %72 to <16 x i8>
  %79 = bitcast <4 x i32> %77 to <16 x i8>
  %80 = shufflevector <16 x i8> %78, <16 x i8> %79, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shl nsw i32 %1, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %23, i64 %82
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 4
  %86 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %85, i32 0
  %87 = bitcast <4 x i32> %86 to <16 x i8>
  %88 = shufflevector <16 x i8> %79, <16 x i8> %87, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = mul nsw i32 %1, 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %23, i64 %90
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %93, i32 0
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %87, <16 x i8> %95, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = shl nsw i32 %1, 2
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %23, i64 %98
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %101, i32 0
  %103 = bitcast <4 x i32> %102 to <16 x i8>
  %104 = shufflevector <16 x i8> %95, <16 x i8> %103, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = mul nsw i32 %1, 5
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %23, i64 %106
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %109, i32 0
  %111 = bitcast <4 x i32> %110 to <16 x i8>
  %112 = shufflevector <16 x i8> %103, <16 x i8> %111, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = bitcast <4 x i32> %69 to <16 x i8>
  %114 = shufflevector <16 x i8> %111, <16 x i8> %113, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = mul nsw i32 %1, 7
  %116 = sext i32 %115 to i64
  %117 = shl nsw i32 %1, 3
  %118 = sext i32 %117 to i64
  %119 = bitcast <2 x i64> %37 to <8 x i16>
  %120 = bitcast <2 x i64> %38 to <8 x i16>
  %121 = bitcast <2 x i64> %39 to <8 x i16>
  %122 = bitcast <2 x i64> %40 to <8 x i16>
  %123 = icmp eq i32 %4, 2
  %124 = sext i32 %3 to i64
  br label %125

125:                                              ; preds = %204, %65
  %126 = phi <16 x i8> [ %114, %65 ], [ %148, %204 ]
  %127 = phi <16 x i8> [ %112, %65 ], [ %142, %204 ]
  %128 = phi <16 x i8> [ %104, %65 ], [ %126, %204 ]
  %129 = phi <16 x i8> [ %96, %65 ], [ %127, %204 ]
  %130 = phi <16 x i8> [ %88, %65 ], [ %128, %204 ]
  %131 = phi <16 x i8> [ %80, %65 ], [ %129, %204 ]
  %132 = phi i32 [ %5, %65 ], [ %207, %204 ]
  %133 = phi i8* [ %2, %65 ], [ %206, %204 ]
  %134 = phi i8* [ %23, %65 ], [ %205, %204 ]
  %135 = phi <4 x i32> [ %69, %65 ], [ %146, %204 ]
  %136 = getelementptr inbounds i8, i8* %134, i64 %116
  %137 = bitcast i8* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %138, i32 0
  %140 = bitcast <4 x i32> %135 to <16 x i8>
  %141 = bitcast <4 x i32> %139 to <16 x i8>
  %142 = shufflevector <16 x i8> %140, <16 x i8> %141, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = getelementptr inbounds i8, i8* %134, i64 %118
  %144 = bitcast i8* %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %145, i32 0
  %147 = bitcast <4 x i32> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %141, <16 x i8> %147, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %151 = shufflevector <16 x i8> %127, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = bitcast <16 x i8> %149 to <8 x i16>
  %154 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %153, <8 x i16> %119) #3
  %155 = bitcast <16 x i8> %150 to <8 x i16>
  %156 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %155, <8 x i16> %120) #3
  %157 = bitcast <16 x i8> %151 to <8 x i16>
  %158 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %121) #3
  %159 = bitcast <16 x i8> %152 to <8 x i16>
  %160 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> %122) #3
  %161 = add <4 x i32> %154, <i32 64, i32 64, i32 64, i32 64>
  %162 = add <4 x i32> %161, %156
  %163 = add <4 x i32> %162, %158
  %164 = add <4 x i32> %163, %160
  %165 = ashr <4 x i32> %164, <i32 7, i32 7, i32 7, i32 7>
  %166 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %165, <4 x i32> undef) #3
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %166, <8 x i16> undef) #3
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = extractelement <4 x i32> %168, i32 0
  br i1 %123, label %170, label %173

170:                                              ; preds = %125
  %171 = trunc i32 %169 to i16
  %172 = bitcast i8* %133 to i16*
  store i16 %171, i16* %172, align 2
  br label %175

173:                                              ; preds = %125
  %174 = bitcast i8* %133 to i32*
  store i32 %169, i32* %174, align 4
  br label %175

175:                                              ; preds = %173, %170
  %176 = getelementptr inbounds i8, i8* %134, i64 %73
  %177 = getelementptr inbounds i8, i8* %133, i64 %124
  %178 = shufflevector <16 x i8> %130, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %179 = shufflevector <16 x i8> %128, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %180 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %181 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %182 = bitcast <16 x i8> %178 to <8 x i16>
  %183 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %182, <8 x i16> %119) #3
  %184 = bitcast <16 x i8> %179 to <8 x i16>
  %185 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %184, <8 x i16> %120) #3
  %186 = bitcast <16 x i8> %180 to <8 x i16>
  %187 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %186, <8 x i16> %121) #3
  %188 = bitcast <16 x i8> %181 to <8 x i16>
  %189 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %188, <8 x i16> %122) #3
  %190 = add <4 x i32> %183, <i32 64, i32 64, i32 64, i32 64>
  %191 = add <4 x i32> %190, %185
  %192 = add <4 x i32> %191, %187
  %193 = add <4 x i32> %192, %189
  %194 = ashr <4 x i32> %193, <i32 7, i32 7, i32 7, i32 7>
  %195 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %194, <4 x i32> undef) #3
  %196 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> undef) #3
  %197 = bitcast <16 x i8> %196 to <4 x i32>
  %198 = extractelement <4 x i32> %197, i32 0
  br i1 %123, label %199, label %202

199:                                              ; preds = %175
  %200 = trunc i32 %198 to i16
  %201 = bitcast i8* %177 to i16*
  store i16 %200, i16* %201, align 2
  br label %204

202:                                              ; preds = %175
  %203 = bitcast i8* %177 to i32*
  store i32 %198, i32* %203, align 4
  br label %204

204:                                              ; preds = %202, %199
  %205 = getelementptr inbounds i8, i8* %176, i64 %73
  %206 = getelementptr inbounds i8, i8* %177, i64 %124
  %207 = add nsw i32 %132, -2
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %366, label %125

209:                                              ; preds = %44, %363
  %210 = phi i64 [ 0, %44 ], [ %364, %363 ]
  %211 = getelementptr inbounds i8, i8* %23, i64 %210
  %212 = getelementptr inbounds i8, i8* %211, i64 %43
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  %215 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %214, i32 0
  %216 = bitcast i8* %211 to i64*
  %217 = load i64, i64* %216, align 1
  %218 = insertelement <2 x i64> undef, i64 %217, i32 0
  %219 = getelementptr inbounds i8, i8* %211, i64 %45
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 1
  %222 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %221, i32 0
  %223 = bitcast <2 x i64> %218 to <16 x i8>
  %224 = bitcast <2 x i64> %222 to <16 x i8>
  %225 = shufflevector <16 x i8> %223, <16 x i8> %224, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = getelementptr inbounds i8, i8* %211, i64 %47
  %227 = bitcast i8* %226 to i64*
  %228 = load i64, i64* %227, align 1
  %229 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %228, i32 0
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %224, <16 x i8> %230, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %232 = getelementptr inbounds i8, i8* %211, i64 %49
  %233 = bitcast i8* %232 to i64*
  %234 = load i64, i64* %233, align 1
  %235 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %234, i32 0
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %230, <16 x i8> %236, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = getelementptr inbounds i8, i8* %211, i64 %51
  %239 = bitcast i8* %238 to i64*
  %240 = load i64, i64* %239, align 1
  %241 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %240, i32 0
  %242 = bitcast <2 x i64> %241 to <16 x i8>
  %243 = shufflevector <16 x i8> %236, <16 x i8> %242, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %244 = getelementptr inbounds i8, i8* %211, i64 %53
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %246, i32 0
  %248 = bitcast <2 x i64> %247 to <16 x i8>
  %249 = shufflevector <16 x i8> %242, <16 x i8> %248, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %250 = bitcast <2 x i64> %215 to <16 x i8>
  %251 = shufflevector <16 x i8> %248, <16 x i8> %250, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %252 = getelementptr inbounds i8, i8* %2, i64 %210
  br label %253

253:                                              ; preds = %253, %209
  %254 = phi i64 [ %361, %253 ], [ 0, %209 ]
  %255 = phi <16 x i8> [ %277, %253 ], [ %251, %209 ]
  %256 = phi <16 x i8> [ %271, %253 ], [ %249, %209 ]
  %257 = phi <16 x i8> [ %255, %253 ], [ %243, %209 ]
  %258 = phi <16 x i8> [ %256, %253 ], [ %237, %209 ]
  %259 = phi <16 x i8> [ %257, %253 ], [ %231, %209 ]
  %260 = phi <16 x i8> [ %258, %253 ], [ %225, %209 ]
  %261 = phi <2 x i64> [ %275, %253 ], [ %215, %209 ]
  %262 = mul nsw i64 %254, %45
  %263 = add nsw i64 %262, %210
  %264 = getelementptr inbounds i8, i8* %23, i64 %263
  %265 = getelementptr inbounds i8, i8* %264, i64 %55
  %266 = bitcast i8* %265 to i64*
  %267 = load i64, i64* %266, align 1
  %268 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %267, i32 0
  %269 = bitcast <2 x i64> %261 to <16 x i8>
  %270 = bitcast <2 x i64> %268 to <16 x i8>
  %271 = shufflevector <16 x i8> %269, <16 x i8> %270, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = getelementptr inbounds i8, i8* %264, i64 %57
  %273 = bitcast i8* %272 to i64*
  %274 = load i64, i64* %273, align 1
  %275 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %274, i32 0
  %276 = bitcast <2 x i64> %275 to <16 x i8>
  %277 = shufflevector <16 x i8> %270, <16 x i8> %276, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %278 = shufflevector <16 x i8> %260, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %279 = shufflevector <16 x i8> %258, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %280 = shufflevector <16 x i8> %256, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %281 = shufflevector <16 x i8> %271, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %282 = bitcast <16 x i8> %278 to <8 x i16>
  %283 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %282, <8 x i16> %58) #3
  %284 = bitcast <16 x i8> %279 to <8 x i16>
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %284, <8 x i16> %59) #3
  %286 = bitcast <16 x i8> %280 to <8 x i16>
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %286, <8 x i16> %60) #3
  %288 = bitcast <16 x i8> %281 to <8 x i16>
  %289 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %288, <8 x i16> %61) #3
  %290 = shufflevector <16 x i8> %260, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %291 = shufflevector <16 x i8> %258, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %292 = shufflevector <16 x i8> %256, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %293 = shufflevector <16 x i8> %271, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %294 = bitcast <16 x i8> %290 to <8 x i16>
  %295 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %294, <8 x i16> %58) #3
  %296 = bitcast <16 x i8> %291 to <8 x i16>
  %297 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %296, <8 x i16> %59) #3
  %298 = bitcast <16 x i8> %292 to <8 x i16>
  %299 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %298, <8 x i16> %60) #3
  %300 = bitcast <16 x i8> %293 to <8 x i16>
  %301 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %300, <8 x i16> %61) #3
  %302 = add <4 x i32> %283, <i32 64, i32 64, i32 64, i32 64>
  %303 = add <4 x i32> %302, %285
  %304 = add <4 x i32> %303, %287
  %305 = add <4 x i32> %304, %289
  %306 = ashr <4 x i32> %305, <i32 7, i32 7, i32 7, i32 7>
  %307 = add <4 x i32> %295, <i32 64, i32 64, i32 64, i32 64>
  %308 = add <4 x i32> %307, %297
  %309 = add <4 x i32> %308, %299
  %310 = add <4 x i32> %309, %301
  %311 = ashr <4 x i32> %310, <i32 7, i32 7, i32 7, i32 7>
  %312 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %306, <4 x i32> %311) #3
  %313 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %312, <8 x i16> undef) #3
  %314 = bitcast <16 x i8> %313 to <2 x i64>
  %315 = mul nsw i64 %254, %63
  %316 = getelementptr inbounds i8, i8* %252, i64 %315
  %317 = extractelement <2 x i64> %314, i32 0
  %318 = bitcast i8* %316 to i64*
  store i64 %317, i64* %318, align 1
  %319 = or i64 %254, 1
  %320 = shufflevector <16 x i8> %259, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %321 = shufflevector <16 x i8> %257, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %322 = shufflevector <16 x i8> %255, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %323 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %324 = bitcast <16 x i8> %320 to <8 x i16>
  %325 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> %58) #3
  %326 = bitcast <16 x i8> %321 to <8 x i16>
  %327 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %326, <8 x i16> %59) #3
  %328 = bitcast <16 x i8> %322 to <8 x i16>
  %329 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %328, <8 x i16> %60) #3
  %330 = bitcast <16 x i8> %323 to <8 x i16>
  %331 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %330, <8 x i16> %61) #3
  %332 = shufflevector <16 x i8> %259, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %333 = shufflevector <16 x i8> %257, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %334 = shufflevector <16 x i8> %255, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %335 = shufflevector <16 x i8> %277, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %336 = bitcast <16 x i8> %332 to <8 x i16>
  %337 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %336, <8 x i16> %58) #3
  %338 = bitcast <16 x i8> %333 to <8 x i16>
  %339 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %338, <8 x i16> %59) #3
  %340 = bitcast <16 x i8> %334 to <8 x i16>
  %341 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %340, <8 x i16> %60) #3
  %342 = bitcast <16 x i8> %335 to <8 x i16>
  %343 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %342, <8 x i16> %61) #3
  %344 = add <4 x i32> %325, <i32 64, i32 64, i32 64, i32 64>
  %345 = add <4 x i32> %344, %327
  %346 = add <4 x i32> %345, %329
  %347 = add <4 x i32> %346, %331
  %348 = ashr <4 x i32> %347, <i32 7, i32 7, i32 7, i32 7>
  %349 = add <4 x i32> %337, <i32 64, i32 64, i32 64, i32 64>
  %350 = add <4 x i32> %349, %339
  %351 = add <4 x i32> %350, %341
  %352 = add <4 x i32> %351, %343
  %353 = ashr <4 x i32> %352, <i32 7, i32 7, i32 7, i32 7>
  %354 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %348, <4 x i32> %353) #3
  %355 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %354, <8 x i16> undef) #3
  %356 = bitcast <16 x i8> %355 to <2 x i64>
  %357 = mul nsw i64 %319, %63
  %358 = getelementptr inbounds i8, i8* %252, i64 %357
  %359 = extractelement <2 x i64> %356, i32 0
  %360 = bitcast i8* %358 to i64*
  store i64 %359, i64* %360, align 1
  %361 = add nuw nsw i64 %254, 2
  %362 = icmp slt i64 %361, %62
  br i1 %362, label %253, label %363

363:                                              ; preds = %253
  %364 = add nuw nsw i64 %210, 8
  %365 = icmp slt i64 %364, %64
  br i1 %365, label %209, label %366

366:                                              ; preds = %363, %204, %14, %15
  ret void
}

declare void @av1_convolve_y_sr_c(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_x_sr_12tap_sse2(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = lshr i16 %11, 1
  %13 = zext i16 %12 to i64
  %14 = sub nsw i64 1, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 7, %17
  %19 = shl i32 1, %17
  %20 = ashr i32 %19, 1
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = shl i32 1, %18
  %24 = ashr i32 %23, 1
  %25 = insertelement <4 x i32> undef, i32 %24, i32 0
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> zeroinitializer
  %27 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %17, i32 0
  %28 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %18, i32 0
  %29 = and i32 %7, 15
  %30 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %31 = load i16*, i16** %30, align 8
  %32 = zext i16 %11 to i32
  %33 = mul nuw nsw i32 %29, %32
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %31, i64 %34
  %36 = bitcast i16* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 1
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %40 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %41 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %42 = getelementptr inbounds i16, i16* %35, i64 8
  %43 = bitcast i16* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <4 x i32>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> zeroinitializer
  %48 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %49 = bitcast <4 x i32> %38 to <8 x i16>
  %50 = bitcast <4 x i32> %39 to <8 x i16>
  %51 = bitcast <4 x i32> %40 to <8 x i16>
  %52 = bitcast <4 x i32> %41 to <8 x i16>
  %53 = bitcast <4 x i32> %47 to <8 x i16>
  %54 = bitcast <4 x i32> %48 to <8 x i16>
  %55 = sext i32 %4 to i64
  %56 = sext i32 %5 to i64
  %57 = sext i32 %1 to i64
  %58 = sext i32 %3 to i64
  br label %59

59:                                               ; preds = %129, %9
  %60 = phi i64 [ %130, %129 ], [ 0, %9 ]
  %61 = mul nsw i64 %60, %57
  %62 = mul nsw i64 %60, %58
  %63 = getelementptr inbounds i8, i8* %2, i64 %62
  br label %64

64:                                               ; preds = %64, %59
  %65 = phi i64 [ %127, %64 ], [ 0, %59 ]
  %66 = add nsw i64 %65, %61
  %67 = getelementptr inbounds i8, i8* %15, i64 %66
  %68 = bitcast i8* %67 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 1
  %70 = bitcast <2 x i64> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <2 x i64> %69 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = shufflevector <8 x i16> %72, <8 x i16> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = shufflevector <8 x i16> %77, <8 x i16> %78, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = bitcast <16 x i8> %81 to <8 x i16>
  %84 = shufflevector <8 x i16> %82, <8 x i16> %83, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %85 to <8 x i16>
  %88 = bitcast <16 x i8> %86 to <8 x i16>
  %89 = shufflevector <8 x i16> %87, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = bitcast <8 x i16> %74 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = bitcast <8 x i16> %79 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = bitcast <8 x i16> %84 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %96 = bitcast <8 x i16> %89 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %98 = shufflevector <16 x i8> %94, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %99 = shufflevector <16 x i8> %96, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %100 = bitcast <16 x i8> %91 to <8 x i16>
  %101 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %100, <8 x i16> %49) #3
  %102 = bitcast <16 x i8> %93 to <8 x i16>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %50) #3
  %104 = bitcast <16 x i8> %95 to <8 x i16>
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %51) #3
  %106 = bitcast <16 x i8> %97 to <8 x i16>
  %107 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %106, <8 x i16> %52) #3
  %108 = bitcast <16 x i8> %98 to <8 x i16>
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %53) #3
  %110 = bitcast <16 x i8> %99 to <8 x i16>
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %54) #3
  %112 = add <4 x i32> %101, %22
  %113 = add <4 x i32> %112, %103
  %114 = add <4 x i32> %113, %105
  %115 = add <4 x i32> %114, %107
  %116 = add <4 x i32> %115, %109
  %117 = add <4 x i32> %116, %111
  %118 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %117, <4 x i32> %27) #3
  %119 = add <4 x i32> %118, %26
  %120 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %119, <4 x i32> %28) #3
  %121 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %120, <4 x i32> undef) #3
  %122 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %121, <8 x i16> undef) #3
  %123 = bitcast <16 x i8> %122 to <4 x i32>
  %124 = extractelement <4 x i32> %123, i32 0
  %125 = getelementptr inbounds i8, i8* %63, i64 %65
  %126 = bitcast i8* %125 to i32*
  store i32 %124, i32* %126, align 1
  %127 = add nuw nsw i64 %65, 4
  %128 = icmp slt i64 %127, %55
  br i1 %128, label %64, label %129

129:                                              ; preds = %64
  %130 = add nuw nsw i64 %60, 1
  %131 = icmp slt i64 %130, %56
  br i1 %131, label %59, label %132

132:                                              ; preds = %129
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_x_sr_sse2(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, i32, %struct.ConvolveParams*) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = icmp ugt i16 %11, 8
  br i1 %12, label %13, label %137

13:                                               ; preds = %9
  %14 = icmp slt i32 %4, 4
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void @av1_convolve_x_sr_c(i8* %0, i32 %1, i8* %2, i32 %3, i32 %4, i32 %5, %struct.InterpFilterParams* %6, i32 %7, %struct.ConvolveParams* %8) #3
  br label %305

16:                                               ; preds = %13
  %17 = lshr i16 %11, 1
  %18 = zext i16 %17 to i64
  %19 = sub nsw i64 1, %18
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  %21 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 7, %22
  %24 = shl i32 1, %22
  %25 = ashr i32 %24, 1
  %26 = insertelement <4 x i32> undef, i32 %25, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = shl i32 1, %23
  %29 = ashr i32 %28, 1
  %30 = insertelement <4 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %22, i32 0
  %33 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %23, i32 0
  %34 = and i32 %7, 15
  %35 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = zext i16 %11 to i32
  %38 = mul nuw nsw i32 %34, %37
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %36, i64 %39
  %41 = bitcast i16* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 1
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %45 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %46 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %47 = getelementptr inbounds i16, i16* %40, i64 8
  %48 = bitcast i16* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <4 x i32>
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %54 = bitcast <4 x i32> %43 to <8 x i16>
  %55 = bitcast <4 x i32> %44 to <8 x i16>
  %56 = bitcast <4 x i32> %45 to <8 x i16>
  %57 = bitcast <4 x i32> %46 to <8 x i16>
  %58 = bitcast <4 x i32> %52 to <8 x i16>
  %59 = bitcast <4 x i32> %53 to <8 x i16>
  %60 = sext i32 %4 to i64
  %61 = sext i32 %5 to i64
  %62 = sext i32 %1 to i64
  %63 = sext i32 %3 to i64
  br label %64

64:                                               ; preds = %134, %16
  %65 = phi i64 [ %135, %134 ], [ 0, %16 ]
  %66 = mul nsw i64 %65, %62
  %67 = mul nsw i64 %65, %63
  %68 = getelementptr inbounds i8, i8* %2, i64 %67
  br label %69

69:                                               ; preds = %69, %64
  %70 = phi i64 [ %132, %69 ], [ 0, %64 ]
  %71 = add nsw i64 %70, %66
  %72 = getelementptr inbounds i8, i8* %20, i64 %71
  %73 = bitcast i8* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 1
  %75 = bitcast <2 x i64> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %77 = bitcast <2 x i64> %74 to <8 x i16>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = shufflevector <8 x i16> %77, <8 x i16> %78, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <16 x i8> %80 to <8 x i16>
  %83 = bitcast <16 x i8> %81 to <8 x i16>
  %84 = shufflevector <8 x i16> %82, <8 x i16> %83, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = bitcast <16 x i8> %85 to <8 x i16>
  %88 = bitcast <16 x i8> %86 to <8 x i16>
  %89 = shufflevector <8 x i16> %87, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %91 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = bitcast <16 x i8> %90 to <8 x i16>
  %93 = bitcast <16 x i8> %91 to <8 x i16>
  %94 = shufflevector <8 x i16> %92, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = bitcast <8 x i16> %79 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = bitcast <8 x i16> %84 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = bitcast <8 x i16> %89 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = bitcast <8 x i16> %94 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %99, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = shufflevector <16 x i8> %101, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i8> %96 to <8 x i16>
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> %54) #3
  %107 = bitcast <16 x i8> %98 to <8 x i16>
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %55) #3
  %109 = bitcast <16 x i8> %100 to <8 x i16>
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %56) #3
  %111 = bitcast <16 x i8> %102 to <8 x i16>
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %111, <8 x i16> %57) #3
  %113 = bitcast <16 x i8> %103 to <8 x i16>
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %113, <8 x i16> %58) #3
  %115 = bitcast <16 x i8> %104 to <8 x i16>
  %116 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %115, <8 x i16> %59) #3
  %117 = add <4 x i32> %106, %27
  %118 = add <4 x i32> %117, %108
  %119 = add <4 x i32> %118, %110
  %120 = add <4 x i32> %119, %112
  %121 = add <4 x i32> %120, %114
  %122 = add <4 x i32> %121, %116
  %123 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %122, <4 x i32> %32) #3
  %124 = add <4 x i32> %123, %31
  %125 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %124, <4 x i32> %33) #3
  %126 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %125, <4 x i32> undef) #3
  %127 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %126, <8 x i16> undef) #3
  %128 = bitcast <16 x i8> %127 to <4 x i32>
  %129 = extractelement <4 x i32> %128, i32 0
  %130 = getelementptr inbounds i8, i8* %68, i64 %70
  %131 = bitcast i8* %130 to i32*
  store i32 %129, i32* %131, align 1
  %132 = add nuw nsw i64 %70, 4
  %133 = icmp slt i64 %132, %60
  br i1 %133, label %69, label %134

134:                                              ; preds = %69
  %135 = add nuw nsw i64 %65, 1
  %136 = icmp slt i64 %135, %61
  br i1 %136, label %64, label %305

137:                                              ; preds = %9
  %138 = lshr i16 %11, 1
  %139 = zext i16 %138 to i64
  %140 = sub nsw i64 1, %139
  %141 = getelementptr inbounds i8, i8* %0, i64 %140
  %142 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %8, i64 0, i32 3
  %143 = load i32, i32* %142, align 4
  %144 = sub nsw i32 7, %143
  %145 = shl i32 1, %143
  %146 = ashr i32 %145, 1
  %147 = insertelement <4 x i32> undef, i32 %146, i32 0
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> zeroinitializer
  %149 = shl i32 1, %144
  %150 = ashr i32 %149, 1
  %151 = insertelement <4 x i32> undef, i32 %150, i32 0
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> zeroinitializer
  %153 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %143, i32 0
  %154 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %144, i32 0
  %155 = and i32 %7, 15
  %156 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %157 = load i16*, i16** %156, align 8
  %158 = zext i16 %11 to i32
  %159 = mul nuw nsw i32 %155, %158
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds i16, i16* %157, i64 %160
  %162 = bitcast i16* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 1
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %165, <2 x i64> undef, <2 x i32> zeroinitializer
  %169 = shufflevector <2 x i64> %165, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %170 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> zeroinitializer
  %171 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %172 = icmp slt i32 %4, 5
  %173 = bitcast <2 x i64> %168 to <8 x i16>
  %174 = bitcast <2 x i64> %169 to <8 x i16>
  %175 = bitcast <2 x i64> %170 to <8 x i16>
  %176 = bitcast <2 x i64> %171 to <8 x i16>
  br i1 %172, label %182, label %177

177:                                              ; preds = %137
  %178 = sext i32 %4 to i64
  %179 = sext i32 %5 to i64
  %180 = sext i32 %1 to i64
  %181 = sext i32 %3 to i64
  br label %236

182:                                              ; preds = %137
  %183 = icmp eq i32 %4, 2
  %184 = sext i32 %1 to i64
  %185 = sext i32 %3 to i64
  br label %186

186:                                              ; preds = %182, %231
  %187 = phi i8* [ %232, %231 ], [ %141, %182 ]
  %188 = phi i32 [ %234, %231 ], [ %5, %182 ]
  %189 = phi i8* [ %233, %231 ], [ %2, %182 ]
  %190 = bitcast i8* %187 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %193 = shufflevector <16 x i8> %191, <16 x i8> %192, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %195 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = shufflevector <16 x i8> %194, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %197 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %198 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = shufflevector <16 x i8> %197, <16 x i8> %198, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %200 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %202 = shufflevector <16 x i8> %200, <16 x i8> %201, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %203 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %204 = shufflevector <16 x i8> %196, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %205 = shufflevector <16 x i8> %199, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %206 = shufflevector <16 x i8> %202, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %207 = bitcast <16 x i8> %203 to <8 x i16>
  %208 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> %173) #3
  %209 = bitcast <16 x i8> %204 to <8 x i16>
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %209, <8 x i16> %174) #3
  %211 = bitcast <16 x i8> %205 to <8 x i16>
  %212 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %211, <8 x i16> %175) #3
  %213 = bitcast <16 x i8> %206 to <8 x i16>
  %214 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %213, <8 x i16> %176) #3
  %215 = add <4 x i32> %208, %148
  %216 = add <4 x i32> %215, %210
  %217 = add <4 x i32> %216, %212
  %218 = add <4 x i32> %217, %214
  %219 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %218, <4 x i32> %153) #3
  %220 = add <4 x i32> %219, %152
  %221 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %220, <4 x i32> %154) #3
  %222 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %221, <4 x i32> undef) #3
  %223 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> undef) #3
  %224 = bitcast <16 x i8> %223 to <4 x i32>
  %225 = extractelement <4 x i32> %224, i32 0
  br i1 %183, label %226, label %229

226:                                              ; preds = %186
  %227 = trunc i32 %225 to i16
  %228 = bitcast i8* %189 to i16*
  store i16 %227, i16* %228, align 2
  br label %231

229:                                              ; preds = %186
  %230 = bitcast i8* %189 to i32*
  store i32 %225, i32* %230, align 4
  br label %231

231:                                              ; preds = %229, %226
  %232 = getelementptr inbounds i8, i8* %187, i64 %184
  %233 = getelementptr inbounds i8, i8* %189, i64 %185
  %234 = add nsw i32 %188, -1
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %305, label %186

236:                                              ; preds = %177, %302
  %237 = phi i64 [ 0, %177 ], [ %303, %302 ]
  %238 = mul nsw i64 %237, %180
  %239 = mul nsw i64 %237, %181
  %240 = getelementptr inbounds i8, i8* %2, i64 %239
  br label %241

241:                                              ; preds = %241, %236
  %242 = phi i64 [ %300, %241 ], [ 0, %236 ]
  %243 = add nsw i64 %242, %238
  %244 = getelementptr inbounds i8, i8* %141, i64 %243
  %245 = bitcast i8* %244 to <16 x i8>*
  %246 = load <16 x i8>, <16 x i8>* %245, align 1
  %247 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %249 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %250 = shufflevector <16 x i8> %246, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %251 = shufflevector <16 x i8> %247, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %252 = shufflevector <16 x i8> %248, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %253 = shufflevector <16 x i8> %249, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %254 = bitcast <16 x i8> %250 to <8 x i16>
  %255 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %254, <8 x i16> %173) #3
  %256 = bitcast <16 x i8> %251 to <8 x i16>
  %257 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %256, <8 x i16> %174) #3
  %258 = bitcast <16 x i8> %252 to <8 x i16>
  %259 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %258, <8 x i16> %175) #3
  %260 = bitcast <16 x i8> %253 to <8 x i16>
  %261 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %260, <8 x i16> %176) #3
  %262 = add <4 x i32> %257, %255
  %263 = add <4 x i32> %262, %259
  %264 = add <4 x i32> %263, %261
  %265 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %266 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %267 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %268 = shufflevector <16 x i8> %246, <16 x i8> undef, <16 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %269 = shufflevector <16 x i8> %265, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %270 = shufflevector <16 x i8> %266, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %271 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %273 = bitcast <16 x i8> %269 to <8 x i16>
  %274 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %273, <8 x i16> %173) #3
  %275 = bitcast <16 x i8> %270 to <8 x i16>
  %276 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %275, <8 x i16> %174) #3
  %277 = bitcast <16 x i8> %271 to <8 x i16>
  %278 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %277, <8 x i16> %175) #3
  %279 = bitcast <16 x i8> %272 to <8 x i16>
  %280 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %279, <8 x i16> %176) #3
  %281 = add <4 x i32> %276, %274
  %282 = add <4 x i32> %281, %278
  %283 = add <4 x i32> %282, %280
  %284 = shufflevector <4 x i32> %264, <4 x i32> %283, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %285 = shufflevector <4 x i32> %264, <4 x i32> %283, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %286 = add <4 x i32> %284, %148
  %287 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %286, <4 x i32> %153) #3
  %288 = add <4 x i32> %287, %152
  %289 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %288, <4 x i32> %154) #3
  %290 = add <4 x i32> %285, %148
  %291 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %290, <4 x i32> %153) #3
  %292 = add <4 x i32> %291, %152
  %293 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %292, <4 x i32> %154) #3
  %294 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %289, <4 x i32> %293) #3
  %295 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %294, <8 x i16> undef) #3
  %296 = bitcast <16 x i8> %295 to <2 x i64>
  %297 = getelementptr inbounds i8, i8* %240, i64 %242
  %298 = extractelement <2 x i64> %296, i32 0
  %299 = bitcast i8* %297 to i64*
  store i64 %298, i64* %299, align 1
  %300 = add nuw nsw i64 %242, 8
  %301 = icmp slt i64 %300, %178
  br i1 %301, label %241, label %302

302:                                              ; preds = %241
  %303 = add nuw nsw i64 %237, 1
  %304 = icmp slt i64 %303, %179
  br i1 %304, label %236, label %305

305:                                              ; preds = %302, %231, %134, %15
  ret void
}

declare void @av1_convolve_x_sr_c(i8*, i32, i8*, i32, i32, i32, %struct.InterpFilterParams*, i32, %struct.ConvolveParams*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
