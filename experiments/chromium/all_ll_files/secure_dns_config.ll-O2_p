; ModuleID = '../../chrome/browser/net/secure_dns_config.cc'
source_filename = "../../chrome/browser/net/secure_dns_config.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.SecureDnsConfig = type <{ i32, [4 x i8], %"class.std::__1::vector", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"*, %"class.std::__1::__compressed_pair.1" }
%"struct.net::DnsOverHttpsServerConfig" = type <{ %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.net::DnsOverHttpsServerConfig"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN15SecureDnsConfig8kModeOffE = hidden constant [4 x i8] c"off\00", align 1
@_ZN15SecureDnsConfig14kModeAutomaticE = hidden constant [10 x i8] c"automatic\00", align 1
@_ZN15SecureDnsConfig11kModeSecureE = hidden constant [7 x i8] c"secure\00", align 1
@switch.table._ZN15SecureDnsConfig12ModeToStringEN3net13SecureDnsModeE = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN15SecureDnsConfig8kModeOffE, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZN15SecureDnsConfig14kModeAutomaticE, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZN15SecureDnsConfig11kModeSecureE, i64 0, i64 0)], align 8

@_ZN15SecureDnsConfigC1EN3net13SecureDnsModeENSt3__16vectorINS0_24DnsOverHttpsServerConfigENS2_9allocatorIS4_EEEENS_14ManagementModeE = hidden unnamed_addr alias void (%class.SecureDnsConfig*, i32, %"class.std::__1::vector"*, i32), void (%class.SecureDnsConfig*, i32, %"class.std::__1::vector"*, i32)* @_ZN15SecureDnsConfigC2EN3net13SecureDnsModeENSt3__16vectorINS0_24DnsOverHttpsServerConfigENS2_9allocatorIS4_EEEENS_14ManagementModeE
@_ZN15SecureDnsConfigC1EOS_ = hidden unnamed_addr alias void (%class.SecureDnsConfig*, %class.SecureDnsConfig*), void (%class.SecureDnsConfig*, %class.SecureDnsConfig*)* @_ZN15SecureDnsConfigC2EOS_
@_ZN15SecureDnsConfigD1Ev = hidden unnamed_addr alias void (%class.SecureDnsConfig*), void (%class.SecureDnsConfig*)* @_ZN15SecureDnsConfigD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SecureDnsConfigC2EN3net13SecureDnsModeENSt3__16vectorINS0_24DnsOverHttpsServerConfigENS2_9allocatorIS4_EEEENS_14ManagementModeE(%class.SecureDnsConfig* nocapture, i32, %"class.std::__1::vector"* nocapture, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #6
  %8 = bitcast %"class.std::__1::vector"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %12 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 1
  %15 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #6
  %22 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 3
  store i32 %3, i32* %22, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SecureDnsConfigC2EOS_(%class.SecureDnsConfig* nocapture, %class.SecureDnsConfig* nocapture dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2
  %8 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #6
  %9 = bitcast %"class.std::__1::vector"* %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %6 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2, i32 0, i32 1
  %13 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 1
  %16 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #6
  %23 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 3
  %24 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %class.SecureDnsConfig* @_ZN15SecureDnsConfigaSEOS_(%class.SecureDnsConfig* returned, %class.SecureDnsConfig* nocapture dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2
  %7 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %9 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %8, align 8
  %10 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %9, null
  br i1 %10, label %34, label %11

11:                                               ; preds = %2
  %12 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %9 to i8*
  %13 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %13, align 8
  %15 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %14, %9
  br i1 %15, label %31, label %16

16:                                               ; preds = %11, %26
  %17 = phi %"struct.net::DnsOverHttpsServerConfig"* [ %18, %26 ], [ %14, %11 ]
  %18 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %17, i64 -1
  %19 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  tail call void @_ZdlPv(i8* %25) #7
  br label %26

26:                                               ; preds = %23, %16
  %27 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %18, %9
  br i1 %27, label %28, label %16

28:                                               ; preds = %26
  %29 = bitcast %"class.std::__1::vector"* %6 to i8**
  %30 = load i8*, i8** %29, align 8
  br label %31

31:                                               ; preds = %28, %11
  %32 = phi i8* [ %30, %28 ], [ %12, %11 ]
  store %"struct.net::DnsOverHttpsServerConfig"* %9, %"struct.net::DnsOverHttpsServerConfig"** %13, align 8
  tail call void @_ZdlPv(i8* %32) #7
  %33 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #6
  br label %34

34:                                               ; preds = %2, %31
  %35 = bitcast %"class.std::__1::vector"* %7 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.std::__1::vector"* %6 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2, i32 0, i32 1
  %39 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 1
  %42 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %41 to i64*
  store i64 %40, i64* %42, align 8
  %43 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #6
  %49 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %1, i64 0, i32 3
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 3
  store i32 %50, i32* %51, align 8
  ret %class.SecureDnsConfig* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SecureDnsConfigD2Ev(%class.SecureDnsConfig* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %3, align 8
  %5 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %4 to i8*
  %8 = getelementptr inbounds %class.SecureDnsConfig, %class.SecureDnsConfig* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %8, align 8
  %10 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %9, %4
  br i1 %10, label %26, label %11

11:                                               ; preds = %6, %21
  %12 = phi %"struct.net::DnsOverHttpsServerConfig"* [ %13, %21 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %12, i64 -1
  %14 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  tail call void @_ZdlPv(i8* %20) #7
  br label %21

21:                                               ; preds = %18, %11
  %22 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %13, %4
  br i1 %22, label %23, label %11

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector"* %2 to i8**
  %25 = load i8*, i8** %24, align 8
  br label %26

26:                                               ; preds = %23, %6
  %27 = phi i8* [ %25, %23 ], [ %7, %6 ]
  store %"struct.net::DnsOverHttpsServerConfig"* %4, %"struct.net::DnsOverHttpsServerConfig"** %8, align 8
  tail call void @_ZdlPv(i8* %27) #7
  br label %28

28:                                               ; preds = %1, %26
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN15SecureDnsConfig9ParseModeEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  switch i64 %1, label %12 [
    i64 6, label %3
    i64 9, label %6
    i64 3, label %9
  ]

3:                                                ; preds = %2
  %4 = tail call i32 @bcmp(i8* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_ZN15SecureDnsConfig11kModeSecureE, i64 0, i64 0), i64 6) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %13, label %12

6:                                                ; preds = %2
  %7 = tail call i32 @bcmp(i8* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZN15SecureDnsConfig14kModeAutomaticE, i64 0, i64 0), i64 %1) #6
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %12

9:                                                ; preds = %2
  %10 = tail call i32 @bcmp(i8* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZN15SecureDnsConfig8kModeOffE, i64 0, i64 0), i64 %1) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %6, %3, %2, %9
  br label %13

13:                                               ; preds = %9, %6, %3, %12
  %14 = phi i64 [ 0, %12 ], [ 1, %3 ], [ 1, %6 ], [ 1, %9 ]
  %15 = phi i64 [ 0, %12 ], [ 8589934592, %3 ], [ 4294967296, %6 ], [ 0, %9 ]
  %16 = or i64 %15, %14
  ret i64 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN15SecureDnsConfig12ModeToStringEN3net13SecureDnsModeE(i32) local_unnamed_addr #2 align 2 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZN15SecureDnsConfig12ModeToStringEN3net13SecureDnsModeE, i64 0, i64 %2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
