; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLIndexExpression.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLIndexExpression.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.17", %"class.std::__1::__compressed_pair.26", %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.33", [4 x i8] }>
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i64 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.36"* }
%"class.std::__1::vector.36" = type opaque
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.6", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.8" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [4 x i8] }
%class.SkTArray = type { i8*, i64 }
%"struct.SkSL::IndexExpression" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.37" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.SkSL::Expression"* }

$_ZN4SkSL15IndexExpressionD2Ev = comdat any

$_ZN4SkSL15IndexExpressionD0Ev = comdat any

$_ZNK4SkSL15IndexExpression11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL10Expression21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL10Expression15compareConstantERKS0_ = comdat any

$_ZNK4SkSL10Expression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL15IndexExpression11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL10Expression24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL15IndexExpression5cloneEv = comdat any

$_ZTVN4SkSL15IndexExpressionE = comdat any

@.str = private unnamed_addr constant [28 x i8] c"expected array, but found '\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"index \00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c" out of range for '\00", align 1
@_ZTVN4SkSL15IndexExpressionE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.SkSL::IndexExpression"*)* @_ZN4SkSL15IndexExpressionD2Ev to i8*), i8* bitcast (void (%"struct.SkSL::IndexExpression"*)* @_ZN4SkSL15IndexExpressionD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"struct.SkSL::IndexExpression"*)* @_ZNK4SkSL15IndexExpression11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Expression"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression15compareConstantERKS0_ to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"struct.SkSL::IndexExpression"*, i32)* @_ZNK4SkSL15IndexExpression11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Expression"*, i32)* @_ZNK4SkSL10Expression24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"struct.SkSL::IndexExpression"*)* @_ZNK4SkSL15IndexExpression5cloneEv to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(184) %"class.SkSL::Type"* @_ZN4SkSL15IndexExpression9IndexTypeERKNS_7ContextERKNS_4TypeE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), %"class.SkSL::Type"* readonly dereferenceable(184)) local_unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"struct.SkSL::StringFragment"*
  %6 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 4
  br i1 %8, label %9, label %65

9:                                                ; preds = %2
  %10 = bitcast <2 x i64>* %3 to %"struct.SkSL::StringFragment"*
  %11 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 6
  %12 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %11, align 8
  %13 = icmp eq %"class.SkSL::Type"* %12, null
  %14 = select i1 %13, %"class.SkSL::Type"* %1, %"class.SkSL::Type"* %12
  %15 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %15, align 8
  %17 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #7
  %18 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %14, i64 0, i32 0, i32 1, i32 0
  %19 = bitcast i8** %18 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 8
  store <2 x i64> %20, <2 x i64>* %3, align 16
  %21 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %10, i8* %22, i64 %24) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #7
  br i1 %25, label %26, label %38

26:                                               ; preds = %9
  %27 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 9
  %28 = load i32, i32* %27, align 4
  switch i32 %28, label %65 [
    i32 2, label %29
    i32 3, label %32
    i32 4, label %35
  ]

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %31 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %30, align 8
  br label %70

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %34 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %33, align 8
  br label %70

35:                                               ; preds = %26
  %36 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %37 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %36, align 8
  br label %70

38:                                               ; preds = %9
  %39 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %11, align 8
  %40 = icmp eq %"class.SkSL::Type"* %39, null
  %41 = select i1 %40, %"class.SkSL::Type"* %1, %"class.SkSL::Type"* %39
  %42 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %42, align 8
  %44 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #7
  %45 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %41, i64 0, i32 0, i32 1, i32 0
  %46 = bitcast i8** %45 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  store <2 x i64> %47, <2 x i64>* %4, align 16
  %48 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %43, i64 0, i32 0, i32 1, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %43, i64 0, i32 0, i32 1, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %5, i8* %49, i64 %51) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #7
  br i1 %52, label %53, label %65

53:                                               ; preds = %38
  %54 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 9
  %55 = load i32, i32* %54, align 4
  switch i32 %55, label %65 [
    i32 2, label %56
    i32 3, label %59
    i32 4, label %62
  ]

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %58 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %57, align 8
  br label %70

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 6, i32 0, i32 0, i32 0
  %61 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %60, align 8
  br label %70

62:                                               ; preds = %53
  %63 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 7, i32 0, i32 0, i32 0
  %64 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %63, align 8
  br label %70

65:                                               ; preds = %26, %53, %38, %2
  %66 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 6
  %67 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %66, align 8
  %68 = icmp eq %"class.SkSL::Type"* %67, null
  %69 = select i1 %68, %"class.SkSL::Type"* %1, %"class.SkSL::Type"* %67
  br label %70

70:                                               ; preds = %65, %62, %59, %56, %35, %32, %29
  %71 = phi %"class.SkSL::Type"* [ %69, %65 ], [ %37, %35 ], [ %34, %32 ], [ %31, %29 ], [ %64, %62 ], [ %61, %59 ], [ %58, %56 ]
  ret %"class.SkSL::Type"* %71
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL15IndexExpression7ConvertERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = alloca %"class.SkSL::String", align 8
  %11 = alloca %"class.SkSL::String", align 8
  %12 = alloca %"class.SkSL::String", align 8
  %13 = ptrtoint %"class.SkSL::Expression"* %2 to i64
  %14 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %15 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %15, i64 3
  %17 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %16, align 8
  %18 = tail call dereferenceable(184) %"class.SkSL::Type"* %17(%"class.SkSL::Expression"* %1) #7
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %18, i64 0, i32 3
  %20 = load i32, i32* %19, align 8
  switch i32 %20, label %21 [
    i32 0, label %86
    i32 4, label %86
    i32 11, label %86
  ]

21:                                               ; preds = %3
  %22 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %23 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %22, align 8
  %24 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #7
  %27 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #7
  %28 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %18, i64 0, i32 18
  %29 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %28, align 8, !noalias !2
  %30 = icmp eq %"class.SkSL::Type"* %29, null
  %31 = select i1 %30, %"class.SkSL::Type"* %18, %"class.SkSL::Type"* %29
  %32 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %31, i64 0, i32 0, i32 1, i32 0
  %33 = load i8*, i8** %32, align 8, !noalias !2
  %34 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %31, i64 0, i32 0, i32 1, i32 1
  %35 = load i64, i64* %34, align 8, !noalias !2
  %36 = icmp ugt i64 %35, -17
  br i1 %36, label %37, label %39

37:                                               ; preds = %21
  %38 = bitcast %"class.SkSL::String"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %38) #8
  unreachable

39:                                               ; preds = %21
  %40 = icmp ult i64 %35, 23
  br i1 %40, label %49, label %41

41:                                               ; preds = %39
  %42 = add nuw i64 %35, 16
  %43 = and i64 %42, -16
  %44 = tail call i8* @_Znwm(i64 %43) #9
  %45 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %44, i8** %45, align 8, !alias.scope !2
  %46 = or i64 %43, -9223372036854775808
  %47 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %46, i64* %47, align 8, !alias.scope !2
  %48 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %35, i64* %48, align 8, !alias.scope !2
  br label %54

49:                                               ; preds = %39
  %50 = trunc i64 %35 to i8
  %51 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  store i8 %50, i8* %52, align 1, !alias.scope !2
  %53 = icmp eq i64 %35, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %49, %41
  %55 = phi i8* [ %44, %41 ], [ %27, %49 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %55, i8* align 1 %33, i64 %35, i1 false) #7
  br label %56

56:                                               ; preds = %49, %54
  %57 = phi i8* [ %27, %49 ], [ %55, %54 ]
  %58 = getelementptr inbounds i8, i8* %57, i64 %35
  store i8 0, i8* %58, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %5, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %6) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %59 = bitcast %"class.SkSL::ErrorReporter"* %23 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %60 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %59, align 8
  %61 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %60, i64 2
  %62 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %61, align 8
  call void %62(%"class.SkSL::ErrorReporter"* %23, i32 %25, %"class.SkSL::String"* nonnull %4) #7
  %63 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %56
  %68 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %69) #9
  br label %70

70:                                               ; preds = %56, %67
  %71 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @_ZdlPv(i8* %77) #9
  br label %78

78:                                               ; preds = %70, %75
  %79 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %83, label %219

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  call void @_ZdlPv(i8* %85) #9
  br label %219

86:                                               ; preds = %3, %3, %3
  %87 = bitcast %"class.SkSL::Expression"* %2 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %88 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %87, align 8
  %89 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %88, i64 3
  %90 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %89, align 8
  %91 = tail call dereferenceable(184) %"class.SkSL::Type"* %90(%"class.SkSL::Expression"* %2) #7
  %92 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %91, i64 0, i32 4
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, -1
  %95 = icmp ult i32 %94, 2
  br i1 %95, label %102, label %96

96:                                               ; preds = %86
  %97 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 8, i32 0, i32 0, i32 0
  %98 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %97, align 8
  %99 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %98, %"class.SkSL::Expression"* %2, %"class.SkSL::Context"* dereferenceable(744) %0) #7
  %100 = ptrtoint %"class.SkSL::Expression"* %99 to i64
  %101 = icmp eq %"class.SkSL::Expression"* %99, null
  br i1 %101, label %223, label %102

102:                                              ; preds = %96, %86
  %103 = phi i64 [ %13, %86 ], [ %100, %96 ]
  %104 = inttoptr i64 %103 to %"class.SkSL::Expression"*
  %105 = tail call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %104) #7
  %106 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %105, i64 0, i32 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 43
  br i1 %108, label %109, label %217

109:                                              ; preds = %102
  %110 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %105, i64 1
  %111 = bitcast %"class.SkSL::Expression"* %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = load i32, i32* %19, align 8
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %18, i64 0, i32 8
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, -1
  %118 = and i1 %114, %117
  %119 = sext i32 %116 to i64
  %120 = select i1 %118, i64 2147483647, i64 %119
  %121 = icmp sgt i64 %112, -1
  %122 = icmp slt i64 %112, %120
  %123 = and i1 %121, %122
  br i1 %123, label %217, label %124

124:                                              ; preds = %109
  %125 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %126 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %125, align 8
  %127 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %128 = load i32, i32* %127, align 8
  %129 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %129) #7
  %130 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %130) #7
  %131 = bitcast %"class.SkSL::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #7
  %132 = bitcast %"class.SkSL::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %132) #7
  call void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* nonnull sret %11, i64 %112) #7
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %11) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %9, %"class.SkSL::String"* nonnull %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #7
  %133 = bitcast %"class.SkSL::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %133) #7
  %134 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %18, i64 0, i32 18
  %135 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %134, align 8, !noalias !5
  %136 = icmp eq %"class.SkSL::Type"* %135, null
  %137 = select i1 %136, %"class.SkSL::Type"* %18, %"class.SkSL::Type"* %135
  %138 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %137, i64 0, i32 0, i32 1, i32 0
  %139 = load i8*, i8** %138, align 8, !noalias !5
  %140 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %137, i64 0, i32 0, i32 1, i32 1
  %141 = load i64, i64* %140, align 8, !noalias !5
  %142 = icmp ugt i64 %141, -17
  br i1 %142, label %143, label %145

143:                                              ; preds = %124
  %144 = bitcast %"class.SkSL::String"* %12 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %144) #8
  unreachable

145:                                              ; preds = %124
  %146 = icmp ult i64 %141, 23
  br i1 %146, label %155, label %147

147:                                              ; preds = %145
  %148 = add nuw i64 %141, 16
  %149 = and i64 %148, -16
  %150 = call i8* @_Znwm(i64 %149) #9
  %151 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %150, i8** %151, align 8, !alias.scope !5
  %152 = or i64 %149, -9223372036854775808
  %153 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %152, i64* %153, align 8, !alias.scope !5
  %154 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %141, i64* %154, align 8, !alias.scope !5
  br label %160

155:                                              ; preds = %145
  %156 = trunc i64 %141 to i8
  %157 = bitcast %"class.SkSL::String"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %158 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %157, i64 0, i32 1, i32 0
  store i8 %156, i8* %158, align 1, !alias.scope !5
  %159 = icmp eq i64 %141, 0
  br i1 %159, label %162, label %160

160:                                              ; preds = %155, %147
  %161 = phi i8* [ %150, %147 ], [ %133, %155 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %161, i8* align 1 %139, i64 %141, i1 false) #7
  br label %162

162:                                              ; preds = %155, %160
  %163 = phi i8* [ %133, %155 ], [ %161, %160 ]
  %164 = getelementptr inbounds i8, i8* %163, i64 %141
  store i8 0, i8* %164, align 1
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %8, %"class.SkSL::String"* nonnull %9, %"class.SkSL::String"* nonnull dereferenceable(24) %12) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %7, %"class.SkSL::String"* nonnull %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #7
  %165 = bitcast %"class.SkSL::ErrorReporter"* %126 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %166 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %165, align 8
  %167 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %166, i64 2
  %168 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %167, align 8
  call void %168(%"class.SkSL::ErrorReporter"* %126, i32 %128, %"class.SkSL::String"* nonnull %7) #7
  %169 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %170 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %169, i64 0, i32 1, i32 0
  %171 = load i8, i8* %170, align 1
  %172 = icmp slt i8 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %162
  %174 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %175 = load i8*, i8** %174, align 8
  call void @_ZdlPv(i8* %175) #9
  br label %176

176:                                              ; preds = %162, %173
  %177 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %178 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %177, i64 0, i32 1, i32 0
  %179 = load i8, i8* %178, align 1
  %180 = icmp slt i8 %179, 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %176
  %182 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  call void @_ZdlPv(i8* %183) #9
  br label %184

184:                                              ; preds = %176, %181
  %185 = bitcast %"class.SkSL::String"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %186 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %185, i64 0, i32 1, i32 0
  %187 = load i8, i8* %186, align 1
  %188 = icmp slt i8 %187, 0
  br i1 %188, label %189, label %192

189:                                              ; preds = %184
  %190 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  call void @_ZdlPv(i8* %191) #9
  br label %192

192:                                              ; preds = %184, %189
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %133) #7
  %193 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %194 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %193, i64 0, i32 1, i32 0
  %195 = load i8, i8* %194, align 1
  %196 = icmp slt i8 %195, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %192
  %198 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  call void @_ZdlPv(i8* %199) #9
  br label %200

200:                                              ; preds = %192, %197
  %201 = bitcast %"class.SkSL::String"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %202 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %201, i64 0, i32 1, i32 0
  %203 = load i8, i8* %202, align 1
  %204 = icmp slt i8 %203, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %200
  %206 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  call void @_ZdlPv(i8* %207) #9
  br label %208

208:                                              ; preds = %200, %205
  %209 = bitcast %"class.SkSL::String"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %210 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %209, i64 0, i32 1, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp slt i8 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %208
  %214 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  call void @_ZdlPv(i8* %215) #9
  br label %216

216:                                              ; preds = %208, %213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %132) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #7
  br label %219

217:                                              ; preds = %109, %102
  %218 = tail call %"class.SkSL::Expression"* @_ZN4SkSL15IndexExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %1, %"class.SkSL::Expression"* %104)
  br label %239

219:                                              ; preds = %83, %78, %216
  %220 = phi i8* [ %130, %216 ], [ %27, %78 ], [ %27, %83 ]
  %221 = phi i8* [ %129, %216 ], [ %26, %78 ], [ %26, %83 ]
  %222 = phi i64 [ %103, %216 ], [ %13, %78 ], [ %13, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %220) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %221) #7
  br label %223

223:                                              ; preds = %219, %96
  %224 = phi i64 [ %100, %96 ], [ %222, %219 ]
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %232, label %226

226:                                              ; preds = %223
  %227 = inttoptr i64 %224 to %"class.SkSL::Expression"*
  %228 = inttoptr i64 %224 to void (%"class.SkSL::Expression"*)***
  %229 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %228, align 8
  %230 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %229, i64 1
  %231 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %230, align 8
  call void %231(%"class.SkSL::Expression"* nonnull %227) #7
  br label %232

232:                                              ; preds = %223, %226
  %233 = icmp eq %"class.SkSL::Expression"* %1, null
  br i1 %233, label %239, label %234

234:                                              ; preds = %232
  %235 = bitcast %"class.SkSL::Expression"* %1 to void (%"class.SkSL::Expression"*)***
  %236 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %235, align 8
  %237 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %236, i64 1
  %238 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %237, align 8
  call void %238(%"class.SkSL::Expression"* nonnull %1) #7
  br label %239

239:                                              ; preds = %217, %232, %234
  %240 = phi %"class.SkSL::Expression"* [ %218, %217 ], [ null, %232 ], [ null, %234 ]
  ret %"class.SkSL::Expression"* %240
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

declare %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret, i64) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* sret, %"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL15IndexExpression4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEES9_(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkSTArray, align 8
  %5 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %6 = ptrtoint %"class.SkSL::Expression"* %2 to i64
  %7 = bitcast %"class.SkSL::Expression"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %8 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %8, i64 3
  %10 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, align 8
  %11 = tail call dereferenceable(184) %"class.SkSL::Type"* %10(%"class.SkSL::Expression"* %1) #7
  %12 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %13 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %12, align 8
  %14 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %13, i64 0, i32 1, i32 10
  %15 = load i8, i8* %14, align 4, !range !8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %43, label %17

17:                                               ; preds = %3
  %18 = tail call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder27GetConstantValueForVariableERKNS_10ExpressionE(%"class.SkSL::Expression"* dereferenceable(24) %2) #7
  %19 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %18, i64 0, i32 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 43
  br i1 %21, label %22, label %43

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %11, i64 0, i32 3
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 11
  br i1 %25, label %26, label %43

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %18, i64 1
  %28 = bitcast %"class.SkSL::Expression"* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 8
  %32 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 16
  %33 = bitcast i8* %32 to i64*
  %34 = bitcast i8* %31 to i8**
  %35 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %4, i64 0, i32 0, i32 0, i64 0
  store i8* %35, i8** %34, align 8
  store i64 34359738370, i64* %33, align 8
  store i8 %30, i8* %35, align 8
  %36 = call %"class.SkSL::Expression"* @_ZN4SkSL7Swizzle4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE9SkSTArrayILi4EaLb0EE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Expression"* %1, %class.SkSTArray* nonnull %4) #7
  %37 = ptrtoint %"class.SkSL::Expression"* %36 to i64
  %38 = load i64, i64* %33, align 8
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %26
  %42 = load i8*, i8** %34, align 8
  call void @_Z7sk_freePv(i8* %42) #7
  br label %64

43:                                               ; preds = %22, %17, %3
  %44 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #7
  %45 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %7, align 8
  %48 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %47, i64 3
  %49 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %48, align 8
  %50 = tail call dereferenceable(184) %"class.SkSL::Type"* %49(%"class.SkSL::Expression"* %1) #7
  %51 = tail call dereferenceable(184) %"class.SkSL::Type"* @_ZN4SkSL15IndexExpression9IndexTypeERKNS_7ContextERKNS_4TypeE(%"class.SkSL::Context"* dereferenceable(744) %0, %"class.SkSL::Type"* dereferenceable(184) %50) #7
  %52 = bitcast i8* %44 to i32 (...)***
  %53 = getelementptr inbounds i8, i8* %44, i64 8
  %54 = bitcast i8* %53 to i32*
  store i32 %46, i32* %54, align 8
  %55 = getelementptr inbounds i8, i8* %44, i64 12
  %56 = bitcast i8* %55 to i32*
  store i32 48, i32* %56, align 4
  %57 = getelementptr inbounds i8, i8* %44, i64 16
  %58 = bitcast i8* %57 to %"class.SkSL::Type"**
  store %"class.SkSL::Type"* %51, %"class.SkSL::Type"** %58, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL15IndexExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %52, align 8
  %59 = getelementptr inbounds i8, i8* %44, i64 24
  %60 = bitcast i8* %59 to i64*
  store i64 %5, i64* %60, align 8
  %61 = getelementptr inbounds i8, i8* %44, i64 32
  %62 = bitcast i8* %61 to i64*
  store i64 %6, i64* %62, align 8
  %63 = ptrtoint i8* %44 to i64
  br label %71

64:                                               ; preds = %41, %26
  %65 = icmp eq %"class.SkSL::Expression"* %2, null
  br i1 %65, label %71, label %66

66:                                               ; preds = %64
  %67 = bitcast %"class.SkSL::Expression"* %2 to void (%"class.SkSL::Expression"*)***
  %68 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %68, i64 1
  %70 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %69, align 8
  call void %70(%"class.SkSL::Expression"* nonnull %2) #7
  br label %71

71:                                               ; preds = %66, %64, %43
  %72 = phi i64 [ %63, %43 ], [ %37, %64 ], [ %37, %66 ]
  %73 = inttoptr i64 %72 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %73
}

declare %"class.SkSL::Expression"* @_ZN4SkSL7Swizzle4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE9SkSTArrayILi4EaLb0EE(%"class.SkSL::Context"* dereferenceable(744), %"class.SkSL::Expression"*, %class.SkSTArray*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15IndexExpressionD2Ev(%"struct.SkSL::IndexExpression"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL15IndexExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #7
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL15IndexExpressionD0Ev(%"struct.SkSL::IndexExpression"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL15IndexExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #7
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #7
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"struct.SkSL::IndexExpression"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %21) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL15IndexExpression11descriptionEv(%"class.SkSL::String"* noalias sret, %"struct.SkSL::IndexExpression"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  %8 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  %9 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %11 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %10, align 8
  %12 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %11, i64 0, i32 0
  %13 = bitcast %"class.SkSL::Expression"* %11 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %14 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %14, i64 2
  %16 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %15, align 8
  call void %16(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::IRNode"* %12) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::String"* nonnull %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)) #7
  %17 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  %18 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %18, align 8
  %20 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %19, i64 0, i32 0
  %21 = bitcast %"class.SkSL::Expression"* %19 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %22 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %22, i64 2
  %24 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %23, align 8
  call void %24(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::IRNode"* %20) #7
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::String"* nonnull %4, %"class.SkSL::String"* nonnull dereferenceable(24) %6) #7
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #7
  %25 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %31) #9
  br label %32

32:                                               ; preds = %2, %29
  %33 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %39) #9
  br label %40

40:                                               ; preds = %32, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  %41 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  call void @_ZdlPv(i8* %47) #9
  br label %48

48:                                               ; preds = %40, %45
  %49 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  call void @_ZdlPv(i8* %55) #9
  br label %56

56:                                               ; preds = %48, %53
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression21isCompileTimeConstantEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL10Expression15compareConstantERKS0_(%"class.SkSL::Expression"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret i32 -1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression19isConstantOrUniformEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::Expression"* %0 to i1 (%"class.SkSL::Expression"*)***
  %3 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %3, i64 4
  %5 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.SkSL::Expression"* %0) #7
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL15IndexExpression11hasPropertyENS_10Expression8PropertyE(%"struct.SkSL::IndexExpression"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to i1 (%"class.SkSL::Expression"*, i32)***
  %6 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %6, i64 7
  %8 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.SkSL::Expression"* %4, i32 %1) #7
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %11, align 8
  %13 = bitcast %"class.SkSL::Expression"* %12 to i1 (%"class.SkSL::Expression"*, i32)***
  %14 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %13, align 8
  %15 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %14, i64 7
  %16 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.SkSL::Expression"* %12, i32 %1) #7
  br label %18

18:                                               ; preds = %10, %2
  %19 = phi i1 [ true, %2 ], [ %17, %10 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #7
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #7
  ret { i64, i8 } %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL10Expression24getConstantSubexpressionEi(%"class.SkSL::Expression"*, i32) unnamed_addr #0 comdat align 2 {
  ret %"class.SkSL::Expression"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL15IndexExpression5cloneEv(%"struct.SkSL::IndexExpression"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #7
  %3 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  %5 = bitcast %"class.SkSL::Expression"* %4 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %6 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, i64 10
  %8 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %7, align 8
  %9 = tail call %"class.SkSL::Expression"* %8(%"class.SkSL::Expression"* %4) #7
  %10 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %10, align 8
  %12 = bitcast %"class.SkSL::Expression"* %11 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %13 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %13, i64 10
  %15 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call %"class.SkSL::Expression"* %15(%"class.SkSL::Expression"* %11) #7
  %17 = getelementptr inbounds %"struct.SkSL::IndexExpression", %"struct.SkSL::IndexExpression"* %0, i64 0, i32 0, i32 1
  %18 = bitcast %"class.SkSL::Type"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = ptrtoint %"class.SkSL::Expression"* %9 to i64
  %21 = ptrtoint %"class.SkSL::Expression"* %16 to i64
  %22 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %9, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = bitcast i8* %2 to i32 (...)***
  %25 = getelementptr inbounds i8, i8* %2, i64 8
  %26 = bitcast i8* %25 to i32*
  store i32 %23, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %2, i64 12
  %28 = bitcast i8* %27 to i32*
  store i32 48, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %2, i64 16
  %30 = bitcast i8* %29 to i64*
  store i64 %19, i64* %30, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL15IndexExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %24, align 8
  %31 = getelementptr inbounds i8, i8* %2, i64 24
  %32 = bitcast i8* %31 to i64*
  store i64 %20, i64* %32, align 8
  %33 = getelementptr inbounds i8, i8* %2, i64 32
  %34 = bitcast i8* %33 to i64*
  store i64 %21, i64* %34, align 8
  %35 = bitcast i8* %2 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %35
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL4Type11displayNameEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL4Type11displayNameEv"}
!8 = !{i8 0, i8 2}
