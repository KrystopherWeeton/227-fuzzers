; ModuleID = '../../net/nqe/network_quality_observation.cc'
source_filename = "../../net/nqe/network_quality_observation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::nqe::internal::Observation" = type { i32, %"class.base::TimeTicks", i32, i32, %"class.absl::optional" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }

@_ZN3net3nqe8internal11ObservationC1EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceE = hidden unnamed_addr alias void (%"class.net::nqe::internal::Observation"*, i32, i64, i32, i32), void (%"class.net::nqe::internal::Observation"*, i32, i64, i32, i32)* @_ZN3net3nqe8internal11ObservationC2EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceE
@_ZN3net3nqe8internal11ObservationC1EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceERKN4absl8optionalImEE = hidden unnamed_addr alias void (%"class.net::nqe::internal::Observation"*, i32, i64, i32, i32, %"class.absl::optional"*), void (%"class.net::nqe::internal::Observation"*, i32, i64, i32, i32, %"class.absl::optional"*)* @_ZN3net3nqe8internal11ObservationC2EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceERKN4absl8optionalImEE
@_ZN3net3nqe8internal11ObservationC1ERKS2_ = hidden unnamed_addr alias void (%"class.net::nqe::internal::Observation"*, %"class.net::nqe::internal::Observation"*), void (%"class.net::nqe::internal::Observation"*, %"class.net::nqe::internal::Observation"*)* @_ZN3net3nqe8internal11ObservationC2ERKS2_
@_ZN3net3nqe8internal11ObservationD1Ev = hidden unnamed_addr alias void (%"class.net::nqe::internal::Observation"*), void (%"class.net::nqe::internal::Observation"*)* @_ZN3net3nqe8internal11ObservationD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net3nqe8internal11ObservationC2EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceE(%"class.net::nqe::internal::Observation"* nocapture, i32, i64, i32, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 2
  store i32 %3, i32* %8, align 8
  %9 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 3
  store i32 %4, i32* %9, align 4
  %10 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net3nqe8internal11ObservationC2EiN4base9TimeTicksEiNS_31NetworkQualityObservationSourceERKN4absl8optionalImEE(%"class.net::nqe::internal::Observation"* nocapture, i32, i64, i32, i32, %"class.absl::optional"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 2
  store i32 %3, i32* %9, align 8
  %10 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 3
  store i32 %4, i32* %10, align 4
  %11 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net3nqe8internal11ObservationC2ERKS2_(%"class.net::nqe::internal::Observation"* nocapture, %"class.net::nqe::internal::Observation"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.net::nqe::internal::Observation"* %0 to i8*
  %4 = bitcast %"class.net::nqe::internal::Observation"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"class.net::nqe::internal::Observation"* @_ZN3net3nqe8internal11ObservationaSERKS2_(%"class.net::nqe::internal::Observation"* returned, %"class.net::nqe::internal::Observation"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.net::nqe::internal::Observation"* %0 to i8*
  %4 = bitcast %"class.net::nqe::internal::Observation"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 40, i1 false)
  ret %"class.net::nqe::internal::Observation"* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net3nqe8internal11ObservationD2Ev(%"class.net::nqe::internal::Observation"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net3nqe8internal11Observation24GetObservationCategoriesEv(%"class.std::__1::vector"* noalias sret, %"class.net::nqe::internal::Observation"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %6 = getelementptr inbounds %"class.net::nqe::internal::Observation", %"class.net::nqe::internal::Observation"* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %48 [
    i32 0, label %8
    i32 3, label %8
    i32 4, label %8
    i32 5, label %8
    i32 6, label %17
    i32 7, label %17
    i32 1, label %17
    i32 2, label %26
    i32 8, label %26
  ]

8:                                                ; preds = %2, %2, %2, %2
  %9 = bitcast i32** %3 to i64*
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = bitcast i32** %4 to i64*
  %12 = tail call i8* @_Znwm(i64 4) #6
  %13 = bitcast i8* %12 to i32*
  %14 = getelementptr inbounds i8, i8* %12, i64 4
  %15 = ptrtoint i8* %14 to i64
  store i32 0, i32* %13, align 4
  %16 = ptrtoint i8* %12 to i64
  store i64 %16, i64* %10, align 8
  store i64 %15, i64* %9, align 8
  store i64 %15, i64* %11, align 8
  br label %48

17:                                               ; preds = %2, %2, %2
  %18 = bitcast i32** %3 to i64*
  %19 = bitcast %"class.std::__1::vector"* %0 to i64*
  %20 = bitcast i32** %4 to i64*
  %21 = tail call i8* @_Znwm(i64 4) #6
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds i8, i8* %21, i64 4
  %24 = ptrtoint i8* %23 to i64
  store i32 1, i32* %22, align 4
  %25 = ptrtoint i8* %21 to i64
  store i64 %25, i64* %19, align 8
  store i64 %24, i64* %18, align 8
  store i64 %24, i64* %20, align 8
  br label %48

26:                                               ; preds = %2, %2
  %27 = bitcast i32** %3 to i64*
  %28 = bitcast %"class.std::__1::vector"* %0 to i64*
  %29 = bitcast i32** %4 to i64*
  %30 = tail call i8* @_Znwm(i64 4) #6
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i8, i8* %30, i64 4
  %33 = ptrtoint i8* %32 to i64
  store i32 1, i32* %31, align 4
  %34 = ptrtoint i8* %30 to i64
  store i64 %34, i64* %28, align 8
  store i64 %33, i64* %27, align 8
  store i64 %33, i64* %29, align 8
  %35 = bitcast %"class.std::__1::vector"* %0 to i64*
  %36 = tail call i8* @_Znwm(i64 8) #6
  %37 = bitcast i8* %36 to i32*
  %38 = getelementptr inbounds i8, i8* %36, i64 4
  %39 = bitcast i8* %38 to i32*
  store i32 2, i32* %39, align 4
  %40 = insertelement <2 x i8*> undef, i8* %36, i32 0
  %41 = shufflevector <2 x i8*> %40, <2 x i8*> undef, <2 x i32> zeroinitializer
  %42 = getelementptr i8, <2 x i8*> %41, <2 x i64> <i64 8, i64 8>
  %43 = ptrtoint <2 x i8*> %42 to <2 x i64>
  %44 = ptrtoint i8* %36 to i64
  %45 = bitcast i8* %30 to i32*
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %37, align 4
  store i64 %44, i64* %35, align 8
  %47 = bitcast i32** %3 to <2 x i64>*
  store <2 x i64> %43, <2 x i64>* %47, align 8
  tail call void @_ZdlPv(i8* nonnull %30) #6
  br label %48

48:                                               ; preds = %17, %8, %26, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
