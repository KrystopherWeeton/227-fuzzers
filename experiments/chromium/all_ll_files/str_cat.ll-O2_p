; ModuleID = '../../third_party/abseil-cpp/absl/strings/str_cat.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/str_cat.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::AlphaNum" = type { %"class.absl::string_view", [32 x i8] }
%"class.absl::string_view" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m = comdat any

@_ZN4absl16numbers_internal9kHexTableE = external local_unnamed_addr constant [513 x i8], align 16

@_ZN4absl8AlphaNumC1ENS_3HexE = hidden unnamed_addr alias void (%"class.absl::AlphaNum"*, i64, i64), void (%"class.absl::AlphaNum"*, i64, i64)* @_ZN4absl8AlphaNumC2ENS_3HexE
@_ZN4absl8AlphaNumC1ENS_3DecE = hidden unnamed_addr alias void (%"class.absl::AlphaNum"*, i64, i64), void (%"class.absl::AlphaNum"*, i64, i64)* @_ZN4absl8AlphaNumC2ENS_3DecE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl8AlphaNumC2ENS_3HexE(%"class.absl::AlphaNum"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = lshr i64 %2, 8
  %5 = trunc i64 %4 to i8
  %6 = bitcast %"class.absl::AlphaNum"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  %7 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 32
  %8 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 16
  %9 = lshr i64 %1, 55
  %10 = and i64 %9, 510
  %11 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %10
  %12 = bitcast i8* %11 to i16*
  %13 = bitcast i8* %8 to i16*
  %14 = load i16, i16* %12, align 2
  store i16 %14, i16* %13, align 1
  %15 = lshr i64 %1, 47
  %16 = and i64 %15, 510
  %17 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %16
  %18 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 18
  %19 = bitcast i8* %17 to i16*
  %20 = bitcast i8* %18 to i16*
  %21 = load i16, i16* %19, align 2
  store i16 %21, i16* %20, align 1
  %22 = lshr i64 %1, 39
  %23 = and i64 %22, 510
  %24 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %23
  %25 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 20
  %26 = bitcast i8* %24 to i16*
  %27 = bitcast i8* %25 to i16*
  %28 = load i16, i16* %26, align 2
  store i16 %28, i16* %27, align 1
  %29 = lshr i64 %1, 31
  %30 = and i64 %29, 510
  %31 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %30
  %32 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 22
  %33 = bitcast i8* %31 to i16*
  %34 = bitcast i8* %32 to i16*
  %35 = load i16, i16* %33, align 2
  store i16 %35, i16* %34, align 1
  %36 = lshr i64 %1, 23
  %37 = and i64 %36, 510
  %38 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %37
  %39 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 24
  %40 = bitcast i8* %38 to i16*
  %41 = bitcast i8* %39 to i16*
  %42 = load i16, i16* %40, align 2
  store i16 %42, i16* %41, align 1
  %43 = lshr i64 %1, 15
  %44 = and i64 %43, 510
  %45 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %44
  %46 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 26
  %47 = bitcast i8* %45 to i16*
  %48 = bitcast i8* %46 to i16*
  %49 = load i16, i16* %47, align 2
  store i16 %49, i16* %48, align 1
  %50 = lshr i64 %1, 7
  %51 = and i64 %50, 510
  %52 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %51
  %53 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 28
  %54 = bitcast i8* %52 to i16*
  %55 = bitcast i8* %53 to i16*
  %56 = load i16, i16* %54, align 2
  store i16 %56, i16* %55, align 1
  %57 = shl i64 %1, 1
  %58 = and i64 %57, 510
  %59 = getelementptr inbounds [513 x i8], [513 x i8]* @_ZN4absl16numbers_internal9kHexTableE, i64 0, i64 %58
  %60 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 30
  %61 = bitcast i8* %59 to i16*
  %62 = bitcast i8* %60 to i16*
  %63 = load i16, i16* %61, align 2
  store i16 %63, i16* %62, align 1
  %64 = or i64 %1, 1
  %65 = tail call i64 @llvm.ctlz.i64(i64 %64, i1 true) #5, !range !2
  %66 = trunc i64 %65 to i32
  %67 = lshr i32 %66, 2
  %68 = sub nuw nsw i32 16, %67
  %69 = zext i32 %68 to i64
  %70 = and i64 %2, 255
  %71 = icmp ugt i64 %70, %69
  br i1 %71, label %72, label %77

72:                                               ; preds = %3
  %73 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %5, i64 16, i1 false)
  %74 = sub nsw i64 0, %69
  %75 = getelementptr inbounds i8, i8* %7, i64 %74
  %76 = getelementptr inbounds i8, i8* %75, i64 -16
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %76, i8 %5, i64 16, i1 false)
  br label %77

77:                                               ; preds = %3, %72
  %78 = phi i64 [ %70, %72 ], [ %69, %3 ]
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8, i8* %7, i64 %79
  %81 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 0, i32 0
  store i8* %80, i8** %81, align 8
  %82 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 0, i32 1
  store i64 %78, i64* %82, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl8AlphaNumC2ENS_3DecE(%"class.absl::AlphaNum"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = lshr i64 %2, 8
  %5 = trunc i64 %4 to i8
  %6 = bitcast %"class.absl::AlphaNum"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  %7 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 1, i64 32
  %8 = and i64 %2, 255
  %9 = sub nsw i64 0, %8
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  %11 = and i64 %2, 16711680
  %12 = icmp ne i64 %11, 0
  %13 = icmp ugt i64 %1, 9
  br i1 %13, label %14, label %23

14:                                               ; preds = %3, %14
  %15 = phi i64 [ %21, %14 ], [ %1, %3 ]
  %16 = phi i8* [ %20, %14 ], [ %7, %3 ]
  %17 = urem i64 %15, 10
  %18 = trunc i64 %17 to i8
  %19 = or i8 %18, 48
  %20 = getelementptr inbounds i8, i8* %16, i64 -1
  store i8 %19, i8* %20, align 1
  %21 = udiv i64 %15, 10
  %22 = icmp ugt i64 %15, 99
  br i1 %22, label %14, label %23

23:                                               ; preds = %14, %3
  %24 = phi i8* [ %7, %3 ], [ %20, %14 ]
  %25 = phi i64 [ %1, %3 ], [ %21, %14 ]
  %26 = trunc i64 %25 to i8
  %27 = add nuw nsw i8 %26, 48
  %28 = getelementptr inbounds i8, i8* %24, i64 -1
  store i8 %27, i8* %28, align 1
  br i1 %12, label %29, label %31

29:                                               ; preds = %23
  %30 = getelementptr inbounds i8, i8* %24, i64 -2
  store i8 45, i8* %30, align 1
  br label %31

31:                                               ; preds = %29, %23
  %32 = phi i8* [ %30, %29 ], [ %28, %23 ]
  %33 = ptrtoint i8* %32 to i64
  %34 = ptrtoint i8* %10 to i64
  %35 = sub i64 %33, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %46

37:                                               ; preds = %31
  %38 = icmp eq i8 %5, 48
  %39 = getelementptr inbounds i8, i8* %32, i64 1
  %40 = and i1 %12, %38
  %41 = select i1 %40, i8* %39, i8* %32
  %42 = sub nsw i64 0, %35
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  call void @llvm.memset.p0i8.i64(i8* align 1 %43, i8 %5, i64 %35, i1 false)
  br i1 %40, label %44, label %46

44:                                               ; preds = %37
  %45 = getelementptr inbounds i8, i8* %43, i64 -1
  store i8 45, i8* %45, align 1
  br label %46

46:                                               ; preds = %37, %44, %31
  %47 = phi i8* [ %32, %31 ], [ %45, %44 ], [ %43, %37 ]
  %48 = ptrtoint i8* %7 to i64
  %49 = ptrtoint i8* %47 to i64
  %50 = sub i64 %48, %49
  %51 = icmp sgt i64 %50, -1
  br i1 %51, label %53, label %52, !prof !3

52:                                               ; preds = %46
  tail call void @llvm.trap() #5
  unreachable

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 0, i32 0
  store i8* %47, i8** %54, align 8
  %55 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %0, i64 0, i32 0, i32 1
  store i64 %50, i64* %55, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl6StrCatERKNS_8AlphaNumES2_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #5
  %7 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %3
  %16 = icmp ugt i64 %11, 22
  br i1 %16, label %17, label %23

17:                                               ; preds = %15
  %18 = add i64 %11, -22
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 22, i64 %18, i64 0, i64 0, i64 0, i64 0) #5
  %19 = load i8, i8* %13, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = load i8*, i8** %4, align 8
  store i64 %11, i64* %5, align 8
  br label %28

23:                                               ; preds = %15, %17
  %24 = trunc i64 %11 to i8
  store i8 %24, i8* %13, align 1
  br label %28

25:                                               ; preds = %3
  %26 = getelementptr inbounds i8, i8* %6, i64 %11
  store i8 0, i8* %26, align 1
  %27 = trunc i64 %11 to i8
  store i8 %27, i8* %13, align 1
  br label %34

28:                                               ; preds = %21, %23
  %29 = phi i8* [ %22, %21 ], [ %6, %23 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %11
  store i8 0, i8* %30, align 1
  %31 = load i8, i8* %13, align 1
  %32 = load i64, i64* %7, align 8
  %33 = icmp slt i8 %31, 0
  br label %34

34:                                               ; preds = %28, %25
  %35 = phi i64 [ %32, %28 ], [ %8, %25 ]
  %36 = phi i1 [ %33, %28 ], [ false, %25 ]
  %37 = load i8*, i8** %4, align 8
  %38 = select i1 %36, i8* %37, i8* %6
  %39 = getelementptr inbounds i8, i8* %38, i64 %35
  %40 = icmp eq i64 %35, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %43, i64 %35, i1 false) #5
  br label %44

44:                                               ; preds = %34, %41
  %45 = load i64, i64* %9, align 8
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %44
  %48 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %49, i64 %45, i1 false) #5
  br label %50

50:                                               ; preds = %44, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl6StrCatERKNS_8AlphaNumES2_S2_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #5
  %8 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  %13 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %12, %14
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %4
  %20 = icmp ugt i64 %15, 22
  br i1 %20, label %21, label %27

21:                                               ; preds = %19
  %22 = add i64 %15, -22
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 22, i64 %22, i64 0, i64 0, i64 0, i64 0) #5
  %23 = load i8, i8* %17, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = load i8*, i8** %5, align 8
  store i64 %15, i64* %6, align 8
  br label %32

27:                                               ; preds = %19, %21
  %28 = trunc i64 %15 to i8
  store i8 %28, i8* %17, align 1
  br label %32

29:                                               ; preds = %4
  %30 = getelementptr inbounds i8, i8* %7, i64 %15
  store i8 0, i8* %30, align 1
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %17, align 1
  br label %38

32:                                               ; preds = %25, %27
  %33 = phi i8* [ %26, %25 ], [ %7, %27 ]
  %34 = getelementptr inbounds i8, i8* %33, i64 %15
  store i8 0, i8* %34, align 1
  %35 = load i8, i8* %17, align 1
  %36 = load i64, i64* %8, align 8
  %37 = icmp slt i8 %35, 0
  br label %38

38:                                               ; preds = %32, %29
  %39 = phi i64 [ %36, %32 ], [ %9, %29 ]
  %40 = phi i1 [ %37, %32 ], [ false, %29 ]
  %41 = load i8*, i8** %5, align 8
  %42 = select i1 %40, i8* %41, i8* %7
  %43 = getelementptr inbounds i8, i8* %42, i64 %39
  %44 = icmp eq i64 %39, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %47, i64 %39, i1 false) #5
  br label %48

48:                                               ; preds = %38, %45
  %49 = load i64, i64* %10, align 8
  %50 = getelementptr inbounds i8, i8* %43, i64 %49
  %51 = icmp eq i64 %49, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %54, i64 %49, i1 false) #5
  br label %55

55:                                               ; preds = %48, %52
  %56 = load i64, i64* %13, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %60, i64 %56, i1 false) #5
  br label %61

61:                                               ; preds = %55, %58
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl6StrCatERKNS_8AlphaNumES2_S2_S2_(%"class.std::__1::basic_string"* noalias sret, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #5
  %9 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %13, %15
  %17 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %16, %18
  %20 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = icmp eq i64 %19, 0
  br i1 %22, label %33, label %23

23:                                               ; preds = %5
  %24 = icmp ugt i64 %19, 22
  br i1 %24, label %25, label %31

25:                                               ; preds = %23
  %26 = add i64 %19, -22
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 22, i64 %26, i64 0, i64 0, i64 0, i64 0) #5
  %27 = load i8, i8* %21, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = load i8*, i8** %6, align 8
  store i64 %19, i64* %7, align 8
  br label %36

31:                                               ; preds = %23, %25
  %32 = trunc i64 %19 to i8
  store i8 %32, i8* %21, align 1
  br label %36

33:                                               ; preds = %5
  %34 = getelementptr inbounds i8, i8* %8, i64 %19
  store i8 0, i8* %34, align 1
  %35 = trunc i64 %19 to i8
  store i8 %35, i8* %21, align 1
  br label %42

36:                                               ; preds = %29, %31
  %37 = phi i8* [ %30, %29 ], [ %8, %31 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 %19
  store i8 0, i8* %38, align 1
  %39 = load i8, i8* %21, align 1
  %40 = load i64, i64* %9, align 8
  %41 = icmp slt i8 %39, 0
  br label %42

42:                                               ; preds = %36, %33
  %43 = phi i64 [ %40, %36 ], [ %10, %33 ]
  %44 = phi i1 [ %41, %36 ], [ false, %33 ]
  %45 = load i8*, i8** %6, align 8
  %46 = select i1 %44, i8* %45, i8* %8
  %47 = getelementptr inbounds i8, i8* %46, i64 %43
  %48 = icmp eq i64 %43, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %51, i64 %43, i1 false) #5
  br label %52

52:                                               ; preds = %42, %49
  %53 = load i64, i64* %11, align 8
  %54 = getelementptr inbounds i8, i8* %47, i64 %53
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %58, i64 %53, i1 false) #5
  br label %59

59:                                               ; preds = %52, %56
  %60 = load i64, i64* %14, align 8
  %61 = getelementptr inbounds i8, i8* %54, i64 %60
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %65, i64 %60, i1 false) #5
  br label %66

66:                                               ; preds = %59, %63
  %67 = load i64, i64* %17, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %72, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %71, i64 %67, i1 false) #5
  br label %72

72:                                               ; preds = %66, %69
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl16strings_internal9CatPiecesESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"* noalias sret, %"class.absl::string_view"*, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #5
  %7 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 %2
  %8 = icmp eq i64 %2, 0
  br i1 %8, label %18, label %9

9:                                                ; preds = %3
  %10 = shl nsw i64 %2, 4
  %11 = add i64 %10, -16
  %12 = lshr exact i64 %11, 4
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 7
  %15 = icmp ult i64 %11, 112
  br i1 %15, label %21, label %16

16:                                               ; preds = %9
  %17 = sub nsw i64 %13, %14
  br label %82

18:                                               ; preds = %3
  %19 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  br label %51

21:                                               ; preds = %82, %9
  %22 = phi i64 [ undef, %9 ], [ %109, %82 ]
  %23 = phi i64 [ 0, %9 ], [ %109, %82 ]
  %24 = phi %"class.absl::string_view"* [ %1, %9 ], [ %110, %82 ]
  %25 = icmp eq i64 %14, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %21, %26
  %27 = phi i64 [ %32, %26 ], [ %23, %21 ]
  %28 = phi %"class.absl::string_view"* [ %33, %26 ], [ %24, %21 ]
  %29 = phi i64 [ %34, %26 ], [ %14, %21 ]
  %30 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %28, i64 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, %27
  %33 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %28, i64 1
  %34 = add i64 %29, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %26, !llvm.loop !4

36:                                               ; preds = %26, %21
  %37 = phi i64 [ %22, %21 ], [ %32, %26 ]
  %38 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = icmp eq i64 %37, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = icmp ugt i64 %37, 22
  br i1 %42, label %43, label %49

43:                                               ; preds = %41
  %44 = add i64 %37, -22
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 22, i64 %44, i64 0, i64 0, i64 0, i64 0) #5
  %45 = load i8, i8* %39, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  %48 = load i8*, i8** %4, align 8
  store i64 %37, i64* %5, align 8
  br label %53

49:                                               ; preds = %41, %43
  %50 = trunc i64 %37 to i8
  store i8 %50, i8* %39, align 1
  br label %53

51:                                               ; preds = %36, %18
  %52 = phi i8* [ %20, %18 ], [ %39, %36 ]
  store i8 0, i8* %6, align 8
  store i8 0, i8* %52, align 1
  br label %57

53:                                               ; preds = %47, %49
  %54 = phi i8* [ %48, %47 ], [ %6, %49 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %37
  store i8 0, i8* %55, align 1
  %56 = load i8, i8* %39, align 1
  br label %57

57:                                               ; preds = %53, %51
  %58 = phi i8 [ %56, %53 ], [ 0, %51 ]
  br i1 %8, label %128, label %59

59:                                               ; preds = %57
  %60 = icmp slt i8 %58, 0
  %61 = load i8*, i8** %4, align 8
  %62 = select i1 %60, i8* %61, i8* %6
  %63 = shl nsw i64 %2, 4
  %64 = add i64 %63, -16
  %65 = and i64 %64, 16
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %59
  %68 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %62, i8* align 1 %73, i64 %69, i1 false)
  %74 = getelementptr inbounds i8, i8* %62, i64 %69
  br label %75

75:                                               ; preds = %71, %67
  %76 = phi i8* [ %74, %71 ], [ %62, %67 ]
  %77 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 1
  br label %78

78:                                               ; preds = %75, %59
  %79 = phi %"class.absl::string_view"* [ %1, %59 ], [ %77, %75 ]
  %80 = phi i8* [ %62, %59 ], [ %76, %75 ]
  %81 = icmp eq i64 %64, 0
  br i1 %81, label %128, label %113

82:                                               ; preds = %82, %16
  %83 = phi i64 [ 0, %16 ], [ %109, %82 ]
  %84 = phi %"class.absl::string_view"* [ %1, %16 ], [ %110, %82 ]
  %85 = phi i64 [ %17, %16 ], [ %111, %82 ]
  %86 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %83
  %89 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 1, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, %88
  %92 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 2, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %91
  %95 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 3, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %94
  %98 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 4, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, %97
  %101 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 5, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, %100
  %104 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 6, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, %103
  %107 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 7, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = add i64 %108, %106
  %110 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %84, i64 8
  %111 = add i64 %85, -8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %21, label %82

113:                                              ; preds = %78, %133
  %114 = phi %"class.absl::string_view"* [ %135, %133 ], [ %79, %78 ]
  %115 = phi i8* [ %134, %133 ], [ %80, %78 ]
  %116 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %114, i64 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %123, label %119

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %114, i64 0, i32 0
  %121 = load i8*, i8** %120, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 1 %121, i64 %117, i1 false)
  %122 = getelementptr inbounds i8, i8* %115, i64 %117
  br label %123

123:                                              ; preds = %113, %119
  %124 = phi i8* [ %122, %119 ], [ %115, %113 ]
  %125 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %114, i64 1, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %133, label %129

128:                                              ; preds = %78, %133, %57
  ret void

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %114, i64 1, i32 0
  %131 = load i8*, i8** %130, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %131, i64 %126, i1 false)
  %132 = getelementptr inbounds i8, i8* %124, i64 %126
  br label %133

133:                                              ; preds = %129, %123
  %134 = phi i8* [ %132, %129 ], [ %124, %123 ]
  %135 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %114, i64 2
  %136 = icmp eq %"class.absl::string_view"* %135, %7
  br i1 %136, label %128, label %113
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl16strings_internal12AppendPiecesEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEESt16initializer_listINS_11string_viewEE(%"class.std::__1::basic_string"*, %"class.absl::string_view"*, i64) local_unnamed_addr #0 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %13

11:                                               ; preds = %3
  %12 = zext i8 %6 to i64
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i64 [ %10, %8 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 %2
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %39, label %17

17:                                               ; preds = %13
  %18 = shl nsw i64 %2, 4
  %19 = add i64 %18, -16
  %20 = lshr exact i64 %19, 4
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 7
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %34, label %24

24:                                               ; preds = %17, %24
  %25 = phi i64 [ %30, %24 ], [ %14, %17 ]
  %26 = phi %"class.absl::string_view"* [ %31, %24 ], [ %1, %17 ]
  %27 = phi i64 [ %32, %24 ], [ %22, %17 ]
  %28 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %26, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %25
  %31 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %26, i64 1
  %32 = add i64 %27, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %24, !llvm.loop !6

34:                                               ; preds = %24, %17
  %35 = phi i64 [ undef, %17 ], [ %30, %24 ]
  %36 = phi i64 [ %14, %17 ], [ %30, %24 ]
  %37 = phi %"class.absl::string_view"* [ %1, %17 ], [ %31, %24 ]
  %38 = icmp ult i64 %19, 112
  br i1 %38, label %39, label %71

39:                                               ; preds = %34, %71, %13
  %40 = phi i64 [ %14, %13 ], [ %35, %34 ], [ %97, %71 ]
  tail call void @_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m(%"class.std::__1::basic_string"* %0, i64 %40)
  %41 = load i8, i8* %5, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  br label %48

46:                                               ; preds = %39
  %47 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %48

48:                                               ; preds = %43, %46
  %49 = phi i8* [ %45, %43 ], [ %47, %46 ]
  br i1 %16, label %100, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds i8, i8* %49, i64 %14
  %52 = shl nsw i64 %2, 4
  %53 = add i64 %52, -16
  %54 = and i64 %53, 16
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %62 = load i8*, i8** %61, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %62, i64 %58, i1 false)
  %63 = getelementptr inbounds i8, i8* %51, i64 %58
  br label %64

64:                                               ; preds = %60, %56
  %65 = phi i8* [ %63, %60 ], [ %51, %56 ]
  %66 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 1
  br label %67

67:                                               ; preds = %64, %50
  %68 = phi %"class.absl::string_view"* [ %1, %50 ], [ %66, %64 ]
  %69 = phi i8* [ %51, %50 ], [ %65, %64 ]
  %70 = icmp eq i64 %53, 0
  br i1 %70, label %100, label %101

71:                                               ; preds = %34, %71
  %72 = phi i64 [ %97, %71 ], [ %36, %34 ]
  %73 = phi %"class.absl::string_view"* [ %98, %71 ], [ %37, %34 ]
  %74 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %72
  %77 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 1, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, %76
  %80 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 2, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %79
  %83 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 3, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, %82
  %86 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 4, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, %85
  %89 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 5, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %90, %88
  %92 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 6, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %91
  %95 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 7, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %94
  %98 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %73, i64 8
  %99 = icmp eq %"class.absl::string_view"* %98, %15
  br i1 %99, label %39, label %71

100:                                              ; preds = %67, %120, %48
  ret void

101:                                              ; preds = %67, %120
  %102 = phi %"class.absl::string_view"* [ %122, %120 ], [ %68, %67 ]
  %103 = phi i8* [ %121, %120 ], [ %69, %67 ]
  %104 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %102, i64 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %111, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %102, i64 0, i32 0
  %109 = load i8*, i8** %108, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %109, i64 %105, i1 false)
  %110 = getelementptr inbounds i8, i8* %103, i64 %105
  br label %111

111:                                              ; preds = %101, %107
  %112 = phi i8* [ %110, %107 ], [ %103, %101 ]
  %113 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %102, i64 1, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %102, i64 1, i32 0
  %118 = load i8*, i8** %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %118, i64 %114, i1 false)
  %119 = getelementptr inbounds i8, i8* %112, i64 %114
  br label %120

120:                                              ; preds = %116, %111
  %121 = phi i8* [ %119, %116 ], [ %112, %111 ]
  %122 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %102, i64 2
  %123 = icmp eq %"class.absl::string_view"* %122, %15
  br i1 %123, label %100, label %101
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #0 comdat {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 9223372036854775807
  %11 = add nsw i64 %10, -1
  br label %12

12:                                               ; preds = %7, %2
  %13 = phi i64 [ %11, %7 ], [ 22, %2 ]
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %15, label %20

15:                                               ; preds = %12
  %16 = shl i64 %13, 1
  %17 = icmp ugt i64 %16, %1
  %18 = select i1 %17, i64 %16, i64 %1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* %0, i64 %18) #5
  %19 = load i8, i8* %4, align 1
  br label %20

20:                                               ; preds = %12, %15
  %21 = phi i8 [ %5, %12 ], [ %19, %15 ]
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  br label %28

26:                                               ; preds = %20
  %27 = zext i8 %21 to i64
  br label %28

28:                                               ; preds = %26, %23
  %29 = phi i64 [ %25, %23 ], [ %27, %26 ]
  %30 = icmp ult i64 %29, %1
  br i1 %30, label %31, label %69

31:                                               ; preds = %28
  %32 = sub i64 %1, %29
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %79, label %34

34:                                               ; preds = %31
  br i1 %22, label %35, label %42

35:                                               ; preds = %34
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 9223372036854775807
  %39 = add nsw i64 %38, -1
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  br label %44

42:                                               ; preds = %34
  %43 = zext i8 %21 to i64
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i64 [ %39, %35 ], [ 22, %42 ]
  %46 = phi i64 [ %41, %35 ], [ %43, %42 ]
  %47 = sub i64 %45, %46
  %48 = icmp ult i64 %47, %32
  br i1 %48, label %49, label %53

49:                                               ; preds = %44
  %50 = add i64 %46, %32
  %51 = sub i64 %50, %45
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"* %0, i64 %45, i64 %51, i64 %46, i64 %46, i64 0, i64 0) #5
  %52 = load i8, i8* %4, align 1
  br label %53

53:                                               ; preds = %49, %44
  %54 = phi i8 [ %52, %49 ], [ %21, %44 ]
  %55 = icmp slt i8 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = add i64 %46, %32
  %60 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %59, i64* %60, align 8
  br label %65

61:                                               ; preds = %53
  %62 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %63 = add i64 %46, %32
  %64 = trunc i64 %63 to i8
  store i8 %64, i8* %4, align 1
  br label %65

65:                                               ; preds = %61, %56
  %66 = phi i64 [ %59, %56 ], [ %63, %61 ]
  %67 = phi i8* [ %58, %56 ], [ %62, %61 ]
  %68 = getelementptr inbounds i8, i8* %67, i64 %66
  store i8 0, i8* %68, align 1
  br label %79

69:                                               ; preds = %28
  br i1 %22, label %70, label %75

70:                                               ; preds = %69
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %1
  store i8 0, i8* %73, align 1
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1, i64* %74, align 8
  br label %79

75:                                               ; preds = %69
  %76 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %77 = getelementptr inbounds i8, i8* %76, i64 %1
  store i8 0, i8* %77, align 1
  %78 = trunc i64 %1 to i8
  store i8 %78, i8* %4, align 1
  br label %79

79:                                               ; preds = %31, %65, %70, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumE(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %4, i64 %6) #5
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %13

11:                                               ; preds = %3
  %12 = zext i8 %6 to i64
  br label %13

13:                                               ; preds = %8, %11
  %14 = phi i64 [ %10, %8 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, %14
  %18 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %17, %19
  tail call void @_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m(%"class.std::__1::basic_string"* %0, i64 %20)
  %21 = load i8, i8* %5, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  br label %28

26:                                               ; preds = %13
  %27 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %28

28:                                               ; preds = %23, %26
  %29 = phi i8* [ %25, %23 ], [ %27, %26 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %14
  %31 = load i64, i64* %15, align 8
  %32 = getelementptr inbounds i8, i8* %30, i64 %31
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %37, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %36, i64 %31, i1 false) #5
  br label %37

37:                                               ; preds = %28, %34
  %38 = load i64, i64* %18, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %42, i64 %38, i1 false) #5
  br label %43

43:                                               ; preds = %37, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_SA_(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %14

12:                                               ; preds = %4
  %13 = zext i8 %7 to i64
  br label %14

14:                                               ; preds = %9, %12
  %15 = phi i64 [ %11, %9 ], [ %13, %12 ]
  %16 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  %19 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %18, %20
  %22 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %21, %23
  tail call void @_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m(%"class.std::__1::basic_string"* %0, i64 %24)
  %25 = load i8, i8* %6, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %14
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  br label %32

30:                                               ; preds = %14
  %31 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i8* [ %29, %27 ], [ %31, %30 ]
  %34 = getelementptr inbounds i8, i8* %33, i64 %15
  %35 = load i64, i64* %16, align 8
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %40, i64 %35, i1 false) #5
  br label %41

41:                                               ; preds = %32, %38
  %42 = load i64, i64* %19, align 8
  %43 = getelementptr inbounds i8, i8* %36, i64 %42
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %47, i64 %42, i1 false) #5
  br label %48

48:                                               ; preds = %41, %45
  %49 = load i64, i64* %22, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %53, i64 %49, i1 false) #5
  br label %54

54:                                               ; preds = %48, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_8AlphaNumESA_SA_SA_(%"class.std::__1::basic_string"*, %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48), %"class.absl::AlphaNum"* nocapture readonly dereferenceable(48)) local_unnamed_addr #0 {
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %15

13:                                               ; preds = %5
  %14 = zext i8 %8 to i64
  br label %15

15:                                               ; preds = %10, %13
  %16 = phi i64 [ %12, %10 ], [ %14, %13 ]
  %17 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  %20 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %22, %24
  %26 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %25, %27
  tail call void @_ZN4absl16strings_internal37STLStringResizeUninitializedAmortizedINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPT_m(%"class.std::__1::basic_string"* %0, i64 %28)
  %29 = load i8, i8* %7, align 1
  %30 = icmp slt i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %15
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  br label %36

34:                                               ; preds = %15
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %36

36:                                               ; preds = %31, %34
  %37 = phi i8* [ %33, %31 ], [ %35, %34 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 %16
  %39 = load i64, i64* %17, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  %41 = icmp eq i64 %39, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %1, i64 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %44, i64 %39, i1 false) #5
  br label %45

45:                                               ; preds = %36, %42
  %46 = load i64, i64* %20, align 8
  %47 = getelementptr inbounds i8, i8* %40, i64 %46
  %48 = icmp eq i64 %46, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %2, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %51, i64 %46, i1 false) #5
  br label %52

52:                                               ; preds = %45, %49
  %53 = load i64, i64* %23, align 8
  %54 = getelementptr inbounds i8, i8* %47, i64 %53
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %3, i64 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %58, i64 %53, i1 false) #5
  br label %59

59:                                               ; preds = %52, %56
  %60 = load i64, i64* %26, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %"class.absl::AlphaNum", %"class.absl::AlphaNum"* %4, i64 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %64, i64 %60, i1 false) #5
  br label %65

65:                                               ; preds = %59, %62
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !5}
