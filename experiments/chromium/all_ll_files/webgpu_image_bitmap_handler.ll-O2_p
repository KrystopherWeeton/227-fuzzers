; ModuleID = '../../third_party/blink/renderer/platform/graphics/gpu/webgpu_image_bitmap_handler.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/gpu/webgpu_image_bitmap_handler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::StaticBitmapImage" = type <{ %"class.blink::Image", %"class.blink::ImageOrientation", i8, [6 x i8] }>
%"class.blink::Image" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i8, %class.scoped_refptr.1, %"class.blink::WeakPersistent", i32, i8, %"class.std::__1::unique_ptr.184" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted", i64, %"class.WTF::Vector", %"class.WTF::Vector.2" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ImageObserver"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ImageObserver" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.7", i32, [4 x i8], %"class.std::__1::unique_ptr.139", %"class.std::__1::unique_ptr.139", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.155", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.167", %"class.std::__1::unique_ptr.173", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.180", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.8", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.119", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl.42" }
%"struct.std::__1::__cxx_atomic_impl.42" = type { %"struct.std::__1::__cxx_atomic_base_impl.43" }
%"struct.std::__1::__cxx_atomic_base_impl.43" = type { i64 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.blink::Worklist.50"* }
%"class.blink::Worklist.50" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::Worklist.57"* }
%"class.blink::Worklist.57" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::Worklist.64"* }
%"class.blink::Worklist.64" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::Worklist.71"* }
%"class.blink::Worklist.71" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.blink::Worklist.78"* }
%"class.blink::Worklist.78" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::Worklist.85"* }
%"class.blink::Worklist.85" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::Worklist.92"* }
%"class.blink::Worklist.92" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.39" }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.99", %"class.std::__1::__compressed_pair.106", %"class.std::__1::__compressed_pair.111", %"class.std::__1::__compressed_pair.113", [4 x i8] }>
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101", %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { float }
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.122", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.131" }
%"class.WTF::Vector.131" = type { %"class.WTF::VectorBuffer.132" }
%"class.WTF::VectorBuffer.132" = type { %"class.WTF::VectorBufferBase.133" }
%"class.WTF::VectorBufferBase.133" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.147" }
%"class.WTF::VectorBuffer.147" = type { %"class.WTF::VectorBufferBase.148" }
%"class.WTF::VectorBufferBase.148" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.161" }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.50"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.57"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.64"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.71"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.78"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.190" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.179 }
%class.scoped_refptr.179 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.180" = type { %"struct.std::__1::__atomic_base.181" }
%"struct.std::__1::__atomic_base.181" = type { %"struct.std::__1::__cxx_atomic_impl.182" }
%"struct.std::__1::__cxx_atomic_impl.182" = type { %"struct.std::__1::__cxx_atomic_base_impl.183" }
%"struct.std::__1::__cxx_atomic_base_impl.183" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.blink::DarkModeImageCache"* }
%"class.blink::DarkModeImageCache" = type opaque
%"class.blink::ImageOrientation" = type { i8 }
%"class.cc::PaintImage" = type { %class.sk_sp, %class.sk_sp.201, %"class.gfx::Rect", i32, %class.sk_sp.206, %class.sk_sp.214, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp, %class.scoped_refptr.215 }
%class.sk_sp.201 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.202", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { i8* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.206 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.207" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.195, i32, i32 }
%class.sk_sp.195 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.196" }
%"struct.std::__1::atomic.196" = type { %"struct.std::__1::__atomic_base.197" }
%"struct.std::__1::__atomic_base.197" = type { %"struct.std::__1::__atomic_base.198" }
%"struct.std::__1::__atomic_base.198" = type { %"struct.std::__1::__cxx_atomic_impl.199" }
%"struct.std::__1::__cxx_atomic_impl.199" = type { %"struct.std::__1::__cxx_atomic_base_impl.200" }
%"struct.std::__1::__cxx_atomic_base_impl.200" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.207" = type { %"class.std::__1::__vector_base.208" }
%"class.std::__1::__vector_base.208" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.209" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.214 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.scoped_refptr.215 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.216", [4 x i8] }>
%"class.base::RefCountedThreadSafe.216" = type { %"class.base::subtle::RefCountedThreadSafeBase" }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i32 } @_ZN5blink38ComputeImageBitmapWebGPUUploadSizeInfoERKNS_7IntRectERK17WGPUTextureFormat(%"class.blink::IntRect"* nocapture readonly dereferenceable(16), i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #0 {
  %3 = load i32, i32* %1, align 4
  switch i32 %3, label %7 [
    i32 8, label %8
    i32 18, label %4
    i32 19, label %4
    i32 23, label %4
    i32 24, label %4
    i32 25, label %4
    i32 17, label %4
    i32 33, label %5
    i32 34, label %6
  ]

4:                                                ; preds = %2, %2, %2, %2, %2, %2
  br label %8

5:                                                ; preds = %2
  br label %8

6:                                                ; preds = %2
  br label %8

7:                                                ; preds = %2
  br label %8

8:                                                ; preds = %2, %4, %5, %6, %7
  %9 = phi i64 [ 0, %7 ], [ 16, %6 ], [ 8, %5 ], [ 4, %4 ], [ 2, %2 ]
  %10 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = mul nsw i64 %9, %12
  %14 = add nsw i64 %13, 255
  %15 = and i64 %14, -256
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %0, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = mul i64 %15, %19
  %21 = insertvalue { i64, i32 } undef, i64 %20, 0
  %22 = insertvalue { i64, i32 } %21, i32 %16, 1
  ret { i64, i32 } %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5blink30DawnTextureFormatBytesPerPixelE17WGPUTextureFormat(i32) local_unnamed_addr #2 {
  switch i32 %0, label %5 [
    i32 8, label %6
    i32 18, label %2
    i32 19, label %2
    i32 23, label %2
    i32 24, label %2
    i32 25, label %2
    i32 17, label %2
    i32 33, label %3
    i32 34, label %4
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1
  br label %6

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %1, %5, %4, %3, %2
  %7 = phi i64 [ 0, %5 ], [ 16, %4 ], [ 8, %3 ], [ 4, %2 ], [ 2, %1 ]
  ret i64 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink33CopyBytesFromImageBitmapForWebGPUE13scoped_refptrINS_17StaticBitmapImageEEN4base4spanIhLm18446744073709551615EEERKNS_7IntRectE17WGPUTextureFormat(%"class.blink::StaticBitmapImage"*, i64, i8*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16), i32) local_unnamed_addr #3 {
  %6 = alloca %"class.cc::PaintImage", align 8
  %7 = alloca %struct.SkImageInfo, align 8
  %8 = alloca %struct.SkImageInfo, align 8
  switch i32 %4, label %30 [
    i32 8, label %9
    i32 18, label %31
    i32 19, label %31
    i32 23, label %31
    i32 24, label %31
    i32 25, label %31
    i32 17, label %31
    i32 33, label %16
    i32 34, label %23
  ]

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = shl nsw i64 %12, 1
  %14 = add nsw i64 %13, 255
  %15 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  br label %49

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %18 to i64
  %20 = shl nsw i64 %19, 3
  %21 = add nsw i64 %20, 255
  %22 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  br label %41

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 4
  %28 = add nsw i64 %27, 255
  %29 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  br label %45

30:                                               ; preds = %5
  br label %31

31:                                               ; preds = %5, %5, %5, %5, %5, %5, %30
  %32 = phi i64 [ 0, %30 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ], [ 4, %5 ]
  %33 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %32, %35
  %37 = add nsw i64 %36, 255
  %38 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 1, i32 1
  switch i32 %4, label %121 [
    i32 18, label %54
    i32 19, label %54
    i32 23, label %39
    i32 24, label %39
    i32 25, label %40
    i32 33, label %41
    i32 34, label %45
    i32 8, label %49
    i32 17, label %53
  ]

39:                                               ; preds = %31, %31
  br label %54

40:                                               ; preds = %31
  br label %54

41:                                               ; preds = %16, %31
  %42 = phi i32* [ %22, %16 ], [ %38, %31 ]
  %43 = phi i64 [ %21, %16 ], [ %37, %31 ]
  %44 = phi i32* [ %17, %16 ], [ %33, %31 ]
  br label %54

45:                                               ; preds = %23, %31
  %46 = phi i32* [ %29, %23 ], [ %38, %31 ]
  %47 = phi i64 [ %28, %23 ], [ %37, %31 ]
  %48 = phi i32* [ %24, %23 ], [ %33, %31 ]
  br label %54

49:                                               ; preds = %9, %31
  %50 = phi i32* [ %15, %9 ], [ %38, %31 ]
  %51 = phi i64 [ %14, %9 ], [ %37, %31 ]
  %52 = phi i32* [ %10, %9 ], [ %33, %31 ]
  br label %54

53:                                               ; preds = %31
  br label %54

54:                                               ; preds = %53, %49, %45, %41, %40, %39, %31, %31
  %55 = phi i32* [ %38, %31 ], [ %38, %31 ], [ %38, %39 ], [ %38, %40 ], [ %42, %41 ], [ %46, %45 ], [ %50, %49 ], [ %38, %53 ]
  %56 = phi i64 [ %37, %31 ], [ %37, %31 ], [ %37, %39 ], [ %37, %40 ], [ %43, %41 ], [ %47, %45 ], [ %51, %49 ], [ %37, %53 ]
  %57 = phi i32* [ %33, %31 ], [ %33, %31 ], [ %33, %39 ], [ %33, %40 ], [ %44, %41 ], [ %48, %45 ], [ %52, %49 ], [ %33, %53 ]
  %58 = phi i64 [ 4, %31 ], [ 4, %31 ], [ 6, %39 ], [ 7, %40 ], [ 13, %41 ], [ 14, %45 ], [ 15, %49 ], [ 17, %53 ]
  %59 = bitcast %"class.cc::PaintImage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %59) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 104, i1 false)
  %60 = getelementptr inbounds %"class.blink::StaticBitmapImage", %"class.blink::StaticBitmapImage"* %0, i64 0, i32 0
  %61 = bitcast %"class.blink::StaticBitmapImage"* %0 to void (%"class.cc::PaintImage"*, %"class.blink::Image"*)***
  %62 = load void (%"class.cc::PaintImage"*, %"class.blink::Image"*)**, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*** %61, align 8
  %63 = getelementptr inbounds void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)** %62, i64 30
  %64 = load void (%"class.cc::PaintImage"*, %"class.blink::Image"*)*, void (%"class.cc::PaintImage"*, %"class.blink::Image"*)** %63, align 8
  call void %64(%"class.cc::PaintImage"* nonnull sret %6, %"class.blink::Image"* %60) #7
  %65 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #7
  %66 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 0, i32 1
  %68 = bitcast %struct.SkImageInfo* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %68, i8 -86, i64 24, i1 false)
  %69 = load i32, i32* %57, align 4
  %70 = load i32, i32* %55, align 4
  %71 = bitcast %"class.blink::StaticBitmapImage"* %0 to i1 (%"class.blink::StaticBitmapImage"*)***
  %72 = load i1 (%"class.blink::StaticBitmapImage"*)**, i1 (%"class.blink::StaticBitmapImage"*)*** %71, align 8
  %73 = getelementptr inbounds i1 (%"class.blink::StaticBitmapImage"*)*, i1 (%"class.blink::StaticBitmapImage"*)** %72, i64 50
  %74 = load i1 (%"class.blink::StaticBitmapImage"*)*, i1 (%"class.blink::StaticBitmapImage"*)** %73, align 8
  %75 = call zeroext i1 %74(%"class.blink::StaticBitmapImage"* %0) #7
  %76 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #7
  call void @_ZNK2cc10PaintImage14GetSkImageInfoEv(%struct.SkImageInfo* nonnull sret %8, %"class.cc::PaintImage"* nonnull %6) #7
  %77 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 0, i32 0
  %78 = load %class.SkColorSpace*, %class.SkColorSpace** %77, align 8, !noalias !2
  %79 = icmp eq %class.SkColorSpace* %78, null
  br i1 %79, label %85, label %80

80:                                               ; preds = %54
  %81 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = atomicrmw add i32* %81, i32 1 monotonic, !noalias !2
  %83 = load %class.SkColorSpace*, %class.SkColorSpace** %77, align 8
  %84 = bitcast %class.SkColorSpace* %83 to i8*
  br label %85

85:                                               ; preds = %80, %54
  %86 = phi i8* [ %84, %80 ], [ null, %54 ]
  %87 = phi %class.SkColorSpace* [ %83, %80 ], [ null, %54 ]
  %88 = ptrtoint %class.SkColorSpace* %78 to i64
  %89 = select i1 %75, i64 8589934592, i64 12884901888
  %90 = or i64 %89, %58
  %91 = zext i32 %70 to i64
  %92 = shl nuw i64 %91, 32
  %93 = zext i32 %69 to i64
  %94 = or i64 %92, %93
  %95 = bitcast %struct.SkImageInfo* %7 to i64*
  store i64 %88, i64* %95, align 8, !alias.scope !7
  %96 = bitcast i32* %67 to i64*
  store i64 %90, i64* %96, align 8, !alias.scope !7
  %97 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %7, i64 0, i32 1
  %98 = bitcast %struct.SkISize* %97 to i64*
  store i64 %94, i64* %98, align 8, !alias.scope !7
  %99 = icmp eq %class.SkColorSpace* %87, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %85
  %101 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %87, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw add i32* %101, i32 -1 acq_rel
  %103 = icmp eq i32 %102, 1
  br i1 %103, label %104, label %105

104:                                              ; preds = %100
  call void @_ZdlPv(i8* %86) #8
  br label %105

105:                                              ; preds = %85, %100, %104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #7
  %106 = and i64 %56, 4294967040
  %107 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %3, i64 0, i32 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = call zeroext i1 @_ZNK2cc10PaintImage10readPixelsERK11SkImageInfoPvmii(%"class.cc::PaintImage"* nonnull %6, %struct.SkImageInfo* nonnull dereferenceable(24) %7, i8* %2, i64 %106, i32 %108, i32 %110) #7
  %112 = load %class.SkColorSpace*, %class.SkColorSpace** %66, align 8
  %113 = icmp eq %class.SkColorSpace* %112, null
  br i1 %113, label %120, label %114

114:                                              ; preds = %105
  %115 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %112, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = atomicrmw add i32* %115, i32 -1 acq_rel
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  %119 = bitcast %class.SkColorSpace* %112 to i8*
  call void @_ZdlPv(i8* %119) #8
  br label %120

120:                                              ; preds = %105, %114, %118
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #7
  call void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %59) #7
  br label %121

121:                                              ; preds = %31, %120
  %122 = phi i1 [ %111, %120 ], [ false, %31 ]
  %123 = icmp eq %"class.blink::StaticBitmapImage"* %0, null
  br i1 %123, label %136, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %"class.blink::StaticBitmapImage", %"class.blink::StaticBitmapImage"* %0, i64 0, i32 0, i32 1, i32 0
  %126 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %125, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = atomicrmw sub i32* %126, i32 1 acq_rel
  %128 = icmp eq i32 %127, 1
  br i1 %128, label %129, label %136

129:                                              ; preds = %124
  %130 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %125, i64 -2
  %131 = bitcast %"class.base::RefCountedThreadSafe"* %130 to %"class.blink::Image"*
  %132 = bitcast %"class.base::RefCountedThreadSafe"* %130 to void (%"class.blink::Image"*)***
  %133 = load void (%"class.blink::Image"*)**, void (%"class.blink::Image"*)*** %132, align 8
  %134 = getelementptr inbounds void (%"class.blink::Image"*)*, void (%"class.blink::Image"*)** %133, i64 1
  %135 = load void (%"class.blink::Image"*)*, void (%"class.blink::Image"*)** %134, align 8
  call void %135(%"class.blink::Image"* nonnull %131) #7
  br label %136

136:                                              ; preds = %121, %124, %129
  ret i1 %122
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK2cc10PaintImage14GetSkImageInfoEv(%struct.SkImageInfo* sret, %"class.cc::PaintImage"*) local_unnamed_addr #4

declare zeroext i1 @_ZNK2cc10PaintImage10readPixelsERK11SkImageInfoPvmii(%"class.cc::PaintImage"*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN2cc10PaintImageD1Ev(%"class.cc::PaintImage"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!4 = distinct !{!4, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!5 = distinct !{!5, !6, !"_ZNK11SkImageInfo13refColorSpaceEv: argument 0"}
!6 = distinct !{!6, !"_ZNK11SkImageInfo13refColorSpaceEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!9 = distinct !{!9, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
