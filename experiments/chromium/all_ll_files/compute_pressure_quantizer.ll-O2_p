; ModuleID = '../../content/browser/compute_pressure/compute_pressure_quantizer.cc'
source_filename = "../../content/browser/compute_pressure/compute_pressure_quantizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.content::ComputePressureQuantizer" = type { %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer" }
%"class.content::ComputePressureQuantizer::ValueQuantizer" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }
%"class.blink::mojom::ComputePressureQuantization" = type { %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.blink::mojom::ComputePressureState" = type { double, double }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.blink::mojom::ComputePressureQuantization"* }

@_ZN7content24ComputePressureQuantizerC1Ev = hidden unnamed_addr alias void (%"class.content::ComputePressureQuantizer"*), void (%"class.content::ComputePressureQuantizer"*)* @_ZN7content24ComputePressureQuantizerC2Ev
@_ZN7content24ComputePressureQuantizerD1Ev = hidden unnamed_addr alias void (%"class.content::ComputePressureQuantizer"*), void (%"class.content::ComputePressureQuantizer"*)* @_ZN7content24ComputePressureQuantizerD2Ev
@_ZN7content24ComputePressureQuantizer14ValueQuantizerC1Ev = hidden unnamed_addr alias void (%"class.content::ComputePressureQuantizer::ValueQuantizer"*), void (%"class.content::ComputePressureQuantizer::ValueQuantizer"*)* @_ZN7content24ComputePressureQuantizer14ValueQuantizerC2Ev
@_ZN7content24ComputePressureQuantizer14ValueQuantizerD1Ev = hidden unnamed_addr alias void (%"class.content::ComputePressureQuantizer::ValueQuantizer"*), void (%"class.content::ComputePressureQuantizer::ValueQuantizer"*)* @_ZN7content24ComputePressureQuantizer14ValueQuantizerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizerC2Ev(%"class.content::ComputePressureQuantizer"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.content::ComputePressureQuantizer"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizerD2Ev(%"class.content::ComputePressureQuantizer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load double*, double** %2, align 8
  %4 = icmp eq double* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint double* %3 to i64
  %7 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = bitcast double** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast double* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load double*, double** %11, align 8
  %13 = icmp eq double* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint double* %12 to i64
  %16 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast double** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast double* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #7
  br label %19

19:                                               ; preds = %10, %14
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN7content24ComputePressureQuantizer7IsValidERKN5blink5mojom27ComputePressureQuantizationE(%"class.blink::mojom::ComputePressureQuantization"* nocapture readonly dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = bitcast double** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.blink::mojom::ComputePressureQuantization"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = ashr exact i64 %7, 3
  %9 = icmp ugt i64 %8, 3
  %10 = inttoptr i64 %6 to double*
  %11 = inttoptr i64 %4 to double*
  br i1 %9, label %52, label %12

12:                                               ; preds = %1
  %13 = icmp eq double* %10, %11
  br i1 %13, label %26, label %16

14:                                               ; preds = %16
  %15 = icmp eq double* %25, %11
  br i1 %15, label %26, label %16

16:                                               ; preds = %12, %14
  %17 = phi double [ %19, %14 ], [ 0.000000e+00, %12 ]
  %18 = phi double* [ %25, %14 ], [ %10, %12 ]
  %19 = load double, double* %18, align 8
  %20 = fcmp ugt double %19, 0.000000e+00
  %21 = fcmp ult double %19, 1.000000e+00
  %22 = and i1 %21, %20
  %23 = fcmp ugt double %19, %17
  %24 = and i1 %23, %22
  %25 = getelementptr inbounds double, double* %18, i64 1
  br i1 %24, label %14, label %52

26:                                               ; preds = %14, %12
  %27 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %0, i64 0, i32 1
  %28 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %0, i64 0, i32 1, i32 0, i32 1
  %29 = bitcast double** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.std::__1::vector"* %27 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %30, %32
  %34 = ashr exact i64 %33, 3
  %35 = icmp ugt i64 %34, 1
  %36 = inttoptr i64 %32 to double*
  %37 = inttoptr i64 %30 to double*
  br i1 %35, label %52, label %38

38:                                               ; preds = %26
  %39 = icmp eq double* %36, %37
  br i1 %39, label %52, label %42

40:                                               ; preds = %42
  %41 = icmp eq double* %51, %37
  br i1 %41, label %52, label %42

42:                                               ; preds = %38, %40
  %43 = phi double [ %45, %40 ], [ 0.000000e+00, %38 ]
  %44 = phi double* [ %51, %40 ], [ %36, %38 ]
  %45 = load double, double* %44, align 8
  %46 = fcmp ugt double %45, 0.000000e+00
  %47 = fcmp ult double %45, 1.000000e+00
  %48 = and i1 %47, %46
  %49 = fcmp ugt double %45, %43
  %50 = and i1 %49, %48
  %51 = getelementptr inbounds double, double* %44, i64 1
  br i1 %50, label %40, label %52

52:                                               ; preds = %16, %42, %40, %38, %26, %1
  %53 = phi i1 [ false, %1 ], [ false, %26 ], [ true, %38 ], [ true, %40 ], [ false, %42 ], [ false, %16 ]
  ret i1 %53
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN7content24ComputePressureQuantizer14ValueQuantizer7IsValidERKNSt3__16vectorIdNS2_9allocatorIdEEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %3 = load double*, double** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = load double*, double** %4, align 8
  %6 = icmp eq double* %3, %5
  br i1 %6, label %19, label %9

7:                                                ; preds = %9
  %8 = icmp eq double* %18, %5
  br i1 %8, label %19, label %9

9:                                                ; preds = %1, %7
  %10 = phi double [ %12, %7 ], [ 0.000000e+00, %1 ]
  %11 = phi double* [ %18, %7 ], [ %3, %1 ]
  %12 = load double, double* %11, align 8
  %13 = fcmp ugt double %12, 0.000000e+00
  %14 = fcmp ult double %12, 1.000000e+00
  %15 = and i1 %14, %13
  %16 = fcmp ugt double %12, %10
  %17 = and i1 %16, %15
  %18 = getelementptr inbounds double, double* %11, i64 1
  br i1 %17, label %7, label %19

19:                                               ; preds = %7, %9, %1
  %20 = phi i1 [ true, %1 ], [ false, %9 ], [ true, %7 ]
  ret i1 %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7content24ComputePressureQuantizer6IsSameERKN5blink5mojom27ComputePressureQuantizationE(%"class.content::ComputePressureQuantizer"* nocapture readonly, %"class.blink::mojom::ComputePressureQuantization"* nocapture readonly dereferenceable(48)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast double** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.content::ComputePressureQuantizer"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %1, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast double** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.blink::mojom::ComputePressureQuantization"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = icmp eq i64 %9, %16
  %18 = inttoptr i64 %7 to double*
  %19 = inttoptr i64 %14 to double*
  br i1 %17, label %20, label %68

20:                                               ; preds = %2
  %21 = icmp eq i64 %8, 0
  br i1 %21, label %34, label %24

22:                                               ; preds = %24
  %23 = icmp ult i64 %33, %9
  br i1 %23, label %24, label %34

24:                                               ; preds = %20, %22
  %25 = phi i64 [ %33, %22 ], [ 0, %20 ]
  %26 = getelementptr inbounds double, double* %18, i64 %25
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds double, double* %19, i64 %25
  %29 = load double, double* %28, align 8
  %30 = fsub double %27, %29
  %31 = tail call double @llvm.fabs.f64(double %30) #8
  %32 = fcmp ult double %31, 1.000000e-05
  %33 = add nuw i64 %25, 1
  br i1 %32, label %22, label %68

34:                                               ; preds = %22, %20
  %35 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1
  %36 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %1, i64 0, i32 1
  %37 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %38 = bitcast double** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %35 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 3
  %44 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %1, i64 0, i32 1, i32 0, i32 1
  %45 = bitcast double** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::vector"* %36 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = ashr exact i64 %49, 3
  %51 = icmp eq i64 %43, %50
  %52 = inttoptr i64 %41 to double*
  %53 = inttoptr i64 %48 to double*
  br i1 %51, label %54, label %68

54:                                               ; preds = %34
  %55 = icmp eq i64 %42, 0
  br i1 %55, label %68, label %58

56:                                               ; preds = %58
  %57 = icmp ult i64 %67, %43
  br i1 %57, label %58, label %68

58:                                               ; preds = %54, %56
  %59 = phi i64 [ %67, %56 ], [ 0, %54 ]
  %60 = getelementptr inbounds double, double* %52, i64 %59
  %61 = load double, double* %60, align 8
  %62 = getelementptr inbounds double, double* %53, i64 %59
  %63 = load double, double* %62, align 8
  %64 = fsub double %61, %63
  %65 = tail call double @llvm.fabs.f64(double %64) #8
  %66 = fcmp ult double %65, 1.000000e-05
  %67 = add nuw i64 %59, 1
  br i1 %66, label %56, label %68

68:                                               ; preds = %24, %58, %56, %34, %54, %2
  %69 = phi i1 [ false, %2 ], [ false, %34 ], [ true, %54 ], [ true, %56 ], [ false, %58 ], [ false, %24 ]
  ret i1 %69
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7content24ComputePressureQuantizer14ValueQuantizer6IsSameERKNSt3__16vectorIdNS2_9allocatorIdEEEE(%"class.content::ComputePressureQuantizer::ValueQuantizer"* nocapture readonly, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = bitcast double** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast double** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = icmp eq i64 %9, %16
  %18 = inttoptr i64 %7 to double*
  %19 = inttoptr i64 %14 to double*
  br i1 %17, label %20, label %34

20:                                               ; preds = %2
  %21 = icmp eq i64 %8, 0
  br i1 %21, label %34, label %24

22:                                               ; preds = %24
  %23 = icmp ult i64 %33, %9
  br i1 %23, label %24, label %34

24:                                               ; preds = %20, %22
  %25 = phi i64 [ %33, %22 ], [ 0, %20 ]
  %26 = getelementptr inbounds double, double* %18, i64 %25
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds double, double* %19, i64 %25
  %29 = load double, double* %28, align 8
  %30 = fsub double %27, %29
  %31 = tail call double @llvm.fabs.f64(double %30) #8
  %32 = fcmp ult double %31, 1.000000e-05
  %33 = add nuw i64 %25, 1
  br i1 %32, label %22, label %34

34:                                               ; preds = %24, %22, %20, %2
  %35 = phi i1 [ false, %2 ], [ true, %20 ], [ false, %24 ], [ true, %22 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7content24ComputePressureQuantizer8QuantizeENS_21ComputePressureSampleE(%"class.blink::mojom::ComputePressureState"* noalias sret, %"class.content::ComputePressureQuantizer"* nocapture readonly, double, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::mojom::ComputePressureState", %"class.blink::mojom::ComputePressureState"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::mojom::ComputePressureState", %"class.blink::mojom::ComputePressureState"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::mojom::ComputePressureState"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -1, i64 16, i1 false)
  tail call void @_ZN5blink5mojom20ComputePressureStateC1Ev(%"class.blink::mojom::ComputePressureState"* %0) #8
  %8 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load double*, double** %8, align 8
  %10 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = load double*, double** %10, align 8
  %12 = icmp eq double* %9, %11
  br i1 %12, label %24, label %13

13:                                               ; preds = %4, %13
  %14 = phi double [ %20, %13 ], [ 0.000000e+00, %4 ]
  %15 = phi double [ %19, %13 ], [ 1.000000e+00, %4 ]
  %16 = phi double* [ %21, %13 ], [ %9, %4 ]
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %17, %2
  %19 = select i1 %18, double %17, double %15
  %20 = select i1 %18, double %14, double %17
  %21 = getelementptr inbounds double, double* %16, i64 1
  %22 = icmp eq double* %21, %11
  %23 = or i1 %18, %22
  br i1 %23, label %24, label %13

24:                                               ; preds = %13, %4
  %25 = phi double [ 1.000000e+00, %4 ], [ %19, %13 ]
  %26 = phi double [ 0.000000e+00, %4 ], [ %20, %13 ]
  %27 = fadd double %25, %26
  %28 = fmul double %27, 5.000000e-01
  store double %28, double* %5, align 8
  %29 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %30 = load double*, double** %29, align 8
  %31 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %32 = load double*, double** %31, align 8
  %33 = icmp eq double* %30, %32
  br i1 %33, label %45, label %34

34:                                               ; preds = %24, %34
  %35 = phi double [ %41, %34 ], [ 0.000000e+00, %24 ]
  %36 = phi double [ %40, %34 ], [ 1.000000e+00, %24 ]
  %37 = phi double* [ %42, %34 ], [ %30, %24 ]
  %38 = load double, double* %37, align 8
  %39 = fcmp ogt double %38, %3
  %40 = select i1 %39, double %38, double %36
  %41 = select i1 %39, double %35, double %38
  %42 = getelementptr inbounds double, double* %37, i64 1
  %43 = icmp eq double* %42, %32
  %44 = or i1 %39, %43
  br i1 %44, label %45, label %34

45:                                               ; preds = %34, %24
  %46 = phi double [ 1.000000e+00, %24 ], [ %40, %34 ]
  %47 = phi double [ 0.000000e+00, %24 ], [ %41, %34 ]
  %48 = fadd double %46, %47
  %49 = fmul double %48, 5.000000e-01
  store double %49, double* %6, align 8
  ret void
}

declare void @_ZN5blink5mojom20ComputePressureStateC1Ev(%"class.blink::mojom::ComputePressureState"*) unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK7content24ComputePressureQuantizer14ValueQuantizer8QuantizeEd(%"class.content::ComputePressureQuantizer::ValueQuantizer"* nocapture readonly, double) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load double*, double** %3, align 8
  %5 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load double*, double** %5, align 8
  %7 = icmp eq double* %4, %6
  br i1 %7, label %19, label %8

8:                                                ; preds = %2, %8
  %9 = phi double [ %15, %8 ], [ 0.000000e+00, %2 ]
  %10 = phi double [ %14, %8 ], [ 1.000000e+00, %2 ]
  %11 = phi double* [ %16, %8 ], [ %4, %2 ]
  %12 = load double, double* %11, align 8
  %13 = fcmp ogt double %12, %1
  %14 = select i1 %13, double %12, double %10
  %15 = select i1 %13, double %9, double %12
  %16 = getelementptr inbounds double, double* %11, i64 1
  %17 = icmp eq double* %16, %6
  %18 = or i1 %13, %17
  br i1 %18, label %19, label %8

19:                                               ; preds = %8, %2
  %20 = phi double [ 1.000000e+00, %2 ], [ %14, %8 ]
  %21 = phi double [ 0.000000e+00, %2 ], [ %15, %8 ]
  %22 = fadd double %20, %21
  %23 = fmul double %22, 5.000000e-01
  ret double %23
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizer6AssignEN4mojo9StructPtrIN5blink5mojom27ComputePressureQuantizationEEE(%"class.content::ComputePressureQuantizer"* nocapture, %"class.mojo::StructPtr"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.blink::mojom::ComputePressureQuantization"*, %"class.blink::mojom::ComputePressureQuantization"** %3, align 8
  %5 = bitcast %"class.blink::mojom::ComputePressureQuantization"* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 8
  %7 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast double** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.blink::mojom::ComputePressureQuantization"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #8
  %11 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load double*, double** %11, align 8
  %13 = icmp eq double* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = ptrtoint double* %12 to i64
  %16 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast double** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast double* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #7
  %19 = bitcast %"class.content::ComputePressureQuantizer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #8
  br label %20

20:                                               ; preds = %2, %14
  %21 = bitcast %"class.content::ComputePressureQuantizer"* %0 to <2 x i64>*
  store <2 x i64> %6, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = bitcast double** %22 to i64*
  store i64 %9, i64* %23, align 8
  %24 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1
  %25 = load %"class.blink::mojom::ComputePressureQuantization"*, %"class.blink::mojom::ComputePressureQuantization"** %3, align 8
  %26 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %25, i64 0, i32 1
  %27 = bitcast %"class.std::__1::vector"* %26 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = getelementptr inbounds %"class.blink::mojom::ComputePressureQuantization", %"class.blink::mojom::ComputePressureQuantization"* %25, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast double** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.std::__1::vector"* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #8
  %33 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %24, i64 0, i32 0, i32 0, i32 0
  %34 = load double*, double** %33, align 8
  %35 = icmp eq double* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %20
  %37 = ptrtoint double* %34 to i64
  %38 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %39 = bitcast double** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = bitcast double* %34 to i8*
  tail call void @_ZdlPv(i8* %40) #7
  %41 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #8
  br label %42

42:                                               ; preds = %20, %36
  %43 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %24 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %43, align 8
  %44 = getelementptr inbounds %"class.content::ComputePressureQuantizer", %"class.content::ComputePressureQuantizer"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %45 = bitcast double** %44 to i64*
  store i64 %31, i64* %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizer14ValueQuantizer6AssignENSt3__16vectorIdNS2_9allocatorIdEEEE(%"class.content::ComputePressureQuantizer::ValueQuantizer"* nocapture, %"class.std::__1::vector"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load double*, double** %3, align 8
  %5 = icmp eq double* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = ptrtoint double* %4 to i64
  %8 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast double** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast double* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #7
  %11 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #8
  br label %12

12:                                               ; preds = %2, %6
  %13 = bitcast %"class.std::__1::vector"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %17 = bitcast double** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast double** %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast double** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast double** %24 to i64*
  store i64 %23, i64* %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizer14ValueQuantizerC2Ev(%"class.content::ComputePressureQuantizer::ValueQuantizer"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content24ComputePressureQuantizer14ValueQuantizerD2Ev(%"class.content::ComputePressureQuantizer::ValueQuantizer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load double*, double** %2, align 8
  %4 = icmp eq double* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint double* %3 to i64
  %7 = getelementptr inbounds %"class.content::ComputePressureQuantizer::ValueQuantizer", %"class.content::ComputePressureQuantizer::ValueQuantizer"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast double** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast double* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
