; ModuleID = '../../third_party/unrar/src/rijndael.cpp'
source_filename = "../../third_party/unrar/src/rijndael.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.Rijndael = type { i8, i32, [16 x i8], [15 x [4 x [4 x i8]]] }

@_ZL1S = internal unnamed_addr global [256 x i8] zeroinitializer, align 16
@_ZL2T1 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T2 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T3 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T4 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T5 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T6 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T7 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2T8 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2S5 = internal unnamed_addr global [256 x i8] zeroinitializer, align 16
@_ZL4rcon = internal unnamed_addr global [30 x i8] zeroinitializer, align 16
@_ZL2U1 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2U2 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2U3 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16
@_ZL2U4 = internal unnamed_addr global [256 x [4 x i8]] zeroinitializer, align 16

@_ZN8RijndaelC1Ev = hidden unnamed_addr alias void (%class.Rijndael*), void (%class.Rijndael*)* @_ZN8RijndaelC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8RijndaelC2Ev(%class.Rijndael* nocapture) unnamed_addr #0 align 2 {
  %2 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 0), align 16
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @_ZN8Rijndael14GenerateTablesEv(%class.Rijndael* undef)
  br label %5

5:                                                ; preds = %4, %1
  %6 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 0
  store i8 1, i8* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN8Rijndael14GenerateTablesEv(%class.Rijndael* nocapture readnone) local_unnamed_addr #1 align 2 {
  %2 = alloca [512 x i8], align 16
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 256, i1 false)
  br label %6

6:                                                ; preds = %6, %1
  %7 = phi i64 [ %13, %6 ], [ 0, %1 ]
  %8 = phi i32 [ %21, %6 ], [ 1, %1 ]
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i64 %7, 255
  %12 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %11
  store i8 %9, i8* %12, align 1
  %13 = add nuw i64 %7, 1
  %14 = trunc i64 %7 to i8
  %15 = sext i32 %8 to i64
  %16 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %15
  store i8 %14, i8* %16, align 1
  %17 = shl i32 %8, 1
  %18 = icmp slt i8 %9, 0
  %19 = select i1 %18, i32 283, i32 0
  %20 = xor i32 %17, %8
  %21 = xor i32 %20, %19
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %6

23:                                               ; preds = %6, %23
  %24 = phi i64 [ %46, %23 ], [ 0, %6 ]
  %25 = phi i32 [ %45, %23 ], [ 1, %6 ]
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds [30 x i8], [30 x i8]* @_ZL4rcon, i64 0, i64 %24
  store i8 %26, i8* %27, align 1
  %28 = shl i32 %25, 1
  %29 = icmp slt i8 %26, 0
  %30 = select i1 %29, i32 283, i32 0
  %31 = xor i32 %30, %28
  %32 = add nuw nsw i64 %24, 1
  %33 = trunc i32 %31 to i8
  %34 = getelementptr inbounds [30 x i8], [30 x i8]* @_ZL4rcon, i64 0, i64 %32
  store i8 %33, i8* %34, align 1
  %35 = shl i32 %31, 1
  %36 = icmp slt i8 %33, 0
  %37 = select i1 %36, i32 283, i32 0
  %38 = xor i32 %37, %35
  %39 = add nuw nsw i64 %24, 2
  %40 = trunc i32 %38 to i8
  %41 = getelementptr inbounds [30 x i8], [30 x i8]* @_ZL4rcon, i64 0, i64 %39
  store i8 %40, i8* %41, align 1
  %42 = shl i32 %38, 1
  %43 = icmp slt i8 %40, 0
  %44 = select i1 %43, i32 283, i32 0
  %45 = xor i32 %44, %42
  %46 = add nuw nsw i64 %24, 3
  %47 = icmp eq i64 %46, 30
  br i1 %47, label %49, label %23

48:                                               ; preds = %193
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %5) #3
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #3
  ret void

49:                                               ; preds = %23, %193
  %50 = phi i64 [ %203, %193 ], [ 0, %23 ]
  %51 = phi i32 [ %204, %193 ], [ 0, %23 ]
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %61, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %50
  %55 = load i8, i8* %54, align 1
  %56 = xor i8 %55, -1
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  br label %61

61:                                               ; preds = %49, %53
  %62 = phi i32 [ %60, %53 ], [ 0, %49 ]
  %63 = shl nuw nsw i32 %62, 1
  %64 = shl nuw nsw i32 %62, 2
  %65 = xor i32 %63, %64
  %66 = shl nuw nsw i32 %62, 3
  %67 = xor i32 %65, %66
  %68 = shl nuw nsw i32 %62, 4
  %69 = xor i32 %67, %68
  %70 = xor i32 %69, %62
  %71 = lshr i32 %69, 8
  %72 = xor i32 %70, %71
  %73 = trunc i32 %72 to i8
  %74 = xor i8 %73, 99
  %75 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %50
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %50, i64 1
  store i8 %74, i8* %76, align 1
  %77 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %50, i64 0
  store i8 %74, i8* %77, align 4
  %78 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %50, i64 3
  store i8 %74, i8* %78, align 1
  %79 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %50, i64 0
  store i8 %74, i8* %79, align 4
  %80 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %50, i64 3
  store i8 %74, i8* %80, align 1
  %81 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %50, i64 2
  store i8 %74, i8* %81, align 2
  %82 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %50, i64 2
  store i8 %74, i8* %82, align 2
  %83 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %50, i64 1
  store i8 %74, i8* %83, align 1
  %84 = icmp eq i8 %74, 0
  br i1 %84, label %96, label %85

85:                                               ; preds = %61
  %86 = zext i8 %74 to i64
  %87 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i64
  %90 = add nuw nsw i64 %89, 25
  %91 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = add nuw nsw i64 %89, 1
  %94 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  br label %96

96:                                               ; preds = %61, %85
  %97 = phi i8 [ %92, %85 ], [ 0, %61 ]
  %98 = phi i8 [ %95, %85 ], [ 0, %61 ]
  %99 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %50, i64 3
  store i8 %97, i8* %99, align 1
  %100 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %50, i64 2
  store i8 %97, i8* %100, align 2
  %101 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %50, i64 1
  store i8 %97, i8* %101, align 1
  %102 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %50, i64 0
  store i8 %97, i8* %102, align 4
  %103 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %50, i64 2
  store i8 %98, i8* %103, align 2
  %104 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %50, i64 1
  store i8 %98, i8* %104, align 1
  %105 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %50, i64 0
  store i8 %98, i8* %105, align 4
  %106 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %50, i64 3
  store i8 %98, i8* %106, align 1
  %107 = shl nuw nsw i32 %51, 3
  %108 = trunc i64 %50 to i32
  %109 = shl i32 %108, 1
  %110 = xor i32 %109, %107
  %111 = trunc i64 %50 to i32
  %112 = shl i32 %111, 6
  %113 = xor i32 %110, %112
  %114 = lshr i32 %113, 8
  %115 = xor i32 %114, %113
  %116 = trunc i32 %115 to i8
  %117 = xor i8 %116, 5
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %96
  %120 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %50
  store i8 0, i8* %120, align 1
  br label %139

121:                                              ; preds = %96
  %122 = zext i8 %117 to i64
  %123 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = xor i8 %124, -1
  %126 = zext i8 %125 to i64
  %127 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %50
  store i8 %128, i8* %129, align 1
  %130 = icmp eq i8 %128, 0
  br i1 %130, label %139, label %131

131:                                              ; preds = %121
  %132 = zext i8 %128 to i64
  %133 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = add nuw nsw i64 %135, 104
  %137 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  br label %139

139:                                              ; preds = %121, %119, %131
  %140 = phi i1 [ true, %131 ], [ false, %121 ], [ false, %119 ]
  %141 = phi i8 [ %128, %131 ], [ 0, %121 ], [ 0, %119 ]
  %142 = phi i8 [ %138, %131 ], [ 0, %121 ], [ 0, %119 ]
  %143 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %50, i64 2
  store i8 %142, i8* %143, align 2
  %144 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %50, i64 1
  store i8 %142, i8* %144, align 1
  %145 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %50, i64 0
  store i8 %142, i8* %145, align 4
  %146 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %50, i64 3
  store i8 %142, i8* %146, align 1
  %147 = zext i8 %141 to i64
  %148 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %147, i64 2
  store i8 %142, i8* %148, align 2
  %149 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %147, i64 1
  store i8 %142, i8* %149, align 1
  %150 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %147, i64 0
  store i8 %142, i8* %150, align 4
  %151 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %147, i64 3
  store i8 %142, i8* %151, align 1
  br i1 %140, label %152, label %159

152:                                              ; preds = %139
  %153 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %147
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  %156 = add nuw nsw i64 %155, 199
  %157 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %156
  %158 = load i8, i8* %157, align 1
  br label %159

159:                                              ; preds = %139, %152
  %160 = phi i8 [ %158, %152 ], [ 0, %139 ]
  %161 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %50, i64 0
  store i8 %160, i8* %161, align 4
  %162 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %50, i64 3
  store i8 %160, i8* %162, align 1
  %163 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %50, i64 2
  store i8 %160, i8* %163, align 2
  %164 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %50, i64 1
  store i8 %160, i8* %164, align 1
  %165 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %147, i64 0
  store i8 %160, i8* %165, align 4
  %166 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %147, i64 3
  store i8 %160, i8* %166, align 1
  %167 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %147, i64 2
  store i8 %160, i8* %167, align 2
  %168 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %147, i64 1
  store i8 %160, i8* %168, align 1
  br i1 %140, label %169, label %176

169:                                              ; preds = %159
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %147
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i64
  %173 = add nuw nsw i64 %172, 238
  %174 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  br label %176

176:                                              ; preds = %159, %169
  %177 = phi i8 [ %175, %169 ], [ 0, %159 ]
  %178 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %50, i64 1
  store i8 %177, i8* %178, align 1
  %179 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %50, i64 0
  store i8 %177, i8* %179, align 4
  %180 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %50, i64 3
  store i8 %177, i8* %180, align 1
  %181 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %50, i64 2
  store i8 %177, i8* %181, align 2
  %182 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %147, i64 1
  store i8 %177, i8* %182, align 1
  %183 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %147, i64 0
  store i8 %177, i8* %183, align 4
  %184 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %147, i64 3
  store i8 %177, i8* %184, align 1
  %185 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %147, i64 2
  store i8 %177, i8* %185, align 2
  br i1 %140, label %186, label %193

186:                                              ; preds = %176
  %187 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %147
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i64
  %190 = add nuw nsw i64 %189, 223
  %191 = getelementptr inbounds [512 x i8], [512 x i8]* %2, i64 0, i64 %190
  %192 = load i8, i8* %191, align 1
  br label %193

193:                                              ; preds = %176, %186
  %194 = phi i8 [ %192, %186 ], [ 0, %176 ]
  %195 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %50, i64 3
  store i8 %194, i8* %195, align 1
  %196 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %50, i64 2
  store i8 %194, i8* %196, align 2
  %197 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %50, i64 1
  store i8 %194, i8* %197, align 1
  %198 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %50, i64 0
  store i8 %194, i8* %198, align 4
  %199 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %147, i64 3
  store i8 %194, i8* %199, align 1
  %200 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %147, i64 2
  store i8 %194, i8* %200, align 2
  %201 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %147, i64 1
  store i8 %194, i8* %201, align 1
  %202 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %147, i64 0
  store i8 %194, i8* %202, align 4
  %203 = add nuw nsw i64 %50, 1
  %204 = add nuw nsw i32 %51, 1
  %205 = icmp eq i64 %203, 256
  br i1 %205, label %48, label %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Rijndael4InitEbPKhjS1_(%class.Rijndael* nocapture, i1 zeroext, i8* nocapture readonly, i32, i8* readonly) local_unnamed_addr #0 align 2 {
  %6 = alloca [8 x [4 x i8]], align 16
  switch i32 %3, label %13 [
    i32 128, label %9
    i32 192, label %7
    i32 256, label %8
  ]

7:                                                ; preds = %5
  br label %9

8:                                                ; preds = %5
  br label %9

9:                                                ; preds = %5, %7, %8
  %10 = phi i32 [ 14, %8 ], [ 12, %7 ], [ 10, %5 ]
  %11 = phi i32 [ 32, %8 ], [ 24, %7 ], [ 16, %5 ]
  %12 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 1
  store i32 %10, i32* %12, align 4
  br label %13

13:                                               ; preds = %9, %5
  %14 = phi i32 [ 0, %5 ], [ %11, %9 ]
  %15 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %6, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #3
  %16 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %6, i64 0, i64 0
  %17 = icmp eq i32 %14, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  br i1 %17, label %31, label %18

18:                                               ; preds = %13
  %19 = zext i32 %14 to i64
  %20 = and i64 %19, 1
  %21 = sub nsw i64 %19, %20
  br label %81

22:                                               ; preds = %81
  %23 = icmp eq i64 %20, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds i8, i8* %2, i64 %97
  %26 = load i8, i8* %25, align 1
  %27 = lshr i64 %97, 2
  %28 = and i64 %27, 1073741823
  %29 = and i64 %97, 3
  %30 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %6, i64 0, i64 %28, i64 %29
  store i8 %26, i8* %30, align 1
  br label %31

31:                                               ; preds = %24, %22, %13
  %32 = icmp eq i8* %4, null
  br i1 %32, label %100, label %33

33:                                               ; preds = %31
  %34 = load i8, i8* %4, align 1
  %35 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 0
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %4, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 1
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %4, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 2
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %4, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 3
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %4, i64 4
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 4
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %4, i64 5
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 5
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %4, i64 6
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 6
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %4, i64 7
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 7
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %4, i64 8
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 8
  store i8 %58, i8* %59, align 1
  %60 = getelementptr inbounds i8, i8* %4, i64 9
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 9
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %4, i64 10
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 10
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %4, i64 11
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 11
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %4, i64 12
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 12
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds i8, i8* %4, i64 13
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 13
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %4, i64 14
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 14
  store i8 %76, i8* %77, align 1
  %78 = getelementptr inbounds i8, i8* %4, i64 15
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 15
  store i8 %79, i8* %80, align 1
  br label %102

81:                                               ; preds = %81, %18
  %82 = phi i64 [ 0, %18 ], [ %97, %81 ]
  %83 = phi i64 [ %21, %18 ], [ %98, %81 ]
  %84 = getelementptr inbounds i8, i8* %2, i64 %82
  %85 = load i8, i8* %84, align 1
  %86 = lshr i64 %82, 2
  %87 = and i64 %86, 1073741823
  %88 = and i64 %82, 2
  %89 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %6, i64 0, i64 %87, i64 %88
  store i8 %85, i8* %89, align 2
  %90 = or i64 %82, 1
  %91 = getelementptr inbounds i8, i8* %2, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = lshr i64 %82, 2
  %94 = and i64 %93, 1073741823
  %95 = and i64 %90, 3
  %96 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %6, i64 0, i64 %94, i64 %95
  store i8 %92, i8* %96, align 1
  %97 = add nuw nsw i64 %82, 2
  %98 = add i64 %83, -2
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %22, label %81

100:                                              ; preds = %31
  %101 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %101, i8 0, i64 16, i1 false)
  br label %102

102:                                              ; preds = %33, %100
  call void @_ZN8Rijndael8keySchedEPA4_h(%class.Rijndael* %0, [4 x i8]* nonnull %16)
  br i1 %1, label %104, label %103

103:                                              ; preds = %102
  tail call void @_ZN8Rijndael11keyEncToDecEv(%class.Rijndael* %0)
  br label %104

104:                                              ; preds = %103, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Rijndael8keySchedEPA4_h(%class.Rijndael* nocapture, [4 x i8]* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca [8 x [4 x i8]], align 16
  %4 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, -6
  %7 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #3
  %8 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 0, i64 1
  %9 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 0, i64 2
  %10 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 0, i64 3
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %7, i8* align 1 %11, i64 32, i1 false)
  %12 = icmp sgt i32 %6, 0
  %13 = xor i1 %12, true
  %14 = icmp slt i32 %5, 0
  %15 = or i1 %14, %13
  br i1 %15, label %130, label %16

16:                                               ; preds = %2
  %17 = add i32 %5, -7
  br label %18

18:                                               ; preds = %119, %16
  %19 = phi i32 [ 0, %16 ], [ %120, %119 ]
  %20 = phi i32 [ 0, %16 ], [ %124, %119 ]
  %21 = phi i32 [ 0, %16 ], [ %125, %119 ]
  %22 = icmp slt i32 %19, %6
  %23 = icmp slt i32 %21, 4
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %119

25:                                               ; preds = %18
  %26 = zext i32 %20 to i64
  %27 = sext i32 %21 to i64
  %28 = sext i32 %19 to i64
  %29 = sub i32 %17, %19
  %30 = sub i32 3, %21
  %31 = icmp ult i32 %29, %30
  %32 = select i1 %31, i32 %29, i32 %30
  %33 = zext i32 %32 to i64
  %34 = add nuw nsw i64 %33, 1
  %35 = icmp ult i64 %34, 8
  br i1 %35, label %98, label %36

36:                                               ; preds = %25
  %37 = and i64 %34, 8589934584
  %38 = trunc i64 %37 to i32
  %39 = add i32 %21, %38
  %40 = trunc i64 %37 to i32
  %41 = add i32 %19, %40
  %42 = add nsw i64 %37, -8
  %43 = lshr exact i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %42, 0
  br i1 %46, label %80, label %47

47:                                               ; preds = %36
  %48 = sub nuw nsw i64 %44, %45
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %77, %49 ]
  %51 = phi i64 [ %48, %47 ], [ %78, %49 ]
  %52 = add nsw i64 %50, %27
  %53 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %52, i64 0
  %54 = add nsw i64 %50, %28
  %55 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %54, i64 0
  %56 = bitcast i8* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %54, i64 16
  %59 = bitcast i8* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4
  %61 = bitcast i8* %53 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %61, align 1
  %62 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %52, i64 16
  %63 = bitcast i8* %62 to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %63, align 1
  %64 = or i64 %50, 8
  %65 = add nsw i64 %64, %27
  %66 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %65, i64 0
  %67 = add nsw i64 %64, %28
  %68 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %67, i64 0
  %69 = bitcast i8* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %67, i64 16
  %72 = bitcast i8* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = bitcast i8* %66 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %74, align 1
  %75 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %65, i64 16
  %76 = bitcast i8* %75 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %76, align 1
  %77 = add i64 %50, 16
  %78 = add i64 %51, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %49, !llvm.loop !2

80:                                               ; preds = %49, %36
  %81 = phi i64 [ 0, %36 ], [ %77, %49 ]
  %82 = icmp eq i64 %45, 0
  br i1 %82, label %96, label %83

83:                                               ; preds = %80
  %84 = add nsw i64 %81, %27
  %85 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %84, i64 0
  %86 = add nsw i64 %81, %28
  %87 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %86, i64 0
  %88 = bitcast i8* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4
  %90 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %86, i64 16
  %91 = bitcast i8* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = bitcast i8* %85 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 1
  %94 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %84, i64 16
  %95 = bitcast i8* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 1
  br label %96

96:                                               ; preds = %80, %83
  %97 = icmp eq i64 %34, %37
  br i1 %97, label %119, label %98

98:                                               ; preds = %96, %25
  %99 = phi i64 [ 0, %25 ], [ %37, %96 ]
  %100 = phi i32 [ %21, %25 ], [ %39, %96 ]
  %101 = phi i32 [ %19, %25 ], [ %41, %96 ]
  br label %102

102:                                              ; preds = %98, %102
  %103 = phi i64 [ %118, %102 ], [ %99, %98 ]
  %104 = phi i32 [ %114, %102 ], [ %100, %98 ]
  %105 = phi i32 [ %113, %102 ], [ %101, %98 ]
  %106 = add nsw i64 %103, %27
  %107 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %26, i64 %106, i64 0
  %108 = add nsw i64 %103, %28
  %109 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %108, i64 0
  %110 = bitcast i8* %109 to i32*
  %111 = bitcast i8* %107 to i32*
  %112 = load i32, i32* %110, align 4
  store i32 %112, i32* %111, align 1
  %113 = add nsw i32 %105, 1
  %114 = add nsw i32 %104, 1
  %115 = icmp slt i32 %113, %6
  %116 = icmp slt i32 %114, 4
  %117 = and i1 %115, %116
  %118 = add nuw nsw i64 %103, 1
  br i1 %117, label %102, label %119, !llvm.loop !4

119:                                              ; preds = %102, %96, %18
  %120 = phi i32 [ %19, %18 ], [ %41, %96 ], [ %113, %102 ]
  %121 = phi i32 [ %21, %18 ], [ %39, %96 ], [ %114, %102 ]
  %122 = icmp eq i32 %121, 4
  %123 = zext i1 %122 to i32
  %124 = add nuw nsw i32 %20, %123
  %125 = select i1 %122, i32 0, i32 %121
  %126 = icmp sge i32 %120, %6
  %127 = load i32, i32* %4, align 4
  %128 = icmp sgt i32 %124, %127
  %129 = or i1 %126, %128
  br i1 %129, label %130, label %18

130:                                              ; preds = %119, %2
  %131 = phi i32 [ %5, %2 ], [ %127, %119 ]
  %132 = phi i32 [ 0, %2 ], [ %124, %119 ]
  %133 = phi i32 [ 0, %2 ], [ %125, %119 ]
  %134 = icmp sgt i32 %132, %131
  br i1 %134, label %413, label %135

135:                                              ; preds = %130
  %136 = add nsw i32 %5, -7
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %137, i64 1
  %139 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %137, i64 2
  %140 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %137, i64 3
  %141 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %137, i64 0
  %142 = icmp eq i32 %6, 8
  %143 = icmp sgt i32 %6, 1
  %144 = sdiv i32 %6, 2
  %145 = sext i32 %144 to i64
  %146 = add nsw i64 %145, 1
  %147 = zext i32 %6 to i64
  %148 = add nsw i32 %144, -1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %149, i64 0
  %151 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %145, i64 0
  %152 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %149, i64 1
  %153 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %145, i64 1
  %154 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %149, i64 2
  %155 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %145, i64 2
  %156 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %149, i64 3
  %157 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %145, i64 3
  %158 = icmp slt i32 %6, 14
  %159 = add i32 %5, -7
  br label %160

160:                                              ; preds = %135, %407
  %161 = phi i32 [ %131, %135 ], [ %408, %407 ]
  %162 = phi i32 [ %131, %135 ], [ %409, %407 ]
  %163 = phi i64 [ 0, %135 ], [ %190, %407 ]
  %164 = phi i32 [ %133, %135 ], [ %411, %407 ]
  %165 = phi i32 [ %132, %135 ], [ %410, %407 ]
  %166 = load i8, i8* %138, align 1
  %167 = zext i8 %166 to i64
  %168 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = load i8, i8* %7, align 16
  %171 = xor i8 %170, %169
  store i8 %171, i8* %7, align 16
  %172 = load i8, i8* %139, align 2
  %173 = zext i8 %172 to i64
  %174 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = load i8, i8* %8, align 1
  %177 = xor i8 %176, %175
  store i8 %177, i8* %8, align 1
  %178 = load i8, i8* %140, align 1
  %179 = zext i8 %178 to i64
  %180 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = load i8, i8* %9, align 2
  %183 = xor i8 %182, %181
  store i8 %183, i8* %9, align 2
  %184 = load i8, i8* %141, align 4
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = load i8, i8* %10, align 1
  %189 = xor i8 %188, %187
  store i8 %189, i8* %10, align 1
  %190 = add nuw i64 %163, 1
  %191 = getelementptr inbounds [30 x i8], [30 x i8]* @_ZL4rcon, i64 0, i64 %163
  %192 = load i8, i8* %191, align 1
  %193 = xor i8 %192, %171
  store i8 %193, i8* %7, align 16
  br i1 %142, label %215, label %194

194:                                              ; preds = %160
  br i1 %143, label %195, label %292

195:                                              ; preds = %194, %195
  %196 = phi i8 [ %212, %195 ], [ %189, %194 ]
  %197 = phi i8 [ %209, %195 ], [ %183, %194 ]
  %198 = phi i8 [ %206, %195 ], [ %177, %194 ]
  %199 = phi i8 [ %203, %195 ], [ %193, %194 ]
  %200 = phi i64 [ %213, %195 ], [ 1, %194 ]
  %201 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %200, i64 0
  %202 = load i8, i8* %201, align 4
  %203 = xor i8 %202, %199
  store i8 %203, i8* %201, align 4
  %204 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %200, i64 1
  %205 = load i8, i8* %204, align 1
  %206 = xor i8 %205, %198
  store i8 %206, i8* %204, align 1
  %207 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %200, i64 2
  %208 = load i8, i8* %207, align 2
  %209 = xor i8 %208, %197
  store i8 %209, i8* %207, align 2
  %210 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %200, i64 3
  %211 = load i8, i8* %210, align 1
  %212 = xor i8 %211, %196
  store i8 %212, i8* %210, align 1
  %213 = add nuw nsw i64 %200, 1
  %214 = icmp eq i64 %213, %147
  br i1 %214, label %292, label %195

215:                                              ; preds = %160, %215
  %216 = phi i8 [ %232, %215 ], [ %189, %160 ]
  %217 = phi i8 [ %229, %215 ], [ %183, %160 ]
  %218 = phi i8 [ %226, %215 ], [ %177, %160 ]
  %219 = phi i8 [ %223, %215 ], [ %193, %160 ]
  %220 = phi i64 [ %233, %215 ], [ 1, %160 ]
  %221 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %220, i64 0
  %222 = load i8, i8* %221, align 4
  %223 = xor i8 %222, %219
  store i8 %223, i8* %221, align 4
  %224 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %220, i64 1
  %225 = load i8, i8* %224, align 1
  %226 = xor i8 %225, %218
  store i8 %226, i8* %224, align 1
  %227 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %220, i64 2
  %228 = load i8, i8* %227, align 2
  %229 = xor i8 %228, %217
  store i8 %229, i8* %227, align 2
  %230 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %220, i64 3
  %231 = load i8, i8* %230, align 1
  %232 = xor i8 %231, %216
  store i8 %232, i8* %230, align 1
  %233 = add nuw nsw i64 %220, 1
  %234 = icmp slt i64 %233, %145
  br i1 %234, label %215, label %235

235:                                              ; preds = %215
  %236 = load i8, i8* %150, align 4
  %237 = zext i8 %236 to i64
  %238 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = load i8, i8* %151, align 4
  %241 = xor i8 %240, %239
  store i8 %241, i8* %151, align 4
  %242 = load i8, i8* %152, align 1
  %243 = zext i8 %242 to i64
  %244 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = load i8, i8* %153, align 1
  %247 = xor i8 %246, %245
  store i8 %247, i8* %153, align 1
  %248 = load i8, i8* %154, align 2
  %249 = zext i8 %248 to i64
  %250 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = load i8, i8* %155, align 2
  %253 = xor i8 %252, %251
  store i8 %253, i8* %155, align 2
  %254 = load i8, i8* %156, align 1
  %255 = zext i8 %254 to i64
  %256 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL1S, i64 0, i64 %255
  %257 = load i8, i8* %256, align 1
  %258 = load i8, i8* %157, align 1
  %259 = xor i8 %258, %257
  store i8 %259, i8* %157, align 1
  br i1 %158, label %260, label %292

260:                                              ; preds = %235, %283
  %261 = phi i8 [ %291, %283 ], [ %259, %235 ]
  %262 = phi i8 [ %289, %283 ], [ %253, %235 ]
  %263 = phi i8 [ %287, %283 ], [ %247, %235 ]
  %264 = phi i8 [ %285, %283 ], [ %241, %235 ]
  %265 = phi i64 [ %280, %283 ], [ %145, %235 ]
  %266 = phi i64 [ %279, %283 ], [ %146, %235 ]
  %267 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %266, i64 0
  %268 = load i8, i8* %267, align 4
  %269 = xor i8 %268, %264
  store i8 %269, i8* %267, align 4
  %270 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %266, i64 1
  %271 = load i8, i8* %270, align 1
  %272 = xor i8 %271, %263
  store i8 %272, i8* %270, align 1
  %273 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %266, i64 2
  %274 = load i8, i8* %273, align 2
  %275 = xor i8 %274, %262
  store i8 %275, i8* %273, align 2
  %276 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %266, i64 3
  %277 = load i8, i8* %276, align 1
  %278 = xor i8 %277, %261
  store i8 %278, i8* %276, align 1
  %279 = add i64 %266, 1
  %280 = add nsw i64 %265, 1
  %281 = trunc i64 %279 to i32
  %282 = icmp eq i32 %281, 8
  br i1 %282, label %292, label %283

283:                                              ; preds = %260
  %284 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %280, i64 0
  %285 = load i8, i8* %284, align 4
  %286 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %280, i64 1
  %287 = load i8, i8* %286, align 1
  %288 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %280, i64 2
  %289 = load i8, i8* %288, align 2
  %290 = getelementptr inbounds [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %280, i64 3
  %291 = load i8, i8* %290, align 1
  br label %260

292:                                              ; preds = %195, %260, %194, %235
  br i1 %12, label %293, label %407

293:                                              ; preds = %292
  %294 = icmp sgt i32 %165, %162
  br i1 %294, label %407, label %295

295:                                              ; preds = %293, %396
  %296 = phi i32 [ %397, %396 ], [ 0, %293 ]
  %297 = phi i32 [ %401, %396 ], [ %165, %293 ]
  %298 = phi i32 [ %402, %396 ], [ %164, %293 ]
  %299 = icmp slt i32 %296, %6
  %300 = icmp slt i32 %298, 4
  %301 = and i1 %299, %300
  br i1 %301, label %302, label %396

302:                                              ; preds = %295
  %303 = sext i32 %297 to i64
  %304 = sext i32 %298 to i64
  %305 = sext i32 %296 to i64
  %306 = sub i32 %159, %296
  %307 = sub i32 3, %298
  %308 = icmp ult i32 %306, %307
  %309 = select i1 %308, i32 %306, i32 %307
  %310 = zext i32 %309 to i64
  %311 = add nuw nsw i64 %310, 1
  %312 = icmp ult i64 %311, 8
  br i1 %312, label %375, label %313

313:                                              ; preds = %302
  %314 = and i64 %311, 8589934584
  %315 = trunc i64 %314 to i32
  %316 = add i32 %298, %315
  %317 = trunc i64 %314 to i32
  %318 = add i32 %296, %317
  %319 = add nsw i64 %314, -8
  %320 = lshr exact i64 %319, 3
  %321 = add nuw nsw i64 %320, 1
  %322 = and i64 %321, 1
  %323 = icmp eq i64 %319, 0
  br i1 %323, label %357, label %324

324:                                              ; preds = %313
  %325 = sub nuw nsw i64 %321, %322
  br label %326

326:                                              ; preds = %326, %324
  %327 = phi i64 [ 0, %324 ], [ %354, %326 ]
  %328 = phi i64 [ %325, %324 ], [ %355, %326 ]
  %329 = add nsw i64 %327, %304
  %330 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %329, i64 0
  %331 = add nsw i64 %327, %305
  %332 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %331, i64 0
  %333 = bitcast i8* %332 to <4 x i32>*
  %334 = load <4 x i32>, <4 x i32>* %333, align 4
  %335 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %331, i64 16
  %336 = bitcast i8* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = bitcast i8* %330 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %338, align 1
  %339 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %329, i64 16
  %340 = bitcast i8* %339 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %340, align 1
  %341 = or i64 %327, 8
  %342 = add nsw i64 %341, %304
  %343 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %342, i64 0
  %344 = add nsw i64 %341, %305
  %345 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %344, i64 0
  %346 = bitcast i8* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 4
  %348 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %344, i64 16
  %349 = bitcast i8* %348 to <4 x i32>*
  %350 = load <4 x i32>, <4 x i32>* %349, align 4
  %351 = bitcast i8* %343 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %351, align 1
  %352 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %342, i64 16
  %353 = bitcast i8* %352 to <4 x i32>*
  store <4 x i32> %350, <4 x i32>* %353, align 1
  %354 = add i64 %327, 16
  %355 = add i64 %328, -2
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %326, !llvm.loop !6

357:                                              ; preds = %326, %313
  %358 = phi i64 [ 0, %313 ], [ %354, %326 ]
  %359 = icmp eq i64 %322, 0
  br i1 %359, label %373, label %360

360:                                              ; preds = %357
  %361 = add nsw i64 %358, %304
  %362 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %361, i64 0
  %363 = add nsw i64 %358, %305
  %364 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %363, i64 0
  %365 = bitcast i8* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4
  %367 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %363, i64 16
  %368 = bitcast i8* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4
  %370 = bitcast i8* %362 to <4 x i32>*
  store <4 x i32> %366, <4 x i32>* %370, align 1
  %371 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %361, i64 16
  %372 = bitcast i8* %371 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %372, align 1
  br label %373

373:                                              ; preds = %357, %360
  %374 = icmp eq i64 %311, %314
  br i1 %374, label %396, label %375

375:                                              ; preds = %373, %302
  %376 = phi i64 [ 0, %302 ], [ %314, %373 ]
  %377 = phi i32 [ %298, %302 ], [ %316, %373 ]
  %378 = phi i32 [ %296, %302 ], [ %318, %373 ]
  br label %379

379:                                              ; preds = %375, %379
  %380 = phi i64 [ %395, %379 ], [ %376, %375 ]
  %381 = phi i32 [ %391, %379 ], [ %377, %375 ]
  %382 = phi i32 [ %390, %379 ], [ %378, %375 ]
  %383 = add nsw i64 %380, %304
  %384 = getelementptr %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %303, i64 %383, i64 0
  %385 = add nsw i64 %380, %305
  %386 = getelementptr [8 x [4 x i8]], [8 x [4 x i8]]* %3, i64 0, i64 %385, i64 0
  %387 = bitcast i8* %386 to i32*
  %388 = bitcast i8* %384 to i32*
  %389 = load i32, i32* %387, align 4
  store i32 %389, i32* %388, align 1
  %390 = add nsw i32 %382, 1
  %391 = add nsw i32 %381, 1
  %392 = icmp slt i32 %390, %6
  %393 = icmp slt i32 %391, 4
  %394 = and i1 %392, %393
  %395 = add nuw nsw i64 %380, 1
  br i1 %394, label %379, label %396, !llvm.loop !7

396:                                              ; preds = %379, %373, %295
  %397 = phi i32 [ %296, %295 ], [ %318, %373 ], [ %390, %379 ]
  %398 = phi i32 [ %298, %295 ], [ %316, %373 ], [ %391, %379 ]
  %399 = icmp eq i32 %398, 4
  %400 = zext i1 %399 to i32
  %401 = add nsw i32 %297, %400
  %402 = select i1 %399, i32 0, i32 %398
  %403 = icmp sge i32 %397, %6
  %404 = load i32, i32* %4, align 4
  %405 = icmp sgt i32 %401, %404
  %406 = or i1 %403, %405
  br i1 %406, label %407, label %295

407:                                              ; preds = %396, %293, %292
  %408 = phi i32 [ %161, %292 ], [ %161, %293 ], [ %404, %396 ]
  %409 = phi i32 [ %162, %292 ], [ %161, %293 ], [ %404, %396 ]
  %410 = phi i32 [ %165, %292 ], [ %165, %293 ], [ %401, %396 ]
  %411 = phi i32 [ %164, %292 ], [ %164, %293 ], [ %402, %396 ]
  %412 = icmp sgt i32 %410, %409
  br i1 %412, label %413, label %160

413:                                              ; preds = %407, %130
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Rijndael11keyEncToDecEv(%class.Rijndael* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca [4 x [4 x i8]], align 16
  %3 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  %7 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 0, i64 0
  %8 = sext i32 %4 to i64
  %9 = bitcast [4 x [4 x i8]]* %2 to <4 x i8>*
  %10 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 1, i64 0
  %11 = bitcast i8* %10 to <4 x i8>*
  %12 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 2, i64 0
  %13 = bitcast i8* %12 to <4 x i8>*
  %14 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %2, i64 0, i64 3, i64 0
  %15 = bitcast i8* %14 to <4 x i8>*
  br label %17

16:                                               ; preds = %17, %1
  ret void

17:                                               ; preds = %6, %17
  %18 = phi i64 [ 1, %6 ], [ %127, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #3
  %19 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 16, i1 false)
  %20 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 3, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 3, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 3, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 3, i64 0
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 2, i64 3
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 2, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 2, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 2, i64 0
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 1, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 1, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 1, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 1, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 0, i64 3
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 0, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %18, i64 0, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = load i8, i8* %19, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %66, i64 0
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 4
  %70 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %64, i64 0
  %71 = bitcast i8* %70 to <4 x i8>*
  %72 = load <4 x i8>, <4 x i8>* %71, align 4
  %73 = xor <4 x i8> %72, %69
  %74 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %61, i64 0
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 4
  %77 = xor <4 x i8> %73, %76
  %78 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %58, i64 0
  %79 = bitcast i8* %78 to <4 x i8>*
  %80 = load <4 x i8>, <4 x i8>* %79, align 4
  %81 = xor <4 x i8> %77, %80
  store <4 x i8> %81, <4 x i8>* %9, align 16
  %82 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %55, i64 0
  %83 = bitcast i8* %82 to <4 x i8>*
  %84 = load <4 x i8>, <4 x i8>* %83, align 4
  %85 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %52, i64 0
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 4
  %88 = xor <4 x i8> %87, %84
  %89 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %49, i64 0
  %90 = bitcast i8* %89 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 4
  %92 = xor <4 x i8> %88, %91
  %93 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %46, i64 0
  %94 = bitcast i8* %93 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 4
  %96 = xor <4 x i8> %92, %95
  store <4 x i8> %96, <4 x i8>* %11, align 4
  %97 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %43, i64 0
  %98 = bitcast i8* %97 to <4 x i8>*
  %99 = load <4 x i8>, <4 x i8>* %98, align 4
  %100 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %40, i64 0
  %101 = bitcast i8* %100 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 4
  %103 = xor <4 x i8> %102, %99
  %104 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %37, i64 0
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 4
  %107 = xor <4 x i8> %103, %106
  %108 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %34, i64 0
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 4
  %111 = xor <4 x i8> %107, %110
  store <4 x i8> %111, <4 x i8>* %13, align 8
  %112 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U1, i64 0, i64 %31, i64 0
  %113 = bitcast i8* %112 to <4 x i8>*
  %114 = load <4 x i8>, <4 x i8>* %113, align 4
  %115 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U2, i64 0, i64 %28, i64 0
  %116 = bitcast i8* %115 to <4 x i8>*
  %117 = load <4 x i8>, <4 x i8>* %116, align 4
  %118 = xor <4 x i8> %117, %114
  %119 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U3, i64 0, i64 %25, i64 0
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 4
  %122 = xor <4 x i8> %118, %121
  %123 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2U4, i64 0, i64 %22, i64 0
  %124 = bitcast i8* %123 to <4 x i8>*
  %125 = load <4 x i8>, <4 x i8>* %124, align 4
  %126 = xor <4 x i8> %122, %125
  store <4 x i8> %126, <4 x i8>* %15, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* nonnull align 16 %7, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #3
  %127 = add nuw nsw i64 %18, 1
  %128 = icmp slt i64 %127, %8
  br i1 %128, label %17, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Rijndael12blockEncryptEPKhmPh(%class.Rijndael* nocapture, i8* nocapture readonly, i64, i8*) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %446, label %6

6:                                                ; preds = %4
  %7 = lshr i64 %2, 4
  %8 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 0
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = bitcast i8* %8 to i32*
  %12 = load i32, i32* %11, align 4
  br label %26

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 0
  %15 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 0, i64 0, i64 0
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 0, i64 0, i64 4
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 0, i64 0, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 0, i64 0, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 1
  br label %45

24:                                               ; preds = %187
  %25 = bitcast i8* %8 to i32*
  br label %26

26:                                               ; preds = %10, %24
  %27 = phi i32* [ %11, %10 ], [ %25, %24 ]
  %28 = phi i32 [ %12, %10 ], [ %299, %24 ]
  %29 = phi i8* [ %8, %10 ], [ %49, %24 ]
  store i32 %28, i32* %27, align 4
  %30 = getelementptr inbounds i8, i8* %29, i64 4
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 4
  %34 = bitcast i8* %33 to i32*
  store i32 %32, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %29, i64 8
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 8
  %39 = bitcast i8* %38 to i32*
  store i32 %37, i32* %39, align 4
  %40 = getelementptr inbounds i8, i8* %29, i64 12
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2, i64 12
  %44 = bitcast i8* %43 to i32*
  store i32 %42, i32* %44, align 4
  br label %446

45:                                               ; preds = %13, %187
  %46 = phi i64 [ %7, %13 ], [ %317, %187 ]
  %47 = phi i8* [ %8, %13 ], [ %49, %187 ]
  %48 = phi i8* [ %1, %13 ], [ %316, %187 ]
  %49 = phi i8* [ %3, %13 ], [ %315, %187 ]
  %50 = load i8, i8* %14, align 4, !range !8
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %45
  %53 = bitcast i8* %47 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = bitcast i8* %48 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = xor <4 x i32> %56, %54
  br label %61

58:                                               ; preds = %45
  %59 = bitcast i8* %48 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4
  br label %61

61:                                               ; preds = %58, %52
  %62 = phi <4 x i32> [ %60, %58 ], [ %57, %52 ]
  %63 = load i32, i32* %16, align 4
  %64 = extractelement <4 x i32> %62, i32 0
  %65 = xor i32 %63, %64
  %66 = lshr i32 %65, 8
  %67 = lshr i32 %65, 16
  %68 = lshr i32 %65, 24
  %69 = zext i32 %68 to i64
  %70 = load i32, i32* %18, align 4
  %71 = extractelement <4 x i32> %62, i32 1
  %72 = xor i32 %70, %71
  %73 = lshr i32 %72, 8
  %74 = lshr i32 %72, 16
  %75 = lshr i32 %72, 24
  %76 = zext i32 %75 to i64
  %77 = load i32, i32* %20, align 4
  %78 = extractelement <4 x i32> %62, i32 2
  %79 = xor i32 %77, %78
  %80 = lshr i32 %79, 8
  %81 = lshr i32 %79, 16
  %82 = lshr i32 %79, 24
  %83 = zext i32 %82 to i64
  %84 = load i32, i32* %22, align 4
  %85 = extractelement <4 x i32> %62, i32 3
  %86 = xor i32 %84, %85
  %87 = and i32 %65, 255
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %88, i64 0
  %90 = and i32 %73, 255
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %91, i64 0
  %93 = and i32 %81, 255
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %94, i64 0
  %96 = lshr i32 %86, 24
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %97, i64 0
  %99 = bitcast i8* %89 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = bitcast i8* %92 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = xor i32 %102, %100
  %104 = bitcast i8* %95 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = xor i32 %103, %105
  %107 = bitcast i8* %98 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = xor i32 %106, %108
  %110 = bitcast i8* %49 to i32*
  store i32 %109, i32* %110, align 4
  %111 = getelementptr inbounds i8, i8* %49, i64 4
  %112 = and i32 %72, 255
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %113, i64 0
  %115 = and i32 %80, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %116, i64 0
  %118 = lshr i32 %86, 16
  %119 = and i32 %118, 255
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %120, i64 0
  %122 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %69, i64 0
  %123 = bitcast i8* %114 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = bitcast i8* %117 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = xor i32 %126, %124
  %128 = bitcast i8* %121 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = xor i32 %127, %129
  %131 = bitcast i8* %122 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = xor i32 %130, %132
  %134 = bitcast i8* %111 to i32*
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds i8, i8* %49, i64 8
  %136 = and i32 %79, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %137, i64 0
  %139 = lshr i32 %86, 8
  %140 = and i32 %139, 255
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %141, i64 0
  %143 = and i32 %67, 255
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %144, i64 0
  %146 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %76, i64 0
  %147 = bitcast i8* %138 to i32*
  %148 = load i32, i32* %147, align 4
  %149 = bitcast i8* %142 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = xor i32 %150, %148
  %152 = bitcast i8* %145 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = xor i32 %151, %153
  %155 = bitcast i8* %146 to i32*
  %156 = load i32, i32* %155, align 4
  %157 = xor i32 %154, %156
  %158 = bitcast i8* %135 to i32*
  store i32 %157, i32* %158, align 4
  %159 = getelementptr inbounds i8, i8* %49, i64 12
  %160 = and i32 %86, 255
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %161, i64 0
  %163 = and i32 %66, 255
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %164, i64 0
  %166 = and i32 %74, 255
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %167, i64 0
  %169 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %83, i64 0
  %170 = bitcast i8* %162 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = bitcast i8* %165 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = xor i32 %173, %171
  %175 = bitcast i8* %168 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = xor i32 %174, %176
  %178 = bitcast i8* %169 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = xor i32 %177, %179
  %181 = bitcast i8* %159 to i32*
  store i32 %180, i32* %181, align 4
  %182 = load i32, i32* %23, align 4
  %183 = add nsw i32 %182, -1
  %184 = icmp sgt i32 %183, 1
  br i1 %184, label %319, label %185

185:                                              ; preds = %61
  %186 = sext i32 %183 to i64
  br label %187

187:                                              ; preds = %319, %185
  %188 = phi i64 [ %186, %185 ], [ %444, %319 ]
  %189 = phi i32 [ %180, %185 ], [ %440, %319 ]
  %190 = phi i32 [ %157, %185 ], [ %419, %319 ]
  %191 = phi i32 [ %133, %185 ], [ %397, %319 ]
  %192 = phi i32 [ %109, %185 ], [ %375, %319 ]
  %193 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %188, i64 0, i64 0
  %194 = bitcast i8* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = xor i32 %195, %192
  %197 = lshr i32 %196, 8
  %198 = lshr i32 %196, 16
  %199 = lshr i32 %196, 24
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %188, i64 0, i64 4
  %202 = bitcast i8* %201 to i32*
  %203 = load i32, i32* %202, align 4
  %204 = xor i32 %203, %191
  %205 = lshr i32 %204, 8
  %206 = lshr i32 %204, 16
  %207 = lshr i32 %204, 24
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %188, i64 0, i64 8
  %210 = bitcast i8* %209 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = xor i32 %211, %190
  %213 = lshr i32 %212, 8
  %214 = lshr i32 %212, 16
  %215 = lshr i32 %212, 24
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %188, i64 0, i64 12
  %218 = bitcast i8* %217 to i32*
  %219 = load i32, i32* %218, align 4
  %220 = xor i32 %219, %189
  %221 = and i32 %196, 255
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %222, i64 1
  %224 = load i8, i8* %223, align 1
  store i8 %224, i8* %49, align 1
  %225 = and i32 %205, 255
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %226, i64 1
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %228, i8* %229, align 1
  %230 = and i32 %214, 255
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %231, i64 1
  %233 = load i8, i8* %232, align 1
  %234 = getelementptr inbounds i8, i8* %49, i64 2
  store i8 %233, i8* %234, align 1
  %235 = lshr i32 %220, 24
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %236, i64 1
  %238 = load i8, i8* %237, align 1
  %239 = getelementptr inbounds i8, i8* %49, i64 3
  store i8 %238, i8* %239, align 1
  %240 = and i32 %204, 255
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %241, i64 1
  %243 = load i8, i8* %242, align 1
  store i8 %243, i8* %111, align 1
  %244 = and i32 %213, 255
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %245, i64 1
  %247 = load i8, i8* %246, align 1
  %248 = getelementptr inbounds i8, i8* %49, i64 5
  store i8 %247, i8* %248, align 1
  %249 = lshr i32 %220, 16
  %250 = and i32 %249, 255
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %251, i64 1
  %253 = load i8, i8* %252, align 1
  %254 = getelementptr inbounds i8, i8* %49, i64 6
  store i8 %253, i8* %254, align 1
  %255 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %200, i64 1
  %256 = load i8, i8* %255, align 1
  %257 = getelementptr inbounds i8, i8* %49, i64 7
  store i8 %256, i8* %257, align 1
  %258 = and i32 %212, 255
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %259, i64 1
  %261 = load i8, i8* %260, align 1
  store i8 %261, i8* %135, align 1
  %262 = lshr i32 %220, 8
  %263 = and i32 %262, 255
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %264, i64 1
  %266 = load i8, i8* %265, align 1
  %267 = getelementptr inbounds i8, i8* %49, i64 9
  store i8 %266, i8* %267, align 1
  %268 = and i32 %198, 255
  %269 = zext i32 %268 to i64
  %270 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %269, i64 1
  %271 = load i8, i8* %270, align 1
  %272 = getelementptr inbounds i8, i8* %49, i64 10
  store i8 %271, i8* %272, align 1
  %273 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %208, i64 1
  %274 = load i8, i8* %273, align 1
  %275 = getelementptr inbounds i8, i8* %49, i64 11
  store i8 %274, i8* %275, align 1
  %276 = and i32 %220, 255
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %277, i64 1
  %279 = load i8, i8* %278, align 1
  store i8 %279, i8* %159, align 1
  %280 = and i32 %197, 255
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %281, i64 1
  %283 = load i8, i8* %282, align 1
  %284 = getelementptr inbounds i8, i8* %49, i64 13
  store i8 %283, i8* %284, align 1
  %285 = and i32 %206, 255
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %286, i64 1
  %288 = load i8, i8* %287, align 1
  %289 = getelementptr inbounds i8, i8* %49, i64 14
  store i8 %288, i8* %289, align 1
  %290 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %216, i64 1
  %291 = load i8, i8* %290, align 1
  %292 = getelementptr inbounds i8, i8* %49, i64 15
  store i8 %291, i8* %292, align 1
  %293 = load i32, i32* %23, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %294, i64 0, i64 0
  %296 = load i32, i32* %110, align 4
  %297 = bitcast i8* %295 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = xor i32 %298, %296
  store i32 %299, i32* %110, align 4
  %300 = load i32, i32* %134, align 4
  %301 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %294, i64 0, i64 4
  %302 = bitcast i8* %301 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = xor i32 %303, %300
  store i32 %304, i32* %134, align 4
  %305 = load i32, i32* %158, align 4
  %306 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %294, i64 0, i64 8
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = xor i32 %308, %305
  store i32 %309, i32* %158, align 4
  %310 = load i32, i32* %181, align 4
  %311 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %294, i64 0, i64 12
  %312 = bitcast i8* %311 to i32*
  %313 = load i32, i32* %312, align 4
  %314 = xor i32 %313, %310
  store i32 %314, i32* %181, align 4
  %315 = getelementptr inbounds i8, i8* %49, i64 16
  %316 = getelementptr inbounds i8, i8* %48, i64 16
  %317 = add nsw i64 %46, -1
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %24, label %45

319:                                              ; preds = %61, %319
  %320 = phi i32 [ %440, %319 ], [ %180, %61 ]
  %321 = phi i32 [ %419, %319 ], [ %157, %61 ]
  %322 = phi i32 [ %397, %319 ], [ %133, %61 ]
  %323 = phi i32 [ %375, %319 ], [ %109, %61 ]
  %324 = phi i64 [ %441, %319 ], [ 1, %61 ]
  %325 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %324, i64 0, i64 0
  %326 = bitcast i8* %325 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = xor i32 %327, %323
  %329 = lshr i32 %328, 8
  %330 = lshr i32 %328, 16
  %331 = lshr i32 %328, 24
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %324, i64 0, i64 4
  %334 = bitcast i8* %333 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = xor i32 %335, %322
  %337 = lshr i32 %336, 8
  %338 = lshr i32 %336, 16
  %339 = lshr i32 %336, 24
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %324, i64 0, i64 8
  %342 = bitcast i8* %341 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = xor i32 %343, %321
  %345 = lshr i32 %344, 8
  %346 = lshr i32 %344, 16
  %347 = lshr i32 %344, 24
  %348 = zext i32 %347 to i64
  %349 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %324, i64 0, i64 12
  %350 = bitcast i8* %349 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = xor i32 %351, %320
  %353 = and i32 %328, 255
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %354, i64 0
  %356 = and i32 %337, 255
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %357, i64 0
  %359 = and i32 %346, 255
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %360, i64 0
  %362 = lshr i32 %352, 24
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %363, i64 0
  %365 = bitcast i8* %355 to i32*
  %366 = load i32, i32* %365, align 4
  %367 = bitcast i8* %358 to i32*
  %368 = load i32, i32* %367, align 4
  %369 = xor i32 %368, %366
  %370 = bitcast i8* %361 to i32*
  %371 = load i32, i32* %370, align 4
  %372 = xor i32 %369, %371
  %373 = bitcast i8* %364 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = xor i32 %372, %374
  store i32 %375, i32* %110, align 4
  %376 = and i32 %336, 255
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %377, i64 0
  %379 = and i32 %345, 255
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %380, i64 0
  %382 = lshr i32 %352, 16
  %383 = and i32 %382, 255
  %384 = zext i32 %383 to i64
  %385 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %384, i64 0
  %386 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %332, i64 0
  %387 = bitcast i8* %378 to i32*
  %388 = load i32, i32* %387, align 4
  %389 = bitcast i8* %381 to i32*
  %390 = load i32, i32* %389, align 4
  %391 = xor i32 %390, %388
  %392 = bitcast i8* %385 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = xor i32 %391, %393
  %395 = bitcast i8* %386 to i32*
  %396 = load i32, i32* %395, align 4
  %397 = xor i32 %394, %396
  store i32 %397, i32* %134, align 4
  %398 = and i32 %344, 255
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %399, i64 0
  %401 = lshr i32 %352, 8
  %402 = and i32 %401, 255
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %403, i64 0
  %405 = and i32 %330, 255
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %406, i64 0
  %408 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %340, i64 0
  %409 = bitcast i8* %400 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = bitcast i8* %404 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = xor i32 %412, %410
  %414 = bitcast i8* %407 to i32*
  %415 = load i32, i32* %414, align 4
  %416 = xor i32 %413, %415
  %417 = bitcast i8* %408 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = xor i32 %416, %418
  store i32 %419, i32* %158, align 4
  %420 = and i32 %352, 255
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T1, i64 0, i64 %421, i64 0
  %423 = and i32 %329, 255
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T2, i64 0, i64 %424, i64 0
  %426 = and i32 %338, 255
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T3, i64 0, i64 %427, i64 0
  %429 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T4, i64 0, i64 %348, i64 0
  %430 = bitcast i8* %422 to i32*
  %431 = load i32, i32* %430, align 4
  %432 = bitcast i8* %425 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = xor i32 %433, %431
  %435 = bitcast i8* %428 to i32*
  %436 = load i32, i32* %435, align 4
  %437 = xor i32 %434, %436
  %438 = bitcast i8* %429 to i32*
  %439 = load i32, i32* %438, align 4
  %440 = xor i32 %437, %439
  store i32 %440, i32* %181, align 4
  %441 = add nuw nsw i64 %324, 1
  %442 = load i32, i32* %23, align 4
  %443 = add nsw i32 %442, -1
  %444 = sext i32 %443 to i64
  %445 = icmp slt i64 %441, %444
  br i1 %445, label %319, label %187

446:                                              ; preds = %4, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Rijndael12blockDecryptEPKhmPh(%class.Rijndael* nocapture, i8* nocapture readonly, i64, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %407, label %6

6:                                                ; preds = %4
  %7 = lshr i64 %2, 4
  %8 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 2
  %9 = bitcast [16 x i8]* %8 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 4
  %11 = icmp eq i64 %7, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 1
  %14 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 1, i64 0, i64 0
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 1, i64 0, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 1, i64 0, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 1, i64 0, i64 12
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 0, i64 0, i64 0
  %23 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 0
  %24 = bitcast i8* %22 to <4 x i32>*
  br label %28

25:                                               ; preds = %161, %6
  %26 = phi <4 x i32> [ %10, %6 ], [ %39, %161 ]
  %27 = bitcast [16 x i8]* %8 to <4 x i32>*
  store <4 x i32> %26, <4 x i32>* %27, align 4
  br label %407

28:                                               ; preds = %12, %161
  %29 = phi i64 [ %7, %12 ], [ %281, %161 ]
  %30 = phi i8* [ %1, %12 ], [ %279, %161 ]
  %31 = phi i8* [ %3, %12 ], [ %280, %161 ]
  %32 = phi <4 x i32> [ %10, %12 ], [ %39, %161 ]
  %33 = load i32, i32* %13, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %34, i64 0, i64 0
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = bitcast i8* %30 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = extractelement <4 x i32> %39, i32 0
  %41 = xor i32 %37, %40
  %42 = lshr i32 %41, 8
  %43 = lshr i32 %41, 16
  %44 = lshr i32 %41, 24
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %34, i64 0, i64 4
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = extractelement <4 x i32> %39, i32 1
  %50 = xor i32 %48, %49
  %51 = lshr i32 %50, 8
  %52 = lshr i32 %50, 16
  %53 = lshr i32 %50, 24
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %34, i64 0, i64 8
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = extractelement <4 x i32> %39, i32 2
  %59 = xor i32 %57, %58
  %60 = lshr i32 %59, 8
  %61 = lshr i32 %59, 16
  %62 = lshr i32 %59, 24
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %34, i64 0, i64 12
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = extractelement <4 x i32> %39, i32 3
  %68 = xor i32 %66, %67
  %69 = and i32 %41, 255
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %70, i64 0
  %72 = lshr i32 %68, 8
  %73 = and i32 %72, 255
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %74, i64 0
  %76 = and i32 %61, 255
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %77, i64 0
  %79 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %54, i64 0
  %80 = bitcast i8* %71 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = bitcast i8* %75 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = xor i32 %83, %81
  %85 = bitcast i8* %78 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = xor i32 %84, %86
  %88 = bitcast i8* %79 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = xor i32 %87, %89
  %91 = and i32 %50, 255
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %92, i64 0
  %94 = and i32 %42, 255
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %95, i64 0
  %97 = lshr i32 %68, 16
  %98 = and i32 %97, 255
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %99, i64 0
  %101 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %63, i64 0
  %102 = bitcast i8* %93 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = bitcast i8* %96 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = xor i32 %105, %103
  %107 = bitcast i8* %100 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = xor i32 %106, %108
  %110 = bitcast i8* %101 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = xor i32 %109, %111
  %113 = and i32 %59, 255
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %114, i64 0
  %116 = and i32 %51, 255
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %117, i64 0
  %119 = and i32 %43, 255
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %120, i64 0
  %122 = lshr i32 %68, 24
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %123, i64 0
  %125 = bitcast i8* %115 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = bitcast i8* %118 to i32*
  %128 = load i32, i32* %127, align 4
  %129 = xor i32 %128, %126
  %130 = bitcast i8* %121 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = xor i32 %129, %131
  %133 = bitcast i8* %124 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = xor i32 %132, %134
  %136 = and i32 %68, 255
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %137, i64 0
  %139 = and i32 %60, 255
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %140, i64 0
  %142 = and i32 %52, 255
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %143, i64 0
  %145 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %45, i64 0
  %146 = bitcast i8* %138 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = bitcast i8* %141 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = xor i32 %149, %147
  %151 = bitcast i8* %144 to i32*
  %152 = load i32, i32* %151, align 4
  %153 = xor i32 %150, %152
  %154 = bitcast i8* %145 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = xor i32 %153, %155
  %157 = add i32 %33, -1
  %158 = icmp sgt i32 %157, 1
  br i1 %158, label %159, label %161

159:                                              ; preds = %28
  %160 = sext i32 %157 to i64
  br label %283

161:                                              ; preds = %283, %28
  %162 = phi i32 [ %90, %28 ], [ %338, %283 ]
  %163 = phi i32 [ %112, %28 ], [ %360, %283 ]
  %164 = phi i32 [ %135, %28 ], [ %383, %283 ]
  %165 = phi i32 [ %156, %28 ], [ %404, %283 ]
  %166 = load i32, i32* %15, align 4
  %167 = xor i32 %166, %162
  %168 = lshr i32 %167, 8
  %169 = lshr i32 %167, 16
  %170 = lshr i32 %167, 24
  %171 = zext i32 %170 to i64
  %172 = load i32, i32* %17, align 4
  %173 = xor i32 %172, %163
  %174 = lshr i32 %173, 8
  %175 = lshr i32 %173, 16
  %176 = lshr i32 %173, 24
  %177 = zext i32 %176 to i64
  %178 = load i32, i32* %19, align 4
  %179 = xor i32 %178, %164
  %180 = lshr i32 %179, 8
  %181 = lshr i32 %179, 16
  %182 = lshr i32 %179, 24
  %183 = zext i32 %182 to i64
  %184 = load i32, i32* %21, align 4
  %185 = xor i32 %184, %165
  %186 = and i32 %167, 255
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = lshr i32 %185, 8
  %191 = and i32 %190, 255
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = and i32 %181, 255
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %177
  %200 = load i8, i8* %199, align 1
  %201 = and i32 %173, 255
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = and i32 %168, 255
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %206
  %208 = load i8, i8* %207, align 1
  %209 = lshr i32 %185, 16
  %210 = and i32 %209, 255
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %183
  %215 = load i8, i8* %214, align 1
  %216 = and i32 %179, 255
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = and i32 %174, 255
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = and i32 %169, 255
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = lshr i32 %185, 24
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = and i32 %185, 255
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = and i32 %180, 255
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = and i32 %175, 255
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZL2S5, i64 0, i64 %171
  %245 = load i8, i8* %244, align 1
  %246 = insertelement <4 x i8> undef, i8 %200, i32 0
  %247 = insertelement <4 x i8> %246, i8 %215, i32 1
  %248 = insertelement <4 x i8> %247, i8 %231, i32 2
  %249 = insertelement <4 x i8> %248, i8 %245, i32 3
  %250 = zext <4 x i8> %249 to <4 x i32>
  %251 = shl nuw <4 x i32> %250, <i32 24, i32 24, i32 24, i32 24>
  %252 = insertelement <4 x i8> undef, i8 %198, i32 0
  %253 = insertelement <4 x i8> %252, i8 %213, i32 1
  %254 = insertelement <4 x i8> %253, i8 %227, i32 2
  %255 = insertelement <4 x i8> %254, i8 %243, i32 3
  %256 = zext <4 x i8> %255 to <4 x i32>
  %257 = shl nuw nsw <4 x i32> %256, <i32 16, i32 16, i32 16, i32 16>
  %258 = insertelement <4 x i8> undef, i8 %194, i32 0
  %259 = insertelement <4 x i8> %258, i8 %208, i32 1
  %260 = insertelement <4 x i8> %259, i8 %223, i32 2
  %261 = insertelement <4 x i8> %260, i8 %239, i32 3
  %262 = zext <4 x i8> %261 to <4 x i32>
  %263 = shl nuw nsw <4 x i32> %262, <i32 8, i32 8, i32 8, i32 8>
  %264 = insertelement <4 x i8> undef, i8 %189, i32 0
  %265 = insertelement <4 x i8> %264, i8 %204, i32 1
  %266 = insertelement <4 x i8> %265, i8 %219, i32 2
  %267 = insertelement <4 x i8> %266, i8 %235, i32 3
  %268 = zext <4 x i8> %267 to <4 x i32>
  %269 = or <4 x i32> %263, %268
  %270 = or <4 x i32> %269, %257
  %271 = or <4 x i32> %270, %251
  %272 = load <4 x i32>, <4 x i32>* %24, align 4
  %273 = xor <4 x i32> %272, %271
  %274 = load i8, i8* %23, align 4, !range !8
  %275 = icmp eq i8 %274, 0
  %276 = xor <4 x i32> %273, %32
  %277 = select i1 %275, <4 x i32> %273, <4 x i32> %276
  %278 = bitcast i8* %31 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %278, align 4
  %279 = getelementptr inbounds i8, i8* %30, i64 16
  %280 = getelementptr inbounds i8, i8* %31, i64 16
  %281 = add nsw i64 %29, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %25, label %28

283:                                              ; preds = %159, %283
  %284 = phi i64 [ %160, %159 ], [ %405, %283 ]
  %285 = phi i32 [ %156, %159 ], [ %404, %283 ]
  %286 = phi i32 [ %135, %159 ], [ %383, %283 ]
  %287 = phi i32 [ %112, %159 ], [ %360, %283 ]
  %288 = phi i32 [ %90, %159 ], [ %338, %283 ]
  %289 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %284, i64 0, i64 0
  %290 = bitcast i8* %289 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = xor i32 %291, %288
  %293 = lshr i32 %292, 8
  %294 = lshr i32 %292, 16
  %295 = lshr i32 %292, 24
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %284, i64 0, i64 4
  %298 = bitcast i8* %297 to i32*
  %299 = load i32, i32* %298, align 4
  %300 = xor i32 %299, %287
  %301 = lshr i32 %300, 8
  %302 = lshr i32 %300, 16
  %303 = lshr i32 %300, 24
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %284, i64 0, i64 8
  %306 = bitcast i8* %305 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = xor i32 %307, %286
  %309 = lshr i32 %308, 8
  %310 = lshr i32 %308, 16
  %311 = lshr i32 %308, 24
  %312 = zext i32 %311 to i64
  %313 = getelementptr inbounds %class.Rijndael, %class.Rijndael* %0, i64 0, i32 3, i64 %284, i64 0, i64 12
  %314 = bitcast i8* %313 to i32*
  %315 = load i32, i32* %314, align 4
  %316 = xor i32 %315, %285
  %317 = and i32 %292, 255
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %318, i64 0
  %320 = lshr i32 %316, 8
  %321 = and i32 %320, 255
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %322, i64 0
  %324 = and i32 %310, 255
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %325, i64 0
  %327 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %304, i64 0
  %328 = bitcast i8* %319 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = bitcast i8* %323 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = xor i32 %331, %329
  %333 = bitcast i8* %326 to i32*
  %334 = load i32, i32* %333, align 4
  %335 = xor i32 %332, %334
  %336 = bitcast i8* %327 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = xor i32 %335, %337
  %339 = and i32 %300, 255
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %340, i64 0
  %342 = and i32 %293, 255
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %343, i64 0
  %345 = lshr i32 %316, 16
  %346 = and i32 %345, 255
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %347, i64 0
  %349 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %312, i64 0
  %350 = bitcast i8* %341 to i32*
  %351 = load i32, i32* %350, align 4
  %352 = bitcast i8* %344 to i32*
  %353 = load i32, i32* %352, align 4
  %354 = xor i32 %353, %351
  %355 = bitcast i8* %348 to i32*
  %356 = load i32, i32* %355, align 4
  %357 = xor i32 %354, %356
  %358 = bitcast i8* %349 to i32*
  %359 = load i32, i32* %358, align 4
  %360 = xor i32 %357, %359
  %361 = and i32 %308, 255
  %362 = zext i32 %361 to i64
  %363 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %362, i64 0
  %364 = and i32 %301, 255
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %365, i64 0
  %367 = and i32 %294, 255
  %368 = zext i32 %367 to i64
  %369 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %368, i64 0
  %370 = lshr i32 %316, 24
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %371, i64 0
  %373 = bitcast i8* %363 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = bitcast i8* %366 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = xor i32 %376, %374
  %378 = bitcast i8* %369 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = xor i32 %377, %379
  %381 = bitcast i8* %372 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = xor i32 %380, %382
  %384 = and i32 %316, 255
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T5, i64 0, i64 %385, i64 0
  %387 = and i32 %309, 255
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T6, i64 0, i64 %388, i64 0
  %390 = and i32 %302, 255
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T7, i64 0, i64 %391, i64 0
  %393 = getelementptr inbounds [256 x [4 x i8]], [256 x [4 x i8]]* @_ZL2T8, i64 0, i64 %296, i64 0
  %394 = bitcast i8* %386 to i32*
  %395 = load i32, i32* %394, align 4
  %396 = bitcast i8* %389 to i32*
  %397 = load i32, i32* %396, align 4
  %398 = xor i32 %397, %395
  %399 = bitcast i8* %392 to i32*
  %400 = load i32, i32* %399, align 4
  %401 = xor i32 %398, %400
  %402 = bitcast i8* %393 to i32*
  %403 = load i32, i32* %402, align 4
  %404 = xor i32 %401, %403
  %405 = add nsw i64 %284, -1
  %406 = icmp sgt i64 %405, 1
  br i1 %406, label %283, label %161

407:                                              ; preds = %4, %25
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = !{i8 0, i8 2}
