; ModuleID = '../../third_party/blink/renderer/platform/audio/panner.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/panner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::Panner" = type { i32 (...)** }
%"class.blink::HRTFDatabaseLoader" = type <{ %"class.WTF::RefCounted", [4 x i8], %"class.WTF::Mutex", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.8", float, [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::HRTFDatabase"* }
%"class.blink::HRTFDatabase" = type <{ %"class.WTF::Vector", float, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr.4"*, i32, i32 }
%"class.std::__1::unique_ptr.4" = type opaque
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.blink::Thread"* }
%"class.blink::Thread" = type { i32 (...)** }
%"class.blink::EqualPowerPanner" = type { %"class.blink::Panner" }
%"class.blink::HRTFPanner" = type <{ %"class.blink::Panner", %class.scoped_refptr, float, i32, i32, [4 x i8], double, i32, [4 x i8], double, float, float, %"class.blink::FFTConvolver", %"class.blink::FFTConvolver", %"class.blink::FFTConvolver", %"class.blink::FFTConvolver", %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", i32, [4 x i8] }>
%class.scoped_refptr = type { %"class.blink::HRTFDatabaseLoader"* }
%"class.blink::FFTConvolver" = type { %"class.blink::FFTFrame", i64, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioDelayDSPKernel" = type { %"class.blink::AudioDSPKernel", %"class.blink::AudioArray", float, i32, double, %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioDSPKernel" = type { i32 (...)**, %"class.blink::AudioDSPKernelProcessor"*, float, i32 }
%"class.blink::AudioDSPKernelProcessor" = type <{ %"class.blink::AudioProcessor", %"class.WTF::Vector.23", %"class.WTF::Mutex", i8, [7 x i8] }>
%"class.blink::AudioProcessor" = type { i32 (...)**, i8, i32, float, i32 }
%"class.WTF::Vector.23" = type { %"class.WTF::VectorBuffer.24" }
%"class.WTF::VectorBuffer.24" = type { %"class.WTF::VectorBufferBase.25" }
%"class.WTF::VectorBufferBase.25" = type { %"class.std::__1::unique_ptr.26"*, i32, i32 }
%"class.std::__1::unique_ptr.26" = type opaque
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Panner"* @_ZN5blink6Panner6CreateENS0_12PanningModelEfjPNS_18HRTFDatabaseLoaderE(i32, float, i32, %"class.blink::HRTFDatabaseLoader"*) local_unnamed_addr #0 align 2 {
  switch i32 %0, label %13 [
    i32 0, label %5
    i32 1, label %9
  ]

5:                                                ; preds = %4
  %6 = tail call noalias i8* @malloc(i64 8) #3
  %7 = bitcast i8* %6 to %"class.blink::EqualPowerPanner"*
  tail call void @_ZN5blink16EqualPowerPannerC1Ef(%"class.blink::EqualPowerPanner"* %7, float %1) #3
  %8 = ptrtoint i8* %6 to i64
  br label %13

9:                                                ; preds = %4
  %10 = tail call noalias i8* @malloc(i64 1128) #3
  %11 = bitcast i8* %10 to %"class.blink::HRTFPanner"*
  tail call void @_ZN5blink10HRTFPannerC1EfjPNS_18HRTFDatabaseLoaderE(%"class.blink::HRTFPanner"* %11, float %1, i32 %2, %"class.blink::HRTFDatabaseLoader"* %3) #3
  %12 = ptrtoint i8* %10 to i64
  br label %13

13:                                               ; preds = %4, %9, %5
  %14 = phi i64 [ %12, %9 ], [ %8, %5 ], [ 0, %4 ]
  %15 = inttoptr i64 %14 to %"class.blink::Panner"*
  ret %"class.blink::Panner"* %15
}

declare void @_ZN5blink16EqualPowerPannerC1Ef(%"class.blink::EqualPowerPanner"*, float) unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @_ZN5blink10HRTFPannerC1EfjPNS_18HRTFDatabaseLoaderE(%"class.blink::HRTFPanner"*, float, i32, %"class.blink::HRTFDatabaseLoader"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
