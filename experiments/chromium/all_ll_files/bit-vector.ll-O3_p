; ModuleID = '../../v8/src/utils/bit-vector.cc'
source_filename = "../../v8/src/utils/bit-vector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::BitVector" = type { i32, i32, %"union.v8::internal::BitVector::DataStorage" }
%"union.v8::internal::BitVector::DataStorage" = type { i64* }

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK2v88internal9BitVector5CountEv(%"class.v8::internal::BitVector"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %69

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %0, i64 0, i32 2, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = zext i32 %3 to i64
  %11 = add nsw i64 %10, -1
  %12 = and i64 %10, 3
  %13 = icmp ult i64 %11, 3
  br i1 %13, label %52, label %14

14:                                               ; preds = %7
  %15 = sub nsw i64 %10, %12
  br label %22

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.v8::internal::BitVector", %"class.v8::internal::BitVector"* %0, i64 0, i32 2
  %18 = bitcast %"union.v8::internal::BitVector::DataStorage"* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = tail call i64 @llvm.ctpop.i64(i64 %19) #2, !range !2
  %21 = trunc i64 %20 to i32
  br label %69

22:                                               ; preds = %22, %14
  %23 = phi i64 [ 0, %14 ], [ %49, %22 ]
  %24 = phi i32 [ 0, %14 ], [ %48, %22 ]
  %25 = phi i64 [ %15, %14 ], [ %50, %22 ]
  %26 = getelementptr inbounds i64, i64* %9, i64 %23
  %27 = load i64, i64* %26, align 8
  %28 = tail call i64 @llvm.ctpop.i64(i64 %27) #2, !range !2
  %29 = trunc i64 %28 to i32
  %30 = add i32 %24, %29
  %31 = or i64 %23, 1
  %32 = getelementptr inbounds i64, i64* %9, i64 %31
  %33 = load i64, i64* %32, align 8
  %34 = tail call i64 @llvm.ctpop.i64(i64 %33) #2, !range !2
  %35 = trunc i64 %34 to i32
  %36 = add i32 %30, %35
  %37 = or i64 %23, 2
  %38 = getelementptr inbounds i64, i64* %9, i64 %37
  %39 = load i64, i64* %38, align 8
  %40 = tail call i64 @llvm.ctpop.i64(i64 %39) #2, !range !2
  %41 = trunc i64 %40 to i32
  %42 = add i32 %36, %41
  %43 = or i64 %23, 3
  %44 = getelementptr inbounds i64, i64* %9, i64 %43
  %45 = load i64, i64* %44, align 8
  %46 = tail call i64 @llvm.ctpop.i64(i64 %45) #2, !range !2
  %47 = trunc i64 %46 to i32
  %48 = add i32 %42, %47
  %49 = add nuw nsw i64 %23, 4
  %50 = add i64 %25, -4
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %22

52:                                               ; preds = %22, %7
  %53 = phi i32 [ undef, %7 ], [ %48, %22 ]
  %54 = phi i64 [ 0, %7 ], [ %49, %22 ]
  %55 = phi i32 [ 0, %7 ], [ %48, %22 ]
  %56 = icmp eq i64 %12, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %52, %57
  %58 = phi i64 [ %66, %57 ], [ %54, %52 ]
  %59 = phi i32 [ %65, %57 ], [ %55, %52 ]
  %60 = phi i64 [ %67, %57 ], [ %12, %52 ]
  %61 = getelementptr inbounds i64, i64* %9, i64 %58
  %62 = load i64, i64* %61, align 8
  %63 = tail call i64 @llvm.ctpop.i64(i64 %62) #2, !range !2
  %64 = trunc i64 %63 to i32
  %65 = add i32 %59, %64
  %66 = add nuw nsw i64 %58, 1
  %67 = add i64 %60, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %57, !llvm.loop !3

69:                                               ; preds = %52, %57, %5, %16
  %70 = phi i32 [ %21, %16 ], [ 0, %5 ], [ %53, %52 ], [ %65, %57 ]
  ret i32 %70
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
