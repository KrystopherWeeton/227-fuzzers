; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/boolhuff.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/boolhuff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }

@vp8_prob_cost = hidden local_unnamed_addr constant [256 x i32] [i32 2047, i32 2047, i32 1791, i32 1641, i32 1535, i32 1452, i32 1385, i32 1328, i32 1279, i32 1235, i32 1196, i32 1161, i32 1129, i32 1099, i32 1072, i32 1046, i32 1023, i32 1000, i32 979, i32 959, i32 940, i32 922, i32 905, i32 889, i32 873, i32 858, i32 843, i32 829, i32 816, i32 803, i32 790, i32 778, i32 767, i32 755, i32 744, i32 733, i32 723, i32 713, i32 703, i32 693, i32 684, i32 675, i32 666, i32 657, i32 649, i32 641, i32 633, i32 625, i32 617, i32 609, i32 602, i32 594, i32 587, i32 580, i32 573, i32 567, i32 560, i32 553, i32 547, i32 541, i32 534, i32 528, i32 522, i32 516, i32 511, i32 505, i32 499, i32 494, i32 488, i32 483, i32 477, i32 472, i32 467, i32 462, i32 457, i32 452, i32 447, i32 442, i32 437, i32 433, i32 428, i32 424, i32 419, i32 415, i32 410, i32 406, i32 401, i32 397, i32 393, i32 389, i32 385, i32 381, i32 377, i32 373, i32 369, i32 365, i32 361, i32 357, i32 353, i32 349, i32 346, i32 342, i32 338, i32 335, i32 331, i32 328, i32 324, i32 321, i32 317, i32 314, i32 311, i32 307, i32 304, i32 301, i32 297, i32 294, i32 291, i32 288, i32 285, i32 281, i32 278, i32 275, i32 272, i32 269, i32 266, i32 263, i32 260, i32 257, i32 255, i32 252, i32 249, i32 246, i32 243, i32 240, i32 238, i32 235, i32 232, i32 229, i32 227, i32 224, i32 221, i32 219, i32 216, i32 214, i32 211, i32 208, i32 206, i32 203, i32 201, i32 198, i32 196, i32 194, i32 191, i32 189, i32 186, i32 184, i32 181, i32 179, i32 177, i32 174, i32 172, i32 170, i32 168, i32 165, i32 163, i32 161, i32 159, i32 156, i32 154, i32 152, i32 150, i32 148, i32 145, i32 143, i32 141, i32 139, i32 137, i32 135, i32 133, i32 131, i32 129, i32 127, i32 125, i32 123, i32 121, i32 119, i32 117, i32 115, i32 113, i32 111, i32 109, i32 107, i32 105, i32 103, i32 101, i32 99, i32 97, i32 95, i32 93, i32 92, i32 90, i32 88, i32 86, i32 84, i32 82, i32 81, i32 79, i32 77, i32 75, i32 73, i32 72, i32 70, i32 68, i32 66, i32 65, i32 63, i32 61, i32 60, i32 58, i32 56, i32 55, i32 53, i32 51, i32 50, i32 48, i32 46, i32 45, i32 43, i32 41, i32 40, i32 38, i32 37, i32 35, i32 33, i32 32, i32 30, i32 29, i32 27, i32 25, i32 24, i32 22, i32 21, i32 19, i32 18, i32 16, i32 15, i32 13, i32 12, i32 10, i32 9, i32 7, i32 6, i32 4, i32 3, i32 1, i32 1], align 16
@vp8_norm = external local_unnamed_addr constant [256 x i8], align 16
@.str = private unnamed_addr constant [39 x i8] c"Truncated packet or corrupt partition \00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp8_start_encode(%struct.BOOL_CODER* nocapture, i8*, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 4
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 5
  store i8* %2, i8** %5, align 8
  %6 = bitcast %struct.BOOL_CODER* %0 to <4 x i32>*
  store <4 x i32> <i32 0, i32 255, i32 -24, i32 0>, <4 x i32>* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_stop_encode(%struct.BOOL_CODER* nocapture) local_unnamed_addr #1 {
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vp8_encode_bool(%struct.BOOL_CODER* nocapture, i32) unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 %6, 7
  %10 = add i32 %9, -128
  %11 = lshr i32 %10, 8
  %12 = add nuw nsw i32 %11, 1
  %13 = icmp eq i32 %1, 0
  %14 = sub i32 %6, %12
  %15 = select i1 %13, i32 %12, i32 %14
  %16 = select i1 %13, i32 0, i32 %12
  %17 = add i32 %16, %8
  %18 = zext i32 %15 to i64
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* @vp8_norm, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = shl i32 %15, %21
  %23 = add nsw i32 %4, %21
  %24 = icmp sgt i32 %23, -1
  br i1 %24, label %25, label %87

25:                                               ; preds = %2
  %26 = sub i32 0, %4
  %27 = xor i32 %4, -1
  %28 = shl i32 %17, %27
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %58

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %32, -1
  %34 = icmp sgt i32 %33, -1
  %35 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 4
  %36 = load i8*, i8** %35, align 8
  %37 = sext i32 %33 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  br i1 %34, label %39, label %54

39:                                               ; preds = %30, %46
  %40 = phi i8* [ %50, %46 ], [ %36, %30 ]
  %41 = phi i64 [ %53, %46 ], [ %37, %30 ]
  %42 = phi i8* [ %52, %46 ], [ %38, %30 ]
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -1
  %45 = getelementptr inbounds i8, i8* %40, i64 %41
  br i1 %44, label %46, label %54

46:                                               ; preds = %39
  store i8 0, i8* %45, align 1
  %47 = trunc i64 %41 to i32
  %48 = add i32 %47, -1
  %49 = icmp sgt i32 %48, -1
  %50 = load i8*, i8** %35, align 8
  %51 = sext i32 %48 to i64
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  %53 = add nsw i64 %41, -1
  br i1 %49, label %39, label %54

54:                                               ; preds = %39, %46, %30
  %55 = phi i8* [ %38, %30 ], [ %52, %46 ], [ %45, %39 ]
  %56 = load i8, i8* %55, align 1
  %57 = add i8 %56, 1
  store i8 %57, i8* %55, align 1
  br label %58

58:                                               ; preds = %54, %25
  %59 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 4
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %60, i64 %63
  %65 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 5
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %64, i64 1
  %68 = icmp ult i8* %67, %66
  br i1 %68, label %75, label %69

69:                                               ; preds = %58
  %70 = getelementptr inbounds %struct.BOOL_CODER, %struct.BOOL_CODER* %0, i64 0, i32 6
  %71 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %70, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %71, i32 7, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #3
  %72 = load i8*, i8** %59, align 8
  %73 = load i32, i32* %61, align 4
  %74 = zext i32 %73 to i64
  br label %75

75:                                               ; preds = %58, %69
  %76 = phi i64 [ %63, %58 ], [ %74, %69 ]
  %77 = phi i32 [ %62, %58 ], [ %73, %69 ]
  %78 = phi i8* [ %60, %58 ], [ %72, %69 ]
  %79 = add i32 %4, 24
  %80 = lshr i32 %17, %79
  %81 = trunc i32 %80 to i8
  %82 = add i32 %77, 1
  store i32 %82, i32* %61, align 4
  %83 = getelementptr inbounds i8, i8* %78, i64 %76
  store i8 %81, i8* %83, align 1
  %84 = shl i32 %17, %26
  %85 = and i32 %84, 16777215
  %86 = add nsw i32 %23, -8
  br label %87

87:                                               ; preds = %75, %2
  %88 = phi i32 [ %86, %75 ], [ %23, %2 ]
  %89 = phi i32 [ %85, %75 ], [ %17, %2 ]
  %90 = phi i32 [ %23, %75 ], [ %21, %2 ]
  %91 = shl i32 %89, %90
  store i32 %88, i32* %3, align 8
  store i32 %91, i32* %7, align 8
  store i32 %22, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_value(%struct.BOOL_CODER* nocapture, i32, i32) local_unnamed_addr #1 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %11

5:                                                ; preds = %3, %5
  %6 = phi i32 [ %7, %5 ], [ %2, %3 ]
  %7 = add nsw i32 %6, -1
  %8 = lshr i32 %1, %7
  %9 = and i32 %8, 1
  tail call fastcc void @vp8_encode_bool(%struct.BOOL_CODER* %0, i32 %9)
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %5, label %11

11:                                               ; preds = %5, %3
  ret void
}

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
