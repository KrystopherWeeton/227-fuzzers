; ModuleID = '../../jingle/notifier/base/weak_xmpp_client.cc'
source_filename = "../../jingle/notifier/base/weak_xmpp_client.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.notifier::WeakXmppClient" = type { %"class.jingle_xmpp::XmppClient.base", %"class.base::WeakPtrFactory" }
%"class.jingle_xmpp::XmppClient.base" = type <{ %"class.jingle_xmpp::XmppTaskParentInterface.base", [4 x i8], %"class.jingle_xmpp::XmppClientInterface", %"class.sigslot::has_slots", %"class.sigslot::signal_with_thread_policy.12", %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14", %"class.std::__1::unique_ptr.16", i8, i8 }>
%"class.jingle_xmpp::XmppTaskParentInterface.base" = type { %"class.jingle_xmpp::Task.base" }
%"class.jingle_xmpp::Task.base" = type <{ %"class.jingle_xmpp::TaskParent", i32, i8, i8, i8, i8, i8, [7 x i8], i64, i64, i32, i8, [3 x i8], i32 }>
%"class.jingle_xmpp::TaskParent" = type { i32 (...)**, %"class.jingle_xmpp::TaskParent"*, %"class.jingle_xmpp::TaskRunner"*, i8, %"class.std::__1::unique_ptr" }
%"class.jingle_xmpp::TaskRunner" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::set"* }
%"class.std::__1::set" = type opaque
%"class.jingle_xmpp::XmppClientInterface" = type { i32 (...)**, %"class.sigslot::signal_with_thread_policy" }
%"class.sigslot::signal_with_thread_policy" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::_signal_base.base" = type <{ %"class.sigslot::_signal_base_interface", %"class.std::__1::list", %"class.std::__1::__list_iterator", i8 }>
%"class.sigslot::_signal_base_interface" = type { void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*)*, void (%"class.sigslot::_signal_base_interface"*, %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"*)* }
%"class.sigslot::has_slots_interface" = type { i32 (...)**, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*)* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__list_iterator" = type { %"struct.std::__1::__list_node_base"* }
%"class.sigslot::has_slots" = type { %"class.sigslot::has_slots_interface", %"class.std::__1::set.4" }
%"class.std::__1::set.4" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.sigslot::signal_with_thread_policy.12" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.sigslot::signal_with_thread_policy.14" = type { %"class.sigslot::_signal_base.base", [7 x i8] }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.jingle_xmpp::XmppClient::Private"* }
%"class.jingle_xmpp::XmppClient::Private" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.23" }
%"struct.std::__1::atomic.23" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__cxx_atomic_impl.26" }
%"struct.std::__1::__cxx_atomic_impl.26" = type { %"struct.std::__1::__cxx_atomic_base_impl.27" }
%"struct.std::__1::__cxx_atomic_base_impl.27" = type { i8 }
%"class.jingle_xmpp::XmppClient" = type <{ %"class.jingle_xmpp::XmppTaskParentInterface.base", [4 x i8], %"class.jingle_xmpp::XmppClientInterface", %"class.sigslot::has_slots", %"class.sigslot::signal_with_thread_policy.12", %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14", %"class.std::__1::unique_ptr.16", i8, i8, [6 x i8] }>
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"class.sigslot::_opaque_connection" }
%"class.sigslot::_opaque_connection" = type { void (%"class.sigslot::_opaque_connection"*)*, %"class.sigslot::has_slots_interface"*, [16 x i8] }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.28 }
%class.scoped_refptr.28 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.jingle_xmpp::Task" = type <{ %"class.jingle_xmpp::TaskParent", i32, i8, i8, i8, i8, i8, [7 x i8], i64, i64, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.jingle_xmpp::Jid" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmppTask" = type { %"class.jingle_xmpp::XmppTaskBase", %"class.jingle_xmpp::XmppStanzaHandler", %"class.sigslot::has_slots", i8, %"class.std::__1::deque", %"class.std::__1::unique_ptr.43", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::XmppTaskBase" = type { %"class.jingle_xmpp::XmppTaskParentInterface.base", %"class.jingle_xmpp::XmppTaskParentInterface"* }
%"class.jingle_xmpp::XmppTaskParentInterface" = type { %"class.jingle_xmpp::Task.base", [4 x i8] }
%"class.jingle_xmpp::XmppStanzaHandler" = type { i32 (...)** }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.39" }
%"struct.std::__1::__split_buffer" = type { %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.jingle_xmpp::XmlElement"***, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.jingle_xmpp::XmlElement"*** }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.jingle_xmpp::XmlElement"* }

$_ZNK11jingle_xmpp10XmppClient12GetStateNameEi = comdat any

$_ZN11jingle_xmpp10XmppClient7ProcessEi = comdat any

$_ZN11jingle_xmpp10XmppClient9GetClientEv = comdat any

@_ZTVN8notifier14WeakXmppClientE = hidden unnamed_addr constant { [17 x i8*], [11 x i8*], [4 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZN8notifier14WeakXmppClientD2Ev to i8*), i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZN8notifier14WeakXmppClientD0Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClient"*, i32)* @_ZNK11jingle_xmpp10XmppClient12GetStateNameEi to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*, i32)* @_ZN11jingle_xmpp10XmppClient7ProcessEi to i8*), i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZN8notifier14WeakXmppClient4StopEv to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*)* @_ZN11jingle_xmpp10XmppClient12ProcessStartEv to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*)* @_ZN11jingle_xmpp10XmppClient15ProcessResponseEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmppClientInterface"* (%"class.jingle_xmpp::XmppClient"*)* @_ZN11jingle_xmpp10XmppClient9GetClientEv to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*)* @_ZNK11jingle_xmpp10XmppClient8GetStateEv to i8*), i8* bitcast (%"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClient"*)* @_ZNK11jingle_xmpp10XmppClient3jidEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClient"*)* @_ZN11jingle_xmpp10XmppClient6NextIdEv to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp10XmppClient10SendStanzaEPKNS_10XmlElementE to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)* @_ZN11jingle_xmpp10XmppClient15SendStanzaErrorEPKNS_10XmlElementENS_15XmppStanzaErrorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*, i32)* @_ZN11jingle_xmpp10XmppClient11AddXmppTaskEPNS_8XmppTaskENS_10XmppEngine12HandlerLevelE to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*)* @_ZN11jingle_xmpp10XmppClient14RemoveXmppTaskEPNS_8XmppTaskE to i8*)], [11 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZThn88_N8notifier14WeakXmppClientD1Ev to i8*), i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZThn88_N8notifier14WeakXmppClientD0Ev to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*)* @_ZThn88_NK11jingle_xmpp10XmppClient8GetStateEv to i8*), i8* bitcast (%"class.jingle_xmpp::Jid"* (%"class.jingle_xmpp::XmppClient"*)* @_ZThn88_NK11jingle_xmpp10XmppClient3jidEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.jingle_xmpp::XmppClient"*)* @_ZThn88_N11jingle_xmpp10XmppClient6NextIdEv to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*)* @_ZThn88_N11jingle_xmpp10XmppClient10SendStanzaEPKNS_10XmlElementE to i8*), i8* bitcast (i32 (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"*)* @_ZThn88_N11jingle_xmpp10XmppClient15SendStanzaErrorEPKNS_10XmlElementENS_15XmppStanzaErrorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*, i32)* @_ZThn88_N11jingle_xmpp10XmppClient11AddXmppTaskEPNS_8XmppTaskENS_10XmppEngine12HandlerLevelE to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*)* @_ZThn88_N11jingle_xmpp10XmppClient14RemoveXmppTaskEPNS_8XmppTaskE to i8*)], [4 x i8*] [i8* inttoptr (i64 -152 to i8*), i8* null, i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZThn152_N8notifier14WeakXmppClientD1Ev to i8*), i8* bitcast (void (%"class.notifier::WeakXmppClient"*)* @_ZThn152_N8notifier14WeakXmppClientD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"PRE_XMPP_LOGIN\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"START_XMPP_LOGIN\00", align 1

@_ZN8notifier14WeakXmppClientC1EPN11jingle_xmpp10TaskParentE = hidden unnamed_addr alias void (%"class.notifier::WeakXmppClient"*, %"class.jingle_xmpp::TaskParent"*), void (%"class.notifier::WeakXmppClient"*, %"class.jingle_xmpp::TaskParent"*)* @_ZN8notifier14WeakXmppClientC2EPN11jingle_xmpp10TaskParentE
@_ZN8notifier14WeakXmppClientD1Ev = hidden unnamed_addr alias void (%"class.notifier::WeakXmppClient"*), void (%"class.notifier::WeakXmppClient"*)* @_ZN8notifier14WeakXmppClientD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClientC2EPN11jingle_xmpp10TaskParentE(%"class.notifier::WeakXmppClient"*, %"class.jingle_xmpp::TaskParent"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.notifier::WeakXmppClient"* %0 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientC2EPNS_10TaskParentE(%"class.jingle_xmpp::XmppClient"* %3, %"class.jingle_xmpp::TaskParent"* %1) #5
  %4 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 2, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 1, i32 0
  %8 = ptrtoint %"class.notifier::WeakXmppClient"* %0 to i64
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* %7, i64 %8) #5
  ret void
}

declare void @_ZN11jingle_xmpp10XmppClientC2EPNS_10TaskParentE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::TaskParent"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClientD2Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 2, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %0)
  %5 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %5) #5
  %6 = bitcast %"class.notifier::WeakXmppClient"* %0 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %31, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::__list_node_base"** %6 to %"struct.std::__1::__list_node"**
  %8 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 4, i32 0, i32 0
  br label %9

9:                                                ; preds = %9, %5
  %10 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %7, align 8
  %11 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %10, i64 0, i32 1, i32 1
  %12 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %10, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.std::__1::__list_node_base"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %10, i64 0, i32 0, i32 0
  %17 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %16, align 8
  %18 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %17, i64 0, i32 1
  %19 = bitcast %"struct.std::__1::__list_node_base"** %18 to i64*
  store i64 %15, i64* %19, align 8
  %20 = bitcast %"struct.std::__1::__list_node"* %10 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"struct.std::__1::__list_node_base"** %13 to i64**
  %23 = load i64*, i64** %22, align 8
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %2, align 8
  %25 = add i64 %24, -1
  store i64 %25, i64* %2, align 8
  %26 = bitcast %"struct.std::__1::__list_node"* %10 to i8*
  tail call void @_ZdlPv(i8* %26) #6
  %27 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %12, i64 0, i32 2
  %28 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %27, align 8
  tail call void %28(%"class.sigslot::has_slots_interface"* %12, %"class.sigslot::_signal_base_interface"* %8) #5
  %29 = load i64, i64* %2, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %9

31:                                               ; preds = %9, %1
  %32 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %33 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 4, i32 0, i32 2, i32 0
  store %"struct.std::__1::__list_node_base"* %32, %"struct.std::__1::__list_node_base"** %33, align 8
  %34 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 5, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %63, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 5, i32 0, i32 1, i32 0, i32 0, i32 1
  %39 = bitcast %"struct.std::__1::__list_node_base"** %38 to %"struct.std::__1::__list_node"**
  %40 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  br label %41

41:                                               ; preds = %41, %37
  %42 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %39, align 8
  %43 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %42, i64 0, i32 1, i32 1
  %44 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %43, align 8
  %45 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %42, i64 0, i32 0, i32 1
  %46 = bitcast %"struct.std::__1::__list_node_base"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %42, i64 0, i32 0, i32 0
  %49 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %48, align 8
  %50 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %49, i64 0, i32 1
  %51 = bitcast %"struct.std::__1::__list_node_base"** %50 to i64*
  store i64 %47, i64* %51, align 8
  %52 = bitcast %"struct.std::__1::__list_node"* %42 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"struct.std::__1::__list_node_base"** %45 to i64**
  %55 = load i64*, i64** %54, align 8
  store i64 %53, i64* %55, align 8
  %56 = load i64, i64* %34, align 8
  %57 = add i64 %56, -1
  store i64 %57, i64* %34, align 8
  %58 = bitcast %"struct.std::__1::__list_node"* %42 to i8*
  tail call void @_ZdlPv(i8* %58) #6
  %59 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %44, i64 0, i32 2
  %60 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %59, align 8
  tail call void %60(%"class.sigslot::has_slots_interface"* %44, %"class.sigslot::_signal_base_interface"* %40) #5
  %61 = load i64, i64* %34, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %41

63:                                               ; preds = %41, %31
  %64 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %65 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 5, i32 0, i32 2, i32 0
  store %"struct.std::__1::__list_node_base"* %64, %"struct.std::__1::__list_node_base"** %65, align 8
  %66 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 6, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %95, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 6, i32 0, i32 1, i32 0, i32 0, i32 1
  %71 = bitcast %"struct.std::__1::__list_node_base"** %70 to %"struct.std::__1::__list_node"**
  %72 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  br label %73

73:                                               ; preds = %73, %69
  %74 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %71, align 8
  %75 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %74, i64 0, i32 1, i32 1
  %76 = load %"class.sigslot::has_slots_interface"*, %"class.sigslot::has_slots_interface"** %75, align 8
  %77 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %74, i64 0, i32 0, i32 1
  %78 = bitcast %"struct.std::__1::__list_node_base"** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %74, i64 0, i32 0, i32 0
  %81 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %80, align 8
  %82 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %81, i64 0, i32 1
  %83 = bitcast %"struct.std::__1::__list_node_base"** %82 to i64*
  store i64 %79, i64* %83, align 8
  %84 = bitcast %"struct.std::__1::__list_node"* %74 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"struct.std::__1::__list_node_base"** %77 to i64**
  %87 = load i64*, i64** %86, align 8
  store i64 %85, i64* %87, align 8
  %88 = load i64, i64* %66, align 8
  %89 = add i64 %88, -1
  store i64 %89, i64* %66, align 8
  %90 = bitcast %"struct.std::__1::__list_node"* %74 to i8*
  tail call void @_ZdlPv(i8* %90) #6
  %91 = getelementptr inbounds %"class.sigslot::has_slots_interface", %"class.sigslot::has_slots_interface"* %76, i64 0, i32 2
  %92 = load void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)*, void (%"class.sigslot::has_slots_interface"*, %"class.sigslot::_signal_base_interface"*)** %91, align 8
  tail call void %92(%"class.sigslot::has_slots_interface"* %76, %"class.sigslot::_signal_base_interface"* %72) #5
  %93 = load i64, i64* %66, align 8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %73

95:                                               ; preds = %73, %63
  %96 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 6, i32 0, i32 1, i32 0, i32 0
  %97 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 6, i32 0, i32 2, i32 0
  store %"struct.std::__1::__list_node_base"* %96, %"struct.std::__1::__list_node_base"** %97, align 8
  %98 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"* %98) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn88_N8notifier14WeakXmppClientD1Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 -1, i32 0, i32 6
  %3 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to %"class.notifier::WeakXmppClient"*
  %4 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 1, i32 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.std::__1::__compressed_pair.1"* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 2, i32 0, i32 2
  %8 = bitcast %"class.std::__1::__list_iterator"* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %3) #5
  %9 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 7
  %10 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %9 to %"class.base::internal::WeakPtrFactoryBase"*
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %10) #5
  %11 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %11) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn152_N8notifier14WeakXmppClientD1Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 -1, i32 0, i32 4, i32 0, i32 3
  %3 = bitcast i8* %2 to %"class.notifier::WeakXmppClient"*
  %4 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 88
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 152
  %8 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %3) #5
  %9 = getelementptr inbounds i8, i8* %2, i64 392
  %10 = bitcast i8* %9 to %"class.base::internal::WeakPtrFactoryBase"*
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %10) #5
  %11 = bitcast i8* %2 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %11) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClientD0Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 2, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %0) #5
  %5 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %5) #5
  %6 = bitcast %"class.notifier::WeakXmppClient"* %0 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %6) #5
  %7 = bitcast %"class.notifier::WeakXmppClient"* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn88_N8notifier14WeakXmppClientD0Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 -1, i32 0, i32 6
  %3 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to %"class.notifier::WeakXmppClient"*
  %4 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 1, i32 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.std::__1::__compressed_pair.1"* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 2, i32 0, i32 2
  %8 = bitcast %"class.std::__1::__list_iterator"* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %3) #5
  %9 = getelementptr inbounds %"class.sigslot::signal_with_thread_policy.14", %"class.sigslot::signal_with_thread_policy.14"* %2, i64 7
  %10 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %9 to %"class.base::internal::WeakPtrFactoryBase"*
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %10) #5
  %11 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %11) #5
  %12 = bitcast %"class.sigslot::signal_with_thread_policy.14"* %2 to i8*
  tail call void @_ZdlPv(i8* %12) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn152_N8notifier14WeakXmppClientD0Ev(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %0, i64 -1, i32 0, i32 4, i32 0, i32 3
  %3 = bitcast i8* %2 to %"class.notifier::WeakXmppClient"*
  %4 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 88
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 152
  %8 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*], [11 x i8*], [4 x i8*] }, { [17 x i8*], [11 x i8*], [4 x i8*] }* @_ZTVN8notifier14WeakXmppClientE, i64 0, inrange i32 2, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %3) #5
  %9 = getelementptr inbounds i8, i8* %2, i64 392
  %10 = bitcast i8* %9 to %"class.base::internal::WeakPtrFactoryBase"*
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %10) #5
  %11 = bitcast i8* %2 to %"class.jingle_xmpp::XmppClient"*
  tail call void @_ZN11jingle_xmpp10XmppClientD2Ev(%"class.jingle_xmpp::XmppClient"* %11) #5
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClient9AsWeakPtrEv(%"class.base::WeakPtr"* noalias sret, %"class.notifier::WeakXmppClient"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::WeakReference", align 8
  %4 = bitcast %"class.base::internal::WeakReference"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #5, !noalias !2
  %5 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %1, i64 0, i32 1, i32 0, i32 0
  call void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* nonnull sret %3, %"class.base::internal::WeakReferenceOwner"* %5) #5, !noalias !2
  %6 = getelementptr inbounds %"class.notifier::WeakXmppClient", %"class.notifier::WeakXmppClient"* %1, i64 0, i32 1, i32 0, i32 1
  %7 = load i64, i64* %6, align 8, !noalias !2
  %8 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %0, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"* %8, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %3, i64 %7) #5
  call void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #5, !noalias !2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8notifier14WeakXmppClient4StopEv(%"class.notifier::WeakXmppClient"*) unnamed_addr #0 align 2 {
  tail call void @_ZN8notifier14WeakXmppClient10InvalidateEv(%"class.notifier::WeakXmppClient"* %0)
  %2 = bitcast %"class.notifier::WeakXmppClient"* %0 to %"class.jingle_xmpp::Task"*
  tail call void @_ZN11jingle_xmpp4Task4StopEv(%"class.jingle_xmpp::Task"* %2) #5
  ret void
}

declare void @_ZN11jingle_xmpp4Task4StopEv(%"class.jingle_xmpp::Task"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK11jingle_xmpp10XmppClient12GetStateNameEi(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmppClient"*, i32) unnamed_addr #0 comdat align 2 {
  switch i32 %2, label %15 [
    i32 5, label %4
    i32 6, label %9
  ]

4:                                                ; preds = %3
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  store i8 14, i8* %6, align 1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64 14, i1 false) #5
  %8 = getelementptr inbounds i8, i8* %7, i64 14
  store i8 0, i8* %8, align 2
  br label %17

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  store i8 16, i8* %11, align 1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 1 getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i64 16, i1 false) #5
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %14 = bitcast i64* %13 to i8*
  store i8 0, i8* %14, align 8
  br label %17

15:                                               ; preds = %3
  %16 = bitcast %"class.jingle_xmpp::XmppClient"* %1 to %"class.jingle_xmpp::Task"*
  tail call void @_ZNK11jingle_xmpp4Task12GetStateNameEi(%"class.std::__1::basic_string"* sret %0, %"class.jingle_xmpp::Task"* %16, i32 %2) #5
  br label %17

17:                                               ; preds = %15, %9, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11jingle_xmpp10XmppClient7ProcessEi(%"class.jingle_xmpp::XmppClient"*, i32) unnamed_addr #0 comdat align 2 {
  switch i32 %1, label %7 [
    i32 5, label %3
    i32 6, label %5
  ]

3:                                                ; preds = %2
  %4 = tail call i32 @_ZN11jingle_xmpp10XmppClient17ProcessTokenLoginEv(%"class.jingle_xmpp::XmppClient"* %0) #5
  br label %10

5:                                                ; preds = %2
  %6 = tail call i32 @_ZN11jingle_xmpp10XmppClient21ProcessStartXmppLoginEv(%"class.jingle_xmpp::XmppClient"* %0) #5
  br label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.jingle_xmpp::XmppClient"* %0 to %"class.jingle_xmpp::Task"*
  %9 = tail call i32 @_ZN11jingle_xmpp4Task7ProcessEi(%"class.jingle_xmpp::Task"* %8, i32 %1) #5
  br label %10

10:                                               ; preds = %7, %5, %3
  %11 = phi i32 [ %9, %7 ], [ %6, %5 ], [ %4, %3 ]
  ret i32 %11
}

declare i32 @_ZN11jingle_xmpp10XmppClient12ProcessStartEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #1

declare i32 @_ZN11jingle_xmpp10XmppClient15ProcessResponseEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.jingle_xmpp::XmppClientInterface"* @_ZN11jingle_xmpp10XmppClient9GetClientEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppClient", %"class.jingle_xmpp::XmppClient"* %0, i64 0, i32 2
  ret %"class.jingle_xmpp::XmppClientInterface"* %2
}

declare i32 @_ZNK11jingle_xmpp10XmppClient8GetStateEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #1

declare dereferenceable(72) %"class.jingle_xmpp::Jid"* @_ZNK11jingle_xmpp10XmppClient3jidEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmppClient6NextIdEv(%"class.std::__1::basic_string"* sret, %"class.jingle_xmpp::XmppClient"*) unnamed_addr #1

declare i32 @_ZN11jingle_xmpp10XmppClient10SendStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*) unnamed_addr #1

declare i32 @_ZN11jingle_xmpp10XmppClient15SendStanzaErrorEPKNS_10XmlElementENS_15XmppStanzaErrorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmppClient11AddXmppTaskEPNS_8XmppTaskENS_10XmppEngine12HandlerLevelE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*, i32) unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmppClient14RemoveXmppTaskEPNS_8XmppTaskE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
declare i32 @_ZThn88_NK11jingle_xmpp10XmppClient8GetStateEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(72) %"class.jingle_xmpp::Jid"* @_ZThn88_NK11jingle_xmpp10XmppClient3jidEv(%"class.jingle_xmpp::XmppClient"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZThn88_N11jingle_xmpp10XmppClient6NextIdEv(%"class.std::__1::basic_string"* noalias sret, %"class.jingle_xmpp::XmppClient"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare i32 @_ZThn88_N11jingle_xmpp10XmppClient10SendStanzaEPKNS_10XmlElementE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare i32 @_ZThn88_N11jingle_xmpp10XmppClient15SendStanzaErrorEPKNS_10XmlElementENS_15XmppStanzaErrorERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmlElement"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZThn88_N11jingle_xmpp10XmppClient11AddXmppTaskEPNS_8XmppTaskENS_10XmppEngine12HandlerLevelE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*, i32) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZThn88_N11jingle_xmpp10XmppClient14RemoveXmppTaskEPNS_8XmppTaskE(%"class.jingle_xmpp::XmppClient"*, %"class.jingle_xmpp::XmppTask"*) unnamed_addr #0 align 2

declare void @_ZNK11jingle_xmpp4Task12GetStateNameEi(%"class.std::__1::basic_string"* sret, %"class.jingle_xmpp::Task"*, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare i32 @_ZN11jingle_xmpp10XmppClient17ProcessTokenLoginEv(%"class.jingle_xmpp::XmppClient"*) local_unnamed_addr #1

declare i32 @_ZN11jingle_xmpp10XmppClient21ProcessStartXmppLoginEv(%"class.jingle_xmpp::XmppClient"*) local_unnamed_addr #1

declare i32 @_ZN11jingle_xmpp4Task7ProcessEi(%"class.jingle_xmpp::Task"*, i32) unnamed_addr #1

declare void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"*, i64) unnamed_addr #1

declare void @_ZN4base8internal18WeakReferenceOwner10InvalidateEv(%"class.base::internal::WeakReferenceOwner"*) local_unnamed_addr #1

declare void @_ZNK4base8internal18WeakReferenceOwner6GetRefEv(%"class.base::internal::WeakReference"* sret, %"class.base::internal::WeakReferenceOwner"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceD1Ev(%"class.base::internal::WeakReference"*) unnamed_addr #2

declare void @_ZN4base8internal11WeakPtrBaseC2ERKNS0_13WeakReferenceEm(%"class.base::internal::WeakPtrBase"*, %"class.base::internal::WeakReference"* dereferenceable(8), i64) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4base14WeakPtrFactoryIN8notifier14WeakXmppClientEE10GetWeakPtrEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base14WeakPtrFactoryIN8notifier14WeakXmppClientEE10GetWeakPtrEv"}
