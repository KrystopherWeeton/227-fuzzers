; ModuleID = '../../third_party/swiftshader/src/Renderer/ETC_Decoder.cpp'
source_filename = "../../third_party/swiftshader/src/Renderer/ETC_Decoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.(anonymous namespace)::ETC2" = type { %struct.anon }
%struct.anon = type { %union.anon }
%union.anon = type { %struct.anon.8 }
%struct.anon.8 = type { i64 }
%struct.anon.9 = type { %union.anon.10, [7 x i8] }
%union.anon.10 = type { i8 }
%"struct.(anonymous namespace)::bgra8" = type { i8, i8, i8, i8 }
%struct.anon.2 = type { %union.anon.3, i8 }
%union.anon.3 = type { %struct.anon.4 }
%struct.anon.4 = type { [3 x i8] }
%struct.anon.0 = type { %union.anon.1, [2 x i8], [2 x i8] }
%union.anon.1 = type { %struct.anon.6 }
%struct.anon.6 = type { i32 }

@_ZZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEiiE13modifierTable = internal unnamed_addr constant [16 x [8 x i32]] [[8 x i32] [i32 -3, i32 -6, i32 -9, i32 -15, i32 2, i32 5, i32 8, i32 14], [8 x i32] [i32 -3, i32 -7, i32 -10, i32 -13, i32 2, i32 6, i32 9, i32 12], [8 x i32] [i32 -2, i32 -5, i32 -8, i32 -13, i32 1, i32 4, i32 7, i32 12], [8 x i32] [i32 -2, i32 -4, i32 -6, i32 -13, i32 1, i32 3, i32 5, i32 12], [8 x i32] [i32 -3, i32 -6, i32 -8, i32 -12, i32 2, i32 5, i32 7, i32 11], [8 x i32] [i32 -3, i32 -7, i32 -9, i32 -11, i32 2, i32 6, i32 8, i32 10], [8 x i32] [i32 -4, i32 -7, i32 -8, i32 -11, i32 3, i32 6, i32 7, i32 10], [8 x i32] [i32 -3, i32 -5, i32 -8, i32 -11, i32 2, i32 4, i32 7, i32 10], [8 x i32] [i32 -2, i32 -6, i32 -8, i32 -10, i32 1, i32 5, i32 7, i32 9], [8 x i32] [i32 -2, i32 -5, i32 -8, i32 -10, i32 1, i32 4, i32 7, i32 9], [8 x i32] [i32 -2, i32 -4, i32 -8, i32 -10, i32 1, i32 3, i32 7, i32 9], [8 x i32] [i32 -2, i32 -5, i32 -7, i32 -10, i32 1, i32 4, i32 6, i32 9], [8 x i32] [i32 -3, i32 -4, i32 -7, i32 -10, i32 2, i32 3, i32 6, i32 9], [8 x i32] [i32 -1, i32 -2, i32 -3, i32 -10, i32 0, i32 1, i32 2, i32 9], [8 x i32] [i32 -4, i32 -6, i32 -8, i32 -9, i32 3, i32 5, i32 7, i32 8], [8 x i32] [i32 -3, i32 -5, i32 -7, i32 -9, i32 2, i32 4, i32 6, i32 8]], align 16
@_ZZNK12_GLOBAL__N_14ETC212decodeHBlockEPhiiiiiPA4_hbE8distance = internal unnamed_addr constant [8 x i32] [i32 3, i32 6, i32 11, i32 16, i32 23, i32 32, i32 41, i32 64], align 16
@_ZZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hbE24intensityModifierDefault = internal unnamed_addr constant [8 x [4 x i32]] [[4 x i32] [i32 2, i32 8, i32 -2, i32 -8], [4 x i32] [i32 5, i32 17, i32 -5, i32 -17], [4 x i32] [i32 9, i32 29, i32 -9, i32 -29], [4 x i32] [i32 13, i32 42, i32 -13, i32 -42], [4 x i32] [i32 18, i32 60, i32 -18, i32 -60], [4 x i32] [i32 24, i32 80, i32 -24, i32 -80], [4 x i32] [i32 33, i32 106, i32 -33, i32 -106], [4 x i32] [i32 47, i32 183, i32 -47, i32 -183]], align 16
@_ZZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hbE26intensityModifierNonOpaque = internal unnamed_addr constant [8 x [4 x i32]] [[4 x i32] [i32 0, i32 8, i32 0, i32 -8], [4 x i32] [i32 0, i32 17, i32 0, i32 -17], [4 x i32] [i32 0, i32 29, i32 0, i32 -29], [4 x i32] [i32 0, i32 42, i32 0, i32 -42], [4 x i32] [i32 0, i32 60, i32 0, i32 -60], [4 x i32] [i32 0, i32 80, i32 0, i32 -80], [4 x i32] [i32 0, i32 106, i32 0, i32 -106], [4 x i32] [i32 0, i32 183, i32 0, i32 -183]], align 16

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN11ETC_Decoder6DecodeEPKhPhiiiiiiNS_9InputTypeE(i8*, i8* nocapture, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %10 = alloca [2 x %"struct.(anonymous namespace)::ETC2"*], align 16
  %11 = alloca [4 x [4 x i8]], align 16
  %12 = bitcast [2 x %"struct.(anonymous namespace)::ETC2"*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #4
  %13 = getelementptr inbounds [2 x %"struct.(anonymous namespace)::ETC2"*], [2 x %"struct.(anonymous namespace)::ETC2"*]* %10, i64 0, i64 0
  %14 = getelementptr inbounds [2 x %"struct.(anonymous namespace)::ETC2"*], [2 x %"struct.(anonymous namespace)::ETC2"*]* %10, i64 0, i64 1
  %15 = bitcast [2 x %"struct.(anonymous namespace)::ETC2"*]* %10 to i8**
  %16 = bitcast [2 x %"struct.(anonymous namespace)::ETC2"*]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 16, i1 false)
  store i8* %0, i8** %15, align 16
  %17 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %11, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 16, i1 false)
  %18 = bitcast i8* %0 to %"struct.(anonymous namespace)::ETC2"*
  switch i32 %8, label %145 [
    i32 0, label %28
    i32 1, label %28
    i32 2, label %57
    i32 3, label %57
    i32 4, label %93
    i32 5, label %93
    i32 6, label %19
  ]

19:                                               ; preds = %9
  %20 = icmp sgt i32 %3, 0
  br i1 %20, label %21, label %145

21:                                               ; preds = %19
  %22 = icmp sgt i32 %2, 0
  %23 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %11, i64 0, i64 0
  %24 = sext i32 %7 to i64
  %25 = sext i32 %2 to i64
  %26 = sext i32 %6 to i64
  %27 = sext i32 %3 to i64
  br label %123

28:                                               ; preds = %9, %9
  %29 = icmp sgt i32 %3, 0
  br i1 %29, label %30, label %145

30:                                               ; preds = %28
  %31 = icmp sgt i32 %2, 0
  %32 = icmp eq i32 %8, 0
  %33 = sext i32 %7 to i64
  %34 = sext i32 %2 to i64
  %35 = sext i32 %6 to i64
  %36 = sext i32 %3 to i64
  br label %37

37:                                               ; preds = %30, %44
  %38 = phi %"struct.(anonymous namespace)::ETC2"* [ %18, %30 ], [ %45, %44 ]
  %39 = phi i64 [ 0, %30 ], [ %46, %44 ]
  %40 = mul nsw i64 %39, %35
  %41 = getelementptr inbounds i8, i8* %1, i64 %40
  br i1 %31, label %42, label %44

42:                                               ; preds = %37
  %43 = trunc i64 %39 to i32
  br label %48

44:                                               ; preds = %48, %37
  %45 = phi %"struct.(anonymous namespace)::ETC2"* [ %38, %37 ], [ %55, %48 ]
  %46 = add nuw i64 %39, 4
  %47 = icmp slt i64 %46, %36
  br i1 %47, label %37, label %145

48:                                               ; preds = %42, %48
  %49 = phi %"struct.(anonymous namespace)::ETC2"* [ %38, %42 ], [ %55, %48 ]
  %50 = phi i64 [ 0, %42 ], [ %54, %48 ]
  %51 = mul nsw i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %41, i64 %51
  %53 = trunc i64 %50 to i32
  call fastcc void @_ZN12_GLOBAL__N_14ETC211DecodeBlockEPPKS0_Phiiiiiibb(%"struct.(anonymous namespace)::ETC2"** nonnull %13, i8* %52, i32 1, i32 %53, i32 %43, i32 %4, i32 %5, i32 %6, i1 zeroext %32, i1 zeroext true) #5
  %54 = add nuw i64 %50, 4
  %55 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %49, i64 1
  store %"struct.(anonymous namespace)::ETC2"* %55, %"struct.(anonymous namespace)::ETC2"** %13, align 16
  %56 = icmp slt i64 %54, %34
  br i1 %56, label %48, label %44

57:                                               ; preds = %9, %9
  %58 = getelementptr inbounds i8, i8* %0, i64 8
  %59 = bitcast %"struct.(anonymous namespace)::ETC2"** %14 to i8**
  store i8* %58, i8** %59, align 8
  %60 = icmp sgt i32 %3, 0
  br i1 %60, label %61, label %145

61:                                               ; preds = %57
  %62 = bitcast i8* %58 to %"struct.(anonymous namespace)::ETC2"*
  %63 = icmp sgt i32 %2, 0
  %64 = icmp eq i32 %8, 2
  %65 = sext i32 %7 to i64
  %66 = sext i32 %2 to i64
  %67 = sext i32 %6 to i64
  %68 = sext i32 %3 to i64
  br label %69

69:                                               ; preds = %61, %77
  %70 = phi %"struct.(anonymous namespace)::ETC2"* [ %62, %61 ], [ %78, %77 ]
  %71 = phi %"struct.(anonymous namespace)::ETC2"* [ %18, %61 ], [ %79, %77 ]
  %72 = phi i64 [ 0, %61 ], [ %80, %77 ]
  %73 = mul nsw i64 %72, %67
  %74 = getelementptr inbounds i8, i8* %1, i64 %73
  br i1 %63, label %75, label %77

75:                                               ; preds = %69
  %76 = trunc i64 %72 to i32
  br label %82

77:                                               ; preds = %82, %69
  %78 = phi %"struct.(anonymous namespace)::ETC2"* [ %70, %69 ], [ %91, %82 ]
  %79 = phi %"struct.(anonymous namespace)::ETC2"* [ %71, %69 ], [ %90, %82 ]
  %80 = add nuw i64 %72, 4
  %81 = icmp slt i64 %80, %68
  br i1 %81, label %69, label %145

82:                                               ; preds = %75, %82
  %83 = phi %"struct.(anonymous namespace)::ETC2"* [ %70, %75 ], [ %91, %82 ]
  %84 = phi %"struct.(anonymous namespace)::ETC2"* [ %71, %75 ], [ %90, %82 ]
  %85 = phi i64 [ 0, %75 ], [ %89, %82 ]
  %86 = mul nsw i64 %85, %65
  %87 = getelementptr inbounds i8, i8* %74, i64 %86
  %88 = trunc i64 %85 to i32
  call fastcc void @_ZN12_GLOBAL__N_14ETC211DecodeBlockEPPKS0_Phiiiiiibb(%"struct.(anonymous namespace)::ETC2"** nonnull %13, i8* %87, i32 2, i32 %88, i32 %76, i32 %4, i32 %5, i32 %6, i1 zeroext %64, i1 zeroext true) #5
  %89 = add nuw i64 %85, 4
  %90 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %84, i64 2
  store %"struct.(anonymous namespace)::ETC2"* %90, %"struct.(anonymous namespace)::ETC2"** %13, align 16
  %91 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %83, i64 2
  store %"struct.(anonymous namespace)::ETC2"* %91, %"struct.(anonymous namespace)::ETC2"** %14, align 8
  %92 = icmp slt i64 %89, %66
  br i1 %92, label %82, label %77

93:                                               ; preds = %9, %9
  %94 = icmp sgt i32 %3, 0
  br i1 %94, label %95, label %145

95:                                               ; preds = %93
  %96 = icmp sgt i32 %2, 0
  %97 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* %11, i64 0, i64 0
  %98 = icmp eq i32 %8, 5
  %99 = sext i32 %7 to i64
  %100 = sext i32 %2 to i64
  %101 = sext i32 %6 to i64
  %102 = sext i32 %3 to i64
  br label %103

103:                                              ; preds = %95, %110
  %104 = phi i64 [ 0, %95 ], [ %112, %110 ]
  %105 = phi %"struct.(anonymous namespace)::ETC2"* [ %18, %95 ], [ %111, %110 ]
  %106 = mul nsw i64 %104, %101
  %107 = getelementptr inbounds i8, i8* %1, i64 %106
  br i1 %96, label %108, label %110

108:                                              ; preds = %103
  %109 = trunc i64 %104 to i32
  br label %114

110:                                              ; preds = %114, %103
  %111 = phi %"struct.(anonymous namespace)::ETC2"* [ %105, %103 ], [ %121, %114 ]
  %112 = add nuw i64 %104, 4
  %113 = icmp slt i64 %112, %102
  br i1 %113, label %103, label %144

114:                                              ; preds = %108, %114
  %115 = phi i64 [ 0, %108 ], [ %120, %114 ]
  %116 = phi %"struct.(anonymous namespace)::ETC2"* [ %105, %108 ], [ %121, %114 ]
  %117 = mul nsw i64 %115, %99
  %118 = getelementptr inbounds i8, i8* %107, i64 %117
  %119 = trunc i64 %115 to i32
  call fastcc void @_ZNK12_GLOBAL__N_14ETC211decodeBlockEPhiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* %116, i8* %118, i32 %119, i32 %109, i32 %4, i32 %5, i32 %6, [4 x i8]* nonnull %97, i1 zeroext %98) #5
  %120 = add nuw i64 %115, 4
  %121 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %116, i64 1
  %122 = icmp slt i64 %120, %100
  br i1 %122, label %114, label %110

123:                                              ; preds = %21, %130
  %124 = phi %"struct.(anonymous namespace)::ETC2"* [ %18, %21 ], [ %131, %130 ]
  %125 = phi i64 [ 0, %21 ], [ %132, %130 ]
  %126 = mul nsw i64 %125, %26
  %127 = getelementptr inbounds i8, i8* %1, i64 %126
  br i1 %22, label %128, label %130

128:                                              ; preds = %123
  %129 = trunc i64 %125 to i32
  br label %134

130:                                              ; preds = %134, %123
  %131 = phi %"struct.(anonymous namespace)::ETC2"* [ %124, %123 ], [ %141, %134 ]
  %132 = add nuw i64 %125, 4
  %133 = icmp slt i64 %132, %27
  br i1 %133, label %123, label %145

134:                                              ; preds = %128, %134
  %135 = phi %"struct.(anonymous namespace)::ETC2"* [ %124, %128 ], [ %141, %134 ]
  %136 = phi i64 [ 0, %128 ], [ %142, %134 ]
  %137 = trunc i64 %136 to i32
  call fastcc void @_ZN12_GLOBAL__N_14ETC211DecodeBlockEPPKS0_Phiiiiiibb(%"struct.(anonymous namespace)::ETC2"** nonnull %13, i8* nonnull %17, i32 1, i32 %137, i32 %129, i32 %4, i32 %5, i32 4, i1 zeroext false, i1 zeroext false) #5
  %138 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %135, i64 1
  store %"struct.(anonymous namespace)::ETC2"* %138, %"struct.(anonymous namespace)::ETC2"** %13, align 16
  %139 = mul nsw i64 %136, %24
  %140 = getelementptr inbounds i8, i8* %127, i64 %139
  call fastcc void @_ZNK12_GLOBAL__N_14ETC211decodeBlockEPhiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* %138, i8* %140, i32 %137, i32 %129, i32 %4, i32 %5, i32 %6, [4 x i8]* nonnull %23, i1 zeroext false) #5
  %141 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %135, i64 2
  store %"struct.(anonymous namespace)::ETC2"* %141, %"struct.(anonymous namespace)::ETC2"** %13, align 16
  %142 = add nuw i64 %136, 4
  %143 = icmp slt i64 %142, %25
  br i1 %143, label %134, label %130

144:                                              ; preds = %110
  store %"struct.(anonymous namespace)::ETC2"* %111, %"struct.(anonymous namespace)::ETC2"** %13, align 16
  br label %145

145:                                              ; preds = %130, %77, %44, %19, %93, %144, %57, %28, %9
  %146 = phi i1 [ false, %9 ], [ true, %28 ], [ true, %57 ], [ true, %144 ], [ true, %93 ], [ true, %19 ], [ true, %44 ], [ true, %77 ], [ true, %130 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #4
  ret i1 %146
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_14ETC211DecodeBlockEPPKS0_Phiiiiiibb(%"struct.(anonymous namespace)::ETC2"** nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, i32, i1 zeroext, i1 zeroext) unnamed_addr #2 align 2 {
  %11 = icmp slt i32 %4, %6
  br i1 %9, label %12, label %79

12:                                               ; preds = %10
  br i1 %11, label %13, label %190

13:                                               ; preds = %12
  %14 = icmp slt i32 %3, %5
  %15 = icmp sgt i32 %2, 0
  %16 = select i1 %8, i32 -1023, i32 0
  %17 = select i1 %8, i32 1023, i32 2047
  %18 = sext i32 %7 to i64
  %19 = sext i32 %2 to i64
  %20 = sext i32 %3 to i64
  %21 = sext i32 %5 to i64
  br label %22

22:                                               ; preds = %13, %31
  %23 = phi i32 [ 0, %13 ], [ %33, %31 ]
  %24 = phi i8* [ %1, %13 ], [ %32, %31 ]
  %25 = bitcast i8* %24 to i32*
  br i1 %14, label %26, label %31

26:                                               ; preds = %22, %38
  %27 = phi i64 [ %39, %38 ], [ 0, %22 ]
  br i1 %15, label %28, label %38

28:                                               ; preds = %26
  %29 = mul nsw i64 %27, %19
  %30 = trunc i64 %27 to i32
  br label %44

31:                                               ; preds = %38, %22
  %32 = getelementptr inbounds i8, i8* %24, i64 %18
  %33 = add nuw nsw i32 %23, 1
  %34 = icmp ult i32 %33, 4
  %35 = add nsw i32 %33, %4
  %36 = icmp slt i32 %35, %6
  %37 = and i1 %34, %36
  br i1 %37, label %22, label %190

38:                                               ; preds = %69, %26
  %39 = add nuw nsw i64 %27, 1
  %40 = icmp ult i64 %39, 4
  %41 = add nsw i64 %39, %20
  %42 = icmp slt i64 %41, %21
  %43 = and i1 %40, %42
  br i1 %43, label %26, label %31

44:                                               ; preds = %28, %69
  %45 = phi i64 [ %19, %28 ], [ %46, %69 ]
  %46 = add nsw i64 %45, -1
  %47 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %0, i64 %46
  %48 = load %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %47, align 8
  %49 = bitcast %"struct.(anonymous namespace)::ETC2"* %48 to %struct.anon.9*
  %50 = bitcast %"struct.(anonymous namespace)::ETC2"* %48 to i8*
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = zext i8 %51 to i32
  %54 = select i1 %8, i32 %52, i32 %53
  %55 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %49, i64 0, i32 1
  %56 = bitcast [7 x i8]* %55 to i56*
  %57 = load i56, i56* %56, align 1
  %58 = and i56 %57, 240
  %59 = icmp eq i56 %58, 0
  %60 = shl nsw i32 %54, 3
  %61 = or i32 %60, 4
  %62 = tail call fastcc i32 @_ZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEii(%"struct.(anonymous namespace)::ETC2"* %48, i32 %30, i32 %23) #6
  br i1 %59, label %69, label %63

63:                                               ; preds = %44
  %64 = lshr i56 %57, 4
  %65 = trunc i56 %64 to i32
  %66 = and i32 %65, 15
  %67 = shl i32 %62, 3
  %68 = mul i32 %67, %66
  br label %69

69:                                               ; preds = %44, %63
  %70 = phi i32 [ %68, %63 ], [ %62, %44 ]
  %71 = add nsw i32 %70, %61
  %72 = icmp sgt i32 %16, %71
  %73 = icmp slt i32 %17, %71
  %74 = select i1 %73, i32 %17, i32 %71
  %75 = select i1 %72, i32 %16, i32 %74
  %76 = add nsw i64 %46, %29
  %77 = getelementptr inbounds i32, i32* %25, i64 %76
  store i32 %75, i32* %77, align 4
  %78 = icmp sgt i64 %46, 0
  br i1 %78, label %44, label %38

79:                                               ; preds = %10
  br i1 %8, label %88, label %80

80:                                               ; preds = %79
  br i1 %11, label %81, label %190

81:                                               ; preds = %80
  %82 = icmp slt i32 %3, %5
  %83 = icmp sgt i32 %2, 0
  %84 = sext i32 %7 to i64
  %85 = sext i32 %2 to i64
  %86 = sext i32 %3 to i64
  %87 = sext i32 %5 to i64
  br label %143

88:                                               ; preds = %79
  br i1 %11, label %89, label %190

89:                                               ; preds = %88
  %90 = icmp slt i32 %3, %5
  %91 = icmp sgt i32 %2, 0
  %92 = sext i32 %7 to i64
  %93 = sext i32 %2 to i64
  %94 = sext i32 %3 to i64
  %95 = sext i32 %5 to i64
  br label %96

96:                                               ; preds = %89, %104
  %97 = phi i32 [ 0, %89 ], [ %106, %104 ]
  %98 = phi i8* [ %1, %89 ], [ %105, %104 ]
  br i1 %90, label %99, label %104

99:                                               ; preds = %96, %111
  %100 = phi i64 [ %112, %111 ], [ 0, %96 ]
  br i1 %91, label %101, label %111

101:                                              ; preds = %99
  %102 = mul nsw i64 %100, %93
  %103 = trunc i64 %100 to i32
  br label %117

104:                                              ; preds = %111, %96
  %105 = getelementptr inbounds i8, i8* %98, i64 %92
  %106 = add nuw nsw i32 %97, 1
  %107 = icmp ult i32 %106, 4
  %108 = add nsw i32 %106, %4
  %109 = icmp slt i32 %108, %6
  %110 = and i1 %107, %109
  br i1 %110, label %96, label %190

111:                                              ; preds = %117, %99
  %112 = add nuw nsw i64 %100, 1
  %113 = icmp ult i64 %112, 4
  %114 = add nsw i64 %112, %94
  %115 = icmp slt i64 %114, %95
  %116 = and i1 %113, %115
  br i1 %116, label %99, label %104

117:                                              ; preds = %101, %117
  %118 = phi i64 [ %93, %101 ], [ %119, %117 ]
  %119 = add nsw i64 %118, -1
  %120 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %0, i64 %119
  %121 = load %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %120, align 8
  %122 = bitcast %"struct.(anonymous namespace)::ETC2"* %121 to %struct.anon.9*
  %123 = bitcast %"struct.(anonymous namespace)::ETC2"* %121 to i8*
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = tail call fastcc i32 @_ZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEii(%"struct.(anonymous namespace)::ETC2"* %121, i32 %103, i32 %97) #6
  %127 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %122, i64 0, i32 1
  %128 = bitcast [7 x i8]* %127 to i56*
  %129 = load i56, i56* %128, align 1
  %130 = lshr i56 %129, 4
  %131 = trunc i56 %130 to i32
  %132 = and i32 %131, 15
  %133 = mul nsw i32 %132, %126
  %134 = add nsw i32 %133, %125
  %135 = icmp slt i32 %134, 127
  %136 = select i1 %135, i32 %134, i32 127
  %137 = icmp sgt i32 %136, -128
  %138 = select i1 %137, i32 %136, i32 -128
  %139 = trunc i32 %138 to i8
  %140 = add nsw i64 %119, %102
  %141 = getelementptr inbounds i8, i8* %98, i64 %140
  store i8 %139, i8* %141, align 1
  %142 = icmp sgt i64 %119, 0
  br i1 %142, label %117, label %111

143:                                              ; preds = %81, %151
  %144 = phi i32 [ 0, %81 ], [ %153, %151 ]
  %145 = phi i8* [ %1, %81 ], [ %152, %151 ]
  br i1 %82, label %146, label %151

146:                                              ; preds = %143, %158
  %147 = phi i64 [ %159, %158 ], [ 0, %143 ]
  br i1 %83, label %148, label %158

148:                                              ; preds = %146
  %149 = mul nsw i64 %147, %85
  %150 = trunc i64 %147 to i32
  br label %164

151:                                              ; preds = %158, %143
  %152 = getelementptr inbounds i8, i8* %145, i64 %84
  %153 = add nuw nsw i32 %144, 1
  %154 = icmp ult i32 %153, 4
  %155 = add nsw i32 %153, %4
  %156 = icmp slt i32 %155, %6
  %157 = and i1 %154, %156
  br i1 %157, label %143, label %190

158:                                              ; preds = %164, %146
  %159 = add nuw nsw i64 %147, 1
  %160 = icmp ult i64 %159, 4
  %161 = add nsw i64 %159, %86
  %162 = icmp slt i64 %161, %87
  %163 = and i1 %160, %162
  br i1 %163, label %146, label %151

164:                                              ; preds = %148, %164
  %165 = phi i64 [ %85, %148 ], [ %166, %164 ]
  %166 = add nsw i64 %165, -1
  %167 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %0, i64 %166
  %168 = load %"struct.(anonymous namespace)::ETC2"*, %"struct.(anonymous namespace)::ETC2"** %167, align 8
  %169 = bitcast %"struct.(anonymous namespace)::ETC2"* %168 to %struct.anon.9*
  %170 = bitcast %"struct.(anonymous namespace)::ETC2"* %168 to i8*
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = tail call fastcc i32 @_ZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEii(%"struct.(anonymous namespace)::ETC2"* %168, i32 %150, i32 %144) #6
  %174 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %169, i64 0, i32 1
  %175 = bitcast [7 x i8]* %174 to i56*
  %176 = load i56, i56* %175, align 1
  %177 = lshr i56 %176, 4
  %178 = trunc i56 %177 to i32
  %179 = and i32 %178, 15
  %180 = mul nsw i32 %179, %173
  %181 = add nsw i32 %180, %172
  %182 = icmp slt i32 %181, 255
  %183 = select i1 %182, i32 %181, i32 255
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i8
  %187 = add nsw i64 %166, %149
  %188 = getelementptr inbounds i8, i8* %145, i64 %187
  store i8 %186, i8* %188, align 1
  %189 = icmp sgt i64 %166, 0
  br i1 %189, label %164, label %158

190:                                              ; preds = %151, %104, %31, %80, %88, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZNK12_GLOBAL__N_14ETC211decodeBlockEPhiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, [4 x i8]* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %10 = alloca [4 x %"struct.(anonymous namespace)::bgra8"], align 16
  %11 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.2*
  %12 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %11, i64 0, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 2
  %15 = icmp eq i8 %14, 0
  %16 = xor i1 %15, true
  %17 = or i1 %16, %8
  %18 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to i24*
  %19 = load i24, i24* %18, align 1
  br i1 %17, label %20, label %742

20:                                               ; preds = %9
  %21 = lshr i24 %19, 3
  %22 = and i24 %21, 31
  %23 = zext i24 %22 to i32
  %24 = shl i24 %19, 21
  %25 = ashr exact i24 %24, 21
  %26 = zext i24 %25 to i32
  %27 = shl i32 %26, 24
  %28 = ashr exact i32 %27, 24
  %29 = add nsw i32 %28, %23
  %30 = lshr i24 %19, 19
  %31 = zext i24 %30 to i32
  %32 = shl i24 %19, 5
  %33 = ashr i24 %32, 21
  %34 = zext i24 %33 to i32
  %35 = shl i32 %34, 24
  %36 = ashr exact i32 %35, 24
  %37 = add nsw i32 %36, %31
  %38 = icmp ugt i32 %29, 31
  br i1 %38, label %39, label %266

39:                                               ; preds = %20
  %40 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #4
  %41 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 1
  %42 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 2
  %43 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 0
  %44 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 1
  %45 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 2
  %46 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 0
  %47 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 1
  %48 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 2
  %49 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 0
  %50 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 1
  %51 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 2
  %52 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -86, i64 16, i1 false) #4
  %53 = load i32, i32* %52, align 1
  %54 = lshr i32 %53, 1
  %55 = and i32 %54, 12
  %56 = and i32 %53, 3
  %57 = or i32 %55, %56
  %58 = shl nuw nsw i32 %57, 4
  %59 = or i32 %58, %57
  %60 = lshr i32 %53, 12
  %61 = and i32 %60, 15
  %62 = shl nuw nsw i32 %60, 4
  %63 = or i32 %62, %61
  %64 = lshr i32 %53, 8
  %65 = and i32 %64, 15
  %66 = shl nuw nsw i32 %64, 4
  %67 = or i32 %66, %65
  %68 = lshr i32 %53, 20
  %69 = and i32 %68, 15
  %70 = shl nuw nsw i32 %69, 4
  %71 = or i32 %70, %69
  %72 = lshr i32 %53, 16
  %73 = and i32 %72, 15
  %74 = shl nuw nsw i32 %73, 4
  %75 = or i32 %74, %73
  %76 = lshr i32 %53, 28
  %77 = shl nuw nsw i32 %76, 4
  %78 = or i32 %77, %76
  %79 = lshr i32 %53, 25
  %80 = and i32 %79, 6
  %81 = lshr i32 %53, 24
  %82 = and i32 %81, 1
  %83 = or i32 %80, %82
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK12_GLOBAL__N_14ETC212decodeHBlockEPhiiiiiPA4_hbE8distance, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = trunc i32 %59 to i8
  store i8 %87, i8* %42, align 2
  %88 = trunc i32 %63 to i8
  store i8 %88, i8* %41, align 1
  %89 = trunc i32 %67 to i8
  store i8 %89, i8* %40, align 16
  %90 = add nsw i32 %71, %86
  %91 = add nsw i32 %75, %86
  %92 = add nsw i32 %78, %86
  %93 = icmp slt i32 %90, 255
  %94 = select i1 %93, i32 %90, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  store i8 %97, i8* %45, align 2
  %98 = icmp slt i32 %91, 255
  %99 = select i1 %98, i32 %91, i32 255
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %44, align 1
  %103 = icmp slt i32 %92, 255
  %104 = select i1 %103, i32 %92, i32 255
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %43, align 4
  %108 = trunc i32 %71 to i8
  store i8 %108, i8* %48, align 2
  %109 = trunc i32 %75 to i8
  store i8 %109, i8* %47, align 1
  %110 = trunc i32 %78 to i8
  store i8 %110, i8* %46, align 8
  %111 = sub nsw i32 %71, %86
  %112 = sub nsw i32 %75, %86
  %113 = sub nsw i32 %78, %86
  %114 = icmp slt i32 %111, 255
  %115 = select i1 %114, i32 %111, i32 255
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %51, align 2
  %119 = icmp slt i32 %112, 255
  %120 = select i1 %119, i32 %112, i32 255
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %50, align 1
  %124 = icmp slt i32 %113, 255
  %125 = select i1 %124, i32 %113, i32 255
  %126 = icmp sgt i32 %125, 0
  %127 = select i1 %126, i32 %125, i32 0
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %49, align 4
  %129 = icmp slt i32 %3, %5
  br i1 %129, label %130, label %142

130:                                              ; preds = %39
  %131 = icmp slt i32 %2, %4
  %132 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %133 = add nsw i32 %2, 1
  %134 = icmp slt i32 %133, %4
  %135 = add nsw i32 %2, 2
  %136 = icmp slt i32 %135, %4
  %137 = add nsw i32 %2, 3
  %138 = icmp slt i32 %137, %4
  %139 = sext i32 %6 to i64
  %140 = sext i32 %3 to i64
  %141 = sext i32 %5 to i64
  br label %143

142:                                              ; preds = %257, %39
  br i1 %15, label %264, label %265

143:                                              ; preds = %257, %130
  %144 = phi i64 [ 0, %130 ], [ %259, %257 ]
  %145 = phi i8* [ %1, %130 ], [ %258, %257 ]
  br i1 %131, label %146, label %171

146:                                              ; preds = %143
  %147 = trunc i64 %144 to i32
  %148 = lshr i32 %147, 3
  %149 = sub nuw nsw i32 1, %148
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 2, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = lshr i32 %153, %147
  %155 = and i32 %154, 1
  %156 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 1, i64 %150
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = lshr i32 %158, %147
  %160 = shl nuw nsw i32 %159, 1
  %161 = and i32 %160, 2
  %162 = or i32 %161, %155
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %163
  %165 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %144, i64 0
  %166 = load i8, i8* %165, align 1
  %167 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %163, i32 3
  store i8 %166, i8* %167, align 1
  %168 = bitcast %"struct.(anonymous namespace)::bgra8"* %164 to i32*
  %169 = bitcast i8* %145 to i32*
  %170 = load i32, i32* %168, align 4
  store i32 %170, i32* %169, align 1
  br label %171

171:                                              ; preds = %146, %143
  br i1 %134, label %172, label %199

172:                                              ; preds = %171
  %173 = trunc i64 %144 to i32
  %174 = add nuw nsw i32 %173, 4
  %175 = lshr i32 %174, 3
  %176 = sub nuw nsw i32 1, %175
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 2, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = lshr i32 %180, %174
  %182 = and i32 %181, 1
  %183 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 1, i64 %177
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = lshr i32 %185, %174
  %187 = shl nuw nsw i32 %186, 1
  %188 = and i32 %187, 2
  %189 = or i32 %188, %182
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %190
  %192 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %144, i64 1
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %190, i32 3
  store i8 %193, i8* %194, align 1
  %195 = getelementptr inbounds i8, i8* %145, i64 4
  %196 = bitcast %"struct.(anonymous namespace)::bgra8"* %191 to i32*
  %197 = bitcast i8* %195 to i32*
  %198 = load i32, i32* %196, align 4
  store i32 %198, i32* %197, align 1
  br label %199

199:                                              ; preds = %172, %171
  br i1 %136, label %200, label %228

200:                                              ; preds = %199
  %201 = trunc i64 %144 to i32
  %202 = add nuw nsw i32 %201, 8
  %203 = lshr i32 %202, 3
  %204 = sub nuw nsw i32 1, %203
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 2, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = and i32 %202, 7
  %210 = lshr i32 %208, %209
  %211 = and i32 %210, 1
  %212 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 1, i64 %205
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = lshr i32 %214, %209
  %216 = shl nuw nsw i32 %215, 1
  %217 = and i32 %216, 2
  %218 = or i32 %217, %211
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %219
  %221 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %144, i64 2
  %222 = load i8, i8* %221, align 1
  %223 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %219, i32 3
  store i8 %222, i8* %223, align 1
  %224 = getelementptr inbounds i8, i8* %145, i64 8
  %225 = bitcast %"struct.(anonymous namespace)::bgra8"* %220 to i32*
  %226 = bitcast i8* %224 to i32*
  %227 = load i32, i32* %225, align 4
  store i32 %227, i32* %226, align 1
  br label %228

228:                                              ; preds = %200, %199
  br i1 %138, label %229, label %257

229:                                              ; preds = %228
  %230 = trunc i64 %144 to i32
  %231 = add nuw nsw i32 %230, 12
  %232 = lshr i32 %231, 3
  %233 = sub nuw nsw i32 1, %232
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 2, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %236 to i32
  %238 = and i32 %231, 7
  %239 = lshr i32 %237, %238
  %240 = and i32 %239, 1
  %241 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %132, i64 0, i32 1, i64 %234
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = lshr i32 %243, %238
  %245 = shl nuw nsw i32 %244, 1
  %246 = and i32 %245, 2
  %247 = or i32 %246, %240
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %248
  %250 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %144, i64 3
  %251 = load i8, i8* %250, align 1
  %252 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %248, i32 3
  store i8 %251, i8* %252, align 1
  %253 = getelementptr inbounds i8, i8* %145, i64 12
  %254 = bitcast %"struct.(anonymous namespace)::bgra8"* %249 to i32*
  %255 = bitcast i8* %253 to i32*
  %256 = load i32, i32* %254, align 4
  store i32 %256, i32* %255, align 1
  br label %257

257:                                              ; preds = %229, %228
  %258 = getelementptr inbounds i8, i8* %145, i64 %139
  %259 = add nuw nsw i64 %144, 1
  %260 = icmp ult i64 %259, 4
  %261 = add nsw i64 %259, %140
  %262 = icmp slt i64 %261, %141
  %263 = and i1 %260, %262
  br i1 %263, label %143, label %142

264:                                              ; preds = %142
  tail call fastcc void @_ZNK12_GLOBAL__N_14ETC228decodePunchThroughAlphaBlockEPhiiiii(%"struct.(anonymous namespace)::ETC2"* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #6
  br label %265

265:                                              ; preds = %142, %264
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #4
  br label %771

266:                                              ; preds = %20
  %267 = shl i24 %19, 13
  %268 = ashr i24 %267, 21
  %269 = zext i24 %268 to i32
  %270 = shl i32 %269, 24
  %271 = ashr exact i32 %270, 24
  %272 = lshr i24 %19, 11
  %273 = and i24 %272, 31
  %274 = zext i24 %273 to i32
  %275 = add nsw i32 %271, %274
  %276 = icmp ugt i32 %275, 31
  br i1 %276, label %277, label %554

277:                                              ; preds = %266
  %278 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %278) #4
  %279 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 1
  %280 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 0, i32 2
  %281 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 0
  %282 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 1
  %283 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 1, i32 2
  %284 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 0
  %285 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 1
  %286 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 2, i32 2
  %287 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 0
  %288 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 1
  %289 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 3, i32 2
  %290 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to i32*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %278, i8 -86, i64 16, i1 false) #4
  %291 = load i32, i32* %290, align 1
  %292 = lshr i32 %291, 3
  %293 = and i32 %292, 15
  %294 = shl nuw nsw i32 %293, 4
  %295 = or i32 %294, %293
  %296 = shl i32 %291, 1
  %297 = and i32 %296, 14
  %298 = lshr i32 %291, 12
  %299 = and i32 %298, 1
  %300 = or i32 %297, %299
  %301 = shl nuw nsw i32 %300, 4
  %302 = or i32 %301, %300
  %303 = lshr i32 %291, 8
  %304 = and i32 %303, 8
  %305 = lshr i32 %291, 7
  %306 = and i32 %305, 6
  %307 = or i32 %304, %306
  %308 = lshr i32 %291, 23
  %309 = and i32 %308, 1
  %310 = or i32 %307, %309
  %311 = shl nuw nsw i32 %310, 4
  %312 = or i32 %311, %310
  %313 = lshr i32 %291, 19
  %314 = and i32 %313, 15
  %315 = shl nuw nsw i32 %314, 4
  %316 = or i32 %315, %314
  %317 = lshr i32 %291, 15
  %318 = and i32 %317, 14
  %319 = lshr i32 %291, 31
  %320 = or i32 %318, %319
  %321 = shl nuw nsw i32 %320, 4
  %322 = or i32 %321, %320
  %323 = lshr i32 %291, 27
  %324 = and i32 %323, 15
  %325 = shl nuw nsw i32 %324, 4
  %326 = or i32 %325, %324
  %327 = lshr i32 %291, 24
  %328 = and i32 %327, 4
  %329 = and i32 %308, 2
  %330 = or i32 %328, %329
  %331 = shl nuw nsw i32 %295, 16
  %332 = shl nuw nsw i32 %302, 8
  %333 = or i32 %332, %331
  %334 = or i32 %333, %312
  %335 = shl nuw nsw i32 %316, 16
  %336 = shl nuw nsw i32 %322, 8
  %337 = or i32 %335, %326
  %338 = or i32 %337, %336
  %339 = icmp sge i32 %334, %338
  %340 = zext i1 %339 to i32
  %341 = or i32 %330, %340
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZNK12_GLOBAL__N_14ETC212decodeHBlockEPhiiiiiPA4_hbE8distance, i64 0, i64 %342
  %344 = load i32, i32* %343, align 4
  %345 = add nsw i32 %295, %344
  %346 = add nsw i32 %302, %344
  %347 = add nsw i32 %312, %344
  %348 = icmp slt i32 %345, 255
  %349 = select i1 %348, i32 %345, i32 255
  %350 = icmp sgt i32 %349, 0
  %351 = select i1 %350, i32 %349, i32 0
  %352 = trunc i32 %351 to i8
  store i8 %352, i8* %280, align 2
  %353 = icmp slt i32 %346, 255
  %354 = select i1 %353, i32 %346, i32 255
  %355 = icmp sgt i32 %354, 0
  %356 = select i1 %355, i32 %354, i32 0
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %279, align 1
  %358 = icmp slt i32 %347, 255
  %359 = select i1 %358, i32 %347, i32 255
  %360 = icmp sgt i32 %359, 0
  %361 = select i1 %360, i32 %359, i32 0
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %278, align 16
  %363 = sub nsw i32 %295, %344
  %364 = sub nsw i32 %302, %344
  %365 = sub nsw i32 %312, %344
  %366 = icmp slt i32 %363, 255
  %367 = select i1 %366, i32 %363, i32 255
  %368 = icmp sgt i32 %367, 0
  %369 = select i1 %368, i32 %367, i32 0
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* %283, align 2
  %371 = icmp slt i32 %364, 255
  %372 = select i1 %371, i32 %364, i32 255
  %373 = icmp sgt i32 %372, 0
  %374 = select i1 %373, i32 %372, i32 0
  %375 = trunc i32 %374 to i8
  store i8 %375, i8* %282, align 1
  %376 = icmp slt i32 %365, 255
  %377 = select i1 %376, i32 %365, i32 255
  %378 = icmp sgt i32 %377, 0
  %379 = select i1 %378, i32 %377, i32 0
  %380 = trunc i32 %379 to i8
  store i8 %380, i8* %281, align 4
  %381 = add nsw i32 %316, %344
  %382 = add nsw i32 %322, %344
  %383 = add nsw i32 %326, %344
  %384 = icmp slt i32 %381, 255
  %385 = select i1 %384, i32 %381, i32 255
  %386 = icmp sgt i32 %385, 0
  %387 = select i1 %386, i32 %385, i32 0
  %388 = trunc i32 %387 to i8
  store i8 %388, i8* %286, align 2
  %389 = icmp slt i32 %382, 255
  %390 = select i1 %389, i32 %382, i32 255
  %391 = icmp sgt i32 %390, 0
  %392 = select i1 %391, i32 %390, i32 0
  %393 = trunc i32 %392 to i8
  store i8 %393, i8* %285, align 1
  %394 = icmp slt i32 %383, 255
  %395 = select i1 %394, i32 %383, i32 255
  %396 = icmp sgt i32 %395, 0
  %397 = select i1 %396, i32 %395, i32 0
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %284, align 8
  %399 = sub nsw i32 %316, %344
  %400 = sub nsw i32 %322, %344
  %401 = sub nsw i32 %326, %344
  %402 = icmp slt i32 %399, 255
  %403 = select i1 %402, i32 %399, i32 255
  %404 = icmp sgt i32 %403, 0
  %405 = select i1 %404, i32 %403, i32 0
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %289, align 2
  %407 = icmp slt i32 %400, 255
  %408 = select i1 %407, i32 %400, i32 255
  %409 = icmp sgt i32 %408, 0
  %410 = select i1 %409, i32 %408, i32 0
  %411 = trunc i32 %410 to i8
  store i8 %411, i8* %288, align 1
  %412 = icmp slt i32 %401, 255
  %413 = select i1 %412, i32 %401, i32 255
  %414 = icmp sgt i32 %413, 0
  %415 = select i1 %414, i32 %413, i32 0
  %416 = trunc i32 %415 to i8
  store i8 %416, i8* %287, align 4
  %417 = icmp slt i32 %3, %5
  br i1 %417, label %418, label %430

418:                                              ; preds = %277
  %419 = icmp slt i32 %2, %4
  %420 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %421 = add nsw i32 %2, 1
  %422 = icmp slt i32 %421, %4
  %423 = add nsw i32 %2, 2
  %424 = icmp slt i32 %423, %4
  %425 = add nsw i32 %2, 3
  %426 = icmp slt i32 %425, %4
  %427 = sext i32 %6 to i64
  %428 = sext i32 %3 to i64
  %429 = sext i32 %5 to i64
  br label %431

430:                                              ; preds = %545, %277
  br i1 %15, label %552, label %553

431:                                              ; preds = %545, %418
  %432 = phi i64 [ 0, %418 ], [ %547, %545 ]
  %433 = phi i8* [ %1, %418 ], [ %546, %545 ]
  br i1 %419, label %434, label %459

434:                                              ; preds = %431
  %435 = trunc i64 %432 to i32
  %436 = lshr i32 %435, 3
  %437 = sub nuw nsw i32 1, %436
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 2, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = lshr i32 %441, %435
  %443 = and i32 %442, 1
  %444 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 1, i64 %438
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i32
  %447 = lshr i32 %446, %435
  %448 = shl nuw nsw i32 %447, 1
  %449 = and i32 %448, 2
  %450 = or i32 %449, %443
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %451
  %453 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %432, i64 0
  %454 = load i8, i8* %453, align 1
  %455 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %451, i32 3
  store i8 %454, i8* %455, align 1
  %456 = bitcast %"struct.(anonymous namespace)::bgra8"* %452 to i32*
  %457 = bitcast i8* %433 to i32*
  %458 = load i32, i32* %456, align 4
  store i32 %458, i32* %457, align 1
  br label %459

459:                                              ; preds = %434, %431
  br i1 %422, label %460, label %487

460:                                              ; preds = %459
  %461 = trunc i64 %432 to i32
  %462 = add nuw nsw i32 %461, 4
  %463 = lshr i32 %462, 3
  %464 = sub nuw nsw i32 1, %463
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 2, i64 %465
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i32
  %469 = lshr i32 %468, %462
  %470 = and i32 %469, 1
  %471 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 1, i64 %465
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i32
  %474 = lshr i32 %473, %462
  %475 = shl nuw nsw i32 %474, 1
  %476 = and i32 %475, 2
  %477 = or i32 %476, %470
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %478
  %480 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %432, i64 1
  %481 = load i8, i8* %480, align 1
  %482 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %478, i32 3
  store i8 %481, i8* %482, align 1
  %483 = getelementptr inbounds i8, i8* %433, i64 4
  %484 = bitcast %"struct.(anonymous namespace)::bgra8"* %479 to i32*
  %485 = bitcast i8* %483 to i32*
  %486 = load i32, i32* %484, align 4
  store i32 %486, i32* %485, align 1
  br label %487

487:                                              ; preds = %460, %459
  br i1 %424, label %488, label %516

488:                                              ; preds = %487
  %489 = trunc i64 %432 to i32
  %490 = add nuw nsw i32 %489, 8
  %491 = lshr i32 %490, 3
  %492 = sub nuw nsw i32 1, %491
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 2, i64 %493
  %495 = load i8, i8* %494, align 1
  %496 = zext i8 %495 to i32
  %497 = and i32 %490, 7
  %498 = lshr i32 %496, %497
  %499 = and i32 %498, 1
  %500 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 1, i64 %493
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i32
  %503 = lshr i32 %502, %497
  %504 = shl nuw nsw i32 %503, 1
  %505 = and i32 %504, 2
  %506 = or i32 %505, %499
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %507
  %509 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %432, i64 2
  %510 = load i8, i8* %509, align 1
  %511 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %507, i32 3
  store i8 %510, i8* %511, align 1
  %512 = getelementptr inbounds i8, i8* %433, i64 8
  %513 = bitcast %"struct.(anonymous namespace)::bgra8"* %508 to i32*
  %514 = bitcast i8* %512 to i32*
  %515 = load i32, i32* %513, align 4
  store i32 %515, i32* %514, align 1
  br label %516

516:                                              ; preds = %488, %487
  br i1 %426, label %517, label %545

517:                                              ; preds = %516
  %518 = trunc i64 %432 to i32
  %519 = add nuw nsw i32 %518, 12
  %520 = lshr i32 %519, 3
  %521 = sub nuw nsw i32 1, %520
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 2, i64 %522
  %524 = load i8, i8* %523, align 1
  %525 = zext i8 %524 to i32
  %526 = and i32 %519, 7
  %527 = lshr i32 %525, %526
  %528 = and i32 %527, 1
  %529 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %420, i64 0, i32 1, i64 %522
  %530 = load i8, i8* %529, align 1
  %531 = zext i8 %530 to i32
  %532 = lshr i32 %531, %526
  %533 = shl nuw nsw i32 %532, 1
  %534 = and i32 %533, 2
  %535 = or i32 %534, %528
  %536 = zext i32 %535 to i64
  %537 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %536
  %538 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %432, i64 3
  %539 = load i8, i8* %538, align 1
  %540 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %10, i64 0, i64 %536, i32 3
  store i8 %539, i8* %540, align 1
  %541 = getelementptr inbounds i8, i8* %433, i64 12
  %542 = bitcast %"struct.(anonymous namespace)::bgra8"* %537 to i32*
  %543 = bitcast i8* %541 to i32*
  %544 = load i32, i32* %542, align 4
  store i32 %544, i32* %543, align 1
  br label %545

545:                                              ; preds = %517, %516
  %546 = getelementptr inbounds i8, i8* %433, i64 %427
  %547 = add nuw nsw i64 %432, 1
  %548 = icmp ult i64 %547, 4
  %549 = add nsw i64 %547, %428
  %550 = icmp slt i64 %549, %429
  %551 = and i1 %548, %550
  br i1 %551, label %431, label %430

552:                                              ; preds = %430
  tail call fastcc void @_ZNK12_GLOBAL__N_14ETC228decodePunchThroughAlphaBlockEPhiiiii(%"struct.(anonymous namespace)::ETC2"* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #6
  br label %553

553:                                              ; preds = %430, %552
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %278) #4
  br label %771

554:                                              ; preds = %266
  %555 = icmp ugt i32 %37, 31
  br i1 %555, label %556, label %720

556:                                              ; preds = %554
  %557 = getelementptr inbounds %"struct.(anonymous namespace)::ETC2", %"struct.(anonymous namespace)::ETC2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %558 = load i64, i64* %557, align 1
  %559 = lshr i64 %558, 1
  %560 = trunc i64 %559 to i32
  %561 = and i32 %560, 63
  %562 = shl nuw nsw i32 %561, 2
  %563 = lshr i32 %561, 4
  %564 = or i32 %562, %563
  %565 = trunc i64 %558 to i32
  %566 = shl i32 %565, 6
  %567 = and i32 %566, 64
  %568 = lshr i64 %558, 9
  %569 = trunc i64 %568 to i32
  %570 = and i32 %569, 63
  %571 = or i32 %567, %570
  %572 = shl nuw nsw i32 %571, 1
  %573 = lshr exact i32 %567, 6
  %574 = or i32 %572, %573
  %575 = lshr i64 %558, 3
  %576 = trunc i64 %575 to i32
  %577 = and i32 %576, 32
  %578 = lshr i64 %558, 16
  %579 = trunc i64 %578 to i32
  %580 = and i32 %579, 24
  %581 = or i32 %577, %580
  %582 = lshr i64 %558, 15
  %583 = trunc i64 %582 to i32
  %584 = and i32 %583, 6
  %585 = lshr i64 %558, 31
  %586 = trunc i64 %585 to i32
  %587 = and i32 %586, 1
  %588 = or i32 %587, %584
  %589 = or i32 %588, %581
  %590 = shl nuw nsw i32 %589, 2
  %591 = lshr i32 %581, 4
  %592 = or i32 %590, %591
  %593 = lshr i64 %558, 25
  %594 = trunc i64 %593 to i32
  %595 = and i32 %594, 62
  %596 = lshr i64 %558, 33
  %597 = trunc i64 %596 to i32
  %598 = and i32 %597, 127
  %599 = lshr i64 %558, 27
  %600 = trunc i64 %599 to i32
  %601 = and i32 %600, 32
  %602 = lshr i64 %558, 43
  %603 = trunc i64 %602 to i32
  %604 = and i32 %603, 31
  %605 = or i32 %601, %604
  %606 = lshr i64 %558, 37
  %607 = trunc i64 %606 to i32
  %608 = and i32 %607, 56
  %609 = lshr i64 %558, 46
  %610 = trunc i64 %609 to i32
  %611 = and i32 %610, 124
  %612 = lshr i64 %558, 56
  %613 = trunc i64 %612 to i32
  %614 = and i32 %613, 63
  %615 = icmp slt i32 %3, %5
  br i1 %615, label %616, label %771

616:                                              ; preds = %556
  %617 = shl nuw nsw i32 %614, 2
  %618 = lshr i32 %614, 4
  %619 = or i32 %617, %618
  %620 = lshr i64 %558, 62
  %621 = trunc i64 %620 to i32
  %622 = or i32 %611, %621
  %623 = shl nuw nsw i32 %622, 1
  %624 = lshr i32 %611, 6
  %625 = or i32 %623, %624
  %626 = lshr i64 %558, 53
  %627 = trunc i64 %626 to i32
  %628 = and i32 %627, 7
  %629 = or i32 %608, %628
  %630 = shl nuw nsw i32 %629, 2
  %631 = lshr i32 %608, 4
  %632 = or i32 %630, %631
  %633 = shl nuw nsw i32 %605, 2
  %634 = lshr i32 %605, 4
  %635 = or i32 %633, %634
  %636 = shl nuw nsw i32 %598, 1
  %637 = lshr i32 %598, 6
  %638 = or i32 %636, %637
  %639 = lshr i64 %558, 24
  %640 = trunc i64 %639 to i32
  %641 = and i32 %640, 1
  %642 = or i32 %595, %641
  %643 = shl nuw nsw i32 %642, 2
  %644 = lshr i32 %595, 4
  %645 = or i32 %643, %644
  %646 = sub nsw i32 %632, %564
  %647 = sub nsw i32 %625, %574
  %648 = sub nsw i32 %619, %592
  %649 = icmp slt i32 %2, %4
  %650 = sub nsw i32 %645, %564
  %651 = sub nsw i32 %638, %574
  %652 = sub nsw i32 %635, %592
  %653 = sext i32 %6 to i64
  %654 = sext i32 %2 to i64
  %655 = sext i32 %4 to i64
  %656 = sext i32 %3 to i64
  %657 = sext i32 %5 to i64
  br label %658

658:                                              ; preds = %670, %616
  %659 = phi i64 [ 0, %616 ], [ %672, %670 ]
  %660 = phi i32 [ 0, %616 ], [ %673, %670 ]
  %661 = phi i8* [ %1, %616 ], [ %671, %670 ]
  %662 = mul nsw i32 %660, %646
  %663 = add nsw i32 %662, 2
  %664 = mul nsw i32 %660, %647
  %665 = add nsw i32 %664, 2
  %666 = mul nsw i32 %660, %648
  %667 = add nsw i32 %666, 2
  br i1 %649, label %668, label %670

668:                                              ; preds = %658
  %669 = bitcast i8* %661 to %"struct.(anonymous namespace)::bgra8"*
  br label %678

670:                                              ; preds = %678, %658
  %671 = getelementptr inbounds i8, i8* %661, i64 %653
  %672 = add nuw nsw i64 %659, 1
  %673 = add nuw nsw i32 %660, 1
  %674 = icmp ult i64 %672, 4
  %675 = add nsw i64 %672, %656
  %676 = icmp slt i64 %675, %657
  %677 = and i1 %674, %676
  br i1 %677, label %658, label %771

678:                                              ; preds = %678, %668
  %679 = phi i64 [ 0, %668 ], [ %714, %678 ]
  %680 = phi i32 [ 0, %668 ], [ %715, %678 ]
  %681 = mul nsw i32 %680, %650
  %682 = add nsw i32 %663, %681
  %683 = ashr i32 %682, 2
  %684 = add nsw i32 %683, %564
  %685 = mul nsw i32 %680, %651
  %686 = add nsw i32 %665, %685
  %687 = ashr i32 %686, 2
  %688 = add nsw i32 %687, %574
  %689 = mul nsw i32 %680, %652
  %690 = add nsw i32 %667, %689
  %691 = ashr i32 %690, 2
  %692 = add nsw i32 %691, %592
  %693 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 %659, i64 %679
  %694 = load i8, i8* %693, align 1
  %695 = icmp slt i32 %684, 255
  %696 = select i1 %695, i32 %684, i32 255
  %697 = icmp sgt i32 %696, 0
  %698 = select i1 %697, i32 %696, i32 0
  %699 = trunc i32 %698 to i8
  %700 = getelementptr inbounds %"struct.(anonymous namespace)::bgra8", %"struct.(anonymous namespace)::bgra8"* %669, i64 %679, i32 2
  store i8 %699, i8* %700, align 1
  %701 = icmp slt i32 %688, 255
  %702 = select i1 %701, i32 %688, i32 255
  %703 = icmp sgt i32 %702, 0
  %704 = select i1 %703, i32 %702, i32 0
  %705 = trunc i32 %704 to i8
  %706 = getelementptr inbounds %"struct.(anonymous namespace)::bgra8", %"struct.(anonymous namespace)::bgra8"* %669, i64 %679, i32 1
  store i8 %705, i8* %706, align 1
  %707 = icmp slt i32 %692, 255
  %708 = select i1 %707, i32 %692, i32 255
  %709 = icmp sgt i32 %708, 0
  %710 = select i1 %709, i32 %708, i32 0
  %711 = trunc i32 %710 to i8
  %712 = getelementptr inbounds %"struct.(anonymous namespace)::bgra8", %"struct.(anonymous namespace)::bgra8"* %669, i64 %679, i32 0
  store i8 %711, i8* %712, align 1
  %713 = getelementptr inbounds %"struct.(anonymous namespace)::bgra8", %"struct.(anonymous namespace)::bgra8"* %669, i64 %679, i32 3
  store i8 %694, i8* %713, align 1
  %714 = add nuw nsw i64 %679, 1
  %715 = add nuw nsw i32 %680, 1
  %716 = icmp ult i64 %714, 4
  %717 = add nsw i64 %714, %654
  %718 = icmp slt i64 %717, %655
  %719 = and i1 %716, %718
  br i1 %719, label %678, label %670

720:                                              ; preds = %554
  %721 = shl nuw nsw i24 %30, 3
  %722 = zext i24 %721 to i32
  %723 = lshr i32 %31, 2
  %724 = or i32 %723, %722
  %725 = shl nuw nsw i24 %273, 3
  %726 = zext i24 %725 to i32
  %727 = lshr i32 %274, 2
  %728 = or i32 %727, %726
  %729 = shl nuw nsw i24 %22, 3
  %730 = zext i24 %729 to i32
  %731 = lshr i32 %23, 2
  %732 = or i32 %731, %730
  %733 = shl nsw i32 %29, 3
  %734 = lshr i32 %29, 2
  %735 = or i32 %733, %734
  %736 = shl nsw i32 %275, 3
  %737 = lshr i32 %275, 2
  %738 = or i32 %736, %737
  %739 = shl nsw i32 %37, 3
  %740 = lshr i32 %37, 2
  %741 = or i32 %739, %740
  tail call fastcc void @_ZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %732, i32 %728, i32 %724, i32 %735, i32 %738, i32 %741, [4 x i8]* %7, i1 zeroext %15) #6
  br label %771

742:                                              ; preds = %9
  %743 = lshr i24 %19, 4
  %744 = and i24 %743, 15
  %745 = shl nuw nsw i24 %744, 4
  %746 = or i24 %745, %744
  %747 = zext i24 %746 to i32
  %748 = lshr i24 %19, 12
  %749 = and i24 %748, 15
  %750 = shl nuw nsw i24 %749, 4
  %751 = or i24 %750, %749
  %752 = zext i24 %751 to i32
  %753 = lshr i24 %19, 20
  %754 = shl nuw nsw i24 %753, 4
  %755 = or i24 %754, %753
  %756 = zext i24 %755 to i32
  %757 = and i24 %19, 15
  %758 = shl nuw nsw i24 %757, 4
  %759 = or i24 %758, %757
  %760 = zext i24 %759 to i32
  %761 = lshr i24 %19, 8
  %762 = and i24 %761, 15
  %763 = shl nuw nsw i24 %762, 4
  %764 = or i24 %763, %762
  %765 = zext i24 %764 to i32
  %766 = lshr i24 %19, 16
  %767 = and i24 %766, 15
  %768 = shl nuw nsw i24 %767, 4
  %769 = or i24 %768, %767
  %770 = zext i24 %769 to i32
  tail call fastcc void @_ZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %747, i32 %752, i32 %756, i32 %760, i32 %765, i32 %770, [4 x i8]* %7, i1 zeroext false) #6
  br label %771

771:                                              ; preds = %670, %556, %265, %720, %553, %742
  ret void
}

; Function Attrs: inlinehint norecurse nounwind optsize readonly ssp uwtable
define internal fastcc i32 @_ZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEii(%"struct.(anonymous namespace)::ETC2"* nocapture readonly, i32, i32) unnamed_addr #3 align 2 {
  %4 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.9*
  %5 = getelementptr inbounds %struct.anon.9, %struct.anon.9* %4, i64 0, i32 1
  %6 = bitcast [7 x i8]* %5 to i56*
  %7 = load i56, i56* %6, align 1
  %8 = and i56 %7, 15
  %9 = zext i56 %8 to i64
  %10 = shl i32 %1, 2
  %11 = add nsw i32 %10, %2
  switch i32 %11, label %68 [
    i32 0, label %12
    i32 1, label %15
    i32 2, label %18
    i32 3, label %24
    i32 4, label %27
    i32 5, label %30
    i32 6, label %36
    i32 7, label %39
    i32 8, label %42
    i32 9, label %45
    i32 10, label %48
    i32 11, label %54
    i32 12, label %57
    i32 13, label %60
    i32 14, label %65
  ]

12:                                               ; preds = %3
  %13 = lshr i56 %7, 13
  %14 = and i56 %13, 7
  br label %71

15:                                               ; preds = %3
  %16 = lshr i56 %7, 10
  %17 = and i56 %16, 7
  br label %71

18:                                               ; preds = %3
  %19 = lshr i56 %7, 7
  %20 = and i56 %19, 6
  %21 = lshr i56 %7, 23
  %22 = and i56 %21, 1
  %23 = or i56 %20, %22
  br label %71

24:                                               ; preds = %3
  %25 = lshr i56 %7, 20
  %26 = and i56 %25, 7
  br label %71

27:                                               ; preds = %3
  %28 = lshr i56 %7, 17
  %29 = and i56 %28, 7
  br label %71

30:                                               ; preds = %3
  %31 = lshr i56 %7, 14
  %32 = and i56 %31, 4
  %33 = lshr i56 %7, 30
  %34 = and i56 %33, 3
  %35 = or i56 %32, %34
  br label %71

36:                                               ; preds = %3
  %37 = lshr i56 %7, 27
  %38 = and i56 %37, 7
  br label %71

39:                                               ; preds = %3
  %40 = lshr i56 %7, 24
  %41 = and i56 %40, 7
  br label %71

42:                                               ; preds = %3
  %43 = lshr i56 %7, 37
  %44 = and i56 %43, 7
  br label %71

45:                                               ; preds = %3
  %46 = lshr i56 %7, 34
  %47 = and i56 %46, 7
  br label %71

48:                                               ; preds = %3
  %49 = lshr i56 %7, 31
  %50 = and i56 %49, 6
  %51 = lshr i56 %7, 47
  %52 = and i56 %51, 1
  %53 = or i56 %50, %52
  br label %71

54:                                               ; preds = %3
  %55 = lshr i56 %7, 44
  %56 = and i56 %55, 7
  br label %71

57:                                               ; preds = %3
  %58 = lshr i56 %7, 41
  %59 = and i56 %58, 7
  br label %71

60:                                               ; preds = %3
  %61 = lshr i56 %7, 38
  %62 = and i56 %61, 4
  %63 = lshr i56 %7, 54
  %64 = or i56 %62, %63
  br label %71

65:                                               ; preds = %3
  %66 = lshr i56 %7, 51
  %67 = and i56 %66, 7
  br label %71

68:                                               ; preds = %3
  %69 = lshr i56 %7, 48
  %70 = and i56 %69, 7
  br label %71

71:                                               ; preds = %12, %15, %18, %24, %27, %30, %36, %39, %42, %45, %48, %54, %57, %60, %65, %68
  %72 = phi i56 [ %14, %12 ], [ %17, %15 ], [ %23, %18 ], [ %26, %24 ], [ %29, %27 ], [ %35, %30 ], [ %38, %36 ], [ %41, %39 ], [ %44, %42 ], [ %47, %45 ], [ %53, %48 ], [ %56, %54 ], [ %59, %57 ], [ %64, %60 ], [ %67, %65 ], [ %70, %68 ]
  %73 = zext i56 %72 to i64
  %74 = shl i64 %73, 32
  %75 = ashr exact i64 %74, 32
  %76 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* @_ZZNK12_GLOBAL__N_14ETC224getSingleChannelModifierEiiE13modifierTable, i64 0, i64 %9, i64 %75
  %77 = load i32, i32* %76, align 4
  ret i32 %77
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define internal fastcc void @_ZNK12_GLOBAL__N_14ETC228decodePunchThroughAlphaBlockEPhiiiii(%"struct.(anonymous namespace)::ETC2"* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32) unnamed_addr #2 align 2 {
  %8 = icmp slt i32 %3, %5
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp slt i32 %2, %4
  %11 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %12 = sext i32 %6 to i64
  %13 = sext i32 %2 to i64
  %14 = sext i32 %4 to i64
  %15 = sext i32 %3 to i64
  %16 = sext i32 %5 to i64
  br label %17

17:                                               ; preds = %9, %23
  %18 = phi i64 [ 0, %9 ], [ %25, %23 ]
  %19 = phi i8* [ %1, %9 ], [ %24, %23 ]
  br i1 %10, label %20, label %23

20:                                               ; preds = %17
  %21 = bitcast i8* %19 to %"struct.(anonymous namespace)::bgra8"*
  br label %30

22:                                               ; preds = %23, %7
  ret void

23:                                               ; preds = %55, %17
  %24 = getelementptr inbounds i8, i8* %19, i64 %12
  %25 = add nuw nsw i64 %18, 1
  %26 = icmp ult i64 %25, 4
  %27 = add nsw i64 %25, %15
  %28 = icmp slt i64 %27, %16
  %29 = and i1 %26, %28
  br i1 %29, label %17, label %22

30:                                               ; preds = %20, %55
  %31 = phi i64 [ 0, %20 ], [ %56, %55 ]
  %32 = shl nsw i64 %31, 2
  %33 = add nuw nsw i64 %32, %18
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 7
  %36 = lshr i32 %34, 3
  %37 = sub nsw i32 1, %36
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %11, i64 0, i32 2, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = lshr i32 %41, %35
  %43 = and i32 %42, 1
  %44 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %11, i64 0, i32 1, i64 %38
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = lshr i32 %46, %35
  %48 = shl nuw nsw i32 %47, 1
  %49 = and i32 %48, 2
  %50 = or i32 %49, %43
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %52, label %55

52:                                               ; preds = %30
  %53 = getelementptr inbounds %"struct.(anonymous namespace)::bgra8", %"struct.(anonymous namespace)::bgra8"* %21, i64 %31, i32 0
  %54 = bitcast i8* %53 to i32*
  store i32 0, i32* %54, align 1
  br label %55

55:                                               ; preds = %30, %52
  %56 = add nuw nsw i64 %31, 1
  %57 = icmp ult i64 %56, 4
  %58 = add nsw i64 %56, %13
  %59 = icmp slt i64 %58, %14
  %60 = and i1 %57, %59
  br i1 %60, label %30, label %23
}

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hb(%"struct.(anonymous namespace)::ETC2"* nocapture readonly, i8* nocapture, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8]* nocapture readonly, i1 zeroext) unnamed_addr #0 align 2 {
  %16 = alloca [4 x %"struct.(anonymous namespace)::bgra8"], align 16
  %17 = alloca [4 x %"struct.(anonymous namespace)::bgra8"], align 16
  %18 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #4
  %19 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 0, i32 1
  %20 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 0, i32 2
  %21 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 1, i32 0
  %22 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 1, i32 1
  %23 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 1, i32 2
  %24 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 2, i32 0
  %25 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 2, i32 1
  %26 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 2, i32 2
  %27 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 3, i32 0
  %28 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 3, i32 1
  %29 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 3, i32 2
  %30 = select i1 %14, [8 x [4 x i32]]* @_ZZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hbE26intensityModifierNonOpaque, [8 x [4 x i32]]* @_ZZNK12_GLOBAL__N_14ETC235decodeIndividualOrDifferentialBlockEPhiiiiiiiiiiiPA4_hbE24intensityModifierDefault
  %31 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #4
  %32 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 0, i32 1
  %33 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 0, i32 2
  %34 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 1, i32 0
  %35 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 1, i32 1
  %36 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 1, i32 2
  %37 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 2, i32 0
  %38 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 2, i32 1
  %39 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 2, i32 2
  %40 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 3, i32 0
  %41 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 3, i32 1
  %42 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 3, i32 2
  %43 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.2*
  %44 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %43, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 16, i1 false)
  %45 = load i8, i8* %44, align 1
  %46 = lshr i8 %45, 5
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %47, i64 0
  %49 = load i32, i32* %48, align 16
  %50 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %47, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %47, i64 2
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %47, i64 3
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %49, %7
  %57 = add nsw i32 %49, %8
  %58 = add nsw i32 %49, %9
  %59 = icmp slt i32 %56, 255
  %60 = select i1 %59, i32 %56, i32 255
  %61 = icmp sgt i32 %60, 0
  %62 = select i1 %61, i32 %60, i32 0
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %20, align 2
  %64 = icmp slt i32 %57, 255
  %65 = select i1 %64, i32 %57, i32 255
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %19, align 1
  %69 = icmp slt i32 %58, 255
  %70 = select i1 %69, i32 %58, i32 255
  %71 = icmp sgt i32 %70, 0
  %72 = select i1 %71, i32 %70, i32 0
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %18, align 16
  %74 = add nsw i32 %51, %7
  %75 = add nsw i32 %51, %8
  %76 = add nsw i32 %51, %9
  %77 = icmp slt i32 %74, 255
  %78 = select i1 %77, i32 %74, i32 255
  %79 = icmp sgt i32 %78, 0
  %80 = select i1 %79, i32 %78, i32 0
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %23, align 2
  %82 = icmp slt i32 %75, 255
  %83 = select i1 %82, i32 %75, i32 255
  %84 = icmp sgt i32 %83, 0
  %85 = select i1 %84, i32 %83, i32 0
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %22, align 1
  %87 = icmp slt i32 %76, 255
  %88 = select i1 %87, i32 %76, i32 255
  %89 = icmp sgt i32 %88, 0
  %90 = select i1 %89, i32 %88, i32 0
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %21, align 4
  %92 = add nsw i32 %53, %7
  %93 = add nsw i32 %53, %8
  %94 = add nsw i32 %53, %9
  %95 = icmp slt i32 %92, 255
  %96 = select i1 %95, i32 %92, i32 255
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i8
  store i8 %99, i8* %26, align 2
  %100 = icmp slt i32 %93, 255
  %101 = select i1 %100, i32 %93, i32 255
  %102 = icmp sgt i32 %101, 0
  %103 = select i1 %102, i32 %101, i32 0
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %25, align 1
  %105 = icmp slt i32 %94, 255
  %106 = select i1 %105, i32 %94, i32 255
  %107 = icmp sgt i32 %106, 0
  %108 = select i1 %107, i32 %106, i32 0
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %24, align 8
  %110 = add nsw i32 %55, %7
  %111 = add nsw i32 %55, %8
  %112 = add nsw i32 %55, %9
  %113 = icmp slt i32 %110, 255
  %114 = select i1 %113, i32 %110, i32 255
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %29, align 2
  %118 = icmp slt i32 %111, 255
  %119 = select i1 %118, i32 %111, i32 255
  %120 = icmp sgt i32 %119, 0
  %121 = select i1 %120, i32 %119, i32 0
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %28, align 1
  %123 = icmp slt i32 %112, 255
  %124 = select i1 %123, i32 %112, i32 255
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %27, align 4
  %128 = lshr i8 %45, 2
  %129 = and i8 %128, 7
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %130, i64 0
  %132 = load i32, i32* %131, align 16
  %133 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %130, i64 1
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %130, i64 2
  %136 = load i32, i32* %135, align 8
  %137 = getelementptr inbounds [8 x [4 x i32]], [8 x [4 x i32]]* %30, i64 0, i64 %130, i64 3
  %138 = load i32, i32* %137, align 4
  %139 = add nsw i32 %132, %10
  %140 = add nsw i32 %132, %11
  %141 = add nsw i32 %132, %12
  %142 = icmp slt i32 %139, 255
  %143 = select i1 %142, i32 %139, i32 255
  %144 = icmp sgt i32 %143, 0
  %145 = select i1 %144, i32 %143, i32 0
  %146 = trunc i32 %145 to i8
  store i8 %146, i8* %33, align 2
  %147 = icmp slt i32 %140, 255
  %148 = select i1 %147, i32 %140, i32 255
  %149 = icmp sgt i32 %148, 0
  %150 = select i1 %149, i32 %148, i32 0
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %32, align 1
  %152 = icmp slt i32 %141, 255
  %153 = select i1 %152, i32 %141, i32 255
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %31, align 16
  %157 = add nsw i32 %134, %10
  %158 = add nsw i32 %134, %11
  %159 = add nsw i32 %134, %12
  %160 = icmp slt i32 %157, 255
  %161 = select i1 %160, i32 %157, i32 255
  %162 = icmp sgt i32 %161, 0
  %163 = select i1 %162, i32 %161, i32 0
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %36, align 2
  %165 = icmp slt i32 %158, 255
  %166 = select i1 %165, i32 %158, i32 255
  %167 = icmp sgt i32 %166, 0
  %168 = select i1 %167, i32 %166, i32 0
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %35, align 1
  %170 = icmp slt i32 %159, 255
  %171 = select i1 %170, i32 %159, i32 255
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %34, align 4
  %175 = add nsw i32 %136, %10
  %176 = add nsw i32 %136, %11
  %177 = add nsw i32 %136, %12
  %178 = icmp slt i32 %175, 255
  %179 = select i1 %178, i32 %175, i32 255
  %180 = icmp sgt i32 %179, 0
  %181 = select i1 %180, i32 %179, i32 0
  %182 = trunc i32 %181 to i8
  store i8 %182, i8* %39, align 2
  %183 = icmp slt i32 %176, 255
  %184 = select i1 %183, i32 %176, i32 255
  %185 = icmp sgt i32 %184, 0
  %186 = select i1 %185, i32 %184, i32 0
  %187 = trunc i32 %186 to i8
  store i8 %187, i8* %38, align 1
  %188 = icmp slt i32 %177, 255
  %189 = select i1 %188, i32 %177, i32 255
  %190 = icmp sgt i32 %189, 0
  %191 = select i1 %190, i32 %189, i32 0
  %192 = trunc i32 %191 to i8
  store i8 %192, i8* %37, align 8
  %193 = add nsw i32 %138, %10
  %194 = add nsw i32 %138, %11
  %195 = add nsw i32 %138, %12
  %196 = icmp slt i32 %193, 255
  %197 = select i1 %196, i32 %193, i32 255
  %198 = icmp sgt i32 %197, 0
  %199 = select i1 %198, i32 %197, i32 0
  %200 = trunc i32 %199 to i8
  store i8 %200, i8* %42, align 2
  %201 = icmp slt i32 %194, 255
  %202 = select i1 %201, i32 %194, i32 255
  %203 = icmp sgt i32 %202, 0
  %204 = select i1 %203, i32 %202, i32 0
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %41, align 1
  %206 = icmp slt i32 %195, 255
  %207 = select i1 %206, i32 %195, i32 255
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = trunc i32 %209 to i8
  store i8 %210, i8* %40, align 4
  %211 = and i8 %45, 1
  %212 = icmp eq i8 %211, 0
  %213 = icmp slt i32 %3, %5
  br i1 %212, label %227, label %214

214:                                              ; preds = %15
  br i1 %213, label %215, label %240

215:                                              ; preds = %214
  %216 = icmp slt i32 %2, %4
  %217 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %218 = add nsw i32 %2, 1
  %219 = icmp slt i32 %218, %4
  %220 = add nsw i32 %2, 2
  %221 = icmp slt i32 %220, %4
  %222 = add nsw i32 %2, 3
  %223 = icmp slt i32 %222, %4
  %224 = sext i32 %6 to i64
  %225 = sext i32 %3 to i64
  %226 = sext i32 %5 to i64
  br label %254

227:                                              ; preds = %15
  br i1 %213, label %228, label %625

228:                                              ; preds = %227
  %229 = icmp slt i32 %2, %4
  %230 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %231 = add nsw i32 %2, 1
  %232 = icmp slt i32 %231, %4
  %233 = add nsw i32 %2, 2
  %234 = icmp slt i32 %233, %4
  %235 = add nsw i32 %2, 3
  %236 = icmp slt i32 %235, %4
  %237 = sext i32 %6 to i64
  %238 = sext i32 %3 to i64
  %239 = sext i32 %5 to i64
  br label %502

240:                                              ; preds = %370, %214
  %241 = phi i8* [ %1, %214 ], [ %371, %370 ]
  %242 = add nsw i32 %3, 2
  %243 = icmp slt i32 %242, %5
  br i1 %243, label %244, label %625

244:                                              ; preds = %240
  %245 = icmp slt i32 %2, %4
  %246 = bitcast %"struct.(anonymous namespace)::ETC2"* %0 to %struct.anon.0*
  %247 = add nsw i32 %2, 1
  %248 = icmp slt i32 %247, %4
  %249 = add nsw i32 %2, 2
  %250 = icmp slt i32 %249, %4
  %251 = add nsw i32 %2, 3
  %252 = icmp slt i32 %251, %4
  %253 = sext i32 %6 to i64
  br label %377

254:                                              ; preds = %215, %370
  %255 = phi i64 [ 0, %215 ], [ %372, %370 ]
  %256 = phi i8* [ %1, %215 ], [ %371, %370 ]
  br i1 %216, label %257, label %282

257:                                              ; preds = %254
  %258 = trunc i64 %255 to i32
  %259 = lshr i32 %258, 3
  %260 = sub nuw nsw i32 1, %259
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 2, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = lshr i32 %264, %258
  %266 = and i32 %265, 1
  %267 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 1, i64 %261
  %268 = load i8, i8* %267, align 1
  %269 = zext i8 %268 to i32
  %270 = lshr i32 %269, %258
  %271 = shl nuw nsw i32 %270, 1
  %272 = and i32 %271, 2
  %273 = or i32 %272, %266
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %274
  %276 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %255, i64 0
  %277 = load i8, i8* %276, align 1
  %278 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %274, i32 3
  store i8 %277, i8* %278, align 1
  %279 = bitcast %"struct.(anonymous namespace)::bgra8"* %275 to i32*
  %280 = bitcast i8* %256 to i32*
  %281 = load i32, i32* %279, align 4
  store i32 %281, i32* %280, align 1
  br label %282

282:                                              ; preds = %257, %254
  br i1 %219, label %283, label %310

283:                                              ; preds = %282
  %284 = trunc i64 %255 to i32
  %285 = add nuw nsw i32 %284, 4
  %286 = lshr i32 %285, 3
  %287 = sub nuw nsw i32 1, %286
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 2, i64 %288
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i32
  %292 = lshr i32 %291, %285
  %293 = and i32 %292, 1
  %294 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 1, i64 %288
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = lshr i32 %296, %285
  %298 = shl nuw nsw i32 %297, 1
  %299 = and i32 %298, 2
  %300 = or i32 %299, %293
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %301
  %303 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %255, i64 1
  %304 = load i8, i8* %303, align 1
  %305 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %301, i32 3
  store i8 %304, i8* %305, align 1
  %306 = getelementptr inbounds i8, i8* %256, i64 4
  %307 = bitcast %"struct.(anonymous namespace)::bgra8"* %302 to i32*
  %308 = bitcast i8* %306 to i32*
  %309 = load i32, i32* %307, align 4
  store i32 %309, i32* %308, align 1
  br label %310

310:                                              ; preds = %283, %282
  br i1 %221, label %311, label %340

311:                                              ; preds = %310
  %312 = add nuw nsw i64 %255, 8
  %313 = trunc i64 %312 to i32
  %314 = lshr i32 %313, 3
  %315 = sub nuw nsw i32 1, %314
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 2, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = trunc i64 %312 to i32
  %321 = and i32 %320, 7
  %322 = lshr i32 %319, %321
  %323 = and i32 %322, 1
  %324 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 1, i64 %316
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i32
  %327 = lshr i32 %326, %321
  %328 = shl nuw nsw i32 %327, 1
  %329 = and i32 %328, 2
  %330 = or i32 %329, %323
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %331
  %333 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %255, i64 2
  %334 = load i8, i8* %333, align 1
  %335 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %331, i32 3
  store i8 %334, i8* %335, align 1
  %336 = getelementptr inbounds i8, i8* %256, i64 8
  %337 = bitcast %"struct.(anonymous namespace)::bgra8"* %332 to i32*
  %338 = bitcast i8* %336 to i32*
  %339 = load i32, i32* %337, align 4
  store i32 %339, i32* %338, align 1
  br label %340

340:                                              ; preds = %311, %310
  br i1 %223, label %341, label %370

341:                                              ; preds = %340
  %342 = add nuw nsw i64 %255, 12
  %343 = trunc i64 %342 to i32
  %344 = lshr i32 %343, 3
  %345 = sub nuw nsw i32 1, %344
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 2, i64 %346
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i32
  %350 = trunc i64 %342 to i32
  %351 = and i32 %350, 7
  %352 = lshr i32 %349, %351
  %353 = and i32 %352, 1
  %354 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %217, i64 0, i32 1, i64 %346
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i32
  %357 = lshr i32 %356, %351
  %358 = shl nuw nsw i32 %357, 1
  %359 = and i32 %358, 2
  %360 = or i32 %359, %353
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %361
  %363 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %255, i64 3
  %364 = load i8, i8* %363, align 1
  %365 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %361, i32 3
  store i8 %364, i8* %365, align 1
  %366 = getelementptr inbounds i8, i8* %256, i64 12
  %367 = bitcast %"struct.(anonymous namespace)::bgra8"* %362 to i32*
  %368 = bitcast i8* %366 to i32*
  %369 = load i32, i32* %367, align 4
  store i32 %369, i32* %368, align 1
  br label %370

370:                                              ; preds = %341, %340
  %371 = getelementptr inbounds i8, i8* %256, i64 %224
  %372 = add nuw nsw i64 %255, 1
  %373 = icmp ult i64 %372, 2
  %374 = add nsw i64 %372, %225
  %375 = icmp slt i64 %374, %226
  %376 = and i1 %373, %375
  br i1 %376, label %254, label %240

377:                                              ; preds = %244, %494
  %378 = phi i64 [ 2, %244 ], [ %496, %494 ]
  %379 = phi i32 [ 2, %244 ], [ %497, %494 ]
  %380 = phi i8* [ %241, %244 ], [ %495, %494 ]
  br i1 %245, label %381, label %406

381:                                              ; preds = %377
  %382 = trunc i64 %378 to i32
  %383 = lshr i32 %382, 3
  %384 = sub nuw nsw i32 1, %383
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 2, i64 %385
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = lshr i32 %388, %382
  %390 = and i32 %389, 1
  %391 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 1, i64 %385
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i32
  %394 = lshr i32 %393, %382
  %395 = shl nuw nsw i32 %394, 1
  %396 = and i32 %395, 2
  %397 = or i32 %396, %390
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %398
  %400 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %378, i64 0
  %401 = load i8, i8* %400, align 1
  %402 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %398, i32 3
  store i8 %401, i8* %402, align 1
  %403 = bitcast %"struct.(anonymous namespace)::bgra8"* %399 to i32*
  %404 = bitcast i8* %380 to i32*
  %405 = load i32, i32* %403, align 4
  store i32 %405, i32* %404, align 1
  br label %406

406:                                              ; preds = %381, %377
  br i1 %248, label %407, label %434

407:                                              ; preds = %406
  %408 = trunc i64 %378 to i32
  %409 = add nuw nsw i32 %408, 4
  %410 = lshr i32 %409, 3
  %411 = sub nuw nsw i32 1, %410
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 2, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i32
  %416 = lshr i32 %415, %409
  %417 = and i32 %416, 1
  %418 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 1, i64 %412
  %419 = load i8, i8* %418, align 1
  %420 = zext i8 %419 to i32
  %421 = lshr i32 %420, %409
  %422 = shl nuw nsw i32 %421, 1
  %423 = and i32 %422, 2
  %424 = or i32 %423, %417
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %425
  %427 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %378, i64 1
  %428 = load i8, i8* %427, align 1
  %429 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %425, i32 3
  store i8 %428, i8* %429, align 1
  %430 = getelementptr inbounds i8, i8* %380, i64 4
  %431 = bitcast %"struct.(anonymous namespace)::bgra8"* %426 to i32*
  %432 = bitcast i8* %430 to i32*
  %433 = load i32, i32* %431, align 4
  store i32 %433, i32* %432, align 1
  br label %434

434:                                              ; preds = %407, %406
  br i1 %250, label %435, label %464

435:                                              ; preds = %434
  %436 = add nuw nsw i64 %378, 8
  %437 = trunc i64 %436 to i32
  %438 = lshr i32 %437, 3
  %439 = sub nuw nsw i32 1, %438
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 2, i64 %440
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = trunc i64 %436 to i32
  %445 = and i32 %444, 7
  %446 = lshr i32 %443, %445
  %447 = and i32 %446, 1
  %448 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 1, i64 %440
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = lshr i32 %450, %445
  %452 = shl nuw nsw i32 %451, 1
  %453 = and i32 %452, 2
  %454 = or i32 %453, %447
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %455
  %457 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %378, i64 2
  %458 = load i8, i8* %457, align 1
  %459 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %455, i32 3
  store i8 %458, i8* %459, align 1
  %460 = getelementptr inbounds i8, i8* %380, i64 8
  %461 = bitcast %"struct.(anonymous namespace)::bgra8"* %456 to i32*
  %462 = bitcast i8* %460 to i32*
  %463 = load i32, i32* %461, align 4
  store i32 %463, i32* %462, align 1
  br label %464

464:                                              ; preds = %435, %434
  br i1 %252, label %465, label %494

465:                                              ; preds = %464
  %466 = add nuw nsw i64 %378, 12
  %467 = trunc i64 %466 to i32
  %468 = lshr i32 %467, 3
  %469 = sub nuw nsw i32 1, %468
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 2, i64 %470
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i32
  %474 = trunc i64 %466 to i32
  %475 = and i32 %474, 7
  %476 = lshr i32 %473, %475
  %477 = and i32 %476, 1
  %478 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %246, i64 0, i32 1, i64 %470
  %479 = load i8, i8* %478, align 1
  %480 = zext i8 %479 to i32
  %481 = lshr i32 %480, %475
  %482 = shl nuw nsw i32 %481, 1
  %483 = and i32 %482, 2
  %484 = or i32 %483, %477
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %485
  %487 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %378, i64 3
  %488 = load i8, i8* %487, align 1
  %489 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %485, i32 3
  store i8 %488, i8* %489, align 1
  %490 = getelementptr inbounds i8, i8* %380, i64 12
  %491 = bitcast %"struct.(anonymous namespace)::bgra8"* %486 to i32*
  %492 = bitcast i8* %490 to i32*
  %493 = load i32, i32* %491, align 4
  store i32 %493, i32* %492, align 1
  br label %494

494:                                              ; preds = %465, %464
  %495 = getelementptr inbounds i8, i8* %380, i64 %253
  %496 = add nuw nsw i64 %378, 1
  %497 = add nuw nsw i32 %379, 1
  %498 = icmp ult i64 %496, 4
  %499 = add nsw i32 %497, %3
  %500 = icmp slt i32 %499, %5
  %501 = and i1 %498, %500
  br i1 %501, label %377, label %625

502:                                              ; preds = %228, %618
  %503 = phi i64 [ 0, %228 ], [ %620, %618 ]
  %504 = phi i8* [ %1, %228 ], [ %619, %618 ]
  br i1 %229, label %505, label %530

505:                                              ; preds = %502
  %506 = trunc i64 %503 to i32
  %507 = lshr i32 %506, 3
  %508 = sub nuw nsw i32 1, %507
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 2, i64 %509
  %511 = load i8, i8* %510, align 1
  %512 = zext i8 %511 to i32
  %513 = lshr i32 %512, %506
  %514 = and i32 %513, 1
  %515 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 1, i64 %509
  %516 = load i8, i8* %515, align 1
  %517 = zext i8 %516 to i32
  %518 = lshr i32 %517, %506
  %519 = shl nuw nsw i32 %518, 1
  %520 = and i32 %519, 2
  %521 = or i32 %520, %514
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %522
  %524 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %503, i64 0
  %525 = load i8, i8* %524, align 1
  %526 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %522, i32 3
  store i8 %525, i8* %526, align 1
  %527 = bitcast %"struct.(anonymous namespace)::bgra8"* %523 to i32*
  %528 = bitcast i8* %504 to i32*
  %529 = load i32, i32* %527, align 4
  store i32 %529, i32* %528, align 1
  br label %530

530:                                              ; preds = %505, %502
  br i1 %232, label %531, label %558

531:                                              ; preds = %530
  %532 = trunc i64 %503 to i32
  %533 = add nuw nsw i32 %532, 4
  %534 = lshr i32 %533, 3
  %535 = sub nuw nsw i32 1, %534
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 2, i64 %536
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = lshr i32 %539, %533
  %541 = and i32 %540, 1
  %542 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 1, i64 %536
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i32
  %545 = lshr i32 %544, %533
  %546 = shl nuw nsw i32 %545, 1
  %547 = and i32 %546, 2
  %548 = or i32 %547, %541
  %549 = zext i32 %548 to i64
  %550 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %549
  %551 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %503, i64 1
  %552 = load i8, i8* %551, align 1
  %553 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %16, i64 0, i64 %549, i32 3
  store i8 %552, i8* %553, align 1
  %554 = getelementptr inbounds i8, i8* %504, i64 4
  %555 = bitcast %"struct.(anonymous namespace)::bgra8"* %550 to i32*
  %556 = bitcast i8* %554 to i32*
  %557 = load i32, i32* %555, align 4
  store i32 %557, i32* %556, align 1
  br label %558

558:                                              ; preds = %531, %530
  br i1 %234, label %559, label %588

559:                                              ; preds = %558
  %560 = add nuw nsw i64 %503, 8
  %561 = trunc i64 %560 to i32
  %562 = lshr i32 %561, 3
  %563 = sub nuw nsw i32 1, %562
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 2, i64 %564
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = trunc i64 %560 to i32
  %569 = and i32 %568, 7
  %570 = lshr i32 %567, %569
  %571 = and i32 %570, 1
  %572 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 1, i64 %564
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i32
  %575 = lshr i32 %574, %569
  %576 = shl nuw nsw i32 %575, 1
  %577 = and i32 %576, 2
  %578 = or i32 %577, %571
  %579 = zext i32 %578 to i64
  %580 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %579
  %581 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %503, i64 2
  %582 = load i8, i8* %581, align 1
  %583 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %579, i32 3
  store i8 %582, i8* %583, align 1
  %584 = getelementptr inbounds i8, i8* %504, i64 8
  %585 = bitcast %"struct.(anonymous namespace)::bgra8"* %580 to i32*
  %586 = bitcast i8* %584 to i32*
  %587 = load i32, i32* %585, align 4
  store i32 %587, i32* %586, align 1
  br label %588

588:                                              ; preds = %559, %558
  br i1 %236, label %589, label %618

589:                                              ; preds = %588
  %590 = add nuw nsw i64 %503, 12
  %591 = trunc i64 %590 to i32
  %592 = lshr i32 %591, 3
  %593 = sub nuw nsw i32 1, %592
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 2, i64 %594
  %596 = load i8, i8* %595, align 1
  %597 = zext i8 %596 to i32
  %598 = trunc i64 %590 to i32
  %599 = and i32 %598, 7
  %600 = lshr i32 %597, %599
  %601 = and i32 %600, 1
  %602 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %230, i64 0, i32 1, i64 %594
  %603 = load i8, i8* %602, align 1
  %604 = zext i8 %603 to i32
  %605 = lshr i32 %604, %599
  %606 = shl nuw nsw i32 %605, 1
  %607 = and i32 %606, 2
  %608 = or i32 %607, %601
  %609 = zext i32 %608 to i64
  %610 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %609
  %611 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 %503, i64 3
  %612 = load i8, i8* %611, align 1
  %613 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::bgra8"], [4 x %"struct.(anonymous namespace)::bgra8"]* %17, i64 0, i64 %609, i32 3
  store i8 %612, i8* %613, align 1
  %614 = getelementptr inbounds i8, i8* %504, i64 12
  %615 = bitcast %"struct.(anonymous namespace)::bgra8"* %610 to i32*
  %616 = bitcast i8* %614 to i32*
  %617 = load i32, i32* %615, align 4
  store i32 %617, i32* %616, align 1
  br label %618

618:                                              ; preds = %589, %588
  %619 = getelementptr inbounds i8, i8* %504, i64 %237
  %620 = add nuw nsw i64 %503, 1
  %621 = icmp ult i64 %620, 4
  %622 = add nsw i64 %620, %238
  %623 = icmp slt i64 %622, %239
  %624 = and i1 %621, %623
  br i1 %624, label %502, label %625

625:                                              ; preds = %494, %618, %240, %227
  br i1 %14, label %626, label %627

626:                                              ; preds = %625
  call fastcc void @_ZNK12_GLOBAL__N_14ETC228decodePunchThroughAlphaBlockEPhiiiii(%"struct.(anonymous namespace)::ETC2"* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #5
  br label %627

627:                                              ; preds = %626, %625
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { optsize }
attributes #6 = { nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
