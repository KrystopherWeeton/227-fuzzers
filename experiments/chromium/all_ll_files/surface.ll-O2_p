; ModuleID = '../../components/viz/service/surfaces/surface.cc'
source_filename = "../../components/viz/service/surfaces/surface.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"*, %"class.std::__1::__compressed_pair.151" }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map.141", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map.141" = type { %"class.base::internal::flat_tree.142" }
%"class.base::internal::flat_tree.142" = type { %"class.std::__1::vector.143" }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { %"struct.std::__1::pair.145"*, %"struct.std::__1::pair.145"*, %"class.std::__1::__compressed_pair.146" }
%"struct.std::__1::pair.145" = type opaque
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.std::__1::pair.145"* }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.ui::LatencyInfo"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"*, %"class.std::__1::__compressed_pair.163" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.158", %"class.viz::SurfaceId" }
%"class.absl::optional.158" = type { %"class.absl::optional_internal::optional_data.159" }
%"class.absl::optional_internal::optional_data.159" = type { %"class.absl::optional_internal::optional_data_base.160" }
%"class.absl::optional_internal::optional_data_base.160" = type { %"class.absl::optional_internal::optional_data_dtor_base.161" }
%"class.absl::optional_internal::optional_data_dtor_base.161" = type { i8, %union.anon.162 }
%union.anon.162 = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.viz::SurfaceRange"* }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.viz::SurfaceId"* }
%"class.viz::FrameDeadline" = type <{ %"class.base::TimeTicks", i32, [4 x i8], %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"struct.viz::BeginFrameAck" = type <{ %"struct.viz::BeginFrameId", i64, i8, [7 x i8] }>
%"struct.viz::BeginFrameId" = type { i64, i64 }
%union.anon.172 = type { float }
%union.anon.177 = type { %"class.base::TimeDelta" }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.gfx::PointF" = type { float, float }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"class.viz::CompositorFrameTransitionDirective"*, %"class.viz::CompositorFrameTransitionDirective"*, %"class.std::__1::__compressed_pair.193" }
%"class.viz::CompositorFrameTransitionDirective" = type { i32, i32, i32, %"class.std::__1::vector.186" }
%"class.std::__1::vector.186" = type { %"class.std::__1::__vector_base.187" }
%"class.std::__1::__vector_base.187" = type { %"class.util::IdType"*, %"class.util::IdType"*, %"class.std::__1::__compressed_pair.188" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.util::IdType"* }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.viz::CompositorFrameTransitionDirective"* }
%"class.std::__1::vector.198" = type { %"class.std::__1::__vector_base.199" }
%"class.std::__1::__vector_base.199" = type { %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*, %"class.std::__1::__compressed_pair.214" }
%"struct.viz::TransferableResource" = type { %"class.util::IdType.200", i8, %"class.gfx::Size", i32, [4 x i8], %"struct.gpu::MailboxHolder", %"class.gfx::ColorSpace", %"class.absl::optional.204", i8, i32, i8, [7 x i8], %"class.absl::optional.209" }
%"class.util::IdType.200" = type { %"class.base::StrongAlias.201" }
%"class.base::StrongAlias.201" = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType.202", i64 }
%"class.util::IdType.202" = type { %"class.base::StrongAlias.203" }
%"class.base::StrongAlias.203" = type { i64 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.204" = type { %"class.absl::optional_internal::optional_data.205" }
%"class.absl::optional_internal::optional_data.205" = type { %"class.absl::optional_internal::optional_data_base.206" }
%"class.absl::optional_internal::optional_data_base.206" = type { %"class.absl::optional_internal::optional_data_dtor_base.207" }
%"class.absl::optional_internal::optional_data_dtor_base.207" = type { i8, %union.anon.208 }
%union.anon.208 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.absl::optional.209" = type { %"class.absl::optional_internal::optional_data.210" }
%"class.absl::optional_internal::optional_data.210" = type { %"class.absl::optional_internal::optional_data_base.211" }
%"class.absl::optional_internal::optional_data_base.211" = type { %"class.absl::optional_internal::optional_data_dtor_base.212" }
%"class.absl::optional_internal::optional_data_dtor_base.212" = type { i8, [7 x i8], %union.anon.213 }
%union.anon.213 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"struct.viz::TransferableResource"* }
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"*, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.viz::CompositorRenderPass"* }
%"class.viz::CompositorRenderPass" = type <{ %"class.viz::RenderPassInternal", %"class.util::IdType", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [4 x i8] }>
%"class.viz::RenderPassInternal" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.244", i8, i8, i8, i8, %"class.std::__1::vector.249", %"class.viz::QuadList", %"class.cc::ListContainer.278" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.224" }
%"class.std::__1::vector.224" = type { %"class.std::__1::__vector_base.225" }
%"class.std::__1::__vector_base.225" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.239" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.232", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.226, i32, %"class.absl::optional.227", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.226 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.227" = type { %"class.absl::optional_internal::optional_data.228" }
%"class.absl::optional_internal::optional_data.228" = type { %"class.absl::optional_internal::optional_data_base.229" }
%"class.absl::optional_internal::optional_data_base.229" = type { %"class.absl::optional_internal::optional_data_dtor_base.230" }
%"class.absl::optional_internal::optional_data_dtor_base.230" = type { i8, %union.anon.231 }
%union.anon.231 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.232" = type { %"class.std::__1::__vector_base.233" }
%"class.std::__1::__vector_base.233" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.244" = type { %"class.absl::optional_internal::optional_data.245" }
%"class.absl::optional_internal::optional_data.245" = type { %"class.absl::optional_internal::optional_data_base.246" }
%"class.absl::optional_internal::optional_data_base.246" = type { %"class.absl::optional_internal::optional_data_dtor_base.247" }
%"class.absl::optional_internal::optional_data_dtor_base.247" = type { i8, %union.anon.248 }
%union.anon.248 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.std::__1::vector.249" = type { %"class.std::__1::__vector_base.250" }
%"class.std::__1::__vector_base.250" = type { %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"*, %"class.std::__1::__compressed_pair.267" }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"class.viz::CopyOutputRequest"* }
%"class.viz::CopyOutputRequest" = type { i8, %"class.base::OnceCallback", %class.scoped_refptr.115, %"class.gfx::Vector2d", %"class.gfx::Vector2d", %"class.absl::optional.254", %"class.absl::optional.259", %"class.absl::optional.259" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.118 }
%class.scoped_refptr.118 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.119", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.119" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%class.scoped_refptr.115 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.116" }>
%"class.base::RefCountedThreadSafe.116" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.absl::optional.254" = type { %"class.absl::optional_internal::optional_data.255" }
%"class.absl::optional_internal::optional_data.255" = type { %"class.absl::optional_internal::optional_data_base.256" }
%"class.absl::optional_internal::optional_data_base.256" = type { %"class.absl::optional_internal::optional_data_dtor_base.257" }
%"class.absl::optional_internal::optional_data_dtor_base.257" = type { i8, %union.anon.258 }
%union.anon.258 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.259" = type { %"class.absl::optional_internal::optional_data.260" }
%"class.absl::optional_internal::optional_data.260" = type { %"class.absl::optional_internal::optional_data_base.261" }
%"class.absl::optional_internal::optional_data_base.261" = type { %"class.absl::optional_internal::optional_data_dtor_base.262" }
%"class.absl::optional_internal::optional_data_dtor_base.262" = type { i8, %union.anon.263 }
%union.anon.263 = type { %"class.gfx::Rect" }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %"class.std::__1::unique_ptr.251"* }
%"class.viz::QuadList" = type { %"class.cc::ListContainer" }
%"class.cc::ListContainer" = type { %"class.cc::ListContainerHelper" }
%"class.cc::ListContainerHelper" = type { %"class.std::__1::unique_ptr.272" }
%"class.std::__1::unique_ptr.272" = type { %"class.std::__1::__compressed_pair.273" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"class.cc::ListContainerHelper::CharAllocator"* }
%"class.cc::ListContainerHelper::CharAllocator" = type opaque
%"class.cc::ListContainer.278" = type { %"class.cc::ListContainerHelper" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.std::__1::unique_ptr.221"* }
%"struct.std::nothrow_t" = type { i8 }
%"class.viz::Surface::PresentationHelper" = type <{ %"class.base::WeakPtr", i32, [4 x i8] }>
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.viz::Surface" = type { %"class.viz::SurfaceInfo", %"class.viz::SurfaceId", %"class.viz::SurfaceManager"*, %"class.base::WeakPtr", %"class.std::__1::unique_ptr.125", %"class.absl::optional.134", %"class.absl::optional.134", %"class.absl::optional.291", i8, i8, %"class.base::internal::flat_tree.34", %"class.std::__1::vector.35", %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.296", i8, i8, %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceSavedFrameStorage", i8, %"class.base::WeakPtrFactory.349" }
%"class.viz::SurfaceInfo" = type <{ %"class.viz::SurfaceId", float, %"class.gfx::Size", [4 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.viz::SurfaceDependencyDeadline"* }
%"class.viz::SurfaceDependencyDeadline" = type { %"class.base::TickClock"*, %"class.base::TimeTicks", %"class.absl::optional.128" }
%"class.base::TickClock" = type { i32 (...)** }
%"class.absl::optional.128" = type { %"class.absl::optional_internal::optional_data.129" }
%"class.absl::optional_internal::optional_data.129" = type { %"class.absl::optional_internal::optional_data_base.130" }
%"class.absl::optional_internal::optional_data_base.130" = type { %"class.absl::optional_internal::optional_data_dtor_base.131" }
%"class.absl::optional_internal::optional_data_dtor_base.131" = type { i8, %union.anon.132 }
%union.anon.132 = type { %"class.base::TimeTicks" }
%"class.absl::optional.134" = type { %"class.absl::optional_internal::optional_data.135" }
%"class.absl::optional_internal::optional_data.135" = type { %"class.absl::optional_internal::optional_data_base.136" }
%"class.absl::optional_internal::optional_data_base.136" = type { %"class.absl::optional_internal::optional_data_dtor_base.137" }
%"class.absl::optional_internal::optional_data_dtor_base.137" = type { i8, [7 x i8], %union.anon.138 }
%union.anon.138 = type { %"struct.viz::Surface::FrameData" }
%"struct.viz::Surface::FrameData" = type <{ %"class.viz::CompositorFrame", i64, i8, i8, i8, [5 x i8] }>
%"class.viz::CompositorFrame" = type { %"class.viz::CompositorFrameMetadata", %"class.std::__1::vector.198", %"class.std::__1::vector.219" }
%"class.viz::CompositorFrameMetadata" = type { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, i32, %"class.std::__1::vector.139", %"class.std::__1::vector.156", %"class.std::__1::vector.35", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, float, %"class.absl::optional.168", %"class.absl::optional.173", i32, %"class.std::__1::unique_ptr.178", %"class.std::__1::vector.184" }
%"class.absl::optional.168" = type { %"class.absl::optional_internal::optional_data.169" }
%"class.absl::optional_internal::optional_data.169" = type { %"class.absl::optional_internal::optional_data_base.170" }
%"class.absl::optional_internal::optional_data_base.170" = type { %"class.absl::optional_internal::optional_data_dtor_base.171" }
%"class.absl::optional_internal::optional_data_dtor_base.171" = type { i8, %union.anon.172 }
%"class.absl::optional.173" = type { %"class.absl::optional_internal::optional_data.174" }
%"class.absl::optional_internal::optional_data.174" = type { %"class.absl::optional_internal::optional_data_base.175" }
%"class.absl::optional_internal::optional_data_base.175" = type { %"class.absl::optional_internal::optional_data_dtor_base.176" }
%"class.absl::optional_internal::optional_data_dtor_base.176" = type { i8, %union.anon.177 }
%"class.absl::optional.291" = type { %"class.absl::optional_internal::optional_data.292" }
%"class.absl::optional_internal::optional_data.292" = type { %"class.absl::optional_internal::optional_data_base.293" }
%"class.absl::optional_internal::optional_data_base.293" = type { %"class.absl::optional_internal::optional_data_dtor_base.294" }
%"class.absl::optional_internal::optional_data_dtor_base.294" = type { i8, %union.anon.295 }
%union.anon.295 = type { %"class.viz::CompositorFrame" }
%"class.base::internal::flat_tree.34" = type { %"class.std::__1::vector.35" }
%"class.base::internal::flat_tree.296" = type { %"class.std::__1::vector.297" }
%"class.std::__1::vector.297" = type { %"class.std::__1::__vector_base.298" }
%"class.std::__1::__vector_base.298" = type { %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"class.std::__1::__compressed_pair.317" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"class.viz::SurfaceAllocationGroup"** }
%"class.viz::SurfaceSavedFrameStorage" = type { %"class.viz::Surface"*, %"class.base::internal::CancelableCallbackImpl", %"class.std::__1::unique_ptr.324" }
%"class.base::internal::CancelableCallbackImpl" = type { %"class.base::OnceCallback.322", %"class.base::WeakPtrFactory.323" }
%"class.base::OnceCallback.322" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.323" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.117 }
%class.scoped_refptr.117 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.viz::SurfaceSavedFrame"* }
%"class.viz::SurfaceSavedFrame" = type { %"class.viz::CompositorFrameTransitionDirective", %"class.base::OnceCallback.327", %"class.absl::optional.328", i64, i64, %"class.base::WeakPtrFactory.345" }
%"class.base::OnceCallback.327" = type { %"class.base::internal::CallbackBase" }
%"class.absl::optional.328" = type { %"class.absl::optional_internal::optional_data.329" }
%"class.absl::optional_internal::optional_data.329" = type { %"class.absl::optional_internal::optional_data_base.330" }
%"class.absl::optional_internal::optional_data_base.330" = type { %"class.absl::optional_internal::optional_data_dtor_base.331" }
%"class.absl::optional_internal::optional_data_dtor_base.331" = type { i8, %union.anon.332 }
%union.anon.332 = type { %"struct.viz::SurfaceSavedFrame::FrameResult" }
%"struct.viz::SurfaceSavedFrame::FrameResult" = type { %"struct.viz::SurfaceSavedFrame::OutputCopyResult", %"class.std::__1::vector.337" }
%"struct.viz::SurfaceSavedFrame::OutputCopyResult" = type { %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", %class.SkBitmap, %"struct.viz::SurfaceSavedFrame::RenderPassDrawData", i8, %"class.base::OnceCallback.336" }
%class.SkBitmap = type { %class.sk_sp.333, %class.SkPixmap, %class.sk_sp.335 }
%class.sk_sp.333 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.334, i32, i32 }
%class.sk_sp.334 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.335 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"struct.viz::SurfaceSavedFrame::RenderPassDrawData" = type { %"class.gfx::Rect", %"class.gfx::Transform", float }
%"class.base::OnceCallback.336" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::vector.337" = type { %"class.std::__1::__vector_base.338" }
%"class.std::__1::__vector_base.338" = type { %"class.absl::optional.339"*, %"class.absl::optional.339"*, %"class.std::__1::__compressed_pair.340" }
%"class.absl::optional.339" = type opaque
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.341" }
%"struct.std::__1::__compressed_pair_elem.341" = type { %"class.absl::optional.339"* }
%"class.base::WeakPtrFactory.345" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::WeakPtrFactory.349" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.viz::SurfaceManager" = type { %"class.viz::SurfaceManagerDelegate"*, %"class.absl::optional", %"class.base::flat_map", %"class.base::flat_map.7", %"class.base::flat_map.17", %"class.base::ObserverList", %"class.base::ThreadChecker", %"class.base::internal::flat_tree.34", %"class.viz::SurfaceId", %"class.base::internal::flat_tree.34", %"class.base::TickClock"*, %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.60", %"class.std::__1::unordered_map.84", %"class.absl::optional.110", i8, %"class.base::WeakPtrFactory.124" }
%"class.viz::SurfaceManagerDelegate" = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.base::flat_map.7" = type { %"class.base::internal::flat_tree.8" }
%"class.base::internal::flat_tree.8" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"struct.std::__1::pair.11"*, %"struct.std::__1::pair.11"*, %"class.std::__1::__compressed_pair.12" }
%"struct.std::__1::pair.11" = type opaque
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::pair.11"* }
%"class.base::flat_map.17" = type { %"class.base::internal::flat_tree.18" }
%"class.base::internal::flat_tree.18" = type { %"class.std::__1::vector.19" }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.std::__1::pair.21"*, %"struct.std::__1::pair.21"*, %"class.std::__1::__compressed_pair.22" }
%"struct.std::__1::pair.21" = type opaque
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::pair.21"* }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.27", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.29" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ThreadChecker" = type { i8 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.50", %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.57", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i64 }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { float }
%"class.std::__1::unordered_map.60" = type { %"class.std::__1::__hash_table.61" }
%"class.std::__1::__hash_table.61" = type <{ %"class.std::__1::unique_ptr.62", %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.77", %"class.std::__1::__compressed_pair.80", [4 x i8] }>
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64", %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.std::__1::__hash_node_base.65"** }
%"struct.std::__1::__hash_node_base.65" = type { %"struct.std::__1::__hash_node_base.65"* }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.std::__1::__bucket_list_deallocator.67" }
%"class.std::__1::__bucket_list_deallocator.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.std::__1::__hash_node_base.65" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::unordered_map.84" = type { %"class.std::__1::__hash_table.85" }
%"class.std::__1::__hash_table.85" = type <{ %"class.std::__1::unique_ptr.86", %"class.std::__1::__compressed_pair.96", %"class.std::__1::__compressed_pair.101", %"class.std::__1::__compressed_pair.104", [4 x i8] }>
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88", %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.std::__1::__hash_node_base.89"** }
%"struct.std::__1::__hash_node_base.89" = type { %"struct.std::__1::__hash_node_base.89"* }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.std::__1::__bucket_list_deallocator.91" }
%"class.std::__1::__bucket_list_deallocator.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.std::__1::__hash_node_base.89" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.absl::optional.110" = type { %"class.absl::optional_internal::optional_data.111" }
%"class.absl::optional_internal::optional_data.111" = type { %"class.absl::optional_internal::optional_data_base.112" }
%"class.absl::optional_internal::optional_data_base.112" = type { %"class.absl::optional_internal::optional_data_dtor_base.113" }
%"class.absl::optional_internal::optional_data_dtor_base.113" = type { i8, %union.anon.114 }
%union.anon.114 = type { %"class.base::RepeatingTimer" }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr.115, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::WeakPtrFactory.124" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.viz::SurfaceAllocationGroup" = type { %"class.viz::FrameSinkId", %"class.base::UnguessableToken", %"class.std::__1::vector.299", %"class.base::flat_map.306", %"class.base::internal::flat_tree.316", %"class.viz::SurfaceManager"*, %"class.viz::SurfaceId", %"class.viz::SurfaceId" }
%"class.std::__1::vector.299" = type { %"class.std::__1::__vector_base.300" }
%"class.std::__1::__vector_base.300" = type { %"class.viz::Surface"**, %"class.viz::Surface"**, %"class.std::__1::__compressed_pair.301" }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"class.viz::Surface"** }
%"class.base::flat_map.306" = type { %"class.base::internal::flat_tree.307" }
%"class.base::internal::flat_tree.307" = type { %"class.std::__1::vector.308" }
%"class.std::__1::vector.308" = type { %"class.std::__1::__vector_base.309" }
%"class.std::__1::__vector_base.309" = type { %"struct.std::__1::pair.310"*, %"struct.std::__1::pair.310"*, %"class.std::__1::__compressed_pair.311" }
%"struct.std::__1::pair.310" = type opaque
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"struct.std::__1::pair.310"* }
%"class.base::internal::flat_tree.316" = type { %"class.std::__1::vector.299" }
%"struct.gfx::SwapTimings" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"struct.gfx::PresentationFeedback" = type { %"class.base::TimeTicks", %"class.base::TimeDelta", i32, %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.viz::SurfaceClient" = type { i32 (...)** }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.352 }
%union.anon.352 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.416", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.416" = type { %"class.std::__1::__vector_base.417" }
%"class.std::__1::__vector_base.417" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.424" }
%"class.std::__1::__compressed_pair.424" = type { %"struct.std::__1::__compressed_pair_elem.425" }
%"struct.std::__1::__compressed_pair_elem.425" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.418", i64, i64 }
%"class.std::__1::unique_ptr.418" = type { %"class.std::__1::__compressed_pair.419" }
%"class.std::__1::__compressed_pair.419" = type { %"struct.std::__1::__compressed_pair_elem.420" }
%"struct.std::__1::__compressed_pair_elem.420" = type { i8* }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.429" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::vector.407" = type { %"class.std::__1::__vector_base.408" }
%"class.std::__1::__vector_base.408" = type { %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"*, %"class.std::__1::__compressed_pair.409" }
%"struct.viz::ReturnedResource" = type <{ %"class.util::IdType.200", [4 x i8], %"struct.gpu::SyncToken", %"struct.gfx::GpuFenceHandle", i32, i8, [3 x i8] }>
%"struct.gfx::GpuFenceHandle" = type { %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.410" }
%"struct.std::__1::__compressed_pair_elem.410" = type { %"struct.viz::ReturnedResource"* }
%"class.std::__1::vector.356" = type { %"class.std::__1::__vector_base.357" }
%"class.std::__1::__vector_base.357" = type { %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"*, %"class.std::__1::__compressed_pair.358" }
%"class.viz::SurfaceReference" = type { %"class.viz::SurfaceId", %"class.viz::SurfaceId" }
%"class.std::__1::__compressed_pair.358" = type { %"struct.std::__1::__compressed_pair_elem.359" }
%"struct.std::__1::__compressed_pair_elem.359" = type { %"class.viz::SurfaceReference"* }
%"class.base::ScopedClosureRunner" = type { %"class.base::OnceCallback.322" }
%"class.std::__1::unique_ptr.365" = type { %"class.std::__1::__compressed_pair.366" }
%"class.std::__1::__compressed_pair.366" = type { %"struct.std::__1::__compressed_pair_elem.367" }
%"struct.std::__1::__compressed_pair_elem.367" = type { %"class.base::trace_event::TracedValue"* }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr.368" }
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"struct.viz::PendingCopyOutputRequest" = type { %"class.viz::LocalSurfaceId", %"class.viz::SubtreeCaptureId", %"class.std::__1::unique_ptr.251" }
%"struct.std::__1::less" = type { i8 }
%"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.512" }
%"struct.std::__1::pair.512" = type { %"class.util::IdType", %"class.std::__1::unique_ptr.251" }
%"class.std::__1::vector.393" = type { %"class.std::__1::__vector_base.394" }
%"class.std::__1::__vector_base.394" = type { %"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"*, %"class.std::__1::__compressed_pair.395" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"struct.viz::PendingCopyOutputRequest"* }
%"struct.std::__1::__split_buffer.477" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair.478" }
%"class.std::__1::__compressed_pair.478" = type { %"struct.std::__1::__compressed_pair_elem.38", %"struct.std::__1::__compressed_pair_elem.479" }
%"struct.std::__1::__compressed_pair_elem.479" = type { %"class.std::__1::allocator.40"* }
%"class.std::__1::allocator.40" = type { i8 }
%"struct.std::__1::__split_buffer.494" = type { %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.318", %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.std::__1::allocator.320"* }
%"class.std::__1::allocator.320" = type { i8 }
%"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare" = type { i8 }

$_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_ = comdat any

$_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base11trace_event11TracedValueENS1_14default_deleteISB_EEEEEENSA_16TraceEventHandleEcPKhPKcSJ_yjySJ_OT_SJ_OT0_ = comdat any

$_ZN20trace_event_internal13AddTraceEventIbEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_ = comdat any

$_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEElEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_SE_OT0_ = comdat any

$_ZN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS_8identityENSt3__14lessIvEENS6_6vectorIS4_NS6_9allocatorIS4_EEEEEC2ERKSC_RKS8_ = comdat any

$_ZN20trace_event_internal13AddTraceEventIRA23_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_ = comdat any

$_ZN20trace_event_internal13AddTraceEventIRA26_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_ = comdat any

$_ZN20trace_event_internal13AddTraceEventIRA22_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3viz17CopyOutputRequestENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_ = comdat any

$_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE16emplace_key_argsIS3_JRKS3_EEENS5_4pairINS5_11__wrap_iterIPS3_EEbEERKT_DpOT0_ = comdat any

$_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIN3viz9SurfaceIdERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_ = comdat any

$_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_SK_T_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl = comdat any

$_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZNSt3__16vectorIPN3viz22SurfaceAllocationGroupENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIPN3viz22SurfaceAllocationGroupERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_ = comdat any

$_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE15sort_and_uniqueENS5_11__wrap_iterIPS3_EESF_ = comdat any

$_ZNSt3__16uniqueINS_11__wrap_iterIPN3viz9SurfaceIdEEEN4base8internal9NotFnImplINS7_9flat_treeIS3_NS6_8identityENS_4lessIvEENS_6vectorIS3_NS_9allocatorIS3_EEEEE13value_compareEEEEET_SK_SK_T0_ = comdat any

$_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeEl = comdat any

$_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_PNS_15iterator_traitsISJ_E10value_typeET_ = comdat any

$_ZNSt3__122__merge_move_constructIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EESI_EEvT0_SJ_T1_SK_PNS_15iterator_traitsISJ_E10value_typeET_ = comdat any

$_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeE = comdat any

$_ZNSt3__112__rotate_gcdINS_11__wrap_iterIPN3viz9SurfaceIdEEEEET_S6_S6_S6_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16vectorIN2ui11LatencyInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [8 x i8] c"Surface\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"surface_info\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Surface deadline passed\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"FrameSinkId\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Surface invariants violation\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Pending\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"SurfaceQueuedPending\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"LocalSurfaceId\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"ActivationDependencies\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"Surface::RequestCopyOfOutput\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"has_active_frame_data\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"Surface::RequestCopyOfOutputOnRootRenderPass\00", align 1
@.str.12 = private unnamed_addr constant [41 x i8] c"Surface::RequestCopyOfOurpurRenderPassId\00", align 1
@__const._ZN3viz7Surface20ActivatePendingFrameEv.frame_data = private unnamed_addr constant <{ { { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, [1 x i8], i32, %"class.std::__1::vector.139", %"class.std::__1::vector.156", %"class.std::__1::vector.35", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, [3 x i8], float, { { { { i8, [3 x i8], %union.anon.172 } } } }, [4 x i8], { { { { i8, [7 x i8], %union.anon.177 } } } }, i32, [4 x i8], %"class.std::__1::unique_ptr.178", %"class.std::__1::vector.184" }, %"class.std::__1::vector.198", %"class.std::__1::vector.219" }, i64, i8, i8, i8, [5 x i8] }> <{ { { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, [1 x i8], i32, %"class.std::__1::vector.139", %"class.std::__1::vector.156", %"class.std::__1::vector.35", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, [3 x i8], float, { { { { i8, [3 x i8], %union.anon.172 } } } }, [4 x i8], { { { { i8, [7 x i8], %union.anon.177 } } } }, i32, [4 x i8], %"class.std::__1::unique_ptr.178", %"class.std::__1::vector.184" }, %"class.std::__1::vector.198", %"class.std::__1::vector.219" } { { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, [1 x i8], i32, %"class.std::__1::vector.139", %"class.std::__1::vector.156", %"class.std::__1::vector.35", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, [3 x i8], float, { { { { i8, [3 x i8], %union.anon.172 } } } }, [4 x i8], { { { { i8, [7 x i8], %union.anon.177 } } } }, i32, [4 x i8], %"class.std::__1::unique_ptr.178", %"class.std::__1::vector.184" } { float 0xFFFFFFFFE0000000, %"class.gfx::Vector2dF" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, %"class.gfx::SizeF" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i32 -1431655766, %"class.std::__1::vector.139" { %"class.std::__1::__vector_base.140" { %"class.ui::LatencyInfo"* inttoptr (i64 -6148914691236517206 to %"class.ui::LatencyInfo"*), %"class.ui::LatencyInfo"* inttoptr (i64 -6148914691236517206 to %"class.ui::LatencyInfo"*), %"class.std::__1::__compressed_pair.151" { %"struct.std::__1::__compressed_pair_elem.152" { %"class.ui::LatencyInfo"* inttoptr (i64 -6148914691236517206 to %"class.ui::LatencyInfo"*) } } } }, %"class.std::__1::vector.156" { %"class.std::__1::__vector_base.157" { %"class.viz::SurfaceRange"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceRange"*), %"class.viz::SurfaceRange"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceRange"*), %"class.std::__1::__compressed_pair.163" { %"struct.std::__1::__compressed_pair_elem.164" { %"class.viz::SurfaceRange"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceRange"*) } } } }, %"class.std::__1::vector.35" { %"class.std::__1::__vector_base.36" { %"class.viz::SurfaceId"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceId"*), %"class.viz::SurfaceId"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceId"*), %"class.std::__1::__compressed_pair.37" { %"struct.std::__1::__compressed_pair_elem.38" { %"class.viz::SurfaceId"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceId"*) } } } }, %"class.viz::FrameDeadline" <{ %"class.base::TimeTicks" { %"class.base::time_internal::TimeBase" { i64 -6148914691236517206 } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.base::TimeDelta" { i64 -6148914691236517206 }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"struct.viz::BeginFrameAck" <{ %"struct.viz::BeginFrameId" { i64 -6148914691236517206, i64 -6148914691236517206 }, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, { { { { i8, [3 x i8], %union.anon.172 } } } } { { { { i8, [3 x i8], %union.anon.172 } } } { { { i8, [3 x i8], %union.anon.172 } } { { i8, [3 x i8], %union.anon.172 } { i8 -86, [3 x i8] c"\AA\AA\AA", %union.anon.172 { float 0xFFFFFFFFE0000000 } } } } }, [4 x i8] c"\AA\AA\AA\AA", { { { { i8, [7 x i8], %union.anon.177 } } } } { { { { i8, [7 x i8], %union.anon.177 } } } { { { i8, [7 x i8], %union.anon.177 } } { { i8, [7 x i8], %union.anon.177 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.177 { %"class.base::TimeDelta" { i64 -6148914691236517206 } } } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::unique_ptr.178" { %"class.std::__1::__compressed_pair.179" { %"struct.std::__1::__compressed_pair_elem.180" { %"class.gfx::DelegatedInkMetadata"* inttoptr (i64 -6148914691236517206 to %"class.gfx::DelegatedInkMetadata"*) } } }, %"class.std::__1::vector.184" { %"class.std::__1::__vector_base.185" { %"class.viz::CompositorFrameTransitionDirective"* inttoptr (i64 -6148914691236517206 to %"class.viz::CompositorFrameTransitionDirective"*), %"class.viz::CompositorFrameTransitionDirective"* inttoptr (i64 -6148914691236517206 to %"class.viz::CompositorFrameTransitionDirective"*), %"class.std::__1::__compressed_pair.193" { %"struct.std::__1::__compressed_pair_elem.194" { %"class.viz::CompositorFrameTransitionDirective"* inttoptr (i64 -6148914691236517206 to %"class.viz::CompositorFrameTransitionDirective"*) } } } } }, %"class.std::__1::vector.198" { %"class.std::__1::__vector_base.199" { %"struct.viz::TransferableResource"* inttoptr (i64 -6148914691236517206 to %"struct.viz::TransferableResource"*), %"struct.viz::TransferableResource"* inttoptr (i64 -6148914691236517206 to %"struct.viz::TransferableResource"*), %"class.std::__1::__compressed_pair.214" { %"struct.std::__1::__compressed_pair_elem.215" { %"struct.viz::TransferableResource"* inttoptr (i64 -6148914691236517206 to %"struct.viz::TransferableResource"*) } } } }, %"class.std::__1::vector.219" { %"class.std::__1::__vector_base.220" { %"class.std::__1::unique_ptr.221"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.221"*), %"class.std::__1::unique_ptr.221"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.221"*), %"class.std::__1::__compressed_pair.282" { %"struct.std::__1::__compressed_pair_elem.283" { %"class.std::__1::unique_ptr.221"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.221"*) } } } } }, i64 -6148914691236517206, i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA" }>, align 8
@.str.13 = private unnamed_addr constant [28 x i8] c"SurfaceSynchronizationEvent\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"surface_id\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"duration_ms\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"Surface::ActivateFrame\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"SurfaceId\00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"LocalSurfaceId.Submission.Flow\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"step\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"FirstSurfaceActivation\00", align 1
@.str.21 = private unnamed_addr constant [26 x i8] c"LocalSurfaceId.Embed.Flow\00", align 1
@.str.22 = private unnamed_addr constant [26 x i8] c"AddedActivationDependency\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"child_surface_id\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"Surface::TakeLatencyInfoFromFrame\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"FirstSurfaceEmbedding\00", align 1
@.str.27 = private unnamed_addr constant [29 x i8] c"../../base/memory/weak_ptr.h\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"ref_.IsValid()\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

@_ZN3viz7Surface18PresentationHelperC1EN4base7WeakPtrINS_13SurfaceClientEEEj = hidden unnamed_addr alias void (%"class.viz::Surface::PresentationHelper"*, %"class.base::WeakPtr"*, i32), void (%"class.viz::Surface::PresentationHelper"*, %"class.base::WeakPtr"*, i32)* @_ZN3viz7Surface18PresentationHelperC2EN4base7WeakPtrINS_13SurfaceClientEEEj
@_ZN3viz7Surface18PresentationHelperD1Ev = hidden unnamed_addr alias void (%"class.viz::Surface::PresentationHelper"*), void (%"class.viz::Surface::PresentationHelper"*)* @_ZN3viz7Surface18PresentationHelperD2Ev
@_ZN3viz7SurfaceC1ERKNS_11SurfaceInfoEPNS_14SurfaceManagerEPNS_22SurfaceAllocationGroupEN4base7WeakPtrINS_13SurfaceClientEEE = hidden unnamed_addr alias void (%"class.viz::Surface"*, %"class.viz::SurfaceInfo"*, %"class.viz::SurfaceManager"*, %"class.viz::SurfaceAllocationGroup"*, %"class.base::WeakPtr"*), void (%"class.viz::Surface"*, %"class.viz::SurfaceInfo"*, %"class.viz::SurfaceManager"*, %"class.viz::SurfaceAllocationGroup"*, %"class.base::WeakPtr"*)* @_ZN3viz7SurfaceC2ERKNS_11SurfaceInfoEPNS_14SurfaceManagerEPNS_22SurfaceAllocationGroupEN4base7WeakPtrINS_13SurfaceClientEEE
@_ZN3viz7SurfaceD1Ev = hidden unnamed_addr alias void (%"class.viz::Surface"*), void (%"class.viz::Surface"*)* @_ZN3viz7SurfaceD2Ev
@_ZN3viz7Surface9FrameDataC1EONS_15CompositorFrameEm = hidden unnamed_addr alias void (%"struct.viz::Surface::FrameData"*, %"class.viz::CompositorFrame"*, i64), void (%"struct.viz::Surface::FrameData"*, %"class.viz::CompositorFrame"*, i64)* @_ZN3viz7Surface9FrameDataC2EONS_15CompositorFrameEm
@_ZN3viz7Surface9FrameDataC1EOS1_ = hidden unnamed_addr alias void (%"struct.viz::Surface::FrameData"*, %"struct.viz::Surface::FrameData"*), void (%"struct.viz::Surface::FrameData"*, %"struct.viz::Surface::FrameData"*)* @_ZN3viz7Surface9FrameDataC2EOS1_
@_ZN3viz7Surface9FrameDataD1Ev = hidden unnamed_addr alias void (%"struct.viz::Surface::FrameData"*), void (%"struct.viz::Surface::FrameData"*)* @_ZN3viz7Surface9FrameDataD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface18PresentationHelperC2EN4base7WeakPtrINS_13SurfaceClientEEEj(%"class.viz::Surface::PresentationHelper"*, %"class.base::WeakPtr"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %4, %"class.base::internal::WeakReference"* dereferenceable(8) %5) #14
  %6 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 1
  store i32 %2, i32* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface18PresentationHelperD2Ev(%"class.viz::Surface::PresentationHelper"*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.gfx::SwapTimings", align 8
  %3 = alloca %"struct.gfx::PresentationFeedback", align 8
  %4 = bitcast %"struct.gfx::SwapTimings"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #14
  %5 = bitcast %"struct.gfx::PresentationFeedback"* %3 to i8*
  %6 = bitcast %"struct.gfx::SwapTimings"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 40, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #14
  %7 = tail call i64 @_ZN4base9TimeTicks3NowEv() #14, !noalias !2
  %8 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %3, i64 0, i32 0, i32 0, i32 0
  store i64 %7, i64* %8, align 8, !alias.scope !2
  %9 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %3, i64 0, i32 1, i32 0
  store i64 0, i64* %9, align 8, !alias.scope !2
  %10 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %3, i64 0, i32 2
  store i32 16, i32* %10, align 8, !alias.scope !2
  %11 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %3, i64 0, i32 3, i32 0, i32 0
  %12 = bitcast i64* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #14, !alias.scope !2
  call void @_ZN3viz7Surface18PresentationHelper10DidPresentEN4base9TimeTicksERKN3gfx11SwapTimingsERKNS4_20PresentationFeedbackE(%"class.viz::Surface::PresentationHelper"* %0, i64 0, %"struct.gfx::SwapTimings"* nonnull dereferenceable(40) %2, %"struct.gfx::PresentationFeedback"* nonnull dereferenceable(56) %3)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #14
  %13 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %13) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface18PresentationHelper10DidPresentEN4base9TimeTicksERKN3gfx11SwapTimingsERKNS4_20PresentationFeedbackE(%"class.viz::Surface::PresentationHelper"*, i64, %"struct.gfx::SwapTimings"* dereferenceable(40), %"struct.gfx::PresentationFeedback"* dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.base::WeakPtr", align 8
  %7 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %7) #14
  br i1 %8, label %9, label %35

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast i64* %10 to %"class.viz::SurfaceClient"**
  %12 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %11, align 8
  %13 = icmp eq %"class.viz::SurfaceClient"* %12, null
  br i1 %13, label %35, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %14
  %19 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %7) #14
  br i1 %19, label %23, label %20

20:                                               ; preds = %18
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  br label %23

23:                                               ; preds = %20, %18
  %24 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %7) #14
  br i1 %24, label %25, label %28

25:                                               ; preds = %23
  %26 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %11, align 8
  %27 = bitcast %"class.viz::SurfaceClient"* %26 to void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)***
  br label %28

28:                                               ; preds = %23, %25
  %29 = phi void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*** [ %27, %25 ], [ null, %23 ]
  %30 = phi %"class.viz::SurfaceClient"* [ %26, %25 ], [ null, %23 ]
  %31 = load i32, i32* %15, align 8
  %32 = load void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)**, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*** %29, align 8
  %33 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)** %32, i64 12
  %34 = load void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)** %33, align 8
  call void %34(%"class.viz::SurfaceClient"* %30, i32 %31, i64 %1, %"struct.gfx::SwapTimings"* dereferenceable(40) %2, %"struct.gfx::PresentationFeedback"* dereferenceable(56) %3) #14
  br label %35

35:                                               ; preds = %9, %4, %14, %28
  %36 = bitcast %"class.base::WeakPtr"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36) #14
  %37 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %6, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"* nonnull %37) #14
  %38 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = bitcast %"class.base::WeakPtr"* %6 to i64*
  %40 = load i64, i64* %39, align 8
  store %"class.base::internal::WeakReference::Flag"* null, %"class.base::internal::WeakReference::Flag"** %38, align 8
  %41 = bitcast %"class.viz::Surface::PresentationHelper"* %0 to i64*
  %42 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %42, align 8
  store i64 %40, i64* %41, align 8
  %44 = icmp eq %"class.base::internal::WeakReference::Flag"* %43, null
  br i1 %44, label %51, label %45

45:                                               ; preds = %35
  %46 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw sub i32* %46, i32 1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  call void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"* nonnull %43) #14
  %50 = bitcast %"class.base::internal::WeakReference::Flag"* %43 to i8*
  call void @_ZdlPv(i8* %50) #15
  br label %51

51:                                               ; preds = %35, %45, %49
  %52 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %6, i64 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.viz::Surface::PresentationHelper", %"class.viz::Surface::PresentationHelper"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 %53, i64* %54, align 8
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %37) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7SurfaceC2ERKNS_11SurfaceInfoEPNS_14SurfaceManagerEPNS_22SurfaceAllocationGroupEN4base7WeakPtrINS_13SurfaceClientEEE(%"class.viz::Surface"*, %"class.viz::SurfaceInfo"* dereferenceable(48), %"class.viz::SurfaceManager"*, %"class.viz::SurfaceAllocationGroup"*, %"class.base::WeakPtr"*) unnamed_addr #0 align 2 {
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %7, align 4
  %10 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %17 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  %20 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 0, i32 1, i32 2
  %21 = bitcast %"class.base::UnguessableToken"* %19 to i8*
  %22 = bitcast %"class.base::UnguessableToken"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #14
  %23 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.viz::SurfaceInfo", %"class.viz::SurfaceInfo"* %1, i64 0, i32 1
  %25 = bitcast float* %23 to i8*
  %26 = bitcast float* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 12, i1 false) #14
  %27 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 1
  %28 = bitcast %"class.viz::SurfaceId"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %28, i8 0, i64 32, i1 false) #14
  %29 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  store %"class.viz::SurfaceManager"* %2, %"class.viz::SurfaceManager"** %29, align 8
  %30 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %31 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %30, %"class.base::internal::WeakReference"* dereferenceable(8) %31) #14
  %32 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %33 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %4, i64 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %32, align 8
  %35 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4
  %36 = bitcast %"class.std::__1::unique_ptr.125"* %35 to i64*
  store i64 0, i64* %36, align 8
  %37 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2
  %39 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2
  %40 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1
  %41 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10
  %42 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 15
  %43 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 17
  %44 = bitcast %union.anon.138* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 313, i1 false)
  %45 = bitcast %union.anon.138* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 313, i1 false)
  %46 = bitcast %union.anon.295* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 298, i1 false)
  %47 = bitcast %"class.base::internal::flat_tree.34"* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 122, i1 false)
  store %"class.viz::SurfaceAllocationGroup"* %3, %"class.viz::SurfaceAllocationGroup"** %43, align 8
  %48 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 18
  tail call void @_ZN3viz24SurfaceSavedFrameStorageC1EPNS_7SurfaceE(%"class.viz::SurfaceSavedFrameStorage"* %48, %"class.viz::Surface"* %0) #14
  %49 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 19
  store i8 0, i8* %49, align 8
  %50 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 20, i32 0
  %51 = ptrtoint %"class.viz::Surface"* %0 to i64
  tail call void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"* %50, i64 %51) #14
  %52 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 231, i32 0), align 16
  %53 = and i8 %52, 25
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %66, label %55, !prof !5

55:                                               ; preds = %5
  %56 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #14
  call void @_ZNK3viz11SurfaceInfo8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.viz::SurfaceInfo"* %1) #14
  %57 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext 83, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 231, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* null, i64 %51, i32 2048, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6)
  %58 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #15
  br label %65

65:                                               ; preds = %55, %62
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #14
  br label %66

66:                                               ; preds = %5, %65
  %67 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %43, align 8
  call void @_ZN3viz22SurfaceAllocationGroup15RegisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %67, %"class.viz::Surface"* %0) #14
  %68 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %43, align 8
  %69 = call dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup16GetLastReferenceEv(%"class.viz::SurfaceAllocationGroup"* %68) #14
  %70 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  %71 = call zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"* %69, %"class.viz::SurfaceId"* dereferenceable(32) %70) #14
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %42, align 8
  ret void
}

declare void @_ZN3viz24SurfaceSavedFrameStorageC1EPNS_7SurfaceE(%"class.viz::SurfaceSavedFrameStorage"*, %"class.viz::Surface"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %10 = alloca %"class.base::trace_event::TraceArguments", align 8
  %11 = alloca %"class.base::TimeTicks", align 8
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %13 = bitcast %"class.base::TimeTicks"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %11, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 0
  store i8 7, i8* %17, align 1
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 2, i64 0
  store i8* %7, i8** %18, align 8
  %19 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 0
  %20 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %27 = select i1 %23, i8* %25, i8* %26
  %28 = bitcast %"union.base::trace_event::TraceValue"* %19 to i8**
  store i8* %27, i8** %28, align 8
  %29 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %11, %"class.base::trace_event::TraceArguments"* nonnull %10, i32 %5) #14
  %30 = load i8, i8* %16, align 8
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %66, label %32

32:                                               ; preds = %9, %61
  %33 = phi i64 [ %62, %61 ], [ 0, %9 ]
  %34 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 8
  br i1 %36, label %37, label %48

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %33
  %39 = bitcast %"union.base::trace_event::TraceValue"* %38 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %40 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %39, align 8
  %41 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %40, null
  br i1 %41, label %61, label %42

42:                                               ; preds = %37
  %43 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %40 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %44 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %44, i64 1
  %46 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %45, align 8
  call void %46(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %40) #14
  %47 = load i8, i8* %34, align 1
  br label %48

48:                                               ; preds = %42, %32
  %49 = phi i8 [ %35, %32 ], [ %47, %42 ]
  %50 = icmp eq i8 %49, 9
  br i1 %50, label %51, label %61

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %33
  %53 = bitcast %"union.base::trace_event::TraceValue"* %52 to %"class.protozero::HeapBuffered"**
  %54 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %53, align 8
  %55 = icmp eq %"class.protozero::HeapBuffered"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %54, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %57) #14
  %58 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %54, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %58) #14
  %59 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %54, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %59) #14
  %60 = bitcast %"class.protozero::HeapBuffered"* %54 to i8*
  call void @_ZdlPv(i8* %60) #15
  br label %61

61:                                               ; preds = %56, %51, %48, %37
  %62 = add nuw nsw i64 %33, 1
  %63 = load i8, i8* %16, align 8
  %64 = zext i8 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %32, label %66

66:                                               ; preds = %61, %9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #14
  ret i64 %29
}

declare void @_ZNK3viz11SurfaceInfo8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::SurfaceInfo"*) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup15RegisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #3

declare dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup16GetLastReferenceEv(%"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK3viz9SurfaceId11IsNewerThanERKS0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7SurfaceD2Ev(%"class.viz::Surface"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.absl::optional.134", align 8
  %4 = alloca %"class.absl::optional.134", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !6
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %37, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %10, align 8
  %12 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %13 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %12, align 8
  %14 = icmp eq %"class.std::__1::unique_ptr.221"* %11, %13
  br i1 %14, label %37, label %15

15:                                               ; preds = %9, %34
  %16 = phi %"class.std::__1::unique_ptr.221"* [ %35, %34 ], [ %11, %9 ]
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %17, align 8
  %19 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %18, i64 0, i32 0, i32 10, i32 0, i32 0
  %20 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %19, align 8
  %21 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %18, i64 0, i32 0, i32 10, i32 0, i32 1
  %22 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %21, align 8
  %23 = icmp eq %"class.std::__1::unique_ptr.251"* %22, %20
  br i1 %23, label %34, label %24

24:                                               ; preds = %15, %32
  %25 = phi %"class.std::__1::unique_ptr.251"* [ %26, %32 ], [ %22, %15 ]
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %25, i64 -1
  %27 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %27, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %27, align 8
  %29 = icmp eq %"class.viz::CopyOutputRequest"* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %24
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %28) #14
  %31 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %28, i64 0, i32 0
  tail call void @_ZdlPv(i8* %31) #15
  br label %32

32:                                               ; preds = %30, %24
  %33 = icmp eq %"class.std::__1::unique_ptr.251"* %26, %20
  br i1 %33, label %34, label %24

34:                                               ; preds = %32, %15
  store %"class.std::__1::unique_ptr.251"* %20, %"class.std::__1::unique_ptr.251"** %21, align 8
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %16, i64 1
  %36 = icmp eq %"class.std::__1::unique_ptr.221"* %35, %13
  br i1 %36, label %37, label %15

37:                                               ; preds = %34, %1, %9
  %38 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3
  %39 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %38, i64 0, i32 0, i32 0
  %40 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %39) #14
  br i1 %40, label %41, label %62

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %43 = bitcast i64* %42 to %"class.viz::SurfaceClient"**
  %44 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %43, align 8
  %45 = icmp eq %"class.viz::SurfaceClient"* %44, null
  br i1 %45, label %62, label %46

46:                                               ; preds = %41
  %47 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %39) #14
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %50 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #14
  br label %51

51:                                               ; preds = %48, %46
  %52 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %39) #14
  br i1 %52, label %53, label %56

53:                                               ; preds = %51
  %54 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %43, align 8
  %55 = bitcast %"class.viz::SurfaceClient"* %54 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)***
  br label %56

56:                                               ; preds = %51, %53
  %57 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** [ %55, %53 ], [ null, %51 ]
  %58 = phi %"class.viz::SurfaceClient"* [ %54, %53 ], [ null, %51 ]
  %59 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** %57, align 8
  %60 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %59, i64 3
  %61 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %60, align 8
  call void %61(%"class.viz::SurfaceClient"* %58, %"class.viz::Surface"* %0) #14
  br label %62

62:                                               ; preds = %41, %37, %56
  %63 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %64 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %63, align 8
  call void @_ZN3viz14SurfaceManager16SurfaceDestroyedEPNS_7SurfaceE(%"class.viz::SurfaceManager"* %64, %"class.viz::Surface"* %0) #14
  %65 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 320, i1 false) #14
  %67 = load i8, i8* %66, align 8, !range !6
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %71 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %70, %"class.viz::CompositorFrame"* dereferenceable(296) %71) #14
  %72 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %73 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %74 = bitcast i64* %72 to i8*
  %75 = bitcast i64* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 11, i1 false) #14
  store i8 1, i8* %65, align 8
  br label %76

76:                                               ; preds = %62, %69
  call void @_ZN3viz7Surface34UnrefFrameResourcesAndRunCallbacksEN4absl8optionalINS0_9FrameDataEEE(%"class.viz::Surface"* %0, %"class.absl::optional.134"* nonnull %3)
  %77 = load i8, i8* %65, align 8, !range !6
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %80) #14
  store i8 0, i8* %65, align 8
  br label %81

81:                                               ; preds = %76, %79
  %82 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %83 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 0, i64 320, i1 false) #14
  %84 = load i8, i8* %83, align 8, !range !6
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %93, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %88 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %87, %"class.viz::CompositorFrame"* dereferenceable(296) %88) #14
  %89 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %90 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %91 = bitcast i64* %89 to i8*
  %92 = bitcast i64* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 11, i1 false) #14
  store i8 1, i8* %82, align 8
  br label %93

93:                                               ; preds = %81, %86
  call void @_ZN3viz7Surface34UnrefFrameResourcesAndRunCallbacksEN4absl8optionalINS0_9FrameDataEEE(%"class.viz::Surface"* %0, %"class.absl::optional.134"* nonnull %4)
  %94 = load i8, i8* %82, align 8, !range !6
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %97) #14
  store i8 0, i8* %82, align 8
  br label %98

98:                                               ; preds = %93, %96
  %99 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %100 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %99, align 8
  %101 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 1
  %102 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %101, align 8
  %103 = icmp eq %"class.viz::SurfaceAllocationGroup"** %100, %102
  br i1 %103, label %104, label %110

104:                                              ; preds = %110, %98
  %105 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %106 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %105, align 8
  %107 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %108 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %107, align 8
  %109 = icmp eq %"class.viz::SurfaceAllocationGroup"** %106, %108
  br i1 %109, label %115, label %122

110:                                              ; preds = %98, %110
  %111 = phi %"class.viz::SurfaceAllocationGroup"** [ %113, %110 ], [ %100, %98 ]
  %112 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %111, align 8
  call void @_ZN3viz22SurfaceAllocationGroup24UnregisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %112, %"class.viz::Surface"* %0) #14
  %113 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %111, i64 1
  %114 = icmp eq %"class.viz::SurfaceAllocationGroup"** %113, %102
  br i1 %114, label %104, label %110

115:                                              ; preds = %122, %104
  %116 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %117 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %116, align 8
  %118 = call { i8, i64 } @_ZN3viz25SurfaceDependencyDeadline6CancelEv(%"class.viz::SurfaceDependencyDeadline"* %117) #14
  %119 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 231, i32 0), align 16
  %120 = and i8 %119, 25
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %140, label %127, !prof !5

122:                                              ; preds = %104, %122
  %123 = phi %"class.viz::SurfaceAllocationGroup"** [ %125, %122 ], [ %106, %104 ]
  %124 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %123, align 8
  call void @_ZN3viz22SurfaceAllocationGroup25UnregisterBlockedEmbedderEPNS_7SurfaceEb(%"class.viz::SurfaceAllocationGroup"* %124, %"class.viz::Surface"* %0, i1 zeroext false) #14
  %125 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %123, i64 1
  %126 = icmp eq %"class.viz::SurfaceAllocationGroup"** %125, %108
  br i1 %126, label %115, label %122

127:                                              ; preds = %115
  %128 = ptrtoint %"class.viz::Surface"* %0 to i64
  %129 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %129) #14
  %130 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0
  call void @_ZNK3viz11SurfaceInfo8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.viz::SurfaceInfo"* %130) #14
  %131 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext 70, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 231, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* null, i64 %128, i32 2048, i64 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5)
  %132 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %133 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %132, i64 0, i32 1, i32 0
  %134 = load i8, i8* %133, align 1
  %135 = icmp slt i8 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %127
  %137 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load i8*, i8** %137, align 8
  call void @_ZdlPv(i8* %138) #15
  br label %139

139:                                              ; preds = %127, %136
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %129) #14
  br label %140

140:                                              ; preds = %115, %139
  %141 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 17
  %142 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %141, align 8
  call void @_ZN3viz22SurfaceAllocationGroup17UnregisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %142, %"class.viz::Surface"* %0) #14
  %143 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 20, i32 0
  call void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"* %143) #14
  %144 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 18
  call void @_ZN3viz24SurfaceSavedFrameStorageD1Ev(%"class.viz::SurfaceSavedFrameStorage"* %144) #14
  %145 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %105, align 8
  %146 = icmp eq %"class.viz::SurfaceAllocationGroup"** %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %140
  %148 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %145 to i64
  %149 = bitcast %"class.viz::SurfaceAllocationGroup"*** %107 to i64*
  store i64 %148, i64* %149, align 8
  %150 = bitcast %"class.viz::SurfaceAllocationGroup"** %145 to i8*
  call void @_ZdlPv(i8* %150) #15
  br label %151

151:                                              ; preds = %140, %147
  %152 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %153 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %152, align 8
  %154 = icmp eq %"class.viz::SurfaceId"* %153, null
  br i1 %154, label %160, label %155

155:                                              ; preds = %151
  %156 = ptrtoint %"class.viz::SurfaceId"* %153 to i64
  %157 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %158 = bitcast %"class.viz::SurfaceId"** %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = bitcast %"class.viz::SurfaceId"* %153 to i8*
  call void @_ZdlPv(i8* %159) #15
  br label %160

160:                                              ; preds = %151, %155
  %161 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %99, align 8
  %162 = icmp eq %"class.viz::SurfaceAllocationGroup"** %161, null
  br i1 %162, label %167, label %163

163:                                              ; preds = %160
  %164 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %161 to i64
  %165 = bitcast %"class.viz::SurfaceAllocationGroup"*** %101 to i64*
  store i64 %164, i64* %165, align 8
  %166 = bitcast %"class.viz::SurfaceAllocationGroup"** %161 to i8*
  call void @_ZdlPv(i8* %166) #15
  br label %167

167:                                              ; preds = %160, %163
  %168 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11, i32 0, i32 0
  %169 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %168, align 8
  %170 = icmp eq %"class.viz::SurfaceId"* %169, null
  br i1 %170, label %176, label %171

171:                                              ; preds = %167
  %172 = ptrtoint %"class.viz::SurfaceId"* %169 to i64
  %173 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11, i32 0, i32 1
  %174 = bitcast %"class.viz::SurfaceId"** %173 to i64*
  store i64 %172, i64* %174, align 8
  %175 = bitcast %"class.viz::SurfaceId"* %169 to i8*
  call void @_ZdlPv(i8* %175) #15
  br label %176

176:                                              ; preds = %167, %171
  %177 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %178 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %177, align 8
  %179 = icmp eq %"class.viz::SurfaceId"* %178, null
  br i1 %179, label %185, label %180

180:                                              ; preds = %176
  %181 = ptrtoint %"class.viz::SurfaceId"* %178 to i64
  %182 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %183 = bitcast %"class.viz::SurfaceId"** %182 to i64*
  store i64 %181, i64* %183, align 8
  %184 = bitcast %"class.viz::SurfaceId"* %178 to i8*
  call void @_ZdlPv(i8* %184) #15
  br label %185

185:                                              ; preds = %176, %180
  %186 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %187 = load i8, i8* %186, align 8, !range !6
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %191, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %190) #14
  store i8 0, i8* %186, align 8
  br label %191

191:                                              ; preds = %185, %189
  %192 = load i8, i8* %83, align 8, !range !6
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %196, label %194

194:                                              ; preds = %191
  %195 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %195) #14
  store i8 0, i8* %83, align 8
  br label %196

196:                                              ; preds = %191, %194
  %197 = load i8, i8* %66, align 8, !range !6
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %201, label %199

199:                                              ; preds = %196
  %200 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %200) #14
  store i8 0, i8* %66, align 8
  br label %201

201:                                              ; preds = %196, %199
  %202 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %116, align 8
  store %"class.viz::SurfaceDependencyDeadline"* null, %"class.viz::SurfaceDependencyDeadline"** %116, align 8
  %203 = icmp eq %"class.viz::SurfaceDependencyDeadline"* %202, null
  br i1 %203, label %206, label %204

204:                                              ; preds = %201
  call void @_ZN3viz25SurfaceDependencyDeadlineD1Ev(%"class.viz::SurfaceDependencyDeadline"* nonnull %202) #14
  %205 = bitcast %"class.viz::SurfaceDependencyDeadline"* %202 to i8*
  call void @_ZdlPv(i8* %205) #15
  br label %206

206:                                              ; preds = %201, %204
  %207 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %38, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %207) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface17ClearCopyRequestsEv(%"class.viz::Surface"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %33, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %6, align 8
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr.221"* %7, %9
  br i1 %10, label %33, label %11

11:                                               ; preds = %5, %30
  %12 = phi %"class.std::__1::unique_ptr.221"* [ %31, %30 ], [ %7, %5 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %13, align 8
  %15 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 10, i32 0, i32 0
  %16 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %15, align 8
  %17 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %14, i64 0, i32 0, i32 10, i32 0, i32 1
  %18 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %17, align 8
  %19 = icmp eq %"class.std::__1::unique_ptr.251"* %18, %16
  br i1 %19, label %30, label %20

20:                                               ; preds = %11, %28
  %21 = phi %"class.std::__1::unique_ptr.251"* [ %22, %28 ], [ %18, %11 ]
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %23, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %23, align 8
  %25 = icmp eq %"class.viz::CopyOutputRequest"* %24, null
  br i1 %25, label %28, label %26

26:                                               ; preds = %20
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %24) #14
  %27 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %24, i64 0, i32 0
  tail call void @_ZdlPv(i8* %27) #15
  br label %28

28:                                               ; preds = %26, %20
  %29 = icmp eq %"class.std::__1::unique_ptr.251"* %22, %16
  br i1 %29, label %30, label %20

30:                                               ; preds = %28, %11
  store %"class.std::__1::unique_ptr.251"* %16, %"class.std::__1::unique_ptr.251"** %17, align 8
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %12, i64 1
  %32 = icmp eq %"class.std::__1::unique_ptr.221"* %31, %9
  br i1 %32, label %33, label %11

33:                                               ; preds = %30, %5, %1
  ret void
}

declare void @_ZN3viz14SurfaceManager16SurfaceDestroyedEPNS_7SurfaceE(%"class.viz::SurfaceManager"*, %"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface34UnrefFrameResourcesAndRunCallbacksEN4absl8optionalINS0_9FrameDataEEE(%"class.viz::Surface"*, %"class.absl::optional.134"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.std::__1::vector.407", align 16
  %7 = alloca %"class.std::__1::vector.407", align 16
  %8 = alloca %"struct.gfx::SwapTimings", align 8
  %9 = alloca %"struct.gfx::PresentationFeedback", align 8
  %10 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !6
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %181, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %15 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %15, label %16, label %181

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %18 = bitcast i64* %17 to %"class.viz::SurfaceClient"**
  %19 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %18, align 8
  %20 = icmp eq %"class.viz::SurfaceClient"* %19, null
  br i1 %20, label %181, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.std::__1::vector.407"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #14
  %23 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %6, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %6, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.std::__1::vector.407"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -86, i64 24, i1 false)
  %27 = load i8, i8* %10, align 8, !range !6
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %30, !prof !7

29:                                               ; preds = %21
  tail call void @llvm.trap() #14
  unreachable

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 1
  call void @_ZN3viz20TransferableResource15ReturnResourcesERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"class.std::__1::vector.407"* nonnull sret %6, %"class.std::__1::vector.198"* dereferenceable(24) %31) #14
  %32 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %23, align 16
  %33 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %24, align 8
  %34 = icmp eq %"struct.viz::ReturnedResource"* %32, %33
  br i1 %34, label %35, label %83

35:                                               ; preds = %83, %30
  %36 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %36, label %40, label %37

37:                                               ; preds = %35
  %38 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %39 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #14
  br label %40

40:                                               ; preds = %37, %35
  %41 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %41, label %42, label %45

42:                                               ; preds = %40
  %43 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %18, align 8
  %44 = bitcast %"class.viz::SurfaceClient"* %43 to void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)***
  br label %45

45:                                               ; preds = %40, %42
  %46 = phi void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)*** [ %44, %42 ], [ null, %40 ]
  %47 = phi %"class.viz::SurfaceClient"* [ %43, %42 ], [ null, %40 ]
  %48 = bitcast %"class.std::__1::vector.407"* %6 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 16
  %50 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %7, i64 0, i32 0, i32 1
  %51 = bitcast %"class.std::__1::vector.407"* %7 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %51, align 16
  %52 = bitcast %"struct.viz::ReturnedResource"** %25 to i64*
  %53 = load i64, i64* %52, align 16
  %54 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %55 = bitcast %"struct.viz::ReturnedResource"** %54 to i64*
  store i64 %53, i64* %55, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 24, i1 false) #14
  %56 = load void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)**, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)*** %46, align 8
  %57 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)*, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)** %56, i64 6
  %58 = load void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)*, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.407"*)** %57, align 8
  call void %58(%"class.viz::SurfaceClient"* %47, %"class.std::__1::vector.407"* nonnull %7) #14
  %59 = getelementptr inbounds %"class.std::__1::vector.407", %"class.std::__1::vector.407"* %7, i64 0, i32 0, i32 0
  %60 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %59, align 16
  %61 = icmp eq %"struct.viz::ReturnedResource"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %45
  %63 = bitcast %"struct.viz::ReturnedResource"* %60 to i8*
  %64 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %50, align 8
  %65 = icmp eq %"struct.viz::ReturnedResource"* %64, %60
  br i1 %65, label %73, label %66

66:                                               ; preds = %62, %66
  %67 = phi %"struct.viz::ReturnedResource"* [ %68, %66 ], [ %64, %62 ]
  %68 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %67, i64 -1
  call void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"* %68) #14
  %69 = icmp eq %"struct.viz::ReturnedResource"* %68, %60
  br i1 %69, label %70, label %66

70:                                               ; preds = %66
  %71 = bitcast %"class.std::__1::vector.407"* %7 to i8**
  %72 = load i8*, i8** %71, align 16
  br label %73

73:                                               ; preds = %70, %62
  %74 = phi i8* [ %72, %70 ], [ %63, %62 ]
  store %"struct.viz::ReturnedResource"* %60, %"struct.viz::ReturnedResource"** %50, align 8
  call void @_ZdlPv(i8* %74) #15
  br label %75

75:                                               ; preds = %45, %73
  %76 = load i8, i8* %10, align 8, !range !6
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %79, !prof !7

78:                                               ; preds = %75
  call void @llvm.trap() #14
  unreachable

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3
  %81 = load i8, i8* %80, align 1, !range !6
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %91, label %110

83:                                               ; preds = %30, %83
  %84 = phi %"struct.viz::ReturnedResource"* [ %89, %83 ], [ %32, %30 ]
  %85 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %84, i64 0, i32 2, i32 0
  store i8 0, i8* %85, align 8
  %86 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %84, i64 0, i32 2, i32 1
  store i8 -1, i8* %86, align 1
  %87 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %84, i64 0, i32 2, i32 2, i32 0, i32 0
  %88 = bitcast i64* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 16, i1 false) #14
  %89 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %84, i64 1
  %90 = icmp eq %"struct.viz::ReturnedResource"* %89, %33
  br i1 %90, label %35, label %83

91:                                               ; preds = %79
  %92 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %92, label %96, label %93

93:                                               ; preds = %91
  %94 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %95 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #14
  br label %96

96:                                               ; preds = %93, %91
  %97 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %97, label %98, label %101

98:                                               ; preds = %96
  %99 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %18, align 8
  %100 = bitcast %"class.viz::SurfaceClient"* %99 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)***
  br label %101

101:                                              ; preds = %98, %96
  %102 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** [ %100, %98 ], [ null, %96 ]
  %103 = phi %"class.viz::SurfaceClient"* [ %99, %98 ], [ null, %96 ]
  %104 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** %102, align 8
  %105 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %104, i64 11
  %106 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %105, align 8
  call void %106(%"class.viz::SurfaceClient"* %103, %"class.viz::Surface"* %0) #14
  %107 = load i8, i8* %10, align 8, !range !6
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %110, !prof !7

109:                                              ; preds = %101
  call void @llvm.trap() #14
  unreachable

110:                                              ; preds = %79, %101
  %111 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 4
  %112 = load i8, i8* %111, align 2, !range !6
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %114, label %150

114:                                              ; preds = %110
  %115 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %115, label %116, label %150

116:                                              ; preds = %114
  %117 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %18, align 8
  %118 = icmp eq %"class.viz::SurfaceClient"* %117, null
  br i1 %118, label %150, label %119

119:                                              ; preds = %116
  %120 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %120, label %124, label %121

121:                                              ; preds = %119
  %122 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %123 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #14
  br label %124

124:                                              ; preds = %121, %119
  %125 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %14) #14
  br i1 %125, label %126, label %129

126:                                              ; preds = %124
  %127 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %18, align 8
  %128 = bitcast %"class.viz::SurfaceClient"* %127 to void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)***
  br label %129

129:                                              ; preds = %124, %126
  %130 = phi void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*** [ %128, %126 ], [ null, %124 ]
  %131 = phi %"class.viz::SurfaceClient"* [ %127, %126 ], [ null, %124 ]
  %132 = load i8, i8* %10, align 8, !range !6
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %135, !prof !7

134:                                              ; preds = %129
  call void @llvm.trap() #14
  unreachable

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 13
  %137 = load i32, i32* %136, align 8
  %138 = bitcast %"struct.gfx::SwapTimings"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %138) #14
  %139 = bitcast %"struct.gfx::PresentationFeedback"* %9 to i8*
  %140 = bitcast %"struct.gfx::SwapTimings"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 40, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %139) #14
  %141 = call i64 @_ZN4base9TimeTicks3NowEv() #14, !noalias !8
  %142 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %9, i64 0, i32 0, i32 0, i32 0
  store i64 %141, i64* %142, align 8, !alias.scope !8
  %143 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %9, i64 0, i32 1, i32 0
  store i64 0, i64* %143, align 8, !alias.scope !8
  %144 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %9, i64 0, i32 2
  store i32 16, i32* %144, align 8, !alias.scope !8
  %145 = getelementptr inbounds %"struct.gfx::PresentationFeedback", %"struct.gfx::PresentationFeedback"* %9, i64 0, i32 3, i32 0, i32 0
  %146 = bitcast i64* %145 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 32, i1 false) #14, !alias.scope !8
  %147 = load void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)**, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*** %130, align 8
  %148 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)** %147, i64 12
  %149 = load void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)*, void (%"class.viz::SurfaceClient"*, i32, i64, %"struct.gfx::SwapTimings"*, %"struct.gfx::PresentationFeedback"*)** %148, align 8
  call void %149(%"class.viz::SurfaceClient"* %131, i32 %137, i64 0, %"struct.gfx::SwapTimings"* nonnull dereferenceable(40) %8, %"struct.gfx::PresentationFeedback"* nonnull dereferenceable(56) %9) #14
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %139) #14
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %138) #14
  br label %150

150:                                              ; preds = %116, %114, %110, %135
  %151 = load i8, i8* %10, align 8, !range !6
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %153, label %154, !prof !7

153:                                              ; preds = %150
  call void @llvm.trap() #14
  unreachable

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 8, i32 0, i32 0
  %156 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %155, align 8
  %157 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 8, i32 0, i32 1
  %158 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %157, align 8
  %159 = icmp eq %"class.ui::LatencyInfo"* %156, %158
  br i1 %159, label %160, label %177

160:                                              ; preds = %177, %154
  %161 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %23, align 16
  %162 = icmp eq %"struct.viz::ReturnedResource"* %161, null
  br i1 %162, label %176, label %163

163:                                              ; preds = %160
  %164 = bitcast %"struct.viz::ReturnedResource"* %161 to i8*
  %165 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %24, align 8
  %166 = icmp eq %"struct.viz::ReturnedResource"* %165, %161
  br i1 %166, label %174, label %167

167:                                              ; preds = %163, %167
  %168 = phi %"struct.viz::ReturnedResource"* [ %169, %167 ], [ %165, %163 ]
  %169 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %168, i64 -1
  call void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"* %169) #14
  %170 = icmp eq %"struct.viz::ReturnedResource"* %169, %161
  br i1 %170, label %171, label %167

171:                                              ; preds = %167
  %172 = bitcast %"class.std::__1::vector.407"* %6 to i8**
  %173 = load i8*, i8** %172, align 16
  br label %174

174:                                              ; preds = %171, %163
  %175 = phi i8* [ %173, %171 ], [ %164, %163 ]
  store %"struct.viz::ReturnedResource"* %161, %"struct.viz::ReturnedResource"** %24, align 8
  call void @_ZdlPv(i8* %175) #15
  br label %176

176:                                              ; preds = %160, %174
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #14
  br label %181

177:                                              ; preds = %154, %177
  %178 = phi %"class.ui::LatencyInfo"* [ %179, %177 ], [ %156, %154 ]
  call void @_ZN2ui11LatencyInfo9TerminateEv(%"class.ui::LatencyInfo"* %178) #14
  %179 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %178, i64 1
  %180 = icmp eq %"class.ui::LatencyInfo"* %179, %158
  br i1 %180, label %160, label %177

181:                                              ; preds = %16, %2, %13, %176
  ret void
}

declare void @_ZN3viz22SurfaceAllocationGroup24UnregisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup25UnregisterBlockedEmbedderEPNS_7SurfaceEb(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*, i1 zeroext) local_unnamed_addr #3

declare { i8, i64 } @_ZN3viz25SurfaceDependencyDeadline6CancelEv(%"class.viz::SurfaceDependencyDeadline"*) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup17UnregisterSurfaceEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal18WeakPtrFactoryBaseD2Ev(%"class.base::internal::WeakPtrFactoryBase"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3viz24SurfaceSavedFrameStorageD1Ev(%"class.viz::SurfaceSavedFrameStorage"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface21SetDependencyDeadlineENSt3__110unique_ptrINS_25SurfaceDependencyDeadlineENS1_14default_deleteIS3_EEEE(%"class.viz::Surface"* nocapture, %"class.viz::SurfaceDependencyDeadline"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.viz::SurfaceDependencyDeadline"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.125"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr.125"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %"class.viz::SurfaceDependencyDeadline"* %6, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  tail call void @_ZN3viz25SurfaceDependencyDeadlineD1Ev(%"class.viz::SurfaceDependencyDeadline"* nonnull %6) #14
  %10 = bitcast %"class.viz::SurfaceDependencyDeadline"* %6 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface23SetPreviousFrameSurfaceEPS0_(%"class.viz::Surface"* nocapture, %"class.viz::Surface"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 1
  %4 = bitcast %"class.viz::SurfaceId"* %3 to i8*
  %5 = bitcast %"class.viz::Surface"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface23UpdateSurfaceReferencesEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.356", align 8
  %3 = alloca %"class.std::__1::vector.356", align 8
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %5 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %4, align 8
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  %7 = tail call dereferenceable(24) %"class.base::internal::flat_tree.34"* @_ZNK3viz14SurfaceManager29GetSurfacesReferencedByParentERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %5, %"class.viz::SurfaceId"* dereferenceable(32) %6) #14
  %8 = bitcast %"class.std::__1::vector.356"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %2, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %2, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #14
  %11 = bitcast %"class.std::__1::vector.356"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #14
  %12 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %3, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %3, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #14
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10
  call void @_ZN3viz29GetSurfaceReferenceDifferenceERKNS_9SurfaceIdERKN4base8internal9flat_treeIS0_NS3_8identityENSt3__14lessIvEENS7_6vectorIS0_NS7_9allocatorIS0_EEEEEESG_PNSA_INS_16SurfaceReferenceENSB_ISH_EEEESK_(%"class.viz::SurfaceId"* dereferenceable(32) %6, %"class.base::internal::flat_tree.34"* dereferenceable(24) %7, %"class.base::internal::flat_tree.34"* dereferenceable(24) %14, %"class.std::__1::vector.356"* nonnull %2, %"class.std::__1::vector.356"* nonnull %3) #14
  %15 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %9, align 8
  %16 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %10, align 8
  %17 = icmp eq %"class.viz::SurfaceReference"* %15, %16
  br i1 %17, label %20, label %18

18:                                               ; preds = %1
  %19 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %4, align 8
  call void @_ZN3viz14SurfaceManager20AddSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"* %19, %"class.std::__1::vector.356"* nonnull dereferenceable(24) %2) #14
  br label %20

20:                                               ; preds = %18, %1
  %21 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %12, align 8
  %22 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %13, align 8
  %23 = icmp eq %"class.viz::SurfaceReference"* %21, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %4, align 8
  call void @_ZN3viz14SurfaceManager23RemoveSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"* %25, %"class.std::__1::vector.356"* nonnull dereferenceable(24) %3) #14
  %26 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %12, align 8
  br label %27

27:                                               ; preds = %24, %20
  %28 = phi %"class.viz::SurfaceReference"* [ %26, %24 ], [ %21, %20 ]
  %29 = icmp eq %"class.viz::SurfaceReference"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %27
  %31 = bitcast %"class.viz::SurfaceReference"* %28 to i8*
  %32 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %13, align 8
  %33 = icmp eq %"class.viz::SurfaceReference"* %32, %28
  br i1 %33, label %41, label %34

34:                                               ; preds = %30, %34
  %35 = phi %"class.viz::SurfaceReference"* [ %36, %34 ], [ %32, %30 ]
  %36 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %35, i64 -1
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* %36) #14
  %37 = icmp eq %"class.viz::SurfaceReference"* %36, %28
  br i1 %37, label %38, label %34

38:                                               ; preds = %34
  %39 = bitcast %"class.std::__1::vector.356"* %3 to i8**
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %38, %30
  %42 = phi i8* [ %40, %38 ], [ %31, %30 ]
  store %"class.viz::SurfaceReference"* %28, %"class.viz::SurfaceReference"** %13, align 8
  call void @_ZdlPv(i8* %42) #15
  br label %43

43:                                               ; preds = %27, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #14
  %44 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %9, align 8
  %45 = icmp eq %"class.viz::SurfaceReference"* %44, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %43
  %47 = bitcast %"class.viz::SurfaceReference"* %44 to i8*
  %48 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %10, align 8
  %49 = icmp eq %"class.viz::SurfaceReference"* %48, %44
  br i1 %49, label %57, label %50

50:                                               ; preds = %46, %50
  %51 = phi %"class.viz::SurfaceReference"* [ %52, %50 ], [ %48, %46 ]
  %52 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %51, i64 -1
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* %52) #14
  %53 = icmp eq %"class.viz::SurfaceReference"* %52, %44
  br i1 %53, label %54, label %50

54:                                               ; preds = %50
  %55 = bitcast %"class.std::__1::vector.356"* %2 to i8**
  %56 = load i8*, i8** %55, align 8
  br label %57

57:                                               ; preds = %54, %46
  %58 = phi i8* [ %56, %54 ], [ %47, %46 ]
  store %"class.viz::SurfaceReference"* %44, %"class.viz::SurfaceReference"** %10, align 8
  call void @_ZdlPv(i8* %58) #15
  br label %59

59:                                               ; preds = %43, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #14
  ret void
}

declare dereferenceable(24) %"class.base::internal::flat_tree.34"* @_ZNK3viz14SurfaceManager29GetSurfacesReferencedByParentERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN3viz29GetSurfaceReferenceDifferenceERKNS_9SurfaceIdERKN4base8internal9flat_treeIS0_NS3_8identityENSt3__14lessIvEENS7_6vectorIS0_NS7_9allocatorIS0_EEEEEESG_PNSA_INS_16SurfaceReferenceENSB_ISH_EEEESK_(%"class.viz::SurfaceId"* dereferenceable(32), %"class.base::internal::flat_tree.34"* dereferenceable(24), %"class.base::internal::flat_tree.34"* dereferenceable(24), %"class.std::__1::vector.356"*, %"class.std::__1::vector.356"*) local_unnamed_addr #3

declare void @_ZN3viz14SurfaceManager20AddSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"*, %"class.std::__1::vector.356"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN3viz14SurfaceManager23RemoveSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"*, %"class.std::__1::vector.356"* dereferenceable(24)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface30OnChildActivatedForActiveFrameERKNS_9SurfaceIdE(%"class.viz::Surface"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.356", align 8
  %4 = alloca [1 x %"class.viz::SurfaceReference"], align 8
  %5 = alloca %"class.std::__1::vector.356", align 8
  %6 = alloca [1 x %"class.viz::SurfaceReference"], align 8
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !6
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %46, label %10, !prof !7

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 9
  %12 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 9, i32 0, i32 1
  %13 = bitcast %"class.viz::SurfaceRange"** %12 to i64*
  %14 = bitcast %"class.std::__1::vector.156"* %11 to i64*
  %15 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11, i32 0, i32 0
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10
  %17 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %19 = bitcast %"class.std::__1::vector.356"* %3 to i8*
  %20 = bitcast [1 x %"class.viz::SurfaceReference"]* %4 to i8*
  %21 = getelementptr inbounds [1 x %"class.viz::SurfaceReference"], [1 x %"class.viz::SurfaceReference"]* %4, i64 0, i64 0
  %22 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %3, i64 0, i32 0, i32 1
  %24 = bitcast %"class.viz::SurfaceReference"** %23 to i8**
  %25 = bitcast %"class.std::__1::vector.356"* %3 to i8**
  %26 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %27 = bitcast %"class.viz::SurfaceReference"** %26 to i8**
  %28 = bitcast %"class.viz::SurfaceReference"** %23 to i64*
  %29 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %3, i64 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::vector.356"* %5 to i8*
  %31 = bitcast [1 x %"class.viz::SurfaceReference"]* %6 to i8*
  %32 = getelementptr inbounds [1 x %"class.viz::SurfaceReference"], [1 x %"class.viz::SurfaceReference"]* %6, i64 0, i64 0
  %33 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %5, i64 0, i32 0, i32 1
  %34 = bitcast %"class.viz::SurfaceReference"** %33 to i8**
  %35 = bitcast %"class.std::__1::vector.356"* %5 to i8**
  %36 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %37 = bitcast %"class.viz::SurfaceReference"** %36 to i8**
  %38 = bitcast %"class.viz::SurfaceReference"** %33 to i64*
  %39 = getelementptr inbounds %"class.std::__1::vector.356", %"class.std::__1::vector.356"* %5, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 1
  %42 = bitcast %"class.viz::SurfaceAllocationGroup"*** %41 to i64*
  %43 = bitcast %"class.viz::SurfaceId"* %1 to i8*
  %44 = getelementptr inbounds [1 x %"class.viz::SurfaceReference"], [1 x %"class.viz::SurfaceReference"]* %4, i64 0, i64 0
  %45 = getelementptr inbounds [1 x %"class.viz::SurfaceReference"], [1 x %"class.viz::SurfaceReference"]* %6, i64 0, i64 0
  br label %47

46:                                               ; preds = %274, %2
  call void @llvm.trap() #14
  unreachable

47:                                               ; preds = %10, %274
  %48 = phi i64 [ 0, %10 ], [ %275, %274 ]
  %49 = load i64, i64* %13, align 8
  %50 = load i64, i64* %14, align 8
  %51 = sub i64 %49, %50
  %52 = sdiv exact i64 %51, 72
  %53 = icmp ult i64 %48, %52
  %54 = inttoptr i64 %50 to %"class.viz::SurfaceRange"*
  br i1 %53, label %56, label %55

55:                                               ; preds = %47
  ret void

56:                                               ; preds = %47
  %57 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %54, i64 %48
  %58 = call zeroext i1 @_ZNK3viz12SurfaceRange18IsInRangeInclusiveERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"* %57, %"class.viz::SurfaceId"* dereferenceable(32) %1) #14
  br i1 %58, label %59, label %274

59:                                               ; preds = %56
  %60 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %15, align 8
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 0, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %127, label %69

69:                                               ; preds = %65, %59
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %127, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %127, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 2, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 2, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %127, label %85

85:                                               ; preds = %81, %77
  %86 = call { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree.34"* %16, %"class.viz::SurfaceId"* dereferenceable(32) %61) #14
  %87 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %86, 0
  %88 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %86, 1
  %89 = icmp eq %"class.viz::SurfaceId"* %87, %88
  br i1 %89, label %105, label %90

90:                                               ; preds = %85
  %91 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %17, align 8
  %92 = icmp eq %"class.viz::SurfaceId"* %87, %91
  br i1 %92, label %105, label %93

93:                                               ; preds = %90
  %94 = ptrtoint %"class.viz::SurfaceId"* %91 to i64
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %87, i64 1
  %96 = ptrtoint %"class.viz::SurfaceId"* %95 to i64
  %97 = sub i64 %94, %96
  %98 = ashr exact i64 %97, 5
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %93
  %101 = bitcast %"class.viz::SurfaceId"* %87 to i8*
  %102 = bitcast %"class.viz::SurfaceId"* %95 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 %97, i1 false) #14
  br label %103

103:                                              ; preds = %93, %100
  %104 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %87, i64 %98
  store %"class.viz::SurfaceId"* %104, %"class.viz::SurfaceId"** %17, align 8
  br label %105

105:                                              ; preds = %85, %90, %103
  %106 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #14
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %20) #14
  call void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"* nonnull %21, %"class.viz::SurfaceId"* dereferenceable(32) %22, %"class.viz::SurfaceId"* dereferenceable(32) %61) #14
  %107 = call i8* @_Znwm(i64 64) #15
  %108 = bitcast i8* %107 to %"class.viz::SurfaceReference"*
  store i8* %107, i8** %24, align 8
  store i8* %107, i8** %25, align 8
  %109 = getelementptr inbounds i8, i8* %107, i64 64
  store i8* %109, i8** %27, align 8
  call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* nonnull %108, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %21) #14
  %110 = getelementptr inbounds i8, i8* %107, i64 64
  %111 = ptrtoint i8* %110 to i64
  store i64 %111, i64* %28, align 8
  call void @_ZN3viz14SurfaceManager23RemoveSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"* %106, %"class.std::__1::vector.356"* nonnull dereferenceable(24) %3) #14
  %112 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %29, align 8
  %113 = icmp eq %"class.viz::SurfaceReference"* %112, null
  br i1 %113, label %126, label %114

114:                                              ; preds = %105
  %115 = bitcast %"class.viz::SurfaceReference"* %112 to i8*
  %116 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %23, align 8
  %117 = icmp eq %"class.viz::SurfaceReference"* %116, %112
  br i1 %117, label %124, label %118

118:                                              ; preds = %114, %118
  %119 = phi %"class.viz::SurfaceReference"* [ %120, %118 ], [ %116, %114 ]
  %120 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %119, i64 -1
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* %120) #14
  %121 = icmp eq %"class.viz::SurfaceReference"* %120, %112
  br i1 %121, label %122, label %118

122:                                              ; preds = %118
  %123 = load i8*, i8** %25, align 8
  br label %124

124:                                              ; preds = %122, %114
  %125 = phi i8* [ %123, %122 ], [ %115, %114 ]
  store %"class.viz::SurfaceReference"* %112, %"class.viz::SurfaceReference"** %23, align 8
  call void @_ZdlPv(i8* %125) #15
  br label %126

126:                                              ; preds = %105, %124
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* nonnull %44) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %20) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #14
  br label %127

127:                                              ; preds = %81, %69, %73, %65, %126
  %128 = call { %"class.viz::SurfaceId"*, i8 } @_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE16emplace_key_argsIS3_JRKS3_EEENS5_4pairINS5_11__wrap_iterIPS3_EEbEERKT_DpOT0_(%"class.base::internal::flat_tree.34"* %16, %"class.viz::SurfaceId"* dereferenceable(32) %1, %"class.viz::SurfaceId"* dereferenceable(32) %1) #14
  %129 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #14
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %31) #14
  call void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"* nonnull %32, %"class.viz::SurfaceId"* dereferenceable(32) %22, %"class.viz::SurfaceId"* dereferenceable(32) %1) #14
  %130 = call i8* @_Znwm(i64 64) #15
  %131 = bitcast i8* %130 to %"class.viz::SurfaceReference"*
  store i8* %130, i8** %34, align 8
  store i8* %130, i8** %35, align 8
  %132 = getelementptr inbounds i8, i8* %130, i64 64
  store i8* %132, i8** %37, align 8
  call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* nonnull %131, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %32) #14
  %133 = getelementptr inbounds i8, i8* %130, i64 64
  %134 = ptrtoint i8* %133 to i64
  store i64 %134, i64* %38, align 8
  call void @_ZN3viz14SurfaceManager20AddSurfaceReferencesERKNSt3__16vectorINS_16SurfaceReferenceENS1_9allocatorIS3_EEEE(%"class.viz::SurfaceManager"* %129, %"class.std::__1::vector.356"* nonnull dereferenceable(24) %5) #14
  %135 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %39, align 8
  %136 = icmp eq %"class.viz::SurfaceReference"* %135, null
  br i1 %136, label %149, label %137

137:                                              ; preds = %127
  %138 = bitcast %"class.viz::SurfaceReference"* %135 to i8*
  %139 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %33, align 8
  %140 = icmp eq %"class.viz::SurfaceReference"* %139, %135
  br i1 %140, label %147, label %141

141:                                              ; preds = %137, %141
  %142 = phi %"class.viz::SurfaceReference"* [ %143, %141 ], [ %139, %137 ]
  %143 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %142, i64 -1
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* %143) #14
  %144 = icmp eq %"class.viz::SurfaceReference"* %143, %135
  br i1 %144, label %145, label %141

145:                                              ; preds = %141
  %146 = load i8*, i8** %35, align 8
  br label %147

147:                                              ; preds = %145, %137
  %148 = phi i8* [ %146, %145 ], [ %138, %137 ]
  store %"class.viz::SurfaceReference"* %135, %"class.viz::SurfaceReference"** %33, align 8
  call void @_ZdlPv(i8* %148) #15
  br label %149

149:                                              ; preds = %127, %147
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* nonnull %45) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %31) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #14
  %150 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %54, i64 %48, i32 1
  %151 = call zeroext i1 @_ZNK3viz9SurfaceId19HasSameEmbedTokenAsERKS0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %150) #14
  br i1 %151, label %152, label %270

152:                                              ; preds = %149
  %153 = call zeroext i1 @_ZNK3viz12SurfaceRange23HasDifferentEmbedTokensEv(%"class.viz::SurfaceRange"* %57) #14
  br i1 %153, label %154, label %270

154:                                              ; preds = %152
  %155 = load i32, i32* %62, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %161

157:                                              ; preds = %154
  %158 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 0, i32 1
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %179, label %161

161:                                              ; preds = %157, %154
  %162 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 0
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %179, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %179, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 2, i32 0, i32 0
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %177

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %60, i64 %48, i32 1, i32 2, i32 0, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %179, label %177

177:                                              ; preds = %173, %169
  %178 = call zeroext i1 @_ZNK3viz9SurfaceId19HasSameEmbedTokenAsERKS0_(%"class.viz::SurfaceId"* %61, %"class.viz::SurfaceId"* dereferenceable(32) %1) #14
  br i1 %178, label %270, label %179

179:                                              ; preds = %173, %161, %165, %157, %177
  %180 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = load i8, i8* %180, align 8, !range !6
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %184, !prof !7

183:                                              ; preds = %179
  call void @llvm.trap() #14
  unreachable

184:                                              ; preds = %179
  %185 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %18, align 8
  %186 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %54, i64 %48, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %187 = call %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager30GetAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %185, %"class.viz::SurfaceId"* dereferenceable(32) %186) #14
  %188 = icmp eq %"class.viz::SurfaceAllocationGroup"* %187, null
  br i1 %188, label %270, label %189

189:                                              ; preds = %184
  %190 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %40, align 8
  %191 = load i64, i64* %42, align 8
  %192 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %190 to i64
  %193 = sub i64 %191, %192
  %194 = icmp eq i64 %193, 0
  %195 = inttoptr i64 %191 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %194, label %213, label %196

196:                                              ; preds = %189
  %197 = ashr exact i64 %193, 3
  br label %198

198:                                              ; preds = %198, %196
  %199 = phi %"class.viz::SurfaceAllocationGroup"** [ %190, %196 ], [ %209, %198 ]
  %200 = phi i64 [ %197, %196 ], [ %208, %198 ]
  %201 = lshr i64 %200, 1
  %202 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %199, i64 %201
  %203 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %202, align 8
  %204 = icmp ult %"class.viz::SurfaceAllocationGroup"* %203, %187
  %205 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %202, i64 1
  %206 = xor i64 %201, -1
  %207 = add i64 %200, %206
  %208 = select i1 %204, i64 %207, i64 %201
  %209 = select i1 %204, %"class.viz::SurfaceAllocationGroup"** %205, %"class.viz::SurfaceAllocationGroup"** %199
  %210 = icmp eq i64 %208, 0
  br i1 %210, label %211, label %198

211:                                              ; preds = %198
  %212 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %209 to i64
  br label %213

213:                                              ; preds = %211, %189
  %214 = phi i64 [ %212, %211 ], [ %192, %189 ]
  %215 = phi %"class.viz::SurfaceAllocationGroup"** [ %209, %211 ], [ %190, %189 ]
  %216 = icmp eq %"class.viz::SurfaceAllocationGroup"** %215, %195
  br i1 %216, label %220, label %217

217:                                              ; preds = %213
  %218 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, align 8
  %219 = icmp ult %"class.viz::SurfaceAllocationGroup"* %187, %218
  br i1 %219, label %220, label %223

220:                                              ; preds = %213, %217
  %221 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %215 to i64
  %222 = icmp eq i64 %214, %221
  br i1 %222, label %270, label %223

223:                                              ; preds = %217, %220
  call void @_ZN3viz22SurfaceAllocationGroup24UnregisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* nonnull %187, %"class.viz::Surface"* %0) #14
  %224 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %40, align 8
  %225 = load i64, i64* %42, align 8
  %226 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %224 to i64
  %227 = sub i64 %225, %226
  %228 = icmp eq i64 %227, 0
  %229 = inttoptr i64 %225 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %228, label %247, label %230

230:                                              ; preds = %223
  %231 = ashr exact i64 %227, 3
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi %"class.viz::SurfaceAllocationGroup"** [ %224, %230 ], [ %243, %232 ]
  %234 = phi i64 [ %231, %230 ], [ %242, %232 ]
  %235 = lshr i64 %234, 1
  %236 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %233, i64 %235
  %237 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %236, align 8
  %238 = icmp ult %"class.viz::SurfaceAllocationGroup"* %237, %187
  %239 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %236, i64 1
  %240 = xor i64 %235, -1
  %241 = add i64 %234, %240
  %242 = select i1 %238, i64 %241, i64 %235
  %243 = select i1 %238, %"class.viz::SurfaceAllocationGroup"** %239, %"class.viz::SurfaceAllocationGroup"** %233
  %244 = icmp eq i64 %242, 0
  br i1 %244, label %245, label %232

245:                                              ; preds = %232
  %246 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %243 to i64
  br label %247

247:                                              ; preds = %245, %223
  %248 = phi i64 [ %246, %245 ], [ %226, %223 ]
  %249 = phi %"class.viz::SurfaceAllocationGroup"** [ %243, %245 ], [ %224, %223 ]
  %250 = icmp eq %"class.viz::SurfaceAllocationGroup"** %249, %229
  br i1 %250, label %257, label %251

251:                                              ; preds = %247
  %252 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %249, align 8
  %253 = icmp ult %"class.viz::SurfaceAllocationGroup"* %187, %252
  br i1 %253, label %257, label %254

254:                                              ; preds = %251
  %255 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %249, i64 1
  %256 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %255 to i64
  br label %257

257:                                              ; preds = %254, %251, %247
  %258 = phi i64 [ %256, %254 ], [ %248, %247 ], [ %248, %251 ]
  %259 = inttoptr i64 %258 to %"class.viz::SurfaceAllocationGroup"**
  %260 = icmp eq %"class.viz::SurfaceAllocationGroup"** %249, %259
  br i1 %260, label %270, label %261

261:                                              ; preds = %257
  %262 = sub i64 %225, %258
  %263 = ashr exact i64 %262, 3
  %264 = icmp eq i64 %262, 0
  br i1 %264, label %268, label %265

265:                                              ; preds = %261
  %266 = bitcast %"class.viz::SurfaceAllocationGroup"** %249 to i8*
  %267 = inttoptr i64 %258 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %266, i8* align 8 %267, i64 %262, i1 false) #14
  br label %268

268:                                              ; preds = %265, %261
  %269 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %249, i64 %263
  store %"class.viz::SurfaceAllocationGroup"** %269, %"class.viz::SurfaceAllocationGroup"*** %41, align 8
  br label %270

270:                                              ; preds = %184, %220, %257, %268, %177, %152, %149
  %271 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %15, align 8
  %272 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %271, i64 %48
  %273 = bitcast %"class.viz::SurfaceId"* %272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %273, i8* align 8 %43, i64 32, i1 false)
  br label %274

274:                                              ; preds = %56, %270
  %275 = add i64 %48, 1
  %276 = load i8, i8* %7, align 8, !range !6
  %277 = icmp eq i8 %276, 0
  br i1 %277, label %46, label %47, !prof !7
}

declare zeroext i1 @_ZNK3viz12SurfaceRange18IsInRangeInclusiveERKNS_9SurfaceIdE(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.viz::SurfaceId"* dereferenceable(32)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"*) unnamed_addr #2

declare zeroext i1 @_ZNK3viz9SurfaceId19HasSameEmbedTokenAsERKS0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare zeroext i1 @_ZNK3viz12SurfaceRange23HasDifferentEmbedTokensEv(%"class.viz::SurfaceRange"*) local_unnamed_addr #3

declare %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager30GetAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface29SetIsFallbackAndMaybeActivateEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 15
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !6
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %31, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %9 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %9, align 8
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %12 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %11, align 8
  %13 = icmp eq %"class.viz::SurfaceId"* %10, %12
  %14 = ptrtoint %"class.viz::SurfaceId"* %10 to i64
  br i1 %13, label %28, label %15

15:                                               ; preds = %7
  %16 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %17 = and i8 %16, 25
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %28, label %19, !prof !5

19:                                               ; preds = %15
  %20 = ptrtoint %"class.viz::Surface"* %0 to i64
  %21 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %22 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #14
  %23 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %24 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %24, i64* %23, align 8
  %25 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %20, i64 0, i32 %21, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 2048) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #14
  %26 = bitcast %"class.base::internal::flat_tree.34"* %8 to i64*
  %27 = load i64, i64* %26, align 8
  br label %28

28:                                               ; preds = %7, %15, %19
  %29 = phi i64 [ %27, %19 ], [ %14, %15 ], [ %14, %7 ]
  %30 = bitcast %"class.viz::SurfaceId"** %11 to i64*
  store i64 %29, i64* %30, align 8
  call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0) #14
  br label %31

31:                                               ; preds = %1, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface31ActivatePendingFrameForDeadlineEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %30, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %8 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %8, align 8
  %10 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %11 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  %12 = icmp eq %"class.viz::SurfaceId"* %9, %11
  %13 = ptrtoint %"class.viz::SurfaceId"* %9 to i64
  br i1 %12, label %27, label %14

14:                                               ; preds = %6
  %15 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %16 = and i8 %15, 25
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %27, label %18, !prof !5

18:                                               ; preds = %14
  %19 = ptrtoint %"class.viz::Surface"* %0 to i64
  %20 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %21 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  %22 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %23 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %23, i64* %22, align 8
  %24 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %19, i64 0, i32 %20, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 2048) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  %25 = bitcast %"class.base::internal::flat_tree.34"* %7 to i64*
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %18, %14, %6
  %28 = phi i64 [ %26, %18 ], [ %13, %14 ], [ %13, %6 ]
  %29 = bitcast %"class.viz::SurfaceId"** %10 to i64*
  store i64 %28, i64* %29, align 8
  call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0)
  br label %30

30:                                               ; preds = %1, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface24ActivateIfDeadlinePassedEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %5 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %4, align 8
  %6 = tail call zeroext i1 @_ZNK3viz25SurfaceDependencyDeadline17HasDeadlinePassedEv(%"class.viz::SurfaceDependencyDeadline"* %5) #14
  br i1 %6, label %7, label %60

7:                                                ; preds = %1
  %8 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %9 = and i8 %8, 25
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %23, label %11, !prof !5

11:                                               ; preds = %7
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #14
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK3viz11FrameSinkId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.viz::FrameSinkId"* %13) #14
  %14 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3)
  %15 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %11, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #14
  br label %23

23:                                               ; preds = %7, %22
  %24 = phi i64 [ -6148914691236517206, %7 ], [ %14, %22 ]
  %25 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %7 ], [ getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), %22 ]
  %26 = phi i8* [ null, %7 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), %22 ]
  %27 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %28 = load i8, i8* %27, align 8, !range !6
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %54, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %32 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %32, align 8
  %34 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %35 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %34, align 8
  %36 = icmp eq %"class.viz::SurfaceId"* %33, %35
  %37 = ptrtoint %"class.viz::SurfaceId"* %33 to i64
  br i1 %36, label %51, label %38

38:                                               ; preds = %30
  %39 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %40 = and i8 %39, 25
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %51, label %42, !prof !5

42:                                               ; preds = %38
  %43 = ptrtoint %"class.viz::Surface"* %0 to i64
  %44 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %45 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #14
  %46 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %47 = call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %47, i64* %46, align 8
  %48 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %43, i64 0, i32 %44, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 2048) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #14
  %49 = bitcast %"class.base::internal::flat_tree.34"* %31 to i64*
  %50 = load i64, i64* %49, align 8
  br label %51

51:                                               ; preds = %42, %38, %30
  %52 = phi i64 [ %50, %42 ], [ %37, %38 ], [ %37, %30 ]
  %53 = bitcast %"class.viz::SurfaceId"** %34 to i64*
  store i64 %52, i64* %53, align 8
  call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0) #14
  br label %54

54:                                               ; preds = %23, %51
  %55 = icmp eq i8* %26, null
  br i1 %55, label %60, label %56

56:                                               ; preds = %54
  %57 = load i8, i8* %26, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %26, i8* %25, i64 %24) #14
  br label %60

60:                                               ; preds = %59, %56, %54, %1
  ret void
}

declare zeroext i1 @_ZNK3viz25SurfaceDependencyDeadline17HasDeadlinePassedEv(%"class.viz::SurfaceDependencyDeadline"*) local_unnamed_addr #3

declare void @_ZNK3viz11FrameSinkId8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::FrameSinkId"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3viz7Surface10QueueFrameENS_15CompositorFrameEmN4base19ScopedClosureRunnerE(%"class.viz::Surface"*, %"class.viz::CompositorFrame"*, i64, %"class.base::ScopedClosureRunner"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::TimeTicks", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.base::TimeTicks", align 8
  %8 = alloca %"class.absl::optional.134", align 8
  %9 = alloca %"struct.viz::Surface::FrameData", align 8
  %10 = alloca %"struct.viz::Surface::FrameData", align 8
  %11 = alloca %"class.viz::FrameDeadline", align 8
  %12 = alloca %"class.std::__1::unique_ptr.365", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.absl::optional.134", align 8
  %16 = alloca %"class.base::OnceCallback.322", align 8
  %17 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 2, i32 0, i32 1
  %18 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %18, i64 -1, i32 0, i32 0, i32 0
  %20 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %19, align 8
  %21 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %20, i64 0, i32 0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 2, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %38

26:                                               ; preds = %4
  %27 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %20, i64 0, i32 0, i32 0, i32 1, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 2, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %32, label %38

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0, i32 0
  %34 = load float, float* %33, align 8
  %35 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 1
  %36 = load float, float* %35, align 8
  %37 = fcmp une float %34, %36
  br i1 %37, label %38, label %48

38:                                               ; preds = %26, %4, %32
  %39 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %40 = and i8 %39, 25
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %271, label %42, !prof !5

42:                                               ; preds = %38
  %43 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %44 = bitcast %"class.base::TimeTicks"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #14
  %45 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %7, i64 0, i32 0, i32 0
  %46 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %46, i64* %45, align 8
  %47 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %43, %"class.base::TimeTicks"* nonnull dereferenceable(8) %7, %"class.base::trace_event::TraceArguments"* null, i32 8) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #14
  br label %271

48:                                               ; preds = %32
  %49 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 16
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !6
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %54 = load i8, i8* %53, align 8, !range !6
  br i1 %52, label %55, label %64

55:                                               ; preds = %48
  %56 = icmp eq i8 %54, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 1
  %59 = bitcast %"class.viz::SurfaceId"* %58 to i8*
  %60 = bitcast %"class.viz::Surface"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 32, i1 false)
  %61 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  br label %70

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  br label %75

64:                                               ; preds = %48
  %65 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 1
  %66 = bitcast %"class.viz::SurfaceId"* %65 to i8*
  %67 = bitcast %"class.viz::Surface"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 32, i1 false)
  %68 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %69 = icmp eq i8 %54, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %57, %64
  %71 = phi i8* [ %61, %57 ], [ %68, %64 ]
  %72 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0, i32 8
  %73 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  tail call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %73, %"class.std::__1::vector.139"* %72) #14
  %74 = load i8, i8* %71, align 8, !range !6
  br label %75

75:                                               ; preds = %62, %64, %70
  %76 = phi i8* [ %68, %64 ], [ %71, %70 ], [ %63, %62 ]
  %77 = phi i8 [ 0, %64 ], [ %74, %70 ], [ 0, %62 ]
  %78 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %78) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 320, i1 false) #14
  %79 = icmp eq i8 %77, 0
  br i1 %79, label %90, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %82 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %81, %"class.viz::CompositorFrame"* dereferenceable(296) %82) #14
  %83 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %84 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %85 = bitcast i64* %83 to i8*
  %86 = bitcast i64* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 11, i1 false) #14
  store i8 1, i8* %78, align 8
  %87 = load i8, i8* %76, align 8
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %90, label %89

89:                                               ; preds = %80
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %82) #14
  store i8 0, i8* %76, align 8
  br label %90

90:                                               ; preds = %75, %80, %89
  call void @_ZN3viz7Surface28UpdateActivationDependenciesERKNS_15CompositorFrameE(%"class.viz::Surface"* %0, %"class.viz::CompositorFrame"* dereferenceable(296) %1)
  %91 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %92 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %91) #14
  br i1 %92, label %96, label %93

93:                                               ; preds = %90
  %94 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %95 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #14
  br label %96

96:                                               ; preds = %93, %90
  %97 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %91) #14
  br i1 %97, label %98, label %103

98:                                               ; preds = %96
  %99 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %100 = bitcast i64* %99 to %"class.viz::SurfaceClient"**
  %101 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %100, align 8
  %102 = bitcast %"class.viz::SurfaceClient"* %101 to void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)***
  br label %103

103:                                              ; preds = %96, %98
  %104 = phi void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)*** [ %102, %98 ], [ null, %96 ]
  %105 = phi %"class.viz::SurfaceClient"* [ %101, %98 ], [ null, %96 ]
  %106 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 1
  %107 = load void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)**, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)*** %104, align 8
  %108 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)*, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)** %107, i64 8
  %109 = load void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)*, void (%"class.viz::SurfaceClient"*, %"class.std::__1::vector.198"*)** %108, align 8
  call void %109(%"class.viz::SurfaceClient"* %105, %"class.std::__1::vector.198"* dereferenceable(24) %106) #14
  %110 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %111 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %111, align 8
  %113 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %114 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %113, align 8
  %115 = icmp eq %"class.viz::SurfaceId"* %112, %114
  br i1 %115, label %116, label %122

116:                                              ; preds = %103
  %117 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %9, i64 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* nonnull %117, %"class.viz::CompositorFrame"* dereferenceable(296) %1) #14
  %118 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %9, i64 0, i32 1
  store i64 %2, i64* %118, align 8
  %119 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %9, i64 0, i32 2
  store i8 0, i8* %119, align 8
  %120 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %9, i64 0, i32 3
  store i8 0, i8* %120, align 1
  %121 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %9, i64 0, i32 4
  store i8 0, i8* %121, align 2
  call void @_ZN3viz7Surface13ActivateFrameENS0_9FrameDataE(%"class.viz::Surface"* %0, %"struct.viz::Surface::FrameData"* nonnull %9)
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* nonnull %117) #14
  br label %247

122:                                              ; preds = %103
  %123 = bitcast %"struct.viz::Surface::FrameData"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %123) #14
  %124 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %10, i64 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* nonnull %124, %"class.viz::CompositorFrame"* dereferenceable(296) %1) #14
  %125 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %10, i64 0, i32 1
  store i64 %2, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %10, i64 0, i32 2
  store i8 0, i8* %126, align 8
  %127 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %10, i64 0, i32 3
  store i8 0, i8* %127, align 1
  %128 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %10, i64 0, i32 4
  store i8 0, i8* %128, align 2
  %129 = load i8, i8* %76, align 8, !range !6
  %130 = icmp eq i8 %129, 0
  %131 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br i1 %130, label %137, label %132

132:                                              ; preds = %122
  %133 = call dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz15CompositorFrameaSEOS0_(%"class.viz::CompositorFrame"* %131, %"class.viz::CompositorFrame"* nonnull dereferenceable(296) %124) #14
  %134 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %135 = bitcast i64* %134 to i8*
  %136 = bitcast i64* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 11, i1 false) #14
  br label %141

137:                                              ; preds = %122
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %131, %"class.viz::CompositorFrame"* nonnull dereferenceable(296) %124) #14
  %138 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %139 = bitcast i64* %138 to i8*
  %140 = bitcast i64* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 11, i1 false) #14
  store i8 1, i8* %76, align 8
  br label %141

141:                                              ; preds = %132, %137
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* nonnull %124) #14
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %123) #14
  %142 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %143 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %142, align 8
  %144 = bitcast %"class.viz::FrameDeadline"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %144) #14
  %145 = load i8, i8* %76, align 8, !range !6
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %147, label %148, !prof !7

147:                                              ; preds = %141
  call void @llvm.trap() #14
  unreachable

148:                                              ; preds = %141
  call void @_ZN3viz7Surface20ResolveFrameDeadlineERKNS_15CompositorFrameE(%"class.viz::FrameDeadline"* nonnull sret %11, %"class.viz::Surface"* %0, %"class.viz::CompositorFrame"* dereferenceable(296) %131)
  call void @_ZN3viz25SurfaceDependencyDeadline3SetERKNS_13FrameDeadlineE(%"class.viz::SurfaceDependencyDeadline"* %143, %"class.viz::FrameDeadline"* nonnull dereferenceable(32) %11) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %144) #14
  %149 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %142, align 8
  %150 = call zeroext i1 @_ZNK3viz25SurfaceDependencyDeadline17HasDeadlinePassedEv(%"class.viz::SurfaceDependencyDeadline"* %149) #14
  br i1 %150, label %151, label %175

151:                                              ; preds = %148
  %152 = load i8, i8* %76, align 8, !range !6
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %247, label %154

154:                                              ; preds = %151
  %155 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %111, align 8
  %156 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %113, align 8
  %157 = icmp eq %"class.viz::SurfaceId"* %155, %156
  %158 = ptrtoint %"class.viz::SurfaceId"* %155 to i64
  br i1 %157, label %172, label %159

159:                                              ; preds = %154
  %160 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %161 = and i8 %160, 25
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %172, label %163, !prof !5

163:                                              ; preds = %159
  %164 = ptrtoint %"class.viz::Surface"* %0 to i64
  %165 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %166 = bitcast %"class.base::TimeTicks"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #14
  %167 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %5, i64 0, i32 0, i32 0
  %168 = call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %168, i64* %167, align 8
  %169 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %164, i64 0, i32 %165, %"class.base::TimeTicks"* nonnull dereferenceable(8) %5, %"class.base::trace_event::TraceArguments"* null, i32 2048) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #14
  %170 = bitcast %"class.base::internal::flat_tree.34"* %110 to i64*
  %171 = load i64, i64* %170, align 8
  br label %172

172:                                              ; preds = %163, %159, %154
  %173 = phi i64 [ %171, %163 ], [ %158, %159 ], [ %158, %154 ]
  %174 = bitcast %"class.viz::SurfaceId"** %113 to i64*
  store i64 %173, i64* %174, align 8
  call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0) #14
  br label %247

175:                                              ; preds = %148
  %176 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %177 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %176, align 8
  %178 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %179 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %178, align 8
  %180 = icmp eq %"class.viz::SurfaceAllocationGroup"** %177, %179
  br i1 %180, label %181, label %196

181:                                              ; preds = %196, %175
  %182 = bitcast %"class.std::__1::unique_ptr.365"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %182) #14
  %183 = getelementptr inbounds %"class.std::__1::unique_ptr.365", %"class.std::__1::unique_ptr.365"* %12, i64 0, i32 0, i32 0, i32 0
  %184 = call i8* @_Znwm(i64 16) #15
  %185 = bitcast i8* %184 to %"class.base::trace_event::TracedValue"*
  call void @_ZN4base11trace_event11TracedValueC1Em(%"class.base::trace_event::TracedValue"* nonnull %185, i64 0) #14
  %186 = bitcast %"class.std::__1::unique_ptr.365"* %12 to i8**
  store i8* %184, i8** %186, align 8
  call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* nonnull %185, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0)) #14
  %187 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %111, align 8
  %188 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %113, align 8
  %189 = icmp eq %"class.viz::SurfaceId"* %187, %188
  br i1 %189, label %201, label %190

190:                                              ; preds = %181
  %191 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  %192 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %193 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %192, i64 0, i32 1, i32 0
  %194 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %206

196:                                              ; preds = %175, %196
  %197 = phi %"class.viz::SurfaceAllocationGroup"** [ %199, %196 ], [ %177, %175 ]
  %198 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %197, align 8
  call void @_ZN3viz22SurfaceAllocationGroup28AckLastestActiveUnAckedFrameEv(%"class.viz::SurfaceAllocationGroup"* %198) #14
  %199 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %197, i64 1
  %200 = icmp eq %"class.viz::SurfaceAllocationGroup"** %199, %179
  br i1 %200, label %181, label %196

201:                                              ; preds = %220, %181
  %202 = phi %"class.base::trace_event::TracedValue"* [ %185, %181 ], [ %223, %220 ]
  call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %202) #14
  %203 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %204 = and i8 %203, 25
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %238, label %224, !prof !5

206:                                              ; preds = %190, %220
  %207 = phi %"class.base::trace_event::TracedValue"* [ %185, %190 ], [ %223, %220 ]
  %208 = phi %"class.viz::SurfaceId"* [ %187, %190 ], [ %221, %220 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #14
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %13, %"class.viz::SurfaceId"* %208) #14
  %209 = load i8, i8* %193, align 1
  %210 = icmp slt i8 %209, 0
  %211 = load i8*, i8** %194, align 8
  %212 = select i1 %210, i8* %211, i8* %191
  %213 = load i64, i64* %195, align 8
  %214 = zext i8 %209 to i64
  %215 = select i1 %210, i64 %213, i64 %214
  call void @_ZN4base11trace_event11TracedValue12AppendStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"* %207, i8* %212, i64 %215) #14
  %216 = load i8, i8* %193, align 1
  %217 = icmp slt i8 %216, 0
  br i1 %217, label %218, label %220

218:                                              ; preds = %206
  %219 = load i8*, i8** %194, align 8
  call void @_ZdlPv(i8* %219) #15
  br label %220

220:                                              ; preds = %206, %218
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #14
  %221 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %208, i64 1
  %222 = icmp eq %"class.viz::SurfaceId"* %221, %188
  %223 = load %"class.base::trace_event::TracedValue"*, %"class.base::trace_event::TracedValue"** %183, align 8
  br i1 %222, label %201, label %206

224:                                              ; preds = %201
  %225 = ptrtoint %"class.viz::Surface"* %0 to i64
  %226 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %226) #14
  %227 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %14, %"class.viz::SurfaceId"* %227) #14
  %228 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base11trace_event11TracedValueENS1_14default_deleteISB_EEEEEENSA_16TraceEventHandleEcPKhPKcSJ_yjySJ_OT_SJ_OT0_(i8 signext 98, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %225, i32 2048, i64 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), %"class.std::__1::unique_ptr.365"* nonnull dereferenceable(8) %12)
  %229 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %230 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %229, i64 0, i32 1, i32 0
  %231 = load i8, i8* %230, align 1
  %232 = icmp slt i8 %231, 0
  br i1 %232, label %233, label %236

233:                                              ; preds = %224
  %234 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %235 = load i8*, i8** %234, align 8
  call void @_ZdlPv(i8* %235) #15
  br label %236

236:                                              ; preds = %224, %233
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %226) #14
  %237 = load %"class.base::trace_event::TracedValue"*, %"class.base::trace_event::TracedValue"** %183, align 8
  br label %238

238:                                              ; preds = %201, %236
  %239 = phi %"class.base::trace_event::TracedValue"* [ %202, %201 ], [ %237, %236 ]
  store %"class.base::trace_event::TracedValue"* null, %"class.base::trace_event::TracedValue"** %183, align 8
  %240 = icmp eq %"class.base::trace_event::TracedValue"* %239, null
  br i1 %240, label %246, label %241

241:                                              ; preds = %238
  %242 = bitcast %"class.base::trace_event::TracedValue"* %239 to void (%"class.base::trace_event::TracedValue"*)***
  %243 = load void (%"class.base::trace_event::TracedValue"*)**, void (%"class.base::trace_event::TracedValue"*)*** %242, align 8
  %244 = getelementptr inbounds void (%"class.base::trace_event::TracedValue"*)*, void (%"class.base::trace_event::TracedValue"*)** %243, i64 1
  %245 = load void (%"class.base::trace_event::TracedValue"*)*, void (%"class.base::trace_event::TracedValue"*)** %244, align 8
  call void %245(%"class.base::trace_event::TracedValue"* nonnull %239) #14
  br label %246

246:                                              ; preds = %238, %241
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %182) #14
  br label %247

247:                                              ; preds = %172, %151, %246, %116
  %248 = phi i32 [ 1, %116 ], [ 2, %246 ], [ 1, %151 ], [ 1, %172 ]
  %249 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %249, i8 0, i64 320, i1 false) #14
  %250 = load i8, i8* %78, align 8, !range !6
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %259, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %15, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %254 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %253, %"class.viz::CompositorFrame"* dereferenceable(296) %254) #14
  %255 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %15, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %256 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %257 = bitcast i64* %255 to i8*
  %258 = bitcast i64* %256 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %257, i8* align 8 %258, i64 11, i1 false) #14
  store i8 1, i8* %249, align 8
  br label %259

259:                                              ; preds = %247, %252
  call void @_ZN3viz7Surface34UnrefFrameResourcesAndRunCallbacksEN4absl8optionalINS0_9FrameDataEEE(%"class.viz::Surface"* %0, %"class.absl::optional.134"* nonnull %15)
  %260 = load i8, i8* %249, align 8, !range !6
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %264, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %15, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %263) #14
  store i8 0, i8* %249, align 8
  br label %264

264:                                              ; preds = %259, %262
  call void @_ZN4base19ScopedClosureRunner7ReleaseEv(%"class.base::OnceCallback.322"* nonnull sret %16, %"class.base::ScopedClosureRunner"* %3) #14
  %265 = getelementptr inbounds %"class.base::OnceCallback.322", %"class.base::OnceCallback.322"* %16, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %265) #14
  %266 = load i8, i8* %78, align 8, !range !6
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %270, label %268

268:                                              ; preds = %264
  %269 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %8, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %269) #14
  store i8 0, i8* %78, align 8
  br label %270

270:                                              ; preds = %264, %268
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %78) #14
  br label %271

271:                                              ; preds = %42, %38, %270
  %272 = phi i32 [ %248, %270 ], [ 0, %38 ], [ 0, %42 ]
  ret i32 %272
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface22TakePendingLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* nocapture, %"class.std::__1::vector.139"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  tail call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %7, %"class.std::__1::vector.139"* %1)
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface28UpdateActivationDependenciesERKNS_15CompositorFrameE(%"class.viz::Surface"*, %"class.viz::CompositorFrame"* dereferenceable(296)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::flat_tree.296", align 8
  %4 = alloca %"class.std::__1::vector.35", align 8
  %5 = alloca %"class.viz::SurfaceAllocationGroup"*, align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.base::internal::flat_tree.34", align 16
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14
  %9 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %9, align 8
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %12 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %11, align 8
  %13 = icmp eq %"class.viz::SurfaceAllocationGroup"** %10, %12
  br i1 %13, label %14, label %31

14:                                               ; preds = %2
  %15 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %10 to i64
  %16 = bitcast %"class.base::internal::flat_tree.296"* %8 to i64*
  br label %20

17:                                               ; preds = %31
  %18 = bitcast %"class.base::internal::flat_tree.296"* %8 to i64*
  %19 = load i64, i64* %18, align 8
  br label %20

20:                                               ; preds = %14, %17
  %21 = phi i64* [ %16, %14 ], [ %18, %17 ]
  %22 = phi i64 [ %15, %14 ], [ %19, %17 ]
  %23 = bitcast %"class.viz::SurfaceAllocationGroup"*** %11 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %25 = bitcast %"class.base::internal::flat_tree.34"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %28 = bitcast %"class.viz::SurfaceId"** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0, i32 11
  %30 = tail call zeroext i1 @_ZNK3viz13FrameDeadline6IsZeroEv(%"class.viz::FrameDeadline"* %29) #14
  br i1 %30, label %245, label %36

31:                                               ; preds = %2, %31
  %32 = phi %"class.viz::SurfaceAllocationGroup"** [ %34, %31 ], [ %10, %2 ]
  %33 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, align 8
  tail call void @_ZN3viz22SurfaceAllocationGroup25UnregisterBlockedEmbedderEPNS_7SurfaceEb(%"class.viz::SurfaceAllocationGroup"* %33, %"class.viz::Surface"* %0, i1 zeroext false) #14
  %34 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 1
  %35 = icmp eq %"class.viz::SurfaceAllocationGroup"** %34, %12
  br i1 %35, label %17, label %31

36:                                               ; preds = %20
  %37 = bitcast %"class.base::internal::flat_tree.296"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #14
  %38 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 0, i64 24, i1 false) #14
  %40 = bitcast %"class.std::__1::vector.35"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #14
  %41 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %4, i64 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %4, i64 0, i32 0, i32 1
  %43 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #14
  %44 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0, i32 10, i32 0, i32 0
  %45 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %44, align 8
  %46 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %1, i64 0, i32 0, i32 10, i32 0, i32 1
  %47 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %46, align 8
  %48 = icmp eq %"class.viz::SurfaceId"* %45, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %36
  %50 = bitcast %"class.viz::SurfaceId"** %42 to i64*
  br label %66

51:                                               ; preds = %36
  %52 = bitcast %"class.viz::SurfaceAllocationGroup"** %5 to i8*
  %53 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %54 = bitcast %"class.viz::SurfaceAllocationGroup"*** %39 to i64*
  %55 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0
  %56 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %57 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = bitcast %"class.viz::SurfaceId"** %42 to i64*
  br label %118

61:                                               ; preds = %242
  %62 = bitcast %"class.std::__1::vector.35"* %4 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.viz::SurfaceId"** %42 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 8
  br label %66

66:                                               ; preds = %49, %61
  %67 = phi i64* [ %50, %49 ], [ %60, %61 ]
  %68 = phi i64 [ 0, %49 ], [ %63, %61 ]
  %69 = phi <2 x i64> [ zeroinitializer, %49 ], [ %65, %61 ]
  %70 = bitcast %"class.base::internal::flat_tree.34"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #14
  %71 = bitcast %"class.base::internal::flat_tree.34"* %7 to i64*
  store i64 %68, i64* %71, align 16
  %72 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %7, i64 0, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %74 = bitcast %"class.viz::SurfaceId"** %73 to i64*
  %75 = bitcast %"class.viz::SurfaceId"** %72 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %75, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false) #14
  %76 = inttoptr i64 %68 to %"class.viz::SurfaceId"*
  %77 = extractelement <2 x i64> %69, i32 0
  %78 = inttoptr i64 %77 to %"class.viz::SurfaceId"*
  call void @_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE15sort_and_uniqueENS5_11__wrap_iterIPS3_EESF_(%"class.base::internal::flat_tree.34"* nonnull %7, %"class.viz::SurfaceId"* %76, %"class.viz::SurfaceId"* %78) #14
  %79 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %24, i64 0, i32 0, i32 0, i32 0
  %80 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %79, align 8
  %81 = icmp eq %"class.viz::SurfaceId"* %80, null
  br i1 %81, label %86, label %82

82:                                               ; preds = %66
  %83 = ptrtoint %"class.viz::SurfaceId"* %80 to i64
  store i64 %83, i64* %28, align 8
  %84 = bitcast %"class.viz::SurfaceId"* %80 to i8*
  call void @_ZdlPv(i8* %84) #15
  %85 = bitcast %"class.base::internal::flat_tree.34"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #14
  br label %86

86:                                               ; preds = %66, %82
  %87 = bitcast %"class.base::internal::flat_tree.34"* %7 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 16
  %89 = bitcast %"class.base::internal::flat_tree.34"* %24 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %89, align 8
  %90 = load i64, i64* %74, align 16
  %91 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 2, i32 0, i32 0
  %92 = bitcast %"class.viz::SurfaceId"** %91 to i64*
  store i64 %90, i64* %92, align 8
  %93 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %9, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #14
  %94 = icmp eq %"class.viz::SurfaceAllocationGroup"** %93, null
  br i1 %94, label %99, label %95

95:                                               ; preds = %86
  %96 = bitcast %"class.viz::SurfaceAllocationGroup"** %93 to i8*
  %97 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %93 to i64
  store i64 %97, i64* %23, align 8
  call void @_ZdlPv(i8* %96) #15
  %98 = bitcast %"class.base::internal::flat_tree.296"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 24, i1 false) #14
  br label %99

99:                                               ; preds = %86, %95
  %100 = bitcast %"class.base::internal::flat_tree.296"* %3 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %21, align 8
  %102 = bitcast %"class.viz::SurfaceAllocationGroup"*** %39 to i64*
  %103 = bitcast %"class.viz::SurfaceAllocationGroup"*** %39 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8
  %105 = bitcast %"class.viz::SurfaceAllocationGroup"*** %11 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %105, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 0, i64 24, i1 false) #14
  %106 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %41, align 8
  %107 = icmp eq %"class.viz::SurfaceId"* %106, null
  br i1 %107, label %108, label %109

108:                                              ; preds = %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #14
  br label %117

109:                                              ; preds = %99
  %110 = ptrtoint %"class.viz::SurfaceId"* %106 to i64
  store i64 %110, i64* %67, align 8
  %111 = bitcast %"class.viz::SurfaceId"* %106 to i8*
  call void @_ZdlPv(i8* %111) #15
  %112 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %38, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #14
  %113 = icmp eq %"class.viz::SurfaceAllocationGroup"** %112, null
  br i1 %113, label %117, label %114

114:                                              ; preds = %109
  %115 = bitcast %"class.viz::SurfaceAllocationGroup"** %112 to i8*
  %116 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %112 to i64
  store i64 %116, i64* %102, align 8
  call void @_ZdlPv(i8* %115) #15
  br label %117

117:                                              ; preds = %108, %109, %114
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #14
  br label %245

118:                                              ; preds = %51, %242
  %119 = phi %"class.viz::SurfaceId"* [ %45, %51 ], [ %243, %242 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #14
  store %"class.viz::SurfaceAllocationGroup"* inttoptr (i64 -6148914691236517206 to %"class.viz::SurfaceAllocationGroup"*), %"class.viz::SurfaceAllocationGroup"** %5, align 8
  %120 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %53, align 8
  %121 = call %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager38GetOrCreateAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %120, %"class.viz::SurfaceId"* dereferenceable(32) %119) #14
  store %"class.viz::SurfaceAllocationGroup"* %121, %"class.viz::SurfaceAllocationGroup"** %5, align 8
  %122 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %38, align 8
  %123 = load i64, i64* %54, align 8
  %124 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %122 to i64
  %125 = sub i64 %123, %124
  %126 = icmp eq i64 %125, 0
  %127 = inttoptr i64 %123 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %126, label %143, label %128

128:                                              ; preds = %118
  %129 = ashr exact i64 %125, 3
  br label %130

130:                                              ; preds = %130, %128
  %131 = phi %"class.viz::SurfaceAllocationGroup"** [ %122, %128 ], [ %141, %130 ]
  %132 = phi i64 [ %129, %128 ], [ %140, %130 ]
  %133 = lshr i64 %132, 1
  %134 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %131, i64 %133
  %135 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %134, align 8
  %136 = icmp ult %"class.viz::SurfaceAllocationGroup"* %135, %121
  %137 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %134, i64 1
  %138 = xor i64 %133, -1
  %139 = add i64 %132, %138
  %140 = select i1 %136, i64 %139, i64 %133
  %141 = select i1 %136, %"class.viz::SurfaceAllocationGroup"** %137, %"class.viz::SurfaceAllocationGroup"** %131
  %142 = icmp eq i64 %140, 0
  br i1 %142, label %143, label %130

143:                                              ; preds = %130, %118
  %144 = phi %"class.viz::SurfaceAllocationGroup"** [ %122, %118 ], [ %141, %130 ]
  %145 = icmp eq %"class.viz::SurfaceAllocationGroup"** %144, %127
  br i1 %145, label %149, label %146

146:                                              ; preds = %143
  %147 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %144, align 8
  %148 = icmp ult %"class.viz::SurfaceAllocationGroup"* %121, %147
  br i1 %148, label %149, label %242

149:                                              ; preds = %146, %143
  %150 = icmp eq %"class.viz::SurfaceAllocationGroup"* %121, null
  br i1 %150, label %152, label %151

151:                                              ; preds = %149
  call void @_ZN3viz22SurfaceAllocationGroup42UpdateLastPendingReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nonnull %121, %"class.viz::SurfaceId"* dereferenceable(32) %119) #14
  br label %152

152:                                              ; preds = %149, %151
  %153 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %53, align 8
  %154 = call %"class.viz::Surface"* @_ZNK3viz14SurfaceManager15GetSurfaceForIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %153, %"class.viz::SurfaceId"* dereferenceable(32) %119) #14
  %155 = icmp eq %"class.viz::Surface"* %154, null
  br i1 %155, label %160, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %154, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %158 = load i8, i8* %157, align 8, !range !6
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %242

160:                                              ; preds = %156, %152
  %161 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %5, align 8
  %162 = icmp eq %"class.viz::SurfaceAllocationGroup"* %161, null
  br i1 %162, label %195, label %163

163:                                              ; preds = %160
  call void @_ZN3viz22SurfaceAllocationGroup23RegisterBlockedEmbedderEPNS_7SurfaceERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nonnull %161, %"class.viz::Surface"* %0, %"class.viz::SurfaceId"* dereferenceable(32) %119) #14
  %164 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %38, align 8
  %165 = load i64, i64* %54, align 8
  %166 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %164 to i64
  %167 = sub i64 %165, %166
  %168 = icmp eq i64 %167, 0
  %169 = inttoptr i64 %165 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %168, label %186, label %170

170:                                              ; preds = %163
  %171 = ashr exact i64 %167, 3
  %172 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %5, align 8
  br label %173

173:                                              ; preds = %173, %170
  %174 = phi %"class.viz::SurfaceAllocationGroup"** [ %164, %170 ], [ %184, %173 ]
  %175 = phi i64 [ %171, %170 ], [ %183, %173 ]
  %176 = lshr i64 %175, 1
  %177 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %174, i64 %176
  %178 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %177, align 8
  %179 = icmp ult %"class.viz::SurfaceAllocationGroup"* %178, %172
  %180 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %177, i64 1
  %181 = xor i64 %176, -1
  %182 = add i64 %175, %181
  %183 = select i1 %179, i64 %182, i64 %176
  %184 = select i1 %179, %"class.viz::SurfaceAllocationGroup"** %180, %"class.viz::SurfaceAllocationGroup"** %174
  %185 = icmp eq i64 %183, 0
  br i1 %185, label %186, label %173

186:                                              ; preds = %173, %163
  %187 = phi %"class.viz::SurfaceAllocationGroup"** [ %164, %163 ], [ %184, %173 ]
  %188 = icmp eq %"class.viz::SurfaceAllocationGroup"** %187, %169
  br i1 %188, label %193, label %189

189:                                              ; preds = %186
  %190 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %5, align 8
  %191 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %187, align 8
  %192 = icmp ult %"class.viz::SurfaceAllocationGroup"* %190, %191
  br i1 %192, label %193, label %195

193:                                              ; preds = %189, %186
  %194 = call %"class.viz::SurfaceAllocationGroup"** @_ZNSt3__16vectorIPN3viz22SurfaceAllocationGroupENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.297"* nonnull %55, %"class.viz::SurfaceAllocationGroup"** %187, %"class.viz::SurfaceAllocationGroup"** nonnull dereferenceable(8) %5) #14
  br label %195

195:                                              ; preds = %193, %189, %160
  %196 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %197 = and i8 %196, 25
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %209, label %199, !prof !5

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1
  %201 = call i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"* %200) #14
  %202 = shl i64 %201, 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #14
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.viz::SurfaceId"* %119) #14
  %203 = call i64 @_ZN20trace_event_internal13AddTraceEventIRA26_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0), i8* null, i64 0, i32 4480, i64 %202, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), [26 x i8]* nonnull dereferenceable(26) @.str.22, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6)
  %204 = load i8, i8* %58, align 1
  %205 = icmp slt i8 %204, 0
  br i1 %205, label %206, label %208

206:                                              ; preds = %199
  %207 = load i8*, i8** %59, align 8
  call void @_ZdlPv(i8* %207) #15
  br label %208

208:                                              ; preds = %199, %206
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #14
  br label %209

209:                                              ; preds = %195, %208
  %210 = phi i8* [ null, %195 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), %208 ]
  %211 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %195 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0), %208 ]
  %212 = phi i64 [ -6148914691236517206, %195 ], [ %203, %208 ]
  %213 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %42, align 8
  %214 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %43, align 8
  %215 = icmp eq %"class.viz::SurfaceId"* %213, %214
  br i1 %215, label %235, label %216

216:                                              ; preds = %209
  %217 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 0, i32 0, i32 0
  %218 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 0, i32 0
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %217, align 4
  %220 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 0, i32 0, i32 1
  %221 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 0, i32 1
  %222 = load i32, i32* %221, align 4
  store i32 %222, i32* %220, align 4
  %223 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 0, i32 1, i32 0
  %224 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 8
  store i32 %225, i32* %223, align 8
  %226 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 0, i32 1, i32 1
  %227 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 1
  %228 = load i32, i32* %227, align 4
  store i32 %228, i32* %226, align 4
  %229 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 0, i32 1, i32 2
  %230 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 2
  %231 = bitcast %"class.base::UnguessableToken"* %229 to i8*
  %232 = bitcast %"class.base::UnguessableToken"* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 %232, i64 16, i1 false) #14
  %233 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %213, i64 1
  %234 = ptrtoint %"class.viz::SurfaceId"* %233 to i64
  store i64 %234, i64* %60, align 8
  br label %236

235:                                              ; preds = %209
  call void @_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.35"* nonnull %4, %"class.viz::SurfaceId"* dereferenceable(32) %119) #14
  br label %236

236:                                              ; preds = %216, %235
  %237 = icmp eq i8* %210, null
  br i1 %237, label %242, label %238

238:                                              ; preds = %236
  %239 = load i8, i8* %210, align 1
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %242, label %241

241:                                              ; preds = %238
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %210, i8* %211, i64 %212) #14
  br label %242

242:                                              ; preds = %156, %146, %241, %238, %236
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #14
  %243 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1
  %244 = icmp eq %"class.viz::SurfaceId"* %243, %47
  br i1 %244, label %61, label %118

245:                                              ; preds = %20, %117
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface13ActivateFrameENS0_9FrameDataE(%"class.viz::Surface"*, %"struct.viz::Surface::FrameData"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.absl::optional.134", align 8
  %7 = alloca %"class.absl::optional.134", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %10 = and i8 %9, 25
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %24, label %12, !prof !5

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %5, %"class.viz::SurfaceId"* %14) #14
  %15 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5)
  %16 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %22) #15
  br label %23

23:                                               ; preds = %12, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #14
  br label %24

24:                                               ; preds = %2, %23
  %25 = phi i8* [ null, %2 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), %23 ]
  %26 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %2 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), %23 ]
  %27 = phi i64 [ -6148914691236517206, %2 ], [ %15, %23 ]
  %28 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %29 = load i8, i8* %28, align 8, !range !6
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %80, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %33 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %32, align 8
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %33, i64 -1, i32 0, i32 0, i32 0
  %35 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %34, align 8
  %36 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %35, i64 0, i32 0, i32 10
  %37 = bitcast %"class.std::__1::vector.249"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 0, i64* %37, align 8
  %39 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %35, i64 0, i32 0, i32 10, i32 0, i32 1
  %40 = bitcast %"class.std::__1::unique_ptr.251"** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::unique_ptr.251"** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 16, i1 false)
  %43 = load i8, i8* %28, align 8, !range !6
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %31
  %46 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %46, align 8
  %48 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %49 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %48, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.221"* %47, %49
  br i1 %50, label %76, label %51

51:                                               ; preds = %45, %70
  %52 = phi %"class.std::__1::unique_ptr.221"* [ %71, %70 ], [ %47, %45 ]
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %52, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %53, align 8
  %55 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %54, i64 0, i32 0, i32 10, i32 0, i32 0
  %56 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %55, align 8
  %57 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %54, i64 0, i32 0, i32 10, i32 0, i32 1
  %58 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %57, align 8
  %59 = icmp eq %"class.std::__1::unique_ptr.251"* %58, %56
  br i1 %59, label %70, label %60

60:                                               ; preds = %51, %68
  %61 = phi %"class.std::__1::unique_ptr.251"* [ %62, %68 ], [ %58, %51 ]
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %61, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %63, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %63, align 8
  %65 = icmp eq %"class.viz::CopyOutputRequest"* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %64) #14
  %67 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %64, i64 0, i32 0
  call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %66, %60
  %69 = icmp eq %"class.std::__1::unique_ptr.251"* %62, %56
  br i1 %69, label %70, label %60

70:                                               ; preds = %68, %51
  store %"class.std::__1::unique_ptr.251"* %56, %"class.std::__1::unique_ptr.251"** %57, align 8
  %71 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %52, i64 1
  %72 = icmp eq %"class.std::__1::unique_ptr.221"* %71, %49
  br i1 %72, label %73, label %51

73:                                               ; preds = %70
  %74 = load i8, i8* %28, align 8
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %45, %73
  %77 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 0, i32 0, i32 8
  %78 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %78, %"class.std::__1::vector.139"* %77) #14
  %79 = load i8, i8* %28, align 8, !range !6
  br label %80

80:                                               ; preds = %24, %31, %73, %76
  %81 = phi i64 [ %38, %31 ], [ %38, %73 ], [ %38, %76 ], [ 0, %24 ]
  %82 = phi i64 [ %41, %31 ], [ %41, %73 ], [ %41, %76 ], [ 0, %24 ]
  %83 = phi i8 [ 0, %31 ], [ 0, %73 ], [ %79, %76 ], [ 0, %24 ]
  %84 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %84) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 0, i64 320, i1 false) #14
  %85 = icmp eq i8 %83, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %88 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 0
  br label %103

89:                                               ; preds = %80
  %90 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %90, %"class.viz::CompositorFrame"* dereferenceable(296) %91) #14
  %92 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %93 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %94 = bitcast i64* %92 to i8*
  %95 = bitcast i64* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 11, i1 false) #14
  store i8 1, i8* %84, align 8
  %96 = load i8, i8* %28, align 8
  %97 = icmp eq i8 %96, 0
  %98 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 0
  br i1 %97, label %103, label %99

99:                                               ; preds = %89
  %100 = call dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz15CompositorFrameaSEOS0_(%"class.viz::CompositorFrame"* %91, %"class.viz::CompositorFrame"* dereferenceable(296) %98) #14
  %101 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 1
  %102 = bitcast i64* %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %102, i64 11, i1 false) #14
  br label %110

103:                                              ; preds = %86, %89
  %104 = phi %"class.viz::CompositorFrame"* [ %88, %86 ], [ %98, %89 ]
  %105 = phi %"class.viz::CompositorFrame"* [ %87, %86 ], [ %91, %89 ]
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %105, %"class.viz::CompositorFrame"* dereferenceable(296) %104) #14
  %106 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %107 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 1
  %108 = bitcast i64* %106 to i8*
  %109 = bitcast i64* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 11, i1 false) #14
  store i8 1, i8* %28, align 8
  br label %110

110:                                              ; preds = %99, %103
  %111 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14
  %112 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %111, i64 0, i32 0, i32 0, i32 0
  %113 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %112, align 8
  %114 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %115 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %114, align 8
  %116 = icmp eq %"class.viz::SurfaceAllocationGroup"** %113, %115
  br i1 %116, label %117, label %128

117:                                              ; preds = %110
  %118 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %113 to i64
  br label %122

119:                                              ; preds = %128
  %120 = bitcast %"class.base::internal::flat_tree.296"* %111 to i64*
  %121 = load i64, i64* %120, align 8
  br label %122

122:                                              ; preds = %117, %119
  %123 = phi i64 [ %121, %119 ], [ %118, %117 ]
  %124 = bitcast %"class.viz::SurfaceAllocationGroup"*** %114 to i64*
  store i64 %123, i64* %124, align 8
  call void @_ZN3viz7Surface33RecomputeActiveReferencedSurfacesEv(%"class.viz::Surface"* %0)
  %125 = inttoptr i64 %81 to %"class.std::__1::unique_ptr.251"*
  %126 = inttoptr i64 %82 to %"class.std::__1::unique_ptr.251"*
  %127 = icmp eq %"class.std::__1::unique_ptr.251"* %125, %126
  br i1 %127, label %133, label %157

128:                                              ; preds = %110, %128
  %129 = phi %"class.viz::SurfaceAllocationGroup"** [ %131, %128 ], [ %113, %110 ]
  %130 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %129, align 8
  call void @_ZN3viz22SurfaceAllocationGroup25UnregisterBlockedEmbedderEPNS_7SurfaceEb(%"class.viz::SurfaceAllocationGroup"* %130, %"class.viz::Surface"* %0, i1 zeroext true) #14
  %131 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %129, i64 1
  %132 = icmp eq %"class.viz::SurfaceAllocationGroup"** %131, %115
  br i1 %132, label %119, label %128

133:                                              ; preds = %157, %122
  %134 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %134, i8 0, i64 320, i1 false) #14
  %135 = load i8, i8* %84, align 8, !range !6
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %144, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %139 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %138, %"class.viz::CompositorFrame"* dereferenceable(296) %139) #14
  %140 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %141 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %142 = bitcast i64* %140 to i8*
  %143 = bitcast i64* %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 11, i1 false) #14
  store i8 1, i8* %134, align 8
  br label %144

144:                                              ; preds = %133, %137
  call void @_ZN3viz7Surface34UnrefFrameResourcesAndRunCallbacksEN4absl8optionalINS0_9FrameDataEEE(%"class.viz::Surface"* %0, %"class.absl::optional.134"* nonnull %7)
  %145 = load i8, i8* %134, align 8, !range !6
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %149, label %147

147:                                              ; preds = %144
  %148 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %7, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %148) #14
  store i8 0, i8* %134, align 8
  br label %149

149:                                              ; preds = %144, %147
  %150 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %151 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %151, label %152, label %179

152:                                              ; preds = %149
  %153 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %154 = bitcast i64* %153 to %"class.viz::SurfaceClient"**
  %155 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %154, align 8
  %156 = icmp eq %"class.viz::SurfaceClient"* %155, null
  br i1 %156, label %179, label %163

157:                                              ; preds = %122, %157
  %158 = phi %"class.std::__1::unique_ptr.251"* [ %161, %157 ], [ %125, %122 ]
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %158, i64 0, i32 0, i32 0, i32 0
  %160 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %159, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %159, align 8
  call void @_ZN3viz7Surface35RequestCopyOfOutputOnRootRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEE(%"class.viz::Surface"* %0, %"class.viz::CopyOutputRequest"* %160)
  %161 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %158, i64 1
  %162 = icmp eq %"class.std::__1::unique_ptr.251"* %161, %126
  br i1 %162, label %133, label %157

163:                                              ; preds = %152
  %164 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %164, label %168, label %165

165:                                              ; preds = %163
  %166 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %166) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %167 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %166) #14
  br label %168

168:                                              ; preds = %165, %163
  %169 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %169, label %170, label %173

170:                                              ; preds = %168
  %171 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %154, align 8
  %172 = bitcast %"class.viz::SurfaceClient"* %171 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)***
  br label %173

173:                                              ; preds = %168, %170
  %174 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** [ %172, %170 ], [ null, %168 ]
  %175 = phi %"class.viz::SurfaceClient"* [ %171, %170 ], [ null, %168 ]
  %176 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** %174, align 8
  %177 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %176, i64 2
  %178 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %177, align 8
  call void %178(%"class.viz::SurfaceClient"* %175, %"class.viz::Surface"* %0) #14
  br label %179

179:                                              ; preds = %152, %149, %173
  %180 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 8
  %181 = load i8, i8* %180, align 8, !range !6
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %217

183:                                              ; preds = %179
  %184 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %185 = and i8 %184, 25
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %203, label %187, !prof !5

187:                                              ; preds = %183
  %188 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  %189 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1
  %190 = call i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"* %189) #14
  %191 = shl i64 %190, 1
  %192 = or i64 %191, 1
  %193 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %193) #14
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.viz::SurfaceId"* %188) #14
  %194 = call i64 @_ZN20trace_event_internal13AddTraceEventIRA23_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0), i8* null, i64 0, i32 4224, i64 %192, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), [23 x i8]* nonnull dereferenceable(23) @.str.20, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8)
  %195 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %196 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %195, i64 0, i32 1, i32 0
  %197 = load i8, i8* %196, align 1
  %198 = icmp slt i8 %197, 0
  br i1 %198, label %199, label %202

199:                                              ; preds = %187
  %200 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load i8*, i8** %200, align 8
  call void @_ZdlPv(i8* %201) #15
  br label %202

202:                                              ; preds = %187, %199
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %193) #14
  br label %203

203:                                              ; preds = %183, %202
  %204 = phi i64 [ -6148914691236517206, %183 ], [ %194, %202 ]
  %205 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %183 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0), %202 ]
  %206 = phi i8* [ null, %183 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), %202 ]
  store i8 1, i8* %180, align 8
  %207 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 17
  %208 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %207, align 8
  call void @_ZN3viz22SurfaceAllocationGroup24OnFirstSurfaceActivationEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %208, %"class.viz::Surface"* %0) #14
  %209 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %210 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %209, align 8
  %211 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0
  call void @_ZN3viz14SurfaceManager22FirstSurfaceActivationERKNS_11SurfaceInfoE(%"class.viz::SurfaceManager"* %210, %"class.viz::SurfaceInfo"* dereferenceable(48) %211) #14
  %212 = icmp eq i8* %206, null
  br i1 %212, label %217, label %213

213:                                              ; preds = %203
  %214 = load i8, i8* %206, align 1
  %215 = icmp eq i8 %214, 0
  br i1 %215, label %217, label %216

216:                                              ; preds = %213
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %206, i8* %205, i64 %204) #14
  br label %217

217:                                              ; preds = %216, %213, %203, %179
  %218 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %219 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %218, align 8
  call void @_ZN3viz14SurfaceManager16SurfaceActivatedEPNS_7SurfaceE(%"class.viz::SurfaceManager"* %219, %"class.viz::Surface"* %0) #14
  %220 = load i8, i8* %28, align 8, !range !6
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %223, !prof !7

222:                                              ; preds = %217
  call void @llvm.trap() #14
  unreachable

223:                                              ; preds = %217
  %224 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %224, label %225, label %252

225:                                              ; preds = %223
  %226 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %227 = bitcast i64* %226 to %"class.viz::SurfaceClient"**
  %228 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %227, align 8
  %229 = icmp eq %"class.viz::SurfaceClient"* %228, null
  br i1 %229, label %252, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 14
  %232 = load i8, i8* %231, align 4, !range !6
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %252, label %234

234:                                              ; preds = %230
  %235 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %235, label %239, label %236

236:                                              ; preds = %234
  %237 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %238 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #14
  br label %239

239:                                              ; preds = %236, %234
  %240 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %150) #14
  br i1 %240, label %241, label %244

241:                                              ; preds = %239
  %242 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %227, align 8
  %243 = bitcast %"class.viz::SurfaceClient"* %242 to void (%"class.viz::SurfaceClient"*, i32)***
  br label %244

244:                                              ; preds = %239, %241
  %245 = phi void (%"class.viz::SurfaceClient"*, i32)*** [ %243, %241 ], [ null, %239 ]
  %246 = phi %"class.viz::SurfaceClient"* [ %242, %241 ], [ null, %239 ]
  %247 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 13
  %248 = load i32, i32* %247, align 8
  %249 = load void (%"class.viz::SurfaceClient"*, i32)**, void (%"class.viz::SurfaceClient"*, i32)*** %245, align 8
  %250 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, i32)*, void (%"class.viz::SurfaceClient"*, i32)** %249, i64 10
  %251 = load void (%"class.viz::SurfaceClient"*, i32)*, void (%"class.viz::SurfaceClient"*, i32)** %250, align 8
  call void %251(%"class.viz::SurfaceClient"* %246, i32 %248) #14
  br label %252

252:                                              ; preds = %225, %223, %230, %244
  %253 = load i8, i8* %84, align 8, !range !6
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %257, label %255

255:                                              ; preds = %252
  %256 = getelementptr inbounds %"class.absl::optional.134", %"class.absl::optional.134"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %256) #14
  store i8 0, i8* %84, align 8
  br label %257

257:                                              ; preds = %252, %255
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %84) #14
  %258 = icmp eq i64 %81, 0
  br i1 %258, label %272, label %259

259:                                              ; preds = %257
  br i1 %127, label %270, label %260

260:                                              ; preds = %259, %268
  %261 = phi %"class.std::__1::unique_ptr.251"* [ %262, %268 ], [ %126, %259 ]
  %262 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %261, i64 -1
  %263 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %262, i64 0, i32 0, i32 0, i32 0
  %264 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %263, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %263, align 8
  %265 = icmp eq %"class.viz::CopyOutputRequest"* %264, null
  br i1 %265, label %268, label %266

266:                                              ; preds = %260
  call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %264) #14
  %267 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %264, i64 0, i32 0
  call void @_ZdlPv(i8* %267) #15
  br label %268

268:                                              ; preds = %266, %260
  %269 = icmp eq %"class.std::__1::unique_ptr.251"* %262, %125
  br i1 %269, label %270, label %260

270:                                              ; preds = %268, %259
  %271 = inttoptr i64 %81 to i8*
  call void @_ZdlPv(i8* %271) #15
  br label %272

272:                                              ; preds = %257, %270
  %273 = icmp eq i8* %25, null
  br i1 %273, label %278, label %274

274:                                              ; preds = %272
  %275 = load i8, i8* %25, align 1
  %276 = icmp eq i8 %275, 0
  br i1 %276, label %278, label %277

277:                                              ; preds = %274
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %25, i8* %26, i64 %27) #14
  br label %278

278:                                              ; preds = %272, %274, %277
  ret void
}

declare void @_ZN3viz25SurfaceDependencyDeadline3SetERKNS_13FrameDeadlineE(%"class.viz::SurfaceDependencyDeadline"*, %"class.viz::FrameDeadline"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface20ResolveFrameDeadlineERKNS_15CompositorFrameE(%"class.viz::FrameDeadline"* noalias sret, %"class.viz::Surface"* nocapture readonly, %"class.viz::CompositorFrame"* nocapture readonly dereferenceable(296)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 15
  %5 = load i8, i8* %4, align 8, !range !6
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZN3viz13FrameDeadline8MakeZeroEv(%"class.viz::FrameDeadline"* sret %0) #14
  br label %82

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !6
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %52

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 17
  %14 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %13, align 8
  %15 = tail call dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup22GetLastActiveReferenceEv(%"class.viz::SurfaceAllocationGroup"* %14) #14
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %52

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %52

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %52

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %39, label %52

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 1, i32 2, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %41, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 1, i32 2, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %47, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %45
  tail call void @_ZN3viz13FrameDeadline8MakeZeroEv(%"class.viz::FrameDeadline"* sret %0) #14
  br label %82

52:                                               ; preds = %8, %12, %39, %27, %33, %21, %45
  %53 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %1, i64 0, i32 2
  %54 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %53, align 8
  %55 = getelementptr inbounds %"class.viz::SurfaceManager", %"class.viz::SurfaceManager"* %54, i64 0, i32 1
  %56 = bitcast %"class.absl::optional"* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = trunc i64 %57 to i8
  %59 = lshr i64 %57, 32
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %2, i64 0, i32 0, i32 11, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i8 %58, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %52
  %65 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %2, i64 0, i32 0, i32 11, i32 4
  %66 = load i8, i8* %65, align 8, !range !6
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %64, %52
  %69 = select i1 %63, i32 -1, i32 %60
  %70 = icmp ult i32 %62, %69
  %71 = select i1 %70, i32 %69, i32 %62
  br label %72

72:                                               ; preds = %64, %68
  %73 = phi i32 [ %71, %68 ], [ %62, %64 ]
  %74 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %2, i64 0, i32 0, i32 11, i32 0, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %2, i64 0, i32 0, i32 11, i32 3, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.viz::FrameDeadline", %"class.viz::FrameDeadline"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %75, i64* %78, align 8
  %79 = getelementptr inbounds %"class.viz::FrameDeadline", %"class.viz::FrameDeadline"* %0, i64 0, i32 1
  store i32 %73, i32* %79, align 8
  %80 = getelementptr inbounds %"class.viz::FrameDeadline", %"class.viz::FrameDeadline"* %0, i64 0, i32 3, i32 0
  store i64 %77, i64* %80, align 8
  %81 = getelementptr inbounds %"class.viz::FrameDeadline", %"class.viz::FrameDeadline"* %0, i64 0, i32 4
  store i8 0, i8* %81, align 8
  br label %82

82:                                               ; preds = %72, %51, %7
  ret void
}

declare void @_ZN3viz22SurfaceAllocationGroup28AckLastestActiveUnAckedFrameEv(%"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #3

declare void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #3

declare void @_ZN4base11trace_event11TracedValue12AppendStringENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"*, i8*, i64) local_unnamed_addr #3

declare void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::SurfaceId"*) local_unnamed_addr #3

declare void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrIN4base11trace_event11TracedValueENS1_14default_deleteISB_EEEEEENSA_16TraceEventHandleEcPKhPKcSJ_yjySJ_OT_SJ_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, %"class.std::__1::basic_string"* dereferenceable(24), i8*, %"class.std::__1::unique_ptr.365"* dereferenceable(8)) local_unnamed_addr #4 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247175934, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %30 = select i1 %26, i8* %28, i8* %29
  %31 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %30, i8** %31, align 8
  %32 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr.365", %"class.std::__1::unique_ptr.365"* %10, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.base::trace_event::TracedValue"*, %"class.base::trace_event::TracedValue"** %33, align 8
  store %"class.base::trace_event::TracedValue"* null, %"class.base::trace_event::TracedValue"** %33, align 8
  %35 = getelementptr inbounds %"class.base::trace_event::TracedValue", %"class.base::trace_event::TracedValue"* %34, i64 0, i32 0
  %36 = bitcast %"union.base::trace_event::TraceValue"* %32 to %"class.base::trace_event::ConvertableToTraceFormat"**
  store %"class.base::trace_event::ConvertableToTraceFormat"* %35, %"class.base::trace_event::ConvertableToTraceFormat"** %36, align 8
  %37 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %38 = load i8, i8* %18, align 8
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %74, label %40

40:                                               ; preds = %11, %69
  %41 = phi i64 [ %70, %69 ], [ 0, %11 ]
  %42 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 8
  br i1 %44, label %45, label %56

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %41
  %47 = bitcast %"union.base::trace_event::TraceValue"* %46 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %48 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %47, align 8
  %49 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %48, null
  br i1 %49, label %69, label %50

50:                                               ; preds = %45
  %51 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %48 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %52 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %52, i64 1
  %54 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %53, align 8
  call void %54(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %48) #14
  %55 = load i8, i8* %42, align 1
  br label %56

56:                                               ; preds = %50, %40
  %57 = phi i8 [ %43, %40 ], [ %55, %50 ]
  %58 = icmp eq i8 %57, 9
  br i1 %58, label %59, label %69

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %41
  %61 = bitcast %"union.base::trace_event::TraceValue"* %60 to %"class.protozero::HeapBuffered"**
  %62 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %61, align 8
  %63 = icmp eq %"class.protozero::HeapBuffered"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %62, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %65) #14
  %66 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %62, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %66) #14
  %67 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %62, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %67) #14
  %68 = bitcast %"class.protozero::HeapBuffered"* %62 to i8*
  call void @_ZdlPv(i8* %68) #15
  br label %69

69:                                               ; preds = %64, %59, %56, %45
  %70 = add nuw nsw i64 %41, 1
  %71 = load i8, i8* %18, align 8
  %72 = zext i8 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %40, label %74

74:                                               ; preds = %69, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %37
}

declare void @_ZN4base19ScopedClosureRunner7ReleaseEv(%"class.base::OnceCallback.322"* sret, %"class.base::ScopedClosureRunner"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface19RequestCopyOfOutputENS_24PendingCopyOutputRequestE(%"class.viz::Surface"* nocapture readonly, %"struct.viz::PendingCopyOutputRequest"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %5 = and i8 %4, 25
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7, !prof !5

7:                                                ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !6
  store i8 %9, i8* %3, align 1
  %10 = call i64 @_ZN20trace_event_internal13AddTraceEventIbEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  br label %11

11:                                               ; preds = %2, %7
  %12 = phi i8* [ null, %2 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), %7 ]
  %13 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %2 ], [ getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), %7 ]
  %14 = phi i64 [ -6148914691236517206, %2 ], [ %10, %7 ]
  %15 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %20 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %19, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %19, align 8
  call void @_ZN3viz7Surface35RequestCopyOfOutputOnRootRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEE(%"class.viz::Surface"* %0, %"class.viz::CopyOutputRequest"* %20)
  br label %46

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %23 = load i8, i8* %22, align 8, !range !6
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %46, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %27 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %26, align 8
  %28 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %29 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %28, align 8
  %30 = icmp eq %"class.std::__1::unique_ptr.221"* %27, %29
  br i1 %30, label %46, label %33

31:                                               ; preds = %33
  %32 = icmp eq %"class.std::__1::unique_ptr.221"* %40, %29
  br i1 %32, label %46, label %33

33:                                               ; preds = %25, %31
  %34 = phi %"class.std::__1::unique_ptr.221"* [ %40, %31 ], [ %27, %25 ]
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %35, align 8
  %37 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %36, i64 0, i32 2, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %16
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %34, i64 1
  br i1 %39, label %41, label %31

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %34, i64 0, i32 0, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %44 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %43, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %43, align 8
  %45 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %42, align 8
  call fastcc void @_ZN3viz12_GLOBAL__N_131RequestCopyOfOutputOnRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEERNS_20CompositorRenderPassE(%"class.viz::CopyOutputRequest"* %44, %"class.viz::CompositorRenderPass"* dereferenceable(280) %45)
  br label %46

46:                                               ; preds = %31, %25, %21, %41, %18
  %47 = icmp eq i8* %12, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %46
  %49 = load i8, i8* %12, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %12, i8* %13, i64 %14) #14
  br label %52

52:                                               ; preds = %46, %48, %51
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIbEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, i8* dereferenceable(1)) local_unnamed_addr #4 comdat {
  %10 = alloca %"class.base::trace_event::TraceArguments", align 8
  %11 = alloca %"class.base::TimeTicks", align 8
  %12 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %13 = bitcast %"class.base::TimeTicks"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #14
  %14 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %11, i64 0, i32 0, i32 0
  %15 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %16, align 8
  %17 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 0
  store i8 1, i8* %17, align 1
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 2, i64 0
  store i8* %7, i8** %18, align 8
  %19 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 0
  %20 = load i8, i8* %8, align 1, !range !6
  %21 = bitcast %"union.base::trace_event::TraceValue"* %19 to i8*
  store i8 %20, i8* %21, align 8
  %22 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %12, %"class.base::TimeTicks"* nonnull dereferenceable(8) %11, %"class.base::trace_event::TraceArguments"* nonnull %10, i32 %5) #14
  %23 = load i8, i8* %16, align 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %59, label %25

25:                                               ; preds = %9, %54
  %26 = phi i64 [ %55, %54 ], [ 0, %9 ]
  %27 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 8
  br i1 %29, label %30, label %41

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %26
  %32 = bitcast %"union.base::trace_event::TraceValue"* %31 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %33 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %32, align 8
  %34 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %33, null
  br i1 %34, label %54, label %35

35:                                               ; preds = %30
  %36 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %33 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %37 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %37, i64 1
  %39 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %38, align 8
  call void %39(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %33) #14
  %40 = load i8, i8* %27, align 1
  br label %41

41:                                               ; preds = %35, %25
  %42 = phi i8 [ %28, %25 ], [ %40, %35 ]
  %43 = icmp eq i8 %42, 9
  br i1 %43, label %44, label %54

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %10, i64 0, i32 3, i64 %26
  %46 = bitcast %"union.base::trace_event::TraceValue"* %45 to %"class.protozero::HeapBuffered"**
  %47 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %46, align 8
  %48 = icmp eq %"class.protozero::HeapBuffered"* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %47, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %50) #14
  %51 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %47, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %51) #14
  %52 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %47, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %52) #14
  %53 = bitcast %"class.protozero::HeapBuffered"* %47 to i8*
  call void @_ZdlPv(i8* %53) #15
  br label %54

54:                                               ; preds = %49, %44, %41, %30
  %55 = add nuw nsw i64 %26, 1
  %56 = load i8, i8* %16, align 8
  %57 = zext i8 %56 to i64
  %58 = icmp ult i64 %55, %57
  br i1 %58, label %25, label %59

59:                                               ; preds = %54, %9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #14
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface35RequestCopyOfOutputOnRootRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEE(%"class.viz::Surface"* nocapture readonly, %"class.viz::CopyOutputRequest"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = ptrtoint %"class.viz::CopyOutputRequest"* %1 to i64
  %5 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %6 = and i8 %5, 25
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %12, label %8, !prof !5

8:                                                ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !6
  store i8 %10, i8* %3, align 1
  %11 = call i64 @_ZN20trace_event_internal13AddTraceEventIbEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i64 [ -6148914691236517206, %2 ], [ %11, %8 ]
  %14 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %2 ], [ getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), %8 ]
  %15 = phi i8* [ null, %2 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), %8 ]
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !6
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %21 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %20, align 8
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %21, i64 -1, i32 0, i32 0, i32 0
  %23 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %22, align 8
  call fastcc void @_ZN3viz12_GLOBAL__N_131RequestCopyOfOutputOnRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEERNS_20CompositorRenderPassE(%"class.viz::CopyOutputRequest"* %1, %"class.viz::CompositorRenderPass"* dereferenceable(280) %23)
  br label %24

24:                                               ; preds = %12, %19
  %25 = phi i64 [ 0, %19 ], [ %4, %12 ]
  %26 = icmp eq i8* %15, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %24
  %28 = load i8, i8* %15, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %27
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %15, i8* %14, i64 %13) #14
  br label %31

31:                                               ; preds = %24, %27, %30
  %32 = inttoptr i64 %25 to %"class.viz::CopyOutputRequest"*
  %33 = icmp eq i64 %25, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %31
  call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %32) #14
  %35 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %32, i64 0, i32 0
  call void @_ZdlPv(i8* %35) #15
  br label %36

36:                                               ; preds = %31, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3viz12_GLOBAL__N_131RequestCopyOfOutputOnRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEERNS_20CompositorRenderPassE(%"class.viz::CopyOutputRequest"*, %"class.viz::CompositorRenderPass"* dereferenceable(280)) unnamed_addr #0 {
  %3 = alloca %"class.std::__1::unique_ptr.251", align 8
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.viz::CopyOutputRequest"* %0, %"class.viz::CopyOutputRequest"** %4, align 8
  %5 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !6
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %9, align 8
  br label %105

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %13 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10, i32 0, i32 0
  %14 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %13, align 8
  %15 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10, i32 0, i32 1
  %16 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %15, align 8
  %17 = icmp eq %"class.std::__1::unique_ptr.251"* %14, %16
  br i1 %17, label %43, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.base::UnguessableToken", %"class.base::UnguessableToken"* %12, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  br label %21

21:                                               ; preds = %38, %18
  %22 = phi %"class.std::__1::unique_ptr.251"* [ %14, %18 ], [ %39, %38 ]
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %23, align 8
  %25 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %24, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %26 = load i8, i8* %25, align 8, !range !6
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %38, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %24, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %19, align 8
  %32 = icmp eq i64 %30, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %24, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* %20, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %43, label %38

38:                                               ; preds = %33, %28, %21
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %22, i64 1
  %40 = icmp eq %"class.std::__1::unique_ptr.251"* %39, %16
  br i1 %40, label %41, label %21

41:                                               ; preds = %38
  %42 = ptrtoint %"class.std::__1::unique_ptr.251"* %16 to i64
  br label %89

43:                                               ; preds = %33, %11
  %44 = phi %"class.std::__1::unique_ptr.251"* [ %14, %11 ], [ %22, %33 ]
  %45 = ptrtoint %"class.std::__1::unique_ptr.251"* %44 to i64
  %46 = icmp eq %"class.std::__1::unique_ptr.251"* %44, %16
  br i1 %46, label %89, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %44, i64 1
  %49 = icmp eq %"class.std::__1::unique_ptr.251"* %48, %16
  br i1 %49, label %89, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds %"class.base::UnguessableToken", %"class.base::UnguessableToken"* %12, i64 0, i32 0, i32 0
  %52 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  br label %53

53:                                               ; preds = %83, %50
  %54 = phi %"class.std::__1::unique_ptr.251"* [ %48, %50 ], [ %85, %83 ]
  %55 = phi i64 [ %45, %50 ], [ %84, %83 ]
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %54, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %56, align 8
  %58 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %57, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %59 = load i8, i8* %58, align 8, !range !6
  %60 = icmp eq i8 %59, 0
  %61 = ptrtoint %"class.viz::CopyOutputRequest"* %57 to i64
  br i1 %60, label %72, label %62

62:                                               ; preds = %53
  %63 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %57, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = load i64, i64* %51, align 8
  %66 = icmp eq i64 %64, %65
  br i1 %66, label %67, label %72

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %57, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = load i64, i64* %52, align 8
  %71 = icmp eq i64 %69, %70
  br i1 %71, label %83, label %72

72:                                               ; preds = %67, %62, %53
  %73 = inttoptr i64 %55 to %"class.std::__1::unique_ptr.251"*
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %56, align 8
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %74, align 8
  %76 = inttoptr i64 %55 to i64*
  store i64 %61, i64* %76, align 8
  %77 = icmp eq %"class.viz::CopyOutputRequest"* %75, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %72
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %75) #14
  %79 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %75, i64 0, i32 0
  tail call void @_ZdlPv(i8* %79) #15
  br label %80

80:                                               ; preds = %78, %72
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %73, i64 1
  %82 = ptrtoint %"class.std::__1::unique_ptr.251"* %81 to i64
  br label %83

83:                                               ; preds = %80, %67
  %84 = phi i64 [ %55, %67 ], [ %82, %80 ]
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %54, i64 1
  %86 = icmp eq %"class.std::__1::unique_ptr.251"* %85, %16
  br i1 %86, label %87, label %53

87:                                               ; preds = %83
  %88 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %15, align 8
  br label %89

89:                                               ; preds = %87, %47, %43, %41
  %90 = phi %"class.std::__1::unique_ptr.251"* [ %16, %43 ], [ %16, %41 ], [ %16, %47 ], [ %88, %87 ]
  %91 = phi i64 [ %45, %43 ], [ %42, %41 ], [ %45, %47 ], [ %84, %87 ]
  %92 = inttoptr i64 %91 to %"class.std::__1::unique_ptr.251"*
  %93 = icmp eq %"class.std::__1::unique_ptr.251"* %90, %92
  br i1 %93, label %105, label %94

94:                                               ; preds = %89, %102
  %95 = phi %"class.std::__1::unique_ptr.251"* [ %96, %102 ], [ %90, %89 ]
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %95, i64 -1
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %96, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %97, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %97, align 8
  %99 = icmp eq %"class.viz::CopyOutputRequest"* %98, null
  br i1 %99, label %102, label %100

100:                                              ; preds = %94
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %98) #14
  %101 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %98, i64 0, i32 0
  tail call void @_ZdlPv(i8* %101) #15
  br label %102

102:                                              ; preds = %100, %94
  %103 = icmp eq %"class.std::__1::unique_ptr.251"* %96, %92
  br i1 %103, label %104, label %94

104:                                              ; preds = %102
  store %"class.std::__1::unique_ptr.251"* %92, %"class.std::__1::unique_ptr.251"** %15, align 8
  br label %105

105:                                              ; preds = %8, %104, %89
  %106 = phi %"class.std::__1::unique_ptr.251"* [ %10, %8 ], [ %92, %104 ], [ %90, %89 ]
  %107 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10, i32 0, i32 2, i32 0, i32 0
  %108 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %107, align 8
  %109 = icmp ult %"class.std::__1::unique_ptr.251"* %106, %108
  br i1 %109, label %110, label %118

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10, i32 0, i32 1
  %112 = bitcast %"class.std::__1::unique_ptr.251"* %3 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %4, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.251"* %106 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %106, i64 1
  %116 = ptrtoint %"class.std::__1::unique_ptr.251"* %115 to i64
  %117 = bitcast %"class.std::__1::unique_ptr.251"** %111 to i64*
  store i64 %116, i64* %117, align 8
  br label %120

118:                                              ; preds = %105
  %119 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %1, i64 0, i32 0, i32 10
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3viz17CopyOutputRequestENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.249"* %119, %"class.std::__1::unique_ptr.251"* nonnull dereferenceable(8) %3) #14
  br label %120

120:                                              ; preds = %110, %118
  %121 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %4, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %4, align 8
  %122 = icmp eq %"class.viz::CopyOutputRequest"* %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %120
  call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %121) #14
  %124 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %121, i64 0, i32 0
  call void @_ZdlPv(i8* %124) #15
  br label %125

125:                                              ; preds = %120, %123
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3viz7Surface44RequestCopyOfOutputOnActiveFrameRenderPassIdENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEEN4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEE(%"class.viz::Surface"* nocapture readonly, %"class.viz::CopyOutputRequest"*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = ptrtoint %"class.viz::CopyOutputRequest"* %1 to i64
  %6 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %7 = and i8 %6, 25
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %13, label %9, !prof !5

9:                                                ; preds = %3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #14
  %10 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !6
  store i8 %11, i8* %4, align 1
  %12 = call i64 @_ZN20trace_event_internal13AddTraceEventIbEEN4base11trace_event16TraceEventHandleEcPKhPKcS7_yjyS7_OT_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i64 0, i64 0), i8* null, i64 0, i32 0, i64 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* nonnull dereferenceable(1) %4)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #14
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i64 [ -6148914691236517206, %3 ], [ %12, %9 ]
  %15 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %3 ], [ getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i64 0, i64 0), %9 ]
  %16 = phi i8* [ null, %3 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), %9 ]
  %17 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 8, !range !6
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %37, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %21, align 8
  %23 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %24 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %23, align 8
  %25 = icmp eq %"class.std::__1::unique_ptr.221"* %22, %24
  br i1 %25, label %37, label %28

26:                                               ; preds = %28
  %27 = icmp eq %"class.std::__1::unique_ptr.221"* %35, %24
  br i1 %27, label %37, label %28

28:                                               ; preds = %20, %26
  %29 = phi %"class.std::__1::unique_ptr.221"* [ %35, %26 ], [ %22, %20 ]
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %30, align 8
  %32 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %31, i64 0, i32 1, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, %2
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %29, i64 1
  br i1 %34, label %36, label %26

36:                                               ; preds = %28
  call fastcc void @_ZN3viz12_GLOBAL__N_131RequestCopyOfOutputOnRenderPassENSt3__110unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS3_EEEERNS_20CompositorRenderPassE(%"class.viz::CopyOutputRequest"* %1, %"class.viz::CompositorRenderPass"* dereferenceable(280) %31)
  br label %37

37:                                               ; preds = %26, %20, %13, %36
  %38 = phi i64 [ %5, %13 ], [ 0, %36 ], [ %5, %20 ], [ %5, %26 ]
  %39 = phi i1 [ false, %13 ], [ true, %36 ], [ false, %20 ], [ false, %26 ]
  %40 = icmp eq i8* %16, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = load i8, i8* %16, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %16, i8* %15, i64 %14) #14
  br label %45

45:                                               ; preds = %37, %41, %44
  %46 = inttoptr i64 %38 to %"class.viz::CopyOutputRequest"*
  %47 = icmp eq i64 %38, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %45
  call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %46) #14
  %49 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %46, i64 0, i32 0
  call void @_ZdlPv(i8* %49) #15
  br label %50

50:                                               ; preds = %45, %48
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface30OnActivationDependencyResolvedERKNS_9SurfaceIdEPNS_22SurfaceAllocationGroupE(%"class.viz::Surface"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %5 = tail call { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree.34"* %4, %"class.viz::SurfaceId"* dereferenceable(32) %1) #14
  %6 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %5, 0
  %7 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %5, 1
  %8 = icmp eq %"class.viz::SurfaceId"* %6, %7
  br i1 %8, label %22, label %9

9:                                                ; preds = %3
  %10 = ptrtoint %"class.viz::SurfaceId"* %7 to i64
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %12 = bitcast %"class.viz::SurfaceId"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %10
  %15 = ashr exact i64 %14, 5
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.viz::SurfaceId"* %6 to i8*
  %19 = bitcast %"class.viz::SurfaceId"* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 %14, i1 false) #14
  br label %20

20:                                               ; preds = %17, %9
  %21 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 %15
  store %"class.viz::SurfaceId"* %21, %"class.viz::SurfaceId"** %11, align 8
  br label %22

22:                                               ; preds = %3, %20
  %23 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %24 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %23, align 8
  %25 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 14, i32 0, i32 0, i32 1
  %26 = bitcast %"class.viz::SurfaceAllocationGroup"*** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %24 to i64
  %29 = sub i64 %27, %28
  %30 = icmp eq i64 %29, 0
  %31 = inttoptr i64 %27 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %30, label %49, label %32

32:                                               ; preds = %22
  %33 = ashr exact i64 %29, 3
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi %"class.viz::SurfaceAllocationGroup"** [ %24, %32 ], [ %45, %34 ]
  %36 = phi i64 [ %33, %32 ], [ %44, %34 ]
  %37 = lshr i64 %36, 1
  %38 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %35, i64 %37
  %39 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %38, align 8
  %40 = icmp ult %"class.viz::SurfaceAllocationGroup"* %39, %2
  %41 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %38, i64 1
  %42 = xor i64 %37, -1
  %43 = add i64 %36, %42
  %44 = select i1 %40, i64 %43, i64 %37
  %45 = select i1 %40, %"class.viz::SurfaceAllocationGroup"** %41, %"class.viz::SurfaceAllocationGroup"** %35
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %47, label %34

47:                                               ; preds = %34
  %48 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %45 to i64
  br label %49

49:                                               ; preds = %47, %22
  %50 = phi i64 [ %48, %47 ], [ %28, %22 ]
  %51 = phi %"class.viz::SurfaceAllocationGroup"** [ %45, %47 ], [ %24, %22 ]
  %52 = icmp eq %"class.viz::SurfaceAllocationGroup"** %51, %31
  br i1 %52, label %59, label %53

53:                                               ; preds = %49
  %54 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %51, align 8
  %55 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %54, %2
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %51, i64 1
  %58 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %57 to i64
  br label %59

59:                                               ; preds = %56, %53, %49
  %60 = phi i64 [ %58, %56 ], [ %50, %49 ], [ %50, %53 ]
  %61 = inttoptr i64 %60 to %"class.viz::SurfaceAllocationGroup"**
  %62 = icmp eq %"class.viz::SurfaceAllocationGroup"** %51, %61
  br i1 %62, label %72, label %63

63:                                               ; preds = %59
  %64 = sub i64 %27, %60
  %65 = ashr exact i64 %64, 3
  %66 = icmp eq i64 %64, 0
  br i1 %66, label %70, label %67

67:                                               ; preds = %63
  %68 = bitcast %"class.viz::SurfaceAllocationGroup"** %51 to i8*
  %69 = inttoptr i64 %60 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 %64, i1 false) #14
  br label %70

70:                                               ; preds = %67, %63
  %71 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %51, i64 %65
  store %"class.viz::SurfaceAllocationGroup"** %71, %"class.viz::SurfaceAllocationGroup"*** %25, align 8
  br label %72

72:                                               ; preds = %59, %70
  %73 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %4, i64 0, i32 0, i32 0, i32 0
  %74 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %73, align 8
  %75 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %76 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %75, align 8
  %77 = icmp eq %"class.viz::SurfaceId"* %74, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %72
  tail call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0)
  br label %79

79:                                               ; preds = %72, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.viz::Surface::FrameData", align 8
  %3 = alloca %"class.absl::optional.173", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca i64, align 8
  %6 = alloca %"struct.viz::Surface::FrameData", align 8
  %7 = bitcast %"struct.viz::Surface::FrameData"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %7) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast (<{ { { float, %"class.gfx::Vector2dF", float, %"class.gfx::SizeF", i8, i8, i8, [1 x i8], i32, %"class.std::__1::vector.139", %"class.std::__1::vector.156", %"class.std::__1::vector.35", %"class.viz::FrameDeadline", %"struct.viz::BeginFrameAck", i32, i8, [3 x i8], float, { { { { i8, [3 x i8], %union.anon.172 } } } }, [4 x i8], { { { { i8, [7 x i8], %union.anon.177 } } } }, i32, [4 x i8], %"class.std::__1::unique_ptr.178", %"class.std::__1::vector.184" }, %"class.std::__1::vector.198", %"class.std::__1::vector.219" }, i64, i8, i8, i8, [5 x i8] }>* @__const._ZN3viz7Surface20ActivatePendingFrameEv.frame_data to i8*), i64 312, i1 false)
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !6
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %12, !prof !7

11:                                               ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %2, i64 0, i32 0
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* nonnull %13, %"class.viz::CompositorFrame"* dereferenceable(296) %14) #14
  %15 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %2, i64 0, i32 1
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 1
  %17 = bitcast i64* %15 to i8*
  %18 = bitcast i64* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 11, i1 false) #14
  %19 = load i8, i8* %8, align 8, !range !6
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %22, label %21

21:                                               ; preds = %12
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %14) #14
  store i8 0, i8* %8, align 8
  br label %22

22:                                               ; preds = %12, %21
  %23 = getelementptr inbounds %"class.absl::optional.173", %"class.absl::optional.173"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #14
  %24 = bitcast %"class.absl::optional.173"* %3 to i64*
  store i64 -6148914691236517206, i64* %24, align 8
  %25 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %26 = load %"class.viz::SurfaceDependencyDeadline"*, %"class.viz::SurfaceDependencyDeadline"** %25, align 8
  %27 = call { i8, i64 } @_ZN3viz25SurfaceDependencyDeadline6CancelEv(%"class.viz::SurfaceDependencyDeadline"* %26) #14
  %28 = extractvalue { i8, i64 } %27, 0
  store i8 %28, i8* %23, align 8
  %29 = getelementptr inbounds %"class.absl::optional.173", %"class.absl::optional.173"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %30 = extractvalue { i8, i64 } %27, 1
  store i64 %30, i64* %29, align 8
  %31 = icmp eq i8 %28, 0
  br i1 %31, label %51, label %32

32:                                               ; preds = %22
  %33 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %34 = and i8 %33, 25
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %51, label %36, !prof !5

36:                                               ; preds = %32
  %37 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #14
  %38 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.viz::SurfaceId"* %38) #14
  %39 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #14
  %40 = getelementptr inbounds %"class.absl::optional.173", %"class.absl::optional.173"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %41 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* %40) #14
  store i64 %41, i64* %5, align 8
  %42 = call i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEElEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_SE_OT0_(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0), i8* null, i64 0, i32 8, i64 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0), i64* nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #14
  %43 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %36
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %49) #15
  br label %50

50:                                               ; preds = %36, %47
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #14
  br label %51

51:                                               ; preds = %22, %50, %32
  %52 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %6, i64 0, i32 0
  call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* nonnull %52, %"class.viz::CompositorFrame"* nonnull dereferenceable(296) %13) #14
  %53 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %6, i64 0, i32 1
  %54 = bitcast i64* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %17, i64 11, i1 false) #14
  call void @_ZN3viz7Surface13ActivateFrameENS0_9FrameDataE(%"class.viz::Surface"* %0, %"struct.viz::Surface::FrameData"* nonnull %6)
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* nonnull %52) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #14
  call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %7) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface9FrameDataC2EONS_15CompositorFrameEm(%"struct.viz::Surface::FrameData"*, %"class.viz::CompositorFrame"* dereferenceable(296), i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 0
  tail call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %4, %"class.viz::CompositorFrame"* dereferenceable(296) %1) #14
  %5 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 3
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 4
  store i8 0, i8* %8, align 2
  ret void
}

declare void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"*, %"class.viz::CompositorFrame"* dereferenceable(296)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface9FrameDataC2EOS1_(%"struct.viz::Surface::FrameData"*, %"struct.viz::Surface::FrameData"* dereferenceable(312)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 0
  tail call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %3, %"class.viz::CompositorFrame"* dereferenceable(296) %4) #14
  %5 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 1
  %7 = bitcast i64* %5 to i8*
  %8 = bitcast i64* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 11, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(312) %"struct.viz::Surface::FrameData"* @_ZN3viz7Surface9FrameDataaSEOS1_(%"struct.viz::Surface::FrameData"* returned, %"struct.viz::Surface::FrameData"* dereferenceable(312)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz15CompositorFrameaSEOS0_(%"class.viz::CompositorFrame"* %3, %"class.viz::CompositorFrame"* dereferenceable(296) %4) #14
  %6 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %1, i64 0, i32 1
  %8 = bitcast i64* %6 to i8*
  %9 = bitcast i64* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 11, i1 false)
  ret %"struct.viz::Surface::FrameData"* %0
}

declare dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz15CompositorFrameaSEOS0_(%"class.viz::CompositorFrame"*, %"class.viz::CompositorFrame"* dereferenceable(296)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface9FrameDataD2Ev(%"struct.viz::Surface::FrameData"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.viz::Surface::FrameData", %"struct.viz::Surface::FrameData"* %0, i64 0, i32 0
  tail call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %2) #14
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEElEEN4base11trace_event16TraceEventHandleEcPKhPKcSE_yjySE_OT_SE_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, %"class.std::__1::basic_string"* dereferenceable(24), i8*, i64* dereferenceable(8)) local_unnamed_addr #4 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247503614, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %30 = select i1 %26, i8* %28, i8* %29
  %31 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %30, i8** %31, align 8
  %32 = load i64, i64* %10, align 8
  %33 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1, i32 0
  store i64 %32, i64* %33, align 8
  %34 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %35 = load i8, i8* %18, align 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %71, label %37

37:                                               ; preds = %11, %66
  %38 = phi i64 [ %67, %66 ], [ 0, %11 ]
  %39 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 8
  br i1 %41, label %42, label %53

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %38
  %44 = bitcast %"union.base::trace_event::TraceValue"* %43 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %45 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %44, align 8
  %46 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %45, null
  br i1 %46, label %66, label %47

47:                                               ; preds = %42
  %48 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %45 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %49 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %49, i64 1
  %51 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %50, align 8
  call void %51(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %45) #14
  %52 = load i8, i8* %39, align 1
  br label %53

53:                                               ; preds = %47, %37
  %54 = phi i8 [ %40, %37 ], [ %52, %47 ]
  %55 = icmp eq i8 %54, 9
  br i1 %55, label %56, label %66

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %38
  %58 = bitcast %"union.base::trace_event::TraceValue"* %57 to %"class.protozero::HeapBuffered"**
  %59 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %58, align 8
  %60 = icmp eq %"class.protozero::HeapBuffered"* %59, null
  br i1 %60, label %66, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %59, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %62) #14
  %63 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %59, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %63) #14
  %64 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %59, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %64) #14
  %65 = bitcast %"class.protozero::HeapBuffered"* %59 to i8*
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %61, %56, %53, %42
  %67 = add nuw nsw i64 %38, 1
  %68 = load i8, i8* %18, align 8
  %69 = zext i8 %68 to i64
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %37, label %71

71:                                               ; preds = %66, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %34
}

declare i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface32UpdateReferencedAllocationGroupsENSt3__16vectorIPNS_22SurfaceAllocationGroupENS1_9allocatorIS4_EEEE(%"class.viz::Surface"*, %"class.std::__1::vector.297"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::flat_tree.296", align 8
  %4 = alloca %"struct.std::__1::less", align 1
  %5 = bitcast %"class.base::internal::flat_tree.296"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::__1::less", %"struct.std::__1::less"* %4, i64 0, i32 0
  %10 = bitcast %"class.base::internal::flat_tree.296"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9) #14
  call void @_ZN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS_8identityENSt3__14lessIvEENS6_6vectorIS4_NS6_9allocatorIS4_EEEEEC2ERKSC_RKS8_(%"class.base::internal::flat_tree.296"* nonnull %3, %"class.std::__1::vector.297"* dereferenceable(24) %1, %"struct.std::__1::less"* nonnull dereferenceable(1) %4)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9) #14
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12
  %12 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %12, align 8
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 1
  %15 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %14, align 8
  %16 = icmp eq %"class.viz::SurfaceAllocationGroup"** %13, %15
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = bitcast %"class.viz::SurfaceAllocationGroup"*** %7 to i64*
  br label %25

19:                                               ; preds = %66, %2
  %20 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %6, align 8
  %21 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %7, align 8
  %22 = icmp eq %"class.viz::SurfaceAllocationGroup"** %20, %21
  br i1 %22, label %69, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.viz::SurfaceAllocationGroup"*** %14 to i64*
  br label %90

25:                                               ; preds = %17, %66
  %26 = phi %"class.viz::SurfaceAllocationGroup"** [ %13, %17 ], [ %67, %66 ]
  %27 = bitcast %"class.viz::SurfaceAllocationGroup"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %6, align 8
  %30 = load i64, i64* %18, align 8
  %31 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %29 to i64
  %32 = sub i64 %30, %31
  %33 = icmp eq i64 %32, 0
  %34 = inttoptr i64 %30 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %33, label %53, label %35

35:                                               ; preds = %25
  %36 = ashr exact i64 %32, 3
  %37 = inttoptr i64 %28 to %"class.viz::SurfaceAllocationGroup"*
  br label %38

38:                                               ; preds = %38, %35
  %39 = phi %"class.viz::SurfaceAllocationGroup"** [ %29, %35 ], [ %49, %38 ]
  %40 = phi i64 [ %36, %35 ], [ %48, %38 ]
  %41 = lshr i64 %40, 1
  %42 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %39, i64 %41
  %43 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %42, align 8
  %44 = icmp ult %"class.viz::SurfaceAllocationGroup"* %43, %37
  %45 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %42, i64 1
  %46 = xor i64 %41, -1
  %47 = add i64 %40, %46
  %48 = select i1 %44, i64 %47, i64 %41
  %49 = select i1 %44, %"class.viz::SurfaceAllocationGroup"** %45, %"class.viz::SurfaceAllocationGroup"** %39
  %50 = icmp eq i64 %48, 0
  br i1 %50, label %51, label %38

51:                                               ; preds = %38
  %52 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %49 to i64
  br label %53

53:                                               ; preds = %51, %25
  %54 = phi i64 [ %52, %51 ], [ %31, %25 ]
  %55 = phi %"class.viz::SurfaceAllocationGroup"** [ %49, %51 ], [ %29, %25 ]
  %56 = icmp eq %"class.viz::SurfaceAllocationGroup"** %55, %34
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = inttoptr i64 %28 to %"class.viz::SurfaceAllocationGroup"*
  %59 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %55, align 8
  %60 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %59, %58
  br i1 %60, label %61, label %66

61:                                               ; preds = %53, %57
  %62 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %55 to i64
  %63 = icmp eq i64 %54, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = inttoptr i64 %28 to %"class.viz::SurfaceAllocationGroup"*
  call void @_ZN3viz22SurfaceAllocationGroup24UnregisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %65, %"class.viz::Surface"* %0) #14
  br label %66

66:                                               ; preds = %57, %61, %64
  %67 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 1
  %68 = icmp eq %"class.viz::SurfaceAllocationGroup"** %67, %15
  br i1 %68, label %19, label %25

69:                                               ; preds = %131, %19
  %70 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %12, align 8
  %71 = icmp eq %"class.viz::SurfaceAllocationGroup"** %70, null
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = bitcast %"class.viz::SurfaceAllocationGroup"*** %14 to i64*
  br label %79

74:                                               ; preds = %69
  %75 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %70 to i64
  %76 = bitcast %"class.viz::SurfaceAllocationGroup"*** %14 to i64*
  store i64 %75, i64* %76, align 8
  %77 = bitcast %"class.viz::SurfaceAllocationGroup"** %70 to i8*
  call void @_ZdlPv(i8* %77) #15
  %78 = bitcast %"class.base::internal::flat_tree.296"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #14
  br label %79

79:                                               ; preds = %74, %72
  %80 = phi i64* [ %73, %72 ], [ %76, %74 ]
  %81 = bitcast %"class.base::internal::flat_tree.296"* %3 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.base::internal::flat_tree.296"* %11 to i64*
  store i64 %82, i64* %83, align 8
  %84 = bitcast %"class.viz::SurfaceAllocationGroup"*** %7 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %80, align 8
  %86 = bitcast %"class.viz::SurfaceAllocationGroup"*** %8 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 12, i32 0, i32 0, i32 2, i32 0, i32 0
  %89 = bitcast %"class.viz::SurfaceAllocationGroup"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  ret void

90:                                               ; preds = %23, %131
  %91 = phi %"class.viz::SurfaceAllocationGroup"** [ %20, %23 ], [ %132, %131 ]
  %92 = bitcast %"class.viz::SurfaceAllocationGroup"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %12, align 8
  %95 = load i64, i64* %24, align 8
  %96 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %94 to i64
  %97 = sub i64 %95, %96
  %98 = icmp eq i64 %97, 0
  %99 = inttoptr i64 %95 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %98, label %118, label %100

100:                                              ; preds = %90
  %101 = ashr exact i64 %97, 3
  %102 = inttoptr i64 %93 to %"class.viz::SurfaceAllocationGroup"*
  br label %103

103:                                              ; preds = %103, %100
  %104 = phi %"class.viz::SurfaceAllocationGroup"** [ %94, %100 ], [ %114, %103 ]
  %105 = phi i64 [ %101, %100 ], [ %113, %103 ]
  %106 = lshr i64 %105, 1
  %107 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %104, i64 %106
  %108 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %107, align 8
  %109 = icmp ult %"class.viz::SurfaceAllocationGroup"* %108, %102
  %110 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %107, i64 1
  %111 = xor i64 %106, -1
  %112 = add i64 %105, %111
  %113 = select i1 %109, i64 %112, i64 %106
  %114 = select i1 %109, %"class.viz::SurfaceAllocationGroup"** %110, %"class.viz::SurfaceAllocationGroup"** %104
  %115 = icmp eq i64 %113, 0
  br i1 %115, label %116, label %103

116:                                              ; preds = %103
  %117 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %114 to i64
  br label %118

118:                                              ; preds = %116, %90
  %119 = phi i64 [ %117, %116 ], [ %96, %90 ]
  %120 = phi %"class.viz::SurfaceAllocationGroup"** [ %114, %116 ], [ %94, %90 ]
  %121 = icmp eq %"class.viz::SurfaceAllocationGroup"** %120, %99
  br i1 %121, label %126, label %122

122:                                              ; preds = %118
  %123 = inttoptr i64 %93 to %"class.viz::SurfaceAllocationGroup"*
  %124 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %120, align 8
  %125 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %124, %123
  br i1 %125, label %126, label %131

126:                                              ; preds = %118, %122
  %127 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %120 to i64
  %128 = icmp eq i64 %119, %127
  br i1 %128, label %129, label %131

129:                                              ; preds = %126
  %130 = inttoptr i64 %93 to %"class.viz::SurfaceAllocationGroup"*
  call void @_ZN3viz22SurfaceAllocationGroup22RegisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"* %130, %"class.viz::Surface"* %0) #14
  br label %131

131:                                              ; preds = %122, %126, %129
  %132 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 1
  %133 = icmp eq %"class.viz::SurfaceAllocationGroup"** %132, %21
  br i1 %133, label %69, label %90
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS_8identityENSt3__14lessIvEENS6_6vectorIS4_NS6_9allocatorIS4_EEEEEC2ERKSC_RKS8_(%"class.base::internal::flat_tree.296"*, %"class.std::__1::vector.297"* dereferenceable(24), %"struct.std::__1::less"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare", align 1
  %5 = bitcast %"class.base::internal::flat_tree.296"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #14
  %6 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %1, i64 0, i32 0, i32 1
  %7 = bitcast %"class.viz::SurfaceAllocationGroup"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.297"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %42, label %14

14:                                               ; preds = %3
  %15 = icmp ugt i64 %12, 2305843009213693951
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = bitcast %"class.base::internal::flat_tree.296"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %17) #16
  unreachable

18:                                               ; preds = %14
  %19 = tail call i8* @_Znwm(i64 %11) #15
  %20 = bitcast i8* %19 to %"class.viz::SurfaceAllocationGroup"**
  %21 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %0, i64 0, i32 0, i32 0, i32 1
  %22 = bitcast %"class.viz::SurfaceAllocationGroup"*** %21 to i8**
  store i8* %19, i8** %22, align 8
  %23 = bitcast %"class.base::internal::flat_tree.296"* %0 to i8**
  store i8* %19, i8** %23, align 8
  %24 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %20, i64 %12
  %25 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.viz::SurfaceAllocationGroup"** %24, %"class.viz::SurfaceAllocationGroup"*** %25, align 8
  %26 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %1, i64 0, i32 0, i32 0
  %27 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %26, align 8
  %28 = load i64, i64* %7, align 8
  %29 = bitcast %"class.viz::SurfaceAllocationGroup"*** %21 to i64*
  %30 = ptrtoint i8* %19 to i64
  %31 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %27 to i64
  %32 = sub i64 %28, %31
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %18
  %35 = lshr exact i64 %32, 3
  %36 = bitcast %"class.viz::SurfaceAllocationGroup"** %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %36, i64 %32, i1 false) #14
  %37 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %20, i64 %35
  %38 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %37 to i64
  br label %39

39:                                               ; preds = %34, %18
  %40 = phi i64 [ %38, %34 ], [ %30, %18 ]
  store i64 %40, i64* %29, align 8
  %41 = inttoptr i64 %40 to %"class.viz::SurfaceAllocationGroup"**
  br label %42

42:                                               ; preds = %3, %39
  %43 = phi %"class.viz::SurfaceAllocationGroup"** [ null, %3 ], [ %41, %39 ]
  %44 = phi %"class.viz::SurfaceAllocationGroup"** [ null, %3 ], [ %20, %39 ]
  %45 = getelementptr inbounds %"class.base::internal::flat_tree.296", %"class.base::internal::flat_tree.296"* %0, i64 0, i32 0, i32 0, i32 1
  %46 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %43 to i64
  %47 = getelementptr inbounds %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare", %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %47)
  %48 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %44 to i64
  %49 = sub i64 %46, %48
  %50 = ashr exact i64 %49, 3
  %51 = icmp sgt i64 %49, 1024
  br i1 %51, label %52, label %63

52:                                               ; preds = %42
  %53 = icmp slt i64 %50, 1152921504606846975
  %54 = select i1 %53, i64 %50, i64 1152921504606846975
  br label %55

55:                                               ; preds = %60, %52
  %56 = phi i64 [ %61, %60 ], [ %54, %52 ]
  %57 = shl i64 %56, 3
  %58 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %57, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #14
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = lshr i64 %56, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %55

63:                                               ; preds = %60, %42
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %44, %"class.viz::SurfaceAllocationGroup"** %43, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* nonnull dereferenceable(1) %4, i64 %50, %"class.viz::SurfaceAllocationGroup"** null, i64 0) #14
  br label %66

64:                                               ; preds = %55
  %65 = bitcast i8* %58 to %"class.viz::SurfaceAllocationGroup"**
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %44, %"class.viz::SurfaceAllocationGroup"** %43, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* nonnull dereferenceable(1) %4, i64 %50, %"class.viz::SurfaceAllocationGroup"** nonnull %65, i64 %56) #14
  call void @_ZdlPv(i8* nonnull %58) #15
  br label %66

66:                                               ; preds = %63, %64
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %47)
  %67 = icmp eq %"class.viz::SurfaceAllocationGroup"** %44, %43
  br i1 %67, label %119, label %68

68:                                               ; preds = %66, %72
  %69 = phi %"class.viz::SurfaceAllocationGroup"** [ %70, %72 ], [ %44, %66 ]
  %70 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %69, i64 1
  %71 = icmp eq %"class.viz::SurfaceAllocationGroup"** %70, %43
  br i1 %71, label %119, label %72

72:                                               ; preds = %68
  %73 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %69, align 8
  %74 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %70, align 8
  %75 = icmp ult %"class.viz::SurfaceAllocationGroup"* %73, %74
  br i1 %75, label %68, label %76

76:                                               ; preds = %72
  %77 = icmp eq %"class.viz::SurfaceAllocationGroup"** %69, %43
  br i1 %77, label %119, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %69, i64 2
  %80 = icmp eq %"class.viz::SurfaceAllocationGroup"** %79, %43
  br i1 %80, label %104, label %81

81:                                               ; preds = %78
  %82 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %69 to i64
  br label %83

83:                                               ; preds = %100, %81
  %84 = phi %"class.viz::SurfaceAllocationGroup"* [ %101, %100 ], [ %73, %81 ]
  %85 = phi %"class.viz::SurfaceAllocationGroup"** [ %99, %100 ], [ %69, %81 ]
  %86 = phi %"class.viz::SurfaceAllocationGroup"** [ %97, %100 ], [ %79, %81 ]
  %87 = phi i64 [ %96, %100 ], [ %82, %81 ]
  %88 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %86, align 8
  %89 = icmp ult %"class.viz::SurfaceAllocationGroup"* %84, %88
  br i1 %89, label %90, label %95

90:                                               ; preds = %83
  %91 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %88 to i64
  %92 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 1
  %93 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %92 to i64
  %94 = bitcast %"class.viz::SurfaceAllocationGroup"** %92 to i64*
  store i64 %91, i64* %94, align 8
  br label %95

95:                                               ; preds = %90, %83
  %96 = phi i64 [ %87, %83 ], [ %93, %90 ]
  %97 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %86, i64 1
  %98 = icmp eq %"class.viz::SurfaceAllocationGroup"** %97, %43
  %99 = inttoptr i64 %96 to %"class.viz::SurfaceAllocationGroup"**
  br i1 %98, label %102, label %100

100:                                              ; preds = %95
  %101 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %99, align 8
  br label %83

102:                                              ; preds = %95
  %103 = inttoptr i64 %96 to %"class.viz::SurfaceAllocationGroup"**
  br label %104

104:                                              ; preds = %102, %78
  %105 = phi %"class.viz::SurfaceAllocationGroup"** [ %69, %78 ], [ %103, %102 ]
  %106 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %105, i64 1
  %107 = icmp eq %"class.viz::SurfaceAllocationGroup"** %106, %43
  br i1 %107, label %119, label %108

108:                                              ; preds = %104
  %109 = bitcast %"class.viz::SurfaceAllocationGroup"*** %45 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %110, %46
  %112 = ashr exact i64 %111, 3
  %113 = icmp eq i64 %111, 0
  br i1 %113, label %117, label %114

114:                                              ; preds = %108
  %115 = bitcast %"class.viz::SurfaceAllocationGroup"** %106 to i8*
  %116 = bitcast %"class.viz::SurfaceAllocationGroup"** %43 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 %111, i1 false) #14
  br label %117

117:                                              ; preds = %114, %108
  %118 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %106, i64 %112
  store %"class.viz::SurfaceAllocationGroup"** %118, %"class.viz::SurfaceAllocationGroup"*** %45, align 8
  br label %119

119:                                              ; preds = %68, %66, %76, %104, %117
  ret void
}

declare void @_ZN3viz22SurfaceAllocationGroup22RegisterActiveEmbedderEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface33RecomputeActiveReferencedSurfacesEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.297", align 16
  %3 = alloca %"class.std::__1::vector.297", align 16
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10
  %5 = bitcast %"class.base::internal::flat_tree.34"* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 10, i32 0, i32 0, i32 1
  %8 = bitcast %"class.viz::SurfaceId"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11
  %10 = bitcast %"class.std::__1::vector.35"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11, i32 0, i32 1
  %13 = bitcast %"class.viz::SurfaceId"** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.std::__1::vector.297"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #14
  %15 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %2, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %2, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 24, i1 false) #14
  %18 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 8, !range !6
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %22, !prof !7

21:                                               ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

22:                                               ; preds = %1
  %23 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 9, i32 0, i32 0
  %24 = load %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"** %23, align 8
  %25 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 9, i32 0, i32 1
  %26 = load %"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"** %25, align 8
  %27 = icmp eq %"class.viz::SurfaceRange"* %24, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.viz::SurfaceAllocationGroup"*** %16 to i64*
  br label %42

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %32 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast %"class.viz::SurfaceId"** %32 to i64*
  %34 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %9, i64 0, i32 0, i32 0
  %35 = bitcast %"class.viz::SurfaceAllocationGroup"*** %16 to i64*
  %36 = bitcast %"class.std::__1::vector.297"* %2 to i64*
  %37 = bitcast %"class.viz::SurfaceAllocationGroup"*** %17 to i64*
  br label %64

38:                                               ; preds = %362
  %39 = bitcast %"class.std::__1::vector.297"* %2 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  %41 = load i64, i64* %37, align 16
  br label %42

42:                                               ; preds = %28, %38
  %43 = phi i64* [ %29, %28 ], [ %35, %38 ]
  %44 = phi i64 [ 0, %28 ], [ %41, %38 ]
  %45 = phi <2 x i64> [ zeroinitializer, %28 ], [ %40, %38 ]
  %46 = bitcast %"class.std::__1::vector.297"* %3 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %46, align 16
  %47 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast %"class.viz::SurfaceAllocationGroup"*** %47 to i64*
  store i64 %44, i64* %48, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 24, i1 false) #14
  call void @_ZN3viz7Surface32UpdateReferencedAllocationGroupsENSt3__16vectorIPNS_22SurfaceAllocationGroupENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* %0, %"class.std::__1::vector.297"* nonnull %3)
  %49 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %3, i64 0, i32 0, i32 0
  %50 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %49, align 16
  %51 = icmp eq %"class.viz::SurfaceAllocationGroup"** %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %3, i64 0, i32 0, i32 1
  %54 = bitcast %"class.viz::SurfaceAllocationGroup"*** %53 to i64*
  %55 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %50 to i64
  store i64 %55, i64* %54, align 8
  %56 = bitcast %"class.viz::SurfaceAllocationGroup"** %50 to i8*
  call void @_ZdlPv(i8* %56) #15
  br label %57

57:                                               ; preds = %42, %52
  call void @_ZN3viz7Surface23UpdateSurfaceReferencesEv(%"class.viz::Surface"* %0)
  %58 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %15, align 16
  %59 = icmp eq %"class.viz::SurfaceAllocationGroup"** %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %57
  %61 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %58 to i64
  store i64 %61, i64* %43, align 8
  %62 = bitcast %"class.viz::SurfaceAllocationGroup"** %58 to i8*
  call void @_ZdlPv(i8* %62) #15
  br label %63

63:                                               ; preds = %57, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #14
  ret void

64:                                               ; preds = %30, %362
  %65 = phi %"class.viz::SurfaceRange"* [ %24, %30 ], [ %363, %362 ]
  %66 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %31, align 8
  %67 = tail call %"class.viz::Surface"* @_ZN3viz14SurfaceManager24GetLatestInFlightSurfaceERKNS_12SurfaceRangeE(%"class.viz::SurfaceManager"* %66, %"class.viz::SurfaceRange"* dereferenceable(72) %65) #14
  %68 = icmp ne %"class.viz::Surface"* %67, null
  br i1 %68, label %69, label %95

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0
  %71 = tail call { %"class.viz::SurfaceId"*, i8 } @_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE16emplace_key_argsIS3_JRKS3_EEENS5_4pairINS5_11__wrap_iterIPS3_EEbEERKT_DpOT0_(%"class.base::internal::flat_tree.34"* %4, %"class.viz::SurfaceId"* dereferenceable(32) %70, %"class.viz::SurfaceId"* dereferenceable(32) %70) #14
  %72 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %12, align 8
  %73 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %32, align 8
  %74 = icmp eq %"class.viz::SurfaceId"* %72, %73
  br i1 %74, label %94, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %76, align 4
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 0, i32 1
  %80 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %79, align 4
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 0
  %83 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0, i32 1, i32 0
  %84 = load i32, i32* %83, align 8
  store i32 %84, i32* %82, align 8
  %85 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 1
  %86 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0, i32 1, i32 1
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %85, align 4
  %88 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 2
  %89 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0, i32 1, i32 2
  %90 = bitcast %"class.base::UnguessableToken"* %88 to i8*
  %91 = bitcast %"class.base::UnguessableToken"* %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false) #14
  %92 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 1
  %93 = ptrtoint %"class.viz::SurfaceId"* %92 to i64
  store i64 %93, i64* %13, align 8
  br label %221

94:                                               ; preds = %69
  tail call void @_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.35"* %9, %"class.viz::SurfaceId"* dereferenceable(32) %70) #14
  br label %221

95:                                               ; preds = %64
  %96 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %12, align 8
  %97 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %32, align 8
  %98 = icmp ult %"class.viz::SurfaceId"* %96, %97
  %99 = ptrtoint %"class.viz::SurfaceId"* %97 to i64
  br i1 %98, label %100, label %104

100:                                              ; preds = %95
  %101 = bitcast %"class.viz::SurfaceId"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %101, i8 0, i64 32, i1 false) #14
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1
  %103 = ptrtoint %"class.viz::SurfaceId"* %102 to i64
  store i64 %103, i64* %13, align 8
  br label %221

104:                                              ; preds = %95
  %105 = ptrtoint %"class.viz::SurfaceId"* %96 to i64
  %106 = load i64, i64* %10, align 8
  %107 = sub i64 %105, %106
  %108 = ashr exact i64 %107, 5
  %109 = add nsw i64 %108, 1
  %110 = icmp ugt i64 %109, 576460752303423487
  br i1 %110, label %111, label %113

111:                                              ; preds = %104
  %112 = bitcast %"class.std::__1::vector.35"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %112) #16
  unreachable

113:                                              ; preds = %104
  %114 = sub i64 %99, %106
  %115 = ashr exact i64 %114, 5
  %116 = icmp ult i64 %115, 288230376151711743
  br i1 %116, label %117, label %125

117:                                              ; preds = %113
  %118 = ashr exact i64 %114, 4
  %119 = icmp ult i64 %118, %109
  %120 = select i1 %119, i64 %109, i64 %118
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %130, label %122

122:                                              ; preds = %117
  %123 = icmp ugt i64 %120, 576460752303423487
  br i1 %123, label %124, label %125

124:                                              ; preds = %122
  tail call void @abort() #16
  unreachable

125:                                              ; preds = %122, %113
  %126 = phi i64 [ %120, %122 ], [ 576460752303423487, %113 ]
  %127 = shl i64 %126, 5
  %128 = tail call i8* @_Znwm(i64 %127) #15
  %129 = bitcast i8* %128 to %"class.viz::SurfaceId"*
  br label %130

130:                                              ; preds = %125, %117
  %131 = phi i64 [ %126, %125 ], [ 0, %117 ]
  %132 = phi %"class.viz::SurfaceId"* [ %129, %125 ], [ null, %117 ]
  %133 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %132, i64 %108
  %134 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %132, i64 %131
  %135 = ptrtoint %"class.viz::SurfaceId"* %134 to i64
  %136 = bitcast %"class.viz::SurfaceId"* %133 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %136, i8 0, i64 32, i1 false) #14
  %137 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 1
  %138 = ptrtoint %"class.viz::SurfaceId"* %137 to i64
  %139 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %34, align 8
  %140 = ptrtoint %"class.viz::SurfaceId"* %139 to i64
  %141 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %12, align 8
  %142 = icmp eq %"class.viz::SurfaceId"* %141, %139
  br i1 %142, label %214, label %143

143:                                              ; preds = %130
  %144 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1
  %145 = ptrtoint %"class.viz::SurfaceId"* %144 to i64
  %146 = sub i64 %145, %140
  %147 = and i64 %146, 32
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %168

149:                                              ; preds = %143
  %150 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1
  %151 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1, i32 0, i32 0
  %152 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %150, i64 0, i32 0, i32 0
  %153 = load i32, i32* %152, align 4
  store i32 %153, i32* %151, align 4
  %154 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1, i32 0, i32 1
  %155 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1, i32 0, i32 1
  %156 = load i32, i32* %155, align 4
  store i32 %156, i32* %154, align 4
  %157 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1, i32 1, i32 0
  %158 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1, i32 1, i32 0
  %159 = load i32, i32* %158, align 8
  store i32 %159, i32* %157, align 8
  %160 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1, i32 1, i32 1
  %161 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1, i32 1, i32 1
  %162 = load i32, i32* %161, align 4
  store i32 %162, i32* %160, align 4
  %163 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1, i32 1, i32 2
  %164 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %141, i64 -1, i32 1, i32 2
  %165 = bitcast %"class.base::UnguessableToken"* %163 to i8*
  %166 = bitcast %"class.base::UnguessableToken"* %164 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %165, i8* align 8 %166, i64 16, i1 false) #14
  %167 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %133, i64 -1
  br label %168

168:                                              ; preds = %149, %143
  %169 = phi %"class.viz::SurfaceId"* [ %167, %149 ], [ undef, %143 ]
  %170 = phi %"class.viz::SurfaceId"* [ %167, %149 ], [ %133, %143 ]
  %171 = phi %"class.viz::SurfaceId"* [ %150, %149 ], [ %141, %143 ]
  %172 = icmp ult i64 %146, 32
  br i1 %172, label %211, label %173

173:                                              ; preds = %168, %173
  %174 = phi %"class.viz::SurfaceId"* [ %209, %173 ], [ %170, %168 ]
  %175 = phi %"class.viz::SurfaceId"* [ %192, %173 ], [ %171, %168 ]
  %176 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -1, i32 0, i32 0
  %177 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -1, i32 0, i32 0
  %178 = load i32, i32* %177, align 4
  store i32 %178, i32* %176, align 4
  %179 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -1, i32 0, i32 1
  %180 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -1, i32 0, i32 1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -1, i32 1, i32 0
  %183 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -1, i32 1, i32 0
  %184 = load i32, i32* %183, align 8
  store i32 %184, i32* %182, align 8
  %185 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -1, i32 1, i32 1
  %186 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -1, i32 1, i32 1
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -1, i32 1, i32 2
  %189 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -1, i32 1, i32 2
  %190 = bitcast %"class.base::UnguessableToken"* %188 to i8*
  %191 = bitcast %"class.base::UnguessableToken"* %189 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %190, i8* align 8 %191, i64 16, i1 false) #14
  %192 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -2
  %193 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2, i32 0, i32 0
  %194 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %192, i64 0, i32 0, i32 0
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %193, align 4
  %196 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2, i32 0, i32 1
  %197 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -2, i32 0, i32 1
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %196, align 4
  %199 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2, i32 1, i32 0
  %200 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -2, i32 1, i32 0
  %201 = load i32, i32* %200, align 8
  store i32 %201, i32* %199, align 8
  %202 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2, i32 1, i32 1
  %203 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -2, i32 1, i32 1
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2, i32 1, i32 2
  %206 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %175, i64 -2, i32 1, i32 2
  %207 = bitcast %"class.base::UnguessableToken"* %205 to i8*
  %208 = bitcast %"class.base::UnguessableToken"* %206 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* align 8 %208, i64 16, i1 false) #14
  %209 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 -2
  %210 = icmp eq %"class.viz::SurfaceId"* %192, %139
  br i1 %210, label %211, label %173

211:                                              ; preds = %173, %168
  %212 = phi %"class.viz::SurfaceId"* [ %169, %168 ], [ %209, %173 ]
  %213 = load i64, i64* %10, align 8
  br label %214

214:                                              ; preds = %130, %211
  %215 = phi %"class.viz::SurfaceId"* [ %212, %211 ], [ %133, %130 ]
  %216 = phi i64 [ %213, %211 ], [ %140, %130 ]
  %217 = ptrtoint %"class.viz::SurfaceId"* %215 to i64
  store i64 %217, i64* %10, align 8
  store i64 %138, i64* %13, align 8
  store i64 %135, i64* %33, align 8
  %218 = icmp eq i64 %216, 0
  br i1 %218, label %221, label %219

219:                                              ; preds = %214
  %220 = inttoptr i64 %216 to i8*
  tail call void @_ZdlPv(i8* %220) #15
  br label %221

221:                                              ; preds = %100, %214, %219, %94, %75
  %222 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %31, align 8
  %223 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 0, i32 1
  %224 = tail call %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager38GetOrCreateAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %222, %"class.viz::SurfaceId"* dereferenceable(32) %223) #14
  %225 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %224 to i64
  %226 = icmp eq %"class.viz::SurfaceAllocationGroup"* %224, null
  br i1 %226, label %281, label %227

227:                                              ; preds = %221
  %228 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %16, align 8
  %229 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %17, align 16
  %230 = icmp eq %"class.viz::SurfaceAllocationGroup"** %228, %229
  %231 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %229 to i64
  br i1 %230, label %236, label %232

232:                                              ; preds = %227
  %233 = bitcast %"class.viz::SurfaceAllocationGroup"** %228 to i64*
  store i64 %225, i64* %233, align 8
  %234 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %228, i64 1
  %235 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %234 to i64
  store i64 %235, i64* %35, align 8
  br label %280

236:                                              ; preds = %227
  %237 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %228 to i64
  %238 = load i64, i64* %36, align 16
  %239 = sub i64 %237, %238
  %240 = ashr exact i64 %239, 3
  %241 = add nsw i64 %240, 1
  %242 = icmp ugt i64 %241, 2305843009213693951
  br i1 %242, label %243, label %245

243:                                              ; preds = %236
  %244 = bitcast %"class.std::__1::vector.297"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %244) #16
  unreachable

245:                                              ; preds = %236
  %246 = sub i64 %231, %238
  %247 = ashr exact i64 %246, 3
  %248 = icmp ult i64 %247, 1152921504606846975
  br i1 %248, label %249, label %257

249:                                              ; preds = %245
  %250 = ashr exact i64 %246, 2
  %251 = icmp ult i64 %250, %241
  %252 = select i1 %251, i64 %241, i64 %250
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %262, label %254

254:                                              ; preds = %249
  %255 = icmp ugt i64 %252, 2305843009213693951
  br i1 %255, label %256, label %257

256:                                              ; preds = %254
  tail call void @abort() #16
  unreachable

257:                                              ; preds = %254, %245
  %258 = phi i64 [ %252, %254 ], [ 2305843009213693951, %245 ]
  %259 = shl i64 %258, 3
  %260 = tail call i8* @_Znwm(i64 %259) #15
  %261 = bitcast i8* %260 to %"class.viz::SurfaceAllocationGroup"**
  br label %262

262:                                              ; preds = %257, %249
  %263 = phi i64 [ %258, %257 ], [ 0, %249 ]
  %264 = phi i8* [ %260, %257 ], [ null, %249 ]
  %265 = phi %"class.viz::SurfaceAllocationGroup"** [ %261, %257 ], [ null, %249 ]
  %266 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %265, i64 %240
  %267 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %265, i64 %263
  %268 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %267 to i64
  %269 = bitcast %"class.viz::SurfaceAllocationGroup"** %266 to i64*
  store i64 %225, i64* %269, align 8
  %270 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %266, i64 1
  %271 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %270 to i64
  %272 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %265 to i64
  %273 = icmp sgt i64 %239, 0
  br i1 %273, label %274, label %276

274:                                              ; preds = %262
  %275 = inttoptr i64 %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %264, i8* align 8 %275, i64 %239, i1 false) #14
  br label %276

276:                                              ; preds = %274, %262
  store i64 %272, i64* %36, align 16
  store i64 %271, i64* %35, align 8
  store i64 %268, i64* %37, align 16
  %277 = icmp eq i64 %238, 0
  br i1 %277, label %280, label %278

278:                                              ; preds = %276
  %279 = inttoptr i64 %238 to i8*
  tail call void @_ZdlPv(i8* %279) #15
  br label %280

280:                                              ; preds = %232, %276, %278
  tail call void @_ZN3viz22SurfaceAllocationGroup41UpdateLastActiveReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nonnull %224, %"class.viz::SurfaceId"* dereferenceable(32) %223) #14
  br label %281

281:                                              ; preds = %221, %280
  %282 = tail call zeroext i1 @_ZNK3viz12SurfaceRange23HasDifferentEmbedTokensEv(%"class.viz::SurfaceRange"* %65) #14
  br i1 %282, label %283, label %362

283:                                              ; preds = %281
  br i1 %68, label %284, label %293

284:                                              ; preds = %283
  %285 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = load i8, i8* %285, align 8, !range !6
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %288, label %289, !prof !7

288:                                              ; preds = %284
  tail call void @llvm.trap() #14
  unreachable

289:                                              ; preds = %284
  %290 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %67, i64 0, i32 0, i32 0
  %291 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %292 = tail call zeroext i1 @_ZNK3viz9SurfaceId19HasSameEmbedTokenAsERKS0_(%"class.viz::SurfaceId"* %290, %"class.viz::SurfaceId"* dereferenceable(32) %291) #14
  br i1 %292, label %293, label %362

293:                                              ; preds = %289, %283
  %294 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load i8, i8* %294, align 8, !range !6
  %296 = icmp eq i8 %295, 0
  br i1 %296, label %297, label %298, !prof !7

297:                                              ; preds = %293
  tail call void @llvm.trap() #14
  unreachable

298:                                              ; preds = %293
  %299 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %31, align 8
  %300 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %301 = tail call %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager38GetOrCreateAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"* %299, %"class.viz::SurfaceId"* dereferenceable(32) %300) #14
  %302 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %301 to i64
  %303 = icmp eq %"class.viz::SurfaceAllocationGroup"* %301, null
  br i1 %303, label %362, label %304

304:                                              ; preds = %298
  %305 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %16, align 8
  %306 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %17, align 16
  %307 = icmp eq %"class.viz::SurfaceAllocationGroup"** %305, %306
  %308 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %306 to i64
  br i1 %307, label %313, label %309

309:                                              ; preds = %304
  %310 = bitcast %"class.viz::SurfaceAllocationGroup"** %305 to i64*
  store i64 %302, i64* %310, align 8
  %311 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %305, i64 1
  %312 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %311 to i64
  store i64 %312, i64* %35, align 8
  br label %357

313:                                              ; preds = %304
  %314 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %305 to i64
  %315 = load i64, i64* %36, align 16
  %316 = sub i64 %314, %315
  %317 = ashr exact i64 %316, 3
  %318 = add nsw i64 %317, 1
  %319 = icmp ugt i64 %318, 2305843009213693951
  br i1 %319, label %320, label %322

320:                                              ; preds = %313
  %321 = bitcast %"class.std::__1::vector.297"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %321) #16
  unreachable

322:                                              ; preds = %313
  %323 = sub i64 %308, %315
  %324 = ashr exact i64 %323, 3
  %325 = icmp ult i64 %324, 1152921504606846975
  br i1 %325, label %326, label %334

326:                                              ; preds = %322
  %327 = ashr exact i64 %323, 2
  %328 = icmp ult i64 %327, %318
  %329 = select i1 %328, i64 %318, i64 %327
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %339, label %331

331:                                              ; preds = %326
  %332 = icmp ugt i64 %329, 2305843009213693951
  br i1 %332, label %333, label %334

333:                                              ; preds = %331
  tail call void @abort() #16
  unreachable

334:                                              ; preds = %331, %322
  %335 = phi i64 [ %329, %331 ], [ 2305843009213693951, %322 ]
  %336 = shl i64 %335, 3
  %337 = tail call i8* @_Znwm(i64 %336) #15
  %338 = bitcast i8* %337 to %"class.viz::SurfaceAllocationGroup"**
  br label %339

339:                                              ; preds = %334, %326
  %340 = phi i64 [ %335, %334 ], [ 0, %326 ]
  %341 = phi i8* [ %337, %334 ], [ null, %326 ]
  %342 = phi %"class.viz::SurfaceAllocationGroup"** [ %338, %334 ], [ null, %326 ]
  %343 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %342, i64 %317
  %344 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %342, i64 %340
  %345 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %344 to i64
  %346 = bitcast %"class.viz::SurfaceAllocationGroup"** %343 to i64*
  store i64 %302, i64* %346, align 8
  %347 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %343, i64 1
  %348 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %347 to i64
  %349 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %342 to i64
  %350 = icmp sgt i64 %316, 0
  br i1 %350, label %351, label %353

351:                                              ; preds = %339
  %352 = inttoptr i64 %315 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %341, i8* align 8 %352, i64 %316, i1 false) #14
  br label %353

353:                                              ; preds = %351, %339
  store i64 %349, i64* %36, align 16
  store i64 %348, i64* %35, align 8
  store i64 %345, i64* %37, align 16
  %354 = icmp eq i64 %315, 0
  br i1 %354, label %357, label %355

355:                                              ; preds = %353
  %356 = inttoptr i64 %315 to i8*
  tail call void @_ZdlPv(i8* %356) #15
  br label %357

357:                                              ; preds = %309, %353, %355
  %358 = load i8, i8* %294, align 8, !range !6
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %360, label %361, !prof !7

360:                                              ; preds = %357
  tail call void @llvm.trap() #14
  unreachable

361:                                              ; preds = %357
  tail call void @_ZN3viz22SurfaceAllocationGroup41UpdateLastActiveReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"* nonnull %301, %"class.viz::SurfaceId"* dereferenceable(32) %300) #14
  br label %362

362:                                              ; preds = %361, %298, %289, %281
  %363 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %65, i64 1
  %364 = icmp eq %"class.viz::SurfaceRange"* %363, %26
  br i1 %364, label %38, label %64
}

declare %"class.viz::Surface"* @_ZN3viz14SurfaceManager24GetLatestInFlightSurfaceERKNS_12SurfaceRangeE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #3

declare %"class.viz::SurfaceAllocationGroup"* @_ZN3viz14SurfaceManager38GetOrCreateAllocationGroupForSurfaceIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup41UpdateLastActiveReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface21TakeActiveLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* nocapture, %"class.std::__1::vector.139"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  tail call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %7, %"class.std::__1::vector.139"* %1)
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIRA23_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, [23 x i8]* dereferenceable(23), i8*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247241726, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = getelementptr inbounds [23 x i8], [23 x i8]* %8, i64 0, i64 0
  %24 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1
  %26 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %33 = select i1 %29, i8* %31, i8* %32
  %34 = bitcast %"union.base::trace_event::TraceValue"* %25 to i8**
  store i8* %33, i8** %34, align 8
  %35 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %36 = load i8, i8* %18, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %11, %67
  %39 = phi i64 [ %68, %67 ], [ 0, %11 ]
  %40 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 8
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %45 = bitcast %"union.base::trace_event::TraceValue"* %44 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %46 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %67, label %48

48:                                               ; preds = %43
  %49 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %46 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %46) #14
  %53 = load i8, i8* %40, align 1
  br label %54

54:                                               ; preds = %48, %38
  %55 = phi i8 [ %41, %38 ], [ %53, %48 ]
  %56 = icmp eq i8 %55, 9
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %59 = bitcast %"union.base::trace_event::TraceValue"* %58 to %"class.protozero::HeapBuffered"**
  %60 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %59, align 8
  %61 = icmp eq %"class.protozero::HeapBuffered"* %60, null
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %63) #14
  %64 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %64) #14
  %65 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %65) #14
  %66 = bitcast %"class.protozero::HeapBuffered"* %60 to i8*
  call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %62, %57, %54, %43
  %68 = add nuw nsw i64 %39, 1
  %69 = load i8, i8* %18, align 8
  %70 = zext i8 %69 to i64
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %38, label %72

72:                                               ; preds = %67, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %35
}

declare void @_ZN3viz22SurfaceAllocationGroup24OnFirstSurfaceActivationEPNS_7SurfaceE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*) local_unnamed_addr #3

declare void @_ZN3viz14SurfaceManager22FirstSurfaceActivationERKNS_11SurfaceInfoE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceInfo"* dereferenceable(48)) local_unnamed_addr #3

declare void @_ZN3viz14SurfaceManager16SurfaceActivatedEPNS_7SurfaceE(%"class.viz::SurfaceManager"*, %"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(248) %"class.viz::CompositorFrameMetadata"* @_ZNK3viz7Surface22GetActiveFrameMetadataEv(%"class.viz::Surface"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6, !prof !7

5:                                                ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0
  ret %"class.viz::CompositorFrameMetadata"* %7
}

declare void @_ZN3viz13FrameDeadline8MakeZeroEv(%"class.viz::FrameDeadline"* sret) local_unnamed_addr #3

declare dereferenceable(32) %"class.viz::SurfaceId"* @_ZN3viz22SurfaceAllocationGroup22GetLastActiveReferenceEv(%"class.viz::SurfaceAllocationGroup"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK3viz13FrameDeadline6IsZeroEv(%"class.viz::FrameDeadline"*) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup42UpdateLastPendingReferenceAndMaybeActivateERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare %"class.viz::Surface"* @_ZNK3viz14SurfaceManager15GetSurfaceForIdERKNS_9SurfaceIdE(%"class.viz::SurfaceManager"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

declare void @_ZN3viz22SurfaceAllocationGroup23RegisterBlockedEmbedderEPNS_7SurfaceERKNS_9SurfaceIdE(%"class.viz::SurfaceAllocationGroup"*, %"class.viz::Surface"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIRA26_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, [26 x i8]* dereferenceable(26), i8*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247241726, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = getelementptr inbounds [26 x i8], [26 x i8]* %8, i64 0, i64 0
  %24 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1
  %26 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %33 = select i1 %29, i8* %31, i8* %32
  %34 = bitcast %"union.base::trace_event::TraceValue"* %25 to i8**
  store i8* %33, i8** %34, align 8
  %35 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %36 = load i8, i8* %18, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %11, %67
  %39 = phi i64 [ %68, %67 ], [ 0, %11 ]
  %40 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 8
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %45 = bitcast %"union.base::trace_event::TraceValue"* %44 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %46 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %67, label %48

48:                                               ; preds = %43
  %49 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %46 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %46) #14
  %53 = load i8, i8* %40, align 1
  br label %54

54:                                               ; preds = %48, %38
  %55 = phi i8 [ %41, %38 ], [ %53, %48 ]
  %56 = icmp eq i8 %55, 9
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %59 = bitcast %"union.base::trace_event::TraceValue"* %58 to %"class.protozero::HeapBuffered"**
  %60 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %59, align 8
  %61 = icmp eq %"class.protozero::HeapBuffered"* %60, null
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %63) #14
  %64 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %64) #14
  %65 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %65) #14
  %66 = bitcast %"class.protozero::HeapBuffered"* %60 to i8*
  call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %62, %57, %54, %43
  %68 = add nuw nsw i64 %39, 1
  %69 = load i8, i8* %18, align 8
  %70 = zext i8 %69 to i64
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %38, label %72

72:                                               ; preds = %67, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface22TakeCopyOutputRequestsEPNSt3__18multimapIN4util6IdTypeINS_20CompositorRenderPassEmLm0ELm1EEENS1_10unique_ptrINS_17CopyOutputRequestENS1_14default_deleteIS8_EEEENS1_4lessIS6_EENS1_9allocatorINS1_4pairIKS6_SB_EEEEEE(%"class.viz::Surface"*, %"class.std::__1::multimap"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %113, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %7, align 8
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr.221"*, %"class.std::__1::unique_ptr.221"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr.221"* %8, %10
  br i1 %11, label %20, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %14 = bitcast %"class.std::__1::__tree_end_node"* %13 to %"class.std::__1::__tree_node"**
  %15 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %13, i64 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %1, i64 0, i32 0, i32 0
  %17 = bitcast %"class.std::__1::multimap"* %1 to i64*
  %18 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::multimap", %"class.std::__1::multimap"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %21

20:                                               ; preds = %49, %6
  tail call void @_ZN3viz7Surface11MarkAsDrawnEv(%"class.viz::Surface"* %0)
  br label %113

21:                                               ; preds = %12, %49
  %22 = phi %"class.std::__1::unique_ptr.221"* [ %8, %12 ], [ %52, %49 ]
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %23, align 8
  %25 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %24, i64 0, i32 0, i32 10, i32 0, i32 0
  %26 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %25, align 8
  %27 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %24, i64 0, i32 0, i32 10, i32 0, i32 1
  %28 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %27, align 8
  %29 = icmp eq %"class.std::__1::unique_ptr.251"* %26, %28
  br i1 %29, label %30, label %54

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %24, i64 0, i32 0, i32 10, i32 0, i32 1
  br label %49

32:                                               ; preds = %105
  %33 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %112, i64 0, i32 0, i32 10, i32 0, i32 0
  %34 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %33, align 8
  %35 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %112, i64 0, i32 0, i32 10, i32 0, i32 1
  %36 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %35, align 8
  %37 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %112, i64 0, i32 0, i32 10, i32 0, i32 1
  %38 = icmp eq %"class.std::__1::unique_ptr.251"* %36, %34
  br i1 %38, label %49, label %39

39:                                               ; preds = %32, %47
  %40 = phi %"class.std::__1::unique_ptr.251"* [ %41, %47 ], [ %36, %32 ]
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %40, i64 -1
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %41, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %42, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %42, align 8
  %44 = icmp eq %"class.viz::CopyOutputRequest"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %43) #14
  %46 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %43, i64 0, i32 0
  tail call void @_ZdlPv(i8* %46) #15
  br label %47

47:                                               ; preds = %45, %39
  %48 = icmp eq %"class.std::__1::unique_ptr.251"* %41, %34
  br i1 %48, label %49, label %39

49:                                               ; preds = %47, %30, %32
  %50 = phi %"class.std::__1::unique_ptr.251"** [ %31, %30 ], [ %37, %32 ], [ %37, %47 ]
  %51 = phi %"class.std::__1::unique_ptr.251"* [ %26, %30 ], [ %34, %32 ], [ %34, %47 ]
  store %"class.std::__1::unique_ptr.251"* %51, %"class.std::__1::unique_ptr.251"** %50, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.221"* %22, i64 1
  %53 = icmp eq %"class.std::__1::unique_ptr.221"* %52, %10
  br i1 %53, label %20, label %21

54:                                               ; preds = %21, %105
  %55 = phi %"class.viz::CompositorRenderPass"* [ %112, %105 ], [ %24, %21 ]
  %56 = phi %"class.std::__1::unique_ptr.251"* [ %110, %105 ], [ %26, %21 ]
  %57 = getelementptr inbounds %"class.viz::CompositorRenderPass", %"class.viz::CompositorRenderPass"* %55, i64 0, i32 1, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %56, i64 0, i32 0, i32 0, i32 0
  %60 = bitcast %"class.std::__1::unique_ptr.251"* %56 to i64*
  %61 = load i64, i64* %60, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %59, align 8
  %62 = tail call i8* @_Znwm(i64 48) #15, !noalias !11
  %63 = getelementptr inbounds i8, i8* %62, i64 32
  %64 = bitcast i8* %63 to i64*
  store i64 %58, i64* %64, align 8, !noalias !11
  %65 = getelementptr inbounds i8, i8* %62, i64 40
  %66 = bitcast i8* %65 to i64*
  store i64 %61, i64* %66, align 8, !noalias !11
  %67 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %14, align 8
  %68 = icmp eq %"class.std::__1::__tree_node"* %67, null
  br i1 %68, label %91, label %69

69:                                               ; preds = %54, %88
  %70 = phi %"class.std::__1::__tree_node"* [ %90, %88 ], [ %67, %54 ]
  %71 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = icmp ult i64 %58, %72
  br i1 %73, label %74, label %81

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0, i32 0
  %76 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %75, align 8
  %77 = icmp eq %"class.std::__1::__tree_node_base"* %76, null
  br i1 %77, label %78, label %88

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0
  br label %91

81:                                               ; preds = %69
  %82 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 1
  %83 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %82, align 8
  %84 = icmp eq %"class.std::__1::__tree_node_base"* %83, null
  br i1 %84, label %85, label %88

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 1
  %87 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0
  br label %91

88:                                               ; preds = %81, %74
  %89 = phi %"class.std::__1::__tree_node_base"* [ %76, %74 ], [ %83, %81 ]
  %90 = bitcast %"class.std::__1::__tree_node_base"* %89 to %"class.std::__1::__tree_node"*
  br label %69

91:                                               ; preds = %54, %85, %78
  %92 = phi %"class.std::__1::__tree_end_node"* [ %80, %78 ], [ %87, %85 ], [ %13, %54 ]
  %93 = phi %"class.std::__1::__tree_node_base"** [ %79, %78 ], [ %86, %85 ], [ %15, %54 ]
  %94 = bitcast i8* %62 to %"class.std::__1::__tree_node_base"*
  %95 = getelementptr inbounds i8, i8* %62, i64 16
  %96 = bitcast i8* %95 to %"class.std::__1::__tree_end_node"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 16, i1 false) #14
  store %"class.std::__1::__tree_end_node"* %92, %"class.std::__1::__tree_end_node"** %96, align 8
  %97 = bitcast %"class.std::__1::__tree_node_base"** %93 to i8**
  store i8* %62, i8** %97, align 8
  %98 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %16, align 8
  %99 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %98, i64 0, i32 0
  %100 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %99, align 8
  %101 = icmp eq %"class.std::__1::__tree_node_base"* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %91
  %103 = ptrtoint %"class.std::__1::__tree_node_base"* %100 to i64
  store i64 %103, i64* %17, align 8
  %104 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %93, align 8
  br label %105

105:                                              ; preds = %102, %91
  %106 = phi %"class.std::__1::__tree_node_base"* [ %94, %91 ], [ %104, %102 ]
  %107 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %18, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %107, %"class.std::__1::__tree_node_base"* %106) #14
  %108 = load i64, i64* %19, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %19, align 8
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %56, i64 1
  %111 = icmp eq %"class.std::__1::unique_ptr.251"* %110, %28
  %112 = load %"class.viz::CompositorRenderPass"*, %"class.viz::CompositorRenderPass"** %23, align 8
  br i1 %111, label %32, label %54

113:                                              ; preds = %2, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface11MarkAsDrawnEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %31, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 2
  store i8 1, i8* %7, align 8
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %9 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %8) #14
  br i1 %9, label %10, label %31

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %12 = bitcast i64* %11 to %"class.viz::SurfaceClient"**
  %13 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %12, align 8
  %14 = icmp eq %"class.viz::SurfaceClient"* %13, null
  br i1 %14, label %31, label %15

15:                                               ; preds = %10
  %16 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %8) #14
  br i1 %16, label %20, label %17

17:                                               ; preds = %15
  %18 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #14
  br label %20

20:                                               ; preds = %17, %15
  %21 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %8) #14
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %12, align 8
  %24 = bitcast %"class.viz::SurfaceClient"* %23 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)***
  br label %25

25:                                               ; preds = %20, %22
  %26 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** [ %24, %22 ], [ null, %20 ]
  %27 = phi %"class.viz::SurfaceClient"* [ %23, %22 ], [ null, %20 ]
  %28 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** %26, align 8
  %29 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %28, i64 4
  %30 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %29, align 8
  call void %30(%"class.viz::SurfaceClient"* %27, %"class.viz::Surface"* %0) #14
  br label %31

31:                                               ; preds = %10, %1, %6, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface32TakeCopyOutputRequestsFromClientEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.std::__1::vector.393", align 8
  %4 = alloca %"struct.viz::PendingCopyOutputRequest", align 8
  %5 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #14
  br i1 %6, label %7, label %58

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i64* %8 to %"class.viz::SurfaceClient"**
  %10 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %9, align 8
  %11 = icmp eq %"class.viz::SurfaceClient"* %10, null
  br i1 %11, label %58, label %12

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::vector.393"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #14
  %14 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #14
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #14
  br label %18

18:                                               ; preds = %15, %12
  %19 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #14
  br i1 %19, label %20, label %23

20:                                               ; preds = %18
  %21 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %9, align 8
  %22 = bitcast %"class.viz::SurfaceClient"* %21 to void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)***
  br label %23

23:                                               ; preds = %18, %20
  %24 = phi void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)*** [ %22, %20 ], [ null, %18 ]
  %25 = phi %"class.viz::SurfaceClient"* [ %21, %20 ], [ null, %18 ]
  %26 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)**, void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)*** %24, align 8
  %28 = getelementptr inbounds void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)*, void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)** %27, i64 9
  %29 = load void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)*, void (%"class.std::__1::vector.393"*, %"class.viz::SurfaceClient"*, %"class.viz::LocalSurfaceId"*)** %28, align 8
  call void %29(%"class.std::__1::vector.393"* nonnull sret %3, %"class.viz::SurfaceClient"* %25, %"class.viz::LocalSurfaceId"* dereferenceable(24) %26) #14
  %30 = getelementptr inbounds %"class.std::__1::vector.393", %"class.std::__1::vector.393"* %3, i64 0, i32 0, i32 0
  %31 = load %"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::vector.393", %"class.std::__1::vector.393"* %3, i64 0, i32 0, i32 1
  %33 = load %"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"** %32, align 8
  %34 = icmp eq %"struct.viz::PendingCopyOutputRequest"* %31, %33
  br i1 %34, label %37, label %54

35:                                               ; preds = %54
  %36 = load %"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"** %30, align 8
  br label %37

37:                                               ; preds = %35, %23
  %38 = phi %"struct.viz::PendingCopyOutputRequest"* [ %36, %35 ], [ %31, %23 ]
  %39 = icmp eq %"struct.viz::PendingCopyOutputRequest"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %37
  %41 = bitcast %"struct.viz::PendingCopyOutputRequest"* %38 to i8*
  %42 = load %"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"** %32, align 8
  %43 = icmp eq %"struct.viz::PendingCopyOutputRequest"* %42, %38
  br i1 %43, label %51, label %44

44:                                               ; preds = %40, %44
  %45 = phi %"struct.viz::PendingCopyOutputRequest"* [ %46, %44 ], [ %42, %40 ]
  %46 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %45, i64 -1
  call void @_ZN3viz24PendingCopyOutputRequestD1Ev(%"struct.viz::PendingCopyOutputRequest"* %46) #14
  %47 = icmp eq %"struct.viz::PendingCopyOutputRequest"* %46, %38
  br i1 %47, label %48, label %44

48:                                               ; preds = %44
  %49 = bitcast %"class.std::__1::vector.393"* %3 to i8**
  %50 = load i8*, i8** %49, align 8
  br label %51

51:                                               ; preds = %48, %40
  %52 = phi i8* [ %50, %48 ], [ %41, %40 ]
  store %"struct.viz::PendingCopyOutputRequest"* %38, %"struct.viz::PendingCopyOutputRequest"** %32, align 8
  call void @_ZdlPv(i8* %52) #15
  br label %53

53:                                               ; preds = %37, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #14
  br label %58

54:                                               ; preds = %23, %54
  %55 = phi %"struct.viz::PendingCopyOutputRequest"* [ %56, %54 ], [ %31, %23 ]
  call void @_ZN3viz24PendingCopyOutputRequestC1EOS0_(%"struct.viz::PendingCopyOutputRequest"* nonnull %4, %"struct.viz::PendingCopyOutputRequest"* dereferenceable(40) %55) #14
  call void @_ZN3viz7Surface19RequestCopyOfOutputENS_24PendingCopyOutputRequestE(%"class.viz::Surface"* %0, %"struct.viz::PendingCopyOutputRequest"* nonnull %4)
  call void @_ZN3viz24PendingCopyOutputRequestD1Ev(%"struct.viz::PendingCopyOutputRequest"* nonnull %4) #14
  %56 = getelementptr inbounds %"struct.viz::PendingCopyOutputRequest", %"struct.viz::PendingCopyOutputRequest"* %55, i64 1
  %57 = icmp eq %"struct.viz::PendingCopyOutputRequest"* %56, %33
  br i1 %57, label %35, label %54

58:                                               ; preds = %7, %1, %53
  ret void
}

declare void @_ZN3viz24PendingCopyOutputRequestC1EOS0_(%"struct.viz::PendingCopyOutputRequest"*, %"struct.viz::PendingCopyOutputRequest"* dereferenceable(40)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3viz24PendingCopyOutputRequestD1Ev(%"struct.viz::PendingCopyOutputRequest"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3viz7Surface21HasCopyOutputRequestsEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = tail call zeroext i1 @_ZNK3viz15CompositorFrame21HasCopyOutputRequestsEv(%"class.viz::CompositorFrame"* %6) #14
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i1 [ false, %1 ], [ %7, %5 ]
  ret i1 %9
}

declare zeroext i1 @_ZNK3viz15CompositorFrame21HasCopyOutputRequestsEv(%"class.viz::CompositorFrame"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(296) %"class.viz::CompositorFrame"* @_ZNK3viz7Surface14GetActiveFrameEv(%"class.viz::Surface"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6, !prof !7

5:                                                ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  ret %"class.viz::CompositorFrame"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(296) %"class.viz::CompositorFrame"* @_ZNK3viz7Surface28GetActiveOrInterpolatedFrameEv(%"class.viz::Surface"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %14

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !6
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %12, !prof !7

11:                                               ; preds = %7
  tail call void @llvm.trap() #14
  unreachable

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi %"class.viz::CompositorFrame"* [ %6, %5 ], [ %13, %12 ]
  ret %"class.viz::CompositorFrame"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface22ResetInterpolatedFrameEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %6) #14
  store i8 0, i8* %2, align 8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 19
  store i8 1, i8* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface20SetInterpolatedFrameENS_15CompositorFrameE(%"class.viz::Surface"*, %"class.viz::CompositorFrame"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3viz15CompositorFrameD1Ev(%"class.viz::CompositorFrame"* %7) #14
  store i8 0, i8* %3, align 8
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3viz15CompositorFrameC1EOS0_(%"class.viz::CompositorFrame"* %9, %"class.viz::CompositorFrame"* dereferenceable(296) %1) #14
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3viz7Surface25HasSurfaceAnimationDamageEv(%"class.viz::Surface"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 19
  %7 = load i8, i8* %6, align 8, !range !6
  %8 = icmp ne i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz7Surface12DidAggregateEv(%"class.viz::Surface"* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 19
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(296) %"class.viz::CompositorFrame"* @_ZN3viz7Surface15GetPendingFrameEv(%"class.viz::Surface"* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6, !prof !7

5:                                                ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  ret %"class.viz::CompositorFrame"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* nocapture, %"class.std::__1::vector.139"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 1
  %6 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %5, align 8
  %7 = icmp eq %"class.ui::LatencyInfo"* %4, %6
  %8 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0, i32 8
  br i1 %7, label %9, label %25

9:                                                ; preds = %2
  %10 = ptrtoint %"class.ui::LatencyInfo"* %4 to i64
  %11 = bitcast %"class.std::__1::vector.139"* %8 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.139"* %1 to i64*
  store i64 %10, i64* %11, align 8
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0, i32 8, i32 0, i32 1
  %15 = bitcast %"class.ui::LatencyInfo"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.ui::LatencyInfo"** %5 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %15, align 8
  store i64 %16, i64* %17, align 8
  %19 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"class.ui::LatencyInfo"** %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.ui::LatencyInfo"** %20 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %21, align 8
  store i64 %22, i64* %23, align 8
  br label %77

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %8, i64 0, i32 0, i32 0
  %27 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %26, align 8
  %28 = getelementptr inbounds %"class.viz::CompositorFrame", %"class.viz::CompositorFrame"* %0, i64 0, i32 0, i32 8, i32 0, i32 1
  %29 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %28, align 8
  %30 = icmp eq %"class.ui::LatencyInfo"* %27, %29
  br i1 %30, label %56, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %33 = bitcast %"class.ui::LatencyInfo"** %5 to i64*
  br label %34

34:                                               ; preds = %46, %31
  %35 = phi %"class.ui::LatencyInfo"* [ %6, %31 ], [ %47, %46 ]
  %36 = phi %"class.ui::LatencyInfo"* [ %27, %31 ], [ %44, %46 ]
  %37 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %32, align 8
  %38 = icmp eq %"class.ui::LatencyInfo"* %35, %37
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  tail call void @_ZN2ui11LatencyInfoC1ERKS0_(%"class.ui::LatencyInfo"* %35, %"class.ui::LatencyInfo"* dereferenceable(64) %36) #14
  %40 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %35, i64 1
  %41 = ptrtoint %"class.ui::LatencyInfo"* %40 to i64
  store i64 %41, i64* %33, align 8
  br label %43

42:                                               ; preds = %34
  tail call void @_ZNSt3__16vectorIN2ui11LatencyInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.139"* %1, %"class.ui::LatencyInfo"* dereferenceable(64) %36) #14
  br label %43

43:                                               ; preds = %42, %39
  %44 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %36, i64 1
  %45 = icmp eq %"class.ui::LatencyInfo"* %44, %29
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %5, align 8
  br label %34

48:                                               ; preds = %43
  %49 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %26, align 8
  %50 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %28, align 8
  %51 = icmp eq %"class.ui::LatencyInfo"* %50, %49
  br i1 %51, label %56, label %52

52:                                               ; preds = %48, %52
  %53 = phi %"class.ui::LatencyInfo"* [ %54, %52 ], [ %50, %48 ]
  %54 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %53, i64 -1
  tail call void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"* %54) #14
  %55 = icmp eq %"class.ui::LatencyInfo"* %54, %49
  br i1 %55, label %56, label %52

56:                                               ; preds = %52, %25, %48
  %57 = phi %"class.ui::LatencyInfo"* [ %49, %48 ], [ %27, %25 ], [ %49, %52 ]
  store %"class.ui::LatencyInfo"* %57, %"class.ui::LatencyInfo"** %28, align 8
  %58 = tail call zeroext i1 @_ZN2ui11LatencyInfo6VerifyERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEPKc(%"class.std::__1::vector.139"* dereferenceable(24) %1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.24, i64 0, i64 0)) #14
  br i1 %58, label %77, label %59

59:                                               ; preds = %56
  %60 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  %61 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %5, align 8
  %62 = icmp eq %"class.ui::LatencyInfo"* %60, %61
  br i1 %62, label %71, label %73

63:                                               ; preds = %73
  %64 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  %65 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %5, align 8
  %66 = icmp eq %"class.ui::LatencyInfo"* %65, %64
  br i1 %66, label %71, label %67

67:                                               ; preds = %63, %67
  %68 = phi %"class.ui::LatencyInfo"* [ %69, %67 ], [ %65, %63 ]
  %69 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %68, i64 -1
  tail call void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"* %69) #14
  %70 = icmp eq %"class.ui::LatencyInfo"* %69, %64
  br i1 %70, label %71, label %67

71:                                               ; preds = %67, %59, %63
  %72 = phi %"class.ui::LatencyInfo"* [ %64, %63 ], [ %60, %59 ], [ %64, %67 ]
  store %"class.ui::LatencyInfo"* %72, %"class.ui::LatencyInfo"** %5, align 8
  br label %77

73:                                               ; preds = %59, %73
  %74 = phi %"class.ui::LatencyInfo"* [ %75, %73 ], [ %60, %59 ]
  tail call void @_ZN2ui11LatencyInfo9TerminateEv(%"class.ui::LatencyInfo"* %74) #14
  %75 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %74, i64 1
  %76 = icmp eq %"class.ui::LatencyInfo"* %75, %61
  br i1 %76, label %63, label %73

77:                                               ; preds = %9, %71, %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface31TakeActiveAndPendingLatencyInfoEPNSt3__16vectorIN2ui11LatencyInfoENS1_9allocatorIS4_EEEE(%"class.viz::Surface"* nocapture, %"class.std::__1::vector.139"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  tail call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %7, %"class.std::__1::vector.139"* %1) #14
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !6
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  tail call void @_ZN3viz7Surface24TakeLatencyInfoFromFrameEPNS_15CompositorFrameEPNSt3__16vectorIN2ui11LatencyInfoENS3_9allocatorIS6_EEEE(%"class.viz::CompositorFrame"* %13, %"class.std::__1::vector.139"* %1) #14
  br label %14

14:                                               ; preds = %8, %12
  %15 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 16
  store i8 1, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.viz::Surface::PresentationHelper"* @_ZN3viz7Surface44TakePresentationHelperForPresentNotificationEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::WeakPtr", align 8
  %3 = alloca %"class.base::WeakPtr", align 8
  %4 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !6
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %38, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 4
  %9 = load i8, i8* %8, align 2, !range !6
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %38

11:                                               ; preds = %7
  store i8 1, i8* %8, align 2
  %12 = bitcast %"class.base::WeakPtr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #14
  %13 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"* nonnull %13, %"class.base::internal::WeakReference"* dereferenceable(8) %14) #14
  %15 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %17 = load i64, i64* %16, align 8, !noalias !14
  store i64 %17, i64* %15, align 8, !alias.scope !14
  %18 = load i8, i8* %4, align 8, !range !6
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %21, !prof !7

20:                                               ; preds = %11
  call void @llvm.trap() #14
  unreachable

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 13
  %23 = bitcast %"class.base::WeakPtr"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23)
  %24 = call i8* @_Znwm(i64 24) #15
  %25 = bitcast i8* %24 to %"class.viz::Surface::PresentationHelper"*
  %26 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %2, i64 0, i32 0, i32 0
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* nonnull %26, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %13) #14
  %27 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %2, i64 0, i32 0, i32 1
  %28 = load i64, i64* %15, align 8
  store i64 %28, i64* %27, align 8
  %29 = load i32, i32* %22, align 4
  %30 = bitcast i8* %24 to %"class.base::internal::WeakReference"*
  call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* nonnull %30, %"class.base::internal::WeakReference"* nonnull dereferenceable(8) %26) #14
  %31 = getelementptr inbounds i8, i8* %24, i64 8
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %27, align 8
  store i64 %33, i64* %32, align 8
  %34 = getelementptr inbounds i8, i8* %24, i64 16
  %35 = bitcast i8* %34 to i32*
  store i32 %29, i32* %35, align 8
  %36 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %2, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %36) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23)
  %37 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %3, i64 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* nonnull %37) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #14
  br label %38

38:                                               ; preds = %1, %7, %21
  %39 = phi %"class.viz::Surface::PresentationHelper"* [ %25, %21 ], [ null, %7 ], [ null, %1 ]
  ret %"class.viz::Surface::PresentationHelper"* %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface15SendAckToClientEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %34, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 3
  %8 = load i8, i8* %7, align 1, !range !6
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %6
  store i8 1, i8* %7, align 1
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %12 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %11) #14
  br i1 %12, label %13, label %34

13:                                               ; preds = %10
  %14 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %15 = bitcast i64* %14 to %"class.viz::SurfaceClient"**
  %16 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %15, align 8
  %17 = icmp eq %"class.viz::SurfaceClient"* %16, null
  br i1 %17, label %34, label %18

18:                                               ; preds = %13
  %19 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %11) #14
  br i1 %19, label %23, label %20

20:                                               ; preds = %18
  %21 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  br label %23

23:                                               ; preds = %20, %18
  %24 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %11) #14
  br i1 %24, label %25, label %28

25:                                               ; preds = %23
  %26 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %15, align 8
  %27 = bitcast %"class.viz::SurfaceClient"* %26 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)***
  br label %28

28:                                               ; preds = %23, %25
  %29 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** [ %27, %25 ], [ null, %23 ]
  %30 = phi %"class.viz::SurfaceClient"* [ %26, %25 ], [ null, %23 ]
  %31 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*** %29, align 8
  %32 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %31, i64 11
  %33 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*)** %32, align 8
  call void %33(%"class.viz::SurfaceClient"* %30, %"class.viz::Surface"* %0) #14
  br label %34

34:                                               ; preds = %13, %1, %10, %6, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface22NotifyAggregatedDamageERKN3gfx4RectEN4base9TimeTicksE(%"class.viz::Surface"*, %"class.gfx::Rect"* dereferenceable(16), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !6
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %38, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %10 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %9) #14
  br i1 %10, label %11, label %38

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %13 = bitcast i64* %12 to %"class.viz::SurfaceClient"**
  %14 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %13, align 8
  %15 = icmp eq %"class.viz::SurfaceClient"* %14, null
  br i1 %15, label %38, label %16

16:                                               ; preds = %11
  %17 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %9) #14
  br i1 %17, label %21, label %18

18:                                               ; preds = %16
  %19 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  br label %21

21:                                               ; preds = %18, %16
  %22 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %9) #14
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %13, align 8
  %25 = bitcast %"class.viz::SurfaceClient"* %24 to void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)***
  br label %26

26:                                               ; preds = %21, %23
  %27 = phi void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)*** [ %25, %23 ], [ null, %21 ]
  %28 = phi %"class.viz::SurfaceClient"* [ %24, %23 ], [ null, %21 ]
  %29 = load i8, i8* %5, align 8, !range !6
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %32, !prof !7

31:                                               ; preds = %26
  call void @llvm.trap() #14
  unreachable

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1
  %34 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %35 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)**, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)*** %27, align 8
  %36 = getelementptr inbounds void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)** %35, i64 13
  %37 = load void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)*, void (%"class.viz::SurfaceClient"*, %"class.viz::Surface"*, %"class.viz::LocalSurfaceId"*, %"class.viz::CompositorFrame"*, %"class.gfx::Rect"*, i64)** %36, align 8
  call void %37(%"class.viz::SurfaceClient"* %28, %"class.viz::Surface"* %0, %"class.viz::LocalSurfaceId"* dereferenceable(24) %33, %"class.viz::CompositorFrame"* dereferenceable(296) %34, %"class.gfx::Rect"* dereferenceable(16) %1, i64 %2) #14
  br label %38

38:                                               ; preds = %11, %3, %8, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3viz7Surface26IsVideoCaptureOnFromClientEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #14
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 3, i32 0, i32 1
  %7 = bitcast i64* %6 to %"class.viz::SurfaceClient"**
  %8 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %7, align 8
  %9 = icmp eq %"class.viz::SurfaceClient"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %5
  %11 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #14
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #14
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #14
  br label %15

15:                                               ; preds = %12, %10
  %16 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #14
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = load %"class.viz::SurfaceClient"*, %"class.viz::SurfaceClient"** %7, align 8
  %19 = bitcast %"class.viz::SurfaceClient"* %18 to i1 (%"class.viz::SurfaceClient"*)***
  br label %20

20:                                               ; preds = %15, %17
  %21 = phi i1 (%"class.viz::SurfaceClient"*)*** [ %19, %17 ], [ null, %15 ]
  %22 = phi %"class.viz::SurfaceClient"* [ %18, %17 ], [ null, %15 ]
  %23 = load i1 (%"class.viz::SurfaceClient"*)**, i1 (%"class.viz::SurfaceClient"*)*** %21, align 8
  %24 = getelementptr inbounds i1 (%"class.viz::SurfaceClient"*)*, i1 (%"class.viz::SurfaceClient"*)** %23, i64 14
  %25 = load i1 (%"class.viz::SurfaceClient"*)*, i1 (%"class.viz::SurfaceClient"*)** %24, align 8
  %26 = call zeroext i1 %25(%"class.viz::SurfaceClient"* %22) #14
  br label %27

27:                                               ; preds = %5, %1, %20
  %28 = phi i1 [ %26, %20 ], [ false, %5 ], [ false, %1 ]
  ret i1 %28
}

declare void @_ZN3viz20TransferableResource15ReturnResourcesERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"class.std::__1::vector.407"* sret, %"class.std::__1::vector.198"* dereferenceable(24)) local_unnamed_addr #3

declare void @_ZN2ui11LatencyInfo9TerminateEv(%"class.ui::LatencyInfo"*) local_unnamed_addr #3

declare zeroext i1 @_ZN2ui11LatencyInfo6VerifyERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEPKc(%"class.std::__1::vector.139"* dereferenceable(24), i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface13OnWillBeDrawnEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 9
  %4 = load i8, i8* %3, align 1, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  store i8 1, i8* %3, align 1
  %7 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %8 = and i8 %7, 25
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %28, label %10, !prof !5

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = tail call i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"* %12) #14
  %14 = shl i64 %13, 1
  %15 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #14
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.viz::SurfaceId"* %11) #14
  %16 = call i64 @_ZN20trace_event_internal13AddTraceEventIRA22_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0), i8* null, i64 0, i32 4224, i64 %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), [22 x i8]* nonnull dereferenceable(22) @.str.25, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2)
  %17 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %10, %21
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #14
  %25 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0), i64 %16) #14
  br label %28

28:                                               ; preds = %6, %27, %24, %1
  %29 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 2
  %30 = load %"class.viz::SurfaceManager"*, %"class.viz::SurfaceManager"** %29, align 8
  call void @_ZN3viz14SurfaceManager18SurfaceWillBeDrawnEPNS_7SurfaceE(%"class.viz::SurfaceManager"* %30, %"class.viz::Surface"* %0) #14
  call void @_ZN3viz7Surface11MarkAsDrawnEv(%"class.viz::Surface"* %0)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIRA22_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, [22 x i8]* dereferenceable(22), i8*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #14
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247241726, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = getelementptr inbounds [22 x i8], [22 x i8]* %8, i64 0, i64 0
  %24 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1
  %26 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %33 = select i1 %29, i8* %31, i8* %32
  %34 = bitcast %"union.base::trace_event::TraceValue"* %25 to i8**
  store i8* %33, i8** %34, align 8
  %35 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #14
  %36 = load i8, i8* %18, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %11, %67
  %39 = phi i64 [ %68, %67 ], [ 0, %11 ]
  %40 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 8
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %45 = bitcast %"union.base::trace_event::TraceValue"* %44 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %46 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %67, label %48

48:                                               ; preds = %43
  %49 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %46 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %46) #14
  %53 = load i8, i8* %40, align 1
  br label %54

54:                                               ; preds = %48, %38
  %55 = phi i8 [ %41, %38 ], [ %53, %48 ]
  %56 = icmp eq i8 %55, 9
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %59 = bitcast %"union.base::trace_event::TraceValue"* %58 to %"class.protozero::HeapBuffered"**
  %60 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %59, align 8
  %61 = icmp eq %"class.protozero::HeapBuffered"* %60, null
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %63) #14
  %64 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %64) #14
  %65 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %65) #14
  %66 = bitcast %"class.protozero::HeapBuffered"* %60 to i8*
  call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %62, %57, %54, %43
  %68 = add nuw nsw i64 %39, 1
  %69 = load i8, i8* %18, align 8
  %70 = zext i8 %69 to i64
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %38, label %72

72:                                               ; preds = %67, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  ret i64 %35
}

declare void @_ZN3viz14SurfaceManager18SurfaceWillBeDrawnEPNS_7SurfaceE(%"class.viz::SurfaceManager"*, %"class.viz::Surface"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz7Surface40ActivatePendingFrameForInheritedDeadlineEv(%"class.viz::Surface"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %30, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13
  %8 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %8, align 8
  %10 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 13, i32 0, i32 0, i32 1
  %11 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  %12 = icmp eq %"class.viz::SurfaceId"* %9, %11
  %13 = ptrtoint %"class.viz::SurfaceId"* %9 to i64
  br i1 %12, label %27, label %14

14:                                               ; preds = %6
  %15 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), align 16
  %16 = and i8 %15, 25
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %27, label %18, !prof !5

18:                                               ; preds = %14
  %19 = ptrtoint %"class.viz::Surface"* %0 to i64
  %20 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %21 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #14
  %22 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %23 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %23, i64* %22, align 8
  %24 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 101, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 136, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* null, i64 %19, i64 0, i32 %20, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 2048) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #14
  %25 = bitcast %"class.base::internal::flat_tree.34"* %7 to i64*
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %18, %14, %6
  %28 = phi i64 [ %26, %18 ], [ %13, %14 ], [ %13, %6 ]
  %29 = bitcast %"class.viz::SurfaceId"** %10 to i64*
  store i64 %28, i64* %29, align 8
  call void @_ZN3viz7Surface20ActivatePendingFrameEv(%"class.viz::Surface"* %0) #14
  br label %30

30:                                               ; preds = %1, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gfx::DelegatedInkMetadata"* @_ZN3viz7Surface24TakeDelegatedInkMetadataEv(%"class.viz::Surface"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !6
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %6, !prof !7

5:                                                ; preds = %1
  tail call void @llvm.trap() #14
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 19, i32 0, i32 0, i32 0
  %8 = load %"class.gfx::DelegatedInkMetadata"*, %"class.gfx::DelegatedInkMetadata"** %7, align 8
  store %"class.gfx::DelegatedInkMetadata"* null, %"class.gfx::DelegatedInkMetadata"** %7, align 8
  ret %"class.gfx::DelegatedInkMetadata"* %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.viz::SurfaceSavedFrameStorage"* @_ZN3viz7Surface27GetSurfaceSavedFrameStorageEv(%"class.viz::Surface"* readnone) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.viz::Surface", %"class.viz::Surface"* %0, i64 0, i32 18
  ret %"class.viz::SurfaceSavedFrameStorage"* %2
}

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #2

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #3

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #3

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #3

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3viz17CopyOutputRequestENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector.249"*, %"class.std::__1::unique_ptr.251"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.249", %"class.std::__1::vector.249"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.251"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.249"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.249"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.249", %"class.std::__1::vector.249"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.251"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #16
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.251"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.251"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.251"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.251"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.251"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.251"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.249", %"class.std::__1::vector.249"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.251"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.251"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.viz::CopyOutputRequest"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.251"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.251"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.251"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.251"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !17

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.251"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.251"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.251"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.251"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.251"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.251"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.251"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.251"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.251"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.251"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.251"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.251"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.251"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.251"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.251"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.251"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.251"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.251"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.251"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.251"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.251"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.251"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.251"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.251"*, %"class.std::__1::unique_ptr.251"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.251"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.251"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.251"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.251"*
  %138 = icmp eq %"class.std::__1::unique_ptr.251"* %133, %137
  br i1 %138, label %149, label %139

139:                                              ; preds = %132, %147
  %140 = phi %"class.std::__1::unique_ptr.251"* [ %141, %147 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.251", %"class.std::__1::unique_ptr.251"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.viz::CopyOutputRequest"*, %"class.viz::CopyOutputRequest"** %142, align 8
  store %"class.viz::CopyOutputRequest"* null, %"class.viz::CopyOutputRequest"** %142, align 8
  %144 = icmp eq %"class.viz::CopyOutputRequest"* %143, null
  br i1 %144, label %147, label %145

145:                                              ; preds = %139
  tail call void @_ZN3viz17CopyOutputRequestD1Ev(%"class.viz::CopyOutputRequest"* nonnull %143) #14
  %146 = getelementptr inbounds %"class.viz::CopyOutputRequest", %"class.viz::CopyOutputRequest"* %143, i64 0, i32 0
  tail call void @_ZdlPv(i8* %146) #15
  br label %147

147:                                              ; preds = %145, %139
  %148 = icmp eq %"class.std::__1::unique_ptr.251"* %141, %137
  br i1 %148, label %149, label %139

149:                                              ; preds = %147, %132
  %150 = icmp eq i64 %135, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %149
  %152 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %152) #15
  br label %153

153:                                              ; preds = %149, %151
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

declare i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"*) local_unnamed_addr #3

declare void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #3

declare void @_ZN4base8internal18WeakPtrFactoryBaseC2Em(%"class.base::internal::WeakPtrFactoryBase"*, i64) unnamed_addr #3

declare zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

declare void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3viz25SurfaceDependencyDeadlineD1Ev(%"class.viz::SurfaceDependencyDeadline"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree.34"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.viz::SurfaceId"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.viz::SurfaceId"* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to %"class.viz::SurfaceId"*
  br i1 %10, label %74, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 5
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %16 = load i32, i32* %14, align 4
  %17 = load i32, i32* %15, align 4
  %18 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %20 = load i32, i32* %18, align 4
  %21 = load i32, i32* %19, align 4
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %24 = load i64, i64* %22, align 8
  %25 = load i64, i64* %23, align 8
  br label %26

26:                                               ; preds = %68, %12
  %27 = phi %"class.viz::SurfaceId"* [ %4, %12 ], [ %70, %68 ]
  %28 = phi i64 [ %13, %12 ], [ %69, %68 ]
  %29 = lshr i64 %28, 1
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 0, i32 1
  %33 = load i32, i32* %31, align 4
  %34 = icmp ult i32 %33, %16
  br i1 %34, label %64, label %35

35:                                               ; preds = %26
  %36 = icmp ult i32 %16, %33
  br i1 %36, label %68, label %37

37:                                               ; preds = %35
  %38 = load i32, i32* %32, align 4
  %39 = icmp ult i32 %38, %17
  br i1 %39, label %64, label %40

40:                                               ; preds = %37
  %41 = icmp ult i32 %17, %38
  br i1 %41, label %68, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 0
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 1
  %45 = load i32, i32* %43, align 4
  %46 = icmp ult i32 %45, %20
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = icmp ult i32 %20, %45
  br i1 %48, label %68, label %49

49:                                               ; preds = %47
  %50 = load i32, i32* %44, align 4
  %51 = icmp ult i32 %50, %21
  br i1 %51, label %64, label %52

52:                                               ; preds = %49
  %53 = icmp ult i32 %21, %50
  br i1 %53, label %68, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 2, i32 0, i32 0
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 2, i32 0, i32 1
  %57 = load i64, i64* %55, align 8
  %58 = icmp ult i64 %57, %24
  br i1 %58, label %64, label %59

59:                                               ; preds = %54
  %60 = icmp ult i64 %24, %57
  br i1 %60, label %68, label %61

61:                                               ; preds = %59
  %62 = load i64, i64* %56, align 8
  %63 = icmp ult i64 %62, %25
  br i1 %63, label %64, label %68

64:                                               ; preds = %61, %54, %49, %42, %37, %26
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 1
  %66 = xor i64 %29, -1
  %67 = add i64 %28, %66
  br label %68

68:                                               ; preds = %64, %61, %59, %52, %47, %40, %35
  %69 = phi i64 [ %67, %64 ], [ %29, %61 ], [ %29, %40 ], [ %29, %59 ], [ %29, %52 ], [ %29, %47 ], [ %29, %35 ]
  %70 = phi %"class.viz::SurfaceId"* [ %65, %64 ], [ %27, %61 ], [ %27, %40 ], [ %27, %59 ], [ %27, %52 ], [ %27, %47 ], [ %27, %35 ]
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %72, label %26

72:                                               ; preds = %68
  %73 = ptrtoint %"class.viz::SurfaceId"* %70 to i64
  br label %74

74:                                               ; preds = %72, %2
  %75 = phi i64 [ %73, %72 ], [ %8, %2 ]
  %76 = phi %"class.viz::SurfaceId"* [ %70, %72 ], [ %4, %2 ]
  %77 = icmp eq %"class.viz::SurfaceId"* %76, %11
  br i1 %77, label %127, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 0, i32 0
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 0, i32 1
  %83 = load i32, i32* %79, align 4
  %84 = load i32, i32* %81, align 4
  %85 = icmp ult i32 %83, %84
  br i1 %85, label %127, label %86

86:                                               ; preds = %78
  %87 = icmp ult i32 %84, %83
  br i1 %87, label %124, label %88

88:                                               ; preds = %86
  %89 = load i32, i32* %80, align 4
  %90 = load i32, i32* %82, align 4
  %91 = icmp ult i32 %89, %90
  br i1 %91, label %127, label %92

92:                                               ; preds = %88
  %93 = icmp ult i32 %90, %89
  br i1 %93, label %124, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 0
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 1
  %99 = load i32, i32* %95, align 4
  %100 = load i32, i32* %97, align 4
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %127, label %102

102:                                              ; preds = %94
  %103 = icmp ult i32 %100, %99
  br i1 %103, label %124, label %104

104:                                              ; preds = %102
  %105 = load i32, i32* %96, align 4
  %106 = load i32, i32* %98, align 4
  %107 = icmp ult i32 %105, %106
  br i1 %107, label %127, label %108

108:                                              ; preds = %104
  %109 = icmp ult i32 %106, %105
  br i1 %109, label %124, label %110

110:                                              ; preds = %108
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 2, i32 0, i32 0
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 2, i32 0, i32 1
  %115 = load i64, i64* %111, align 8
  %116 = load i64, i64* %113, align 8
  %117 = icmp ult i64 %115, %116
  br i1 %117, label %127, label %118

118:                                              ; preds = %110
  %119 = icmp ult i64 %116, %115
  br i1 %119, label %124, label %120

120:                                              ; preds = %118
  %121 = load i64, i64* %112, align 8
  %122 = load i64, i64* %114, align 8
  %123 = icmp ult i64 %121, %122
  br i1 %123, label %127, label %124

124:                                              ; preds = %86, %102, %108, %118, %92, %120
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 1
  %126 = ptrtoint %"class.viz::SurfaceId"* %125 to i64
  br label %127

127:                                              ; preds = %78, %94, %104, %110, %88, %120, %74, %124
  %128 = phi i64 [ %126, %124 ], [ %75, %74 ], [ %75, %120 ], [ %75, %88 ], [ %75, %110 ], [ %75, %104 ], [ %75, %94 ], [ %75, %78 ]
  %129 = insertvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } undef, %"class.viz::SurfaceId"* %76, 0
  %130 = inttoptr i64 %128 to %"class.viz::SurfaceId"*
  %131 = insertvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %129, %"class.viz::SurfaceId"* %130, 1
  ret { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %131
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"* dereferenceable(64)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.viz::SurfaceId"*, i8 } @_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE16emplace_key_argsIS3_JRKS3_EEENS5_4pairINS5_11__wrap_iterIPS3_EEbEERKT_DpOT0_(%"class.base::internal::flat_tree.34"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"class.viz::SurfaceId"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = ptrtoint %"class.viz::SurfaceId"* %5 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  %12 = inttoptr i64 %8 to %"class.viz::SurfaceId"*
  br i1 %11, label %75, label %13

13:                                               ; preds = %3
  %14 = ashr exact i64 %10, 5
  %15 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %17 = load i32, i32* %15, align 4
  %18 = load i32, i32* %16, align 4
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %20 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %21 = load i32, i32* %19, align 4
  %22 = load i32, i32* %20, align 4
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %25 = load i64, i64* %23, align 8
  %26 = load i64, i64* %24, align 8
  br label %27

27:                                               ; preds = %69, %13
  %28 = phi %"class.viz::SurfaceId"* [ %5, %13 ], [ %71, %69 ]
  %29 = phi i64 [ %14, %13 ], [ %70, %69 ]
  %30 = lshr i64 %29, 1
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %31, i64 0, i32 0, i32 0
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30, i32 0, i32 1
  %34 = load i32, i32* %32, align 4
  %35 = icmp ult i32 %34, %17
  br i1 %35, label %65, label %36

36:                                               ; preds = %27
  %37 = icmp ult i32 %17, %34
  br i1 %37, label %69, label %38

38:                                               ; preds = %36
  %39 = load i32, i32* %33, align 4
  %40 = icmp ult i32 %39, %18
  br i1 %40, label %65, label %41

41:                                               ; preds = %38
  %42 = icmp ult i32 %18, %39
  br i1 %42, label %69, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30, i32 1, i32 0
  %45 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30, i32 1, i32 1
  %46 = load i32, i32* %44, align 4
  %47 = icmp ult i32 %46, %21
  br i1 %47, label %65, label %48

48:                                               ; preds = %43
  %49 = icmp ult i32 %21, %46
  br i1 %49, label %69, label %50

50:                                               ; preds = %48
  %51 = load i32, i32* %45, align 4
  %52 = icmp ult i32 %51, %22
  br i1 %52, label %65, label %53

53:                                               ; preds = %50
  %54 = icmp ult i32 %22, %51
  br i1 %54, label %69, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30, i32 1, i32 2, i32 0, i32 0
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 %30, i32 1, i32 2, i32 0, i32 1
  %58 = load i64, i64* %56, align 8
  %59 = icmp ult i64 %58, %25
  br i1 %59, label %65, label %60

60:                                               ; preds = %55
  %61 = icmp ult i64 %25, %58
  br i1 %61, label %69, label %62

62:                                               ; preds = %60
  %63 = load i64, i64* %57, align 8
  %64 = icmp ult i64 %63, %26
  br i1 %64, label %65, label %69

65:                                               ; preds = %62, %55, %50, %43, %38, %27
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %31, i64 1
  %67 = xor i64 %30, -1
  %68 = add i64 %29, %67
  br label %69

69:                                               ; preds = %65, %62, %60, %53, %48, %41, %36
  %70 = phi i64 [ %68, %65 ], [ %30, %62 ], [ %30, %41 ], [ %30, %60 ], [ %30, %53 ], [ %30, %48 ], [ %30, %36 ]
  %71 = phi %"class.viz::SurfaceId"* [ %66, %65 ], [ %28, %62 ], [ %28, %41 ], [ %28, %60 ], [ %28, %53 ], [ %28, %48 ], [ %28, %36 ]
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %73, label %27

73:                                               ; preds = %69
  %74 = ptrtoint %"class.viz::SurfaceId"* %71 to i64
  br label %75

75:                                               ; preds = %73, %3
  %76 = phi i64 [ %74, %73 ], [ %9, %3 ]
  %77 = phi %"class.viz::SurfaceId"* [ %71, %73 ], [ %5, %3 ]
  %78 = icmp eq %"class.viz::SurfaceId"* %77, %12
  br i1 %78, label %125, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 0, i32 0
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 0, i32 1
  %84 = load i32, i32* %80, align 4
  %85 = load i32, i32* %82, align 4
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %125, label %87

87:                                               ; preds = %79
  %88 = icmp ult i32 %85, %84
  br i1 %88, label %129, label %89

89:                                               ; preds = %87
  %90 = load i32, i32* %81, align 4
  %91 = load i32, i32* %83, align 4
  %92 = icmp ult i32 %90, %91
  br i1 %92, label %125, label %93

93:                                               ; preds = %89
  %94 = icmp ult i32 %91, %90
  br i1 %94, label %129, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 1, i32 0
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 1, i32 1
  %100 = load i32, i32* %96, align 4
  %101 = load i32, i32* %98, align 4
  %102 = icmp ult i32 %100, %101
  br i1 %102, label %125, label %103

103:                                              ; preds = %95
  %104 = icmp ult i32 %101, %100
  br i1 %104, label %129, label %105

105:                                              ; preds = %103
  %106 = load i32, i32* %97, align 4
  %107 = load i32, i32* %99, align 4
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %125, label %109

109:                                              ; preds = %105
  %110 = icmp ult i32 %107, %106
  br i1 %110, label %129, label %111

111:                                              ; preds = %109
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 1, i32 2, i32 0, i32 0
  %115 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 0, i32 1, i32 2, i32 0, i32 1
  %116 = load i64, i64* %112, align 8
  %117 = load i64, i64* %114, align 8
  %118 = icmp ult i64 %116, %117
  br i1 %118, label %125, label %119

119:                                              ; preds = %111
  %120 = icmp ult i64 %117, %116
  br i1 %120, label %129, label %121

121:                                              ; preds = %119
  %122 = load i64, i64* %113, align 8
  %123 = load i64, i64* %115, align 8
  %124 = icmp ult i64 %122, %123
  br i1 %124, label %125, label %129

125:                                              ; preds = %79, %95, %105, %111, %89, %75, %121
  %126 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0
  %127 = tail call %"class.viz::SurfaceId"* @_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_(%"class.std::__1::vector.35"* %126, %"class.viz::SurfaceId"* %77, %"class.viz::SurfaceId"* dereferenceable(32) %2) #14
  %128 = ptrtoint %"class.viz::SurfaceId"* %127 to i64
  br label %129

129:                                              ; preds = %87, %103, %109, %119, %93, %121, %125
  %130 = phi i64 [ %128, %125 ], [ %76, %121 ], [ %76, %93 ], [ %76, %119 ], [ %76, %109 ], [ %76, %103 ], [ %76, %87 ]
  %131 = phi i8 [ 1, %125 ], [ 0, %121 ], [ 0, %93 ], [ 0, %119 ], [ 0, %109 ], [ 0, %103 ], [ 0, %87 ]
  %132 = inttoptr i64 %130 to %"class.viz::SurfaceId"*
  %133 = insertvalue { %"class.viz::SurfaceId"*, i8 } undef, %"class.viz::SurfaceId"* %132, 0
  %134 = insertvalue { %"class.viz::SurfaceId"*, i8 } %133, i8 %131, 1
  ret { %"class.viz::SurfaceId"*, i8 } %134
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.viz::SurfaceId"* @_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE7emplaceIJRKS2_EEENS_11__wrap_iterIPS2_EENS9_IPS7_EEDpOT_(%"class.std::__1::vector.35"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  %5 = alloca [16 x i8], align 8
  %6 = alloca %"struct.std::__1::__split_buffer.477", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 1
  %9 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  %12 = icmp ult %"class.viz::SurfaceId"* %9, %11
  %13 = ptrtoint %"class.viz::SurfaceId"* %9 to i64
  %14 = ptrtoint %"class.viz::SurfaceId"* %11 to i64
  br i1 %12, label %15, label %136

15:                                               ; preds = %3
  %16 = icmp eq %"class.viz::SurfaceId"* %9, %1
  br i1 %16, label %17, label %37

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %18, align 4
  %21 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 8
  store i32 %26, i32* %24, align 8
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %27, align 4
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 2
  %32 = bitcast %"class.base::UnguessableToken"* %30 to i8*
  %33 = bitcast %"class.base::UnguessableToken"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false) #14
  %34 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 1
  %35 = ptrtoint %"class.viz::SurfaceId"* %34 to i64
  %36 = bitcast %"class.viz::SurfaceId"** %8 to i64*
  store i64 %35, i64* %36, align 8
  br label %279

37:                                               ; preds = %15
  %38 = getelementptr inbounds [16 x i8], [16 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38)
  %39 = bitcast %"class.viz::SurfaceId"* %2 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4
  %41 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 2
  %42 = bitcast %"class.base::UnguessableToken"* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* align 8 %42, i64 16, i1 false)
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 1
  %44 = ptrtoint %"class.viz::SurfaceId"* %43 to i64
  %45 = sub i64 %13, %44
  %46 = ashr exact i64 %45, 5
  %47 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 %46
  %48 = bitcast %"class.viz::SurfaceId"** %8 to i64*
  %49 = icmp ult %"class.viz::SurfaceId"* %47, %9
  br i1 %49, label %50, label %86

50:                                               ; preds = %37
  %51 = sub nsw i64 0, %46
  %52 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 %51, i32 0, i32 0
  %53 = bitcast i32* %52 to i8*
  %54 = xor i64 %4, -1
  %55 = getelementptr i8, i8* %53, i64 %54
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 32
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %78

59:                                               ; preds = %50
  %60 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 0, i32 0
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %47, i64 0, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %60, align 4
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 0, i32 1
  %64 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 %46, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 0
  %67 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 %46, i32 1, i32 0
  %68 = load i32, i32* %67, align 8
  store i32 %68, i32* %66, align 8
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 1
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 %46, i32 1, i32 1
  %71 = load i32, i32* %70, align 4
  store i32 %71, i32* %69, align 4
  %72 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 2
  %73 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 %46, i32 1, i32 2
  %74 = bitcast %"class.base::UnguessableToken"* %72 to i8*
  %75 = bitcast %"class.base::UnguessableToken"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false) #14
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %47, i64 1
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 1
  br label %78

78:                                               ; preds = %59, %50
  %79 = phi %"class.viz::SurfaceId"* [ %9, %50 ], [ %77, %59 ]
  %80 = phi %"class.viz::SurfaceId"* [ %47, %50 ], [ %76, %59 ]
  %81 = phi %"class.viz::SurfaceId"* [ undef, %50 ], [ %77, %59 ]
  %82 = icmp ult i8* %55, inttoptr (i64 32 to i8*)
  br i1 %82, label %83, label %94

83:                                               ; preds = %94, %78
  %84 = phi %"class.viz::SurfaceId"* [ %81, %78 ], [ %130, %94 ]
  %85 = ptrtoint %"class.viz::SurfaceId"* %84 to i64
  br label %86

86:                                               ; preds = %83, %37
  %87 = phi i64 [ %85, %83 ], [ %13, %37 ]
  store i64 %87, i64* %48, align 8
  %88 = icmp eq i64 %45, 0
  br i1 %88, label %132, label %89

89:                                               ; preds = %86
  %90 = sub nsw i64 0, %46
  %91 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 %90
  %92 = bitcast %"class.viz::SurfaceId"* %91 to i8*
  %93 = bitcast %"class.viz::SurfaceId"* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 %45, i1 false) #14
  br label %132

94:                                               ; preds = %78, %94
  %95 = phi %"class.viz::SurfaceId"* [ %130, %94 ], [ %79, %78 ]
  %96 = phi %"class.viz::SurfaceId"* [ %129, %94 ], [ %80, %78 ]
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 0, i32 0, i32 0
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 0, i32 0
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %97, align 4
  %100 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 0, i32 0, i32 1
  %101 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %100, align 4
  %103 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 0, i32 1, i32 0
  %104 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 1, i32 0
  %105 = load i32, i32* %104, align 8
  store i32 %105, i32* %103, align 8
  %106 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 0, i32 1, i32 1
  %107 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 1, i32 1
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %106, align 4
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 0, i32 1, i32 2
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 1, i32 2
  %111 = bitcast %"class.base::UnguessableToken"* %109 to i8*
  %112 = bitcast %"class.base::UnguessableToken"* %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false) #14
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 1, i32 0, i32 0
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1, i32 0, i32 0
  %115 = load i32, i32* %114, align 4
  store i32 %115, i32* %113, align 4
  %116 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 1, i32 0, i32 1
  %117 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1, i32 0, i32 1
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %116, align 4
  %119 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 1, i32 1, i32 0
  %120 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1, i32 1, i32 0
  %121 = load i32, i32* %120, align 8
  store i32 %121, i32* %119, align 8
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 1, i32 1, i32 1
  %123 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1, i32 1, i32 1
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %122, align 4
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 1, i32 1, i32 2
  %126 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 1, i32 1, i32 2
  %127 = bitcast %"class.base::UnguessableToken"* %125 to i8*
  %128 = bitcast %"class.base::UnguessableToken"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false) #14
  %129 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 2
  %130 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 2
  %131 = icmp ult %"class.viz::SurfaceId"* %129, %9
  br i1 %131, label %94, label %83

132:                                              ; preds = %86, %89
  %133 = bitcast %"class.viz::SurfaceId"* %1 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %133, align 8
  %134 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %135 = bitcast %"class.base::UnguessableToken"* %134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* nonnull align 8 %38, i64 16, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38)
  br label %279

136:                                              ; preds = %3
  %137 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 2
  %138 = bitcast %"struct.std::__1::__split_buffer.477"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %138) #14
  %139 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %6, i64 0, i32 0
  %140 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %6, i64 0, i32 1
  %141 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %6, i64 0, i32 2
  %142 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %6, i64 0, i32 3, i32 0, i32 0
  %143 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %6, i64 0, i32 3, i32 1, i32 0
  %144 = bitcast %"class.viz::SurfaceId"** %8 to i64*
  %145 = bitcast %"class.std::__1::vector.35"* %0 to i64*
  %146 = bitcast %"struct.std::__1::__split_buffer.477"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 -86, i64 40, i1 false)
  %147 = load i64, i64* %145, align 8
  %148 = sub i64 %13, %147
  %149 = ashr exact i64 %148, 5
  %150 = add nsw i64 %149, 1
  %151 = icmp ugt i64 %150, 576460752303423487
  br i1 %151, label %152, label %154

152:                                              ; preds = %136
  %153 = bitcast %"class.std::__1::vector.35"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %153) #16
  unreachable

154:                                              ; preds = %136
  %155 = bitcast %"class.viz::SurfaceId"** %10 to i64*
  %156 = sub i64 %14, %147
  %157 = ashr exact i64 %156, 5
  %158 = icmp ult i64 %157, 288230376151711743
  br i1 %158, label %163, label %159

159:                                              ; preds = %154
  %160 = sub i64 %4, %147
  %161 = ashr exact i64 %160, 5
  store %"class.viz::SurfaceId"* null, %"class.viz::SurfaceId"** %142, align 8
  %162 = bitcast %"class.std::__1::allocator.40"** %143 to %"class.std::__1::__compressed_pair.37"**
  store %"class.std::__1::__compressed_pair.37"* %137, %"class.std::__1::__compressed_pair.37"** %162, align 8
  br label %174

163:                                              ; preds = %154
  %164 = ashr exact i64 %156, 4
  %165 = icmp ult i64 %164, %150
  %166 = select i1 %165, i64 %150, i64 %164
  %167 = sub i64 %4, %147
  %168 = ashr exact i64 %167, 5
  store %"class.viz::SurfaceId"* null, %"class.viz::SurfaceId"** %142, align 8
  %169 = bitcast %"class.std::__1::allocator.40"** %143 to %"class.std::__1::__compressed_pair.37"**
  store %"class.std::__1::__compressed_pair.37"* %137, %"class.std::__1::__compressed_pair.37"** %169, align 8
  %170 = icmp eq i64 %166, 0
  br i1 %170, label %180, label %171

171:                                              ; preds = %163
  %172 = icmp ugt i64 %166, 576460752303423487
  br i1 %172, label %173, label %174

173:                                              ; preds = %171
  tail call void @abort() #16
  unreachable

174:                                              ; preds = %159, %171
  %175 = phi i64 [ 576460752303423487, %159 ], [ %166, %171 ]
  %176 = phi i64 [ %161, %159 ], [ %168, %171 ]
  %177 = shl i64 %175, 5
  %178 = tail call i8* @_Znwm(i64 %177) #15
  %179 = bitcast i8* %178 to %"class.viz::SurfaceId"*
  br label %180

180:                                              ; preds = %163, %174
  %181 = phi i64 [ %176, %174 ], [ %168, %163 ]
  %182 = phi i64 [ %175, %174 ], [ 0, %163 ]
  %183 = phi %"class.viz::SurfaceId"* [ %179, %174 ], [ null, %163 ]
  store %"class.viz::SurfaceId"* %183, %"class.viz::SurfaceId"** %139, align 8
  %184 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %183, i64 %181
  store %"class.viz::SurfaceId"* %184, %"class.viz::SurfaceId"** %141, align 8
  store %"class.viz::SurfaceId"* %184, %"class.viz::SurfaceId"** %140, align 8
  %185 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %183, i64 %182
  store %"class.viz::SurfaceId"* %185, %"class.viz::SurfaceId"** %142, align 8
  call void @_ZNSt3__114__split_bufferIN3viz9SurfaceIdERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_(%"struct.std::__1::__split_buffer.477"* nonnull %6, %"class.viz::SurfaceId"* dereferenceable(32) %2)
  %186 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %140, align 8
  %187 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %7, align 8
  %188 = icmp eq %"class.viz::SurfaceId"* %187, %1
  br i1 %188, label %212, label %189

189:                                              ; preds = %180, %189
  %190 = phi %"class.viz::SurfaceId"* [ %210, %189 ], [ %186, %180 ]
  %191 = phi %"class.viz::SurfaceId"* [ %192, %189 ], [ %1, %180 ]
  %192 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %191, i64 -1
  %193 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %190, i64 -1, i32 0, i32 0
  %194 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %192, i64 0, i32 0, i32 0
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %193, align 4
  %196 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %190, i64 -1, i32 0, i32 1
  %197 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %191, i64 -1, i32 0, i32 1
  %198 = load i32, i32* %197, align 4
  store i32 %198, i32* %196, align 4
  %199 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %190, i64 -1, i32 1, i32 0
  %200 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %191, i64 -1, i32 1, i32 0
  %201 = load i32, i32* %200, align 8
  store i32 %201, i32* %199, align 8
  %202 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %190, i64 -1, i32 1, i32 1
  %203 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %191, i64 -1, i32 1, i32 1
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %190, i64 -1, i32 1, i32 2
  %206 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %191, i64 -1, i32 1, i32 2
  %207 = bitcast %"class.base::UnguessableToken"* %205 to i8*
  %208 = bitcast %"class.base::UnguessableToken"* %206 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %207, i8* align 8 %208, i64 16, i1 false) #14
  %209 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %140, align 8
  %210 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %209, i64 -1
  store %"class.viz::SurfaceId"* %210, %"class.viz::SurfaceId"** %140, align 8
  %211 = icmp eq %"class.viz::SurfaceId"* %192, %187
  br i1 %211, label %212, label %189

212:                                              ; preds = %189, %180
  %213 = phi %"class.viz::SurfaceId"* [ %186, %180 ], [ %210, %189 ]
  %214 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %8, align 8
  %215 = icmp eq %"class.viz::SurfaceId"* %214, %1
  br i1 %215, label %216, label %222

216:                                              ; preds = %212
  %217 = ptrtoint %"class.viz::SurfaceId"* %214 to i64
  %218 = ptrtoint %"class.viz::SurfaceId"* %213 to i64
  %219 = bitcast %"class.viz::SurfaceId"** %140 to i64*
  %220 = bitcast %"class.viz::SurfaceId"** %141 to i64*
  %221 = load i64, i64* %220, align 8
  br label %253

222:                                              ; preds = %212
  %223 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %141, align 8
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi %"class.viz::SurfaceId"* [ %245, %224 ], [ %223, %222 ]
  %226 = phi %"class.viz::SurfaceId"* [ %243, %224 ], [ %1, %222 ]
  %227 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %225, i64 0, i32 0, i32 0
  %228 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 0, i32 0, i32 0
  %229 = load i32, i32* %228, align 4
  store i32 %229, i32* %227, align 4
  %230 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %225, i64 0, i32 0, i32 1
  %231 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 0, i32 0, i32 1
  %232 = load i32, i32* %231, align 4
  store i32 %232, i32* %230, align 4
  %233 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %225, i64 0, i32 1, i32 0
  %234 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 0, i32 1, i32 0
  %235 = load i32, i32* %234, align 8
  store i32 %235, i32* %233, align 8
  %236 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %225, i64 0, i32 1, i32 1
  %237 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 0, i32 1, i32 1
  %238 = load i32, i32* %237, align 4
  store i32 %238, i32* %236, align 4
  %239 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %225, i64 0, i32 1, i32 2
  %240 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 0, i32 1, i32 2
  %241 = bitcast %"class.base::UnguessableToken"* %239 to i8*
  %242 = bitcast %"class.base::UnguessableToken"* %240 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %242, i64 16, i1 false) #14
  %243 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %226, i64 1
  %244 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %141, align 8
  %245 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %244, i64 1
  store %"class.viz::SurfaceId"* %245, %"class.viz::SurfaceId"** %141, align 8
  %246 = icmp eq %"class.viz::SurfaceId"* %243, %214
  br i1 %246, label %247, label %224

247:                                              ; preds = %224
  %248 = ptrtoint %"class.viz::SurfaceId"* %245 to i64
  %249 = bitcast %"class.viz::SurfaceId"** %140 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = load i64, i64* %144, align 8
  %252 = bitcast %"class.viz::SurfaceId"** %141 to i64*
  br label %253

253:                                              ; preds = %216, %247
  %254 = phi i64* [ %220, %216 ], [ %252, %247 ]
  %255 = phi i64 [ %221, %216 ], [ %248, %247 ]
  %256 = phi i64 [ %217, %216 ], [ %251, %247 ]
  %257 = phi i64* [ %219, %216 ], [ %249, %247 ]
  %258 = phi i64 [ %218, %216 ], [ %250, %247 ]
  %259 = load i64, i64* %145, align 8
  store i64 %258, i64* %145, align 8
  store i64 %259, i64* %257, align 8
  store i64 %255, i64* %144, align 8
  store i64 %256, i64* %254, align 8
  %260 = load i64, i64* %155, align 8
  %261 = bitcast %"class.viz::SurfaceId"** %142 to i64*
  %262 = load i64, i64* %261, align 8
  store i64 %262, i64* %155, align 8
  store i64 %260, i64* %261, align 8
  %263 = bitcast %"struct.std::__1::__split_buffer.477"* %6 to i64*
  store i64 %259, i64* %263, align 8
  %264 = inttoptr i64 %259 to %"class.viz::SurfaceId"*
  %265 = inttoptr i64 %256 to %"class.viz::SurfaceId"*
  %266 = icmp eq %"class.viz::SurfaceId"* %265, %264
  br i1 %266, label %274, label %267

267:                                              ; preds = %253
  %268 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %265, i64 -1, i32 0, i32 0
  %269 = ptrtoint i32* %268 to i64
  %270 = sub i64 %269, %259
  %271 = lshr i64 %270, 5
  %272 = xor i64 %271, -1
  %273 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %265, i64 %272
  store %"class.viz::SurfaceId"* %273, %"class.viz::SurfaceId"** %141, align 8
  br label %274

274:                                              ; preds = %267, %253
  %275 = icmp eq i64 %259, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = inttoptr i64 %259 to i8*
  call void @_ZdlPv(i8* %277) #15
  br label %278

278:                                              ; preds = %274, %276
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %138) #14
  br label %279

279:                                              ; preds = %17, %132, %278
  %280 = phi %"class.viz::SurfaceId"* [ %1, %17 ], [ %1, %132 ], [ %186, %278 ]
  ret %"class.viz::SurfaceId"* %280
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIN3viz9SurfaceIdERNS_9allocatorIS2_EEE12emplace_backIJRKS2_EEEvDpOT_(%"struct.std::__1::__split_buffer.477"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %0, i64 0, i32 2
  %4 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %5, align 8
  %7 = icmp eq %"class.viz::SurfaceId"* %4, %6
  %8 = ptrtoint %"class.viz::SurfaceId"* %6 to i64
  br i1 %7, label %9, label %138

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %0, i64 0, i32 1
  %11 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.477", %"struct.std::__1::__split_buffer.477"* %0, i64 0, i32 0
  %13 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %12, align 8
  %14 = icmp ugt %"class.viz::SurfaceId"* %11, %13
  %15 = ptrtoint %"class.viz::SurfaceId"* %13 to i64
  br i1 %14, label %16, label %35

16:                                               ; preds = %9
  %17 = ptrtoint %"class.viz::SurfaceId"* %11 to i64
  %18 = sub i64 %17, %15
  %19 = ashr exact i64 %18, 5
  %20 = add nsw i64 %19, 1
  %21 = sdiv i64 %20, -2
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 %21
  %23 = ptrtoint %"class.viz::SurfaceId"* %4 to i64
  %24 = sub i64 %23, %17
  %25 = ashr exact i64 %24, 5
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %16
  %28 = bitcast %"class.viz::SurfaceId"* %22 to i8*
  %29 = bitcast %"class.viz::SurfaceId"* %11 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 %24, i1 false) #14
  %30 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  br label %31

31:                                               ; preds = %16, %27
  %32 = phi %"class.viz::SurfaceId"* [ %11, %16 ], [ %30, %27 ]
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %22, i64 %25
  store %"class.viz::SurfaceId"* %33, %"class.viz::SurfaceId"** %3, align 8
  %34 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %32, i64 %21
  store %"class.viz::SurfaceId"* %34, %"class.viz::SurfaceId"** %10, align 8
  br label %138

35:                                               ; preds = %9
  %36 = bitcast %"class.viz::SurfaceId"** %5 to i64*
  %37 = bitcast %"struct.std::__1::__split_buffer.477"* %0 to i64*
  %38 = sub i64 %8, %15
  %39 = ashr exact i64 %38, 4
  %40 = icmp eq i64 %38, 0
  %41 = select i1 %40, i64 1, i64 %39
  %42 = icmp ugt i64 %41, 576460752303423487
  br i1 %42, label %43, label %44

43:                                               ; preds = %35
  tail call void @abort() #16
  unreachable

44:                                               ; preds = %35
  %45 = lshr i64 %41, 2
  %46 = shl i64 %41, 5
  %47 = tail call i8* @_Znwm(i64 %46) #15
  %48 = bitcast i8* %47 to %"class.viz::SurfaceId"*
  %49 = ptrtoint i8* %47 to i64
  %50 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %45
  %51 = ptrtoint %"class.viz::SurfaceId"* %50 to i64
  %52 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %41
  %53 = ptrtoint %"class.viz::SurfaceId"* %52 to i64
  %54 = ptrtoint %"class.viz::SurfaceId"* %11 to i64
  %55 = ptrtoint %"class.viz::SurfaceId"* %4 to i64
  %56 = sub i64 %55, %54
  %57 = ashr exact i64 %56, 5
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %50, i64 %57
  %59 = icmp eq i64 %56, 0
  br i1 %59, label %128, label %60

60:                                               ; preds = %44
  %61 = add i64 %56, -32
  %62 = and i64 %61, 32
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %83

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %50, i64 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %65, align 4
  %68 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %45, i32 0, i32 1
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 0, i32 0, i32 1
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %68, align 4
  %71 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %45, i32 1, i32 0
  %72 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 0, i32 1, i32 0
  %73 = load i32, i32* %72, align 8
  store i32 %73, i32* %71, align 8
  %74 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %45, i32 1, i32 1
  %75 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 0, i32 1, i32 1
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %48, i64 %45, i32 1, i32 2
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 0, i32 1, i32 2
  %79 = bitcast %"class.base::UnguessableToken"* %77 to i8*
  %80 = bitcast %"class.base::UnguessableToken"* %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 16, i1 false) #14
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %50, i64 1
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %11, i64 1
  br label %83

83:                                               ; preds = %64, %60
  %84 = phi %"class.viz::SurfaceId"* [ %50, %60 ], [ %81, %64 ]
  %85 = phi %"class.viz::SurfaceId"* [ %11, %60 ], [ %82, %64 ]
  %86 = icmp ult i64 %61, 32
  br i1 %86, label %125, label %87

87:                                               ; preds = %83, %87
  %88 = phi %"class.viz::SurfaceId"* [ %122, %87 ], [ %84, %83 ]
  %89 = phi %"class.viz::SurfaceId"* [ %123, %87 ], [ %85, %83 ]
  %90 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 0, i32 0
  %91 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 0, i32 0, i32 0
  %92 = load i32, i32* %91, align 4
  store i32 %92, i32* %90, align 4
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 0, i32 0, i32 1
  %95 = load i32, i32* %94, align 4
  store i32 %95, i32* %93, align 4
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 1, i32 0
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 0, i32 1, i32 0
  %98 = load i32, i32* %97, align 8
  store i32 %98, i32* %96, align 8
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 1, i32 1
  %100 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 0, i32 1, i32 1
  %101 = load i32, i32* %100, align 4
  store i32 %101, i32* %99, align 4
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 1, i32 2
  %103 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 0, i32 1, i32 2
  %104 = bitcast %"class.base::UnguessableToken"* %102 to i8*
  %105 = bitcast %"class.base::UnguessableToken"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false) #14
  %106 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 1, i32 0, i32 0
  %107 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 1, i32 0, i32 0
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %106, align 4
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 1, i32 0, i32 1
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 1, i32 0, i32 1
  %111 = load i32, i32* %110, align 4
  store i32 %111, i32* %109, align 4
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 1, i32 1, i32 0
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 1, i32 1, i32 0
  %114 = load i32, i32* %113, align 8
  store i32 %114, i32* %112, align 8
  %115 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 1, i32 1, i32 1
  %116 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 1, i32 1, i32 1
  %117 = load i32, i32* %116, align 4
  store i32 %117, i32* %115, align 4
  %118 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 1, i32 1, i32 2
  %119 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 1, i32 1, i32 2
  %120 = bitcast %"class.base::UnguessableToken"* %118 to i8*
  %121 = bitcast %"class.base::UnguessableToken"* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 16, i1 false) #14
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 2
  %123 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %89, i64 2
  %124 = icmp eq %"class.viz::SurfaceId"* %58, %122
  br i1 %124, label %125, label %87

125:                                              ; preds = %87, %83
  %126 = ptrtoint %"class.viz::SurfaceId"* %58 to i64
  %127 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %12, align 8
  br label %128

128:                                              ; preds = %44, %125
  %129 = phi %"class.viz::SurfaceId"* [ %127, %125 ], [ %13, %44 ]
  %130 = phi i64 [ %126, %125 ], [ %51, %44 ]
  store i64 %49, i64* %37, align 8
  %131 = bitcast %"class.viz::SurfaceId"** %10 to i64*
  store i64 %51, i64* %131, align 8
  %132 = bitcast %"class.viz::SurfaceId"** %3 to i64*
  store i64 %130, i64* %132, align 8
  store i64 %53, i64* %36, align 8
  %133 = icmp eq %"class.viz::SurfaceId"* %129, null
  %134 = inttoptr i64 %130 to %"class.viz::SurfaceId"*
  br i1 %133, label %138, label %135

135:                                              ; preds = %128
  %136 = bitcast %"class.viz::SurfaceId"* %129 to i8*
  tail call void @_ZdlPv(i8* %136) #15
  %137 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  br label %138

138:                                              ; preds = %135, %128, %31, %2
  %139 = phi %"class.viz::SurfaceId"* [ %137, %135 ], [ %134, %128 ], [ %33, %31 ], [ %4, %2 ]
  %140 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %139, i64 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %142 = load i32, i32* %141, align 4
  store i32 %142, i32* %140, align 4
  %143 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %139, i64 0, i32 0, i32 1
  %144 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %145 = load i32, i32* %144, align 4
  store i32 %145, i32* %143, align 4
  %146 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %139, i64 0, i32 1, i32 0
  %147 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %148 = load i32, i32* %147, align 8
  store i32 %148, i32* %146, align 8
  %149 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %139, i64 0, i32 1, i32 1
  %150 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %151 = load i32, i32* %150, align 4
  store i32 %151, i32* %149, align 4
  %152 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %139, i64 0, i32 1, i32 2
  %153 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %154 = bitcast %"class.base::UnguessableToken"* %152 to i8*
  %155 = bitcast %"class.base::UnguessableToken"* %153 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 16, i1 false) #14
  %156 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  %157 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %156, i64 1
  store %"class.viz::SurfaceId"* %157, %"class.viz::SurfaceId"** %3, align 8
  ret void
}

declare void @_ZN4base11trace_event11TracedValueC1Em(%"class.base::trace_event::TracedValue"*, i64) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1), i64, %"class.viz::SurfaceAllocationGroup"**, i64) local_unnamed_addr #0 comdat {
  %7 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %0 to i64
  switch i64 %3, label %18 [
    i64 0, label %456
    i64 1, label %456
    i64 2, label %8
  ]

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -1
  %10 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %9, align 8
  %11 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, align 8
  %12 = icmp ult %"class.viz::SurfaceAllocationGroup"* %10, %11
  br i1 %12, label %13, label %456

13:                                               ; preds = %8
  %14 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %10 to i64
  %15 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %11 to i64
  %16 = bitcast %"class.viz::SurfaceAllocationGroup"** %0 to i64*
  %17 = bitcast %"class.viz::SurfaceAllocationGroup"** %9 to i64*
  store i64 %14, i64* %16, align 8
  store i64 %15, i64* %17, align 8
  br label %456

18:                                               ; preds = %6
  %19 = icmp slt i64 %3, 129
  br i1 %19, label %20, label %74

20:                                               ; preds = %18
  %21 = icmp eq %"class.viz::SurfaceAllocationGroup"** %0, %1
  br i1 %21, label %456, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 1
  %24 = icmp eq %"class.viz::SurfaceAllocationGroup"** %23, %1
  br i1 %24, label %456, label %25

25:                                               ; preds = %22
  %26 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -2
  %27 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %26 to i64
  %28 = sub i64 %27, %7
  %29 = and i64 %28, 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %48

31:                                               ; preds = %25
  %32 = bitcast %"class.viz::SurfaceAllocationGroup"** %23 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = inttoptr i64 %33 to %"class.viz::SurfaceAllocationGroup"*
  br label %35

35:                                               ; preds = %40, %31
  %36 = phi %"class.viz::SurfaceAllocationGroup"** [ %23, %31 ], [ %37, %40 ]
  %37 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %36, i64 -1
  %38 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %37, align 8
  %39 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %38, %34
  br i1 %39, label %40, label %44

40:                                               ; preds = %35
  %41 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %38 to i64
  %42 = bitcast %"class.viz::SurfaceAllocationGroup"** %36 to i64*
  store i64 %41, i64* %42, align 8
  %43 = icmp eq %"class.viz::SurfaceAllocationGroup"** %37, %0
  br i1 %43, label %44, label %35

44:                                               ; preds = %35, %40
  %45 = phi %"class.viz::SurfaceAllocationGroup"** [ %36, %35 ], [ %0, %40 ]
  %46 = bitcast %"class.viz::SurfaceAllocationGroup"** %45 to i64*
  store i64 %33, i64* %46, align 8
  %47 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 2
  br label %48

48:                                               ; preds = %44, %25
  %49 = phi %"class.viz::SurfaceAllocationGroup"** [ %23, %25 ], [ %47, %44 ]
  %50 = icmp ult i64 %28, 8
  br i1 %50, label %456, label %51

51:                                               ; preds = %48, %468
  %52 = phi %"class.viz::SurfaceAllocationGroup"** [ %471, %468 ], [ %49, %48 ]
  %53 = bitcast %"class.viz::SurfaceAllocationGroup"** %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq %"class.viz::SurfaceAllocationGroup"** %52, %0
  br i1 %55, label %63, label %56

56:                                               ; preds = %51
  %57 = inttoptr i64 %54 to %"class.viz::SurfaceAllocationGroup"*
  br label %58

58:                                               ; preds = %70, %56
  %59 = phi %"class.viz::SurfaceAllocationGroup"** [ %52, %56 ], [ %60, %70 ]
  %60 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %59, i64 -1
  %61 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %60, align 8
  %62 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %61, %57
  br i1 %62, label %70, label %63

63:                                               ; preds = %70, %58, %51
  %64 = phi %"class.viz::SurfaceAllocationGroup"** [ %0, %51 ], [ %59, %58 ], [ %0, %70 ]
  %65 = bitcast %"class.viz::SurfaceAllocationGroup"** %64 to i64*
  store i64 %54, i64* %65, align 8
  %66 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %52, i64 1
  %67 = bitcast %"class.viz::SurfaceAllocationGroup"** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = icmp eq %"class.viz::SurfaceAllocationGroup"** %66, %0
  br i1 %69, label %468, label %457

70:                                               ; preds = %58
  %71 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %61 to i64
  %72 = bitcast %"class.viz::SurfaceAllocationGroup"** %59 to i64*
  store i64 %71, i64* %72, align 8
  %73 = icmp eq %"class.viz::SurfaceAllocationGroup"** %60, %0
  br i1 %73, label %63, label %58

74:                                               ; preds = %18
  %75 = lshr i64 %3, 1
  %76 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 %75
  %77 = icmp sgt i64 %3, %5
  br i1 %77, label %454, label %78

78:                                               ; preds = %74
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeE(%"class.viz::SurfaceAllocationGroup"** %0, %"class.viz::SurfaceAllocationGroup"** %76, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %75, %"class.viz::SurfaceAllocationGroup"** %4)
  %79 = sub nsw i64 %3, %75
  %80 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %75
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeE(%"class.viz::SurfaceAllocationGroup"** %76, %"class.viz::SurfaceAllocationGroup"** %1, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %79, %"class.viz::SurfaceAllocationGroup"** %80)
  %81 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %3
  br label %213

82:                                               ; preds = %405
  %83 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %406 to i64
  %84 = icmp eq %"class.viz::SurfaceAllocationGroup"** %406, %81
  br i1 %84, label %456, label %85

85:                                               ; preds = %82
  %86 = add i64 %3, -1
  %87 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %86
  %88 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %87 to i64
  %89 = sub i64 %88, %83
  %90 = lshr i64 %89, 3
  %91 = add nuw nsw i64 %90, 1
  %92 = icmp ult i64 %91, 4
  br i1 %92, label %93, label %120

93:                                               ; preds = %211, %120, %85
  %94 = phi %"class.viz::SurfaceAllocationGroup"** [ %406, %120 ], [ %406, %85 ], [ %134, %211 ]
  %95 = phi %"class.viz::SurfaceAllocationGroup"** [ %408, %120 ], [ %408, %85 ], [ %135, %211 ]
  %96 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %94 to i64
  %97 = add i64 %3, -1
  %98 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %97
  %99 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %98 to i64
  %100 = sub i64 %99, %96
  %101 = lshr i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = and i64 %102, 7
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %116, label %105

105:                                              ; preds = %93, %105
  %106 = phi %"class.viz::SurfaceAllocationGroup"** [ %112, %105 ], [ %94, %93 ]
  %107 = phi %"class.viz::SurfaceAllocationGroup"** [ %113, %105 ], [ %95, %93 ]
  %108 = phi i64 [ %114, %105 ], [ %103, %93 ]
  %109 = bitcast %"class.viz::SurfaceAllocationGroup"** %106 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = bitcast %"class.viz::SurfaceAllocationGroup"** %107 to i64*
  store i64 %110, i64* %111, align 8
  %112 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %106, i64 1
  %113 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %107, i64 1
  %114 = add i64 %108, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %105, !llvm.loop !19

116:                                              ; preds = %105, %93
  %117 = phi %"class.viz::SurfaceAllocationGroup"** [ %94, %93 ], [ %112, %105 ]
  %118 = phi %"class.viz::SurfaceAllocationGroup"** [ %95, %93 ], [ %113, %105 ]
  %119 = icmp ult i64 %100, 56
  br i1 %119, label %456, label %410

120:                                              ; preds = %85
  %121 = add i64 %3, -1
  %122 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %121
  %123 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %122 to i64
  %124 = sub i64 %123, %83
  %125 = lshr i64 %124, 3
  %126 = add nuw nsw i64 %125, 1
  %127 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %126
  %128 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %126
  %129 = icmp ult %"class.viz::SurfaceAllocationGroup"** %408, %128
  %130 = icmp ult %"class.viz::SurfaceAllocationGroup"** %406, %127
  %131 = and i1 %129, %130
  br i1 %131, label %93, label %132

132:                                              ; preds = %120
  %133 = and i64 %91, 4611686018427387900
  %134 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %133
  %135 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %133
  %136 = add nsw i64 %133, -4
  %137 = lshr exact i64 %136, 2
  %138 = add nuw nsw i64 %137, 1
  %139 = and i64 %138, 3
  %140 = icmp ult i64 %136, 12
  br i1 %140, label %192, label %141

141:                                              ; preds = %132
  %142 = sub nsw i64 %138, %139
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %189, %143 ]
  %145 = phi i64 [ %142, %141 ], [ %190, %143 ]
  %146 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %144
  %147 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %144
  %148 = bitcast %"class.viz::SurfaceAllocationGroup"** %146 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 8, !alias.scope !20
  %150 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %146, i64 2
  %151 = bitcast %"class.viz::SurfaceAllocationGroup"** %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8, !alias.scope !20
  %153 = bitcast %"class.viz::SurfaceAllocationGroup"** %147 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %153, align 8, !alias.scope !23, !noalias !20
  %154 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %147, i64 2
  %155 = bitcast %"class.viz::SurfaceAllocationGroup"** %154 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %155, align 8, !alias.scope !23, !noalias !20
  %156 = or i64 %144, 4
  %157 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %156
  %158 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %156
  %159 = bitcast %"class.viz::SurfaceAllocationGroup"** %157 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !20
  %161 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %157, i64 2
  %162 = bitcast %"class.viz::SurfaceAllocationGroup"** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !20
  %164 = bitcast %"class.viz::SurfaceAllocationGroup"** %158 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %164, align 8, !alias.scope !23, !noalias !20
  %165 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %158, i64 2
  %166 = bitcast %"class.viz::SurfaceAllocationGroup"** %165 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %166, align 8, !alias.scope !23, !noalias !20
  %167 = or i64 %144, 8
  %168 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %167
  %169 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %167
  %170 = bitcast %"class.viz::SurfaceAllocationGroup"** %168 to <2 x i64>*
  %171 = load <2 x i64>, <2 x i64>* %170, align 8, !alias.scope !20
  %172 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %168, i64 2
  %173 = bitcast %"class.viz::SurfaceAllocationGroup"** %172 to <2 x i64>*
  %174 = load <2 x i64>, <2 x i64>* %173, align 8, !alias.scope !20
  %175 = bitcast %"class.viz::SurfaceAllocationGroup"** %169 to <2 x i64>*
  store <2 x i64> %171, <2 x i64>* %175, align 8, !alias.scope !23, !noalias !20
  %176 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %169, i64 2
  %177 = bitcast %"class.viz::SurfaceAllocationGroup"** %176 to <2 x i64>*
  store <2 x i64> %174, <2 x i64>* %177, align 8, !alias.scope !23, !noalias !20
  %178 = or i64 %144, 12
  %179 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %178
  %180 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %178
  %181 = bitcast %"class.viz::SurfaceAllocationGroup"** %179 to <2 x i64>*
  %182 = load <2 x i64>, <2 x i64>* %181, align 8, !alias.scope !20
  %183 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %179, i64 2
  %184 = bitcast %"class.viz::SurfaceAllocationGroup"** %183 to <2 x i64>*
  %185 = load <2 x i64>, <2 x i64>* %184, align 8, !alias.scope !20
  %186 = bitcast %"class.viz::SurfaceAllocationGroup"** %180 to <2 x i64>*
  store <2 x i64> %182, <2 x i64>* %186, align 8, !alias.scope !23, !noalias !20
  %187 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %180, i64 2
  %188 = bitcast %"class.viz::SurfaceAllocationGroup"** %187 to <2 x i64>*
  store <2 x i64> %185, <2 x i64>* %188, align 8, !alias.scope !23, !noalias !20
  %189 = add i64 %144, 16
  %190 = add i64 %145, -4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %143, !llvm.loop !25

192:                                              ; preds = %143, %132
  %193 = phi i64 [ 0, %132 ], [ %189, %143 ]
  %194 = icmp eq i64 %139, 0
  br i1 %194, label %211, label %195

195:                                              ; preds = %192, %195
  %196 = phi i64 [ %208, %195 ], [ %193, %192 ]
  %197 = phi i64 [ %209, %195 ], [ %139, %192 ]
  %198 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %406, i64 %196
  %199 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %408, i64 %196
  %200 = bitcast %"class.viz::SurfaceAllocationGroup"** %198 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8, !alias.scope !20
  %202 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %198, i64 2
  %203 = bitcast %"class.viz::SurfaceAllocationGroup"** %202 to <2 x i64>*
  %204 = load <2 x i64>, <2 x i64>* %203, align 8, !alias.scope !20
  %205 = bitcast %"class.viz::SurfaceAllocationGroup"** %199 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %205, align 8, !alias.scope !23, !noalias !20
  %206 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %199, i64 2
  %207 = bitcast %"class.viz::SurfaceAllocationGroup"** %206 to <2 x i64>*
  store <2 x i64> %204, <2 x i64>* %207, align 8, !alias.scope !23, !noalias !20
  %208 = add i64 %196, 4
  %209 = add i64 %197, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %195, !llvm.loop !27

211:                                              ; preds = %195, %192
  %212 = icmp eq i64 %91, %133
  br i1 %212, label %456, label %93

213:                                              ; preds = %78, %405
  %214 = phi %"class.viz::SurfaceAllocationGroup"** [ %407, %405 ], [ %4, %78 ]
  %215 = phi %"class.viz::SurfaceAllocationGroup"** [ %406, %405 ], [ %80, %78 ]
  %216 = phi %"class.viz::SurfaceAllocationGroup"** [ %408, %405 ], [ %0, %78 ]
  %217 = icmp eq %"class.viz::SurfaceAllocationGroup"** %215, %81
  br i1 %217, label %218, label %393

218:                                              ; preds = %213
  %219 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %214 to i64
  %220 = icmp eq %"class.viz::SurfaceAllocationGroup"** %214, %80
  br i1 %220, label %456, label %221

221:                                              ; preds = %218
  %222 = add nsw i64 %75, -1
  %223 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %222
  %224 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %223 to i64
  %225 = sub i64 %224, %219
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = icmp ult i64 %227, 4
  br i1 %228, label %322, label %229

229:                                              ; preds = %221
  %230 = add nsw i64 %75, -1
  %231 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %230
  %232 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %231 to i64
  %233 = sub i64 %232, %219
  %234 = lshr i64 %233, 3
  %235 = add nuw nsw i64 %234, 1
  %236 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %235
  %237 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %235
  %238 = icmp ult %"class.viz::SurfaceAllocationGroup"** %216, %237
  %239 = icmp ult %"class.viz::SurfaceAllocationGroup"** %214, %236
  %240 = and i1 %238, %239
  br i1 %240, label %322, label %241

241:                                              ; preds = %229
  %242 = and i64 %227, 4611686018427387900
  %243 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %242
  %244 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %242
  %245 = add nsw i64 %242, -4
  %246 = lshr exact i64 %245, 2
  %247 = add nuw nsw i64 %246, 1
  %248 = and i64 %247, 3
  %249 = icmp ult i64 %245, 12
  br i1 %249, label %301, label %250

250:                                              ; preds = %241
  %251 = sub nsw i64 %247, %248
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %298, %252 ]
  %254 = phi i64 [ %251, %250 ], [ %299, %252 ]
  %255 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %253
  %256 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %253
  %257 = bitcast %"class.viz::SurfaceAllocationGroup"** %255 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 8, !alias.scope !28
  %259 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %255, i64 2
  %260 = bitcast %"class.viz::SurfaceAllocationGroup"** %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 8, !alias.scope !28
  %262 = bitcast %"class.viz::SurfaceAllocationGroup"** %256 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %262, align 8, !alias.scope !31, !noalias !28
  %263 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %256, i64 2
  %264 = bitcast %"class.viz::SurfaceAllocationGroup"** %263 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %264, align 8, !alias.scope !31, !noalias !28
  %265 = or i64 %253, 4
  %266 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %265
  %267 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %265
  %268 = bitcast %"class.viz::SurfaceAllocationGroup"** %266 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !28
  %270 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %266, i64 2
  %271 = bitcast %"class.viz::SurfaceAllocationGroup"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !28
  %273 = bitcast %"class.viz::SurfaceAllocationGroup"** %267 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !31, !noalias !28
  %274 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %267, i64 2
  %275 = bitcast %"class.viz::SurfaceAllocationGroup"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !31, !noalias !28
  %276 = or i64 %253, 8
  %277 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %276
  %278 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %276
  %279 = bitcast %"class.viz::SurfaceAllocationGroup"** %277 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !28
  %281 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %277, i64 2
  %282 = bitcast %"class.viz::SurfaceAllocationGroup"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !28
  %284 = bitcast %"class.viz::SurfaceAllocationGroup"** %278 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !31, !noalias !28
  %285 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %278, i64 2
  %286 = bitcast %"class.viz::SurfaceAllocationGroup"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !31, !noalias !28
  %287 = or i64 %253, 12
  %288 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %287
  %289 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %287
  %290 = bitcast %"class.viz::SurfaceAllocationGroup"** %288 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !28
  %292 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %288, i64 2
  %293 = bitcast %"class.viz::SurfaceAllocationGroup"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !28
  %295 = bitcast %"class.viz::SurfaceAllocationGroup"** %289 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !31, !noalias !28
  %296 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %289, i64 2
  %297 = bitcast %"class.viz::SurfaceAllocationGroup"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !31, !noalias !28
  %298 = add i64 %253, 16
  %299 = add i64 %254, -4
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %252, !llvm.loop !33

301:                                              ; preds = %252, %241
  %302 = phi i64 [ 0, %241 ], [ %298, %252 ]
  %303 = icmp eq i64 %248, 0
  br i1 %303, label %320, label %304

304:                                              ; preds = %301, %304
  %305 = phi i64 [ %317, %304 ], [ %302, %301 ]
  %306 = phi i64 [ %318, %304 ], [ %248, %301 ]
  %307 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 %305
  %308 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 %305
  %309 = bitcast %"class.viz::SurfaceAllocationGroup"** %307 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 8, !alias.scope !28
  %311 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %307, i64 2
  %312 = bitcast %"class.viz::SurfaceAllocationGroup"** %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !alias.scope !28
  %314 = bitcast %"class.viz::SurfaceAllocationGroup"** %308 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %314, align 8, !alias.scope !31, !noalias !28
  %315 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %308, i64 2
  %316 = bitcast %"class.viz::SurfaceAllocationGroup"** %315 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %316, align 8, !alias.scope !31, !noalias !28
  %317 = add i64 %305, 4
  %318 = add i64 %306, -1
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %320, label %304, !llvm.loop !34

320:                                              ; preds = %304, %301
  %321 = icmp eq i64 %227, %242
  br i1 %321, label %456, label %322

322:                                              ; preds = %320, %229, %221
  %323 = phi %"class.viz::SurfaceAllocationGroup"** [ %214, %229 ], [ %214, %221 ], [ %243, %320 ]
  %324 = phi %"class.viz::SurfaceAllocationGroup"** [ %216, %229 ], [ %216, %221 ], [ %244, %320 ]
  %325 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %323 to i64
  %326 = add nsw i64 %75, -1
  %327 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %326
  %328 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %327 to i64
  %329 = sub i64 %328, %325
  %330 = lshr i64 %329, 3
  %331 = add nuw nsw i64 %330, 1
  %332 = and i64 %331, 7
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %345, label %334

334:                                              ; preds = %322, %334
  %335 = phi %"class.viz::SurfaceAllocationGroup"** [ %341, %334 ], [ %323, %322 ]
  %336 = phi %"class.viz::SurfaceAllocationGroup"** [ %342, %334 ], [ %324, %322 ]
  %337 = phi i64 [ %343, %334 ], [ %332, %322 ]
  %338 = bitcast %"class.viz::SurfaceAllocationGroup"** %335 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = bitcast %"class.viz::SurfaceAllocationGroup"** %336 to i64*
  store i64 %339, i64* %340, align 8
  %341 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 1
  %342 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 1
  %343 = add i64 %337, -1
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %334, !llvm.loop !35

345:                                              ; preds = %334, %322
  %346 = phi %"class.viz::SurfaceAllocationGroup"** [ %323, %322 ], [ %341, %334 ]
  %347 = phi %"class.viz::SurfaceAllocationGroup"** [ %324, %322 ], [ %342, %334 ]
  %348 = icmp ult i64 %329, 56
  br i1 %348, label %456, label %349

349:                                              ; preds = %345, %349
  %350 = phi %"class.viz::SurfaceAllocationGroup"** [ %390, %349 ], [ %346, %345 ]
  %351 = phi %"class.viz::SurfaceAllocationGroup"** [ %391, %349 ], [ %347, %345 ]
  %352 = bitcast %"class.viz::SurfaceAllocationGroup"** %350 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast %"class.viz::SurfaceAllocationGroup"** %351 to i64*
  store i64 %353, i64* %354, align 8
  %355 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 1
  %356 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 1
  %357 = bitcast %"class.viz::SurfaceAllocationGroup"** %355 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast %"class.viz::SurfaceAllocationGroup"** %356 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 2
  %361 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 2
  %362 = bitcast %"class.viz::SurfaceAllocationGroup"** %360 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast %"class.viz::SurfaceAllocationGroup"** %361 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 3
  %366 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 3
  %367 = bitcast %"class.viz::SurfaceAllocationGroup"** %365 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast %"class.viz::SurfaceAllocationGroup"** %366 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 4
  %371 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 4
  %372 = bitcast %"class.viz::SurfaceAllocationGroup"** %370 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = bitcast %"class.viz::SurfaceAllocationGroup"** %371 to i64*
  store i64 %373, i64* %374, align 8
  %375 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 5
  %376 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 5
  %377 = bitcast %"class.viz::SurfaceAllocationGroup"** %375 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = bitcast %"class.viz::SurfaceAllocationGroup"** %376 to i64*
  store i64 %378, i64* %379, align 8
  %380 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 6
  %381 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 6
  %382 = bitcast %"class.viz::SurfaceAllocationGroup"** %380 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = bitcast %"class.viz::SurfaceAllocationGroup"** %381 to i64*
  store i64 %383, i64* %384, align 8
  %385 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 7
  %386 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 7
  %387 = bitcast %"class.viz::SurfaceAllocationGroup"** %385 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = bitcast %"class.viz::SurfaceAllocationGroup"** %386 to i64*
  store i64 %388, i64* %389, align 8
  %390 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %350, i64 8
  %391 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 8
  %392 = icmp eq %"class.viz::SurfaceAllocationGroup"** %390, %80
  br i1 %392, label %456, label %349, !llvm.loop !36

393:                                              ; preds = %213
  %394 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, align 8
  %395 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, align 8
  %396 = icmp ult %"class.viz::SurfaceAllocationGroup"* %394, %395
  br i1 %396, label %397, label %401

397:                                              ; preds = %393
  %398 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %394 to i64
  %399 = bitcast %"class.viz::SurfaceAllocationGroup"** %216 to i64*
  store i64 %398, i64* %399, align 8
  %400 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 1
  br label %405

401:                                              ; preds = %393
  %402 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %395 to i64
  %403 = bitcast %"class.viz::SurfaceAllocationGroup"** %216 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 1
  br label %405

405:                                              ; preds = %401, %397
  %406 = phi %"class.viz::SurfaceAllocationGroup"** [ %400, %397 ], [ %215, %401 ]
  %407 = phi %"class.viz::SurfaceAllocationGroup"** [ %214, %397 ], [ %404, %401 ]
  %408 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %216, i64 1
  %409 = icmp eq %"class.viz::SurfaceAllocationGroup"** %407, %80
  br i1 %409, label %82, label %213

410:                                              ; preds = %116, %410
  %411 = phi %"class.viz::SurfaceAllocationGroup"** [ %451, %410 ], [ %117, %116 ]
  %412 = phi %"class.viz::SurfaceAllocationGroup"** [ %452, %410 ], [ %118, %116 ]
  %413 = bitcast %"class.viz::SurfaceAllocationGroup"** %411 to i64*
  %414 = load i64, i64* %413, align 8
  %415 = bitcast %"class.viz::SurfaceAllocationGroup"** %412 to i64*
  store i64 %414, i64* %415, align 8
  %416 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 1
  %417 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 1
  %418 = bitcast %"class.viz::SurfaceAllocationGroup"** %416 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"class.viz::SurfaceAllocationGroup"** %417 to i64*
  store i64 %419, i64* %420, align 8
  %421 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 2
  %422 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 2
  %423 = bitcast %"class.viz::SurfaceAllocationGroup"** %421 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"class.viz::SurfaceAllocationGroup"** %422 to i64*
  store i64 %424, i64* %425, align 8
  %426 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 3
  %427 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 3
  %428 = bitcast %"class.viz::SurfaceAllocationGroup"** %426 to i64*
  %429 = load i64, i64* %428, align 8
  %430 = bitcast %"class.viz::SurfaceAllocationGroup"** %427 to i64*
  store i64 %429, i64* %430, align 8
  %431 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 4
  %432 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 4
  %433 = bitcast %"class.viz::SurfaceAllocationGroup"** %431 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = bitcast %"class.viz::SurfaceAllocationGroup"** %432 to i64*
  store i64 %434, i64* %435, align 8
  %436 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 5
  %437 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 5
  %438 = bitcast %"class.viz::SurfaceAllocationGroup"** %436 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = bitcast %"class.viz::SurfaceAllocationGroup"** %437 to i64*
  store i64 %439, i64* %440, align 8
  %441 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 6
  %442 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 6
  %443 = bitcast %"class.viz::SurfaceAllocationGroup"** %441 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = bitcast %"class.viz::SurfaceAllocationGroup"** %442 to i64*
  store i64 %444, i64* %445, align 8
  %446 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 7
  %447 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 7
  %448 = bitcast %"class.viz::SurfaceAllocationGroup"** %446 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.viz::SurfaceAllocationGroup"** %447 to i64*
  store i64 %449, i64* %450, align 8
  %451 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %411, i64 8
  %452 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %412, i64 8
  %453 = icmp eq %"class.viz::SurfaceAllocationGroup"** %451, %81
  br i1 %453, label %456, label %410, !llvm.loop !37

454:                                              ; preds = %74
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %0, %"class.viz::SurfaceAllocationGroup"** %76, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %75, %"class.viz::SurfaceAllocationGroup"** %4, i64 %5)
  %455 = sub nsw i64 %3, %75
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %76, %"class.viz::SurfaceAllocationGroup"** %1, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %455, %"class.viz::SurfaceAllocationGroup"** %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_SK_T_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %0, %"class.viz::SurfaceAllocationGroup"** %76, %"class.viz::SurfaceAllocationGroup"** %1, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %75, i64 %455, %"class.viz::SurfaceAllocationGroup"** %4, i64 %5)
  ret void

456:                                              ; preds = %116, %410, %345, %349, %48, %468, %211, %320, %218, %82, %22, %20, %8, %13, %6, %6
  ret void

457:                                              ; preds = %63
  %458 = inttoptr i64 %68 to %"class.viz::SurfaceAllocationGroup"*
  br label %459

459:                                              ; preds = %464, %457
  %460 = phi %"class.viz::SurfaceAllocationGroup"** [ %66, %457 ], [ %461, %464 ]
  %461 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %460, i64 -1
  %462 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %461, align 8
  %463 = icmp ugt %"class.viz::SurfaceAllocationGroup"* %462, %458
  br i1 %463, label %464, label %468

464:                                              ; preds = %459
  %465 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %462 to i64
  %466 = bitcast %"class.viz::SurfaceAllocationGroup"** %460 to i64*
  store i64 %465, i64* %466, align 8
  %467 = icmp eq %"class.viz::SurfaceAllocationGroup"** %461, %0
  br i1 %467, label %468, label %459

468:                                              ; preds = %459, %464, %63
  %469 = phi %"class.viz::SurfaceAllocationGroup"** [ %0, %63 ], [ %460, %459 ], [ %0, %464 ]
  %470 = bitcast %"class.viz::SurfaceAllocationGroup"** %469 to i64*
  store i64 %68, i64* %470, align 8
  %471 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %52, i64 2
  %472 = icmp eq %"class.viz::SurfaceAllocationGroup"** %471, %1
  br i1 %472, label %456, label %51
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeE(%"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1), i64, %"class.viz::SurfaceAllocationGroup"**) local_unnamed_addr #0 comdat {
  switch i64 %3, label %29 [
    i64 0, label %454
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %"class.viz::SurfaceAllocationGroup"** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.viz::SurfaceAllocationGroup"** %4 to i64*
  store i64 %8, i64* %9, align 8
  br label %454

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -1
  %12 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %11, align 8
  %13 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, align 8
  %14 = icmp ult %"class.viz::SurfaceAllocationGroup"* %12, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %10
  %16 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %12 to i64
  %17 = bitcast %"class.viz::SurfaceAllocationGroup"** %4 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 1
  %19 = bitcast %"class.viz::SurfaceAllocationGroup"** %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.viz::SurfaceAllocationGroup"** %18 to i64*
  store i64 %20, i64* %21, align 8
  br label %454

22:                                               ; preds = %10
  %23 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %13 to i64
  %24 = bitcast %"class.viz::SurfaceAllocationGroup"** %4 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 1
  %26 = bitcast %"class.viz::SurfaceAllocationGroup"** %11 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.viz::SurfaceAllocationGroup"** %25 to i64*
  store i64 %27, i64* %28, align 8
  br label %454

29:                                               ; preds = %5
  %30 = icmp slt i64 %3, 9
  br i1 %30, label %31, label %77

31:                                               ; preds = %29
  %32 = icmp eq %"class.viz::SurfaceAllocationGroup"** %0, %1
  br i1 %32, label %454, label %33

33:                                               ; preds = %31
  %34 = bitcast %"class.viz::SurfaceAllocationGroup"** %0 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.viz::SurfaceAllocationGroup"** %4 to i64*
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 1
  %38 = icmp eq %"class.viz::SurfaceAllocationGroup"** %37, %1
  br i1 %38, label %454, label %39

39:                                               ; preds = %33
  %40 = inttoptr i64 %35 to %"class.viz::SurfaceAllocationGroup"*
  br label %41

41:                                               ; preds = %74, %39
  %42 = phi i64 [ %76, %74 ], [ %35, %39 ]
  %43 = phi %"class.viz::SurfaceAllocationGroup"* [ %75, %74 ], [ %40, %39 ]
  %44 = phi %"class.viz::SurfaceAllocationGroup"** [ %72, %74 ], [ %37, %39 ]
  %45 = phi %"class.viz::SurfaceAllocationGroup"** [ %46, %74 ], [ %4, %39 ]
  %46 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %45, i64 1
  %47 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %44, align 8
  %48 = icmp ult %"class.viz::SurfaceAllocationGroup"* %47, %43
  br i1 %48, label %49, label %68

49:                                               ; preds = %41
  %50 = bitcast %"class.viz::SurfaceAllocationGroup"** %46 to i64*
  store i64 %42, i64* %50, align 8
  %51 = icmp eq %"class.viz::SurfaceAllocationGroup"** %45, %4
  br i1 %51, label %64, label %52

52:                                               ; preds = %49, %60
  %53 = phi %"class.viz::SurfaceAllocationGroup"** [ %54, %60 ], [ %45, %49 ]
  %54 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %53, i64 -1
  %55 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %44, align 8
  %56 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %54, align 8
  %57 = icmp ult %"class.viz::SurfaceAllocationGroup"* %55, %56
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = bitcast %"class.viz::SurfaceAllocationGroup"** %53 to i64*
  br label %64

60:                                               ; preds = %52
  %61 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %56 to i64
  %62 = bitcast %"class.viz::SurfaceAllocationGroup"** %53 to i64*
  store i64 %61, i64* %62, align 8
  %63 = icmp eq %"class.viz::SurfaceAllocationGroup"** %54, %4
  br i1 %63, label %64, label %52

64:                                               ; preds = %60, %58, %49
  %65 = phi i64* [ %36, %49 ], [ %59, %58 ], [ %36, %60 ]
  %66 = bitcast %"class.viz::SurfaceAllocationGroup"** %44 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %65, align 8
  br label %71

68:                                               ; preds = %41
  %69 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %47 to i64
  %70 = bitcast %"class.viz::SurfaceAllocationGroup"** %46 to i64*
  store i64 %69, i64* %70, align 8
  br label %71

71:                                               ; preds = %68, %64
  %72 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %44, i64 1
  %73 = icmp eq %"class.viz::SurfaceAllocationGroup"** %72, %1
  br i1 %73, label %454, label %74

74:                                               ; preds = %71
  %75 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %46, align 8
  %76 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %75 to i64
  br label %41

77:                                               ; preds = %29
  %78 = lshr i64 %3, 1
  %79 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 %78
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %0, %"class.viz::SurfaceAllocationGroup"** %79, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %78, %"class.viz::SurfaceAllocationGroup"** %4, i64 %78)
  %80 = sub nsw i64 %3, %78
  %81 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %4, i64 %78
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_T_NS_15iterator_traitsISK_E15difference_typeEPNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %79, %"class.viz::SurfaceAllocationGroup"** %1, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %2, i64 %80, %"class.viz::SurfaceAllocationGroup"** %81, i64 %80)
  %82 = icmp eq i64 %78, 0
  br i1 %82, label %83, label %257

83:                                               ; preds = %449, %77
  %84 = phi %"class.viz::SurfaceAllocationGroup"** [ %79, %77 ], [ %450, %449 ]
  %85 = phi %"class.viz::SurfaceAllocationGroup"** [ %4, %77 ], [ %452, %449 ]
  %86 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %84 to i64
  %87 = icmp eq %"class.viz::SurfaceAllocationGroup"** %84, %1
  br i1 %87, label %454, label %88

88:                                               ; preds = %83
  %89 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -1
  %90 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %89 to i64
  %91 = sub i64 %90, %86
  %92 = lshr i64 %91, 3
  %93 = add nuw nsw i64 %92, 1
  %94 = icmp ult i64 %93, 4
  br i1 %94, label %187, label %95

95:                                               ; preds = %88
  %96 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -1
  %97 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %96 to i64
  %98 = sub i64 %97, %86
  %99 = lshr i64 %98, 3
  %100 = add nuw nsw i64 %99, 1
  %101 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %100
  %102 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %100
  %103 = icmp ult %"class.viz::SurfaceAllocationGroup"** %85, %102
  %104 = icmp ult %"class.viz::SurfaceAllocationGroup"** %84, %101
  %105 = and i1 %103, %104
  br i1 %105, label %187, label %106

106:                                              ; preds = %95
  %107 = and i64 %93, 4611686018427387900
  %108 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %107
  %109 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %107
  %110 = add nsw i64 %107, -4
  %111 = lshr exact i64 %110, 2
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 3
  %114 = icmp ult i64 %110, 12
  br i1 %114, label %166, label %115

115:                                              ; preds = %106
  %116 = sub nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 0, %115 ], [ %163, %117 ]
  %119 = phi i64 [ %116, %115 ], [ %164, %117 ]
  %120 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %118
  %121 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %118
  %122 = bitcast %"class.viz::SurfaceAllocationGroup"** %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !38
  %124 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %121, i64 2
  %125 = bitcast %"class.viz::SurfaceAllocationGroup"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !38
  %127 = bitcast %"class.viz::SurfaceAllocationGroup"** %120 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %127, align 8, !alias.scope !41, !noalias !38
  %128 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %120, i64 2
  %129 = bitcast %"class.viz::SurfaceAllocationGroup"** %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 8, !alias.scope !41, !noalias !38
  %130 = or i64 %118, 4
  %131 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %130
  %132 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %130
  %133 = bitcast %"class.viz::SurfaceAllocationGroup"** %132 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 8, !alias.scope !38
  %135 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %132, i64 2
  %136 = bitcast %"class.viz::SurfaceAllocationGroup"** %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !38
  %138 = bitcast %"class.viz::SurfaceAllocationGroup"** %131 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %138, align 8, !alias.scope !41, !noalias !38
  %139 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %131, i64 2
  %140 = bitcast %"class.viz::SurfaceAllocationGroup"** %139 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %140, align 8, !alias.scope !41, !noalias !38
  %141 = or i64 %118, 8
  %142 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %141
  %143 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %141
  %144 = bitcast %"class.viz::SurfaceAllocationGroup"** %143 to <2 x i64>*
  %145 = load <2 x i64>, <2 x i64>* %144, align 8, !alias.scope !38
  %146 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %143, i64 2
  %147 = bitcast %"class.viz::SurfaceAllocationGroup"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !38
  %149 = bitcast %"class.viz::SurfaceAllocationGroup"** %142 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %149, align 8, !alias.scope !41, !noalias !38
  %150 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %142, i64 2
  %151 = bitcast %"class.viz::SurfaceAllocationGroup"** %150 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %151, align 8, !alias.scope !41, !noalias !38
  %152 = or i64 %118, 12
  %153 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %152
  %154 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %152
  %155 = bitcast %"class.viz::SurfaceAllocationGroup"** %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !38
  %157 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %154, i64 2
  %158 = bitcast %"class.viz::SurfaceAllocationGroup"** %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !38
  %160 = bitcast %"class.viz::SurfaceAllocationGroup"** %153 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %160, align 8, !alias.scope !41, !noalias !38
  %161 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %153, i64 2
  %162 = bitcast %"class.viz::SurfaceAllocationGroup"** %161 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 8, !alias.scope !41, !noalias !38
  %163 = add i64 %118, 16
  %164 = add i64 %119, -4
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %117, !llvm.loop !43

166:                                              ; preds = %117, %106
  %167 = phi i64 [ 0, %106 ], [ %163, %117 ]
  %168 = icmp eq i64 %113, 0
  br i1 %168, label %185, label %169

169:                                              ; preds = %166, %169
  %170 = phi i64 [ %182, %169 ], [ %167, %166 ]
  %171 = phi i64 [ %183, %169 ], [ %113, %166 ]
  %172 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 %170
  %173 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %84, i64 %170
  %174 = bitcast %"class.viz::SurfaceAllocationGroup"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !38
  %176 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %173, i64 2
  %177 = bitcast %"class.viz::SurfaceAllocationGroup"** %176 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 8, !alias.scope !38
  %179 = bitcast %"class.viz::SurfaceAllocationGroup"** %172 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %179, align 8, !alias.scope !41, !noalias !38
  %180 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %172, i64 2
  %181 = bitcast %"class.viz::SurfaceAllocationGroup"** %180 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %181, align 8, !alias.scope !41, !noalias !38
  %182 = add i64 %170, 4
  %183 = add i64 %171, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %169, !llvm.loop !44

185:                                              ; preds = %169, %166
  %186 = icmp eq i64 %93, %107
  br i1 %186, label %454, label %187

187:                                              ; preds = %185, %95, %88
  %188 = phi %"class.viz::SurfaceAllocationGroup"** [ %85, %95 ], [ %85, %88 ], [ %108, %185 ]
  %189 = phi %"class.viz::SurfaceAllocationGroup"** [ %84, %95 ], [ %84, %88 ], [ %109, %185 ]
  %190 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %189 to i64
  %191 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 -1
  %192 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %191 to i64
  %193 = sub i64 %192, %190
  %194 = lshr i64 %193, 3
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 7
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %209, label %198

198:                                              ; preds = %187, %198
  %199 = phi %"class.viz::SurfaceAllocationGroup"** [ %206, %198 ], [ %188, %187 ]
  %200 = phi %"class.viz::SurfaceAllocationGroup"** [ %205, %198 ], [ %189, %187 ]
  %201 = phi i64 [ %207, %198 ], [ %196, %187 ]
  %202 = bitcast %"class.viz::SurfaceAllocationGroup"** %200 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.viz::SurfaceAllocationGroup"** %199 to i64*
  store i64 %203, i64* %204, align 8
  %205 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %200, i64 1
  %206 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %199, i64 1
  %207 = add i64 %201, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %198, !llvm.loop !45

209:                                              ; preds = %198, %187
  %210 = phi %"class.viz::SurfaceAllocationGroup"** [ %188, %187 ], [ %206, %198 ]
  %211 = phi %"class.viz::SurfaceAllocationGroup"** [ %189, %187 ], [ %205, %198 ]
  %212 = icmp ult i64 %193, 56
  br i1 %212, label %454, label %213

213:                                              ; preds = %209, %213
  %214 = phi %"class.viz::SurfaceAllocationGroup"** [ %255, %213 ], [ %210, %209 ]
  %215 = phi %"class.viz::SurfaceAllocationGroup"** [ %254, %213 ], [ %211, %209 ]
  %216 = bitcast %"class.viz::SurfaceAllocationGroup"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.viz::SurfaceAllocationGroup"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 1
  %220 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 1
  %221 = bitcast %"class.viz::SurfaceAllocationGroup"** %219 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.viz::SurfaceAllocationGroup"** %220 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 2
  %225 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 2
  %226 = bitcast %"class.viz::SurfaceAllocationGroup"** %224 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.viz::SurfaceAllocationGroup"** %225 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 3
  %230 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 3
  %231 = bitcast %"class.viz::SurfaceAllocationGroup"** %229 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.viz::SurfaceAllocationGroup"** %230 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 4
  %235 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 4
  %236 = bitcast %"class.viz::SurfaceAllocationGroup"** %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.viz::SurfaceAllocationGroup"** %235 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 5
  %240 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 5
  %241 = bitcast %"class.viz::SurfaceAllocationGroup"** %239 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.viz::SurfaceAllocationGroup"** %240 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 6
  %245 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 6
  %246 = bitcast %"class.viz::SurfaceAllocationGroup"** %244 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.viz::SurfaceAllocationGroup"** %245 to i64*
  store i64 %247, i64* %248, align 8
  %249 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 7
  %250 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 7
  %251 = bitcast %"class.viz::SurfaceAllocationGroup"** %249 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"class.viz::SurfaceAllocationGroup"** %250 to i64*
  store i64 %252, i64* %253, align 8
  %254 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %215, i64 8
  %255 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %214, i64 8
  %256 = icmp eq %"class.viz::SurfaceAllocationGroup"** %254, %1
  br i1 %256, label %454, label %213, !llvm.loop !46

257:                                              ; preds = %77, %449
  %258 = phi %"class.viz::SurfaceAllocationGroup"** [ %452, %449 ], [ %4, %77 ]
  %259 = phi %"class.viz::SurfaceAllocationGroup"** [ %451, %449 ], [ %0, %77 ]
  %260 = phi %"class.viz::SurfaceAllocationGroup"** [ %450, %449 ], [ %79, %77 ]
  %261 = icmp eq %"class.viz::SurfaceAllocationGroup"** %260, %1
  br i1 %261, label %262, label %437

262:                                              ; preds = %257
  %263 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %259 to i64
  %264 = icmp eq %"class.viz::SurfaceAllocationGroup"** %259, %79
  br i1 %264, label %454, label %265

265:                                              ; preds = %262
  %266 = add nsw i64 %78, -1
  %267 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 %266
  %268 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %267 to i64
  %269 = sub i64 %268, %263
  %270 = lshr i64 %269, 3
  %271 = add nuw nsw i64 %270, 1
  %272 = icmp ult i64 %271, 4
  br i1 %272, label %366, label %273

273:                                              ; preds = %265
  %274 = add nsw i64 %78, -1
  %275 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 %274
  %276 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %275 to i64
  %277 = sub i64 %276, %263
  %278 = lshr i64 %277, 3
  %279 = add nuw nsw i64 %278, 1
  %280 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %279
  %281 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %279
  %282 = icmp ult %"class.viz::SurfaceAllocationGroup"** %258, %281
  %283 = icmp ult %"class.viz::SurfaceAllocationGroup"** %259, %280
  %284 = and i1 %282, %283
  br i1 %284, label %366, label %285

285:                                              ; preds = %273
  %286 = and i64 %271, 4611686018427387900
  %287 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %286
  %288 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %286
  %289 = add nsw i64 %286, -4
  %290 = lshr exact i64 %289, 2
  %291 = add nuw nsw i64 %290, 1
  %292 = and i64 %291, 3
  %293 = icmp ult i64 %289, 12
  br i1 %293, label %345, label %294

294:                                              ; preds = %285
  %295 = sub nsw i64 %291, %292
  br label %296

296:                                              ; preds = %296, %294
  %297 = phi i64 [ 0, %294 ], [ %342, %296 ]
  %298 = phi i64 [ %295, %294 ], [ %343, %296 ]
  %299 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %297
  %300 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %297
  %301 = bitcast %"class.viz::SurfaceAllocationGroup"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !47
  %303 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %300, i64 2
  %304 = bitcast %"class.viz::SurfaceAllocationGroup"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !47
  %306 = bitcast %"class.viz::SurfaceAllocationGroup"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !50, !noalias !47
  %307 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %299, i64 2
  %308 = bitcast %"class.viz::SurfaceAllocationGroup"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !50, !noalias !47
  %309 = or i64 %297, 4
  %310 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %309
  %311 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %309
  %312 = bitcast %"class.viz::SurfaceAllocationGroup"** %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 8, !alias.scope !47
  %314 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %311, i64 2
  %315 = bitcast %"class.viz::SurfaceAllocationGroup"** %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 8, !alias.scope !47
  %317 = bitcast %"class.viz::SurfaceAllocationGroup"** %310 to <2 x i64>*
  store <2 x i64> %313, <2 x i64>* %317, align 8, !alias.scope !50, !noalias !47
  %318 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %310, i64 2
  %319 = bitcast %"class.viz::SurfaceAllocationGroup"** %318 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %319, align 8, !alias.scope !50, !noalias !47
  %320 = or i64 %297, 8
  %321 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %320
  %322 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %320
  %323 = bitcast %"class.viz::SurfaceAllocationGroup"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !47
  %325 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %322, i64 2
  %326 = bitcast %"class.viz::SurfaceAllocationGroup"** %325 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 8, !alias.scope !47
  %328 = bitcast %"class.viz::SurfaceAllocationGroup"** %321 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %328, align 8, !alias.scope !50, !noalias !47
  %329 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %321, i64 2
  %330 = bitcast %"class.viz::SurfaceAllocationGroup"** %329 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %330, align 8, !alias.scope !50, !noalias !47
  %331 = or i64 %297, 12
  %332 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %331
  %333 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %331
  %334 = bitcast %"class.viz::SurfaceAllocationGroup"** %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 8, !alias.scope !47
  %336 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %333, i64 2
  %337 = bitcast %"class.viz::SurfaceAllocationGroup"** %336 to <2 x i64>*
  %338 = load <2 x i64>, <2 x i64>* %337, align 8, !alias.scope !47
  %339 = bitcast %"class.viz::SurfaceAllocationGroup"** %332 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %339, align 8, !alias.scope !50, !noalias !47
  %340 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %332, i64 2
  %341 = bitcast %"class.viz::SurfaceAllocationGroup"** %340 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %341, align 8, !alias.scope !50, !noalias !47
  %342 = add i64 %297, 16
  %343 = add i64 %298, -4
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %296, !llvm.loop !52

345:                                              ; preds = %296, %285
  %346 = phi i64 [ 0, %285 ], [ %342, %296 ]
  %347 = icmp eq i64 %292, 0
  br i1 %347, label %364, label %348

348:                                              ; preds = %345, %348
  %349 = phi i64 [ %361, %348 ], [ %346, %345 ]
  %350 = phi i64 [ %362, %348 ], [ %292, %345 ]
  %351 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 %349
  %352 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 %349
  %353 = bitcast %"class.viz::SurfaceAllocationGroup"** %352 to <2 x i64>*
  %354 = load <2 x i64>, <2 x i64>* %353, align 8, !alias.scope !47
  %355 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %352, i64 2
  %356 = bitcast %"class.viz::SurfaceAllocationGroup"** %355 to <2 x i64>*
  %357 = load <2 x i64>, <2 x i64>* %356, align 8, !alias.scope !47
  %358 = bitcast %"class.viz::SurfaceAllocationGroup"** %351 to <2 x i64>*
  store <2 x i64> %354, <2 x i64>* %358, align 8, !alias.scope !50, !noalias !47
  %359 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %351, i64 2
  %360 = bitcast %"class.viz::SurfaceAllocationGroup"** %359 to <2 x i64>*
  store <2 x i64> %357, <2 x i64>* %360, align 8, !alias.scope !50, !noalias !47
  %361 = add i64 %349, 4
  %362 = add i64 %350, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %348, !llvm.loop !53

364:                                              ; preds = %348, %345
  %365 = icmp eq i64 %271, %286
  br i1 %365, label %454, label %366

366:                                              ; preds = %364, %273, %265
  %367 = phi %"class.viz::SurfaceAllocationGroup"** [ %258, %273 ], [ %258, %265 ], [ %287, %364 ]
  %368 = phi %"class.viz::SurfaceAllocationGroup"** [ %259, %273 ], [ %259, %265 ], [ %288, %364 ]
  %369 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %368 to i64
  %370 = add nsw i64 %78, -1
  %371 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %0, i64 %370
  %372 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %371 to i64
  %373 = sub i64 %372, %369
  %374 = lshr i64 %373, 3
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 7
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %389, label %378

378:                                              ; preds = %366, %378
  %379 = phi %"class.viz::SurfaceAllocationGroup"** [ %386, %378 ], [ %367, %366 ]
  %380 = phi %"class.viz::SurfaceAllocationGroup"** [ %385, %378 ], [ %368, %366 ]
  %381 = phi i64 [ %387, %378 ], [ %376, %366 ]
  %382 = bitcast %"class.viz::SurfaceAllocationGroup"** %380 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = bitcast %"class.viz::SurfaceAllocationGroup"** %379 to i64*
  store i64 %383, i64* %384, align 8
  %385 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %380, i64 1
  %386 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %379, i64 1
  %387 = add i64 %381, -1
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %378, !llvm.loop !54

389:                                              ; preds = %378, %366
  %390 = phi %"class.viz::SurfaceAllocationGroup"** [ %367, %366 ], [ %386, %378 ]
  %391 = phi %"class.viz::SurfaceAllocationGroup"** [ %368, %366 ], [ %385, %378 ]
  %392 = icmp ult i64 %373, 56
  br i1 %392, label %454, label %393

393:                                              ; preds = %389, %393
  %394 = phi %"class.viz::SurfaceAllocationGroup"** [ %435, %393 ], [ %390, %389 ]
  %395 = phi %"class.viz::SurfaceAllocationGroup"** [ %434, %393 ], [ %391, %389 ]
  %396 = bitcast %"class.viz::SurfaceAllocationGroup"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.viz::SurfaceAllocationGroup"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 1
  %400 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 1
  %401 = bitcast %"class.viz::SurfaceAllocationGroup"** %399 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.viz::SurfaceAllocationGroup"** %400 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 2
  %405 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 2
  %406 = bitcast %"class.viz::SurfaceAllocationGroup"** %404 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.viz::SurfaceAllocationGroup"** %405 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 3
  %410 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 3
  %411 = bitcast %"class.viz::SurfaceAllocationGroup"** %409 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.viz::SurfaceAllocationGroup"** %410 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 4
  %415 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 4
  %416 = bitcast %"class.viz::SurfaceAllocationGroup"** %414 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.viz::SurfaceAllocationGroup"** %415 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 5
  %420 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 5
  %421 = bitcast %"class.viz::SurfaceAllocationGroup"** %419 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.viz::SurfaceAllocationGroup"** %420 to i64*
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 6
  %425 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 6
  %426 = bitcast %"class.viz::SurfaceAllocationGroup"** %424 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = bitcast %"class.viz::SurfaceAllocationGroup"** %425 to i64*
  store i64 %427, i64* %428, align 8
  %429 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 7
  %430 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 7
  %431 = bitcast %"class.viz::SurfaceAllocationGroup"** %429 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %"class.viz::SurfaceAllocationGroup"** %430 to i64*
  store i64 %432, i64* %433, align 8
  %434 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %395, i64 8
  %435 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %394, i64 8
  %436 = icmp eq %"class.viz::SurfaceAllocationGroup"** %434, %79
  br i1 %436, label %454, label %393, !llvm.loop !55

437:                                              ; preds = %257
  %438 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %260, align 8
  %439 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, align 8
  %440 = icmp ult %"class.viz::SurfaceAllocationGroup"* %438, %439
  br i1 %440, label %441, label %445

441:                                              ; preds = %437
  %442 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %438 to i64
  %443 = bitcast %"class.viz::SurfaceAllocationGroup"** %258 to i64*
  store i64 %442, i64* %443, align 8
  %444 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %260, i64 1
  br label %449

445:                                              ; preds = %437
  %446 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %439 to i64
  %447 = bitcast %"class.viz::SurfaceAllocationGroup"** %258 to i64*
  store i64 %446, i64* %447, align 8
  %448 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %259, i64 1
  br label %449

449:                                              ; preds = %445, %441
  %450 = phi %"class.viz::SurfaceAllocationGroup"** [ %444, %441 ], [ %260, %445 ]
  %451 = phi %"class.viz::SurfaceAllocationGroup"** [ %259, %441 ], [ %448, %445 ]
  %452 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %258, i64 1
  %453 = icmp eq %"class.viz::SurfaceAllocationGroup"** %451, %79
  br i1 %453, label %83, label %257

454:                                              ; preds = %389, %393, %209, %213, %71, %364, %185, %262, %83, %33, %31, %15, %22, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_SK_T_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"**, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1), i64, i64, %"class.viz::SurfaceAllocationGroup"**, i64) local_unnamed_addr #0 comdat {
  %9 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %975, label %11

11:                                               ; preds = %8
  %12 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %1 to i64
  %13 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %0 to i64
  br label %14

14:                                               ; preds = %11, %968
  %15 = phi %"class.viz::SurfaceAllocationGroup"** [ %973, %968 ], [ %2, %11 ]
  %16 = phi i64 [ %972, %968 ], [ %4, %11 ]
  %17 = phi i64 [ %971, %968 ], [ %5, %11 ]
  %18 = phi i64 [ %970, %968 ], [ %12, %11 ]
  %19 = phi i64 [ %969, %968 ], [ %13, %11 ]
  %20 = icmp sgt i64 %16, %7
  %21 = icmp sgt i64 %17, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %29

23:                                               ; preds = %14
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %975, label %25

25:                                               ; preds = %23
  %26 = inttoptr i64 %18 to %"class.viz::SurfaceAllocationGroup"**
  %27 = inttoptr i64 %18 to i8*
  %28 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, align 8
  br label %610

29:                                               ; preds = %14
  %30 = inttoptr i64 %19 to %"class.viz::SurfaceAllocationGroup"**
  %31 = inttoptr i64 %19 to i8*
  %32 = inttoptr i64 %18 to %"class.viz::SurfaceAllocationGroup"**
  %33 = inttoptr i64 %18 to i8*
  %34 = icmp sgt i64 %16, %17
  br i1 %34, label %168, label %35

35:                                               ; preds = %29
  %36 = icmp eq %"class.viz::SurfaceAllocationGroup"** %30, %32
  br i1 %36, label %975, label %37

37:                                               ; preds = %35
  %38 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 -1
  %39 = bitcast %"class.viz::SurfaceAllocationGroup"** %38 to i8*
  %40 = sub i64 0, %19
  %41 = getelementptr i8, i8* %39, i64 %40
  %42 = ptrtoint i8* %41 to i64
  %43 = lshr i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 4
  br i1 %45, label %46, label %73

46:                                               ; preds = %166, %73, %37
  %47 = phi %"class.viz::SurfaceAllocationGroup"** [ %6, %73 ], [ %6, %37 ], [ %89, %166 ]
  %48 = phi %"class.viz::SurfaceAllocationGroup"** [ %30, %73 ], [ %30, %37 ], [ %90, %166 ]
  %49 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %48 to i64
  %50 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 -1
  %51 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %50 to i64
  %52 = sub i64 %51, %49
  %53 = lshr i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 7
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %46, %57
  %58 = phi %"class.viz::SurfaceAllocationGroup"** [ %65, %57 ], [ %47, %46 ]
  %59 = phi %"class.viz::SurfaceAllocationGroup"** [ %64, %57 ], [ %48, %46 ]
  %60 = phi i64 [ %66, %57 ], [ %55, %46 ]
  %61 = bitcast %"class.viz::SurfaceAllocationGroup"** %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.viz::SurfaceAllocationGroup"** %58 to i64*
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %59, i64 1
  %65 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %58, i64 1
  %66 = add i64 %60, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %57, !llvm.loop !56

68:                                               ; preds = %57, %46
  %69 = phi %"class.viz::SurfaceAllocationGroup"** [ undef, %46 ], [ %65, %57 ]
  %70 = phi %"class.viz::SurfaceAllocationGroup"** [ %47, %46 ], [ %65, %57 ]
  %71 = phi %"class.viz::SurfaceAllocationGroup"** [ %48, %46 ], [ %64, %57 ]
  %72 = icmp ult i64 %52, 56
  br i1 %72, label %301, label %334

73:                                               ; preds = %37
  %74 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 -1
  %75 = bitcast %"class.viz::SurfaceAllocationGroup"** %74 to i8*
  %76 = sub i64 0, %19
  %77 = getelementptr i8, i8* %75, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = lshr i64 %78, 3
  %80 = add nuw nsw i64 %79, 1
  %81 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %80
  %82 = bitcast %"class.viz::SurfaceAllocationGroup"** %81 to i8*
  %83 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %80
  %84 = icmp ugt %"class.viz::SurfaceAllocationGroup"** %83, %6
  %85 = icmp ult i8* %31, %82
  %86 = and i1 %84, %85
  br i1 %86, label %46, label %87

87:                                               ; preds = %73
  %88 = and i64 %44, 4611686018427387900
  %89 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %88
  %90 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %88
  %91 = add nsw i64 %88, -4
  %92 = lshr exact i64 %91, 2
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 12
  br i1 %95, label %147, label %96

96:                                               ; preds = %87
  %97 = sub nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %144, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %145, %98 ]
  %101 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %99
  %102 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %99
  %103 = bitcast %"class.viz::SurfaceAllocationGroup"** %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !57
  %105 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %102, i64 2
  %106 = bitcast %"class.viz::SurfaceAllocationGroup"** %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !57
  %108 = bitcast %"class.viz::SurfaceAllocationGroup"** %101 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !60, !noalias !57
  %109 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %101, i64 2
  %110 = bitcast %"class.viz::SurfaceAllocationGroup"** %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8, !alias.scope !60, !noalias !57
  %111 = or i64 %99, 4
  %112 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %111
  %113 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %111
  %114 = bitcast %"class.viz::SurfaceAllocationGroup"** %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !57
  %116 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %113, i64 2
  %117 = bitcast %"class.viz::SurfaceAllocationGroup"** %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8, !alias.scope !57
  %119 = bitcast %"class.viz::SurfaceAllocationGroup"** %112 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %119, align 8, !alias.scope !60, !noalias !57
  %120 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %112, i64 2
  %121 = bitcast %"class.viz::SurfaceAllocationGroup"** %120 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %121, align 8, !alias.scope !60, !noalias !57
  %122 = or i64 %99, 8
  %123 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %122
  %124 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %122
  %125 = bitcast %"class.viz::SurfaceAllocationGroup"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !57
  %127 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %124, i64 2
  %128 = bitcast %"class.viz::SurfaceAllocationGroup"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !57
  %130 = bitcast %"class.viz::SurfaceAllocationGroup"** %123 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 8, !alias.scope !60, !noalias !57
  %131 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %123, i64 2
  %132 = bitcast %"class.viz::SurfaceAllocationGroup"** %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 8, !alias.scope !60, !noalias !57
  %133 = or i64 %99, 12
  %134 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %133
  %135 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %133
  %136 = bitcast %"class.viz::SurfaceAllocationGroup"** %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !57
  %138 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %135, i64 2
  %139 = bitcast %"class.viz::SurfaceAllocationGroup"** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !57
  %141 = bitcast %"class.viz::SurfaceAllocationGroup"** %134 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %141, align 8, !alias.scope !60, !noalias !57
  %142 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %134, i64 2
  %143 = bitcast %"class.viz::SurfaceAllocationGroup"** %142 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 8, !alias.scope !60, !noalias !57
  %144 = add i64 %99, 16
  %145 = add i64 %100, -4
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %98, !llvm.loop !62

147:                                              ; preds = %98, %87
  %148 = phi i64 [ 0, %87 ], [ %144, %98 ]
  %149 = icmp eq i64 %94, 0
  br i1 %149, label %166, label %150

150:                                              ; preds = %147, %150
  %151 = phi i64 [ %163, %150 ], [ %148, %147 ]
  %152 = phi i64 [ %164, %150 ], [ %94, %147 ]
  %153 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %151
  %154 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %30, i64 %151
  %155 = bitcast %"class.viz::SurfaceAllocationGroup"** %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !57
  %157 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %154, i64 2
  %158 = bitcast %"class.viz::SurfaceAllocationGroup"** %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 8, !alias.scope !57
  %160 = bitcast %"class.viz::SurfaceAllocationGroup"** %153 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %160, align 8, !alias.scope !60, !noalias !57
  %161 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %153, i64 2
  %162 = bitcast %"class.viz::SurfaceAllocationGroup"** %161 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 8, !alias.scope !60, !noalias !57
  %163 = add i64 %151, 4
  %164 = add i64 %152, -1
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %150, !llvm.loop !63

166:                                              ; preds = %150, %147
  %167 = icmp eq i64 %44, %88
  br i1 %167, label %301, label %46

168:                                              ; preds = %29
  %169 = icmp eq %"class.viz::SurfaceAllocationGroup"** %15, %32
  br i1 %169, label %975, label %170

170:                                              ; preds = %168
  %171 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %15, i64 -1
  %172 = bitcast %"class.viz::SurfaceAllocationGroup"** %171 to i8*
  %173 = sub i64 0, %18
  %174 = getelementptr i8, i8* %172, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = lshr i64 %175, 3
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 4
  br i1 %178, label %179, label %206

179:                                              ; preds = %299, %206, %170
  %180 = phi %"class.viz::SurfaceAllocationGroup"** [ %6, %206 ], [ %6, %170 ], [ %222, %299 ]
  %181 = phi %"class.viz::SurfaceAllocationGroup"** [ %32, %206 ], [ %32, %170 ], [ %223, %299 ]
  %182 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %181 to i64
  %183 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %15, i64 -1
  %184 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %183 to i64
  %185 = sub i64 %184, %182
  %186 = lshr i64 %185, 3
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 7
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %179, %190
  %191 = phi %"class.viz::SurfaceAllocationGroup"** [ %198, %190 ], [ %180, %179 ]
  %192 = phi %"class.viz::SurfaceAllocationGroup"** [ %197, %190 ], [ %181, %179 ]
  %193 = phi i64 [ %199, %190 ], [ %188, %179 ]
  %194 = bitcast %"class.viz::SurfaceAllocationGroup"** %192 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast %"class.viz::SurfaceAllocationGroup"** %191 to i64*
  store i64 %195, i64* %196, align 8
  %197 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %192, i64 1
  %198 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %191, i64 1
  %199 = add i64 %193, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %190, !llvm.loop !64

201:                                              ; preds = %190, %179
  %202 = phi %"class.viz::SurfaceAllocationGroup"** [ undef, %179 ], [ %198, %190 ]
  %203 = phi %"class.viz::SurfaceAllocationGroup"** [ %180, %179 ], [ %198, %190 ]
  %204 = phi %"class.viz::SurfaceAllocationGroup"** [ %181, %179 ], [ %197, %190 ]
  %205 = icmp ult i64 %185, 56
  br i1 %205, label %378, label %566

206:                                              ; preds = %170
  %207 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %15, i64 -1
  %208 = bitcast %"class.viz::SurfaceAllocationGroup"** %207 to i8*
  %209 = sub i64 0, %18
  %210 = getelementptr i8, i8* %208, i64 %209
  %211 = ptrtoint i8* %210 to i64
  %212 = lshr i64 %211, 3
  %213 = add nuw nsw i64 %212, 1
  %214 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %213
  %215 = bitcast %"class.viz::SurfaceAllocationGroup"** %214 to i8*
  %216 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %213
  %217 = icmp ugt %"class.viz::SurfaceAllocationGroup"** %216, %6
  %218 = icmp ult i8* %33, %215
  %219 = and i1 %217, %218
  br i1 %219, label %179, label %220

220:                                              ; preds = %206
  %221 = and i64 %177, 4611686018427387900
  %222 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %221
  %223 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %221
  %224 = add nsw i64 %221, -4
  %225 = lshr exact i64 %224, 2
  %226 = add nuw nsw i64 %225, 1
  %227 = and i64 %226, 3
  %228 = icmp ult i64 %224, 12
  br i1 %228, label %280, label %229

229:                                              ; preds = %220
  %230 = sub nsw i64 %226, %227
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %277, %231 ]
  %233 = phi i64 [ %230, %229 ], [ %278, %231 ]
  %234 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %232
  %235 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %232
  %236 = bitcast %"class.viz::SurfaceAllocationGroup"** %235 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 8, !alias.scope !65
  %238 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %235, i64 2
  %239 = bitcast %"class.viz::SurfaceAllocationGroup"** %238 to <2 x i64>*
  %240 = load <2 x i64>, <2 x i64>* %239, align 8, !alias.scope !65
  %241 = bitcast %"class.viz::SurfaceAllocationGroup"** %234 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %241, align 8, !alias.scope !68, !noalias !65
  %242 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %234, i64 2
  %243 = bitcast %"class.viz::SurfaceAllocationGroup"** %242 to <2 x i64>*
  store <2 x i64> %240, <2 x i64>* %243, align 8, !alias.scope !68, !noalias !65
  %244 = or i64 %232, 4
  %245 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %244
  %246 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %244
  %247 = bitcast %"class.viz::SurfaceAllocationGroup"** %246 to <2 x i64>*
  %248 = load <2 x i64>, <2 x i64>* %247, align 8, !alias.scope !65
  %249 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %246, i64 2
  %250 = bitcast %"class.viz::SurfaceAllocationGroup"** %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 8, !alias.scope !65
  %252 = bitcast %"class.viz::SurfaceAllocationGroup"** %245 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %252, align 8, !alias.scope !68, !noalias !65
  %253 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %245, i64 2
  %254 = bitcast %"class.viz::SurfaceAllocationGroup"** %253 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %254, align 8, !alias.scope !68, !noalias !65
  %255 = or i64 %232, 8
  %256 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %255
  %257 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %255
  %258 = bitcast %"class.viz::SurfaceAllocationGroup"** %257 to <2 x i64>*
  %259 = load <2 x i64>, <2 x i64>* %258, align 8, !alias.scope !65
  %260 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %257, i64 2
  %261 = bitcast %"class.viz::SurfaceAllocationGroup"** %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8, !alias.scope !65
  %263 = bitcast %"class.viz::SurfaceAllocationGroup"** %256 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %263, align 8, !alias.scope !68, !noalias !65
  %264 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %256, i64 2
  %265 = bitcast %"class.viz::SurfaceAllocationGroup"** %264 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %265, align 8, !alias.scope !68, !noalias !65
  %266 = or i64 %232, 12
  %267 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %266
  %268 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %266
  %269 = bitcast %"class.viz::SurfaceAllocationGroup"** %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 8, !alias.scope !65
  %271 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %268, i64 2
  %272 = bitcast %"class.viz::SurfaceAllocationGroup"** %271 to <2 x i64>*
  %273 = load <2 x i64>, <2 x i64>* %272, align 8, !alias.scope !65
  %274 = bitcast %"class.viz::SurfaceAllocationGroup"** %267 to <2 x i64>*
  store <2 x i64> %270, <2 x i64>* %274, align 8, !alias.scope !68, !noalias !65
  %275 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %267, i64 2
  %276 = bitcast %"class.viz::SurfaceAllocationGroup"** %275 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %276, align 8, !alias.scope !68, !noalias !65
  %277 = add i64 %232, 16
  %278 = add i64 %233, -4
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %231, !llvm.loop !70

280:                                              ; preds = %231, %220
  %281 = phi i64 [ 0, %220 ], [ %277, %231 ]
  %282 = icmp eq i64 %227, 0
  br i1 %282, label %299, label %283

283:                                              ; preds = %280, %283
  %284 = phi i64 [ %296, %283 ], [ %281, %280 ]
  %285 = phi i64 [ %297, %283 ], [ %227, %280 ]
  %286 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %6, i64 %284
  %287 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %32, i64 %284
  %288 = bitcast %"class.viz::SurfaceAllocationGroup"** %287 to <2 x i64>*
  %289 = load <2 x i64>, <2 x i64>* %288, align 8, !alias.scope !65
  %290 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %287, i64 2
  %291 = bitcast %"class.viz::SurfaceAllocationGroup"** %290 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8, !alias.scope !65
  %293 = bitcast %"class.viz::SurfaceAllocationGroup"** %286 to <2 x i64>*
  store <2 x i64> %289, <2 x i64>* %293, align 8, !alias.scope !68, !noalias !65
  %294 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %286, i64 2
  %295 = bitcast %"class.viz::SurfaceAllocationGroup"** %294 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %295, align 8, !alias.scope !68, !noalias !65
  %296 = add i64 %284, 4
  %297 = add i64 %285, -1
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %299, label %283, !llvm.loop !71

299:                                              ; preds = %283, %280
  %300 = icmp eq i64 %177, %221
  br i1 %300, label %378, label %179

301:                                              ; preds = %68, %334, %166
  %302 = phi %"class.viz::SurfaceAllocationGroup"** [ %89, %166 ], [ %69, %68 ], [ %376, %334 ]
  %303 = icmp eq %"class.viz::SurfaceAllocationGroup"** %302, %6
  br i1 %303, label %975, label %304

304:                                              ; preds = %301, %329
  %305 = phi %"class.viz::SurfaceAllocationGroup"** [ %331, %329 ], [ %6, %301 ]
  %306 = phi %"class.viz::SurfaceAllocationGroup"** [ %332, %329 ], [ %30, %301 ]
  %307 = phi %"class.viz::SurfaceAllocationGroup"** [ %330, %329 ], [ %32, %301 ]
  %308 = icmp eq %"class.viz::SurfaceAllocationGroup"** %307, %15
  br i1 %308, label %309, label %317

309:                                              ; preds = %304
  %310 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %302 to i64
  %311 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %305 to i64
  %312 = sub i64 %310, %311
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %975, label %314

314:                                              ; preds = %309
  %315 = bitcast %"class.viz::SurfaceAllocationGroup"** %306 to i8*
  %316 = bitcast %"class.viz::SurfaceAllocationGroup"** %305 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %315, i8* align 8 %316, i64 %312, i1 false) #14
  br label %975

317:                                              ; preds = %304
  %318 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %307, align 8
  %319 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %305, align 8
  %320 = icmp ult %"class.viz::SurfaceAllocationGroup"* %318, %319
  br i1 %320, label %321, label %325

321:                                              ; preds = %317
  %322 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %318 to i64
  %323 = bitcast %"class.viz::SurfaceAllocationGroup"** %306 to i64*
  store i64 %322, i64* %323, align 8
  %324 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %307, i64 1
  br label %329

325:                                              ; preds = %317
  %326 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %319 to i64
  %327 = bitcast %"class.viz::SurfaceAllocationGroup"** %306 to i64*
  store i64 %326, i64* %327, align 8
  %328 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %305, i64 1
  br label %329

329:                                              ; preds = %325, %321
  %330 = phi %"class.viz::SurfaceAllocationGroup"** [ %324, %321 ], [ %307, %325 ]
  %331 = phi %"class.viz::SurfaceAllocationGroup"** [ %305, %321 ], [ %328, %325 ]
  %332 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %306, i64 1
  %333 = icmp eq %"class.viz::SurfaceAllocationGroup"** %331, %302
  br i1 %333, label %975, label %304

334:                                              ; preds = %68, %334
  %335 = phi %"class.viz::SurfaceAllocationGroup"** [ %376, %334 ], [ %70, %68 ]
  %336 = phi %"class.viz::SurfaceAllocationGroup"** [ %375, %334 ], [ %71, %68 ]
  %337 = bitcast %"class.viz::SurfaceAllocationGroup"** %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast %"class.viz::SurfaceAllocationGroup"** %335 to i64*
  store i64 %338, i64* %339, align 8
  %340 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 1
  %341 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 1
  %342 = bitcast %"class.viz::SurfaceAllocationGroup"** %340 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = bitcast %"class.viz::SurfaceAllocationGroup"** %341 to i64*
  store i64 %343, i64* %344, align 8
  %345 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 2
  %346 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 2
  %347 = bitcast %"class.viz::SurfaceAllocationGroup"** %345 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.viz::SurfaceAllocationGroup"** %346 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 3
  %351 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 3
  %352 = bitcast %"class.viz::SurfaceAllocationGroup"** %350 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast %"class.viz::SurfaceAllocationGroup"** %351 to i64*
  store i64 %353, i64* %354, align 8
  %355 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 4
  %356 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 4
  %357 = bitcast %"class.viz::SurfaceAllocationGroup"** %355 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast %"class.viz::SurfaceAllocationGroup"** %356 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 5
  %361 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 5
  %362 = bitcast %"class.viz::SurfaceAllocationGroup"** %360 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast %"class.viz::SurfaceAllocationGroup"** %361 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 6
  %366 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 6
  %367 = bitcast %"class.viz::SurfaceAllocationGroup"** %365 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast %"class.viz::SurfaceAllocationGroup"** %366 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 7
  %371 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 7
  %372 = bitcast %"class.viz::SurfaceAllocationGroup"** %370 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = bitcast %"class.viz::SurfaceAllocationGroup"** %371 to i64*
  store i64 %373, i64* %374, align 8
  %375 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %336, i64 8
  %376 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %335, i64 8
  %377 = icmp eq %"class.viz::SurfaceAllocationGroup"** %375, %32
  br i1 %377, label %301, label %334, !llvm.loop !72

378:                                              ; preds = %201, %566, %299
  %379 = phi %"class.viz::SurfaceAllocationGroup"** [ %222, %299 ], [ %202, %201 ], [ %608, %566 ]
  %380 = icmp eq %"class.viz::SurfaceAllocationGroup"** %379, %6
  br i1 %380, label %975, label %381

381:                                              ; preds = %378, %552
  %382 = phi %"class.viz::SurfaceAllocationGroup"** [ %564, %552 ], [ %15, %378 ]
  %383 = phi %"class.viz::SurfaceAllocationGroup"** [ %560, %552 ], [ %379, %378 ]
  %384 = phi %"class.viz::SurfaceAllocationGroup"** [ %559, %552 ], [ %32, %378 ]
  %385 = icmp eq %"class.viz::SurfaceAllocationGroup"** %384, %30
  br i1 %385, label %386, label %552

386:                                              ; preds = %381
  %387 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %388 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %387 to i64
  %389 = sub i64 %388, %9
  %390 = lshr i64 %389, 3
  %391 = add nuw nsw i64 %390, 1
  %392 = icmp ult i64 %391, 4
  br i1 %392, label %483, label %393

393:                                              ; preds = %386
  %394 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %395 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %394 to i64
  %396 = sub i64 %395, %9
  %397 = lshr i64 %396, 3
  %398 = xor i64 %397, -1
  %399 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 %398
  %400 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 %398
  %401 = icmp ult %"class.viz::SurfaceAllocationGroup"** %399, %383
  %402 = icmp ult %"class.viz::SurfaceAllocationGroup"** %400, %382
  %403 = and i1 %401, %402
  br i1 %403, label %483, label %404

404:                                              ; preds = %393
  %405 = and i64 %391, 4611686018427387900
  %406 = sub nsw i64 0, %405
  %407 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 %406
  %408 = sub nsw i64 0, %405
  %409 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 %408
  %410 = add nsw i64 %405, -4
  %411 = lshr exact i64 %410, 2
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 1
  %414 = icmp eq i64 %410, 0
  br i1 %414, label %461, label %415

415:                                              ; preds = %404
  %416 = sub nuw nsw i64 %412, %413
  %417 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %418 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 -1
  %419 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %420 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 -1
  br label %421

421:                                              ; preds = %421, %415
  %422 = phi i64 [ 0, %415 ], [ %456, %421 ]
  %423 = phi i64 [ %416, %415 ], [ %457, %421 ]
  %424 = sub i64 0, %422
  %425 = sub i64 0, %422
  %426 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %417, i64 %424
  %427 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %426, i64 -1
  %428 = bitcast %"class.viz::SurfaceAllocationGroup"** %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !73
  %430 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %426, i64 -2
  %431 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %430, i64 -1
  %432 = bitcast %"class.viz::SurfaceAllocationGroup"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !73
  %434 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %418, i64 %425
  %435 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %434, i64 -1
  %436 = bitcast %"class.viz::SurfaceAllocationGroup"** %435 to <2 x i64>*
  store <2 x i64> %429, <2 x i64>* %436, align 8, !alias.scope !76, !noalias !73
  %437 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %434, i64 -2
  %438 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %437, i64 -1
  %439 = bitcast %"class.viz::SurfaceAllocationGroup"** %438 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %439, align 8, !alias.scope !76, !noalias !73
  %440 = sub nuw nsw i64 -4, %422
  %441 = sub nuw nsw i64 -4, %422
  %442 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %419, i64 %440
  %443 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %442, i64 -1
  %444 = bitcast %"class.viz::SurfaceAllocationGroup"** %443 to <2 x i64>*
  %445 = load <2 x i64>, <2 x i64>* %444, align 8, !alias.scope !73
  %446 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %442, i64 -2
  %447 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %446, i64 -1
  %448 = bitcast %"class.viz::SurfaceAllocationGroup"** %447 to <2 x i64>*
  %449 = load <2 x i64>, <2 x i64>* %448, align 8, !alias.scope !73
  %450 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %420, i64 %441
  %451 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %450, i64 -1
  %452 = bitcast %"class.viz::SurfaceAllocationGroup"** %451 to <2 x i64>*
  store <2 x i64> %445, <2 x i64>* %452, align 8, !alias.scope !76, !noalias !73
  %453 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %450, i64 -2
  %454 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %453, i64 -1
  %455 = bitcast %"class.viz::SurfaceAllocationGroup"** %454 to <2 x i64>*
  store <2 x i64> %449, <2 x i64>* %455, align 8, !alias.scope !76, !noalias !73
  %456 = add i64 %422, 8
  %457 = add i64 %423, -2
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %459, label %421, !llvm.loop !78

459:                                              ; preds = %421
  %460 = sub nuw nsw i64 -8, %422
  br label %461

461:                                              ; preds = %459, %404
  %462 = phi i64 [ 0, %404 ], [ %460, %459 ]
  %463 = icmp eq i64 %413, 0
  br i1 %463, label %481, label %464

464:                                              ; preds = %461
  %465 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %466 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 -1
  %467 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %465, i64 %462
  %468 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %467, i64 -1
  %469 = bitcast %"class.viz::SurfaceAllocationGroup"** %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 8, !alias.scope !73
  %471 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %467, i64 -2
  %472 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %471, i64 -1
  %473 = bitcast %"class.viz::SurfaceAllocationGroup"** %472 to <2 x i64>*
  %474 = load <2 x i64>, <2 x i64>* %473, align 8, !alias.scope !73
  %475 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %466, i64 %462
  %476 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %475, i64 -1
  %477 = bitcast %"class.viz::SurfaceAllocationGroup"** %476 to <2 x i64>*
  store <2 x i64> %470, <2 x i64>* %477, align 8, !alias.scope !76, !noalias !73
  %478 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %475, i64 -2
  %479 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %478, i64 -1
  %480 = bitcast %"class.viz::SurfaceAllocationGroup"** %479 to <2 x i64>*
  store <2 x i64> %474, <2 x i64>* %480, align 8, !alias.scope !76, !noalias !73
  br label %481

481:                                              ; preds = %461, %464
  %482 = icmp eq i64 %391, %405
  br i1 %482, label %975, label %483

483:                                              ; preds = %481, %393, %386
  %484 = phi %"class.viz::SurfaceAllocationGroup"** [ %383, %393 ], [ %383, %386 ], [ %407, %481 ]
  %485 = phi %"class.viz::SurfaceAllocationGroup"** [ %382, %393 ], [ %382, %386 ], [ %409, %481 ]
  %486 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %484, i64 -1
  %487 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %486 to i64
  %488 = sub i64 %487, %9
  %489 = lshr i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 7
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %504, label %493

493:                                              ; preds = %483, %493
  %494 = phi %"class.viz::SurfaceAllocationGroup"** [ %497, %493 ], [ %484, %483 ]
  %495 = phi %"class.viz::SurfaceAllocationGroup"** [ %500, %493 ], [ %485, %483 ]
  %496 = phi i64 [ %502, %493 ], [ %491, %483 ]
  %497 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %494, i64 -1
  %498 = bitcast %"class.viz::SurfaceAllocationGroup"** %497 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %495, i64 -1
  %501 = bitcast %"class.viz::SurfaceAllocationGroup"** %500 to i64*
  store i64 %499, i64* %501, align 8
  %502 = add i64 %496, -1
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %493, !llvm.loop !79

504:                                              ; preds = %493, %483
  %505 = phi %"class.viz::SurfaceAllocationGroup"** [ %484, %483 ], [ %497, %493 ]
  %506 = phi %"class.viz::SurfaceAllocationGroup"** [ %485, %483 ], [ %500, %493 ]
  %507 = icmp ult i64 %488, 56
  br i1 %507, label %975, label %508

508:                                              ; preds = %504, %508
  %509 = phi %"class.viz::SurfaceAllocationGroup"** [ %546, %508 ], [ %505, %504 ]
  %510 = phi %"class.viz::SurfaceAllocationGroup"** [ %549, %508 ], [ %506, %504 ]
  %511 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -1
  %512 = bitcast %"class.viz::SurfaceAllocationGroup"** %511 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -1
  %515 = bitcast %"class.viz::SurfaceAllocationGroup"** %514 to i64*
  store i64 %513, i64* %515, align 8
  %516 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -2
  %517 = bitcast %"class.viz::SurfaceAllocationGroup"** %516 to i64*
  %518 = load i64, i64* %517, align 8
  %519 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -2
  %520 = bitcast %"class.viz::SurfaceAllocationGroup"** %519 to i64*
  store i64 %518, i64* %520, align 8
  %521 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -3
  %522 = bitcast %"class.viz::SurfaceAllocationGroup"** %521 to i64*
  %523 = load i64, i64* %522, align 8
  %524 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -3
  %525 = bitcast %"class.viz::SurfaceAllocationGroup"** %524 to i64*
  store i64 %523, i64* %525, align 8
  %526 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -4
  %527 = bitcast %"class.viz::SurfaceAllocationGroup"** %526 to i64*
  %528 = load i64, i64* %527, align 8
  %529 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -4
  %530 = bitcast %"class.viz::SurfaceAllocationGroup"** %529 to i64*
  store i64 %528, i64* %530, align 8
  %531 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -5
  %532 = bitcast %"class.viz::SurfaceAllocationGroup"** %531 to i64*
  %533 = load i64, i64* %532, align 8
  %534 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -5
  %535 = bitcast %"class.viz::SurfaceAllocationGroup"** %534 to i64*
  store i64 %533, i64* %535, align 8
  %536 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -6
  %537 = bitcast %"class.viz::SurfaceAllocationGroup"** %536 to i64*
  %538 = load i64, i64* %537, align 8
  %539 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -6
  %540 = bitcast %"class.viz::SurfaceAllocationGroup"** %539 to i64*
  store i64 %538, i64* %540, align 8
  %541 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -7
  %542 = bitcast %"class.viz::SurfaceAllocationGroup"** %541 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -7
  %545 = bitcast %"class.viz::SurfaceAllocationGroup"** %544 to i64*
  store i64 %543, i64* %545, align 8
  %546 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %509, i64 -8
  %547 = bitcast %"class.viz::SurfaceAllocationGroup"** %546 to i64*
  %548 = load i64, i64* %547, align 8
  %549 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %510, i64 -8
  %550 = bitcast %"class.viz::SurfaceAllocationGroup"** %549 to i64*
  store i64 %548, i64* %550, align 8
  %551 = icmp eq %"class.viz::SurfaceAllocationGroup"** %546, %6
  br i1 %551, label %975, label %508, !llvm.loop !80

552:                                              ; preds = %381
  %553 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %384, i64 -1
  %554 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %383, i64 -1
  %555 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %554, align 8
  %556 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %553, align 8
  %557 = icmp ult %"class.viz::SurfaceAllocationGroup"* %555, %556
  %558 = select i1 %557, %"class.viz::SurfaceAllocationGroup"* %556, %"class.viz::SurfaceAllocationGroup"* %555
  %559 = select i1 %557, %"class.viz::SurfaceAllocationGroup"** %553, %"class.viz::SurfaceAllocationGroup"** %384
  %560 = select i1 %557, %"class.viz::SurfaceAllocationGroup"** %383, %"class.viz::SurfaceAllocationGroup"** %554
  %561 = ptrtoint %"class.viz::SurfaceAllocationGroup"* %558 to i64
  %562 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 -1
  %563 = bitcast %"class.viz::SurfaceAllocationGroup"** %562 to i64*
  store i64 %561, i64* %563, align 8
  %564 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %382, i64 -1
  %565 = icmp eq %"class.viz::SurfaceAllocationGroup"** %560, %6
  br i1 %565, label %975, label %381

566:                                              ; preds = %201, %566
  %567 = phi %"class.viz::SurfaceAllocationGroup"** [ %608, %566 ], [ %203, %201 ]
  %568 = phi %"class.viz::SurfaceAllocationGroup"** [ %607, %566 ], [ %204, %201 ]
  %569 = bitcast %"class.viz::SurfaceAllocationGroup"** %568 to i64*
  %570 = load i64, i64* %569, align 8
  %571 = bitcast %"class.viz::SurfaceAllocationGroup"** %567 to i64*
  store i64 %570, i64* %571, align 8
  %572 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 1
  %573 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 1
  %574 = bitcast %"class.viz::SurfaceAllocationGroup"** %572 to i64*
  %575 = load i64, i64* %574, align 8
  %576 = bitcast %"class.viz::SurfaceAllocationGroup"** %573 to i64*
  store i64 %575, i64* %576, align 8
  %577 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 2
  %578 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 2
  %579 = bitcast %"class.viz::SurfaceAllocationGroup"** %577 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = bitcast %"class.viz::SurfaceAllocationGroup"** %578 to i64*
  store i64 %580, i64* %581, align 8
  %582 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 3
  %583 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 3
  %584 = bitcast %"class.viz::SurfaceAllocationGroup"** %582 to i64*
  %585 = load i64, i64* %584, align 8
  %586 = bitcast %"class.viz::SurfaceAllocationGroup"** %583 to i64*
  store i64 %585, i64* %586, align 8
  %587 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 4
  %588 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 4
  %589 = bitcast %"class.viz::SurfaceAllocationGroup"** %587 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = bitcast %"class.viz::SurfaceAllocationGroup"** %588 to i64*
  store i64 %590, i64* %591, align 8
  %592 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 5
  %593 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 5
  %594 = bitcast %"class.viz::SurfaceAllocationGroup"** %592 to i64*
  %595 = load i64, i64* %594, align 8
  %596 = bitcast %"class.viz::SurfaceAllocationGroup"** %593 to i64*
  store i64 %595, i64* %596, align 8
  %597 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 6
  %598 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 6
  %599 = bitcast %"class.viz::SurfaceAllocationGroup"** %597 to i64*
  %600 = load i64, i64* %599, align 8
  %601 = bitcast %"class.viz::SurfaceAllocationGroup"** %598 to i64*
  store i64 %600, i64* %601, align 8
  %602 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 7
  %603 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 7
  %604 = bitcast %"class.viz::SurfaceAllocationGroup"** %602 to i64*
  %605 = load i64, i64* %604, align 8
  %606 = bitcast %"class.viz::SurfaceAllocationGroup"** %603 to i64*
  store i64 %605, i64* %606, align 8
  %607 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %568, i64 8
  %608 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %567, i64 8
  %609 = icmp eq %"class.viz::SurfaceAllocationGroup"** %607, %15
  br i1 %609, label %378, label %566, !llvm.loop !81

610:                                              ; preds = %25, %616
  %611 = phi i64 [ %16, %25 ], [ %619, %616 ]
  %612 = phi i64 [ %19, %25 ], [ %618, %616 ]
  %613 = inttoptr i64 %612 to %"class.viz::SurfaceAllocationGroup"**
  %614 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %613, align 8
  %615 = icmp ult %"class.viz::SurfaceAllocationGroup"* %28, %614
  br i1 %615, label %621, label %616

616:                                              ; preds = %610
  %617 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %613, i64 1
  %618 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %617 to i64
  %619 = add nsw i64 %611, -1
  %620 = icmp eq i64 %619, 0
  br i1 %620, label %975, label %610

621:                                              ; preds = %610
  %622 = inttoptr i64 %612 to %"class.viz::SurfaceAllocationGroup"**
  %623 = icmp slt i64 %611, %17
  br i1 %623, label %624, label %651

624:                                              ; preds = %621
  %625 = sdiv i64 %17, 2
  %626 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 %625
  %627 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %626 to i64
  %628 = sub i64 %18, %612
  %629 = icmp eq i64 %628, 0
  br i1 %629, label %646, label %630

630:                                              ; preds = %624
  %631 = ashr exact i64 %628, 3
  %632 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %626, align 8
  br label %633

633:                                              ; preds = %633, %630
  %634 = phi %"class.viz::SurfaceAllocationGroup"** [ %622, %630 ], [ %644, %633 ]
  %635 = phi i64 [ %631, %630 ], [ %643, %633 ]
  %636 = lshr i64 %635, 1
  %637 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %634, i64 %636
  %638 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %637, align 8
  %639 = icmp ult %"class.viz::SurfaceAllocationGroup"* %632, %638
  %640 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %637, i64 1
  %641 = xor i64 %636, -1
  %642 = add i64 %635, %641
  %643 = select i1 %639, i64 %636, i64 %642
  %644 = select i1 %639, %"class.viz::SurfaceAllocationGroup"** %634, %"class.viz::SurfaceAllocationGroup"** %640
  %645 = icmp eq i64 %643, 0
  br i1 %645, label %646, label %633

646:                                              ; preds = %633, %624
  %647 = phi %"class.viz::SurfaceAllocationGroup"** [ %622, %624 ], [ %644, %633 ]
  %648 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %647 to i64
  %649 = sub i64 %648, %612
  %650 = ashr exact i64 %649, 3
  br label %686

651:                                              ; preds = %621
  %652 = icmp eq i64 %611, 1
  br i1 %652, label %653, label %658

653:                                              ; preds = %651
  %654 = inttoptr i64 %612 to i64*
  %655 = load i64, i64* %654, align 8
  %656 = inttoptr i64 %18 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %654, align 8
  store i64 %655, i64* %656, align 8
  br label %975

658:                                              ; preds = %651
  %659 = sdiv i64 %611, 2
  %660 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %622, i64 %659
  %661 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %660 to i64
  %662 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %15 to i64
  %663 = sub i64 %662, %18
  %664 = icmp eq i64 %663, 0
  br i1 %664, label %681, label %665

665:                                              ; preds = %658
  %666 = ashr exact i64 %663, 3
  %667 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %660, align 8
  br label %668

668:                                              ; preds = %668, %665
  %669 = phi %"class.viz::SurfaceAllocationGroup"** [ %26, %665 ], [ %679, %668 ]
  %670 = phi i64 [ %666, %665 ], [ %678, %668 ]
  %671 = lshr i64 %670, 1
  %672 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %669, i64 %671
  %673 = load %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %672, align 8
  %674 = icmp ult %"class.viz::SurfaceAllocationGroup"* %673, %667
  %675 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %672, i64 1
  %676 = xor i64 %671, -1
  %677 = add i64 %670, %676
  %678 = select i1 %674, i64 %677, i64 %671
  %679 = select i1 %674, %"class.viz::SurfaceAllocationGroup"** %675, %"class.viz::SurfaceAllocationGroup"** %669
  %680 = icmp eq i64 %678, 0
  br i1 %680, label %681, label %668

681:                                              ; preds = %668, %658
  %682 = phi %"class.viz::SurfaceAllocationGroup"** [ %26, %658 ], [ %679, %668 ]
  %683 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %682 to i64
  %684 = sub i64 %683, %18
  %685 = ashr exact i64 %684, 3
  br label %686

686:                                              ; preds = %681, %646
  %687 = phi i64 [ %648, %646 ], [ %661, %681 ]
  %688 = phi i64 [ %627, %646 ], [ %683, %681 ]
  %689 = phi i64 [ %625, %646 ], [ %685, %681 ]
  %690 = phi i64 [ %650, %646 ], [ %659, %681 ]
  %691 = sub nsw i64 %611, %690
  %692 = sub nsw i64 %17, %689
  %693 = inttoptr i64 %687 to %"class.viz::SurfaceAllocationGroup"**
  %694 = inttoptr i64 %687 to i8*
  %695 = inttoptr i64 %688 to %"class.viz::SurfaceAllocationGroup"**
  %696 = inttoptr i64 %687 to i8*
  %697 = inttoptr i64 %18 to i8*
  %698 = icmp eq %"class.viz::SurfaceAllocationGroup"** %693, %26
  br i1 %698, label %960, label %699

699:                                              ; preds = %686
  %700 = icmp eq %"class.viz::SurfaceAllocationGroup"** %26, %695
  br i1 %700, label %960, label %701

701:                                              ; preds = %699
  %702 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 1
  %703 = icmp eq %"class.viz::SurfaceAllocationGroup"** %702, %26
  br i1 %703, label %704, label %714

704:                                              ; preds = %701
  %705 = inttoptr i64 %687 to i64*
  %706 = load i64, i64* %705, align 8
  %707 = sub i64 %688, %18
  %708 = ashr exact i64 %707, 3
  %709 = icmp eq i64 %707, 0
  br i1 %709, label %711, label %710

710:                                              ; preds = %704
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %696, i8* align 8 %697, i64 %707, i1 false) #14
  br label %711

711:                                              ; preds = %710, %704
  %712 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %708
  %713 = bitcast %"class.viz::SurfaceAllocationGroup"** %712 to i64*
  store i64 %706, i64* %713, align 8
  br label %960

714:                                              ; preds = %701
  %715 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 1
  %716 = icmp eq %"class.viz::SurfaceAllocationGroup"** %715, %695
  br i1 %716, label %717, label %732

717:                                              ; preds = %714
  %718 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %695, i64 -1
  %719 = bitcast %"class.viz::SurfaceAllocationGroup"** %718 to i64*
  %720 = load i64, i64* %719, align 8
  %721 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %718 to i64
  %722 = sub i64 %721, %687
  %723 = icmp eq i64 %722, 0
  br i1 %723, label %729, label %724

724:                                              ; preds = %717
  %725 = ashr exact i64 %722, 3
  %726 = sub nsw i64 0, %725
  %727 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %695, i64 %726
  %728 = bitcast %"class.viz::SurfaceAllocationGroup"** %727 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %728, i8* align 8 %696, i64 %722, i1 false) #14
  br label %729

729:                                              ; preds = %724, %717
  %730 = phi %"class.viz::SurfaceAllocationGroup"** [ %727, %724 ], [ %695, %717 ]
  %731 = inttoptr i64 %687 to i64*
  store i64 %720, i64* %731, align 8
  br label %960

732:                                              ; preds = %714
  %733 = sub i64 %18, %687
  %734 = ashr exact i64 %733, 3
  %735 = sub i64 %688, %18
  %736 = ashr exact i64 %735, 3
  %737 = icmp eq i64 %734, %736
  br i1 %737, label %738, label %890

738:                                              ; preds = %732
  %739 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 -1
  %740 = bitcast %"class.viz::SurfaceAllocationGroup"** %739 to i8*
  %741 = sub i64 0, %687
  %742 = getelementptr i8, i8* %740, i64 %741
  %743 = ptrtoint i8* %742 to i64
  %744 = lshr i64 %743, 3
  %745 = add nuw nsw i64 %744, 1
  %746 = icmp ult i64 %745, 4
  br i1 %746, label %835, label %747

747:                                              ; preds = %738
  %748 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 1
  %749 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 -1
  %750 = bitcast %"class.viz::SurfaceAllocationGroup"** %749 to i8*
  %751 = sub i64 0, %687
  %752 = getelementptr i8, i8* %750, i64 %751
  %753 = ptrtoint i8* %752 to i64
  %754 = lshr i64 %753, 3
  %755 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %748, i64 %754
  %756 = bitcast %"class.viz::SurfaceAllocationGroup"** %755 to i8*
  %757 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 1
  %758 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %757, i64 %754
  %759 = bitcast %"class.viz::SurfaceAllocationGroup"** %758 to i8*
  %760 = icmp ult i8* %694, %759
  %761 = icmp ult i8* %27, %756
  %762 = and i1 %760, %761
  br i1 %762, label %835, label %763

763:                                              ; preds = %747
  %764 = and i64 %745, 4611686018427387900
  %765 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 %764
  %766 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %764
  %767 = add nsw i64 %764, -4
  %768 = lshr exact i64 %767, 2
  %769 = add nuw nsw i64 %768, 1
  %770 = and i64 %769, 1
  %771 = icmp eq i64 %767, 0
  br i1 %771, label %813, label %772

772:                                              ; preds = %763
  %773 = sub nuw nsw i64 %769, %770
  br label %774

774:                                              ; preds = %774, %772
  %775 = phi i64 [ 0, %772 ], [ %810, %774 ]
  %776 = phi i64 [ %773, %772 ], [ %811, %774 ]
  %777 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 %775
  %778 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %775
  %779 = bitcast %"class.viz::SurfaceAllocationGroup"** %778 to <2 x i64>*
  %780 = load <2 x i64>, <2 x i64>* %779, align 8, !alias.scope !82, !noalias !85
  %781 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %778, i64 2
  %782 = bitcast %"class.viz::SurfaceAllocationGroup"** %781 to <2 x i64>*
  %783 = load <2 x i64>, <2 x i64>* %782, align 8, !alias.scope !82, !noalias !85
  %784 = bitcast %"class.viz::SurfaceAllocationGroup"** %777 to <2 x i64>*
  %785 = load <2 x i64>, <2 x i64>* %784, align 8, !alias.scope !85
  %786 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %777, i64 2
  %787 = bitcast %"class.viz::SurfaceAllocationGroup"** %786 to <2 x i64>*
  %788 = load <2 x i64>, <2 x i64>* %787, align 8, !alias.scope !85
  %789 = bitcast %"class.viz::SurfaceAllocationGroup"** %778 to <2 x i64>*
  store <2 x i64> %785, <2 x i64>* %789, align 8, !alias.scope !82, !noalias !85
  %790 = bitcast %"class.viz::SurfaceAllocationGroup"** %781 to <2 x i64>*
  store <2 x i64> %788, <2 x i64>* %790, align 8, !alias.scope !82, !noalias !85
  %791 = bitcast %"class.viz::SurfaceAllocationGroup"** %777 to <2 x i64>*
  store <2 x i64> %780, <2 x i64>* %791, align 8, !alias.scope !85
  %792 = bitcast %"class.viz::SurfaceAllocationGroup"** %786 to <2 x i64>*
  store <2 x i64> %783, <2 x i64>* %792, align 8, !alias.scope !85
  %793 = or i64 %775, 4
  %794 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 %793
  %795 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %793
  %796 = bitcast %"class.viz::SurfaceAllocationGroup"** %795 to <2 x i64>*
  %797 = load <2 x i64>, <2 x i64>* %796, align 8, !alias.scope !82, !noalias !85
  %798 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %795, i64 2
  %799 = bitcast %"class.viz::SurfaceAllocationGroup"** %798 to <2 x i64>*
  %800 = load <2 x i64>, <2 x i64>* %799, align 8, !alias.scope !82, !noalias !85
  %801 = bitcast %"class.viz::SurfaceAllocationGroup"** %794 to <2 x i64>*
  %802 = load <2 x i64>, <2 x i64>* %801, align 8, !alias.scope !85
  %803 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %794, i64 2
  %804 = bitcast %"class.viz::SurfaceAllocationGroup"** %803 to <2 x i64>*
  %805 = load <2 x i64>, <2 x i64>* %804, align 8, !alias.scope !85
  %806 = bitcast %"class.viz::SurfaceAllocationGroup"** %795 to <2 x i64>*
  store <2 x i64> %802, <2 x i64>* %806, align 8, !alias.scope !82, !noalias !85
  %807 = bitcast %"class.viz::SurfaceAllocationGroup"** %798 to <2 x i64>*
  store <2 x i64> %805, <2 x i64>* %807, align 8, !alias.scope !82, !noalias !85
  %808 = bitcast %"class.viz::SurfaceAllocationGroup"** %794 to <2 x i64>*
  store <2 x i64> %797, <2 x i64>* %808, align 8, !alias.scope !85
  %809 = bitcast %"class.viz::SurfaceAllocationGroup"** %803 to <2 x i64>*
  store <2 x i64> %800, <2 x i64>* %809, align 8, !alias.scope !85
  %810 = add i64 %775, 8
  %811 = add i64 %776, -2
  %812 = icmp eq i64 %811, 0
  br i1 %812, label %813, label %774, !llvm.loop !87

813:                                              ; preds = %774, %763
  %814 = phi i64 [ 0, %763 ], [ %810, %774 ]
  %815 = icmp eq i64 %770, 0
  br i1 %815, label %833, label %816

816:                                              ; preds = %813
  %817 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 %814
  %818 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %814
  %819 = bitcast %"class.viz::SurfaceAllocationGroup"** %818 to <2 x i64>*
  %820 = load <2 x i64>, <2 x i64>* %819, align 8, !alias.scope !82, !noalias !85
  %821 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %818, i64 2
  %822 = bitcast %"class.viz::SurfaceAllocationGroup"** %821 to <2 x i64>*
  %823 = load <2 x i64>, <2 x i64>* %822, align 8, !alias.scope !82, !noalias !85
  %824 = bitcast %"class.viz::SurfaceAllocationGroup"** %817 to <2 x i64>*
  %825 = load <2 x i64>, <2 x i64>* %824, align 8, !alias.scope !85
  %826 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %817, i64 2
  %827 = bitcast %"class.viz::SurfaceAllocationGroup"** %826 to <2 x i64>*
  %828 = load <2 x i64>, <2 x i64>* %827, align 8, !alias.scope !85
  %829 = bitcast %"class.viz::SurfaceAllocationGroup"** %818 to <2 x i64>*
  store <2 x i64> %825, <2 x i64>* %829, align 8, !alias.scope !82, !noalias !85
  %830 = bitcast %"class.viz::SurfaceAllocationGroup"** %821 to <2 x i64>*
  store <2 x i64> %828, <2 x i64>* %830, align 8, !alias.scope !82, !noalias !85
  %831 = bitcast %"class.viz::SurfaceAllocationGroup"** %817 to <2 x i64>*
  store <2 x i64> %820, <2 x i64>* %831, align 8, !alias.scope !85
  %832 = bitcast %"class.viz::SurfaceAllocationGroup"** %826 to <2 x i64>*
  store <2 x i64> %823, <2 x i64>* %832, align 8, !alias.scope !85
  br label %833

833:                                              ; preds = %813, %816
  %834 = icmp eq i64 %745, %764
  br i1 %834, label %960, label %835

835:                                              ; preds = %833, %747, %738
  %836 = phi %"class.viz::SurfaceAllocationGroup"** [ %26, %747 ], [ %26, %738 ], [ %765, %833 ]
  %837 = phi %"class.viz::SurfaceAllocationGroup"** [ %693, %747 ], [ %693, %738 ], [ %766, %833 ]
  %838 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %837 to i64
  %839 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %26, i64 -1
  %840 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %839 to i64
  %841 = sub i64 %840, %838
  %842 = lshr i64 %841, 3
  %843 = add nuw nsw i64 %842, 1
  %844 = and i64 %843, 3
  %845 = icmp eq i64 %844, 0
  br i1 %845, label %858, label %846

846:                                              ; preds = %835, %846
  %847 = phi %"class.viz::SurfaceAllocationGroup"** [ %855, %846 ], [ %836, %835 ]
  %848 = phi %"class.viz::SurfaceAllocationGroup"** [ %854, %846 ], [ %837, %835 ]
  %849 = phi i64 [ %856, %846 ], [ %844, %835 ]
  %850 = bitcast %"class.viz::SurfaceAllocationGroup"** %848 to i64*
  %851 = load i64, i64* %850, align 8
  %852 = bitcast %"class.viz::SurfaceAllocationGroup"** %847 to i64*
  %853 = load i64, i64* %852, align 8
  store i64 %853, i64* %850, align 8
  store i64 %851, i64* %852, align 8
  %854 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %848, i64 1
  %855 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %847, i64 1
  %856 = add i64 %849, -1
  %857 = icmp eq i64 %856, 0
  br i1 %857, label %858, label %846, !llvm.loop !88

858:                                              ; preds = %846, %835
  %859 = phi %"class.viz::SurfaceAllocationGroup"** [ %836, %835 ], [ %855, %846 ]
  %860 = phi %"class.viz::SurfaceAllocationGroup"** [ %837, %835 ], [ %854, %846 ]
  %861 = icmp ult i64 %841, 24
  br i1 %861, label %960, label %862

862:                                              ; preds = %858, %862
  %863 = phi %"class.viz::SurfaceAllocationGroup"** [ %888, %862 ], [ %859, %858 ]
  %864 = phi %"class.viz::SurfaceAllocationGroup"** [ %887, %862 ], [ %860, %858 ]
  %865 = bitcast %"class.viz::SurfaceAllocationGroup"** %864 to i64*
  %866 = load i64, i64* %865, align 8
  %867 = bitcast %"class.viz::SurfaceAllocationGroup"** %863 to i64*
  %868 = load i64, i64* %867, align 8
  store i64 %868, i64* %865, align 8
  store i64 %866, i64* %867, align 8
  %869 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %864, i64 1
  %870 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %863, i64 1
  %871 = bitcast %"class.viz::SurfaceAllocationGroup"** %869 to i64*
  %872 = load i64, i64* %871, align 8
  %873 = bitcast %"class.viz::SurfaceAllocationGroup"** %870 to i64*
  %874 = load i64, i64* %873, align 8
  store i64 %874, i64* %871, align 8
  store i64 %872, i64* %873, align 8
  %875 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %864, i64 2
  %876 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %863, i64 2
  %877 = bitcast %"class.viz::SurfaceAllocationGroup"** %875 to i64*
  %878 = load i64, i64* %877, align 8
  %879 = bitcast %"class.viz::SurfaceAllocationGroup"** %876 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %877, align 8
  store i64 %878, i64* %879, align 8
  %881 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %864, i64 3
  %882 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %863, i64 3
  %883 = bitcast %"class.viz::SurfaceAllocationGroup"** %881 to i64*
  %884 = load i64, i64* %883, align 8
  %885 = bitcast %"class.viz::SurfaceAllocationGroup"** %882 to i64*
  %886 = load i64, i64* %885, align 8
  store i64 %886, i64* %883, align 8
  store i64 %884, i64* %885, align 8
  %887 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %864, i64 4
  %888 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %863, i64 4
  %889 = icmp eq %"class.viz::SurfaceAllocationGroup"** %887, %26
  br i1 %889, label %960, label %862, !llvm.loop !89

890:                                              ; preds = %732, %890
  %891 = phi i64 [ %893, %890 ], [ %736, %732 ]
  %892 = phi i64 [ %891, %890 ], [ %734, %732 ]
  %893 = srem i64 %892, %891
  %894 = icmp eq i64 %893, 0
  br i1 %894, label %895, label %890

895:                                              ; preds = %890
  %896 = icmp eq i64 %891, 0
  br i1 %896, label %929, label %897

897:                                              ; preds = %895
  %898 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %891
  %899 = shl nsw i64 %891, 3
  %900 = add i64 %899, -8
  %901 = and i64 %900, 8
  %902 = icmp eq i64 %901, 0
  br i1 %902, label %903, label %926

903:                                              ; preds = %897
  %904 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %898, i64 -1
  %905 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %904 to i64
  %906 = bitcast %"class.viz::SurfaceAllocationGroup"** %904 to i64*
  %907 = load i64, i64* %906, align 8
  %908 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %904, i64 %734
  br label %909

909:                                              ; preds = %909, %903
  %910 = phi i64 [ %905, %903 ], [ %912, %909 ]
  %911 = phi %"class.viz::SurfaceAllocationGroup"** [ %908, %903 ], [ %922, %909 ]
  %912 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %911 to i64
  %913 = bitcast %"class.viz::SurfaceAllocationGroup"** %911 to i64*
  %914 = load i64, i64* %913, align 8
  %915 = inttoptr i64 %910 to i64*
  store i64 %914, i64* %915, align 8
  %916 = sub i64 %688, %912
  %917 = ashr exact i64 %916, 3
  %918 = icmp slt i64 %734, %917
  %919 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %911, i64 %734
  %920 = sub nsw i64 %734, %917
  %921 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %920
  %922 = select i1 %918, %"class.viz::SurfaceAllocationGroup"** %919, %"class.viz::SurfaceAllocationGroup"** %921
  %923 = icmp eq %"class.viz::SurfaceAllocationGroup"** %922, %904
  br i1 %923, label %924, label %909

924:                                              ; preds = %909
  %925 = bitcast %"class.viz::SurfaceAllocationGroup"** %911 to i64*
  store i64 %907, i64* %925, align 8
  br label %926

926:                                              ; preds = %924, %897
  %927 = phi %"class.viz::SurfaceAllocationGroup"** [ %904, %924 ], [ %898, %897 ]
  %928 = icmp eq i64 %900, 0
  br i1 %928, label %929, label %931

929:                                              ; preds = %926, %991, %895
  %930 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %736
  br label %960

931:                                              ; preds = %926, %991
  %932 = phi %"class.viz::SurfaceAllocationGroup"** [ %955, %991 ], [ %927, %926 ]
  %933 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %932, i64 -1
  %934 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %933 to i64
  %935 = bitcast %"class.viz::SurfaceAllocationGroup"** %933 to i64*
  %936 = load i64, i64* %935, align 8
  %937 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %933, i64 %734
  br label %938

938:                                              ; preds = %938, %931
  %939 = phi i64 [ %934, %931 ], [ %941, %938 ]
  %940 = phi %"class.viz::SurfaceAllocationGroup"** [ %937, %931 ], [ %951, %938 ]
  %941 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %940 to i64
  %942 = bitcast %"class.viz::SurfaceAllocationGroup"** %940 to i64*
  %943 = load i64, i64* %942, align 8
  %944 = inttoptr i64 %939 to i64*
  store i64 %943, i64* %944, align 8
  %945 = sub i64 %688, %941
  %946 = ashr exact i64 %945, 3
  %947 = icmp slt i64 %734, %946
  %948 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %940, i64 %734
  %949 = sub nsw i64 %734, %946
  %950 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %949
  %951 = select i1 %947, %"class.viz::SurfaceAllocationGroup"** %948, %"class.viz::SurfaceAllocationGroup"** %950
  %952 = icmp eq %"class.viz::SurfaceAllocationGroup"** %951, %933
  br i1 %952, label %953, label %938

953:                                              ; preds = %938
  %954 = bitcast %"class.viz::SurfaceAllocationGroup"** %940 to i64*
  store i64 %936, i64* %954, align 8
  %955 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %932, i64 -2
  %956 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %955 to i64
  %957 = bitcast %"class.viz::SurfaceAllocationGroup"** %955 to i64*
  %958 = load i64, i64* %957, align 8
  %959 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %955, i64 %734
  br label %976

960:                                              ; preds = %858, %862, %833, %686, %699, %711, %729, %929
  %961 = phi %"class.viz::SurfaceAllocationGroup"** [ %693, %699 ], [ %695, %686 ], [ %712, %711 ], [ %730, %729 ], [ %930, %929 ], [ %26, %833 ], [ %26, %862 ], [ %26, %858 ]
  %962 = add nsw i64 %690, %689
  %963 = add nsw i64 %691, %692
  %964 = icmp slt i64 %962, %963
  br i1 %964, label %965, label %967

965:                                              ; preds = %960
  %966 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %961 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_SK_T_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %622, %"class.viz::SurfaceAllocationGroup"** %693, %"class.viz::SurfaceAllocationGroup"** %961, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %3, i64 %690, i64 %689, %"class.viz::SurfaceAllocationGroup"** %6, i64 %7)
  br label %968

967:                                              ; preds = %960
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIPN3viz22SurfaceAllocationGroupENS1_8identityENS_4lessIvEENS_6vectorIS6_NS_9allocatorIS6_EEEEE13value_compareENS_11__wrap_iterIPS6_EEEEvT0_SK_SK_T_NS_15iterator_traitsISK_E15difference_typeESO_PNSN_10value_typeEl(%"class.viz::SurfaceAllocationGroup"** %961, %"class.viz::SurfaceAllocationGroup"** %695, %"class.viz::SurfaceAllocationGroup"** %15, %"struct.base::internal::flat_tree<viz::SurfaceAllocationGroup *, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceAllocationGroup *, std::__1::allocator<viz::SurfaceAllocationGroup *> > >::value_compare"* dereferenceable(1) %3, i64 %691, i64 %692, %"class.viz::SurfaceAllocationGroup"** %6, i64 %7)
  br label %968

968:                                              ; preds = %965, %967
  %969 = phi i64 [ %966, %965 ], [ %612, %967 ]
  %970 = phi i64 [ %688, %965 ], [ %687, %967 ]
  %971 = phi i64 [ %692, %965 ], [ %689, %967 ]
  %972 = phi i64 [ %691, %965 ], [ %690, %967 ]
  %973 = phi %"class.viz::SurfaceAllocationGroup"** [ %15, %965 ], [ %961, %967 ]
  %974 = icmp eq i64 %971, 0
  br i1 %974, label %975, label %14

975:                                              ; preds = %968, %23, %616, %329, %552, %504, %508, %481, %8, %653, %378, %314, %309, %301, %168, %35
  ret void

976:                                              ; preds = %976, %953
  %977 = phi i64 [ %956, %953 ], [ %979, %976 ]
  %978 = phi %"class.viz::SurfaceAllocationGroup"** [ %959, %953 ], [ %989, %976 ]
  %979 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %978 to i64
  %980 = bitcast %"class.viz::SurfaceAllocationGroup"** %978 to i64*
  %981 = load i64, i64* %980, align 8
  %982 = inttoptr i64 %977 to i64*
  store i64 %981, i64* %982, align 8
  %983 = sub i64 %688, %979
  %984 = ashr exact i64 %983, 3
  %985 = icmp slt i64 %734, %984
  %986 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %978, i64 %734
  %987 = sub nsw i64 %734, %984
  %988 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %693, i64 %987
  %989 = select i1 %985, %"class.viz::SurfaceAllocationGroup"** %986, %"class.viz::SurfaceAllocationGroup"** %988
  %990 = icmp eq %"class.viz::SurfaceAllocationGroup"** %989, %955
  br i1 %990, label %991, label %976

991:                                              ; preds = %976
  %992 = bitcast %"class.viz::SurfaceAllocationGroup"** %978 to i64*
  store i64 %958, i64* %992, align 8
  %993 = icmp eq %"class.viz::SurfaceAllocationGroup"** %955, %693
  br i1 %993, label %929, label %931
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3viz9SurfaceIdENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.35"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.viz::SurfaceId"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.35"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.35"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.viz::SurfaceId"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #16
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.viz::SurfaceId"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.viz::SurfaceId"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %9
  %38 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %35
  %39 = ptrtoint %"class.viz::SurfaceId"* %38 to i64
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %40, align 4
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %9, i32 0, i32 1
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %43, align 4
  %46 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %9, i32 1, i32 0
  %47 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %48 = load i32, i32* %47, align 8
  store i32 %48, i32* %46, align 8
  %49 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %9, i32 1, i32 1
  %50 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %49, align 4
  %52 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %36, i64 %9, i32 1, i32 2
  %53 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %54 = bitcast %"class.base::UnguessableToken"* %52 to i8*
  %55 = bitcast %"class.base::UnguessableToken"* %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false) #14
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 1
  %57 = ptrtoint %"class.viz::SurfaceId"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %0, i64 0, i32 0, i32 0
  %59 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %58, align 8
  %60 = ptrtoint %"class.viz::SurfaceId"* %59 to i64
  %61 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  %62 = icmp eq %"class.viz::SurfaceId"* %61, %59
  br i1 %62, label %134, label %63

63:                                               ; preds = %34
  %64 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1, i32 0, i32 0
  %65 = ptrtoint i32* %64 to i64
  %66 = sub i64 %65, %60
  %67 = and i64 %66, 32
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %88

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1
  %71 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1, i32 0, i32 0
  %72 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %70, i64 0, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %71, align 4
  %74 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1, i32 0, i32 1
  %75 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1, i32 1, i32 0
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1, i32 1, i32 0
  %79 = load i32, i32* %78, align 8
  store i32 %79, i32* %77, align 8
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1, i32 1, i32 1
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1, i32 1, i32 1
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1, i32 1, i32 2
  %84 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %61, i64 -1, i32 1, i32 2
  %85 = bitcast %"class.base::UnguessableToken"* %83 to i8*
  %86 = bitcast %"class.base::UnguessableToken"* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 16, i1 false) #14
  %87 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %37, i64 -1
  br label %88

88:                                               ; preds = %69, %63
  %89 = phi %"class.viz::SurfaceId"* [ undef, %63 ], [ %87, %69 ]
  %90 = phi %"class.viz::SurfaceId"* [ %37, %63 ], [ %87, %69 ]
  %91 = phi %"class.viz::SurfaceId"* [ %61, %63 ], [ %70, %69 ]
  %92 = icmp ult i64 %66, 32
  br i1 %92, label %131, label %93

93:                                               ; preds = %88, %93
  %94 = phi %"class.viz::SurfaceId"* [ %129, %93 ], [ %90, %88 ]
  %95 = phi %"class.viz::SurfaceId"* [ %112, %93 ], [ %91, %88 ]
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -1, i32 0, i32 0
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  store i32 %98, i32* %96, align 4
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -1, i32 0, i32 1
  %100 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  store i32 %101, i32* %99, align 4
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -1, i32 1, i32 0
  %103 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 0
  %104 = load i32, i32* %103, align 8
  store i32 %104, i32* %102, align 8
  %105 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -1, i32 1, i32 1
  %106 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 1
  %107 = load i32, i32* %106, align 4
  store i32 %107, i32* %105, align 4
  %108 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -1, i32 1, i32 2
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 2
  %110 = bitcast %"class.base::UnguessableToken"* %108 to i8*
  %111 = bitcast %"class.base::UnguessableToken"* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #14
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -2
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2, i32 0, i32 0
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %112, i64 0, i32 0, i32 0
  %115 = load i32, i32* %114, align 4
  store i32 %115, i32* %113, align 4
  %116 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2, i32 0, i32 1
  %117 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -2, i32 0, i32 1
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %116, align 4
  %119 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2, i32 1, i32 0
  %120 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -2, i32 1, i32 0
  %121 = load i32, i32* %120, align 8
  store i32 %121, i32* %119, align 8
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2, i32 1, i32 1
  %123 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -2, i32 1, i32 1
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %122, align 4
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2, i32 1, i32 2
  %126 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -2, i32 1, i32 2
  %127 = bitcast %"class.base::UnguessableToken"* %125 to i8*
  %128 = bitcast %"class.base::UnguessableToken"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false) #14
  %129 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %94, i64 -2
  %130 = icmp eq %"class.viz::SurfaceId"* %112, %59
  br i1 %130, label %131, label %93

131:                                              ; preds = %93, %88
  %132 = phi %"class.viz::SurfaceId"* [ %89, %88 ], [ %129, %93 ]
  %133 = load i64, i64* %6, align 8
  br label %134

134:                                              ; preds = %34, %131
  %135 = phi %"class.viz::SurfaceId"* [ %132, %131 ], [ %37, %34 ]
  %136 = phi i64 [ %133, %131 ], [ %60, %34 ]
  %137 = ptrtoint %"class.viz::SurfaceId"* %135 to i64
  store i64 %137, i64* %6, align 8
  store i64 %57, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %138 = icmp eq i64 %136, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  %140 = inttoptr i64 %136 to i8*
  tail call void @_ZdlPv(i8* %140) #15
  br label %141

141:                                              ; preds = %134, %139
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.viz::SurfaceAllocationGroup"** @_ZNSt3__16vectorIPN3viz22SurfaceAllocationGroupENS_9allocatorIS3_EEE7emplaceIJRKS3_EEENS_11__wrap_iterIPS3_EENSA_IPS8_EEDpOT_(%"class.std::__1::vector.297"*, %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer.494", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %9, align 8
  %11 = icmp ult %"class.viz::SurfaceAllocationGroup"** %8, %10
  %12 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %8 to i64
  %13 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %10 to i64
  br i1 %11, label %14, label %163

14:                                               ; preds = %3
  %15 = icmp eq %"class.viz::SurfaceAllocationGroup"** %8, %1
  %16 = bitcast %"class.viz::SurfaceAllocationGroup"** %2 to i64*
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %23

18:                                               ; preds = %14
  %19 = bitcast %"class.viz::SurfaceAllocationGroup"** %1 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 1
  %21 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %20 to i64
  %22 = bitcast %"class.viz::SurfaceAllocationGroup"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %319

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 1
  %25 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 %27
  %29 = bitcast %"class.viz::SurfaceAllocationGroup"*** %7 to i64*
  %30 = icmp ult %"class.viz::SurfaceAllocationGroup"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %32
  %34 = bitcast %"class.viz::SurfaceAllocationGroup"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.viz::SurfaceAllocationGroup"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.viz::SurfaceAllocationGroup"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %152

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %45
  %47 = bitcast %"class.viz::SurfaceAllocationGroup"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %1, i64 %55
  %57 = icmp ult %"class.viz::SurfaceAllocationGroup"** %8, %56
  %58 = icmp ult %"class.viz::SurfaceAllocationGroup"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %61
  %63 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %72
  %75 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %72
  %76 = bitcast %"class.viz::SurfaceAllocationGroup"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !90
  %78 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %75, i64 2
  %79 = bitcast %"class.viz::SurfaceAllocationGroup"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !90
  %81 = bitcast %"class.viz::SurfaceAllocationGroup"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !93, !noalias !90
  %82 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %74, i64 2
  %83 = bitcast %"class.viz::SurfaceAllocationGroup"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !93, !noalias !90
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %84
  %86 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %84
  %87 = bitcast %"class.viz::SurfaceAllocationGroup"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !90
  %89 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %86, i64 2
  %90 = bitcast %"class.viz::SurfaceAllocationGroup"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !90
  %92 = bitcast %"class.viz::SurfaceAllocationGroup"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !93, !noalias !90
  %93 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %85, i64 2
  %94 = bitcast %"class.viz::SurfaceAllocationGroup"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !93, !noalias !90
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %95
  %97 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %95
  %98 = bitcast %"class.viz::SurfaceAllocationGroup"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !90
  %100 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %97, i64 2
  %101 = bitcast %"class.viz::SurfaceAllocationGroup"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !90
  %103 = bitcast %"class.viz::SurfaceAllocationGroup"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !93, !noalias !90
  %104 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %96, i64 2
  %105 = bitcast %"class.viz::SurfaceAllocationGroup"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !93, !noalias !90
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %106
  %108 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %106
  %109 = bitcast %"class.viz::SurfaceAllocationGroup"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !90
  %111 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %108, i64 2
  %112 = bitcast %"class.viz::SurfaceAllocationGroup"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !90
  %114 = bitcast %"class.viz::SurfaceAllocationGroup"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !93, !noalias !90
  %115 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %107, i64 2
  %116 = bitcast %"class.viz::SurfaceAllocationGroup"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !93, !noalias !90
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !95

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %124
  %127 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %28, i64 %124
  %128 = bitcast %"class.viz::SurfaceAllocationGroup"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !90
  %130 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %127, i64 2
  %131 = bitcast %"class.viz::SurfaceAllocationGroup"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !90
  %133 = bitcast %"class.viz::SurfaceAllocationGroup"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !93, !noalias !90
  %134 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %126, i64 2
  %135 = bitcast %"class.viz::SurfaceAllocationGroup"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !93, !noalias !90
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !96

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %152, %139
  %142 = phi %"class.viz::SurfaceAllocationGroup"** [ %62, %139 ], [ %159, %152 ]
  %143 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %8, i64 %148
  %150 = bitcast %"class.viz::SurfaceAllocationGroup"** %149 to i8*
  %151 = bitcast %"class.viz::SurfaceAllocationGroup"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 %26, i1 false) #14
  br label %161

152:                                              ; preds = %41, %152
  %153 = phi %"class.viz::SurfaceAllocationGroup"** [ %159, %152 ], [ %42, %41 ]
  %154 = phi %"class.viz::SurfaceAllocationGroup"** [ %158, %152 ], [ %43, %41 ]
  %155 = bitcast %"class.viz::SurfaceAllocationGroup"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.viz::SurfaceAllocationGroup"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %154, i64 1
  %159 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %153, i64 1
  %160 = icmp ult %"class.viz::SurfaceAllocationGroup"** %158, %8
  br i1 %160, label %152, label %141, !llvm.loop !97

161:                                              ; preds = %144, %147
  %162 = bitcast %"class.viz::SurfaceAllocationGroup"** %1 to i64*
  store i64 %17, i64* %162, align 8
  br label %319

163:                                              ; preds = %3
  %164 = getelementptr inbounds %"class.std::__1::vector.297", %"class.std::__1::vector.297"* %0, i64 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::__split_buffer.494"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %165) #14
  %166 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %5, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %5, i64 0, i32 1
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %5, i64 0, i32 2
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %5, i64 0, i32 3, i32 0, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %5, i64 0, i32 3, i32 1, i32 0
  %171 = bitcast %"class.viz::SurfaceAllocationGroup"*** %7 to i64*
  %172 = bitcast %"class.std::__1::vector.297"* %0 to i64*
  %173 = bitcast %"struct.std::__1::__split_buffer.494"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 40, i1 false)
  %174 = load i64, i64* %172, align 8
  %175 = sub i64 %12, %174
  %176 = ashr exact i64 %175, 3
  %177 = add nsw i64 %176, 1
  %178 = icmp ugt i64 %177, 2305843009213693951
  br i1 %178, label %179, label %181

179:                                              ; preds = %163
  %180 = bitcast %"class.std::__1::vector.297"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #16
  unreachable

181:                                              ; preds = %163
  %182 = bitcast %"class.viz::SurfaceAllocationGroup"*** %9 to i64*
  %183 = sub i64 %13, %174
  %184 = ashr exact i64 %183, 3
  %185 = icmp ult i64 %184, 1152921504606846975
  br i1 %185, label %190, label %186

186:                                              ; preds = %181
  %187 = sub i64 %4, %174
  %188 = ashr exact i64 %187, 3
  store %"class.viz::SurfaceAllocationGroup"** null, %"class.viz::SurfaceAllocationGroup"*** %169, align 8
  %189 = bitcast %"class.std::__1::allocator.320"** %170 to %"class.std::__1::__compressed_pair.317"**
  store %"class.std::__1::__compressed_pair.317"* %164, %"class.std::__1::__compressed_pair.317"** %189, align 8
  br label %201

190:                                              ; preds = %181
  %191 = ashr exact i64 %183, 2
  %192 = icmp ult i64 %191, %177
  %193 = select i1 %192, i64 %177, i64 %191
  %194 = sub i64 %4, %174
  %195 = ashr exact i64 %194, 3
  store %"class.viz::SurfaceAllocationGroup"** null, %"class.viz::SurfaceAllocationGroup"*** %169, align 8
  %196 = bitcast %"class.std::__1::allocator.320"** %170 to %"class.std::__1::__compressed_pair.317"**
  store %"class.std::__1::__compressed_pair.317"* %164, %"class.std::__1::__compressed_pair.317"** %196, align 8
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %190
  %199 = icmp ugt i64 %193, 2305843009213693951
  br i1 %199, label %200, label %201

200:                                              ; preds = %198
  tail call void @abort() #16
  unreachable

201:                                              ; preds = %186, %198
  %202 = phi i64 [ 2305843009213693951, %186 ], [ %193, %198 ]
  %203 = phi i64 [ %188, %186 ], [ %195, %198 ]
  %204 = shl i64 %202, 3
  %205 = tail call i8* @_Znwm(i64 %204) #15
  %206 = bitcast i8* %205 to %"class.viz::SurfaceAllocationGroup"**
  br label %207

207:                                              ; preds = %190, %201
  %208 = phi i64 [ %203, %201 ], [ %195, %190 ]
  %209 = phi i64 [ %202, %201 ], [ 0, %190 ]
  %210 = phi %"class.viz::SurfaceAllocationGroup"** [ %206, %201 ], [ null, %190 ]
  store %"class.viz::SurfaceAllocationGroup"** %210, %"class.viz::SurfaceAllocationGroup"*** %166, align 8
  %211 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %210, i64 %208
  store %"class.viz::SurfaceAllocationGroup"** %211, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  store %"class.viz::SurfaceAllocationGroup"** %211, %"class.viz::SurfaceAllocationGroup"*** %167, align 8
  %212 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %210, i64 %209
  store %"class.viz::SurfaceAllocationGroup"** %212, %"class.viz::SurfaceAllocationGroup"*** %169, align 8
  call void @_ZNSt3__114__split_bufferIPN3viz22SurfaceAllocationGroupERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer.494"* nonnull %5, %"class.viz::SurfaceAllocationGroup"** dereferenceable(8) %2)
  %213 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %167, align 8
  %214 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %6, align 8
  %215 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %214 to i64
  %216 = sub i64 %4, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub nsw i64 0, %217
  %219 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %213, i64 %218
  store %"class.viz::SurfaceAllocationGroup"** %219, %"class.viz::SurfaceAllocationGroup"*** %167, align 8
  %220 = icmp sgt i64 %216, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %207
  %222 = bitcast %"class.viz::SurfaceAllocationGroup"** %219 to i8*
  %223 = bitcast %"class.viz::SurfaceAllocationGroup"** %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 %216, i1 false) #14
  br label %224

224:                                              ; preds = %221, %207
  %225 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %7, align 8
  %226 = icmp eq %"class.viz::SurfaceAllocationGroup"** %225, %1
  br i1 %226, label %227, label %231

227:                                              ; preds = %224
  %228 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %225 to i64
  %229 = bitcast %"class.viz::SurfaceAllocationGroup"*** %168 to i64*
  %230 = load i64, i64* %229, align 8
  br label %293

231:                                              ; preds = %224
  %232 = bitcast %"class.viz::SurfaceAllocationGroup"*** %168 to i64**
  %233 = load i64*, i64** %232, align 8
  %234 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %225, i64 -1
  %235 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %234 to i64
  %236 = sub i64 %235, %4
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %231, %241
  %242 = phi i64* [ %250, %241 ], [ %233, %231 ]
  %243 = phi %"class.viz::SurfaceAllocationGroup"** [ %247, %241 ], [ %1, %231 ]
  %244 = phi i64 [ %251, %241 ], [ %239, %231 ]
  %245 = bitcast %"class.viz::SurfaceAllocationGroup"** %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %242, align 8
  %247 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %243, i64 1
  %248 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %249 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %248, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %249, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %250 = bitcast %"class.viz::SurfaceAllocationGroup"** %249 to i64*
  %251 = add i64 %244, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %241, !llvm.loop !98

253:                                              ; preds = %241
  %254 = bitcast %"class.viz::SurfaceAllocationGroup"** %249 to i64*
  br label %255

255:                                              ; preds = %231, %253
  %256 = phi %"class.viz::SurfaceAllocationGroup"** [ undef, %231 ], [ %249, %253 ]
  %257 = phi i64* [ %233, %231 ], [ %254, %253 ]
  %258 = phi %"class.viz::SurfaceAllocationGroup"** [ %1, %231 ], [ %247, %253 ]
  %259 = icmp ult i64 %236, 24
  br i1 %259, label %288, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64* [ %287, %260 ], [ %257, %255 ]
  %262 = phi %"class.viz::SurfaceAllocationGroup"** [ %283, %260 ], [ %258, %255 ]
  %263 = bitcast %"class.viz::SurfaceAllocationGroup"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %261, align 8
  %265 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %262, i64 1
  %266 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %267 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %266, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %267, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %268 = bitcast %"class.viz::SurfaceAllocationGroup"** %267 to i64*
  %269 = bitcast %"class.viz::SurfaceAllocationGroup"** %265 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %268, align 8
  %271 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %262, i64 2
  %272 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %273 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %272, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %273, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %274 = bitcast %"class.viz::SurfaceAllocationGroup"** %273 to i64*
  %275 = bitcast %"class.viz::SurfaceAllocationGroup"** %271 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %274, align 8
  %277 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %262, i64 3
  %278 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %279 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %278, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %279, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %280 = bitcast %"class.viz::SurfaceAllocationGroup"** %279 to i64*
  %281 = bitcast %"class.viz::SurfaceAllocationGroup"** %277 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %280, align 8
  %283 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %262, i64 4
  %284 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %285 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %284, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %285, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  %286 = icmp eq %"class.viz::SurfaceAllocationGroup"** %283, %225
  %287 = bitcast %"class.viz::SurfaceAllocationGroup"** %285 to i64*
  br i1 %286, label %288, label %260

288:                                              ; preds = %260, %255
  %289 = phi %"class.viz::SurfaceAllocationGroup"** [ %256, %255 ], [ %285, %260 ]
  %290 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %289 to i64
  %291 = load i64, i64* %171, align 8
  %292 = bitcast %"class.viz::SurfaceAllocationGroup"*** %168 to i64*
  br label %293

293:                                              ; preds = %227, %288
  %294 = phi i64* [ %229, %227 ], [ %292, %288 ]
  %295 = phi i64 [ %230, %227 ], [ %290, %288 ]
  %296 = phi i64 [ %228, %227 ], [ %291, %288 ]
  %297 = load i64, i64* %172, align 8
  %298 = bitcast %"class.viz::SurfaceAllocationGroup"*** %167 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %172, align 8
  store i64 %297, i64* %298, align 8
  store i64 %295, i64* %171, align 8
  store i64 %296, i64* %294, align 8
  %300 = load i64, i64* %182, align 8
  %301 = bitcast %"class.viz::SurfaceAllocationGroup"*** %169 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %182, align 8
  store i64 %300, i64* %301, align 8
  %303 = bitcast %"struct.std::__1::__split_buffer.494"* %5 to i64*
  store i64 %297, i64* %303, align 8
  %304 = inttoptr i64 %297 to %"class.viz::SurfaceAllocationGroup"**
  %305 = inttoptr i64 %296 to %"class.viz::SurfaceAllocationGroup"**
  %306 = icmp eq %"class.viz::SurfaceAllocationGroup"** %305, %304
  br i1 %306, label %314, label %307

307:                                              ; preds = %293
  %308 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %305, i64 -1
  %309 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %308 to i64
  %310 = sub i64 %309, %297
  %311 = lshr i64 %310, 3
  %312 = xor i64 %311, -1
  %313 = getelementptr %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %305, i64 %312
  store %"class.viz::SurfaceAllocationGroup"** %313, %"class.viz::SurfaceAllocationGroup"*** %168, align 8
  br label %314

314:                                              ; preds = %307, %293
  %315 = icmp eq i64 %297, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = inttoptr i64 %297 to i8*
  call void @_ZdlPv(i8* %317) #15
  br label %318

318:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %165) #14
  br label %319

319:                                              ; preds = %18, %161, %318
  %320 = phi %"class.viz::SurfaceAllocationGroup"** [ %1, %18 ], [ %1, %161 ], [ %213, %318 ]
  ret %"class.viz::SurfaceAllocationGroup"** %320
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3viz22SurfaceAllocationGroupERNS_9allocatorIS3_EEE12emplace_backIJRKS3_EEEvDpOT_(%"struct.std::__1::__split_buffer.494"*, %"class.viz::SurfaceAllocationGroup"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %0, i64 0, i32 2
  %4 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %5, align 8
  %7 = icmp eq %"class.viz::SurfaceAllocationGroup"** %4, %6
  %8 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %6 to i64
  %9 = bitcast %"class.viz::SurfaceAllocationGroup"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %0, i64 0, i32 1
  %12 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.494", %"struct.std::__1::__split_buffer.494"* %0, i64 0, i32 0
  %14 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %13, align 8
  %15 = icmp ugt %"class.viz::SurfaceAllocationGroup"** %12, %14
  %16 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %12, i64 %22
  %24 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.viz::SurfaceAllocationGroup"** %23 to i8*
  %30 = bitcast %"class.viz::SurfaceAllocationGroup"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.viz::SurfaceAllocationGroup"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %23, i64 %26
  store %"class.viz::SurfaceAllocationGroup"** %34, %"class.viz::SurfaceAllocationGroup"*** %3, align 8
  %35 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %33, i64 %22
  store %"class.viz::SurfaceAllocationGroup"** %35, %"class.viz::SurfaceAllocationGroup"*** %11, align 8
  %36 = bitcast %"class.viz::SurfaceAllocationGroup"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.viz::SurfaceAllocationGroup"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.494"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %"class.viz::SurfaceAllocationGroup"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %50, i64 %47
  %53 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %52 to i64
  %54 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %50, i64 %43
  %55 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %54 to i64
  %56 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %12 to i64
  %57 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.viz::SurfaceAllocationGroup"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.viz::SurfaceAllocationGroup"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.viz::SurfaceAllocationGroup"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %69, i64 1
  %77 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %76 to i64
  %78 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !99

81:                                               ; preds = %68
  %82 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.viz::SurfaceAllocationGroup"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.viz::SurfaceAllocationGroup"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.viz::SurfaceAllocationGroup"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.viz::SurfaceAllocationGroup"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.viz::SurfaceAllocationGroup"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 1
  %96 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 1
  %97 = bitcast %"class.viz::SurfaceAllocationGroup"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.viz::SurfaceAllocationGroup"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 2
  %101 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 2
  %102 = bitcast %"class.viz::SurfaceAllocationGroup"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.viz::SurfaceAllocationGroup"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 3
  %106 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 3
  %107 = bitcast %"class.viz::SurfaceAllocationGroup"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.viz::SurfaceAllocationGroup"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 4
  %111 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 4
  %112 = bitcast %"class.viz::SurfaceAllocationGroup"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.viz::SurfaceAllocationGroup"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 5
  %116 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 5
  %117 = bitcast %"class.viz::SurfaceAllocationGroup"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.viz::SurfaceAllocationGroup"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 6
  %121 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 6
  %122 = bitcast %"class.viz::SurfaceAllocationGroup"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.viz::SurfaceAllocationGroup"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 7
  %126 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 7
  %127 = bitcast %"class.viz::SurfaceAllocationGroup"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.viz::SurfaceAllocationGroup"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %89, i64 8
  %131 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %130 to i64
  %132 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %91, i64 8
  %133 = icmp eq %"class.viz::SurfaceAllocationGroup"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.viz::SurfaceAllocationGroup"** %60 to i64
  %136 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.viz::SurfaceAllocationGroup"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.viz::SurfaceAllocationGroup"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.viz::SurfaceAllocationGroup"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.viz::SurfaceAllocationGroup"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.viz::SurfaceAllocationGroup"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = bitcast %"class.viz::SurfaceAllocationGroup"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.viz::SurfaceAllocationGroup"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.viz::SurfaceAllocationGroup"**, %"class.viz::SurfaceAllocationGroup"*** %3, align 8
  %153 = getelementptr inbounds %"class.viz::SurfaceAllocationGroup"*, %"class.viz::SurfaceAllocationGroup"** %152, i64 1
  store %"class.viz::SurfaceAllocationGroup"** %153, %"class.viz::SurfaceAllocationGroup"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE15sort_and_uniqueENS5_11__wrap_iterIPS3_EESF_(%"class.base::internal::flat_tree.34"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare", align 1
  %5 = ptrtoint %"class.viz::SurfaceId"* %2 to i64
  %6 = getelementptr inbounds %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare", %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  %7 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp sgt i64 %8, 4096
  br i1 %10, label %11, label %22

11:                                               ; preds = %3
  %12 = icmp slt i64 %9, 288230376151711743
  %13 = select i1 %12, i64 %9, i64 288230376151711743
  br label %14

14:                                               ; preds = %19, %11
  %15 = phi i64 [ %20, %19 ], [ %13, %11 ]
  %16 = shl i64 %15, 5
  %17 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %16, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #14
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = lshr i64 %15, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %14

22:                                               ; preds = %19, %3
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* %2, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.viz::SurfaceId"* null, i64 0) #14
  br label %25

23:                                               ; preds = %14
  %24 = bitcast i8* %17 to %"class.viz::SurfaceId"*
  call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* %2, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* nonnull dereferenceable(1) %4, i64 %9, %"class.viz::SurfaceId"* nonnull %24, i64 %15) #14
  call void @_ZdlPv(i8* nonnull %17) #15
  br label %25

25:                                               ; preds = %22, %23
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  %26 = call %"class.viz::SurfaceId"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN3viz9SurfaceIdEEEN4base8internal9NotFnImplINS7_9flat_treeIS3_NS6_8identityENS_4lessIvEENS_6vectorIS3_NS_9allocatorIS3_EEEEE13value_compareEEEEET_SK_SK_T0_(%"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* %2)
  %27 = icmp eq %"class.viz::SurfaceId"* %26, %2
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.base::internal::flat_tree.34", %"class.base::internal::flat_tree.34"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"class.viz::SurfaceId"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %5
  %33 = ashr exact i64 %32, 5
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = bitcast %"class.viz::SurfaceId"* %26 to i8*
  %37 = bitcast %"class.viz::SurfaceId"* %2 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 %32, i1 false) #14
  br label %38

38:                                               ; preds = %35, %28
  %39 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %26, i64 %33
  store %"class.viz::SurfaceId"* %39, %"class.viz::SurfaceId"** %29, align 8
  br label %40

40:                                               ; preds = %25, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.viz::SurfaceId"* @_ZNSt3__16uniqueINS_11__wrap_iterIPN3viz9SurfaceIdEEEN4base8internal9NotFnImplINS7_9flat_treeIS3_NS6_8identityENS_4lessIvEENS_6vectorIS3_NS_9allocatorIS3_EEEEE13value_compareEEEEET_SK_SK_T0_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %3, label %62, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 1
  %6 = icmp eq %"class.viz::SurfaceId"* %5, %1
  br i1 %6, label %60, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %57, %7
  %11 = phi i32 [ %17, %57 ], [ %9, %7 ]
  %12 = phi %"class.viz::SurfaceId"* [ %58, %57 ], [ %5, %7 ]
  %13 = phi %"class.viz::SurfaceId"* [ %12, %57 ], [ %0, %7 ]
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %12, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 1, i32 0, i32 1
  %17 = load i32, i32* %15, align 4
  %18 = icmp ult i32 %11, %17
  br i1 %18, label %57, label %19

19:                                               ; preds = %10
  %20 = icmp ult i32 %17, %11
  br i1 %20, label %62, label %21

21:                                               ; preds = %19
  %22 = load i32, i32* %14, align 4
  %23 = load i32, i32* %16, align 4
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %57, label %25

25:                                               ; preds = %21
  %26 = icmp ult i32 %23, %22
  br i1 %26, label %62, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 0, i32 1, i32 0
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 0, i32 1, i32 1
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 1, i32 1, i32 0
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 1, i32 1, i32 1
  %32 = load i32, i32* %28, align 4
  %33 = load i32, i32* %30, align 4
  %34 = icmp ult i32 %32, %33
  br i1 %34, label %57, label %35

35:                                               ; preds = %27
  %36 = icmp ult i32 %33, %32
  br i1 %36, label %62, label %37

37:                                               ; preds = %35
  %38 = load i32, i32* %29, align 4
  %39 = load i32, i32* %31, align 4
  %40 = icmp ult i32 %38, %39
  br i1 %40, label %57, label %41

41:                                               ; preds = %37
  %42 = icmp ult i32 %39, %38
  br i1 %42, label %62, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 0, i32 1, i32 2, i32 0, i32 0
  %45 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 0, i32 1, i32 2, i32 0, i32 1
  %46 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 1, i32 1, i32 2, i32 0, i32 0
  %47 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %13, i64 1, i32 1, i32 2, i32 0, i32 1
  %48 = load i64, i64* %44, align 8
  %49 = load i64, i64* %46, align 8
  %50 = icmp ult i64 %48, %49
  br i1 %50, label %57, label %51

51:                                               ; preds = %43
  %52 = icmp ult i64 %49, %48
  br i1 %52, label %62, label %53

53:                                               ; preds = %51
  %54 = load i64, i64* %45, align 8
  %55 = load i64, i64* %47, align 8
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %57, label %62

57:                                               ; preds = %53, %43, %37, %27, %21, %10
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %12, i64 1
  %59 = icmp eq %"class.viz::SurfaceId"* %58, %1
  br i1 %59, label %60, label %10

60:                                               ; preds = %57, %4
  %61 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  br label %137

62:                                               ; preds = %19, %25, %35, %41, %51, %53, %2
  %63 = phi %"class.viz::SurfaceId"* [ %0, %2 ], [ %13, %53 ], [ %13, %51 ], [ %13, %41 ], [ %13, %35 ], [ %13, %25 ], [ %13, %19 ]
  %64 = ptrtoint %"class.viz::SurfaceId"* %63 to i64
  %65 = icmp eq %"class.viz::SurfaceId"* %63, %1
  br i1 %65, label %137, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %63, i64 2
  %68 = icmp eq %"class.viz::SurfaceId"* %67, %1
  br i1 %68, label %133, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %63, i64 1
  br label %71

71:                                               ; preds = %69, %126
  %72 = phi %"class.viz::SurfaceId"* [ %130, %126 ], [ %63, %69 ]
  %73 = phi %"class.viz::SurfaceId"* [ %128, %126 ], [ %67, %69 ]
  %74 = phi %"class.viz::SurfaceId"* [ %73, %126 ], [ %70, %69 ]
  %75 = phi i64 [ %127, %126 ], [ %64, %69 ]
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 0, i32 1
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %73, i64 0, i32 0, i32 0
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %74, i64 1, i32 0, i32 1
  %80 = load i32, i32* %76, align 4
  %81 = load i32, i32* %78, align 4
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %121, label %83

83:                                               ; preds = %71
  %84 = icmp ult i32 %81, %80
  br i1 %84, label %126, label %85

85:                                               ; preds = %83
  %86 = load i32, i32* %77, align 4
  %87 = load i32, i32* %79, align 4
  %88 = icmp ult i32 %86, %87
  br i1 %88, label %121, label %89

89:                                               ; preds = %85
  %90 = icmp ult i32 %87, %86
  br i1 %90, label %126, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 0
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 1
  %94 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %74, i64 1, i32 1, i32 0
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %74, i64 1, i32 1, i32 1
  %96 = load i32, i32* %92, align 4
  %97 = load i32, i32* %94, align 4
  %98 = icmp ult i32 %96, %97
  br i1 %98, label %121, label %99

99:                                               ; preds = %91
  %100 = icmp ult i32 %97, %96
  br i1 %100, label %126, label %101

101:                                              ; preds = %99
  %102 = load i32, i32* %93, align 4
  %103 = load i32, i32* %95, align 4
  %104 = icmp ult i32 %102, %103
  br i1 %104, label %121, label %105

105:                                              ; preds = %101
  %106 = icmp ult i32 %103, %102
  br i1 %106, label %126, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 2, i32 0, i32 0
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 0, i32 1, i32 2, i32 0, i32 1
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %74, i64 1, i32 1, i32 2, i32 0, i32 0
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %74, i64 1, i32 1, i32 2, i32 0, i32 1
  %112 = load i64, i64* %108, align 8
  %113 = load i64, i64* %110, align 8
  %114 = icmp ult i64 %112, %113
  br i1 %114, label %121, label %115

115:                                              ; preds = %107
  %116 = icmp ult i64 %113, %112
  br i1 %116, label %126, label %117

117:                                              ; preds = %115
  %118 = load i64, i64* %109, align 8
  %119 = load i64, i64* %111, align 8
  %120 = icmp ult i64 %118, %119
  br i1 %120, label %121, label %126

121:                                              ; preds = %117, %71, %91, %101, %107, %85
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %72, i64 1
  %123 = ptrtoint %"class.viz::SurfaceId"* %122 to i64
  %124 = bitcast %"class.viz::SurfaceId"* %122 to i8*
  %125 = bitcast %"class.viz::SurfaceId"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 32, i1 false)
  br label %126

126:                                              ; preds = %117, %83, %99, %105, %115, %89, %121
  %127 = phi i64 [ %75, %117 ], [ %123, %121 ], [ %75, %89 ], [ %75, %115 ], [ %75, %105 ], [ %75, %99 ], [ %75, %83 ]
  %128 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %73, i64 1
  %129 = icmp eq %"class.viz::SurfaceId"* %128, %1
  %130 = inttoptr i64 %127 to %"class.viz::SurfaceId"*
  br i1 %129, label %131, label %71

131:                                              ; preds = %126
  %132 = inttoptr i64 %127 to %"class.viz::SurfaceId"*
  br label %133

133:                                              ; preds = %131, %66
  %134 = phi %"class.viz::SurfaceId"* [ %63, %66 ], [ %132, %131 ]
  %135 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %134, i64 1
  %136 = ptrtoint %"class.viz::SurfaceId"* %135 to i64
  br label %137

137:                                              ; preds = %62, %60, %133
  %138 = phi i64 [ %136, %133 ], [ %64, %62 ], [ %61, %60 ]
  %139 = inttoptr i64 %138 to %"class.viz::SurfaceId"*
  ret %"class.viz::SurfaceId"* %139
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1), i64, %"class.viz::SurfaceId"*, i64) local_unnamed_addr #0 comdat {
  switch i64 %3, label %71 [
    i64 0, label %310
    i64 1, label %310
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1
  %9 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %8, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 1
  %11 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %9, align 4
  %14 = load i32, i32* %11, align 4
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %7
  %17 = load i32, i32* %12, align 4
  br label %56

18:                                               ; preds = %7
  %19 = icmp ult i32 %14, %13
  br i1 %19, label %310, label %20

20:                                               ; preds = %18
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %12, align 4
  %23 = icmp ult i32 %21, %22
  br i1 %23, label %56, label %24

24:                                               ; preds = %20
  %25 = icmp ult i32 %22, %21
  br i1 %25, label %310, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 0
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 1
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %31 = load i32, i32* %27, align 4
  %32 = load i32, i32* %29, align 4
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %56, label %34

34:                                               ; preds = %26
  %35 = icmp ult i32 %32, %31
  br i1 %35, label %310, label %36

36:                                               ; preds = %34
  %37 = load i32, i32* %28, align 4
  %38 = load i32, i32* %30, align 4
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %56, label %40

40:                                               ; preds = %36
  %41 = icmp ult i32 %38, %37
  br i1 %41, label %310, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2, i32 0, i32 0
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2, i32 0, i32 1
  %45 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %46 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %47 = load i64, i64* %43, align 8
  %48 = load i64, i64* %45, align 8
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %56, label %50

50:                                               ; preds = %42
  %51 = icmp ult i64 %48, %47
  br i1 %51, label %310, label %52

52:                                               ; preds = %50
  %53 = load i64, i64* %44, align 8
  %54 = load i64, i64* %46, align 8
  %55 = icmp ult i64 %53, %54
  br i1 %55, label %56, label %310

56:                                               ; preds = %16, %26, %36, %42, %20, %52
  %57 = phi i32 [ %17, %16 ], [ %22, %26 ], [ %22, %36 ], [ %22, %42 ], [ %22, %20 ], [ %22, %52 ]
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %63 = bitcast i64* %62 to <2 x i64>*
  %64 = load <2 x i64>, <2 x i64>* %63, align 8
  %65 = bitcast %"class.viz::SurfaceId"* %0 to i8*
  %66 = bitcast %"class.viz::SurfaceId"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 32, i1 false) #14
  store i32 %14, i32* %9, align 8
  store i32 %57, i32* %10, align 4
  %67 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 0
  store i32 %59, i32* %67, align 8
  %68 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 1
  store i32 %61, i32* %68, align 4
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2, i32 0, i32 0
  %70 = bitcast i64* %69 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %70, align 8
  br label %310

71:                                               ; preds = %6
  %72 = icmp slt i64 %3, 129
  br i1 %72, label %73, label %144

73:                                               ; preds = %71
  %74 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %74, label %310, label %75

75:                                               ; preds = %73
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 1
  %77 = icmp eq %"class.viz::SurfaceId"* %76, %1
  br i1 %77, label %310, label %78

78:                                               ; preds = %75, %130
  %79 = phi %"class.viz::SurfaceId"* [ %138, %130 ], [ %76, %75 ]
  %80 = phi %"class.viz::SurfaceId"* [ %79, %130 ], [ %0, %75 ]
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %79, i64 0, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1, i32 1, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1, i32 1, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1, i32 1, i32 2, i32 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1, i32 1, i32 2, i32 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp eq %"class.viz::SurfaceId"* %79, %0
  br i1 %93, label %130, label %94

94:                                               ; preds = %78, %140
  %95 = phi %"class.viz::SurfaceId"* [ %96, %140 ], [ %79, %78 ]
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %96, i64 0, i32 0, i32 0
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 0, i32 1
  %99 = load i32, i32* %97, align 4
  %100 = icmp ult i32 %82, %99
  br i1 %100, label %140, label %101

101:                                              ; preds = %94
  %102 = icmp ult i32 %99, %82
  br i1 %102, label %130, label %103

103:                                              ; preds = %101
  %104 = load i32, i32* %98, align 4
  %105 = icmp ult i32 %84, %104
  br i1 %105, label %140, label %106

106:                                              ; preds = %103
  %107 = icmp ult i32 %104, %84
  br i1 %107, label %130, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 0
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 1
  %111 = load i32, i32* %109, align 4
  %112 = icmp ult i32 %86, %111
  br i1 %112, label %140, label %113

113:                                              ; preds = %108
  %114 = icmp ult i32 %111, %86
  br i1 %114, label %130, label %115

115:                                              ; preds = %113
  %116 = load i32, i32* %110, align 4
  %117 = icmp ult i32 %88, %116
  br i1 %117, label %140, label %118

118:                                              ; preds = %115
  %119 = icmp ult i32 %116, %88
  br i1 %119, label %130, label %120

120:                                              ; preds = %118
  %121 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 2, i32 0, i32 0
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %95, i64 -1, i32 1, i32 2, i32 0, i32 1
  %123 = load i64, i64* %121, align 8
  %124 = icmp ult i64 %90, %123
  br i1 %124, label %140, label %125

125:                                              ; preds = %120
  %126 = icmp ult i64 %123, %90
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = load i64, i64* %122, align 8
  %129 = icmp ult i64 %92, %128
  br i1 %129, label %140, label %130

130:                                              ; preds = %140, %127, %125, %118, %113, %106, %101, %78
  %131 = phi %"class.viz::SurfaceId"* [ %0, %78 ], [ %95, %127 ], [ %95, %106 ], [ %95, %125 ], [ %95, %118 ], [ %95, %113 ], [ %95, %101 ], [ %0, %140 ]
  %132 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 0, i32 0
  store i32 %82, i32* %132, align 8
  %133 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 0, i32 1
  store i32 %84, i32* %133, align 4
  %134 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 1, i32 0
  store i32 %86, i32* %134, align 8
  %135 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 1, i32 1
  store i32 %88, i32* %135, align 4
  %136 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 1, i32 2, i32 0, i32 0
  store i64 %90, i64* %136, align 8
  %137 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %131, i64 0, i32 1, i32 2, i32 0, i32 1
  store i64 %92, i64* %137, align 8
  %138 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %79, i64 1
  %139 = icmp eq %"class.viz::SurfaceId"* %138, %1
  br i1 %139, label %310, label %78

140:                                              ; preds = %127, %120, %115, %108, %103, %94
  %141 = bitcast %"class.viz::SurfaceId"* %95 to i8*
  %142 = bitcast %"class.viz::SurfaceId"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 32, i1 false) #14
  %143 = icmp eq %"class.viz::SurfaceId"* %96, %0
  br i1 %143, label %130, label %94

144:                                              ; preds = %71
  %145 = lshr i64 %3, 1
  %146 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 %145
  %147 = icmp sgt i64 %3, %5
  br i1 %147, label %308, label %148

148:                                              ; preds = %144
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeE(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %146, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %145, %"class.viz::SurfaceId"* %4)
  %149 = sub nsw i64 %3, %145
  %150 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 %145
  tail call void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeE(%"class.viz::SurfaceId"* %146, %"class.viz::SurfaceId"* %1, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %149, %"class.viz::SurfaceId"* %150)
  %151 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 %3
  br label %178

152:                                              ; preds = %283
  %153 = icmp eq %"class.viz::SurfaceId"* %284, %151
  br i1 %153, label %310, label %154

154:                                              ; preds = %152
  %155 = ptrtoint %"class.viz::SurfaceId"* %284 to i64
  %156 = add i64 %3, -1
  %157 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 %156, i32 0, i32 0
  %158 = ptrtoint i32* %157 to i64
  %159 = sub i64 %158, %155
  %160 = lshr i64 %159, 5
  %161 = add nuw nsw i64 %160, 1
  %162 = and i64 %161, 3
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %154, %164
  %165 = phi %"class.viz::SurfaceId"* [ %170, %164 ], [ %284, %154 ]
  %166 = phi %"class.viz::SurfaceId"* [ %171, %164 ], [ %286, %154 ]
  %167 = phi i64 [ %172, %164 ], [ %162, %154 ]
  %168 = bitcast %"class.viz::SurfaceId"* %166 to i8*
  %169 = bitcast %"class.viz::SurfaceId"* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %168, i8* align 8 %169, i64 32, i1 false) #14
  %170 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %165, i64 1
  %171 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %166, i64 1
  %172 = add i64 %167, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %164, !llvm.loop !100

174:                                              ; preds = %164, %154
  %175 = phi %"class.viz::SurfaceId"* [ %284, %154 ], [ %170, %164 ]
  %176 = phi %"class.viz::SurfaceId"* [ %286, %154 ], [ %171, %164 ]
  %177 = icmp ult i64 %159, 96
  br i1 %177, label %310, label %288

178:                                              ; preds = %148, %283
  %179 = phi %"class.viz::SurfaceId"* [ %285, %283 ], [ %4, %148 ]
  %180 = phi %"class.viz::SurfaceId"* [ %284, %283 ], [ %150, %148 ]
  %181 = phi %"class.viz::SurfaceId"* [ %286, %283 ], [ %0, %148 ]
  %182 = icmp eq %"class.viz::SurfaceId"* %180, %151
  br i1 %182, label %183, label %229

183:                                              ; preds = %178
  %184 = icmp eq %"class.viz::SurfaceId"* %179, %150
  br i1 %184, label %310, label %185

185:                                              ; preds = %183
  %186 = ptrtoint %"class.viz::SurfaceId"* %179 to i64
  %187 = add nsw i64 %145, -1
  %188 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 %187, i32 0, i32 0
  %189 = ptrtoint i32* %188 to i64
  %190 = sub i64 %189, %186
  %191 = lshr i64 %190, 5
  %192 = add nuw nsw i64 %191, 1
  %193 = and i64 %192, 3
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %205, label %195

195:                                              ; preds = %185, %195
  %196 = phi %"class.viz::SurfaceId"* [ %201, %195 ], [ %179, %185 ]
  %197 = phi %"class.viz::SurfaceId"* [ %202, %195 ], [ %181, %185 ]
  %198 = phi i64 [ %203, %195 ], [ %193, %185 ]
  %199 = bitcast %"class.viz::SurfaceId"* %197 to i8*
  %200 = bitcast %"class.viz::SurfaceId"* %196 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %199, i8* align 8 %200, i64 32, i1 false) #14
  %201 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 1
  %202 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %197, i64 1
  %203 = add i64 %198, -1
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %195, !llvm.loop !101

205:                                              ; preds = %195, %185
  %206 = phi %"class.viz::SurfaceId"* [ %179, %185 ], [ %201, %195 ]
  %207 = phi %"class.viz::SurfaceId"* [ %181, %185 ], [ %202, %195 ]
  %208 = icmp ult i64 %190, 96
  br i1 %208, label %310, label %209

209:                                              ; preds = %205, %209
  %210 = phi %"class.viz::SurfaceId"* [ %226, %209 ], [ %206, %205 ]
  %211 = phi %"class.viz::SurfaceId"* [ %227, %209 ], [ %207, %205 ]
  %212 = bitcast %"class.viz::SurfaceId"* %211 to i8*
  %213 = bitcast %"class.viz::SurfaceId"* %210 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %212, i8* align 8 %213, i64 32, i1 false) #14
  %214 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %210, i64 1
  %215 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %211, i64 1
  %216 = bitcast %"class.viz::SurfaceId"* %215 to i8*
  %217 = bitcast %"class.viz::SurfaceId"* %214 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 32, i1 false) #14
  %218 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %210, i64 2
  %219 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %211, i64 2
  %220 = bitcast %"class.viz::SurfaceId"* %219 to i8*
  %221 = bitcast %"class.viz::SurfaceId"* %218 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 32, i1 false) #14
  %222 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %210, i64 3
  %223 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %211, i64 3
  %224 = bitcast %"class.viz::SurfaceId"* %223 to i8*
  %225 = bitcast %"class.viz::SurfaceId"* %222 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %225, i64 32, i1 false) #14
  %226 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %210, i64 4
  %227 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %211, i64 4
  %228 = icmp eq %"class.viz::SurfaceId"* %226, %150
  br i1 %228, label %310, label %209

229:                                              ; preds = %178
  %230 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 0, i32 0
  %231 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 0, i32 1
  %232 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 0, i32 0
  %233 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 0, i32 1
  %234 = load i32, i32* %230, align 4
  %235 = load i32, i32* %232, align 4
  %236 = icmp ult i32 %234, %235
  br i1 %236, label %275, label %237

237:                                              ; preds = %229
  %238 = icmp ult i32 %235, %234
  br i1 %238, label %279, label %239

239:                                              ; preds = %237
  %240 = load i32, i32* %231, align 4
  %241 = load i32, i32* %233, align 4
  %242 = icmp ult i32 %240, %241
  br i1 %242, label %275, label %243

243:                                              ; preds = %239
  %244 = icmp ult i32 %241, %240
  br i1 %244, label %279, label %245

245:                                              ; preds = %243
  %246 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 1, i32 0
  %247 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 1, i32 1
  %248 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 1, i32 0
  %249 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 1, i32 1
  %250 = load i32, i32* %246, align 4
  %251 = load i32, i32* %248, align 4
  %252 = icmp ult i32 %250, %251
  br i1 %252, label %275, label %253

253:                                              ; preds = %245
  %254 = icmp ult i32 %251, %250
  br i1 %254, label %279, label %255

255:                                              ; preds = %253
  %256 = load i32, i32* %247, align 4
  %257 = load i32, i32* %249, align 4
  %258 = icmp ult i32 %256, %257
  br i1 %258, label %275, label %259

259:                                              ; preds = %255
  %260 = icmp ult i32 %257, %256
  br i1 %260, label %279, label %261

261:                                              ; preds = %259
  %262 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 1, i32 2, i32 0, i32 0
  %263 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 0, i32 1, i32 2, i32 0, i32 1
  %264 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 1, i32 2, i32 0, i32 0
  %265 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 0, i32 1, i32 2, i32 0, i32 1
  %266 = load i64, i64* %262, align 8
  %267 = load i64, i64* %264, align 8
  %268 = icmp ult i64 %266, %267
  br i1 %268, label %275, label %269

269:                                              ; preds = %261
  %270 = icmp ult i64 %267, %266
  br i1 %270, label %279, label %271

271:                                              ; preds = %269
  %272 = load i64, i64* %263, align 8
  %273 = load i64, i64* %265, align 8
  %274 = icmp ult i64 %272, %273
  br i1 %274, label %275, label %279

275:                                              ; preds = %271, %261, %255, %245, %239, %229
  %276 = bitcast %"class.viz::SurfaceId"* %181 to i8*
  %277 = bitcast %"class.viz::SurfaceId"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %276, i8* align 8 %277, i64 32, i1 false) #14
  %278 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %180, i64 1
  br label %283

279:                                              ; preds = %271, %269, %259, %253, %243, %237
  %280 = bitcast %"class.viz::SurfaceId"* %181 to i8*
  %281 = bitcast %"class.viz::SurfaceId"* %179 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %280, i8* align 8 %281, i64 32, i1 false) #14
  %282 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %179, i64 1
  br label %283

283:                                              ; preds = %279, %275
  %284 = phi %"class.viz::SurfaceId"* [ %278, %275 ], [ %180, %279 ]
  %285 = phi %"class.viz::SurfaceId"* [ %179, %275 ], [ %282, %279 ]
  %286 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %181, i64 1
  %287 = icmp eq %"class.viz::SurfaceId"* %285, %150
  br i1 %287, label %152, label %178

288:                                              ; preds = %174, %288
  %289 = phi %"class.viz::SurfaceId"* [ %305, %288 ], [ %175, %174 ]
  %290 = phi %"class.viz::SurfaceId"* [ %306, %288 ], [ %176, %174 ]
  %291 = bitcast %"class.viz::SurfaceId"* %290 to i8*
  %292 = bitcast %"class.viz::SurfaceId"* %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %291, i8* align 8 %292, i64 32, i1 false) #14
  %293 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %289, i64 1
  %294 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %290, i64 1
  %295 = bitcast %"class.viz::SurfaceId"* %294 to i8*
  %296 = bitcast %"class.viz::SurfaceId"* %293 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %295, i8* align 8 %296, i64 32, i1 false) #14
  %297 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %289, i64 2
  %298 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %290, i64 2
  %299 = bitcast %"class.viz::SurfaceId"* %298 to i8*
  %300 = bitcast %"class.viz::SurfaceId"* %297 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %299, i8* align 8 %300, i64 32, i1 false) #14
  %301 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %289, i64 3
  %302 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %290, i64 3
  %303 = bitcast %"class.viz::SurfaceId"* %302 to i8*
  %304 = bitcast %"class.viz::SurfaceId"* %301 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %303, i8* align 8 %304, i64 32, i1 false) #14
  %305 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %289, i64 4
  %306 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %290, i64 4
  %307 = icmp eq %"class.viz::SurfaceId"* %305, %151
  br i1 %307, label %310, label %288

308:                                              ; preds = %144
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %146, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %145, %"class.viz::SurfaceId"* %4, i64 %5)
  %309 = sub nsw i64 %3, %145
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %146, %"class.viz::SurfaceId"* %1, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %309, %"class.viz::SurfaceId"* %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeEl(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %146, %"class.viz::SurfaceId"* %1, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %145, i64 %309, %"class.viz::SurfaceId"* %4, i64 %5)
  ret void

310:                                              ; preds = %174, %288, %205, %209, %130, %18, %34, %40, %50, %24, %183, %152, %75, %73, %52, %56, %6, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeE(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1), i64, %"class.viz::SurfaceId"*) local_unnamed_addr #0 comdat {
  switch i64 %3, label %125 [
    i64 0, label %133
    i64 1, label %6
    i64 2, label %23
  ]

6:                                                ; preds = %5
  %7 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %7, align 4
  %10 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 1
  %17 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 2
  %20 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2
  %21 = bitcast %"class.base::UnguessableToken"* %19 to i8*
  %22 = bitcast %"class.base::UnguessableToken"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #14
  br label %133

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 0
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 1
  %26 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %24, align 4
  %29 = load i32, i32* %26, align 4
  %30 = icmp ult i32 %28, %29
  br i1 %30, label %69, label %31

31:                                               ; preds = %23
  %32 = icmp ult i32 %29, %28
  br i1 %32, label %97, label %33

33:                                               ; preds = %31
  %34 = load i32, i32* %25, align 4
  %35 = load i32, i32* %27, align 4
  %36 = icmp ult i32 %34, %35
  br i1 %36, label %69, label %37

37:                                               ; preds = %33
  %38 = icmp ult i32 %35, %34
  br i1 %38, label %97, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 0
  %41 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 1
  %42 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %44 = load i32, i32* %40, align 4
  %45 = load i32, i32* %42, align 4
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %69, label %47

47:                                               ; preds = %39
  %48 = icmp ult i32 %45, %44
  br i1 %48, label %97, label %49

49:                                               ; preds = %47
  %50 = load i32, i32* %41, align 4
  %51 = load i32, i32* %43, align 4
  %52 = icmp ult i32 %50, %51
  br i1 %52, label %69, label %53

53:                                               ; preds = %49
  %54 = icmp ult i32 %51, %50
  br i1 %54, label %97, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2, i32 0, i32 0
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2, i32 0, i32 1
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %59 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 1
  %60 = load i64, i64* %56, align 8
  %61 = load i64, i64* %58, align 8
  %62 = icmp ult i64 %60, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %55
  %64 = icmp ult i64 %61, %60
  br i1 %64, label %97, label %65

65:                                               ; preds = %63
  %66 = load i64, i64* %57, align 8
  %67 = load i64, i64* %59, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %97

69:                                               ; preds = %23, %39, %49, %55, %33, %65
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 0
  store i32 %28, i32* %70, align 4
  %71 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 1
  %72 = load i32, i32* %25, align 4
  store i32 %72, i32* %71, align 4
  %73 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 0
  %74 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 0
  %75 = load i32, i32* %74, align 8
  store i32 %75, i32* %73, align 8
  %76 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 1
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 1
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %76, align 4
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 2
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2
  %81 = bitcast %"class.base::UnguessableToken"* %79 to i8*
  %82 = bitcast %"class.base::UnguessableToken"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 16, i1 false) #14
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 0, i32 0
  %84 = load i32, i32* %26, align 4
  store i32 %84, i32* %83, align 4
  %85 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 0, i32 1
  %86 = load i32, i32* %27, align 4
  store i32 %86, i32* %85, align 4
  %87 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 0
  %88 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %89 = load i32, i32* %88, align 8
  store i32 %89, i32* %87, align 8
  %90 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 1
  %91 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %92 = load i32, i32* %91, align 4
  store i32 %92, i32* %90, align 4
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 2
  %94 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2
  %95 = bitcast %"class.base::UnguessableToken"* %93 to i8*
  %96 = bitcast %"class.base::UnguessableToken"* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #14
  br label %133

97:                                               ; preds = %31, %47, %53, %63, %37, %65
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 0
  store i32 %29, i32* %98, align 4
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 0, i32 1
  %100 = load i32, i32* %27, align 4
  store i32 %100, i32* %99, align 4
  %101 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 0
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 8
  store i32 %103, i32* %101, align 8
  %104 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 1
  %105 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 0, i32 1, i32 2
  %108 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2
  %109 = bitcast %"class.base::UnguessableToken"* %107 to i8*
  %110 = bitcast %"class.base::UnguessableToken"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #14
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 0, i32 0
  %112 = load i32, i32* %24, align 4
  store i32 %112, i32* %111, align 4
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 0, i32 1
  %114 = load i32, i32* %25, align 4
  store i32 %114, i32* %113, align 4
  %115 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 0
  %116 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 0
  %117 = load i32, i32* %116, align 8
  store i32 %117, i32* %115, align 8
  %118 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 1
  %119 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  store i32 %120, i32* %118, align 4
  %121 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 1, i32 1, i32 2
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 1, i32 2
  %123 = bitcast %"class.base::UnguessableToken"* %121 to i8*
  %124 = bitcast %"class.base::UnguessableToken"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false) #14
  br label %133

125:                                              ; preds = %5
  %126 = icmp slt i64 %3, 9
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  tail call void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_PNS_15iterator_traitsISJ_E10value_typeET_(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* %4, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2)
  br label %133

128:                                              ; preds = %125
  %129 = lshr i64 %3, 1
  %130 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 %129
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %130, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %129, %"class.viz::SurfaceId"* %4, i64 %129)
  %131 = sub nsw i64 %3, %129
  %132 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %4, i64 %129
  tail call void @_ZNSt3__113__stable_sortIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_T_NS_15iterator_traitsISJ_E15difference_typeEPNSM_10value_typeEl(%"class.viz::SurfaceId"* %130, %"class.viz::SurfaceId"* %1, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2, i64 %131, %"class.viz::SurfaceId"* %132, i64 %131)
  tail call void @_ZNSt3__122__merge_move_constructIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EESI_EEvT0_SJ_T1_SK_PNS_15iterator_traitsISJ_E10value_typeET_(%"class.viz::SurfaceId"* %0, %"class.viz::SurfaceId"* %130, %"class.viz::SurfaceId"* %130, %"class.viz::SurfaceId"* %1, %"class.viz::SurfaceId"* %4, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %2)
  br label %133

133:                                              ; preds = %69, %97, %5, %128, %127, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeEl(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1), i64, i64, %"class.viz::SurfaceId"*, i64) local_unnamed_addr #0 comdat {
  %9 = icmp eq i64 %5, 0
  br i1 %9, label %319, label %10

10:                                               ; preds = %8
  %11 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  %12 = ptrtoint %"class.viz::SurfaceId"* %0 to i64
  br label %13

13:                                               ; preds = %10, %312
  %14 = phi %"class.viz::SurfaceId"* [ %317, %312 ], [ %2, %10 ]
  %15 = phi i64 [ %316, %312 ], [ %4, %10 ]
  %16 = phi i64 [ %315, %312 ], [ %5, %10 ]
  %17 = phi i64 [ %314, %312 ], [ %11, %10 ]
  %18 = phi i64 [ %313, %312 ], [ %12, %10 ]
  %19 = icmp sgt i64 %15, %7
  %20 = icmp sgt i64 %16, %7
  %21 = and i1 %20, %19
  br i1 %21, label %22, label %33

22:                                               ; preds = %13
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %319, label %24

24:                                               ; preds = %22
  %25 = inttoptr i64 %17 to %"class.viz::SurfaceId"*
  %26 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 0, i32 1
  %28 = load i32, i32* %26, align 4
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 1, i32 0
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 1, i32 1
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 1, i32 2, i32 0, i32 0
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 0, i32 1, i32 2, i32 0, i32 1
  br label %36

33:                                               ; preds = %13
  %34 = inttoptr i64 %18 to %"class.viz::SurfaceId"*
  %35 = inttoptr i64 %17 to %"class.viz::SurfaceId"*
  tail call void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeE(%"class.viz::SurfaceId"* %34, %"class.viz::SurfaceId"* %35, %"class.viz::SurfaceId"* %14, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %3, i64 %15, i64 %16, %"class.viz::SurfaceId"* %6)
  br label %319

36:                                               ; preds = %24, %78
  %37 = phi i64 [ %15, %24 ], [ %81, %78 ]
  %38 = phi i64 [ %18, %24 ], [ %80, %78 ]
  %39 = inttoptr i64 %38 to %"class.viz::SurfaceId"*
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 0, i32 0
  %41 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 0, i32 1
  %42 = load i32, i32* %40, align 4
  %43 = icmp ult i32 %28, %42
  br i1 %43, label %83, label %44

44:                                               ; preds = %36
  %45 = icmp ult i32 %42, %28
  br i1 %45, label %78, label %46

46:                                               ; preds = %44
  %47 = load i32, i32* %27, align 4
  %48 = load i32, i32* %41, align 4
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %83, label %50

50:                                               ; preds = %46
  %51 = icmp ult i32 %48, %47
  br i1 %51, label %78, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 1, i32 0
  %54 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 1, i32 1
  %55 = load i32, i32* %29, align 4
  %56 = load i32, i32* %53, align 4
  %57 = icmp ult i32 %55, %56
  br i1 %57, label %83, label %58

58:                                               ; preds = %52
  %59 = icmp ult i32 %56, %55
  br i1 %59, label %78, label %60

60:                                               ; preds = %58
  %61 = load i32, i32* %30, align 4
  %62 = load i32, i32* %54, align 4
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %83, label %64

64:                                               ; preds = %60
  %65 = icmp ult i32 %62, %61
  br i1 %65, label %78, label %66

66:                                               ; preds = %64
  %67 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 1, i32 2, i32 0, i32 0
  %68 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 1, i32 2, i32 0, i32 1
  %69 = load i64, i64* %31, align 8
  %70 = load i64, i64* %67, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %83, label %72

72:                                               ; preds = %66
  %73 = icmp ult i64 %70, %69
  br i1 %73, label %78, label %74

74:                                               ; preds = %72
  %75 = load i64, i64* %32, align 8
  %76 = load i64, i64* %68, align 8
  %77 = icmp ult i64 %75, %76
  br i1 %77, label %83, label %78

78:                                               ; preds = %44, %58, %64, %72, %50, %74
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 1
  %80 = ptrtoint %"class.viz::SurfaceId"* %79 to i64
  %81 = add nsw i64 %37, -1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %319, label %36

83:                                               ; preds = %36, %52, %60, %66, %46, %74
  %84 = inttoptr i64 %38 to %"class.viz::SurfaceId"*
  %85 = icmp slt i64 %37, %16
  br i1 %85, label %86, label %155

86:                                               ; preds = %83
  %87 = sdiv i64 %16, 2
  %88 = sub i64 %17, %38
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %150, label %90

90:                                               ; preds = %86
  %91 = ashr exact i64 %88, 5
  %92 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 0, i32 0
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 0, i32 1
  %94 = load i32, i32* %92, align 4
  %95 = load i32, i32* %93, align 4
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 1, i32 0
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 1, i32 1
  %98 = load i32, i32* %96, align 4
  %99 = load i32, i32* %97, align 4
  %100 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 1, i32 2, i32 0, i32 0
  %101 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %87, i32 1, i32 2, i32 0, i32 1
  %102 = load i64, i64* %100, align 8
  %103 = load i64, i64* %101, align 8
  br label %104

104:                                              ; preds = %146, %90
  %105 = phi %"class.viz::SurfaceId"* [ %84, %90 ], [ %148, %146 ]
  %106 = phi i64 [ %91, %90 ], [ %147, %146 ]
  %107 = lshr i64 %106, 1
  %108 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %108, i64 0, i32 0, i32 0
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107, i32 0, i32 1
  %111 = load i32, i32* %109, align 4
  %112 = icmp ult i32 %94, %111
  br i1 %112, label %146, label %113

113:                                              ; preds = %104
  %114 = icmp ult i32 %111, %94
  br i1 %114, label %142, label %115

115:                                              ; preds = %113
  %116 = load i32, i32* %110, align 4
  %117 = icmp ult i32 %95, %116
  br i1 %117, label %146, label %118

118:                                              ; preds = %115
  %119 = icmp ult i32 %116, %95
  br i1 %119, label %142, label %120

120:                                              ; preds = %118
  %121 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107, i32 1, i32 0
  %122 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107, i32 1, i32 1
  %123 = load i32, i32* %121, align 4
  %124 = icmp ult i32 %98, %123
  br i1 %124, label %146, label %125

125:                                              ; preds = %120
  %126 = icmp ult i32 %123, %98
  br i1 %126, label %142, label %127

127:                                              ; preds = %125
  %128 = load i32, i32* %122, align 4
  %129 = icmp ult i32 %99, %128
  br i1 %129, label %146, label %130

130:                                              ; preds = %127
  %131 = icmp ult i32 %128, %99
  br i1 %131, label %142, label %132

132:                                              ; preds = %130
  %133 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107, i32 1, i32 2, i32 0, i32 0
  %134 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %105, i64 %107, i32 1, i32 2, i32 0, i32 1
  %135 = load i64, i64* %133, align 8
  %136 = icmp ult i64 %102, %135
  br i1 %136, label %146, label %137

137:                                              ; preds = %132
  %138 = icmp ult i64 %135, %102
  br i1 %138, label %142, label %139

139:                                              ; preds = %137
  %140 = load i64, i64* %134, align 8
  %141 = icmp ult i64 %103, %140
  br i1 %141, label %146, label %142

142:                                              ; preds = %139, %137, %130, %125, %118, %113
  %143 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %108, i64 1
  %144 = xor i64 %107, -1
  %145 = add i64 %106, %144
  br label %146

146:                                              ; preds = %142, %139, %132, %127, %120, %115, %104
  %147 = phi i64 [ %145, %142 ], [ %107, %139 ], [ %107, %115 ], [ %107, %132 ], [ %107, %127 ], [ %107, %120 ], [ %107, %104 ]
  %148 = phi %"class.viz::SurfaceId"* [ %143, %142 ], [ %105, %139 ], [ %105, %115 ], [ %105, %132 ], [ %105, %127 ], [ %105, %120 ], [ %105, %104 ]
  %149 = icmp eq i64 %147, 0
  br i1 %149, label %150, label %104

150:                                              ; preds = %146, %86
  %151 = phi %"class.viz::SurfaceId"* [ %84, %86 ], [ %148, %146 ]
  %152 = ptrtoint %"class.viz::SurfaceId"* %151 to i64
  %153 = sub i64 %152, %38
  %154 = ashr exact i64 %153, 5
  br label %246

155:                                              ; preds = %83
  %156 = icmp eq i64 %37, 1
  br i1 %156, label %157, label %172

157:                                              ; preds = %155
  %158 = inttoptr i64 %17 to %"class.viz::SurfaceId"*
  %159 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %158, i64 0, i32 0, i32 0
  %160 = inttoptr i64 %38 to %"class.viz::SurfaceId"*
  %161 = load i32, i32* %41, align 4
  %162 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %160, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 8
  %164 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %160, i64 0, i32 1, i32 1
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %160, i64 0, i32 1, i32 2, i32 0, i32 0
  %167 = bitcast i64* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 8
  %169 = inttoptr i64 %38 to i8*
  %170 = inttoptr i64 %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %169, i8* align 8 %170, i64 32, i1 false) #14
  store i32 %42, i32* %159, align 8
  store i32 %161, i32* %27, align 4
  store i32 %163, i32* %29, align 8
  store i32 %165, i32* %30, align 4
  %171 = bitcast i64* %31 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %171, align 8
  br label %319

172:                                              ; preds = %155
  %173 = sdiv i64 %37, 2
  %174 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173
  %175 = ptrtoint %"class.viz::SurfaceId"* %174 to i64
  %176 = ptrtoint %"class.viz::SurfaceId"* %14 to i64
  %177 = sub i64 %176, %17
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %240, label %179

179:                                              ; preds = %172
  %180 = ashr exact i64 %177, 5
  %181 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %174, i64 0, i32 0, i32 0
  %182 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173, i32 0, i32 1
  %183 = load i32, i32* %181, align 4
  %184 = load i32, i32* %182, align 4
  %185 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173, i32 1, i32 0
  %186 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173, i32 1, i32 1
  %187 = load i32, i32* %185, align 4
  %188 = load i32, i32* %186, align 4
  %189 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173, i32 1, i32 2, i32 0, i32 0
  %190 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %84, i64 %173, i32 1, i32 2, i32 0, i32 1
  %191 = load i64, i64* %189, align 8
  %192 = load i64, i64* %190, align 8
  br label %193

193:                                              ; preds = %236, %179
  %194 = phi i64 [ 0, %179 ], [ %238, %236 ]
  %195 = phi i64 [ %180, %179 ], [ %237, %236 ]
  %196 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %194
  %197 = lshr i64 %195, 1
  %198 = add nsw i64 %197, %194
  %199 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %198, i32 0, i32 0
  %200 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 %197, i32 0, i32 1
  %201 = load i32, i32* %199, align 4
  %202 = icmp ult i32 %201, %183
  br i1 %202, label %232, label %203

203:                                              ; preds = %193
  %204 = icmp ult i32 %183, %201
  br i1 %204, label %236, label %205

205:                                              ; preds = %203
  %206 = load i32, i32* %200, align 4
  %207 = icmp ult i32 %206, %184
  br i1 %207, label %232, label %208

208:                                              ; preds = %205
  %209 = icmp ult i32 %184, %206
  br i1 %209, label %236, label %210

210:                                              ; preds = %208
  %211 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 %197, i32 1, i32 0
  %212 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 %197, i32 1, i32 1
  %213 = load i32, i32* %211, align 4
  %214 = icmp ult i32 %213, %187
  br i1 %214, label %232, label %215

215:                                              ; preds = %210
  %216 = icmp ult i32 %187, %213
  br i1 %216, label %236, label %217

217:                                              ; preds = %215
  %218 = load i32, i32* %212, align 4
  %219 = icmp ult i32 %218, %188
  br i1 %219, label %232, label %220

220:                                              ; preds = %217
  %221 = icmp ult i32 %188, %218
  br i1 %221, label %236, label %222

222:                                              ; preds = %220
  %223 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 %197, i32 1, i32 2, i32 0, i32 0
  %224 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %196, i64 %197, i32 1, i32 2, i32 0, i32 1
  %225 = load i64, i64* %223, align 8
  %226 = icmp ult i64 %225, %191
  br i1 %226, label %232, label %227

227:                                              ; preds = %222
  %228 = icmp ult i64 %191, %225
  br i1 %228, label %236, label %229

229:                                              ; preds = %227
  %230 = load i64, i64* %224, align 8
  %231 = icmp ult i64 %230, %192
  br i1 %231, label %232, label %236

232:                                              ; preds = %229, %222, %217, %210, %205, %193
  %233 = add nsw i64 %198, 1
  %234 = xor i64 %197, -1
  %235 = add i64 %195, %234
  br label %236

236:                                              ; preds = %232, %229, %227, %220, %215, %208, %203
  %237 = phi i64 [ %235, %232 ], [ %197, %229 ], [ %197, %208 ], [ %197, %227 ], [ %197, %220 ], [ %197, %215 ], [ %197, %203 ]
  %238 = phi i64 [ %233, %232 ], [ %194, %229 ], [ %194, %208 ], [ %194, %227 ], [ %194, %220 ], [ %194, %215 ], [ %194, %203 ]
  %239 = icmp eq i64 %237, 0
  br i1 %239, label %240, label %193

240:                                              ; preds = %236, %172
  %241 = phi i64 [ 0, %172 ], [ %238, %236 ]
  %242 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %241
  %243 = ptrtoint %"class.viz::SurfaceId"* %242 to i64
  %244 = sub i64 %243, %17
  %245 = ashr exact i64 %244, 5
  br label %246

246:                                              ; preds = %240, %150
  %247 = phi i64 [ %152, %150 ], [ %175, %240 ]
  %248 = phi i64 [ %87, %150 ], [ %241, %240 ]
  %249 = phi i64 [ %87, %150 ], [ %245, %240 ]
  %250 = phi i64 [ %154, %150 ], [ %173, %240 ]
  %251 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %25, i64 %248
  %252 = ptrtoint %"class.viz::SurfaceId"* %251 to i64
  %253 = sub nsw i64 %37, %250
  %254 = sub nsw i64 %16, %249
  %255 = inttoptr i64 %247 to %"class.viz::SurfaceId"*
  %256 = icmp eq %"class.viz::SurfaceId"* %255, %25
  br i1 %256, label %304, label %257

257:                                              ; preds = %246
  %258 = icmp eq i64 %248, 0
  br i1 %258, label %304, label %259

259:                                              ; preds = %257
  %260 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %255, i64 1
  %261 = icmp eq %"class.viz::SurfaceId"* %260, %25
  br i1 %261, label %262, label %279

262:                                              ; preds = %259
  %263 = inttoptr i64 %247 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %255, i64 0, i32 1, i32 2, i32 0, i32 0
  %266 = bitcast i64* %265 to <2 x i64>*
  %267 = load <2 x i64>, <2 x i64>* %266, align 8
  %268 = sub i64 %252, %17
  %269 = ashr exact i64 %268, 5
  %270 = icmp eq i64 %268, 0
  br i1 %270, label %274, label %271

271:                                              ; preds = %262
  %272 = inttoptr i64 %247 to i8*
  %273 = inttoptr i64 %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 %268, i1 false) #14
  br label %274

274:                                              ; preds = %271, %262
  %275 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %255, i64 %269
  %276 = bitcast %"class.viz::SurfaceId"* %275 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %276, align 8
  %277 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %255, i64 %269, i32 1, i32 2, i32 0, i32 0
  %278 = bitcast i64* %277 to <2 x i64>*
  store <2 x i64> %267, <2 x i64>* %278, align 8
  br label %304

279:                                              ; preds = %259
  %280 = icmp eq i64 %248, 1
  br i1 %280, label %281, label %302

281:                                              ; preds = %279
  %282 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %251, i64 -1
  %283 = bitcast %"class.viz::SurfaceId"* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4
  %285 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %251, i64 -1, i32 1, i32 2, i32 0, i32 0
  %286 = bitcast i64* %285 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 8
  %288 = ptrtoint %"class.viz::SurfaceId"* %282 to i64
  %289 = sub i64 %288, %247
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %297, label %291

291:                                              ; preds = %281
  %292 = ashr exact i64 %289, 5
  %293 = sub nsw i64 0, %292
  %294 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %251, i64 %293
  %295 = bitcast %"class.viz::SurfaceId"* %294 to i8*
  %296 = inttoptr i64 %247 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %295, i8* align 8 %296, i64 %289, i1 false) #14
  br label %297

297:                                              ; preds = %291, %281
  %298 = phi %"class.viz::SurfaceId"* [ %294, %291 ], [ %251, %281 ]
  %299 = inttoptr i64 %247 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %299, align 8
  %300 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %255, i64 0, i32 1, i32 2, i32 0, i32 0
  %301 = bitcast i64* %300 to <2 x i64>*
  store <2 x i64> %287, <2 x i64>* %301, align 8
  br label %304

302:                                              ; preds = %279
  %303 = tail call %"class.viz::SurfaceId"* @_ZNSt3__112__rotate_gcdINS_11__wrap_iterIPN3viz9SurfaceIdEEEEET_S6_S6_S6_(%"class.viz::SurfaceId"* %255, %"class.viz::SurfaceId"* %25, %"class.viz::SurfaceId"* %251) #14
  br label %304

304:                                              ; preds = %246, %257, %274, %297, %302
  %305 = phi %"class.viz::SurfaceId"* [ %255, %257 ], [ %251, %246 ], [ %275, %274 ], [ %298, %297 ], [ %303, %302 ]
  %306 = add nsw i64 %250, %249
  %307 = add nsw i64 %253, %254
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %309, label %311

309:                                              ; preds = %304
  %310 = ptrtoint %"class.viz::SurfaceId"* %305 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeEl(%"class.viz::SurfaceId"* %84, %"class.viz::SurfaceId"* %255, %"class.viz::SurfaceId"* %305, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %3, i64 %250, i64 %249, %"class.viz::SurfaceId"* %6, i64 %7)
  br label %312

311:                                              ; preds = %304
  tail call void @_ZNSt3__115__inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeEl(%"class.viz::SurfaceId"* %305, %"class.viz::SurfaceId"* %251, %"class.viz::SurfaceId"* %14, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1) %3, i64 %253, i64 %254, %"class.viz::SurfaceId"* %6, i64 %7)
  br label %312

312:                                              ; preds = %309, %311
  %313 = phi i64 [ %310, %309 ], [ %38, %311 ]
  %314 = phi i64 [ %252, %309 ], [ %247, %311 ]
  %315 = phi i64 [ %254, %309 ], [ %249, %311 ]
  %316 = phi i64 [ %253, %309 ], [ %250, %311 ]
  %317 = phi %"class.viz::SurfaceId"* [ %14, %309 ], [ %305, %311 ]
  %318 = icmp eq i64 %315, 0
  br i1 %318, label %319, label %13

319:                                              ; preds = %312, %22, %78, %8, %157, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__121__insertion_sort_moveIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_PNS_15iterator_traitsISJ_E10value_typeET_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %5, label %166, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %7, align 4
  %10 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %10, align 4
  %13 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 1
  %17 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 0, i32 1, i32 2
  %20 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2
  %21 = bitcast %"class.base::UnguessableToken"* %19 to i8*
  %22 = bitcast %"class.base::UnguessableToken"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #14
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 1
  %24 = icmp eq %"class.viz::SurfaceId"* %23, %1
  br i1 %24, label %166, label %25

25:                                               ; preds = %6, %163
  %26 = phi i32 [ %165, %163 ], [ %9, %6 ]
  %27 = phi %"class.viz::SurfaceId"* [ %161, %163 ], [ %23, %6 ]
  %28 = phi %"class.viz::SurfaceId"* [ %30, %163 ], [ %2, %6 ]
  %29 = phi %"class.viz::SurfaceId"* [ %27, %163 ], [ %0, %6 ]
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 0, i32 1
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 0, i32 1
  %34 = load i32, i32* %31, align 4
  %35 = icmp ult i32 %34, %26
  br i1 %35, label %36, label %38

36:                                               ; preds = %25
  %37 = load i32, i32* %33, align 4
  br label %76

38:                                               ; preds = %25
  %39 = icmp ult i32 %26, %34
  br i1 %39, label %146, label %40

40:                                               ; preds = %38
  %41 = load i32, i32* %32, align 4
  %42 = load i32, i32* %33, align 4
  %43 = icmp ult i32 %41, %42
  br i1 %43, label %76, label %44

44:                                               ; preds = %40
  %45 = icmp ult i32 %42, %41
  br i1 %45, label %146, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 0
  %48 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 1
  %49 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 0
  %50 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 1
  %51 = load i32, i32* %47, align 4
  %52 = load i32, i32* %49, align 4
  %53 = icmp ult i32 %51, %52
  br i1 %53, label %76, label %54

54:                                               ; preds = %46
  %55 = icmp ult i32 %52, %51
  br i1 %55, label %146, label %56

56:                                               ; preds = %54
  %57 = load i32, i32* %48, align 4
  %58 = load i32, i32* %50, align 4
  %59 = icmp ult i32 %57, %58
  br i1 %59, label %76, label %60

60:                                               ; preds = %56
  %61 = icmp ult i32 %58, %57
  br i1 %61, label %146, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 2, i32 0, i32 0
  %64 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 2, i32 0, i32 1
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 2, i32 0, i32 0
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 2, i32 0, i32 1
  %67 = load i64, i64* %63, align 8
  %68 = load i64, i64* %65, align 8
  %69 = icmp ult i64 %67, %68
  br i1 %69, label %76, label %70

70:                                               ; preds = %62
  %71 = icmp ult i64 %68, %67
  br i1 %71, label %146, label %72

72:                                               ; preds = %70
  %73 = load i64, i64* %64, align 8
  %74 = load i64, i64* %66, align 8
  %75 = icmp ult i64 %73, %74
  br i1 %75, label %76, label %146

76:                                               ; preds = %36, %46, %56, %62, %40, %72
  %77 = phi i32 [ %37, %36 ], [ %42, %46 ], [ %42, %56 ], [ %42, %62 ], [ %42, %40 ], [ %42, %72 ]
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 0, i32 0, i32 0
  store i32 %26, i32* %78, align 4
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 0, i32 1
  store i32 %77, i32* %79, align 4
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 0
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 0
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %80, align 8
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 1
  %84 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 1
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %83, align 4
  %86 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 2
  %87 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 0, i32 1, i32 2
  %88 = bitcast %"class.base::UnguessableToken"* %86 to i8*
  %89 = bitcast %"class.base::UnguessableToken"* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false) #14
  %90 = icmp eq %"class.viz::SurfaceId"* %28, %2
  br i1 %90, label %142, label %91

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 0
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 1
  %94 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 2, i32 0, i32 0
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 2, i32 0, i32 1
  br label %96

96:                                               ; preds = %91, %138
  %97 = phi %"class.viz::SurfaceId"* [ %28, %91 ], [ %98, %138 ]
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %98, i64 0, i32 0, i32 0
  %100 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1, i32 0, i32 1
  %101 = load i32, i32* %31, align 4
  %102 = load i32, i32* %99, align 4
  %103 = icmp ult i32 %101, %102
  br i1 %103, label %138, label %104

104:                                              ; preds = %96
  %105 = icmp ult i32 %102, %101
  br i1 %105, label %142, label %106

106:                                              ; preds = %104
  %107 = load i32, i32* %32, align 4
  %108 = load i32, i32* %100, align 4
  %109 = icmp ult i32 %107, %108
  br i1 %109, label %138, label %110

110:                                              ; preds = %106
  %111 = icmp ult i32 %108, %107
  br i1 %111, label %142, label %112

112:                                              ; preds = %110
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1, i32 1, i32 0
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1, i32 1, i32 1
  %115 = load i32, i32* %92, align 4
  %116 = load i32, i32* %113, align 4
  %117 = icmp ult i32 %115, %116
  br i1 %117, label %138, label %118

118:                                              ; preds = %112
  %119 = icmp ult i32 %116, %115
  br i1 %119, label %142, label %120

120:                                              ; preds = %118
  %121 = load i32, i32* %93, align 4
  %122 = load i32, i32* %114, align 4
  %123 = icmp ult i32 %121, %122
  br i1 %123, label %138, label %124

124:                                              ; preds = %120
  %125 = icmp ult i32 %122, %121
  br i1 %125, label %142, label %126

126:                                              ; preds = %124
  %127 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1, i32 1, i32 2, i32 0, i32 0
  %128 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %97, i64 -1, i32 1, i32 2, i32 0, i32 1
  %129 = load i64, i64* %94, align 8
  %130 = load i64, i64* %127, align 8
  %131 = icmp ult i64 %129, %130
  br i1 %131, label %138, label %132

132:                                              ; preds = %126
  %133 = icmp ult i64 %130, %129
  br i1 %133, label %142, label %134

134:                                              ; preds = %132
  %135 = load i64, i64* %95, align 8
  %136 = load i64, i64* %128, align 8
  %137 = icmp ult i64 %135, %136
  br i1 %137, label %138, label %142

138:                                              ; preds = %96, %112, %120, %126, %106, %134
  %139 = bitcast %"class.viz::SurfaceId"* %97 to i8*
  %140 = bitcast %"class.viz::SurfaceId"* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 32, i1 false)
  %141 = icmp eq %"class.viz::SurfaceId"* %98, %2
  br i1 %141, label %142, label %96

142:                                              ; preds = %134, %138, %110, %132, %124, %118, %104, %76
  %143 = phi %"class.viz::SurfaceId"* [ %2, %76 ], [ %97, %104 ], [ %97, %118 ], [ %97, %124 ], [ %97, %132 ], [ %97, %110 ], [ %2, %138 ], [ %97, %134 ]
  %144 = bitcast %"class.viz::SurfaceId"* %143 to i8*
  %145 = bitcast %"class.viz::SurfaceId"* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 32, i1 false)
  br label %160

146:                                              ; preds = %38, %54, %60, %70, %44, %72
  %147 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 0, i32 0, i32 0
  store i32 %34, i32* %147, align 4
  %148 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 0, i32 1
  %149 = load i32, i32* %32, align 4
  store i32 %149, i32* %148, align 4
  %150 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 0
  %151 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 0
  %152 = load i32, i32* %151, align 8
  store i32 %152, i32* %150, align 8
  %153 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 1
  %154 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 1
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %153, align 4
  %156 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %28, i64 1, i32 1, i32 2
  %157 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %29, i64 1, i32 1, i32 2
  %158 = bitcast %"class.base::UnguessableToken"* %156 to i8*
  %159 = bitcast %"class.base::UnguessableToken"* %157 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 16, i1 false) #14
  br label %160

160:                                              ; preds = %146, %142
  %161 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 1
  %162 = icmp eq %"class.viz::SurfaceId"* %161, %1
  br i1 %162, label %166, label %163

163:                                              ; preds = %160
  %164 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 0, i32 0, i32 0
  %165 = load i32, i32* %164, align 4
  br label %25

166:                                              ; preds = %160, %6, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__122__merge_move_constructIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EESI_EEvT0_SJ_T1_SK_PNS_15iterator_traitsISJ_E10value_typeET_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %7, label %8, label %80

8:                                                ; preds = %231, %6
  %9 = phi %"class.viz::SurfaceId"* [ %2, %6 ], [ %232, %231 ]
  %10 = phi %"class.viz::SurfaceId"* [ %4, %6 ], [ %234, %231 ]
  %11 = icmp eq %"class.viz::SurfaceId"* %9, %3
  br i1 %11, label %236, label %12

12:                                               ; preds = %8
  %13 = ptrtoint %"class.viz::SurfaceId"* %9 to i64
  %14 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %3, i64 -1, i32 0, i32 0
  %15 = ptrtoint i32* %14 to i64
  %16 = sub i64 %15, %13
  %17 = and i64 %16, 32
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %38

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %20, align 4
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %23, align 4
  %26 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 0, i32 1, i32 0
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 0
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %26, align 8
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 0, i32 1, i32 1
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 1
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %29, align 4
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 0, i32 1, i32 2
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 0, i32 1, i32 2
  %34 = bitcast %"class.base::UnguessableToken"* %32 to i8*
  %35 = bitcast %"class.base::UnguessableToken"* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false) #14
  %36 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %9, i64 1
  %37 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %10, i64 1
  br label %38

38:                                               ; preds = %19, %12
  %39 = phi %"class.viz::SurfaceId"* [ %10, %12 ], [ %37, %19 ]
  %40 = phi %"class.viz::SurfaceId"* [ %9, %12 ], [ %36, %19 ]
  %41 = icmp ult i64 %16, 32
  br i1 %41, label %236, label %42

42:                                               ; preds = %38, %42
  %43 = phi %"class.viz::SurfaceId"* [ %78, %42 ], [ %39, %38 ]
  %44 = phi %"class.viz::SurfaceId"* [ %77, %42 ], [ %40, %38 ]
  %45 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 0, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %45, align 4
  %48 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 0, i32 0, i32 1
  %49 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 0, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %48, align 4
  %51 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 0, i32 1, i32 0
  %52 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 0, i32 1, i32 0
  %53 = load i32, i32* %52, align 8
  store i32 %53, i32* %51, align 8
  %54 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 0, i32 1, i32 1
  %55 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 0, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %54, align 4
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 0, i32 1, i32 2
  %58 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 0, i32 1, i32 2
  %59 = bitcast %"class.base::UnguessableToken"* %57 to i8*
  %60 = bitcast %"class.base::UnguessableToken"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false) #14
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 1, i32 0, i32 0
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 1, i32 0, i32 0
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %61, align 4
  %64 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 1, i32 0, i32 1
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 1, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %64, align 4
  %67 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 1, i32 1, i32 0
  %68 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 1, i32 1, i32 0
  %69 = load i32, i32* %68, align 8
  store i32 %69, i32* %67, align 8
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 1, i32 1, i32 1
  %71 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 1, i32 1, i32 1
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %70, align 4
  %73 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 1, i32 1, i32 2
  %74 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 1, i32 1, i32 2
  %75 = bitcast %"class.base::UnguessableToken"* %73 to i8*
  %76 = bitcast %"class.base::UnguessableToken"* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false) #14
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %44, i64 2
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %43, i64 2
  %79 = icmp eq %"class.viz::SurfaceId"* %77, %3
  br i1 %79, label %236, label %42

80:                                               ; preds = %6, %231
  %81 = phi %"class.viz::SurfaceId"* [ %234, %231 ], [ %4, %6 ]
  %82 = phi %"class.viz::SurfaceId"* [ %233, %231 ], [ %0, %6 ]
  %83 = phi %"class.viz::SurfaceId"* [ %232, %231 ], [ %2, %6 ]
  %84 = icmp eq %"class.viz::SurfaceId"* %83, %3
  br i1 %84, label %85, label %155

85:                                               ; preds = %80
  %86 = icmp eq %"class.viz::SurfaceId"* %82, %1
  br i1 %86, label %236, label %87

87:                                               ; preds = %85
  %88 = ptrtoint %"class.viz::SurfaceId"* %82 to i64
  %89 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 0
  %90 = ptrtoint i32* %89 to i64
  %91 = sub i64 %90, %88
  %92 = and i64 %91, 32
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %113

94:                                               ; preds = %87
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 0
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %95, align 4
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 1
  %99 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 1
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %98, align 4
  %101 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 0
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 0
  %103 = load i32, i32* %102, align 8
  store i32 %103, i32* %101, align 8
  %104 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 1
  %105 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 1
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %104, align 4
  %107 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 2
  %108 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2
  %109 = bitcast %"class.base::UnguessableToken"* %107 to i8*
  %110 = bitcast %"class.base::UnguessableToken"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #14
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 1
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 1
  br label %113

113:                                              ; preds = %94, %87
  %114 = phi %"class.viz::SurfaceId"* [ %81, %87 ], [ %112, %94 ]
  %115 = phi %"class.viz::SurfaceId"* [ %82, %87 ], [ %111, %94 ]
  %116 = icmp ult i64 %91, 32
  br i1 %116, label %236, label %117

117:                                              ; preds = %113, %117
  %118 = phi %"class.viz::SurfaceId"* [ %153, %117 ], [ %114, %113 ]
  %119 = phi %"class.viz::SurfaceId"* [ %152, %117 ], [ %115, %113 ]
  %120 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 0, i32 0
  %122 = load i32, i32* %121, align 4
  store i32 %122, i32* %120, align 4
  %123 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 0, i32 0, i32 1
  %124 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 0, i32 1
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %123, align 4
  %126 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 0, i32 1, i32 0
  %127 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 0
  %128 = load i32, i32* %127, align 8
  store i32 %128, i32* %126, align 8
  %129 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 0, i32 1, i32 1
  %130 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 1
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %129, align 4
  %132 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 0, i32 1, i32 2
  %133 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 0, i32 1, i32 2
  %134 = bitcast %"class.base::UnguessableToken"* %132 to i8*
  %135 = bitcast %"class.base::UnguessableToken"* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 16, i1 false) #14
  %136 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 1, i32 0, i32 0
  %137 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1, i32 0, i32 0
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %136, align 4
  %139 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 1, i32 0, i32 1
  %140 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1, i32 0, i32 1
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %139, align 4
  %142 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 1, i32 1, i32 0
  %143 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1, i32 1, i32 0
  %144 = load i32, i32* %143, align 8
  store i32 %144, i32* %142, align 8
  %145 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 1, i32 1, i32 1
  %146 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1, i32 1, i32 1
  %147 = load i32, i32* %146, align 4
  store i32 %147, i32* %145, align 4
  %148 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 1, i32 1, i32 2
  %149 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 1, i32 1, i32 2
  %150 = bitcast %"class.base::UnguessableToken"* %148 to i8*
  %151 = bitcast %"class.base::UnguessableToken"* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 16, i1 false) #14
  %152 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %119, i64 2
  %153 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %118, i64 2
  %154 = icmp eq %"class.viz::SurfaceId"* %152, %1
  br i1 %154, label %236, label %117

155:                                              ; preds = %80
  %156 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 0, i32 1
  %158 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 0
  %159 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 1
  %160 = load i32, i32* %156, align 4
  %161 = load i32, i32* %158, align 4
  %162 = icmp ult i32 %160, %161
  br i1 %162, label %201, label %163

163:                                              ; preds = %155
  %164 = icmp ult i32 %161, %160
  br i1 %164, label %216, label %165

165:                                              ; preds = %163
  %166 = load i32, i32* %157, align 4
  %167 = load i32, i32* %159, align 4
  %168 = icmp ult i32 %166, %167
  br i1 %168, label %201, label %169

169:                                              ; preds = %165
  %170 = icmp ult i32 %167, %166
  br i1 %170, label %216, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 0
  %173 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 1
  %174 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 0
  %175 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 1
  %176 = load i32, i32* %172, align 4
  %177 = load i32, i32* %174, align 4
  %178 = icmp ult i32 %176, %177
  br i1 %178, label %201, label %179

179:                                              ; preds = %171
  %180 = icmp ult i32 %177, %176
  br i1 %180, label %216, label %181

181:                                              ; preds = %179
  %182 = load i32, i32* %173, align 4
  %183 = load i32, i32* %175, align 4
  %184 = icmp ult i32 %182, %183
  br i1 %184, label %201, label %185

185:                                              ; preds = %181
  %186 = icmp ult i32 %183, %182
  br i1 %186, label %216, label %187

187:                                              ; preds = %185
  %188 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 2, i32 0, i32 0
  %189 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 2, i32 0, i32 1
  %190 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2, i32 0, i32 0
  %191 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2, i32 0, i32 1
  %192 = load i64, i64* %188, align 8
  %193 = load i64, i64* %190, align 8
  %194 = icmp ult i64 %192, %193
  br i1 %194, label %201, label %195

195:                                              ; preds = %187
  %196 = icmp ult i64 %193, %192
  br i1 %196, label %216, label %197

197:                                              ; preds = %195
  %198 = load i64, i64* %189, align 8
  %199 = load i64, i64* %191, align 8
  %200 = icmp ult i64 %198, %199
  br i1 %200, label %201, label %216

201:                                              ; preds = %155, %171, %181, %187, %165, %197
  %202 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 0
  store i32 %160, i32* %202, align 4
  %203 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 1
  %204 = load i32, i32* %157, align 4
  store i32 %204, i32* %203, align 4
  %205 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 0
  %206 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 0
  %207 = load i32, i32* %206, align 8
  store i32 %207, i32* %205, align 8
  %208 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 1
  %209 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 1
  %210 = load i32, i32* %209, align 4
  store i32 %210, i32* %208, align 4
  %211 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 2
  %212 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 0, i32 1, i32 2
  %213 = bitcast %"class.base::UnguessableToken"* %211 to i8*
  %214 = bitcast %"class.base::UnguessableToken"* %212 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %213, i8* align 8 %214, i64 16, i1 false) #14
  %215 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %83, i64 1
  br label %231

216:                                              ; preds = %163, %179, %185, %195, %169, %197
  %217 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 0
  store i32 %161, i32* %217, align 4
  %218 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 0, i32 1
  %219 = load i32, i32* %159, align 4
  store i32 %219, i32* %218, align 4
  %220 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 0
  %221 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 0
  %222 = load i32, i32* %221, align 8
  store i32 %222, i32* %220, align 8
  %223 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 1
  %224 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 1
  %225 = load i32, i32* %224, align 4
  store i32 %225, i32* %223, align 4
  %226 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 0, i32 1, i32 2
  %227 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2
  %228 = bitcast %"class.base::UnguessableToken"* %226 to i8*
  %229 = bitcast %"class.base::UnguessableToken"* %227 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %228, i8* align 8 %229, i64 16, i1 false) #14
  %230 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 1
  br label %231

231:                                              ; preds = %201, %216
  %232 = phi %"class.viz::SurfaceId"* [ %215, %201 ], [ %83, %216 ]
  %233 = phi %"class.viz::SurfaceId"* [ %82, %201 ], [ %230, %216 ]
  %234 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 1
  %235 = icmp eq %"class.viz::SurfaceId"* %233, %1
  br i1 %235, label %8, label %80

236:                                              ; preds = %113, %117, %38, %42, %85, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__124__buffered_inplace_mergeIRN4base8internal9flat_treeIN3viz9SurfaceIdENS1_8identityENS_4lessIvEENS_6vectorIS5_NS_9allocatorIS5_EEEEE13value_compareENS_11__wrap_iterIPS5_EEEEvT0_SJ_SJ_T_NS_15iterator_traitsISJ_E15difference_typeESN_PNSM_10value_typeE(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"struct.base::internal::flat_tree<viz::SurfaceId, base::identity, std::__1::less<void>, std::__1::vector<viz::SurfaceId, std::__1::allocator<viz::SurfaceId> > >::value_compare"* dereferenceable(1), i64, i64, %"class.viz::SurfaceId"*) local_unnamed_addr #0 comdat {
  %8 = ptrtoint %"class.viz::SurfaceId"* %0 to i64
  %9 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  %10 = ptrtoint %"class.viz::SurfaceId"* %6 to i64
  %11 = icmp sgt i64 %4, %5
  br i1 %11, label %44, label %12

12:                                               ; preds = %7
  %13 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %13, label %335, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 0
  %16 = ptrtoint i32* %15 to i64
  %17 = sub i64 %16, %8
  %18 = and i64 %17, 32
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %39

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 0
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %27, align 8
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 1
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 1
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %30, align 4
  %33 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 2
  %34 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2
  %35 = bitcast %"class.base::UnguessableToken"* %33 to i8*
  %36 = bitcast %"class.base::UnguessableToken"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #14
  %37 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 1
  %38 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 1
  br label %39

39:                                               ; preds = %20, %14
  %40 = phi %"class.viz::SurfaceId"* [ undef, %14 ], [ %38, %20 ]
  %41 = phi %"class.viz::SurfaceId"* [ %6, %14 ], [ %38, %20 ]
  %42 = phi %"class.viz::SurfaceId"* [ %0, %14 ], [ %37, %20 ]
  %43 = icmp ult i64 %17, 32
  br i1 %43, label %76, label %151

44:                                               ; preds = %7
  %45 = icmp eq %"class.viz::SurfaceId"* %1, %2
  br i1 %45, label %335, label %46

46:                                               ; preds = %44
  %47 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %2, i64 -1, i32 0, i32 0
  %48 = ptrtoint i32* %47 to i64
  %49 = sub i64 %48, %9
  %50 = and i64 %49, 32
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %71

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %53, align 4
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 0, i32 1
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %56, align 4
  %59 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 0
  %60 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %61 = load i32, i32* %60, align 8
  store i32 %61, i32* %59, align 8
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 1
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %62, align 4
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 0, i32 1, i32 2
  %66 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %67 = bitcast %"class.base::UnguessableToken"* %65 to i8*
  %68 = bitcast %"class.base::UnguessableToken"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #14
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 1
  %70 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %6, i64 1
  br label %71

71:                                               ; preds = %52, %46
  %72 = phi %"class.viz::SurfaceId"* [ undef, %46 ], [ %70, %52 ]
  %73 = phi %"class.viz::SurfaceId"* [ %6, %46 ], [ %70, %52 ]
  %74 = phi %"class.viz::SurfaceId"* [ %1, %46 ], [ %69, %52 ]
  %75 = icmp ult i64 %49, 32
  br i1 %75, label %189, label %297

76:                                               ; preds = %151, %39
  %77 = phi %"class.viz::SurfaceId"* [ %40, %39 ], [ %187, %151 ]
  %78 = icmp eq %"class.viz::SurfaceId"* %77, %6
  br i1 %78, label %335, label %79

79:                                               ; preds = %76, %146
  %80 = phi %"class.viz::SurfaceId"* [ %148, %146 ], [ %6, %76 ]
  %81 = phi %"class.viz::SurfaceId"* [ %149, %146 ], [ %0, %76 ]
  %82 = phi %"class.viz::SurfaceId"* [ %147, %146 ], [ %1, %76 ]
  %83 = icmp eq %"class.viz::SurfaceId"* %82, %2
  br i1 %83, label %84, label %92

84:                                               ; preds = %79
  %85 = ptrtoint %"class.viz::SurfaceId"* %77 to i64
  %86 = ptrtoint %"class.viz::SurfaceId"* %80 to i64
  %87 = sub i64 %85, %86
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %335, label %89

89:                                               ; preds = %84
  %90 = bitcast %"class.viz::SurfaceId"* %81 to i8*
  %91 = bitcast %"class.viz::SurfaceId"* %80 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 %87, i1 false) #14
  br label %335

92:                                               ; preds = %79
  %93 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 0
  %94 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 0, i32 1
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 0, i32 0
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 0, i32 1
  %97 = load i32, i32* %93, align 4
  %98 = load i32, i32* %95, align 4
  %99 = icmp ult i32 %97, %98
  br i1 %99, label %138, label %100

100:                                              ; preds = %92
  %101 = icmp ult i32 %98, %97
  br i1 %101, label %142, label %102

102:                                              ; preds = %100
  %103 = load i32, i32* %94, align 4
  %104 = load i32, i32* %96, align 4
  %105 = icmp ult i32 %103, %104
  br i1 %105, label %138, label %106

106:                                              ; preds = %102
  %107 = icmp ult i32 %104, %103
  br i1 %107, label %142, label %108

108:                                              ; preds = %106
  %109 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 0
  %110 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 1
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 1, i32 0
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 1, i32 1
  %113 = load i32, i32* %109, align 4
  %114 = load i32, i32* %111, align 4
  %115 = icmp ult i32 %113, %114
  br i1 %115, label %138, label %116

116:                                              ; preds = %108
  %117 = icmp ult i32 %114, %113
  br i1 %117, label %142, label %118

118:                                              ; preds = %116
  %119 = load i32, i32* %110, align 4
  %120 = load i32, i32* %112, align 4
  %121 = icmp ult i32 %119, %120
  br i1 %121, label %138, label %122

122:                                              ; preds = %118
  %123 = icmp ult i32 %120, %119
  br i1 %123, label %142, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2, i32 0, i32 0
  %126 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 0, i32 1, i32 2, i32 0, i32 1
  %127 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 1, i32 2, i32 0, i32 0
  %128 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 0, i32 1, i32 2, i32 0, i32 1
  %129 = load i64, i64* %125, align 8
  %130 = load i64, i64* %127, align 8
  %131 = icmp ult i64 %129, %130
  br i1 %131, label %138, label %132

132:                                              ; preds = %124
  %133 = icmp ult i64 %130, %129
  br i1 %133, label %142, label %134

134:                                              ; preds = %132
  %135 = load i64, i64* %126, align 8
  %136 = load i64, i64* %128, align 8
  %137 = icmp ult i64 %135, %136
  br i1 %137, label %138, label %142

138:                                              ; preds = %134, %124, %118, %108, %102, %92
  %139 = bitcast %"class.viz::SurfaceId"* %81 to i8*
  %140 = bitcast %"class.viz::SurfaceId"* %82 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 32, i1 false) #14
  %141 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %82, i64 1
  br label %146

142:                                              ; preds = %134, %132, %122, %116, %106, %100
  %143 = bitcast %"class.viz::SurfaceId"* %81 to i8*
  %144 = bitcast %"class.viz::SurfaceId"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 32, i1 false) #14
  %145 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %80, i64 1
  br label %146

146:                                              ; preds = %142, %138
  %147 = phi %"class.viz::SurfaceId"* [ %141, %138 ], [ %82, %142 ]
  %148 = phi %"class.viz::SurfaceId"* [ %80, %138 ], [ %145, %142 ]
  %149 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %81, i64 1
  %150 = icmp eq %"class.viz::SurfaceId"* %148, %77
  br i1 %150, label %335, label %79

151:                                              ; preds = %39, %151
  %152 = phi %"class.viz::SurfaceId"* [ %187, %151 ], [ %41, %39 ]
  %153 = phi %"class.viz::SurfaceId"* [ %186, %151 ], [ %42, %39 ]
  %154 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 0, i32 0, i32 0
  %156 = load i32, i32* %155, align 4
  store i32 %156, i32* %154, align 4
  %157 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 0, i32 0, i32 1
  %158 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 0, i32 0, i32 1
  %159 = load i32, i32* %158, align 4
  store i32 %159, i32* %157, align 4
  %160 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 0, i32 1, i32 0
  %161 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 0, i32 1, i32 0
  %162 = load i32, i32* %161, align 8
  store i32 %162, i32* %160, align 8
  %163 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 0, i32 1, i32 1
  %164 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 0, i32 1, i32 1
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %163, align 4
  %166 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 0, i32 1, i32 2
  %167 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 0, i32 1, i32 2
  %168 = bitcast %"class.base::UnguessableToken"* %166 to i8*
  %169 = bitcast %"class.base::UnguessableToken"* %167 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %168, i8* align 8 %169, i64 16, i1 false) #14
  %170 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 1, i32 0, i32 0
  %171 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 1, i32 0, i32 0
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %170, align 4
  %173 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 1, i32 0, i32 1
  %174 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 1, i32 0, i32 1
  %175 = load i32, i32* %174, align 4
  store i32 %175, i32* %173, align 4
  %176 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 1, i32 1, i32 0
  %177 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 1, i32 1, i32 0
  %178 = load i32, i32* %177, align 8
  store i32 %178, i32* %176, align 8
  %179 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 1, i32 1, i32 1
  %180 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 1, i32 1, i32 1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 1, i32 1, i32 2
  %183 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 1, i32 1, i32 2
  %184 = bitcast %"class.base::UnguessableToken"* %182 to i8*
  %185 = bitcast %"class.base::UnguessableToken"* %183 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 8 %185, i64 16, i1 false) #14
  %186 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %153, i64 2
  %187 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %152, i64 2
  %188 = icmp eq %"class.viz::SurfaceId"* %186, %1
  br i1 %188, label %76, label %151

189:                                              ; preds = %297, %71
  %190 = phi %"class.viz::SurfaceId"* [ %72, %71 ], [ %333, %297 ]
  %191 = icmp eq %"class.viz::SurfaceId"* %190, %6
  br i1 %191, label %335, label %192

192:                                              ; preds = %189, %288
  %193 = phi %"class.viz::SurfaceId"* [ %295, %288 ], [ %2, %189 ]
  %194 = phi %"class.viz::SurfaceId"* [ %291, %288 ], [ %190, %189 ]
  %195 = phi %"class.viz::SurfaceId"* [ %290, %288 ], [ %1, %189 ]
  %196 = icmp eq %"class.viz::SurfaceId"* %195, %0
  br i1 %196, label %197, label %239

197:                                              ; preds = %192
  %198 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 0, i32 0
  %199 = ptrtoint i32* %198 to i64
  %200 = sub i64 %199, %10
  %201 = lshr i64 %200, 5
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 3
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %215, label %205

205:                                              ; preds = %197, %205
  %206 = phi %"class.viz::SurfaceId"* [ %209, %205 ], [ %194, %197 ]
  %207 = phi %"class.viz::SurfaceId"* [ %210, %205 ], [ %193, %197 ]
  %208 = phi i64 [ %213, %205 ], [ %203, %197 ]
  %209 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %206, i64 -1
  %210 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %207, i64 -1
  %211 = bitcast %"class.viz::SurfaceId"* %210 to i8*
  %212 = bitcast %"class.viz::SurfaceId"* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %211, i8* align 8 %212, i64 32, i1 false) #14
  %213 = add i64 %208, -1
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %205, !llvm.loop !102

215:                                              ; preds = %205, %197
  %216 = phi %"class.viz::SurfaceId"* [ %194, %197 ], [ %209, %205 ]
  %217 = phi %"class.viz::SurfaceId"* [ %193, %197 ], [ %210, %205 ]
  %218 = icmp ult i64 %200, 96
  br i1 %218, label %335, label %219

219:                                              ; preds = %215, %219
  %220 = phi %"class.viz::SurfaceId"* [ %234, %219 ], [ %216, %215 ]
  %221 = phi %"class.viz::SurfaceId"* [ %235, %219 ], [ %217, %215 ]
  %222 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %220, i64 -1
  %223 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %221, i64 -1
  %224 = bitcast %"class.viz::SurfaceId"* %223 to i8*
  %225 = bitcast %"class.viz::SurfaceId"* %222 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %225, i64 32, i1 false) #14
  %226 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %220, i64 -2
  %227 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %221, i64 -2
  %228 = bitcast %"class.viz::SurfaceId"* %227 to i8*
  %229 = bitcast %"class.viz::SurfaceId"* %226 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %228, i8* align 8 %229, i64 32, i1 false) #14
  %230 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %220, i64 -3
  %231 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %221, i64 -3
  %232 = bitcast %"class.viz::SurfaceId"* %231 to i8*
  %233 = bitcast %"class.viz::SurfaceId"* %230 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %232, i8* align 8 %233, i64 32, i1 false) #14
  %234 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %220, i64 -4
  %235 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %221, i64 -4
  %236 = bitcast %"class.viz::SurfaceId"* %235 to i8*
  %237 = bitcast %"class.viz::SurfaceId"* %234 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %236, i8* align 8 %237, i64 32, i1 false) #14
  %238 = icmp eq %"class.viz::SurfaceId"* %234, %6
  br i1 %238, label %335, label %219

239:                                              ; preds = %192
  %240 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1
  %241 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1
  %242 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %241, i64 0, i32 0, i32 0
  %243 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 0, i32 1
  %244 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %240, i64 0, i32 0, i32 0
  %245 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1, i32 0, i32 1
  %246 = load i32, i32* %242, align 4
  %247 = load i32, i32* %244, align 4
  %248 = icmp ult i32 %246, %247
  br i1 %248, label %288, label %249

249:                                              ; preds = %239
  %250 = icmp ult i32 %247, %246
  br i1 %250, label %287, label %251

251:                                              ; preds = %249
  %252 = load i32, i32* %243, align 4
  %253 = load i32, i32* %245, align 4
  %254 = icmp ult i32 %252, %253
  br i1 %254, label %288, label %255

255:                                              ; preds = %251
  %256 = icmp ult i32 %253, %252
  br i1 %256, label %287, label %257

257:                                              ; preds = %255
  %258 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 1, i32 0
  %259 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 1, i32 1
  %260 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1, i32 1, i32 0
  %261 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1, i32 1, i32 1
  %262 = load i32, i32* %258, align 4
  %263 = load i32, i32* %260, align 4
  %264 = icmp ult i32 %262, %263
  br i1 %264, label %288, label %265

265:                                              ; preds = %257
  %266 = icmp ult i32 %263, %262
  br i1 %266, label %287, label %267

267:                                              ; preds = %265
  %268 = load i32, i32* %259, align 4
  %269 = load i32, i32* %261, align 4
  %270 = icmp ult i32 %268, %269
  br i1 %270, label %288, label %271

271:                                              ; preds = %267
  %272 = icmp ult i32 %269, %268
  br i1 %272, label %287, label %273

273:                                              ; preds = %271
  %274 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 1, i32 2, i32 0, i32 0
  %275 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %194, i64 -1, i32 1, i32 2, i32 0, i32 1
  %276 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1, i32 1, i32 2, i32 0, i32 0
  %277 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %195, i64 -1, i32 1, i32 2, i32 0, i32 1
  %278 = load i64, i64* %274, align 8
  %279 = load i64, i64* %276, align 8
  %280 = icmp ult i64 %278, %279
  br i1 %280, label %288, label %281

281:                                              ; preds = %273
  %282 = icmp ult i64 %279, %278
  br i1 %282, label %287, label %283

283:                                              ; preds = %281
  %284 = load i64, i64* %275, align 8
  %285 = load i64, i64* %277, align 8
  %286 = icmp ult i64 %284, %285
  br i1 %286, label %288, label %287

287:                                              ; preds = %283, %281, %271, %265, %255, %249
  br label %288

288:                                              ; preds = %239, %251, %257, %267, %273, %283, %287
  %289 = phi %"class.viz::SurfaceId"* [ %241, %287 ], [ %240, %283 ], [ %240, %273 ], [ %240, %267 ], [ %240, %257 ], [ %240, %251 ], [ %240, %239 ]
  %290 = phi %"class.viz::SurfaceId"* [ %195, %287 ], [ %240, %283 ], [ %240, %273 ], [ %240, %267 ], [ %240, %257 ], [ %240, %251 ], [ %240, %239 ]
  %291 = phi %"class.viz::SurfaceId"* [ %241, %287 ], [ %194, %283 ], [ %194, %273 ], [ %194, %267 ], [ %194, %257 ], [ %194, %251 ], [ %194, %239 ]
  %292 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %193, i64 -1
  %293 = bitcast %"class.viz::SurfaceId"* %292 to i8*
  %294 = bitcast %"class.viz::SurfaceId"* %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %293, i8* align 8 %294, i64 32, i1 false) #14
  %295 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %193, i64 -1
  %296 = icmp eq %"class.viz::SurfaceId"* %291, %6
  br i1 %296, label %335, label %192

297:                                              ; preds = %71, %297
  %298 = phi %"class.viz::SurfaceId"* [ %333, %297 ], [ %73, %71 ]
  %299 = phi %"class.viz::SurfaceId"* [ %332, %297 ], [ %74, %71 ]
  %300 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 0, i32 0, i32 0
  %301 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 0, i32 0, i32 0
  %302 = load i32, i32* %301, align 4
  store i32 %302, i32* %300, align 4
  %303 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 0, i32 0, i32 1
  %304 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 0, i32 0, i32 1
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %303, align 4
  %306 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 0, i32 1, i32 0
  %307 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 0, i32 1, i32 0
  %308 = load i32, i32* %307, align 8
  store i32 %308, i32* %306, align 8
  %309 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 0, i32 1, i32 1
  %310 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 0, i32 1, i32 1
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %309, align 4
  %312 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 0, i32 1, i32 2
  %313 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 0, i32 1, i32 2
  %314 = bitcast %"class.base::UnguessableToken"* %312 to i8*
  %315 = bitcast %"class.base::UnguessableToken"* %313 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %314, i8* align 8 %315, i64 16, i1 false) #14
  %316 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 1, i32 0, i32 0
  %317 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 1, i32 0, i32 0
  %318 = load i32, i32* %317, align 4
  store i32 %318, i32* %316, align 4
  %319 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 1, i32 0, i32 1
  %320 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 1, i32 0, i32 1
  %321 = load i32, i32* %320, align 4
  store i32 %321, i32* %319, align 4
  %322 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 1, i32 1, i32 0
  %323 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 1, i32 1, i32 0
  %324 = load i32, i32* %323, align 8
  store i32 %324, i32* %322, align 8
  %325 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 1, i32 1, i32 1
  %326 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 1, i32 1, i32 1
  %327 = load i32, i32* %326, align 4
  store i32 %327, i32* %325, align 4
  %328 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 1, i32 1, i32 2
  %329 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 1, i32 1, i32 2
  %330 = bitcast %"class.base::UnguessableToken"* %328 to i8*
  %331 = bitcast %"class.base::UnguessableToken"* %329 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %330, i8* align 8 %331, i64 16, i1 false) #14
  %332 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %299, i64 2
  %333 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %298, i64 2
  %334 = icmp eq %"class.viz::SurfaceId"* %332, %2
  br i1 %334, label %189, label %297

335:                                              ; preds = %146, %288, %215, %219, %44, %12, %189, %89, %84, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.viz::SurfaceId"* @_ZNSt3__112__rotate_gcdINS_11__wrap_iterIPN3viz9SurfaceIdEEEEET_S6_S6_S6_(%"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.viz::SurfaceId"* %0 to i64
  %5 = ptrtoint %"class.viz::SurfaceId"* %1 to i64
  %6 = ptrtoint %"class.viz::SurfaceId"* %2 to i64
  %7 = sub i64 %5, %4
  %8 = ashr exact i64 %7, 5
  %9 = sub i64 %6, %5
  %10 = ashr exact i64 %9, 5
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %12, label %65

12:                                               ; preds = %3
  %13 = icmp eq %"class.viz::SurfaceId"* %0, %1
  br i1 %13, label %105, label %14

14:                                               ; preds = %12
  %15 = getelementptr %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 -1, i32 0, i32 0
  %16 = ptrtoint i32* %15 to i64
  %17 = sub i64 %16, %4
  %18 = and i64 %17, 32
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = bitcast %"class.viz::SurfaceId"* %0 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 4
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 0, i32 1, i32 2, i32 0, i32 0
  %24 = bitcast i64* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = bitcast %"class.viz::SurfaceId"* %0 to i8*
  %27 = bitcast %"class.viz::SurfaceId"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 32, i1 false) #14
  %28 = bitcast %"class.viz::SurfaceId"* %1 to <4 x i32>*
  store <4 x i32> %22, <4 x i32>* %28, align 8
  %29 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %30 = bitcast i64* %29 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %30, align 8
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 1
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 1
  br label %33

33:                                               ; preds = %20, %14
  %34 = phi %"class.viz::SurfaceId"* [ %1, %14 ], [ %32, %20 ]
  %35 = phi %"class.viz::SurfaceId"* [ %0, %14 ], [ %31, %20 ]
  %36 = icmp ult i64 %17, 32
  br i1 %36, label %105, label %37

37:                                               ; preds = %33, %37
  %38 = phi %"class.viz::SurfaceId"* [ %63, %37 ], [ %34, %33 ]
  %39 = phi %"class.viz::SurfaceId"* [ %62, %37 ], [ %35, %33 ]
  %40 = bitcast %"class.viz::SurfaceId"* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 0, i32 1, i32 2, i32 0, i32 0
  %43 = bitcast i64* %42 to <2 x i64>*
  %44 = load <2 x i64>, <2 x i64>* %43, align 8
  %45 = bitcast %"class.viz::SurfaceId"* %39 to i8*
  %46 = bitcast %"class.viz::SurfaceId"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 32, i1 false) #14
  %47 = bitcast %"class.viz::SurfaceId"* %38 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %47, align 8
  %48 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %38, i64 0, i32 1, i32 2, i32 0, i32 0
  %49 = bitcast i64* %48 to <2 x i64>*
  store <2 x i64> %44, <2 x i64>* %49, align 8
  %50 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 1
  %51 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %38, i64 1
  %52 = bitcast %"class.viz::SurfaceId"* %50 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 1, i32 1, i32 2, i32 0, i32 0
  %55 = bitcast i64* %54 to <2 x i64>*
  %56 = load <2 x i64>, <2 x i64>* %55, align 8
  %57 = bitcast %"class.viz::SurfaceId"* %50 to i8*
  %58 = bitcast %"class.viz::SurfaceId"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 32, i1 false) #14
  %59 = bitcast %"class.viz::SurfaceId"* %51 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %59, align 8
  %60 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %38, i64 1, i32 1, i32 2, i32 0, i32 0
  %61 = bitcast i64* %60 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %61, align 8
  %62 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %39, i64 2
  %63 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %38, i64 2
  %64 = icmp eq %"class.viz::SurfaceId"* %62, %1
  br i1 %64, label %105, label %37

65:                                               ; preds = %3, %65
  %66 = phi i64 [ %68, %65 ], [ %10, %3 ]
  %67 = phi i64 [ %66, %65 ], [ %8, %3 ]
  %68 = srem i64 %67, %66
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %65

70:                                               ; preds = %65
  %71 = icmp eq i64 %66, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 %66
  br label %76

74:                                               ; preds = %100, %70
  %75 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 %10
  br label %105

76:                                               ; preds = %72, %100
  %77 = phi %"class.viz::SurfaceId"* [ %78, %100 ], [ %73, %72 ]
  %78 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 -1
  %79 = ptrtoint %"class.viz::SurfaceId"* %78 to i64
  %80 = bitcast %"class.viz::SurfaceId"* %78 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %77, i64 -1, i32 1, i32 2, i32 0, i32 0
  %83 = bitcast i64* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8
  %85 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %78, i64 %8
  br label %86

86:                                               ; preds = %86, %76
  %87 = phi i64 [ %79, %76 ], [ %89, %86 ]
  %88 = phi %"class.viz::SurfaceId"* [ %85, %76 ], [ %98, %86 ]
  %89 = ptrtoint %"class.viz::SurfaceId"* %88 to i64
  %90 = inttoptr i64 %87 to i8*
  %91 = bitcast %"class.viz::SurfaceId"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 32, i1 false)
  %92 = sub i64 %6, %89
  %93 = ashr exact i64 %92, 5
  %94 = icmp slt i64 %8, %93
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 %8
  %96 = sub nsw i64 %8, %93
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %0, i64 %96
  %98 = select i1 %94, %"class.viz::SurfaceId"* %95, %"class.viz::SurfaceId"* %97
  %99 = icmp eq %"class.viz::SurfaceId"* %98, %78
  br i1 %99, label %100, label %86

100:                                              ; preds = %86
  %101 = bitcast %"class.viz::SurfaceId"* %88 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %101, align 8
  %102 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %88, i64 0, i32 1, i32 2, i32 0, i32 0
  %103 = bitcast i64* %102 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %103, align 8
  %104 = icmp eq %"class.viz::SurfaceId"* %78, %0
  br i1 %104, label %74, label %76

105:                                              ; preds = %33, %37, %12, %74
  %106 = phi %"class.viz::SurfaceId"* [ %75, %74 ], [ %0, %12 ], [ %1, %37 ], [ %1, %33 ]
  ret %"class.viz::SurfaceId"* %106
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !6
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !6
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !6
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2ui11LatencyInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.139"*, %"class.ui::LatencyInfo"* dereferenceable(64)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.ui::LatencyInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.139"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.139"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.ui::LatencyInfo"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #16
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.ui::LatencyInfo"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.ui::LatencyInfo"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %36, i64 %9
  %38 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %36, i64 %35
  %39 = ptrtoint %"class.ui::LatencyInfo"* %38 to i64
  tail call void @_ZN2ui11LatencyInfoC1ERKS0_(%"class.ui::LatencyInfo"* %37, %"class.ui::LatencyInfo"* dereferenceable(64) %1) #14
  %40 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %37, i64 1
  %41 = ptrtoint %"class.ui::LatencyInfo"* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 0
  %43 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %42, align 8
  %44 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  %45 = icmp eq %"class.ui::LatencyInfo"* %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = ptrtoint %"class.ui::LatencyInfo"* %43 to i64
  br label %57

48:                                               ; preds = %34, %48
  %49 = phi %"class.ui::LatencyInfo"* [ %51, %48 ], [ %37, %34 ]
  %50 = phi %"class.ui::LatencyInfo"* [ %52, %48 ], [ %44, %34 ]
  %51 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %49, i64 -1
  %52 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %50, i64 -1
  tail call void @_ZN2ui11LatencyInfoC1EOS0_(%"class.ui::LatencyInfo"* %51, %"class.ui::LatencyInfo"* dereferenceable(64) %52) #14
  %53 = icmp eq %"class.ui::LatencyInfo"* %52, %43
  br i1 %53, label %54, label %48

54:                                               ; preds = %48
  %55 = load i64, i64* %6, align 8
  %56 = load %"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"** %3, align 8
  br label %57

57:                                               ; preds = %46, %54
  %58 = phi %"class.ui::LatencyInfo"* [ %43, %46 ], [ %56, %54 ]
  %59 = phi %"class.ui::LatencyInfo"* [ %37, %46 ], [ %51, %54 ]
  %60 = phi i64 [ %47, %46 ], [ %55, %54 ]
  %61 = ptrtoint %"class.ui::LatencyInfo"* %59 to i64
  store i64 %61, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %62 = inttoptr i64 %60 to %"class.ui::LatencyInfo"*
  %63 = icmp eq %"class.ui::LatencyInfo"* %58, %62
  br i1 %63, label %68, label %64

64:                                               ; preds = %57, %64
  %65 = phi %"class.ui::LatencyInfo"* [ %66, %64 ], [ %58, %57 ]
  %66 = getelementptr inbounds %"class.ui::LatencyInfo", %"class.ui::LatencyInfo"* %65, i64 -1
  tail call void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"* %66) #14
  %67 = icmp eq %"class.ui::LatencyInfo"* %66, %62
  br i1 %67, label %68, label %64

68:                                               ; preds = %64, %57
  %69 = icmp eq i64 %60, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %68
  %71 = inttoptr i64 %60 to i8*
  tail call void @_ZdlPv(i8* %71) #15
  br label %72

72:                                               ; preds = %68, %70
  ret void
}

declare void @_ZN2ui11LatencyInfoC1ERKS0_(%"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"* dereferenceable(64)) unnamed_addr #3

declare void @_ZN2ui11LatencyInfoC1EOS0_(%"class.ui::LatencyInfo"*, %"class.ui::LatencyInfo"* dereferenceable(64)) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2ui11LatencyInfoD1Ev(%"class.ui::LatencyInfo"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3gfx20PresentationFeedback7FailureEv: argument 0"}
!4 = distinct !{!4, !"_ZN3gfx20PresentationFeedback7FailureEv"}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{i8 0, i8 2}
!7 = !{!"branch_weights", i32 1, i32 2000}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3gfx20PresentationFeedback7FailureEv: argument 0"}
!10 = distinct !{!10, !"_ZN3gfx20PresentationFeedback7FailureEv"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNSt3__16__treeINS_12__value_typeIN4util6IdTypeIN3viz20CompositorRenderPassEmLm0ELm1EEENS_10unique_ptrINS4_17CopyOutputRequestENS_14default_deleteIS8_EEEEEENS_19__map_value_compareIS6_SC_NS_4lessIS6_EELb1EEENS_9allocatorISC_EEE16__construct_nodeIJNS_4pairIS6_SB_EEEEENS7_INS_11__tree_nodeISC_PvEENS_22__tree_node_destructorINSH_ISP_EEEEEEDpOT_: argument 0"}
!13 = distinct !{!13, !"_ZNSt3__16__treeINS_12__value_typeIN4util6IdTypeIN3viz20CompositorRenderPassEmLm0ELm1EEENS_10unique_ptrINS4_17CopyOutputRequestENS_14default_deleteIS8_EEEEEENS_19__map_value_compareIS6_SC_NS_4lessIS6_EELb1EEENS_9allocatorISC_EEE16__construct_nodeIJNS_4pairIS6_SB_EEEEENS7_INS_11__tree_nodeISC_PvEENS_22__tree_node_destructorINSH_ISP_EEEEEEDpOT_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3viz7Surface6clientEv: argument 0"}
!16 = distinct !{!16, !"_ZN3viz7Surface6clientEv"}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !18}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.isvectorized", i32 1}
!27 = distinct !{!27, !18}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !26}
!34 = distinct !{!34, !18}
!35 = distinct !{!35, !18}
!36 = distinct !{!36, !26}
!37 = distinct !{!37, !26}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !26}
!44 = distinct !{!44, !18}
!45 = distinct !{!45, !18}
!46 = distinct !{!46, !26}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !26}
!53 = distinct !{!53, !18}
!54 = distinct !{!54, !18}
!55 = distinct !{!55, !26}
!56 = distinct !{!56, !18}
!57 = !{!58}
!58 = distinct !{!58, !59}
!59 = distinct !{!59, !"LVerDomain"}
!60 = !{!61}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !26}
!63 = distinct !{!63, !18}
!64 = distinct !{!64, !18}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !26}
!71 = distinct !{!71, !18}
!72 = distinct !{!72, !26}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !26}
!79 = distinct !{!79, !18}
!80 = distinct !{!80, !26}
!81 = distinct !{!81, !26}
!82 = !{!83}
!83 = distinct !{!83, !84}
!84 = distinct !{!84, !"LVerDomain"}
!85 = !{!86}
!86 = distinct !{!86, !84}
!87 = distinct !{!87, !26}
!88 = distinct !{!88, !18}
!89 = distinct !{!89, !26}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = distinct !{!95, !26}
!96 = distinct !{!96, !18}
!97 = distinct !{!97, !26}
!98 = distinct !{!98, !18}
!99 = distinct !{!99, !18}
!100 = distinct !{!100, !18}
!101 = distinct !{!101, !18}
!102 = distinct !{!102, !18}
