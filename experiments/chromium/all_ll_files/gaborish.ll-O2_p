; ModuleID = '../../third_party/libjxl/src/lib/jxl/gaborish.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/gaborish.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::WeightsSymmetric5" = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/gaborish.cc\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"mul >= 0.0f\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15GaborishInverseEPNS_6Image3IfEEfPNS_10ThreadPoolE(%"class.jxl::Image3"*, float, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 {
  %4 = alloca %"struct.jxl::WeightsSymmetric5", align 4
  %5 = alloca %"class.jxl::Plane", align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = fcmp ult float %1, 0.000000e+00
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i32 28, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #4
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5
  unreachable

13:                                               ; preds = %3
  %14 = bitcast %"struct.jxl::WeightsSymmetric5"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %14) #4
  %15 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 0, i64 1
  %17 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 0, i64 2
  %18 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 0, i64 3
  %19 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 1, i64 0
  %20 = fmul float %1, 0xBFB7A4D960000000
  %21 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 1, i64 1
  %22 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 1, i64 2
  %23 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 1, i64 3
  %24 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 2, i64 0
  %25 = fmul float %1, 0x3F90909220000000
  %26 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 2, i64 1
  %27 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 2, i64 2
  %28 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 2, i64 3
  %29 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 3, i64 0
  %30 = fmul float %1, 0xBFA4190D00000000
  %31 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 3, i64 1
  %32 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 3, i64 2
  %33 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 3, i64 3
  %34 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 4, i64 0
  %35 = fmul float %1, 0x3F727BA9A0000000
  %36 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 4, i64 1
  %37 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 4, i64 2
  %38 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 4, i64 3
  %39 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 5, i64 0
  %40 = fmul float %1, 0x3F4B590040000000
  %41 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 5, i64 1
  %42 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 5, i64 2
  %43 = getelementptr inbounds %"struct.jxl::WeightsSymmetric5", %"struct.jxl::WeightsSymmetric5"* %4, i64 0, i32 5, i64 3
  %44 = fmul float %20, 4.000000e+00
  %45 = fpext float %44 to double
  %46 = fadd double %45, 1.000000e+00
  %47 = fmul float %25, 4.000000e+00
  %48 = fpext float %47 to double
  %49 = fadd double %46, %48
  %50 = fmul float %30, 4.000000e+00
  %51 = fpext float %50 to double
  %52 = fadd double %49, %51
  %53 = fmul float %35, 4.000000e+00
  %54 = fpext float %53 to double
  %55 = fadd double %52, %54
  %56 = fmul float %40, 8.000000e+00
  %57 = fpext float %56 to double
  %58 = fadd double %55, %57
  %59 = fdiv double 1.000000e+00, %58
  %60 = fptrunc double %59 to float
  store float %60, float* %15, align 4
  %61 = fmul float %20, %60
  store float %61, float* %19, align 4
  %62 = fmul float %25, %60
  store float %62, float* %24, align 4
  %63 = fmul float %30, %60
  store float %63, float* %29, align 4
  %64 = fmul float %35, %60
  store float %64, float* %34, align 4
  %65 = fmul float %40, %60
  store float %65, float* %39, align 4
  store float %60, float* %16, align 4
  store float %61, float* %21, align 4
  store float %62, float* %26, align 4
  store float %63, float* %31, align 4
  store float %64, float* %36, align 4
  store float %65, float* %41, align 4
  store float %60, float* %17, align 4
  store float %61, float* %22, align 4
  store float %62, float* %27, align 4
  store float %63, float* %32, align 4
  store float %64, float* %37, align 4
  store float %65, float* %42, align 4
  store float %60, float* %18, align 4
  store float %61, float* %23, align 4
  store float %62, float* %28, align 4
  store float %63, float* %33, align 4
  store float %64, float* %38, align 4
  store float %65, float* %43, align 4
  %66 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #4
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %5, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 2
  %69 = bitcast %"class.jxl::Plane"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 -86, i64 32, i1 false)
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %5, %"class.jxl::Plane"* dereferenceable(32) %68)
  %70 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0
  %71 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %71) #4
  %72 = bitcast %"class.jxl::Image3"* %0 to <2 x i32>*
  %73 = load <2 x i32>, <2 x i32>* %72, align 8
  %74 = zext <2 x i32> %73 to <2 x i64>
  %75 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %6, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 0, i64 16, i1 false) #4
  %76 = bitcast i64* %75 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %76, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane"* dereferenceable(32) %70, %"class.jxl::Rect"* nonnull dereferenceable(32) %6, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %4, %"class.jxl::ThreadPool"* %2, %"class.jxl::Plane"* %68) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %71) #4
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 1
  %78 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %78) #4
  %79 = bitcast %"class.jxl::Image3"* %0 to <2 x i32>*
  %80 = load <2 x i32>, <2 x i32>* %79, align 8
  %81 = zext <2 x i32> %80 to <2 x i64>
  %82 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %7, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 16, i1 false) #4
  %83 = bitcast i64* %82 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %83, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane"* dereferenceable(32) %77, %"class.jxl::Rect"* nonnull dereferenceable(32) %7, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %4, %"class.jxl::ThreadPool"* %2, %"class.jxl::Plane"* %70) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %78) #4
  %84 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %84) #4
  %85 = bitcast %"class.jxl::Image3"* %0 to <2 x i32>*
  %86 = load <2 x i32>, <2 x i32>* %85, align 8
  %87 = zext <2 x i32> %86 to <2 x i64>
  %88 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %84, i8 0, i64 16, i1 false) #4
  %89 = bitcast i64* %88 to <2 x i64>*
  store <2 x i64> %87, <2 x i64>* %89, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane"* nonnull dereferenceable(32) %5, %"class.jxl::Rect"* nonnull dereferenceable(32) %8, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %4, %"class.jxl::ThreadPool"* %2, %"class.jxl::Plane"* %77) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %84) #4
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %0, i64 0, i32 0, i64 0, i32 0
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %77, i64 0, i32 0
  call void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"* %90, %"struct.jxl::PlaneBase"* dereferenceable(32) %91) #4
  %92 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %68, i64 0, i32 0
  call void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"* %90, %"struct.jxl::PlaneBase"* dereferenceable(32) %92) #4
  %93 = load i8*, i8** %67, align 8
  store i8* null, i8** %67, align 8
  %94 = icmp eq i8* %93, null
  br i1 %94, label %96, label %95

95:                                               ; preds = %13
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %93) #4
  br label %96

96:                                               ; preds = %13, %95
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %14) #4
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #4
  %14 = load i32, i32* %6, align 8, !noalias !2
  %15 = load i32, i32* %3, align 8, !alias.scope !2
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !2
  %20 = load i32, i32* %18, align 4, !alias.scope !2
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0)) #4, !noalias !2
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #5, !noalias !2
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !2
  %33 = load i64, i64* %4, align 8, !alias.scope !2
  %34 = load i8*, i8** %30, align 8, !noalias !2
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #4, !noalias !2
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #4, !noalias !2
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #4, !noalias !2
  %43 = load i32, i32* %10, align 4, !noalias !2
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !2
  %48 = load i8*, i8** %30, align 8, !noalias !2
  %49 = load i64, i64* %31, align 8, !noalias !2
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #4, !noalias !2
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #4, !noalias !2
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #4, !noalias !2
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !2
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

declare void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::WeightsSymmetric5"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"class.jxl::Plane"*) local_unnamed_addr #1

declare void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"* dereferenceable(32)) local_unnamed_addr #1

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
