; ModuleID = '../../third_party/webrtc/api/video/builtin_video_bitrate_allocator_factory.cc'
source_filename = "../../third_party/webrtc/api/video/builtin_video_bitrate_allocator_factory.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::VideoBitrateAllocatorFactory" = type { i32 (...)** }
%"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory" = type { %"class.webrtc::VideoBitrateAllocatorFactory" }
%"class.webrtc::VideoBitrateAllocator" = type { i32 (...)** }
%"class.webrtc::VideoCodec" = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i8, [3 x %"struct.webrtc::SpatialLayer"], [5 x %"struct.webrtc::SpatialLayer"], i32, i8, %"class.absl::optional", %"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds", i8, %"union.webrtc::VideoCodecUnion", %"class.std::__1::basic_string" }
%"struct.webrtc::SpatialLayer" = type { i16, i16, float, i8, i32, i32, i32, i32, i8 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds" = type { i64, i16 }
%"union.webrtc::VideoCodecUnion" = type { %"struct.webrtc::VideoCodecVP9" }
%"struct.webrtc::VideoCodecVP9" = type { i32, i8, i8, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.15 }
%union.anon.15 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::SvcRateAllocator" = type { %"class.webrtc::VideoBitrateAllocator", %"class.webrtc::VideoCodec", %"struct.webrtc::SvcRateAllocator::NumLayers", %"class.webrtc::StableTargetRateExperiment", %"class.absl::InlinedVector", i64 }
%"struct.webrtc::SvcRateAllocator::NumLayers" = type { i64, i64 }
%"class.webrtc::StableTargetRateExperiment" = type { %"class.webrtc::FieldTrialParameter", %"class.webrtc::FieldTrialParameter.25", %"class.webrtc::FieldTrialParameter.25" }
%"class.webrtc::FieldTrialParameter" = type { %"class.webrtc::FieldTrialParameterInterface.base", i8, [6 x i8] }
%"class.webrtc::FieldTrialParameterInterface.base" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8 }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::FieldTrialParameterInterface"**, %"class.webrtc::FieldTrialParameterInterface"**, %"class.std::__1::__compressed_pair.20" }
%"class.webrtc::FieldTrialParameterInterface" = type <{ i32 (...)**, %"class.std::__1::vector", %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.webrtc::FieldTrialParameterInterface"** }
%"class.webrtc::FieldTrialParameter.25" = type { %"class.webrtc::FieldTrialParameterInterface.base", double }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DataRate, 5, std::__1::allocator<webrtc::DataRate> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.28" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.28" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DataRate, 5, std::__1::allocator<webrtc::DataRate> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DataRate, 5, std::__1::allocator<webrtc::DataRate> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DataRate, 5, std::__1::allocator<webrtc::DataRate> >::Allocated" = type { %"class.webrtc::DataRate"*, i64 }
%"class.webrtc::DataRate" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.webrtc::SimulcastRateAllocator" = type <{ %"class.webrtc::VideoBitrateAllocator", %"class.webrtc::VideoCodec", %"class.webrtc::StableTargetRateExperiment", %"class.webrtc::RateControlSettings", %"class.std::__1::vector.47", i8, [7 x i8] }>
%"class.webrtc::RateControlSettings" = type { %"struct.webrtc::CongestionWindowConfig", %"struct.webrtc::VideoRateControlConfig" }
%"struct.webrtc::CongestionWindowConfig" = type <{ %"class.absl::optional", %"class.absl::optional", %"class.absl::optional.35", i8, [7 x i8] }>
%"class.absl::optional.35" = type { %"class.absl::optional_internal::optional_data.36" }
%"class.absl::optional_internal::optional_data.36" = type { %"class.absl::optional_internal::optional_data_base.37" }
%"class.absl::optional_internal::optional_data_base.37" = type { %"class.absl::optional_internal::optional_data_dtor_base.38" }
%"class.absl::optional_internal::optional_data_dtor_base.38" = type { i8, %union.anon.39 }
%union.anon.39 = type { %"class.webrtc::DataSize" }
%"class.webrtc::DataSize" = type { %"class.webrtc::rtc_units_impl::RelativeUnit.40" }
%"class.webrtc::rtc_units_impl::RelativeUnit.40" = type { %"class.webrtc::rtc_units_impl::UnitBase.41" }
%"class.webrtc::rtc_units_impl::UnitBase.41" = type { i64 }
%"struct.webrtc::VideoRateControlConfig" = type <{ %"class.absl::optional.42", i8, [3 x i8], %"class.absl::optional", %"class.absl::optional", i8, i8, [2 x i8], double, double, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.absl::optional.42" = type { %"class.absl::optional_internal::optional_data.43" }
%"class.absl::optional_internal::optional_data.43" = type { %"class.absl::optional_internal::optional_data_base.44" }
%"class.absl::optional_internal::optional_data_base.44" = type { %"class.absl::optional_internal::optional_data_dtor_base.45" }
%"class.absl::optional_internal::optional_data_dtor_base.45" = type { i8, %union.anon.46 }
%union.anon.46 = type { double }
%"class.std::__1::vector.47" = type { i64*, i64, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { i64 }

$_ZN6webrtc28VideoBitrateAllocatorFactoryD2Ev = comdat any

@_ZTVN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactoryE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::VideoBitrateAllocatorFactory"*)* @_ZN6webrtc28VideoBitrateAllocatorFactoryD2Ev to i8*), i8* bitcast (void (%"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory"*)* @_ZN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactoryD0Ev to i8*), i8* bitcast (%"class.webrtc::VideoBitrateAllocator"* (%"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory"*, %"class.webrtc::VideoCodec"*)* @_ZN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactory27CreateVideoBitrateAllocatorERKNS_10VideoCodecE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webrtc::VideoBitrateAllocatorFactory"* @_ZN6webrtc41CreateBuiltinVideoBitrateAllocatorFactoryEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znwm(i64 8) #4
  %2 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = bitcast i8* %1 to %"class.webrtc::VideoBitrateAllocatorFactory"*
  ret %"class.webrtc::VideoBitrateAllocatorFactory"* %3
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc28VideoBitrateAllocatorFactoryD2Ev(%"class.webrtc::VideoBitrateAllocatorFactory"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactoryD0Ev(%"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.webrtc::VideoBitrateAllocator"* @_ZN6webrtc12_GLOBAL__N_135BuiltinVideoBitrateAllocatorFactory27CreateVideoBitrateAllocatorERKNS_10VideoCodecE(%"class.webrtc::(anonymous namespace)::BuiltinVideoBitrateAllocatorFactory"* nocapture readnone, %"class.webrtc::VideoCodec"* dereferenceable(376)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::VideoCodec", %"class.webrtc::VideoCodec"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, -2
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i8* @_Znwm(i64 664) #4
  %9 = bitcast i8* %8 to %"class.webrtc::SvcRateAllocator"*
  tail call void @_ZN6webrtc16SvcRateAllocatorC1ERKNS_10VideoCodecE(%"class.webrtc::SvcRateAllocator"* nonnull %9, %"class.webrtc::VideoCodec"* dereferenceable(376) %1) #5
  br label %13

10:                                               ; preds = %2
  %11 = tail call i8* @_Znwm(i64 728) #4
  %12 = bitcast i8* %11 to %"class.webrtc::SimulcastRateAllocator"*
  tail call void @_ZN6webrtc22SimulcastRateAllocatorC1ERKNS_10VideoCodecE(%"class.webrtc::SimulcastRateAllocator"* nonnull %12, %"class.webrtc::VideoCodec"* dereferenceable(376) %1) #5
  br label %13

13:                                               ; preds = %10, %7
  %14 = phi i8* [ %8, %7 ], [ %11, %10 ]
  %15 = bitcast i8* %14 to %"class.webrtc::VideoBitrateAllocator"*
  ret %"class.webrtc::VideoBitrateAllocator"* %15
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

declare void @_ZN6webrtc16SvcRateAllocatorC1ERKNS_10VideoCodecE(%"class.webrtc::SvcRateAllocator"*, %"class.webrtc::VideoCodec"* dereferenceable(376)) unnamed_addr #3

declare void @_ZN6webrtc22SimulcastRateAllocatorC1ERKNS_10VideoCodecE(%"class.webrtc::SimulcastRateAllocator"*, %"class.webrtc::VideoCodec"* dereferenceable(376)) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
