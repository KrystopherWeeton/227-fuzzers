; ModuleID = '../../third_party/dav1d/libdav1d/src/mc_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/mc_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dMCDSPContext = type { [10 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*], [10 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*], [10 x void (i16*, i8*, i64, i32, i32, i32, i32)*], [10 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*], void (i8*, i64, i16*, i16*, i32, i32)*, void (i8*, i64, i16*, i16*, i32, i32, i32)*, void (i8*, i64, i16*, i16*, i32, i32, i8*)*, [3 x void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)*], void (i8*, i64, i8*, i32, i32, i8*)*, void (i8*, i64, i8*, i32, i32)*, void (i8*, i64, i8*, i32, i32)*, void (i8*, i64, i8*, i64, i16*, i32, i32)*, void (i16*, i64, i8*, i64, i16*, i32, i32)*, void (i64, i64, i64, i64, i64, i64, i8*, i64, i8*, i64)*, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32)* }

@dav1d_mc_subpel_filters = external constant [6 x [15 x [8 x i8]]], align 16
@dav1d_obmc_masks = external local_unnamed_addr constant [64 x i8], align 16
@dav1d_mc_warp_filter = external local_unnamed_addr constant [193 x [8 x i8]], align 16
@dav1d_resize_filter = external local_unnamed_addr constant [64 x [8 x i8]], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_mc_dsp_init_8bpc(%struct.Dav1dMCDSPContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 1, i64 0
  %3 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 2, i64 0
  %4 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 3, i64 0
  %5 = bitcast %struct.Dav1dMCDSPContext* %0 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_regular_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_regular_smooth_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>* %5, align 8
  %6 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)** %2 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_regular_scaled_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_regular_smooth_scaled_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %6, align 8
  %7 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %3 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_regular_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_regular_smooth_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %7, align 8
  %8 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)** %4 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_regular_scaled_c, void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_regular_smooth_scaled_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %8, align 8
  %9 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 0, i64 2
  %10 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 1, i64 2
  %11 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 2, i64 2
  %12 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 3, i64 2
  %13 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32)** %9 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_regular_sharp_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_sharp_regular_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>* %13, align 8
  %14 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)** %10 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_regular_sharp_scaled_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_sharp_regular_scaled_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %14, align 8
  %15 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %11 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_regular_sharp_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_sharp_regular_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %15, align 8
  %16 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)** %12 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_regular_sharp_scaled_c, void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_sharp_regular_scaled_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %16, align 8
  %17 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 0, i64 4
  %18 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 1, i64 4
  %19 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 2, i64 4
  %20 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 3, i64 4
  %21 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32)** %17 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_sharp_smooth_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_sharp_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>* %21, align 8
  %22 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)** %18 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_sharp_smooth_scaled_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_sharp_scaled_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %22, align 8
  %23 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %19 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_sharp_smooth_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_sharp_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %23, align 8
  %24 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)** %20 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_sharp_smooth_scaled_c, void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_sharp_scaled_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %24, align 8
  %25 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 0, i64 6
  %26 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 1, i64 6
  %27 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 2, i64 6
  %28 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 3, i64 6
  %29 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32)** %25 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_smooth_regular_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_smooth_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>* %29, align 8
  %30 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)** %26 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_smooth_regular_scaled_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_smooth_scaled_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %30, align 8
  %31 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %27 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_smooth_regular_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_smooth_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %31, align 8
  %32 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)** %28 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_smooth_regular_scaled_c, void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_smooth_scaled_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %32, align 8
  %33 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 0, i64 8
  %34 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 1, i64 8
  %35 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 2, i64 8
  %36 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 3, i64 8
  %37 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32)** %33 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_8tap_smooth_sharp_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32)* @put_bilin_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32)*>* %37, align 8
  %38 = bitcast void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)** %34 to <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_8tap_smooth_sharp_scaled_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)* @put_bilin_scaled_c>, <2 x void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %38, align 8
  %39 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %35 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_8tap_smooth_sharp_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @prep_bilin_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %39, align 8
  %40 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)** %36 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_8tap_smooth_sharp_scaled_c, void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)* @prep_bilin_scaled_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32, i32, i32)*>* %40, align 8
  %41 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 4
  store void (i8*, i64, i16*, i16*, i32, i32)* @avg_c, void (i8*, i64, i16*, i16*, i32, i32)** %41, align 8
  %42 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 5
  store void (i8*, i64, i16*, i16*, i32, i32, i32)* @w_avg_c, void (i8*, i64, i16*, i16*, i32, i32, i32)** %42, align 8
  %43 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 6
  store void (i8*, i64, i16*, i16*, i32, i32, i8*)* @mask_c, void (i8*, i64, i16*, i16*, i32, i32, i8*)** %43, align 8
  %44 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 8
  store void (i8*, i64, i8*, i32, i32, i8*)* @blend_c, void (i8*, i64, i8*, i32, i32, i8*)** %44, align 8
  %45 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 9
  %46 = bitcast void (i8*, i64, i8*, i32, i32)** %45 to <2 x void (i8*, i64, i8*, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32)*> <void (i8*, i64, i8*, i32, i32)* @blend_v_c, void (i8*, i64, i8*, i32, i32)* @blend_h_c>, <2 x void (i8*, i64, i8*, i32, i32)*>* %46, align 8
  %47 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 7, i64 0
  %48 = bitcast void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)** %47 to <2 x void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)*>*
  store <2 x void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)*> <void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)* @w_mask_444_c, void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)* @w_mask_422_c>, <2 x void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)*>* %48, align 8
  %49 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 7, i64 2
  store void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)* @w_mask_420_c, void (i8*, i64, i16*, i16*, i32, i32, i8*, i32)** %49, align 8
  %50 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 11
  store void (i8*, i64, i8*, i64, i16*, i32, i32)* @warp_affine_8x8_c, void (i8*, i64, i8*, i64, i16*, i32, i32)** %50, align 8
  %51 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 12
  store void (i16*, i64, i8*, i64, i16*, i32, i32)* @warp_affine_8x8t_c, void (i16*, i64, i8*, i64, i16*, i32, i32)** %51, align 8
  %52 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 13
  store void (i64, i64, i64, i64, i64, i64, i8*, i64, i8*, i64)* @emu_edge_c, void (i64, i64, i64, i64, i64, i64, i8*, i64, i8*, i64)** %52, align 8
  %53 = getelementptr inbounds %struct.Dav1dMCDSPContext, %struct.Dav1dMCDSPContext* %0, i64 0, i32 14
  store void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32)* @resize_c, void (i8*, i64, i8*, i64, i32, i32, i32, i32, i32)** %53, align 8
  tail call void @dav1d_mc_dsp_init_x86_8bpc(%struct.Dav1dMCDSPContext* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_smooth_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_smooth_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_smooth_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_smooth_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_sharp_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_regular_sharp_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_sharp_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_regular_sharp_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_regular_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_regular_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_regular_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_regular_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_smooth_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_smooth_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_smooth_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_smooth_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_sharp_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_sharp_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_regular_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_regular_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_regular_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_regular_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_sharp_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_8tap_smooth_sharp_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @put_8tap_scaled_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_sharp_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_8tap_smooth_sharp_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @prep_8tap_scaled_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 9)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_bilin_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  %9 = alloca [16512 x i16], align 16
  %10 = icmp eq i32 %6, 0
  %11 = icmp ne i32 %7, 0
  br i1 %10, label %231, label %12

12:                                               ; preds = %8
  br i1 %11, label %22, label %13

13:                                               ; preds = %12
  %14 = icmp sgt i32 %4, 0
  %15 = zext i32 %4 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %4, 16
  %18 = and i64 %15, 4294967280
  %19 = insertelement <16 x i32> undef, i32 %6, i32 0
  %20 = shufflevector <16 x i32> %19, <16 x i32> undef, <16 x i32> zeroinitializer
  %21 = icmp eq i64 %18, %15
  br label %156

22:                                               ; preds = %12
  %23 = bitcast [16512 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33024, i8* nonnull %23) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 33024, i1 false)
  %24 = getelementptr inbounds [16512 x i16], [16512 x i16]* %9, i64 0, i64 0
  %25 = add nsw i32 %5, 1
  %26 = icmp sgt i32 %4, 0
  %27 = zext i32 %4 to i64
  %28 = and i64 %27, 1
  %29 = icmp eq i32 %4, 1
  %30 = sub nsw i64 %27, %28
  %31 = icmp eq i64 %28, 0
  br label %32

32:                                               ; preds = %53, %22
  %33 = phi i8* [ %2, %22 ], [ %55, %53 ]
  %34 = phi i16* [ %24, %22 ], [ %54, %53 ]
  %35 = phi i32 [ %25, %22 ], [ %56, %53 ]
  br i1 %26, label %36, label %53

36:                                               ; preds = %32
  %37 = load i8, i8* %33, align 1
  br i1 %29, label %38, label %65

38:                                               ; preds = %65, %36
  %39 = phi i8 [ %37, %36 ], [ %84, %65 ]
  %40 = phi i64 [ 0, %36 ], [ %82, %65 ]
  br i1 %31, label %53, label %41

41:                                               ; preds = %38
  %42 = zext i8 %39 to i32
  %43 = shl nuw nsw i32 %42, 4
  %44 = add nuw nsw i64 %40, 1
  %45 = getelementptr inbounds i8, i8* %33, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %47, %42
  %49 = mul nsw i32 %48, %6
  %50 = add nsw i32 %49, %43
  %51 = trunc i32 %50 to i16
  %52 = getelementptr inbounds i16, i16* %34, i64 %40
  store i16 %51, i16* %52, align 2
  br label %53

53:                                               ; preds = %41, %38, %32
  %54 = getelementptr inbounds i16, i16* %34, i64 128
  %55 = getelementptr inbounds i8, i8* %33, i64 %3
  %56 = add nsw i32 %35, -1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %32

58:                                               ; preds = %53
  %59 = zext i32 %4 to i64
  %60 = icmp ult i32 %4, 8
  %61 = and i64 %59, 4294967288
  %62 = insertelement <8 x i32> undef, i32 %7, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = icmp eq i64 %61, %59
  br label %93

65:                                               ; preds = %36, %65
  %66 = phi i8 [ %84, %65 ], [ %37, %36 ]
  %67 = phi i64 [ %82, %65 ], [ 0, %36 ]
  %68 = phi i64 [ %91, %65 ], [ %30, %36 ]
  %69 = zext i8 %66 to i32
  %70 = shl nuw nsw i32 %69, 4
  %71 = or i64 %67, 1
  %72 = getelementptr inbounds i8, i8* %33, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = sub nsw i32 %74, %69
  %76 = mul nsw i32 %75, %6
  %77 = add nsw i32 %76, %70
  %78 = trunc i32 %77 to i16
  %79 = getelementptr inbounds i16, i16* %34, i64 %67
  store i16 %78, i16* %79, align 2
  %80 = zext i8 %73 to i32
  %81 = shl nuw nsw i32 %80, 4
  %82 = add nuw nsw i64 %67, 2
  %83 = getelementptr inbounds i8, i8* %33, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = sub nsw i32 %85, %80
  %87 = mul nsw i32 %86, %6
  %88 = add nsw i32 %87, %81
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds i16, i16* %34, i64 %71
  store i16 %89, i16* %90, align 2
  %91 = add i64 %68, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %38, label %65

93:                                               ; preds = %58, %127
  %94 = phi i32 [ %130, %127 ], [ %5, %58 ]
  %95 = phi i16* [ %128, %127 ], [ %24, %58 ]
  %96 = phi i8* [ %129, %127 ], [ %0, %58 ]
  br i1 %26, label %97, label %127

97:                                               ; preds = %93
  br i1 %60, label %98, label %100

98:                                               ; preds = %126, %97
  %99 = phi i64 [ 0, %97 ], [ %61, %126 ]
  br label %132

100:                                              ; preds = %97, %100
  %101 = phi i64 [ %124, %100 ], [ 0, %97 ]
  %102 = getelementptr inbounds i16, i16* %95, i64 %101
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = sext <8 x i16> %104 to <8 x i32>
  %106 = shl nsw <8 x i32> %105, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %107 = add nuw nsw i64 %101, 128
  %108 = getelementptr inbounds i16, i16* %95, i64 %107
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2
  %111 = sext <8 x i16> %110 to <8 x i32>
  %112 = sub nsw <8 x i32> %111, %105
  %113 = mul nsw <8 x i32> %112, %63
  %114 = add nsw <8 x i32> %106, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %115 = add <8 x i32> %114, %113
  %116 = ashr <8 x i32> %115, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %117 = icmp slt <8 x i32> %116, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %118 = select <8 x i1> %117, <8 x i32> %116, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = icmp sgt <8 x i32> %118, zeroinitializer
  %120 = select <8 x i1> %119, <8 x i32> %118, <8 x i32> zeroinitializer
  %121 = trunc <8 x i32> %120 to <8 x i8>
  %122 = getelementptr inbounds i8, i8* %96, i64 %101
  %123 = bitcast i8* %122 to <8 x i8>*
  store <8 x i8> %121, <8 x i8>* %123, align 1
  %124 = add i64 %101, 8
  %125 = icmp eq i64 %124, %61
  br i1 %125, label %126, label %100, !llvm.loop !2

126:                                              ; preds = %100
  br i1 %64, label %127, label %98

127:                                              ; preds = %132, %126, %93
  %128 = getelementptr inbounds i16, i16* %95, i64 128
  %129 = getelementptr inbounds i8, i8* %96, i64 %1
  %130 = add nsw i32 %94, -1
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %155, label %93

132:                                              ; preds = %98, %132
  %133 = phi i64 [ %153, %132 ], [ %99, %98 ]
  %134 = getelementptr inbounds i16, i16* %95, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = shl nsw i32 %136, 4
  %138 = add nuw nsw i64 %133, 128
  %139 = getelementptr inbounds i16, i16* %95, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = sext i16 %140 to i32
  %142 = sub nsw i32 %141, %136
  %143 = mul nsw i32 %142, %7
  %144 = add nsw i32 %137, 128
  %145 = add i32 %144, %143
  %146 = ashr i32 %145, 8
  %147 = icmp slt i32 %146, 255
  %148 = select i1 %147, i32 %146, i32 255
  %149 = icmp sgt i32 %148, 0
  %150 = select i1 %149, i32 %148, i32 0
  %151 = trunc i32 %150 to i8
  %152 = getelementptr inbounds i8, i8* %96, i64 %133
  store i8 %151, i8* %152, align 1
  %153 = add nuw nsw i64 %133, 1
  %154 = icmp eq i64 %153, %59
  br i1 %154, label %127, label %132, !llvm.loop !4

155:                                              ; preds = %127
  call void @llvm.lifetime.end.p0i8(i64 33024, i8* nonnull %23) #7
  br label %326

156:                                              ; preds = %13, %203
  %157 = phi i64 [ 0, %13 ], [ %208, %203 ]
  %158 = phi i32 [ %5, %13 ], [ %206, %203 ]
  %159 = phi i8* [ %2, %13 ], [ %205, %203 ]
  %160 = phi i8* [ %0, %13 ], [ %204, %203 ]
  %161 = mul i64 %157, %1
  %162 = getelementptr i8, i8* %0, i64 %161
  %163 = add i64 %161, %15
  %164 = getelementptr i8, i8* %0, i64 %163
  %165 = mul i64 %157, %3
  %166 = getelementptr i8, i8* %2, i64 %165
  %167 = add i64 %16, %165
  %168 = getelementptr i8, i8* %2, i64 %167
  br i1 %14, label %169, label %203

169:                                              ; preds = %156
  br i1 %17, label %170, label %172

170:                                              ; preds = %202, %172, %169
  %171 = phi i64 [ 0, %172 ], [ 0, %169 ], [ %18, %202 ]
  br label %209

172:                                              ; preds = %169
  %173 = icmp ult i8* %162, %168
  %174 = icmp ult i8* %166, %164
  %175 = and i1 %173, %174
  br i1 %175, label %170, label %176

176:                                              ; preds = %172, %176
  %177 = phi i64 [ %200, %176 ], [ 0, %172 ]
  %178 = getelementptr inbounds i8, i8* %159, i64 %177
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1, !alias.scope !6
  %181 = zext <16 x i8> %180 to <16 x i32>
  %182 = shl nuw nsw <16 x i32> %181, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %183 = or i64 %177, 1
  %184 = getelementptr inbounds i8, i8* %159, i64 %183
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !6
  %187 = zext <16 x i8> %186 to <16 x i32>
  %188 = sub nsw <16 x i32> %187, %181
  %189 = mul nsw <16 x i32> %188, %20
  %190 = or <16 x i32> %182, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %191 = add <16 x i32> %190, %189
  %192 = ashr <16 x i32> %191, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %193 = icmp slt <16 x i32> %192, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %194 = select <16 x i1> %193, <16 x i32> %192, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %195 = icmp sgt <16 x i32> %194, zeroinitializer
  %196 = select <16 x i1> %195, <16 x i32> %194, <16 x i32> zeroinitializer
  %197 = trunc <16 x i32> %196 to <16 x i8>
  %198 = getelementptr inbounds i8, i8* %160, i64 %177
  %199 = bitcast i8* %198 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %199, align 1, !alias.scope !9, !noalias !6
  %200 = add i64 %177, 16
  %201 = icmp eq i64 %200, %18
  br i1 %201, label %202, label %176, !llvm.loop !11

202:                                              ; preds = %176
  br i1 %21, label %203, label %170

203:                                              ; preds = %209, %202, %156
  %204 = getelementptr inbounds i8, i8* %160, i64 %1
  %205 = getelementptr inbounds i8, i8* %159, i64 %3
  %206 = add nsw i32 %158, -1
  %207 = icmp eq i32 %206, 0
  %208 = add i64 %157, 1
  br i1 %207, label %326, label %156

209:                                              ; preds = %170, %209
  %210 = phi i64 [ %215, %209 ], [ %171, %170 ]
  %211 = getelementptr inbounds i8, i8* %159, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = shl nuw nsw i32 %213, 4
  %215 = add nuw nsw i64 %210, 1
  %216 = getelementptr inbounds i8, i8* %159, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = sub nsw i32 %218, %213
  %220 = mul nsw i32 %219, %6
  %221 = or i32 %214, 8
  %222 = add i32 %221, %220
  %223 = ashr i32 %222, 4
  %224 = icmp slt i32 %223, 255
  %225 = select i1 %224, i32 %223, i32 255
  %226 = icmp sgt i32 %225, 0
  %227 = select i1 %226, i32 %225, i32 0
  %228 = trunc i32 %227 to i8
  %229 = getelementptr inbounds i8, i8* %160, i64 %210
  store i8 %228, i8* %229, align 1
  %230 = icmp eq i64 %215, %15
  br i1 %230, label %203, label %209, !llvm.loop !12

231:                                              ; preds = %8
  br i1 %11, label %232, label %325

232:                                              ; preds = %231
  %233 = icmp sgt i32 %4, 0
  %234 = zext i32 %4 to i64
  %235 = add i64 %234, %3
  %236 = icmp ult i32 %4, 16
  %237 = and i64 %234, 4294967280
  %238 = insertelement <16 x i32> undef, i32 %7, i32 0
  %239 = shufflevector <16 x i32> %238, <16 x i32> undef, <16 x i32> zeroinitializer
  %240 = icmp eq i64 %237, %234
  br label %241

241:                                              ; preds = %232, %296
  %242 = phi i64 [ 0, %232 ], [ %301, %296 ]
  %243 = phi i32 [ %5, %232 ], [ %299, %296 ]
  %244 = phi i8* [ %2, %232 ], [ %298, %296 ]
  %245 = phi i8* [ %0, %232 ], [ %297, %296 ]
  %246 = mul i64 %242, %1
  %247 = getelementptr i8, i8* %0, i64 %246
  %248 = add i64 %246, %234
  %249 = getelementptr i8, i8* %0, i64 %248
  %250 = mul i64 %242, %3
  %251 = add i64 %250, %3
  %252 = getelementptr i8, i8* %2, i64 %251
  %253 = add i64 %235, %250
  %254 = getelementptr i8, i8* %2, i64 %253
  %255 = getelementptr i8, i8* %2, i64 %250
  %256 = add i64 %250, %234
  %257 = getelementptr i8, i8* %2, i64 %256
  br i1 %233, label %258, label %296

258:                                              ; preds = %241
  br i1 %236, label %259, label %261

259:                                              ; preds = %295, %261, %258
  %260 = phi i64 [ 0, %261 ], [ 0, %258 ], [ %237, %295 ]
  br label %302

261:                                              ; preds = %258
  %262 = icmp ult i8* %247, %254
  %263 = icmp ult i8* %252, %249
  %264 = and i1 %262, %263
  %265 = icmp ult i8* %247, %257
  %266 = icmp ult i8* %255, %249
  %267 = and i1 %265, %266
  %268 = or i1 %264, %267
  br i1 %268, label %259, label %269

269:                                              ; preds = %261, %269
  %270 = phi i64 [ %293, %269 ], [ 0, %261 ]
  %271 = getelementptr inbounds i8, i8* %244, i64 %270
  %272 = bitcast i8* %271 to <16 x i8>*
  %273 = load <16 x i8>, <16 x i8>* %272, align 1, !alias.scope !13
  %274 = zext <16 x i8> %273 to <16 x i32>
  %275 = shl nuw nsw <16 x i32> %274, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %276 = add nsw i64 %270, %3
  %277 = getelementptr inbounds i8, i8* %244, i64 %276
  %278 = bitcast i8* %277 to <16 x i8>*
  %279 = load <16 x i8>, <16 x i8>* %278, align 1, !alias.scope !16
  %280 = zext <16 x i8> %279 to <16 x i32>
  %281 = sub nsw <16 x i32> %280, %274
  %282 = mul nsw <16 x i32> %281, %239
  %283 = or <16 x i32> %275, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %284 = add <16 x i32> %283, %282
  %285 = ashr <16 x i32> %284, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %286 = icmp slt <16 x i32> %285, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %287 = select <16 x i1> %286, <16 x i32> %285, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %288 = icmp sgt <16 x i32> %287, zeroinitializer
  %289 = select <16 x i1> %288, <16 x i32> %287, <16 x i32> zeroinitializer
  %290 = trunc <16 x i32> %289 to <16 x i8>
  %291 = getelementptr inbounds i8, i8* %245, i64 %270
  %292 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %290, <16 x i8>* %292, align 1, !alias.scope !18, !noalias !20
  %293 = add i64 %270, 16
  %294 = icmp eq i64 %293, %237
  br i1 %294, label %295, label %269, !llvm.loop !21

295:                                              ; preds = %269
  br i1 %240, label %296, label %259

296:                                              ; preds = %302, %295, %241
  %297 = getelementptr inbounds i8, i8* %245, i64 %1
  %298 = getelementptr inbounds i8, i8* %244, i64 %3
  %299 = add nsw i32 %243, -1
  %300 = icmp eq i32 %299, 0
  %301 = add i64 %242, 1
  br i1 %300, label %326, label %241

302:                                              ; preds = %259, %302
  %303 = phi i64 [ %323, %302 ], [ %260, %259 ]
  %304 = getelementptr inbounds i8, i8* %244, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = shl nuw nsw i32 %306, 4
  %308 = add nsw i64 %303, %3
  %309 = getelementptr inbounds i8, i8* %244, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = sub nsw i32 %311, %306
  %313 = mul nsw i32 %312, %7
  %314 = or i32 %307, 8
  %315 = add i32 %314, %313
  %316 = ashr i32 %315, 4
  %317 = icmp slt i32 %316, 255
  %318 = select i1 %317, i32 %316, i32 255
  %319 = icmp sgt i32 %318, 0
  %320 = select i1 %319, i32 %318, i32 0
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds i8, i8* %245, i64 %303
  store i8 %321, i8* %322, align 1
  %323 = add nuw nsw i64 %303, 1
  %324 = icmp eq i64 %323, %234
  br i1 %324, label %296, label %302, !llvm.loop !22

325:                                              ; preds = %231
  tail call fastcc void @put_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5)
  br label %326

326:                                              ; preds = %203, %296, %325, %155
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @put_bilin_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  %11 = alloca [32896 x i16], align 16
  %12 = add nsw i32 %5, -1
  %13 = mul nsw i32 %12, %9
  %14 = add nsw i32 %13, %7
  %15 = ashr i32 %14, 10
  %16 = add nsw i32 %15, 2
  %17 = bitcast [32896 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 65792, i8* nonnull %17) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 65792, i1 false)
  %18 = getelementptr inbounds [32896 x i16], [32896 x i16]* %11, i64 0, i64 0
  %19 = icmp sgt i32 %4, 0
  %20 = zext i32 %4 to i64
  br label %21

21:                                               ; preds = %51, %10
  %22 = phi i8* [ %2, %10 ], [ %53, %51 ]
  %23 = phi i32 [ %16, %10 ], [ %54, %51 ]
  %24 = phi i16* [ %18, %10 ], [ %52, %51 ]
  br i1 %19, label %25, label %51

25:                                               ; preds = %21, %25
  %26 = phi i64 [ %49, %25 ], [ 0, %21 ]
  %27 = phi i32 [ %47, %25 ], [ 0, %21 ]
  %28 = phi i32 [ %48, %25 ], [ %6, %21 ]
  %29 = sext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %22, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = shl nuw nsw i32 %32, 4
  %34 = ashr i32 %28, 6
  %35 = add nsw i32 %27, 1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %22, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = sub nsw i32 %39, %32
  %41 = mul nsw i32 %40, %34
  %42 = add nsw i32 %41, %33
  %43 = trunc i32 %42 to i16
  %44 = getelementptr inbounds i16, i16* %24, i64 %26
  store i16 %43, i16* %44, align 2
  %45 = add nsw i32 %28, %8
  %46 = ashr i32 %45, 10
  %47 = add nsw i32 %46, %27
  %48 = and i32 %45, 1023
  %49 = add nuw nsw i64 %26, 1
  %50 = icmp eq i64 %49, %20
  br i1 %50, label %51, label %25

51:                                               ; preds = %25, %21
  %52 = getelementptr inbounds i16, i16* %24, i64 128
  %53 = getelementptr inbounds i8, i8* %22, i64 %3
  %54 = add nsw i32 %23, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %21

56:                                               ; preds = %51
  %57 = zext i32 %4 to i64
  %58 = icmp ult i32 %4, 8
  %59 = and i64 %57, 4294967288
  %60 = icmp eq i64 %59, %57
  br label %61

61:                                               ; preds = %56, %123
  %62 = phi i32 [ %129, %123 ], [ %7, %56 ]
  %63 = phi i32 [ %131, %123 ], [ %5, %56 ]
  %64 = phi i8* [ %130, %123 ], [ %0, %56 ]
  %65 = phi i16* [ %128, %123 ], [ %18, %56 ]
  br i1 %19, label %66, label %123

66:                                               ; preds = %61
  %67 = ashr i32 %62, 6
  br i1 %58, label %98, label %68

68:                                               ; preds = %66
  %69 = insertelement <8 x i32> undef, i32 %67, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %71

71:                                               ; preds = %71, %68
  %72 = phi i64 [ 0, %68 ], [ %95, %71 ]
  %73 = getelementptr inbounds i16, i16* %65, i64 %72
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sext <8 x i16> %75 to <8 x i32>
  %77 = shl nsw <8 x i32> %76, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %78 = add nuw nsw i64 %72, 128
  %79 = getelementptr inbounds i16, i16* %65, i64 %78
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = sext <8 x i16> %81 to <8 x i32>
  %83 = sub nsw <8 x i32> %82, %76
  %84 = mul nsw <8 x i32> %83, %70
  %85 = add nsw <8 x i32> %77, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %86 = add <8 x i32> %85, %84
  %87 = ashr <8 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = icmp slt <8 x i32> %87, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = select <8 x i1> %88, <8 x i32> %87, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %90 = icmp sgt <8 x i32> %89, zeroinitializer
  %91 = select <8 x i1> %90, <8 x i32> %89, <8 x i32> zeroinitializer
  %92 = trunc <8 x i32> %91 to <8 x i8>
  %93 = getelementptr inbounds i8, i8* %64, i64 %72
  %94 = bitcast i8* %93 to <8 x i8>*
  store <8 x i8> %92, <8 x i8>* %94, align 1
  %95 = add i64 %72, 8
  %96 = icmp eq i64 %95, %59
  br i1 %96, label %97, label %71, !llvm.loop !23

97:                                               ; preds = %71
  br i1 %60, label %123, label %98

98:                                               ; preds = %97, %66
  %99 = phi i64 [ 0, %66 ], [ %59, %97 ]
  br label %100

100:                                              ; preds = %98, %100
  %101 = phi i64 [ %121, %100 ], [ %99, %98 ]
  %102 = getelementptr inbounds i16, i16* %65, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = shl nsw i32 %104, 4
  %106 = add nuw nsw i64 %101, 128
  %107 = getelementptr inbounds i16, i16* %65, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %108 to i32
  %110 = sub nsw i32 %109, %104
  %111 = mul nsw i32 %110, %67
  %112 = add nsw i32 %105, 128
  %113 = add i32 %112, %111
  %114 = ashr i32 %113, 8
  %115 = icmp slt i32 %114, 255
  %116 = select i1 %115, i32 %114, i32 255
  %117 = icmp sgt i32 %116, 0
  %118 = select i1 %117, i32 %116, i32 0
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds i8, i8* %64, i64 %101
  store i8 %119, i8* %120, align 1
  %121 = add nuw nsw i64 %101, 1
  %122 = icmp eq i64 %121, %57
  br i1 %122, label %123, label %100, !llvm.loop !24

123:                                              ; preds = %100, %97, %61
  %124 = add nsw i32 %62, %9
  %125 = ashr i32 %124, 10
  %126 = shl nsw i32 %125, 7
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %65, i64 %127
  %129 = and i32 %124, 1023
  %130 = getelementptr inbounds i8, i8* %64, i64 %1
  %131 = add nsw i32 %63, -1
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %61

133:                                              ; preds = %123
  call void @llvm.lifetime.end.p0i8(i64 65792, i8* nonnull %17) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_bilin_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  %8 = alloca [16512 x i16], align 16
  %9 = icmp eq i32 %5, 0
  %10 = icmp ne i32 %6, 0
  br i1 %9, label %295, label %11

11:                                               ; preds = %7
  br i1 %10, label %33, label %12

12:                                               ; preds = %11
  %13 = sext i32 %3 to i64
  %14 = icmp sgt i32 %3, 0
  %15 = zext i32 %3 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %15, 4294967288
  %18 = add nsw i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i32 %3, 8
  %22 = and i64 %15, 4294967288
  %23 = insertelement <8 x i32> undef, i32 %5, i32 0
  %24 = shufflevector <8 x i32> %23, <8 x i32> undef, <8 x i32> zeroinitializer
  %25 = and i64 %20, 1
  %26 = icmp eq i64 %18, 0
  %27 = sub nuw nsw i64 %20, %25
  %28 = icmp eq i64 %25, 0
  %29 = icmp eq i64 %22, %15
  %30 = and i64 %15, 1
  %31 = icmp eq i64 %30, 0
  %32 = sub nsw i64 0, %15
  br label %160

33:                                               ; preds = %11
  %34 = bitcast [16512 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 33024, i8* nonnull %34) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 33024, i1 false)
  %35 = getelementptr inbounds [16512 x i16], [16512 x i16]* %8, i64 0, i64 0
  %36 = add nsw i32 %4, 1
  %37 = icmp sgt i32 %3, 0
  %38 = zext i32 %3 to i64
  %39 = and i64 %38, 1
  %40 = icmp eq i32 %3, 1
  %41 = sub nsw i64 %38, %39
  %42 = icmp eq i64 %39, 0
  br label %43

43:                                               ; preds = %64, %33
  %44 = phi i8* [ %1, %33 ], [ %66, %64 ]
  %45 = phi i16* [ %35, %33 ], [ %65, %64 ]
  %46 = phi i32 [ %36, %33 ], [ %67, %64 ]
  br i1 %37, label %47, label %64

47:                                               ; preds = %43
  %48 = load i8, i8* %44, align 1
  br i1 %40, label %49, label %77

49:                                               ; preds = %77, %47
  %50 = phi i8 [ %48, %47 ], [ %96, %77 ]
  %51 = phi i64 [ 0, %47 ], [ %94, %77 ]
  br i1 %42, label %64, label %52

52:                                               ; preds = %49
  %53 = zext i8 %50 to i32
  %54 = shl nuw nsw i32 %53, 4
  %55 = add nuw nsw i64 %51, 1
  %56 = getelementptr inbounds i8, i8* %44, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = sub nsw i32 %58, %53
  %60 = mul nsw i32 %59, %5
  %61 = add nsw i32 %60, %54
  %62 = trunc i32 %61 to i16
  %63 = getelementptr inbounds i16, i16* %45, i64 %51
  store i16 %62, i16* %63, align 2
  br label %64

64:                                               ; preds = %52, %49, %43
  %65 = getelementptr inbounds i16, i16* %45, i64 128
  %66 = getelementptr inbounds i8, i8* %44, i64 %2
  %67 = add nsw i32 %46, -1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %43

69:                                               ; preds = %64
  %70 = sext i32 %3 to i64
  %71 = zext i32 %3 to i64
  %72 = icmp ult i32 %3, 8
  %73 = and i64 %71, 4294967288
  %74 = insertelement <8 x i32> undef, i32 %6, i32 0
  %75 = shufflevector <8 x i32> %74, <8 x i32> undef, <8 x i32> zeroinitializer
  %76 = icmp eq i64 %73, %71
  br label %105

77:                                               ; preds = %47, %77
  %78 = phi i8 [ %96, %77 ], [ %48, %47 ]
  %79 = phi i64 [ %94, %77 ], [ 0, %47 ]
  %80 = phi i64 [ %103, %77 ], [ %41, %47 ]
  %81 = zext i8 %78 to i32
  %82 = shl nuw nsw i32 %81, 4
  %83 = or i64 %79, 1
  %84 = getelementptr inbounds i8, i8* %44, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = sub nsw i32 %86, %81
  %88 = mul nsw i32 %87, %5
  %89 = add nsw i32 %88, %82
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %45, i64 %79
  store i16 %90, i16* %91, align 2
  %92 = zext i8 %85 to i32
  %93 = shl nuw nsw i32 %92, 4
  %94 = add nuw nsw i64 %79, 2
  %95 = getelementptr inbounds i8, i8* %44, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = sub nsw i32 %97, %92
  %99 = mul nsw i32 %98, %5
  %100 = add nsw i32 %99, %93
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %45, i64 %83
  store i16 %101, i16* %102, align 2
  %103 = add i64 %80, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %49, label %77

105:                                              ; preds = %69, %135
  %106 = phi i32 [ %138, %135 ], [ %4, %69 ]
  %107 = phi i16* [ %137, %135 ], [ %0, %69 ]
  %108 = phi i16* [ %136, %135 ], [ %35, %69 ]
  br i1 %37, label %109, label %135

109:                                              ; preds = %105
  br i1 %72, label %110, label %112

110:                                              ; preds = %134, %109
  %111 = phi i64 [ 0, %109 ], [ %73, %134 ]
  br label %140

112:                                              ; preds = %109, %112
  %113 = phi i64 [ %132, %112 ], [ 0, %109 ]
  %114 = getelementptr inbounds i16, i16* %108, i64 %113
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = shl nsw <8 x i32> %117, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %119 = add nuw nsw i64 %113, 128
  %120 = getelementptr inbounds i16, i16* %108, i64 %119
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2
  %123 = sext <8 x i16> %122 to <8 x i32>
  %124 = sub nsw <8 x i32> %123, %117
  %125 = mul nsw <8 x i32> %124, %75
  %126 = or <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %127 = add <8 x i32> %126, %125
  %128 = lshr <8 x i32> %127, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %129 = trunc <8 x i32> %128 to <8 x i16>
  %130 = getelementptr inbounds i16, i16* %107, i64 %113
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %131, align 2
  %132 = add i64 %113, 8
  %133 = icmp eq i64 %132, %73
  br i1 %133, label %134, label %112, !llvm.loop !25

134:                                              ; preds = %112
  br i1 %76, label %135, label %110

135:                                              ; preds = %140, %134, %105
  %136 = getelementptr inbounds i16, i16* %108, i64 128
  %137 = getelementptr inbounds i16, i16* %107, i64 %70
  %138 = add nsw i32 %106, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %159, label %105

140:                                              ; preds = %110, %140
  %141 = phi i64 [ %157, %140 ], [ %111, %110 ]
  %142 = getelementptr inbounds i16, i16* %108, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = shl nsw i32 %144, 4
  %146 = add nuw nsw i64 %141, 128
  %147 = getelementptr inbounds i16, i16* %108, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = sext i16 %148 to i32
  %150 = sub nsw i32 %149, %144
  %151 = mul nsw i32 %150, %6
  %152 = or i32 %145, 8
  %153 = add i32 %152, %151
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i16
  %156 = getelementptr inbounds i16, i16* %107, i64 %141
  store i16 %155, i16* %156, align 2
  %157 = add nuw nsw i64 %141, 1
  %158 = icmp eq i64 %157, %71
  br i1 %158, label %135, label %140, !llvm.loop !26

159:                                              ; preds = %135
  call void @llvm.lifetime.end.p0i8(i64 33024, i8* nonnull %34) #7
  br label %464

160:                                              ; preds = %12, %260
  %161 = phi i64 [ 0, %12 ], [ %265, %260 ]
  %162 = phi i32 [ %4, %12 ], [ %263, %260 ]
  %163 = phi i8* [ %1, %12 ], [ %262, %260 ]
  %164 = phi i16* [ %0, %12 ], [ %261, %260 ]
  %165 = mul i64 %161, %13
  %166 = getelementptr i16, i16* %0, i64 %165
  %167 = bitcast i16* %166 to i8*
  %168 = add i64 %165, %15
  %169 = getelementptr i16, i16* %0, i64 %168
  %170 = bitcast i16* %169 to i8*
  %171 = mul i64 %161, %2
  %172 = getelementptr i8, i8* %1, i64 %171
  %173 = add i64 %16, %171
  %174 = getelementptr i8, i8* %1, i64 %173
  br i1 %14, label %175, label %260

175:                                              ; preds = %160
  br i1 %21, label %176, label %196

176:                                              ; preds = %259, %196, %175
  %177 = phi i64 [ 0, %196 ], [ 0, %175 ], [ %22, %259 ]
  %178 = xor i64 %177, -1
  br i1 %31, label %193, label %179

179:                                              ; preds = %176
  %180 = getelementptr inbounds i8, i8* %163, i64 %177
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = shl nuw nsw i32 %182, 4
  %184 = or i64 %177, 1
  %185 = getelementptr inbounds i8, i8* %163, i64 %184
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = sub nsw i32 %187, %182
  %189 = mul nsw i32 %188, %5
  %190 = add nsw i32 %189, %183
  %191 = trunc i32 %190 to i16
  %192 = getelementptr inbounds i16, i16* %164, i64 %177
  store i16 %191, i16* %192, align 2
  br label %193

193:                                              ; preds = %179, %176
  %194 = phi i64 [ %184, %179 ], [ %177, %176 ]
  %195 = icmp eq i64 %178, %32
  br i1 %195, label %260, label %266

196:                                              ; preds = %175
  %197 = icmp ugt i8* %174, %167
  %198 = icmp ult i8* %172, %170
  %199 = and i1 %197, %198
  br i1 %199, label %176, label %200

200:                                              ; preds = %196
  br i1 %26, label %240, label %201

201:                                              ; preds = %200, %201
  %202 = phi i64 [ %237, %201 ], [ 0, %200 ]
  %203 = phi i64 [ %238, %201 ], [ %27, %200 ]
  %204 = getelementptr inbounds i8, i8* %163, i64 %202
  %205 = bitcast i8* %204 to <8 x i8>*
  %206 = load <8 x i8>, <8 x i8>* %205, align 1, !alias.scope !27
  %207 = zext <8 x i8> %206 to <8 x i32>
  %208 = shl nuw nsw <8 x i32> %207, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %209 = or i64 %202, 1
  %210 = getelementptr inbounds i8, i8* %163, i64 %209
  %211 = bitcast i8* %210 to <8 x i8>*
  %212 = load <8 x i8>, <8 x i8>* %211, align 1, !alias.scope !27
  %213 = zext <8 x i8> %212 to <8 x i32>
  %214 = sub nsw <8 x i32> %213, %207
  %215 = mul nsw <8 x i32> %214, %24
  %216 = add nsw <8 x i32> %215, %208
  %217 = trunc <8 x i32> %216 to <8 x i16>
  %218 = getelementptr inbounds i16, i16* %164, i64 %202
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %219, align 2, !alias.scope !30, !noalias !27
  %220 = or i64 %202, 8
  %221 = getelementptr inbounds i8, i8* %163, i64 %220
  %222 = bitcast i8* %221 to <8 x i8>*
  %223 = load <8 x i8>, <8 x i8>* %222, align 1, !alias.scope !27
  %224 = zext <8 x i8> %223 to <8 x i32>
  %225 = shl nuw nsw <8 x i32> %224, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %226 = or i64 %202, 9
  %227 = getelementptr inbounds i8, i8* %163, i64 %226
  %228 = bitcast i8* %227 to <8 x i8>*
  %229 = load <8 x i8>, <8 x i8>* %228, align 1, !alias.scope !27
  %230 = zext <8 x i8> %229 to <8 x i32>
  %231 = sub nsw <8 x i32> %230, %224
  %232 = mul nsw <8 x i32> %231, %24
  %233 = add nsw <8 x i32> %232, %225
  %234 = trunc <8 x i32> %233 to <8 x i16>
  %235 = getelementptr inbounds i16, i16* %164, i64 %220
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %236, align 2, !alias.scope !30, !noalias !27
  %237 = add i64 %202, 16
  %238 = add i64 %203, -2
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %201, !llvm.loop !32

240:                                              ; preds = %201, %200
  %241 = phi i64 [ 0, %200 ], [ %237, %201 ]
  br i1 %28, label %259, label %242

242:                                              ; preds = %240
  %243 = getelementptr inbounds i8, i8* %163, i64 %241
  %244 = bitcast i8* %243 to <8 x i8>*
  %245 = load <8 x i8>, <8 x i8>* %244, align 1, !alias.scope !27
  %246 = zext <8 x i8> %245 to <8 x i32>
  %247 = shl nuw nsw <8 x i32> %246, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %248 = or i64 %241, 1
  %249 = getelementptr inbounds i8, i8* %163, i64 %248
  %250 = bitcast i8* %249 to <8 x i8>*
  %251 = load <8 x i8>, <8 x i8>* %250, align 1, !alias.scope !27
  %252 = zext <8 x i8> %251 to <8 x i32>
  %253 = sub nsw <8 x i32> %252, %246
  %254 = mul nsw <8 x i32> %253, %24
  %255 = add nsw <8 x i32> %254, %247
  %256 = trunc <8 x i32> %255 to <8 x i16>
  %257 = getelementptr inbounds i16, i16* %164, i64 %241
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %258, align 2, !alias.scope !30, !noalias !27
  br label %259

259:                                              ; preds = %240, %242
  br i1 %29, label %260, label %176

260:                                              ; preds = %193, %266, %259, %160
  %261 = getelementptr inbounds i16, i16* %164, i64 %13
  %262 = getelementptr inbounds i8, i8* %163, i64 %2
  %263 = add nsw i32 %162, -1
  %264 = icmp eq i32 %263, 0
  %265 = add i64 %161, 1
  br i1 %264, label %464, label %160

266:                                              ; preds = %193, %266
  %267 = phi i64 [ %285, %266 ], [ %194, %193 ]
  %268 = getelementptr inbounds i8, i8* %163, i64 %267
  %269 = load i8, i8* %268, align 1
  %270 = zext i8 %269 to i32
  %271 = shl nuw nsw i32 %270, 4
  %272 = add nuw nsw i64 %267, 1
  %273 = getelementptr inbounds i8, i8* %163, i64 %272
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = sub nsw i32 %275, %270
  %277 = mul nsw i32 %276, %5
  %278 = add nsw i32 %277, %271
  %279 = trunc i32 %278 to i16
  %280 = getelementptr inbounds i16, i16* %164, i64 %267
  store i16 %279, i16* %280, align 2
  %281 = getelementptr inbounds i8, i8* %163, i64 %272
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = shl nuw nsw i32 %283, 4
  %285 = add nuw nsw i64 %267, 2
  %286 = getelementptr inbounds i8, i8* %163, i64 %285
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %288, %283
  %290 = mul nsw i32 %289, %5
  %291 = add nsw i32 %290, %284
  %292 = trunc i32 %291 to i16
  %293 = getelementptr inbounds i16, i16* %164, i64 %272
  store i16 %292, i16* %293, align 2
  %294 = icmp eq i64 %285, %15
  br i1 %294, label %260, label %266, !llvm.loop !33

295:                                              ; preds = %7
  br i1 %10, label %296, label %463

296:                                              ; preds = %295
  %297 = sext i32 %3 to i64
  %298 = icmp sgt i32 %3, 0
  %299 = zext i32 %3 to i64
  %300 = add i64 %299, %2
  %301 = and i64 %299, 4294967288
  %302 = add nsw i64 %301, -8
  %303 = lshr exact i64 %302, 3
  %304 = add nuw nsw i64 %303, 1
  %305 = icmp ult i32 %3, 8
  %306 = and i64 %299, 4294967288
  %307 = insertelement <8 x i32> undef, i32 %6, i32 0
  %308 = shufflevector <8 x i32> %307, <8 x i32> undef, <8 x i32> zeroinitializer
  %309 = and i64 %304, 1
  %310 = icmp eq i64 %302, 0
  %311 = sub nuw nsw i64 %304, %309
  %312 = icmp eq i64 %309, 0
  %313 = icmp eq i64 %306, %299
  %314 = and i64 %299, 1
  %315 = icmp eq i64 %314, 0
  %316 = sub nsw i64 0, %299
  br label %317

317:                                              ; preds = %296, %426
  %318 = phi i64 [ 0, %296 ], [ %431, %426 ]
  %319 = phi i32 [ %4, %296 ], [ %429, %426 ]
  %320 = phi i8* [ %1, %296 ], [ %428, %426 ]
  %321 = phi i16* [ %0, %296 ], [ %427, %426 ]
  %322 = mul i64 %318, %297
  %323 = getelementptr i16, i16* %0, i64 %322
  %324 = bitcast i16* %323 to i8*
  %325 = add i64 %322, %299
  %326 = getelementptr i16, i16* %0, i64 %325
  %327 = bitcast i16* %326 to i8*
  %328 = mul i64 %318, %2
  %329 = add i64 %328, %2
  %330 = getelementptr i8, i8* %1, i64 %329
  %331 = add i64 %300, %328
  %332 = getelementptr i8, i8* %1, i64 %331
  %333 = getelementptr i8, i8* %1, i64 %328
  %334 = add i64 %328, %299
  %335 = getelementptr i8, i8* %1, i64 %334
  br i1 %298, label %336, label %426

336:                                              ; preds = %317
  br i1 %305, label %337, label %358

337:                                              ; preds = %425, %358, %336
  %338 = phi i64 [ 0, %358 ], [ 0, %336 ], [ %306, %425 ]
  %339 = xor i64 %338, -1
  br i1 %315, label %355, label %340

340:                                              ; preds = %337
  %341 = getelementptr inbounds i8, i8* %320, i64 %338
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = shl nuw nsw i32 %343, 4
  %345 = add nsw i64 %338, %2
  %346 = getelementptr inbounds i8, i8* %320, i64 %345
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = sub nsw i32 %348, %343
  %350 = mul nsw i32 %349, %6
  %351 = add nsw i32 %350, %344
  %352 = trunc i32 %351 to i16
  %353 = getelementptr inbounds i16, i16* %321, i64 %338
  store i16 %352, i16* %353, align 2
  %354 = or i64 %338, 1
  br label %355

355:                                              ; preds = %340, %337
  %356 = phi i64 [ %354, %340 ], [ %338, %337 ]
  %357 = icmp eq i64 %339, %316
  br i1 %357, label %426, label %432

358:                                              ; preds = %336
  %359 = icmp ugt i8* %332, %324
  %360 = icmp ult i8* %330, %327
  %361 = and i1 %359, %360
  %362 = icmp ugt i8* %335, %324
  %363 = icmp ult i8* %333, %327
  %364 = and i1 %362, %363
  %365 = or i1 %361, %364
  br i1 %365, label %337, label %366

366:                                              ; preds = %358
  br i1 %310, label %406, label %367

367:                                              ; preds = %366, %367
  %368 = phi i64 [ %403, %367 ], [ 0, %366 ]
  %369 = phi i64 [ %404, %367 ], [ %311, %366 ]
  %370 = getelementptr inbounds i8, i8* %320, i64 %368
  %371 = bitcast i8* %370 to <8 x i8>*
  %372 = load <8 x i8>, <8 x i8>* %371, align 1, !alias.scope !34
  %373 = zext <8 x i8> %372 to <8 x i32>
  %374 = shl nuw nsw <8 x i32> %373, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %375 = add nsw i64 %368, %2
  %376 = getelementptr inbounds i8, i8* %320, i64 %375
  %377 = bitcast i8* %376 to <8 x i8>*
  %378 = load <8 x i8>, <8 x i8>* %377, align 1, !alias.scope !37
  %379 = zext <8 x i8> %378 to <8 x i32>
  %380 = sub nsw <8 x i32> %379, %373
  %381 = mul nsw <8 x i32> %380, %308
  %382 = add nsw <8 x i32> %381, %374
  %383 = trunc <8 x i32> %382 to <8 x i16>
  %384 = getelementptr inbounds i16, i16* %321, i64 %368
  %385 = bitcast i16* %384 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %385, align 2, !alias.scope !39, !noalias !41
  %386 = or i64 %368, 8
  %387 = getelementptr inbounds i8, i8* %320, i64 %386
  %388 = bitcast i8* %387 to <8 x i8>*
  %389 = load <8 x i8>, <8 x i8>* %388, align 1, !alias.scope !34
  %390 = zext <8 x i8> %389 to <8 x i32>
  %391 = shl nuw nsw <8 x i32> %390, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %392 = add nsw i64 %386, %2
  %393 = getelementptr inbounds i8, i8* %320, i64 %392
  %394 = bitcast i8* %393 to <8 x i8>*
  %395 = load <8 x i8>, <8 x i8>* %394, align 1, !alias.scope !37
  %396 = zext <8 x i8> %395 to <8 x i32>
  %397 = sub nsw <8 x i32> %396, %390
  %398 = mul nsw <8 x i32> %397, %308
  %399 = add nsw <8 x i32> %398, %391
  %400 = trunc <8 x i32> %399 to <8 x i16>
  %401 = getelementptr inbounds i16, i16* %321, i64 %386
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %400, <8 x i16>* %402, align 2, !alias.scope !39, !noalias !41
  %403 = add i64 %368, 16
  %404 = add i64 %369, -2
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %367, !llvm.loop !42

406:                                              ; preds = %367, %366
  %407 = phi i64 [ 0, %366 ], [ %403, %367 ]
  br i1 %312, label %425, label %408

408:                                              ; preds = %406
  %409 = getelementptr inbounds i8, i8* %320, i64 %407
  %410 = bitcast i8* %409 to <8 x i8>*
  %411 = load <8 x i8>, <8 x i8>* %410, align 1, !alias.scope !34
  %412 = zext <8 x i8> %411 to <8 x i32>
  %413 = shl nuw nsw <8 x i32> %412, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %414 = add nsw i64 %407, %2
  %415 = getelementptr inbounds i8, i8* %320, i64 %414
  %416 = bitcast i8* %415 to <8 x i8>*
  %417 = load <8 x i8>, <8 x i8>* %416, align 1, !alias.scope !37
  %418 = zext <8 x i8> %417 to <8 x i32>
  %419 = sub nsw <8 x i32> %418, %412
  %420 = mul nsw <8 x i32> %419, %308
  %421 = add nsw <8 x i32> %420, %413
  %422 = trunc <8 x i32> %421 to <8 x i16>
  %423 = getelementptr inbounds i16, i16* %321, i64 %407
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %422, <8 x i16>* %424, align 2, !alias.scope !39, !noalias !41
  br label %425

425:                                              ; preds = %406, %408
  br i1 %313, label %426, label %337

426:                                              ; preds = %355, %432, %425, %317
  %427 = getelementptr inbounds i16, i16* %321, i64 %297
  %428 = getelementptr inbounds i8, i8* %320, i64 %2
  %429 = add nsw i32 %319, -1
  %430 = icmp eq i32 %429, 0
  %431 = add i64 %318, 1
  br i1 %430, label %464, label %317

432:                                              ; preds = %355, %432
  %433 = phi i64 [ %461, %432 ], [ %356, %355 ]
  %434 = getelementptr inbounds i8, i8* %320, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = shl nuw nsw i32 %436, 4
  %438 = add nsw i64 %433, %2
  %439 = getelementptr inbounds i8, i8* %320, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = sub nsw i32 %441, %436
  %443 = mul nsw i32 %442, %6
  %444 = add nsw i32 %443, %437
  %445 = trunc i32 %444 to i16
  %446 = getelementptr inbounds i16, i16* %321, i64 %433
  store i16 %445, i16* %446, align 2
  %447 = add nuw nsw i64 %433, 1
  %448 = getelementptr inbounds i8, i8* %320, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = shl nuw nsw i32 %450, 4
  %452 = add nsw i64 %447, %2
  %453 = getelementptr inbounds i8, i8* %320, i64 %452
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = sub nsw i32 %455, %450
  %457 = mul nsw i32 %456, %6
  %458 = add nsw i32 %457, %451
  %459 = trunc i32 %458 to i16
  %460 = getelementptr inbounds i16, i16* %321, i64 %447
  store i16 %459, i16* %460, align 2
  %461 = add nuw nsw i64 %433, 2
  %462 = icmp eq i64 %461, %299
  br i1 %462, label %426, label %432, !llvm.loop !43

463:                                              ; preds = %295
  tail call fastcc void @prep_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4)
  br label %464

464:                                              ; preds = %260, %426, %463, %159
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @prep_bilin_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) #1 {
  %10 = alloca [32896 x i16], align 16
  %11 = add nsw i32 %4, -1
  %12 = mul nsw i32 %11, %8
  %13 = add nsw i32 %12, %6
  %14 = ashr i32 %13, 10
  %15 = add nsw i32 %14, 2
  %16 = bitcast [32896 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 65792, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 65792, i1 false)
  %17 = getelementptr inbounds [32896 x i16], [32896 x i16]* %10, i64 0, i64 0
  %18 = icmp sgt i32 %3, 0
  %19 = zext i32 %3 to i64
  br label %20

20:                                               ; preds = %50, %9
  %21 = phi i8* [ %1, %9 ], [ %52, %50 ]
  %22 = phi i32 [ %15, %9 ], [ %53, %50 ]
  %23 = phi i16* [ %17, %9 ], [ %51, %50 ]
  br i1 %18, label %24, label %50

24:                                               ; preds = %20, %24
  %25 = phi i64 [ %48, %24 ], [ 0, %20 ]
  %26 = phi i32 [ %46, %24 ], [ 0, %20 ]
  %27 = phi i32 [ %47, %24 ], [ %5, %20 ]
  %28 = sext i32 %26 to i64
  %29 = getelementptr inbounds i8, i8* %21, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw nsw i32 %31, 4
  %33 = ashr i32 %27, 6
  %34 = add nsw i32 %26, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %21, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %38, %31
  %40 = mul nsw i32 %39, %33
  %41 = add nsw i32 %40, %32
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %23, i64 %25
  store i16 %42, i16* %43, align 2
  %44 = add nsw i32 %27, %7
  %45 = ashr i32 %44, 10
  %46 = add nsw i32 %45, %26
  %47 = and i32 %44, 1023
  %48 = add nuw nsw i64 %25, 1
  %49 = icmp eq i64 %48, %19
  br i1 %49, label %50, label %24

50:                                               ; preds = %24, %20
  %51 = getelementptr inbounds i16, i16* %23, i64 128
  %52 = getelementptr inbounds i8, i8* %21, i64 %2
  %53 = add nsw i32 %22, -1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %20

55:                                               ; preds = %50
  %56 = sext i32 %3 to i64
  %57 = zext i32 %3 to i64
  %58 = icmp ult i32 %3, 8
  %59 = and i64 %57, 4294967288
  %60 = icmp eq i64 %59, %57
  br label %61

61:                                               ; preds = %55, %115
  %62 = phi i32 [ %121, %115 ], [ %6, %55 ]
  %63 = phi i32 [ %123, %115 ], [ %4, %55 ]
  %64 = phi i16* [ %122, %115 ], [ %0, %55 ]
  %65 = phi i16* [ %120, %115 ], [ %17, %55 ]
  br i1 %18, label %66, label %115

66:                                               ; preds = %61
  %67 = ashr i32 %62, 6
  br i1 %58, label %94, label %68

68:                                               ; preds = %66
  %69 = insertelement <8 x i32> undef, i32 %67, i32 0
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %71

71:                                               ; preds = %71, %68
  %72 = phi i64 [ 0, %68 ], [ %91, %71 ]
  %73 = getelementptr inbounds i16, i16* %65, i64 %72
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2
  %76 = sext <8 x i16> %75 to <8 x i32>
  %77 = shl nsw <8 x i32> %76, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %78 = add nuw nsw i64 %72, 128
  %79 = getelementptr inbounds i16, i16* %65, i64 %78
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = sext <8 x i16> %81 to <8 x i32>
  %83 = sub nsw <8 x i32> %82, %76
  %84 = mul nsw <8 x i32> %83, %70
  %85 = or <8 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %86 = add <8 x i32> %85, %84
  %87 = lshr <8 x i32> %86, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %88 = trunc <8 x i32> %87 to <8 x i16>
  %89 = getelementptr inbounds i16, i16* %64, i64 %72
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %90, align 2
  %91 = add i64 %72, 8
  %92 = icmp eq i64 %91, %59
  br i1 %92, label %93, label %71, !llvm.loop !44

93:                                               ; preds = %71
  br i1 %60, label %115, label %94

94:                                               ; preds = %93, %66
  %95 = phi i64 [ 0, %66 ], [ %59, %93 ]
  br label %96

96:                                               ; preds = %94, %96
  %97 = phi i64 [ %113, %96 ], [ %95, %94 ]
  %98 = getelementptr inbounds i16, i16* %65, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %99 to i32
  %101 = shl nsw i32 %100, 4
  %102 = add nuw nsw i64 %97, 128
  %103 = getelementptr inbounds i16, i16* %65, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %105, %100
  %107 = mul nsw i32 %106, %67
  %108 = or i32 %101, 8
  %109 = add i32 %108, %107
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %64, i64 %97
  store i16 %111, i16* %112, align 2
  %113 = add nuw nsw i64 %97, 1
  %114 = icmp eq i64 %113, %57
  br i1 %114, label %115, label %96, !llvm.loop !45

115:                                              ; preds = %96, %93, %61
  %116 = add nsw i32 %62, %8
  %117 = ashr i32 %116, 10
  %118 = shl nsw i32 %117, 7
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i16, i16* %65, i64 %119
  %121 = and i32 %116, 1023
  %122 = getelementptr inbounds i16, i16* %64, i64 %56
  %123 = add nsw i32 %63, -1
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %61

125:                                              ; preds = %115
  call void @llvm.lifetime.end.p0i8(i64 65792, i8* nonnull %16) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @avg_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32) #2 {
  %7 = sext i32 %4 to i64
  %8 = icmp sgt i32 %4, 0
  %9 = zext i32 %4 to i64
  %10 = icmp ult i32 %4, 8
  %11 = and i64 %9, 4294967288
  %12 = icmp eq i64 %11, %9
  %13 = and i64 %9, 1
  %14 = icmp eq i64 %13, 0
  %15 = sub nsw i64 0, %9
  br label %16

16:                                               ; preds = %91, %6
  %17 = phi i64 [ %97, %91 ], [ 0, %6 ]
  %18 = phi i32 [ %95, %91 ], [ %5, %6 ]
  %19 = phi i16* [ %93, %91 ], [ %3, %6 ]
  %20 = phi i16* [ %92, %91 ], [ %2, %6 ]
  %21 = phi i8* [ %94, %91 ], [ %0, %6 ]
  %22 = mul i64 %17, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, %9
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = mul i64 %17, %7
  %27 = getelementptr i16, i16* %2, i64 %26
  %28 = bitcast i16* %27 to i8*
  %29 = add i64 %26, %9
  %30 = getelementptr i16, i16* %2, i64 %29
  %31 = bitcast i16* %30 to i8*
  %32 = getelementptr i16, i16* %3, i64 %26
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i16, i16* %3, i64 %29
  %35 = bitcast i16* %34 to i8*
  br i1 %8, label %36, label %91

36:                                               ; preds = %16
  br i1 %10, label %37, label %60

37:                                               ; preds = %90, %60, %36
  %38 = phi i64 [ 0, %60 ], [ 0, %36 ], [ %11, %90 ]
  %39 = xor i64 %38, -1
  br i1 %14, label %57, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds i16, i16* %20, i64 %38
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = getelementptr inbounds i16, i16* %19, i64 %38
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = add nsw i32 %43, 16
  %48 = add nsw i32 %47, %46
  %49 = ashr i32 %48, 5
  %50 = icmp slt i32 %49, 255
  %51 = select i1 %50, i32 %49, i32 255
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %21, i64 %38
  store i8 %54, i8* %55, align 1
  %56 = or i64 %38, 1
  br label %57

57:                                               ; preds = %40, %37
  %58 = phi i64 [ %56, %40 ], [ %38, %37 ]
  %59 = icmp eq i64 %39, %15
  br i1 %59, label %91, label %98

60:                                               ; preds = %36
  %61 = icmp ult i8* %23, %31
  %62 = icmp ugt i8* %25, %28
  %63 = and i1 %61, %62
  %64 = icmp ult i8* %23, %35
  %65 = icmp ugt i8* %25, %33
  %66 = and i1 %64, %65
  %67 = or i1 %63, %66
  br i1 %67, label %37, label %68

68:                                               ; preds = %60, %68
  %69 = phi i64 [ %88, %68 ], [ 0, %60 ]
  %70 = getelementptr inbounds i16, i16* %20, i64 %69
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !46
  %73 = sext <8 x i16> %72 to <8 x i32>
  %74 = getelementptr inbounds i16, i16* %19, i64 %69
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !49
  %77 = sext <8 x i16> %76 to <8 x i32>
  %78 = add nsw <8 x i32> %73, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %79 = add nsw <8 x i32> %78, %77
  %80 = ashr <8 x i32> %79, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %81 = icmp slt <8 x i32> %80, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %82 = select <8 x i1> %81, <8 x i32> %80, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = icmp sgt <8 x i32> %82, zeroinitializer
  %84 = select <8 x i1> %83, <8 x i32> %82, <8 x i32> zeroinitializer
  %85 = trunc <8 x i32> %84 to <8 x i8>
  %86 = getelementptr inbounds i8, i8* %21, i64 %69
  %87 = bitcast i8* %86 to <8 x i8>*
  store <8 x i8> %85, <8 x i8>* %87, align 1, !alias.scope !51, !noalias !53
  %88 = add i64 %69, 8
  %89 = icmp eq i64 %88, %11
  br i1 %89, label %90, label %68, !llvm.loop !54

90:                                               ; preds = %68
  br i1 %12, label %91, label %37

91:                                               ; preds = %57, %98, %90, %16
  %92 = getelementptr inbounds i16, i16* %20, i64 %7
  %93 = getelementptr inbounds i16, i16* %19, i64 %7
  %94 = getelementptr inbounds i8, i8* %21, i64 %1
  %95 = add nsw i32 %18, -1
  %96 = icmp eq i32 %95, 0
  %97 = add i64 %17, 1
  br i1 %96, label %133, label %16

98:                                               ; preds = %57, %98
  %99 = phi i64 [ %131, %98 ], [ %58, %57 ]
  %100 = getelementptr inbounds i16, i16* %20, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = sext i16 %101 to i32
  %103 = getelementptr inbounds i16, i16* %19, i64 %99
  %104 = load i16, i16* %103, align 2
  %105 = sext i16 %104 to i32
  %106 = add nsw i32 %102, 16
  %107 = add nsw i32 %106, %105
  %108 = ashr i32 %107, 5
  %109 = icmp slt i32 %108, 255
  %110 = select i1 %109, i32 %108, i32 255
  %111 = icmp sgt i32 %110, 0
  %112 = select i1 %111, i32 %110, i32 0
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %21, i64 %99
  store i8 %113, i8* %114, align 1
  %115 = add nuw nsw i64 %99, 1
  %116 = getelementptr inbounds i16, i16* %20, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = sext i16 %117 to i32
  %119 = getelementptr inbounds i16, i16* %19, i64 %115
  %120 = load i16, i16* %119, align 2
  %121 = sext i16 %120 to i32
  %122 = add nsw i32 %118, 16
  %123 = add nsw i32 %122, %121
  %124 = ashr i32 %123, 5
  %125 = icmp slt i32 %124, 255
  %126 = select i1 %125, i32 %124, i32 255
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %21, i64 %115
  store i8 %129, i8* %130, align 1
  %131 = add nuw nsw i64 %99, 2
  %132 = icmp eq i64 %131, %9
  br i1 %132, label %91, label %98, !llvm.loop !55

133:                                              ; preds = %91
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @w_avg_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32) #2 {
  %8 = sext i32 %4 to i64
  %9 = icmp sgt i32 %4, 0
  %10 = sub nsw i32 16, %6
  %11 = zext i32 %4 to i64
  %12 = icmp ult i32 %4, 8
  %13 = and i64 %11, 4294967288
  %14 = insertelement <8 x i32> undef, i32 %6, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = insertelement <8 x i32> undef, i32 %10, i32 0
  %17 = shufflevector <8 x i32> %16, <8 x i32> undef, <8 x i32> zeroinitializer
  %18 = icmp eq i64 %13, %11
  br label %19

19:                                               ; preds = %75, %7
  %20 = phi i64 [ %81, %75 ], [ 0, %7 ]
  %21 = phi i32 [ %79, %75 ], [ %5, %7 ]
  %22 = phi i16* [ %77, %75 ], [ %3, %7 ]
  %23 = phi i16* [ %76, %75 ], [ %2, %7 ]
  %24 = phi i8* [ %78, %75 ], [ %0, %7 ]
  %25 = mul i64 %20, %1
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add i64 %25, %11
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = mul i64 %20, %8
  %30 = getelementptr i16, i16* %2, i64 %29
  %31 = bitcast i16* %30 to i8*
  %32 = add i64 %29, %11
  %33 = getelementptr i16, i16* %2, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr i16, i16* %3, i64 %29
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i16, i16* %3, i64 %32
  %38 = bitcast i16* %37 to i8*
  br i1 %9, label %39, label %75

39:                                               ; preds = %19
  br i1 %12, label %40, label %42

40:                                               ; preds = %74, %42, %39
  %41 = phi i64 [ 0, %42 ], [ 0, %39 ], [ %13, %74 ]
  br label %82

42:                                               ; preds = %39
  %43 = icmp ult i8* %26, %34
  %44 = icmp ugt i8* %28, %31
  %45 = and i1 %43, %44
  %46 = icmp ult i8* %26, %38
  %47 = icmp ugt i8* %28, %36
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %40, label %50

50:                                               ; preds = %42, %50
  %51 = phi i64 [ %72, %50 ], [ 0, %42 ]
  %52 = getelementptr inbounds i16, i16* %23, i64 %51
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2, !alias.scope !56
  %55 = sext <8 x i16> %54 to <8 x i32>
  %56 = mul nsw <8 x i32> %15, %55
  %57 = getelementptr inbounds i16, i16* %22, i64 %51
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !59
  %60 = sext <8 x i16> %59 to <8 x i32>
  %61 = mul nsw <8 x i32> %17, %60
  %62 = add <8 x i32> %56, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %63 = add <8 x i32> %62, %61
  %64 = ashr <8 x i32> %63, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %65 = icmp slt <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = select <8 x i1> %65, <8 x i32> %64, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = icmp sgt <8 x i32> %66, zeroinitializer
  %68 = select <8 x i1> %67, <8 x i32> %66, <8 x i32> zeroinitializer
  %69 = trunc <8 x i32> %68 to <8 x i8>
  %70 = getelementptr inbounds i8, i8* %24, i64 %51
  %71 = bitcast i8* %70 to <8 x i8>*
  store <8 x i8> %69, <8 x i8>* %71, align 1, !alias.scope !61, !noalias !63
  %72 = add i64 %51, 8
  %73 = icmp eq i64 %72, %13
  br i1 %73, label %74, label %50, !llvm.loop !64

74:                                               ; preds = %50
  br i1 %18, label %75, label %40

75:                                               ; preds = %82, %74, %19
  %76 = getelementptr inbounds i16, i16* %23, i64 %8
  %77 = getelementptr inbounds i16, i16* %22, i64 %8
  %78 = getelementptr inbounds i8, i8* %24, i64 %1
  %79 = add nsw i32 %21, -1
  %80 = icmp eq i32 %79, 0
  %81 = add i64 %20, 1
  br i1 %80, label %103, label %19

82:                                               ; preds = %40, %82
  %83 = phi i64 [ %101, %82 ], [ %41, %40 ]
  %84 = getelementptr inbounds i16, i16* %23, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %6
  %88 = getelementptr inbounds i16, i16* %22, i64 %83
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %10, %90
  %92 = add i32 %87, 128
  %93 = add i32 %92, %91
  %94 = ashr i32 %93, 8
  %95 = icmp slt i32 %94, 255
  %96 = select i1 %95, i32 %94, i32 255
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %24, i64 %83
  store i8 %99, i8* %100, align 1
  %101 = add nuw nsw i64 %83, 1
  %102 = icmp eq i64 %101, %11
  br i1 %102, label %75, label %82, !llvm.loop !65

103:                                              ; preds = %75
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @mask_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i8* nocapture readonly) #2 {
  %8 = sext i32 %4 to i64
  %9 = icmp sgt i32 %4, 0
  %10 = zext i32 %4 to i64
  %11 = icmp ult i32 %4, 8
  %12 = and i64 %10, 4294967288
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %82, %7
  %15 = phi i64 [ %89, %82 ], [ 0, %7 ]
  %16 = phi i32 [ %87, %82 ], [ %5, %7 ]
  %17 = phi i8* [ %85, %82 ], [ %6, %7 ]
  %18 = phi i16* [ %84, %82 ], [ %3, %7 ]
  %19 = phi i16* [ %83, %82 ], [ %2, %7 ]
  %20 = phi i8* [ %86, %82 ], [ %0, %7 ]
  %21 = mul i64 %15, %1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = add i64 %21, %10
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = mul i64 %15, %8
  %26 = getelementptr i16, i16* %2, i64 %25
  %27 = bitcast i16* %26 to i8*
  %28 = add i64 %25, %10
  %29 = getelementptr i16, i16* %2, i64 %28
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i8, i8* %6, i64 %25
  %32 = getelementptr i8, i8* %6, i64 %28
  %33 = getelementptr i16, i16* %3, i64 %25
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr i16, i16* %3, i64 %28
  %36 = bitcast i16* %35 to i8*
  br i1 %9, label %37, label %82

37:                                               ; preds = %14
  br i1 %11, label %38, label %40

38:                                               ; preds = %81, %40, %37
  %39 = phi i64 [ 0, %40 ], [ 0, %37 ], [ %12, %81 ]
  br label %90

40:                                               ; preds = %37
  %41 = icmp ult i8* %22, %30
  %42 = icmp ugt i8* %24, %27
  %43 = and i1 %41, %42
  %44 = icmp ult i8* %22, %32
  %45 = icmp ult i8* %31, %24
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  %48 = icmp ult i8* %22, %36
  %49 = icmp ugt i8* %24, %34
  %50 = and i1 %48, %49
  %51 = or i1 %47, %50
  br i1 %51, label %38, label %52

52:                                               ; preds = %40, %52
  %53 = phi i64 [ %79, %52 ], [ 0, %40 ]
  %54 = getelementptr inbounds i16, i16* %19, i64 %53
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !66
  %57 = sext <8 x i16> %56 to <8 x i32>
  %58 = getelementptr inbounds i8, i8* %17, i64 %53
  %59 = bitcast i8* %58 to <8 x i8>*
  %60 = load <8 x i8>, <8 x i8>* %59, align 1, !alias.scope !69
  %61 = zext <8 x i8> %60 to <8 x i32>
  %62 = mul nsw <8 x i32> %61, %57
  %63 = getelementptr inbounds i16, i16* %18, i64 %53
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !71
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %61
  %68 = mul nsw <8 x i32> %67, %66
  %69 = add nsw <8 x i32> %62, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %70 = add nsw <8 x i32> %69, %68
  %71 = ashr <8 x i32> %70, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %72 = icmp slt <8 x i32> %71, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = select <8 x i1> %72, <8 x i32> %71, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %74 = icmp sgt <8 x i32> %73, zeroinitializer
  %75 = select <8 x i1> %74, <8 x i32> %73, <8 x i32> zeroinitializer
  %76 = trunc <8 x i32> %75 to <8 x i8>
  %77 = getelementptr inbounds i8, i8* %20, i64 %53
  %78 = bitcast i8* %77 to <8 x i8>*
  store <8 x i8> %76, <8 x i8>* %78, align 1, !alias.scope !73, !noalias !75
  %79 = add i64 %53, 8
  %80 = icmp eq i64 %79, %12
  br i1 %80, label %81, label %52, !llvm.loop !76

81:                                               ; preds = %52
  br i1 %13, label %82, label %38

82:                                               ; preds = %90, %81, %14
  %83 = getelementptr inbounds i16, i16* %19, i64 %8
  %84 = getelementptr inbounds i16, i16* %18, i64 %8
  %85 = getelementptr inbounds i8, i8* %17, i64 %8
  %86 = getelementptr inbounds i8, i8* %20, i64 %1
  %87 = add nsw i32 %16, -1
  %88 = icmp eq i32 %87, 0
  %89 = add i64 %15, 1
  br i1 %88, label %115, label %14

90:                                               ; preds = %38, %90
  %91 = phi i64 [ %113, %90 ], [ %39, %38 ]
  %92 = getelementptr inbounds i16, i16* %19, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = getelementptr inbounds i8, i8* %17, i64 %91
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %94
  %99 = getelementptr inbounds i16, i16* %18, i64 %91
  %100 = load i16, i16* %99, align 2
  %101 = sext i16 %100 to i32
  %102 = sub nsw i32 64, %97
  %103 = mul nsw i32 %102, %101
  %104 = add nsw i32 %98, 512
  %105 = add nsw i32 %104, %103
  %106 = ashr i32 %105, 10
  %107 = icmp slt i32 %106, 255
  %108 = select i1 %107, i32 %106, i32 255
  %109 = icmp sgt i32 %108, 0
  %110 = select i1 %109, i32 %108, i32 0
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %20, i64 %91
  store i8 %111, i8* %112, align 1
  %113 = add nuw nsw i64 %91, 1
  %114 = icmp eq i64 %113, %10
  br i1 %114, label %82, label %90, !llvm.loop !77

115:                                              ; preds = %82
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @blend_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i8* nocapture readonly) #2 {
  %7 = icmp sgt i32 %3, 0
  %8 = sext i32 %3 to i64
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 16
  %11 = and i64 %9, 4294967280
  %12 = icmp eq i64 %11, %9
  %13 = and i64 %9, 1
  %14 = icmp eq i64 %13, 0
  %15 = sub nsw i64 0, %9
  br label %16

16:                                               ; preds = %90, %6
  %17 = phi i64 [ %96, %90 ], [ 0, %6 ]
  %18 = phi i8* [ %92, %90 ], [ %2, %6 ]
  %19 = phi i8* [ %91, %90 ], [ %0, %6 ]
  %20 = phi i32 [ %94, %90 ], [ %4, %6 ]
  %21 = phi i8* [ %93, %90 ], [ %5, %6 ]
  %22 = mul i64 %17, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, %9
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = mul i64 %17, %8
  %27 = getelementptr i8, i8* %5, i64 %26
  %28 = add i64 %26, %9
  %29 = getelementptr i8, i8* %5, i64 %28
  %30 = getelementptr i8, i8* %2, i64 %26
  %31 = getelementptr i8, i8* %2, i64 %28
  br i1 %7, label %32, label %90

32:                                               ; preds = %16
  br i1 %10, label %33, label %57

33:                                               ; preds = %89, %57, %32
  %34 = phi i64 [ 0, %57 ], [ 0, %32 ], [ %11, %89 ]
  %35 = xor i64 %34, -1
  br i1 %14, label %54, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i8, i8* %19, i64 %34
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %21, i64 %34
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sub nsw i32 64, %42
  %44 = mul nsw i32 %43, %39
  %45 = getelementptr inbounds i8, i8* %18, i64 %34
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %42
  %49 = add nuw nsw i32 %48, 32
  %50 = add nsw i32 %49, %44
  %51 = lshr i32 %50, 6
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %37, align 1
  %53 = or i64 %34, 1
  br label %54

54:                                               ; preds = %36, %33
  %55 = phi i64 [ %53, %36 ], [ %34, %33 ]
  %56 = icmp eq i64 %35, %15
  br i1 %56, label %90, label %97

57:                                               ; preds = %32
  %58 = icmp ult i8* %23, %29
  %59 = icmp ult i8* %27, %25
  %60 = and i1 %58, %59
  %61 = icmp ult i8* %23, %31
  %62 = icmp ult i8* %30, %25
  %63 = and i1 %61, %62
  %64 = or i1 %60, %63
  br i1 %64, label %33, label %65

65:                                               ; preds = %57, %65
  %66 = phi i64 [ %87, %65 ], [ 0, %57 ]
  %67 = getelementptr inbounds i8, i8* %19, i64 %66
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !78, !noalias !81
  %70 = zext <16 x i8> %69 to <16 x i32>
  %71 = getelementptr inbounds i8, i8* %21, i64 %66
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !84
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %74
  %76 = mul nsw <16 x i32> %75, %70
  %77 = getelementptr inbounds i8, i8* %18, i64 %66
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !85
  %80 = zext <16 x i8> %79 to <16 x i32>
  %81 = mul nuw nsw <16 x i32> %80, %74
  %82 = add nuw nsw <16 x i32> %81, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = add nsw <16 x i32> %82, %76
  %84 = lshr <16 x i32> %83, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %85 = trunc <16 x i32> %84 to <16 x i8>
  %86 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %86, align 1, !alias.scope !78, !noalias !81
  %87 = add i64 %66, 16
  %88 = icmp eq i64 %87, %11
  br i1 %88, label %89, label %65, !llvm.loop !86

89:                                               ; preds = %65
  br i1 %12, label %90, label %33

90:                                               ; preds = %54, %97, %89, %16
  %91 = getelementptr inbounds i8, i8* %19, i64 %1
  %92 = getelementptr inbounds i8, i8* %18, i64 %8
  %93 = getelementptr inbounds i8, i8* %21, i64 %8
  %94 = add nsw i32 %20, -1
  %95 = icmp eq i32 %94, 0
  %96 = add i64 %17, 1
  br i1 %95, label %134, label %16

97:                                               ; preds = %54, %97
  %98 = phi i64 [ %132, %97 ], [ %55, %54 ]
  %99 = getelementptr inbounds i8, i8* %19, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %21, i64 %98
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = sub nsw i32 64, %104
  %106 = mul nsw i32 %105, %101
  %107 = getelementptr inbounds i8, i8* %18, i64 %98
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, %104
  %111 = add nuw nsw i32 %110, 32
  %112 = add nsw i32 %111, %106
  %113 = lshr i32 %112, 6
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %99, align 1
  %115 = add nuw nsw i64 %98, 1
  %116 = getelementptr inbounds i8, i8* %19, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %21, i64 %115
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = sub nsw i32 64, %121
  %123 = mul nsw i32 %122, %118
  %124 = getelementptr inbounds i8, i8* %18, i64 %115
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nuw nsw i32 %126, %121
  %128 = add nuw nsw i32 %127, 32
  %129 = add nsw i32 %128, %123
  %130 = lshr i32 %129, 6
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %116, align 1
  %132 = add nuw nsw i64 %98, 2
  %133 = icmp eq i64 %132, %9
  br i1 %133, label %90, label %97, !llvm.loop !87

134:                                              ; preds = %90
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @blend_v_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32) #2 {
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [64 x i8], [64 x i8]* @dav1d_obmc_masks, i64 0, i64 %6
  %8 = mul nsw i32 %3, 3
  %9 = ashr i32 %8, 2
  %10 = icmp sgt i32 %8, 3
  %11 = sext i32 %9 to i64
  %12 = icmp sgt i64 %11, 1
  %13 = select i1 %12, i64 %11, i64 1
  %14 = icmp sgt i64 %11, 1
  %15 = select i1 %14, i64 %11, i64 1
  %16 = getelementptr [64 x i8], [64 x i8]* @dav1d_obmc_masks, i64 0, i64 %6
  %17 = add nsw i64 %15, %6
  %18 = getelementptr [64 x i8], [64 x i8]* @dav1d_obmc_masks, i64 0, i64 %17
  %19 = icmp ult i64 %13, 16
  %20 = and i64 %13, 9223372036854775792
  %21 = icmp eq i64 %13, %20
  br label %22

22:                                               ; preds = %71, %5
  %23 = phi i64 [ %76, %71 ], [ 0, %5 ]
  %24 = phi i8* [ %73, %71 ], [ %2, %5 ]
  %25 = phi i8* [ %72, %71 ], [ %0, %5 ]
  %26 = phi i32 [ %74, %71 ], [ %4, %5 ]
  %27 = mul i64 %23, %1
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = add i64 %15, %27
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = mul i64 %23, %6
  %32 = getelementptr i8, i8* %2, i64 %31
  %33 = add i64 %15, %31
  %34 = getelementptr i8, i8* %2, i64 %33
  br i1 %10, label %35, label %71

35:                                               ; preds = %22
  br i1 %19, label %36, label %38

36:                                               ; preds = %70, %38, %35
  %37 = phi i64 [ 0, %38 ], [ 0, %35 ], [ %20, %70 ]
  br label %77

38:                                               ; preds = %35
  %39 = icmp ult i8* %28, %18
  %40 = icmp ult i8* %16, %30
  %41 = and i1 %39, %40
  %42 = icmp ult i8* %28, %34
  %43 = icmp ult i8* %32, %30
  %44 = and i1 %42, %43
  %45 = or i1 %41, %44
  br i1 %45, label %36, label %46

46:                                               ; preds = %38, %46
  %47 = phi i64 [ %68, %46 ], [ 0, %38 ]
  %48 = getelementptr inbounds i8, i8* %25, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !88, !noalias !91
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = getelementptr inbounds i8, i8* %7, i64 %47
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !94
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %55
  %57 = mul nsw <16 x i32> %56, %51
  %58 = getelementptr inbounds i8, i8* %24, i64 %47
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !95
  %61 = zext <16 x i8> %60 to <16 x i32>
  %62 = mul nuw nsw <16 x i32> %61, %55
  %63 = add nuw nsw <16 x i32> %62, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %64 = add nsw <16 x i32> %63, %57
  %65 = lshr <16 x i32> %64, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %66 = trunc <16 x i32> %65 to <16 x i8>
  %67 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %66, <16 x i8>* %67, align 1, !alias.scope !88, !noalias !91
  %68 = add i64 %47, 16
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %46, !llvm.loop !96

70:                                               ; preds = %46
  br i1 %21, label %71, label %36

71:                                               ; preds = %77, %70, %22
  %72 = getelementptr inbounds i8, i8* %25, i64 %1
  %73 = getelementptr inbounds i8, i8* %24, i64 %6
  %74 = add nsw i32 %26, -1
  %75 = icmp eq i32 %74, 0
  %76 = add i64 %23, 1
  br i1 %75, label %97, label %22

77:                                               ; preds = %36, %77
  %78 = phi i64 [ %95, %77 ], [ %37, %36 ]
  %79 = getelementptr inbounds i8, i8* %25, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = getelementptr inbounds i8, i8* %7, i64 %78
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = sub nsw i32 64, %84
  %86 = mul nsw i32 %85, %81
  %87 = getelementptr inbounds i8, i8* %24, i64 %78
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nuw nsw i32 %89, %84
  %91 = add nuw nsw i32 %90, 32
  %92 = add nsw i32 %91, %86
  %93 = lshr i32 %92, 6
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %79, align 1
  %95 = add nuw nsw i64 %78, 1
  %96 = icmp slt i64 %95, %11
  br i1 %96, label %77, label %71, !llvm.loop !97

97:                                               ; preds = %71
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @blend_h_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32) #2 {
  %6 = sext i32 %4 to i64
  %7 = getelementptr inbounds [64 x i8], [64 x i8]* @dav1d_obmc_masks, i64 0, i64 %6
  %8 = mul nsw i32 %4, 3
  %9 = ashr i32 %8, 2
  %10 = icmp sgt i32 %3, 0
  %11 = sext i32 %3 to i64
  %12 = zext i32 %3 to i64
  %13 = and i64 %12, 4294967280
  %14 = add nsw i64 %13, -16
  %15 = lshr exact i64 %14, 4
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %3, 16
  %18 = and i64 %12, 4294967280
  %19 = and i64 %16, 1
  %20 = icmp eq i64 %14, 0
  %21 = sub nuw nsw i64 %16, %19
  %22 = icmp eq i64 %19, 0
  %23 = icmp eq i64 %18, %12
  %24 = and i64 %12, 1
  %25 = icmp eq i64 %24, 0
  %26 = sub nsw i64 0, %12
  br label %27

27:                                               ; preds = %131, %5
  %28 = phi i64 [ %136, %131 ], [ 0, %5 ]
  %29 = phi i8* [ %133, %131 ], [ %2, %5 ]
  %30 = phi i8* [ %132, %131 ], [ %0, %5 ]
  %31 = phi i32 [ %134, %131 ], [ %9, %5 ]
  %32 = phi i8* [ %41, %131 ], [ %7, %5 ]
  %33 = mul i64 %28, %1
  %34 = getelementptr i8, i8* %0, i64 %33
  %35 = add i64 %33, %12
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = mul i64 %28, %11
  %38 = getelementptr i8, i8* %2, i64 %37
  %39 = add i64 %37, %12
  %40 = getelementptr i8, i8* %2, i64 %39
  %41 = getelementptr inbounds i8, i8* %32, i64 1
  %42 = load i8, i8* %32, align 1
  %43 = zext i8 %42 to i32
  br i1 %10, label %44, label %131

44:                                               ; preds = %27
  %45 = sub nsw i32 64, %43
  br i1 %17, label %46, label %66

46:                                               ; preds = %130, %66, %44
  %47 = phi i64 [ 0, %66 ], [ 0, %44 ], [ %18, %130 ]
  %48 = xor i64 %47, -1
  br i1 %25, label %63, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8, i8* %30, i64 %47
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nsw i32 %45, %52
  %54 = getelementptr inbounds i8, i8* %29, i64 %47
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, %43
  %58 = add nsw i32 %53, 32
  %59 = add nsw i32 %58, %57
  %60 = lshr i32 %59, 6
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %50, align 1
  %62 = or i64 %47, 1
  br label %63

63:                                               ; preds = %49, %46
  %64 = phi i64 [ %62, %49 ], [ %47, %46 ]
  %65 = icmp eq i64 %48, %26
  br i1 %65, label %131, label %137

66:                                               ; preds = %44
  %67 = icmp ult i8* %34, %40
  %68 = icmp ult i8* %38, %36
  %69 = and i1 %67, %68
  br i1 %69, label %46, label %70

70:                                               ; preds = %66
  %71 = insertelement <16 x i32> undef, i32 %45, i32 0
  %72 = shufflevector <16 x i32> %71, <16 x i32> undef, <16 x i32> zeroinitializer
  %73 = insertelement <16 x i32> undef, i32 %43, i32 0
  %74 = shufflevector <16 x i32> %73, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %20, label %112, label %75

75:                                               ; preds = %70, %75
  %76 = phi i64 [ %109, %75 ], [ 0, %70 ]
  %77 = phi i64 [ %110, %75 ], [ %21, %70 ]
  %78 = getelementptr inbounds i8, i8* %30, i64 %76
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !98, !noalias !101
  %81 = zext <16 x i8> %80 to <16 x i32>
  %82 = mul nsw <16 x i32> %72, %81
  %83 = getelementptr inbounds i8, i8* %29, i64 %76
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !101
  %86 = zext <16 x i8> %85 to <16 x i32>
  %87 = mul nuw nsw <16 x i32> %74, %86
  %88 = add nsw <16 x i32> %82, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %89 = add nsw <16 x i32> %88, %87
  %90 = lshr <16 x i32> %89, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %91 = trunc <16 x i32> %90 to <16 x i8>
  %92 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %92, align 1, !alias.scope !98, !noalias !101
  %93 = or i64 %76, 16
  %94 = getelementptr inbounds i8, i8* %30, i64 %93
  %95 = bitcast i8* %94 to <16 x i8>*
  %96 = load <16 x i8>, <16 x i8>* %95, align 1, !alias.scope !98, !noalias !101
  %97 = zext <16 x i8> %96 to <16 x i32>
  %98 = mul nsw <16 x i32> %72, %97
  %99 = getelementptr inbounds i8, i8* %29, i64 %93
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !101
  %102 = zext <16 x i8> %101 to <16 x i32>
  %103 = mul nuw nsw <16 x i32> %74, %102
  %104 = add nsw <16 x i32> %98, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %105 = add nsw <16 x i32> %104, %103
  %106 = lshr <16 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %107 = trunc <16 x i32> %106 to <16 x i8>
  %108 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %108, align 1, !alias.scope !98, !noalias !101
  %109 = add i64 %76, 32
  %110 = add i64 %77, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %75, !llvm.loop !103

112:                                              ; preds = %75, %70
  %113 = phi i64 [ 0, %70 ], [ %109, %75 ]
  br i1 %22, label %130, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds i8, i8* %30, i64 %113
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !98, !noalias !101
  %118 = zext <16 x i8> %117 to <16 x i32>
  %119 = mul nsw <16 x i32> %72, %118
  %120 = getelementptr inbounds i8, i8* %29, i64 %113
  %121 = bitcast i8* %120 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1, !alias.scope !101
  %123 = zext <16 x i8> %122 to <16 x i32>
  %124 = mul nuw nsw <16 x i32> %74, %123
  %125 = add nsw <16 x i32> %119, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %126 = add nsw <16 x i32> %125, %124
  %127 = lshr <16 x i32> %126, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %128 = trunc <16 x i32> %127 to <16 x i8>
  %129 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %129, align 1, !alias.scope !98, !noalias !101
  br label %130

130:                                              ; preds = %112, %114
  br i1 %23, label %131, label %46

131:                                              ; preds = %63, %137, %130, %27
  %132 = getelementptr inbounds i8, i8* %30, i64 %1
  %133 = getelementptr inbounds i8, i8* %29, i64 %11
  %134 = add nsw i32 %31, -1
  %135 = icmp eq i32 %134, 0
  %136 = add i64 %28, 1
  br i1 %135, label %166, label %27

137:                                              ; preds = %63, %137
  %138 = phi i64 [ %164, %137 ], [ %64, %63 ]
  %139 = getelementptr inbounds i8, i8* %30, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = mul nsw i32 %45, %141
  %143 = getelementptr inbounds i8, i8* %29, i64 %138
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = mul nuw nsw i32 %145, %43
  %147 = add nsw i32 %142, 32
  %148 = add nsw i32 %147, %146
  %149 = lshr i32 %148, 6
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %139, align 1
  %151 = add nuw nsw i64 %138, 1
  %152 = getelementptr inbounds i8, i8* %30, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = mul nsw i32 %45, %154
  %156 = getelementptr inbounds i8, i8* %29, i64 %151
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = mul nuw nsw i32 %158, %43
  %160 = add nsw i32 %155, 32
  %161 = add nsw i32 %160, %159
  %162 = lshr i32 %161, 6
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %152, align 1
  %164 = add nuw nsw i64 %138, 2
  %165 = icmp eq i64 %164, %12
  br i1 %165, label %131, label %137, !llvm.loop !104

166:                                              ; preds = %131
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @w_mask_444_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i8* nocapture, i32) #2 {
  %9 = sext i32 %4 to i64
  %10 = icmp sgt i32 %4, 0
  %11 = zext i32 %4 to i64
  %12 = icmp ult i32 %4, 8
  %13 = and i64 %11, 4294967288
  %14 = icmp eq i64 %13, %11
  br label %15

15:                                               ; preds = %99, %8
  %16 = phi i64 [ %106, %99 ], [ 0, %8 ]
  %17 = phi i8* [ %103, %99 ], [ %6, %8 ]
  %18 = phi i32 [ %104, %99 ], [ %5, %8 ]
  %19 = phi i16* [ %101, %99 ], [ %3, %8 ]
  %20 = phi i16* [ %100, %99 ], [ %2, %8 ]
  %21 = phi i8* [ %102, %99 ], [ %0, %8 ]
  %22 = mul i64 %16, %1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = add i64 %22, %11
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = mul i64 %16, %9
  %27 = getelementptr i8, i8* %6, i64 %26
  %28 = add i64 %26, %11
  %29 = getelementptr i8, i8* %6, i64 %28
  %30 = getelementptr i16, i16* %2, i64 %26
  %31 = bitcast i16* %30 to i8*
  %32 = getelementptr i16, i16* %2, i64 %28
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i16, i16* %3, i64 %26
  %35 = bitcast i16* %34 to i8*
  %36 = getelementptr i16, i16* %3, i64 %28
  %37 = bitcast i16* %36 to i8*
  br i1 %10, label %38, label %99

38:                                               ; preds = %15
  br i1 %12, label %39, label %41

39:                                               ; preds = %98, %41, %38
  %40 = phi i64 [ 0, %41 ], [ 0, %38 ], [ %13, %98 ]
  br label %107

41:                                               ; preds = %38
  %42 = icmp ult i8* %23, %29
  %43 = icmp ult i8* %27, %25
  %44 = and i1 %42, %43
  %45 = icmp ult i8* %23, %33
  %46 = icmp ugt i8* %25, %31
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = icmp ult i8* %23, %37
  %50 = icmp ugt i8* %25, %35
  %51 = and i1 %49, %50
  %52 = or i1 %48, %51
  %53 = icmp ult i8* %27, %33
  %54 = icmp ugt i8* %29, %31
  %55 = and i1 %53, %54
  %56 = or i1 %52, %55
  %57 = icmp ult i8* %27, %37
  %58 = icmp ugt i8* %29, %35
  %59 = and i1 %57, %58
  %60 = or i1 %56, %59
  br i1 %60, label %39, label %61

61:                                               ; preds = %41, %61
  %62 = phi i64 [ %96, %61 ], [ 0, %41 ]
  %63 = getelementptr inbounds i16, i16* %20, i64 %62
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !105
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = getelementptr inbounds i16, i16* %19, i64 %62
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !108
  %70 = sext <8 x i16> %69 to <8 x i32>
  %71 = sub nsw <8 x i32> %66, %70
  %72 = icmp slt <8 x i32> %71, zeroinitializer
  %73 = sub nsw <8 x i32> zeroinitializer, %71
  %74 = select <8 x i1> %72, <8 x i32> %73, <8 x i32> %71
  %75 = add nuw nsw <8 x i32> %74, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %76 = lshr <8 x i32> %75, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %77 = icmp ult <8 x i32> %76, <i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26>
  %78 = select <8 x i1> %77, <8 x i32> %76, <8 x i32> <i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26>
  %79 = add nuw nsw <8 x i32> %78, <i32 38, i32 38, i32 38, i32 38, i32 38, i32 38, i32 38, i32 38>
  %80 = mul nsw <8 x i32> %79, %66
  %81 = sub nuw nsw <8 x i32> <i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26, i32 26>, %78
  %82 = mul nsw <8 x i32> %81, %70
  %83 = add nsw <8 x i32> %82, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %84 = add nsw <8 x i32> %83, %80
  %85 = ashr <8 x i32> %84, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %86 = icmp slt <8 x i32> %85, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %87 = select <8 x i1> %86, <8 x i32> %85, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = icmp sgt <8 x i32> %87, zeroinitializer
  %89 = select <8 x i1> %88, <8 x i32> %87, <8 x i32> zeroinitializer
  %90 = trunc <8 x i32> %89 to <8 x i8>
  %91 = getelementptr inbounds i8, i8* %21, i64 %62
  %92 = bitcast i8* %91 to <8 x i8>*
  store <8 x i8> %90, <8 x i8>* %92, align 1, !alias.scope !110, !noalias !112
  %93 = trunc <8 x i32> %79 to <8 x i8>
  %94 = getelementptr inbounds i8, i8* %17, i64 %62
  %95 = bitcast i8* %94 to <8 x i8>*
  store <8 x i8> %93, <8 x i8>* %95, align 1, !alias.scope !114, !noalias !115
  %96 = add i64 %62, 8
  %97 = icmp eq i64 %96, %13
  br i1 %97, label %98, label %61, !llvm.loop !116

98:                                               ; preds = %61
  br i1 %14, label %99, label %39

99:                                               ; preds = %107, %98, %15
  %100 = getelementptr inbounds i16, i16* %20, i64 %9
  %101 = getelementptr inbounds i16, i16* %19, i64 %9
  %102 = getelementptr inbounds i8, i8* %21, i64 %1
  %103 = getelementptr inbounds i8, i8* %17, i64 %9
  %104 = add nsw i32 %18, -1
  %105 = icmp eq i32 %104, 0
  %106 = add i64 %16, 1
  br i1 %105, label %140, label %15

107:                                              ; preds = %39, %107
  %108 = phi i64 [ %138, %107 ], [ %40, %39 ]
  %109 = getelementptr inbounds i16, i16* %20, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = sext i16 %110 to i32
  %112 = getelementptr inbounds i16, i16* %19, i64 %108
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  %115 = sub nsw i32 %111, %114
  %116 = icmp slt i32 %115, 0
  %117 = sub nsw i32 0, %115
  %118 = select i1 %116, i32 %117, i32 %115
  %119 = add nuw nsw i32 %118, 8
  %120 = lshr i32 %119, 8
  %121 = icmp ult i32 %120, 26
  %122 = select i1 %121, i32 %120, i32 26
  %123 = add nuw nsw i32 %122, 38
  %124 = mul nsw i32 %123, %111
  %125 = sub nuw nsw i32 26, %122
  %126 = mul nsw i32 %125, %114
  %127 = add nsw i32 %126, 512
  %128 = add nsw i32 %127, %124
  %129 = ashr i32 %128, 10
  %130 = icmp slt i32 %129, 255
  %131 = select i1 %130, i32 %129, i32 255
  %132 = icmp sgt i32 %131, 0
  %133 = select i1 %132, i32 %131, i32 0
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds i8, i8* %21, i64 %108
  store i8 %134, i8* %135, align 1
  %136 = trunc i32 %123 to i8
  %137 = getelementptr inbounds i8, i8* %17, i64 %108
  store i8 %136, i8* %137, align 1
  %138 = add nuw nsw i64 %108, 1
  %139 = icmp eq i64 %138, %11
  br i1 %139, label %99, label %107, !llvm.loop !117

140:                                              ; preds = %99
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @w_mask_422_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i8* nocapture, i32) #2 {
  tail call fastcc void @w_mask_c(i8* %0, i64 %1, i16* %2, i16* %3, i32 %4, i32 %5, i8* %6, i32 %7, i32 1, i32 0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @w_mask_420_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i8* nocapture, i32) #2 {
  tail call fastcc void @w_mask_c(i8* %0, i64 %1, i16* %2, i16* %3, i32 %4, i32 %5, i8* %6, i32 %7, i32 1, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @warp_affine_8x8_c(i8* nocapture, i64, i8* nocapture readonly, i64, i16* nocapture readonly, i32, i32) #1 {
  %8 = alloca [120 x i16], align 16
  %9 = bitcast [120 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 240, i1 false)
  %10 = getelementptr inbounds [120 x i16], [120 x i16]* %8, i64 0, i64 0
  %11 = mul i64 %3, -3
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i16, i16* %4, i64 1
  br label %14

14:                                               ; preds = %36, %7
  %15 = phi i8* [ %12, %7 ], [ %37, %36 ]
  %16 = phi i32 [ 0, %7 ], [ %39, %36 ]
  %17 = phi i16* [ %10, %7 ], [ %38, %36 ]
  %18 = phi i32 [ %5, %7 ], [ %42, %36 ]
  %19 = getelementptr inbounds i8, i8* %15, i64 -3
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 -2
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %15, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = load i8, i8* %15, align 1
  %26 = getelementptr inbounds i8, i8* %15, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 3
  %31 = load i8, i8* %30, align 1
  br label %44

32:                                               ; preds = %36
  %33 = getelementptr inbounds [120 x i16], [120 x i16]* %8, i64 0, i64 24
  %34 = getelementptr inbounds i16, i16* %4, i64 2
  %35 = getelementptr inbounds i16, i16* %4, i64 3
  br label %117

36:                                               ; preds = %44
  %37 = getelementptr inbounds i8, i8* %15, i64 %3
  %38 = getelementptr inbounds i16, i16* %17, i64 8
  %39 = add nuw nsw i32 %16, 1
  %40 = load i16, i16* %13, align 2
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %18, %41
  %43 = icmp eq i32 %39, 15
  br i1 %43, label %32, label %14

44:                                               ; preds = %44, %14
  %45 = phi i8 [ %31, %14 ], [ %99, %44 ]
  %46 = phi i8 [ %29, %14 ], [ %45, %44 ]
  %47 = phi i8 [ %27, %14 ], [ %46, %44 ]
  %48 = phi i8 [ %25, %14 ], [ %47, %44 ]
  %49 = phi i8 [ %24, %14 ], [ %48, %44 ]
  %50 = phi i8 [ %22, %14 ], [ %49, %44 ]
  %51 = phi i8 [ %20, %14 ], [ %50, %44 ]
  %52 = phi i64 [ 0, %14 ], [ %81, %44 ]
  %53 = phi i32 [ %18, %14 ], [ %115, %44 ]
  %54 = add nsw i32 %53, 512
  %55 = ashr i32 %54, 10
  %56 = add nsw i32 %55, 64
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 0
  %59 = load i8, i8* %58, align 8
  %60 = sext i8 %59 to i32
  %61 = zext i8 %51 to i32
  %62 = mul nsw i32 %61, %60
  %63 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = zext i8 %50 to i32
  %67 = mul nsw i32 %66, %65
  %68 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 2
  %69 = load i8, i8* %68, align 2
  %70 = sext i8 %69 to i32
  %71 = zext i8 %49 to i32
  %72 = mul nsw i32 %71, %70
  %73 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = zext i8 %48 to i32
  %77 = mul nsw i32 %76, %75
  %78 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 4
  %79 = load i8, i8* %78, align 4
  %80 = sext i8 %79 to i32
  %81 = add nuw nsw i64 %52, 1
  %82 = zext i8 %47 to i32
  %83 = mul nsw i32 %82, %80
  %84 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 5
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = zext i8 %46 to i32
  %88 = mul nsw i32 %87, %86
  %89 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = sext i8 %90 to i32
  %92 = zext i8 %45 to i32
  %93 = mul nsw i32 %92, %91
  %94 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = add nuw nsw i64 %52, 4
  %98 = getelementptr inbounds i8, i8* %15, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = mul nsw i32 %100, %96
  %102 = add nsw i32 %62, 4
  %103 = add nsw i32 %102, %67
  %104 = add nsw i32 %103, %72
  %105 = add nsw i32 %104, %77
  %106 = add nsw i32 %105, %83
  %107 = add nsw i32 %106, %88
  %108 = add nsw i32 %107, %93
  %109 = add nsw i32 %108, %101
  %110 = lshr i32 %109, 3
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %17, i64 %52
  store i16 %111, i16* %112, align 2
  %113 = load i16, i16* %4, align 2
  %114 = sext i16 %113 to i32
  %115 = add nsw i32 %53, %114
  %116 = icmp eq i64 %81, 8
  br i1 %116, label %36, label %44

117:                                              ; preds = %123, %32
  %118 = phi i8* [ %0, %32 ], [ %125, %123 ]
  %119 = phi i32 [ 0, %32 ], [ %126, %123 ]
  %120 = phi i16* [ %33, %32 ], [ %124, %123 ]
  %121 = phi i32 [ %6, %32 ], [ %129, %123 ]
  br label %131

122:                                              ; preds = %123
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %9) #7
  ret void

123:                                              ; preds = %131
  %124 = getelementptr inbounds i16, i16* %120, i64 8
  %125 = getelementptr inbounds i8, i8* %118, i64 %1
  %126 = add nuw nsw i32 %119, 1
  %127 = load i16, i16* %35, align 2
  %128 = sext i16 %127 to i32
  %129 = add nsw i32 %121, %128
  %130 = icmp eq i32 %126, 8
  br i1 %130, label %122, label %117

131:                                              ; preds = %131, %117
  %132 = phi i64 [ 0, %117 ], [ %222, %131 ]
  %133 = phi i32 [ %121, %117 ], [ %225, %131 ]
  %134 = add nsw i32 %133, 512
  %135 = ashr i32 %134, 10
  %136 = add nsw i32 %135, 64
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 0
  %139 = load i8, i8* %138, align 8
  %140 = sext i8 %139 to i32
  %141 = shl i64 %132, 32
  %142 = add i64 %141, -103079215104
  %143 = ashr exact i64 %142, 32
  %144 = getelementptr inbounds i16, i16* %120, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = sext i16 %145 to i32
  %147 = mul nsw i32 %146, %140
  %148 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 1
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = shl i64 %132, 32
  %152 = add i64 %151, -68719476736
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds i16, i16* %120, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  %157 = mul nsw i32 %156, %150
  %158 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 2
  %159 = load i8, i8* %158, align 2
  %160 = sext i8 %159 to i32
  %161 = shl i64 %132, 32
  %162 = add i64 %161, -34359738368
  %163 = ashr exact i64 %162, 32
  %164 = getelementptr inbounds i16, i16* %120, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i32
  %167 = mul nsw i32 %166, %160
  %168 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 3
  %169 = load i8, i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = getelementptr inbounds i16, i16* %120, i64 %132
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  %174 = mul nsw i32 %173, %170
  %175 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 4
  %176 = load i8, i8* %175, align 4
  %177 = sext i8 %176 to i32
  %178 = add nuw nsw i64 %132, 8
  %179 = getelementptr inbounds i16, i16* %120, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = sext i16 %180 to i32
  %182 = mul nsw i32 %181, %177
  %183 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 5
  %184 = load i8, i8* %183, align 1
  %185 = sext i8 %184 to i32
  %186 = add nuw nsw i64 %132, 16
  %187 = getelementptr inbounds i16, i16* %120, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = mul nsw i32 %189, %185
  %191 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 6
  %192 = load i8, i8* %191, align 2
  %193 = sext i8 %192 to i32
  %194 = add nuw nsw i64 %132, 24
  %195 = getelementptr inbounds i16, i16* %120, i64 %194
  %196 = load i16, i16* %195, align 2
  %197 = sext i16 %196 to i32
  %198 = mul nsw i32 %197, %193
  %199 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 7
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = add nuw nsw i64 %132, 32
  %203 = getelementptr inbounds i16, i16* %120, i64 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = mul nsw i32 %205, %201
  %207 = add nsw i32 %147, 1024
  %208 = add nsw i32 %207, %157
  %209 = add nsw i32 %208, %167
  %210 = add nsw i32 %209, %174
  %211 = add nsw i32 %210, %182
  %212 = add nsw i32 %211, %190
  %213 = add nsw i32 %212, %198
  %214 = add nsw i32 %213, %206
  %215 = ashr i32 %214, 11
  %216 = icmp slt i32 %215, 255
  %217 = select i1 %216, i32 %215, i32 255
  %218 = icmp sgt i32 %217, 0
  %219 = select i1 %218, i32 %217, i32 0
  %220 = trunc i32 %219 to i8
  %221 = getelementptr inbounds i8, i8* %118, i64 %132
  store i8 %220, i8* %221, align 1
  %222 = add nuw nsw i64 %132, 1
  %223 = load i16, i16* %34, align 2
  %224 = sext i16 %223 to i32
  %225 = add nsw i32 %133, %224
  %226 = icmp eq i64 %222, 8
  br i1 %226, label %123, label %131
}

; Function Attrs: nounwind ssp uwtable
define internal void @warp_affine_8x8t_c(i16* nocapture, i64, i8* nocapture readonly, i64, i16* nocapture readonly, i32, i32) #1 {
  %8 = alloca [120 x i16], align 16
  %9 = bitcast [120 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 240, i1 false)
  %10 = getelementptr inbounds [120 x i16], [120 x i16]* %8, i64 0, i64 0
  %11 = mul i64 %3, -3
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i16, i16* %4, i64 1
  br label %14

14:                                               ; preds = %36, %7
  %15 = phi i8* [ %12, %7 ], [ %37, %36 ]
  %16 = phi i32 [ 0, %7 ], [ %39, %36 ]
  %17 = phi i16* [ %10, %7 ], [ %38, %36 ]
  %18 = phi i32 [ %5, %7 ], [ %42, %36 ]
  %19 = getelementptr inbounds i8, i8* %15, i64 -3
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 -2
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %15, i64 -1
  %24 = load i8, i8* %23, align 1
  %25 = load i8, i8* %15, align 1
  %26 = getelementptr inbounds i8, i8* %15, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 3
  %31 = load i8, i8* %30, align 1
  br label %44

32:                                               ; preds = %36
  %33 = getelementptr inbounds [120 x i16], [120 x i16]* %8, i64 0, i64 24
  %34 = getelementptr inbounds i16, i16* %4, i64 2
  %35 = getelementptr inbounds i16, i16* %4, i64 3
  br label %117

36:                                               ; preds = %44
  %37 = getelementptr inbounds i8, i8* %15, i64 %3
  %38 = getelementptr inbounds i16, i16* %17, i64 8
  %39 = add nuw nsw i32 %16, 1
  %40 = load i16, i16* %13, align 2
  %41 = sext i16 %40 to i32
  %42 = add nsw i32 %18, %41
  %43 = icmp eq i32 %39, 15
  br i1 %43, label %32, label %14

44:                                               ; preds = %44, %14
  %45 = phi i8 [ %31, %14 ], [ %99, %44 ]
  %46 = phi i8 [ %29, %14 ], [ %45, %44 ]
  %47 = phi i8 [ %27, %14 ], [ %46, %44 ]
  %48 = phi i8 [ %25, %14 ], [ %47, %44 ]
  %49 = phi i8 [ %24, %14 ], [ %48, %44 ]
  %50 = phi i8 [ %22, %14 ], [ %49, %44 ]
  %51 = phi i8 [ %20, %14 ], [ %50, %44 ]
  %52 = phi i64 [ 0, %14 ], [ %81, %44 ]
  %53 = phi i32 [ %18, %14 ], [ %115, %44 ]
  %54 = add nsw i32 %53, 512
  %55 = ashr i32 %54, 10
  %56 = add nsw i32 %55, 64
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 0
  %59 = load i8, i8* %58, align 8
  %60 = sext i8 %59 to i32
  %61 = zext i8 %51 to i32
  %62 = mul nsw i32 %61, %60
  %63 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = zext i8 %50 to i32
  %67 = mul nsw i32 %66, %65
  %68 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 2
  %69 = load i8, i8* %68, align 2
  %70 = sext i8 %69 to i32
  %71 = zext i8 %49 to i32
  %72 = mul nsw i32 %71, %70
  %73 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = zext i8 %48 to i32
  %77 = mul nsw i32 %76, %75
  %78 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 4
  %79 = load i8, i8* %78, align 4
  %80 = sext i8 %79 to i32
  %81 = add nuw nsw i64 %52, 1
  %82 = zext i8 %47 to i32
  %83 = mul nsw i32 %82, %80
  %84 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 5
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = zext i8 %46 to i32
  %88 = mul nsw i32 %87, %86
  %89 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 6
  %90 = load i8, i8* %89, align 2
  %91 = sext i8 %90 to i32
  %92 = zext i8 %45 to i32
  %93 = mul nsw i32 %92, %91
  %94 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %57, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = add nuw nsw i64 %52, 4
  %98 = getelementptr inbounds i8, i8* %15, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = mul nsw i32 %100, %96
  %102 = add nsw i32 %62, 4
  %103 = add nsw i32 %102, %67
  %104 = add nsw i32 %103, %72
  %105 = add nsw i32 %104, %77
  %106 = add nsw i32 %105, %83
  %107 = add nsw i32 %106, %88
  %108 = add nsw i32 %107, %93
  %109 = add nsw i32 %108, %101
  %110 = lshr i32 %109, 3
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %17, i64 %52
  store i16 %111, i16* %112, align 2
  %113 = load i16, i16* %4, align 2
  %114 = sext i16 %113 to i32
  %115 = add nsw i32 %53, %114
  %116 = icmp eq i64 %81, 8
  br i1 %116, label %36, label %44

117:                                              ; preds = %123, %32
  %118 = phi i16* [ %0, %32 ], [ %125, %123 ]
  %119 = phi i32 [ 0, %32 ], [ %126, %123 ]
  %120 = phi i16* [ %33, %32 ], [ %124, %123 ]
  %121 = phi i32 [ %6, %32 ], [ %129, %123 ]
  br label %131

122:                                              ; preds = %123
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %9) #7
  ret void

123:                                              ; preds = %131
  %124 = getelementptr inbounds i16, i16* %120, i64 8
  %125 = getelementptr inbounds i16, i16* %118, i64 %1
  %126 = add nuw nsw i32 %119, 1
  %127 = load i16, i16* %35, align 2
  %128 = sext i16 %127 to i32
  %129 = add nsw i32 %121, %128
  %130 = icmp eq i32 %126, 8
  br i1 %130, label %122, label %117

131:                                              ; preds = %131, %117
  %132 = phi i64 [ 0, %117 ], [ %218, %131 ]
  %133 = phi i32 [ %121, %117 ], [ %221, %131 ]
  %134 = add nsw i32 %133, 512
  %135 = ashr i32 %134, 10
  %136 = add nsw i32 %135, 64
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 0
  %139 = load i8, i8* %138, align 8
  %140 = sext i8 %139 to i32
  %141 = shl i64 %132, 32
  %142 = add i64 %141, -103079215104
  %143 = ashr exact i64 %142, 32
  %144 = getelementptr inbounds i16, i16* %120, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = sext i16 %145 to i32
  %147 = mul nsw i32 %146, %140
  %148 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 1
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = shl i64 %132, 32
  %152 = add i64 %151, -68719476736
  %153 = ashr exact i64 %152, 32
  %154 = getelementptr inbounds i16, i16* %120, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  %157 = mul nsw i32 %156, %150
  %158 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 2
  %159 = load i8, i8* %158, align 2
  %160 = sext i8 %159 to i32
  %161 = shl i64 %132, 32
  %162 = add i64 %161, -34359738368
  %163 = ashr exact i64 %162, 32
  %164 = getelementptr inbounds i16, i16* %120, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i32
  %167 = mul nsw i32 %166, %160
  %168 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 3
  %169 = load i8, i8* %168, align 1
  %170 = sext i8 %169 to i32
  %171 = getelementptr inbounds i16, i16* %120, i64 %132
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  %174 = mul nsw i32 %173, %170
  %175 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 4
  %176 = load i8, i8* %175, align 4
  %177 = sext i8 %176 to i32
  %178 = add nuw nsw i64 %132, 8
  %179 = getelementptr inbounds i16, i16* %120, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = sext i16 %180 to i32
  %182 = mul nsw i32 %181, %177
  %183 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 5
  %184 = load i8, i8* %183, align 1
  %185 = sext i8 %184 to i32
  %186 = add nuw nsw i64 %132, 16
  %187 = getelementptr inbounds i16, i16* %120, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = mul nsw i32 %189, %185
  %191 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 6
  %192 = load i8, i8* %191, align 2
  %193 = sext i8 %192 to i32
  %194 = add nuw nsw i64 %132, 24
  %195 = getelementptr inbounds i16, i16* %120, i64 %194
  %196 = load i16, i16* %195, align 2
  %197 = sext i16 %196 to i32
  %198 = mul nsw i32 %197, %193
  %199 = getelementptr inbounds [193 x [8 x i8]], [193 x [8 x i8]]* @dav1d_mc_warp_filter, i64 0, i64 %137, i64 7
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = add nuw nsw i64 %132, 32
  %203 = getelementptr inbounds i16, i16* %120, i64 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = mul nsw i32 %205, %201
  %207 = add nsw i32 %147, 64
  %208 = add nsw i32 %207, %157
  %209 = add nsw i32 %208, %167
  %210 = add nsw i32 %209, %174
  %211 = add nsw i32 %210, %182
  %212 = add nsw i32 %211, %190
  %213 = add nsw i32 %212, %198
  %214 = add nsw i32 %213, %206
  %215 = lshr i32 %214, 7
  %216 = trunc i32 %215 to i16
  %217 = getelementptr inbounds i16, i16* %118, i64 %132
  store i16 %216, i16* %217, align 2
  %218 = add nuw nsw i64 %132, 1
  %219 = load i16, i16* %34, align 2
  %220 = sext i16 %219 to i32
  %221 = add nsw i32 %133, %220
  %222 = icmp eq i64 %218, 8
  br i1 %222, label %123, label %131
}

; Function Attrs: nounwind ssp uwtable
define internal void @emu_edge_c(i64, i64, i64, i64, i64, i64, i8* nocapture, i64, i8* nocapture readonly, i64) #1 {
  %11 = trunc i64 %5 to i32
  %12 = trunc i64 %3 to i32
  %13 = add nsw i32 %12, -1
  %14 = trunc i64 %4 to i32
  %15 = trunc i64 %2 to i32
  %16 = add nsw i32 %15, -1
  %17 = sub i32 0, %14
  %18 = trunc i64 %0 to i32
  %19 = add nsw i32 %18, -1
  %20 = icmp slt i32 %17, 0
  %21 = icmp slt i32 %19, %17
  %22 = select i1 %21, i32 %19, i32 %17
  %23 = select i1 %20, i32 0, i32 %22
  %24 = sub i64 %0, %2
  %25 = add i64 %24, %4
  %26 = trunc i64 %25 to i32
  %27 = icmp slt i32 %26, 0
  %28 = icmp slt i32 %19, %26
  %29 = select i1 %28, i32 %19, i32 %26
  %30 = select i1 %27, i32 0, i32 %29
  %31 = add nsw i32 %30, %23
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %32, %0
  tail call void @llvm.assume(i1 %33)
  %34 = sub i32 0, %11
  %35 = trunc i64 %1 to i32
  %36 = add nsw i32 %35, -1
  %37 = icmp slt i32 %34, 0
  %38 = icmp slt i32 %36, %34
  %39 = select i1 %38, i32 %36, i32 %34
  %40 = select i1 %37, i32 0, i32 %39
  %41 = sub i64 %1, %3
  %42 = add i64 %41, %5
  %43 = trunc i64 %42 to i32
  %44 = icmp slt i32 %43, 0
  %45 = icmp slt i32 %36, %43
  %46 = select i1 %45, i32 %36, i32 %43
  %47 = select i1 %44, i32 0, i32 %46
  %48 = add nsw i32 %47, %40
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %49, %1
  tail call void @llvm.assume(i1 %50)
  %51 = sext i32 %40 to i64
  %52 = mul nsw i64 %51, %7
  %53 = getelementptr inbounds i8, i8* %6, i64 %52
  %54 = sext i32 %23 to i64
  %55 = sext i32 %30 to i64
  %56 = sub i32 %18, %23
  %57 = sub i32 %56, %30
  %58 = sub i32 %35, %40
  %59 = sub i32 %58, %47
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %100

61:                                               ; preds = %10
  %62 = icmp slt i32 %11, 0
  %63 = icmp slt i32 %13, %11
  %64 = select i1 %63, i32 %13, i32 %11
  %65 = select i1 %62, i32 0, i32 %64
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %66, %9
  %68 = icmp slt i32 %14, 0
  %69 = icmp slt i32 %16, %14
  %70 = select i1 %69, i32 %16, i32 %14
  %71 = select i1 %68, i32 0, i32 %70
  %72 = sext i32 %71 to i64
  %73 = add nsw i64 %67, %72
  %74 = getelementptr inbounds i8, i8* %8, i64 %73
  %75 = sext i32 %57 to i64
  %76 = icmp eq i32 %23, 0
  %77 = icmp eq i32 %30, 0
  %78 = add i32 %23, -1
  %79 = add i32 %78, %57
  %80 = sext i32 %79 to i64
  %81 = xor i32 %40, -1
  %82 = add i32 %81, %35
  %83 = and i32 %59, 1
  %84 = icmp eq i32 %82, %47
  br i1 %84, label %87, label %85

85:                                               ; preds = %61
  %86 = sub i32 %59, %83
  br label %108

87:                                               ; preds = %186, %61
  %88 = phi i8* [ %53, %61 ], [ %188, %186 ]
  %89 = phi i8* [ %74, %61 ], [ %187, %186 ]
  %90 = icmp eq i32 %83, 0
  br i1 %90, label %100, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds i8, i8* %88, i64 %54
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %89, i64 %75, i1 false)
  br i1 %76, label %95, label %93

93:                                               ; preds = %91
  %94 = load i8, i8* %92, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 %94, i64 %54, i1 false)
  br label %95

95:                                               ; preds = %93, %91
  br i1 %77, label %100, label %96

96:                                               ; preds = %95
  %97 = getelementptr inbounds i8, i8* %92, i64 %75
  %98 = getelementptr inbounds i8, i8* %88, i64 %80
  %99 = load i8, i8* %98, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %97, i8 %99, i64 %55, i1 false)
  br label %100

100:                                              ; preds = %87, %95, %96, %10
  %101 = icmp sgt i32 %40, 0
  br i1 %101, label %102, label %134

102:                                              ; preds = %100
  %103 = add i32 %40, -1
  %104 = and i32 %40, 3
  %105 = icmp ult i32 %103, 3
  br i1 %105, label %124, label %106

106:                                              ; preds = %102
  %107 = sub i32 %40, %104
  br label %147

108:                                              ; preds = %186, %85
  %109 = phi i8* [ %53, %85 ], [ %188, %186 ]
  %110 = phi i8* [ %74, %85 ], [ %187, %186 ]
  %111 = phi i32 [ %86, %85 ], [ %189, %186 ]
  %112 = getelementptr inbounds i8, i8* %109, i64 %54
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %110, i64 %75, i1 false)
  br i1 %76, label %115, label %113

113:                                              ; preds = %108
  %114 = load i8, i8* %112, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 %114, i64 %54, i1 false)
  br label %115

115:                                              ; preds = %108, %113
  br i1 %77, label %120, label %116

116:                                              ; preds = %115
  %117 = getelementptr inbounds i8, i8* %112, i64 %75
  %118 = getelementptr inbounds i8, i8* %109, i64 %80
  %119 = load i8, i8* %118, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 %119, i64 %55, i1 false)
  br label %120

120:                                              ; preds = %115, %116
  %121 = getelementptr inbounds i8, i8* %110, i64 %9
  %122 = getelementptr inbounds i8, i8* %109, i64 %7
  %123 = getelementptr inbounds i8, i8* %122, i64 %54
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %121, i64 %75, i1 false)
  br i1 %76, label %181, label %179

124:                                              ; preds = %147, %102
  %125 = phi i8* [ undef, %102 ], [ %153, %147 ]
  %126 = phi i8* [ %6, %102 ], [ %153, %147 ]
  %127 = icmp eq i32 %104, 0
  br i1 %127, label %134, label %128

128:                                              ; preds = %124, %128
  %129 = phi i8* [ %131, %128 ], [ %126, %124 ]
  %130 = phi i32 [ %132, %128 ], [ %104, %124 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %53, i64 %0, i1 false)
  %131 = getelementptr inbounds i8, i8* %129, i64 %7
  %132 = add i32 %130, -1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %128, !llvm.loop !118

134:                                              ; preds = %124, %128, %100
  %135 = phi i8* [ %6, %100 ], [ %125, %124 ], [ %131, %128 ]
  %136 = icmp sgt i32 %47, 0
  br i1 %136, label %137, label %166

137:                                              ; preds = %134
  %138 = sext i32 %59 to i64
  %139 = mul nsw i64 %138, %7
  %140 = getelementptr inbounds i8, i8* %135, i64 %139
  %141 = sub nsw i64 0, %7
  %142 = add i32 %47, -1
  %143 = and i32 %47, 3
  %144 = icmp ult i32 %142, 3
  br i1 %144, label %156, label %145

145:                                              ; preds = %137
  %146 = sub i32 %47, %143
  br label %167

147:                                              ; preds = %147, %106
  %148 = phi i8* [ %6, %106 ], [ %153, %147 ]
  %149 = phi i32 [ %107, %106 ], [ %154, %147 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %53, i64 %0, i1 false)
  %150 = getelementptr inbounds i8, i8* %148, i64 %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %53, i64 %0, i1 false)
  %151 = getelementptr inbounds i8, i8* %150, i64 %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %53, i64 %0, i1 false)
  %152 = getelementptr inbounds i8, i8* %151, i64 %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* align 1 %53, i64 %0, i1 false)
  %153 = getelementptr inbounds i8, i8* %152, i64 %7
  %154 = add i32 %149, -4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %124, label %147

156:                                              ; preds = %167, %137
  %157 = phi i8* [ %140, %137 ], [ %176, %167 ]
  %158 = icmp eq i32 %143, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %156, %159
  %160 = phi i8* [ %163, %159 ], [ %157, %156 ]
  %161 = phi i32 [ %164, %159 ], [ %143, %156 ]
  %162 = getelementptr inbounds i8, i8* %160, i64 %141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %162, i64 %0, i1 false)
  %163 = getelementptr inbounds i8, i8* %160, i64 %7
  %164 = add i32 %161, -1
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %159, !llvm.loop !120

166:                                              ; preds = %156, %159, %134
  ret void

167:                                              ; preds = %167, %145
  %168 = phi i8* [ %140, %145 ], [ %176, %167 ]
  %169 = phi i32 [ %146, %145 ], [ %177, %167 ]
  %170 = getelementptr inbounds i8, i8* %168, i64 %141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %168, i8* align 1 %170, i64 %0, i1 false)
  %171 = getelementptr inbounds i8, i8* %168, i64 %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %168, i64 %0, i1 false)
  %172 = getelementptr inbounds i8, i8* %171, i64 %7
  %173 = getelementptr inbounds i8, i8* %172, i64 %141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %172, i8* align 1 %173, i64 %0, i1 false)
  %174 = getelementptr inbounds i8, i8* %172, i64 %7
  %175 = getelementptr inbounds i8, i8* %174, i64 %141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %175, i64 %0, i1 false)
  %176 = getelementptr inbounds i8, i8* %174, i64 %7
  %177 = add i32 %169, -4
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %156, label %167

179:                                              ; preds = %120
  %180 = load i8, i8* %123, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %122, i8 %180, i64 %54, i1 false)
  br label %181

181:                                              ; preds = %179, %120
  br i1 %77, label %186, label %182

182:                                              ; preds = %181
  %183 = getelementptr inbounds i8, i8* %123, i64 %75
  %184 = getelementptr inbounds i8, i8* %122, i64 %80
  %185 = load i8, i8* %184, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %183, i8 %185, i64 %55, i1 false)
  br label %186

186:                                              ; preds = %182, %181
  %187 = getelementptr inbounds i8, i8* %121, i64 %9
  %188 = getelementptr inbounds i8, i8* %122, i64 %7
  %189 = add i32 %111, -2
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %87, label %108
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @resize_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32) #2 {
  %10 = icmp sgt i32 %4, 0
  %11 = add nsw i32 %6, -1
  %12 = zext i32 %4 to i64
  %13 = insertelement <4 x i32> undef, i32 %11, i32 0
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %15

15:                                               ; preds = %19, %9
  %16 = phi i32 [ %5, %9 ], [ %22, %19 ]
  %17 = phi i8* [ %2, %9 ], [ %21, %19 ]
  %18 = phi i8* [ %0, %9 ], [ %20, %19 ]
  br i1 %10, label %24, label %19

19:                                               ; preds = %24, %15
  %20 = getelementptr inbounds i8, i8* %18, i64 %1
  %21 = getelementptr inbounds i8, i8* %17, i64 %3
  %22 = add nsw i32 %16, -1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %145, label %15

24:                                               ; preds = %15, %24
  %25 = phi i64 [ %143, %24 ], [ 0, %15 ]
  %26 = phi i32 [ %141, %24 ], [ -1, %15 ]
  %27 = phi i32 [ %142, %24 ], [ %8, %15 ]
  %28 = ashr i32 %27, 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 0
  %31 = load i8, i8* %30, align 8
  %32 = sext i8 %31 to i32
  %33 = add nsw i32 %26, -3
  %34 = icmp slt i32 %33, 0
  %35 = icmp sgt i32 %33, %11
  %36 = select i1 %35, i32 %11, i32 %33
  %37 = select i1 %34, i32 0, i32 %36
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %17, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = add nsw i32 %26, -2
  %46 = icmp slt i32 %45, 0
  %47 = icmp sgt i32 %45, %11
  %48 = select i1 %47, i32 %11, i32 %45
  %49 = select i1 %46, i32 0, i32 %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %17, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 2
  %55 = load i8, i8* %54, align 2
  %56 = sext i8 %55 to i32
  %57 = add nsw i32 %26, -1
  %58 = icmp slt i32 %26, 1
  %59 = icmp sgt i32 %57, %11
  %60 = select i1 %59, i32 %11, i32 %57
  %61 = select i1 %58, i32 0, i32 %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %17, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 3
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp slt i32 %26, 0
  %70 = icmp sgt i32 %26, %11
  %71 = select i1 %70, i32 %11, i32 %26
  %72 = select i1 %69, i32 0, i32 %71
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %17, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 4
  %78 = load i8, i8* %77, align 4
  %79 = sext i8 %78 to i32
  %80 = insertelement <4 x i32> undef, i32 %26, i32 0
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> zeroinitializer
  %82 = add nsw <4 x i32> %81, <i32 1, i32 2, i32 3, i32 4>
  %83 = icmp slt <4 x i32> %82, zeroinitializer
  %84 = icmp sgt <4 x i32> %82, %14
  %85 = select <4 x i1> %84, <4 x i32> %14, <4 x i32> %82
  %86 = select <4 x i1> %83, <4 x i32> zeroinitializer, <4 x i32> %85
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %17, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 5
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = extractelement <4 x i32> %86, i32 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %17, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 6
  %101 = load i8, i8* %100, align 2
  %102 = sext i8 %101 to i32
  %103 = extractelement <4 x i32> %86, i32 2
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %17, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* @dav1d_resize_filter, i64 0, i64 %29, i64 7
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = extractelement <4 x i32> %86, i32 3
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %17, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nsw i32 %41, %32
  %117 = mul nsw i32 %53, %44
  %118 = mul nsw i32 %65, %56
  %119 = mul nsw i32 %76, %68
  %120 = mul nsw i32 %91, %79
  %121 = mul nsw i32 %99, %94
  %122 = mul nsw i32 %107, %102
  %123 = mul nsw i32 %115, %110
  %124 = add nsw i32 %117, %116
  %125 = add nsw i32 %124, %118
  %126 = add nsw i32 %125, %119
  %127 = add nsw i32 %126, %120
  %128 = add nsw i32 %127, %121
  %129 = add nsw i32 %128, %122
  %130 = add nsw i32 %129, %123
  %131 = sub nsw i32 64, %130
  %132 = ashr i32 %131, 7
  %133 = icmp slt i32 %132, 255
  %134 = select i1 %133, i32 %132, i32 255
  %135 = icmp sgt i32 %134, 0
  %136 = select i1 %135, i32 %134, i32 0
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %18, i64 %25
  store i8 %137, i8* %138, align 1
  %139 = add nsw i32 %27, %7
  %140 = ashr i32 %139, 14
  %141 = add nsw i32 %140, %26
  %142 = and i32 %139, 16383
  %143 = add nuw nsw i64 %25, 1
  %144 = icmp eq i64 %143, %12
  br i1 %144, label %19, label %24

145:                                              ; preds = %19
  ret void
}

declare void @dav1d_mc_dsp_init_x86_8bpc(%struct.Dav1dMCDSPContext*) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @put_8tap_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %10 = alloca [17280 x i16], align 16
  %11 = icmp eq i32 %6, 0
  br i1 %11, label %27, label %12

12:                                               ; preds = %9
  %13 = icmp sgt i32 %4, 4
  br i1 %13, label %14, label %20

14:                                               ; preds = %12
  %15 = and i32 %8, 3
  %16 = zext i32 %15 to i64
  %17 = add nsw i32 %6, -1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %16, i64 %18, i64 0
  br label %27

20:                                               ; preds = %12
  %21 = and i32 %8, 1
  %22 = add nuw nsw i32 %21, 3
  %23 = zext i32 %22 to i64
  %24 = add nsw i32 %6, -1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %23, i64 %25, i64 0
  br label %27

27:                                               ; preds = %9, %14, %20
  %28 = phi i8* [ null, %9 ], [ %19, %14 ], [ %26, %20 ]
  %29 = icmp eq i32 %7, 0
  br i1 %29, label %45, label %30

30:                                               ; preds = %27
  %31 = icmp sgt i32 %5, 4
  %32 = ashr i32 %8, 2
  br i1 %31, label %33, label %38

33:                                               ; preds = %30
  %34 = sext i32 %32 to i64
  %35 = add nsw i32 %7, -1
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %34, i64 %36, i64 0
  br label %45

38:                                               ; preds = %30
  %39 = and i32 %32, 1
  %40 = add nuw nsw i32 %39, 3
  %41 = zext i32 %40 to i64
  %42 = add nsw i32 %7, -1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %41, i64 %43, i64 0
  br label %45

45:                                               ; preds = %27, %33, %38
  %46 = phi i8* [ null, %27 ], [ %37, %33 ], [ %44, %38 ]
  %47 = icmp eq i8* %28, null
  %48 = icmp ne i8* %46, null
  br i1 %47, label %588, label %49

49:                                               ; preds = %45
  br i1 %48, label %65, label %50

50:                                               ; preds = %49
  %51 = icmp sgt i32 %4, 0
  %52 = getelementptr inbounds i8, i8* %28, i64 1
  %53 = getelementptr inbounds i8, i8* %28, i64 2
  %54 = getelementptr inbounds i8, i8* %28, i64 3
  %55 = getelementptr inbounds i8, i8* %28, i64 4
  %56 = getelementptr inbounds i8, i8* %28, i64 5
  %57 = getelementptr inbounds i8, i8* %28, i64 6
  %58 = getelementptr inbounds i8, i8* %28, i64 7
  %59 = zext i32 %4 to i64
  %60 = getelementptr i8, i8* %28, i64 8
  %61 = add nuw nsw i64 %59, 4
  %62 = icmp ult i32 %4, 16
  %63 = and i64 %59, 4294967280
  %64 = icmp eq i64 %63, %59
  br label %383

65:                                               ; preds = %49
  %66 = add nsw i32 %5, 7
  %67 = bitcast [17280 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %67) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -86, i64 34560, i1 false)
  %68 = getelementptr inbounds [17280 x i16], [17280 x i16]* %10, i64 0, i64 0
  %69 = mul i64 %3, -3
  %70 = getelementptr inbounds i8, i8* %2, i64 %69
  %71 = icmp sgt i32 %4, 0
  %72 = getelementptr inbounds i8, i8* %28, i64 1
  %73 = getelementptr inbounds i8, i8* %28, i64 2
  %74 = getelementptr inbounds i8, i8* %28, i64 3
  %75 = getelementptr inbounds i8, i8* %28, i64 4
  %76 = getelementptr inbounds i8, i8* %28, i64 5
  %77 = getelementptr inbounds i8, i8* %28, i64 6
  %78 = getelementptr inbounds i8, i8* %28, i64 7
  %79 = zext i32 %4 to i64
  br label %80

80:                                               ; preds = %98, %65
  %81 = phi i8* [ %70, %65 ], [ %100, %98 ]
  %82 = phi i32 [ %66, %65 ], [ %101, %98 ]
  %83 = phi i16* [ %68, %65 ], [ %99, %98 ]
  br i1 %71, label %84, label %98

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %81, i64 -3
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds i8, i8* %81, i64 -2
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %81, i64 -1
  %90 = load i8, i8* %89, align 1
  %91 = load i8, i8* %81, align 1
  %92 = getelementptr inbounds i8, i8* %81, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %81, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = getelementptr inbounds i8, i8* %81, i64 3
  %97 = load i8, i8* %96, align 1
  br label %103

98:                                               ; preds = %103, %80
  %99 = getelementptr inbounds i16, i16* %83, i64 128
  %100 = getelementptr inbounds i8, i8* %81, i64 %3
  %101 = add nsw i32 %82, -1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %160, label %80

103:                                              ; preds = %103, %84
  %104 = phi i8 [ %97, %84 ], [ %145, %103 ]
  %105 = phi i8 [ %95, %84 ], [ %104, %103 ]
  %106 = phi i8 [ %93, %84 ], [ %105, %103 ]
  %107 = phi i8 [ %91, %84 ], [ %106, %103 ]
  %108 = phi i8 [ %90, %84 ], [ %107, %103 ]
  %109 = phi i8 [ %88, %84 ], [ %108, %103 ]
  %110 = phi i8 [ %86, %84 ], [ %109, %103 ]
  %111 = phi i64 [ 0, %84 ], [ %130, %103 ]
  %112 = load i8, i8* %28, align 1
  %113 = sext i8 %112 to i32
  %114 = zext i8 %110 to i32
  %115 = mul nsw i32 %114, %113
  %116 = load i8, i8* %72, align 1
  %117 = sext i8 %116 to i32
  %118 = zext i8 %109 to i32
  %119 = mul nsw i32 %118, %117
  %120 = load i8, i8* %73, align 1
  %121 = sext i8 %120 to i32
  %122 = zext i8 %108 to i32
  %123 = mul nsw i32 %122, %121
  %124 = load i8, i8* %74, align 1
  %125 = sext i8 %124 to i32
  %126 = zext i8 %107 to i32
  %127 = mul nsw i32 %126, %125
  %128 = load i8, i8* %75, align 1
  %129 = sext i8 %128 to i32
  %130 = add nuw nsw i64 %111, 1
  %131 = zext i8 %106 to i32
  %132 = mul nsw i32 %131, %129
  %133 = load i8, i8* %76, align 1
  %134 = sext i8 %133 to i32
  %135 = zext i8 %105 to i32
  %136 = mul nsw i32 %135, %134
  %137 = load i8, i8* %77, align 1
  %138 = sext i8 %137 to i32
  %139 = zext i8 %104 to i32
  %140 = mul nsw i32 %139, %138
  %141 = load i8, i8* %78, align 1
  %142 = sext i8 %141 to i32
  %143 = add nuw nsw i64 %111, 4
  %144 = getelementptr inbounds i8, i8* %81, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nsw i32 %146, %142
  %148 = add nsw i32 %115, 2
  %149 = add nsw i32 %148, %119
  %150 = add nsw i32 %149, %123
  %151 = add nsw i32 %150, %127
  %152 = add nsw i32 %151, %132
  %153 = add nsw i32 %152, %136
  %154 = add nsw i32 %153, %140
  %155 = add nsw i32 %154, %147
  %156 = lshr i32 %155, 2
  %157 = trunc i32 %156 to i16
  %158 = getelementptr inbounds i16, i16* %83, i64 %111
  store i16 %157, i16* %158, align 2
  %159 = icmp eq i64 %130, %79
  br i1 %159, label %98, label %103

160:                                              ; preds = %98
  %161 = getelementptr inbounds [17280 x i16], [17280 x i16]* %10, i64 0, i64 384
  %162 = getelementptr inbounds i8, i8* %46, i64 1
  %163 = getelementptr inbounds i8, i8* %46, i64 2
  %164 = getelementptr inbounds i8, i8* %46, i64 3
  %165 = getelementptr inbounds i8, i8* %46, i64 4
  %166 = getelementptr inbounds i8, i8* %46, i64 5
  %167 = getelementptr inbounds i8, i8* %46, i64 6
  %168 = getelementptr inbounds i8, i8* %46, i64 7
  %169 = zext i32 %4 to i64
  %170 = getelementptr i8, i8* %46, i64 8
  %171 = add nuw nsw i64 %169, 896
  %172 = icmp ult i32 %4, 8
  %173 = and i64 %169, 4294967288
  %174 = icmp eq i64 %173, %169
  br label %175

175:                                              ; preds = %302, %160
  %176 = phi i64 [ %307, %302 ], [ 0, %160 ]
  %177 = phi i32 [ %305, %302 ], [ %5, %160 ]
  %178 = phi i8* [ %304, %302 ], [ %0, %160 ]
  %179 = phi i16* [ %303, %302 ], [ %161, %160 ]
  %180 = mul i64 %176, %1
  %181 = getelementptr i8, i8* %0, i64 %180
  %182 = add i64 %180, %169
  %183 = getelementptr i8, i8* %0, i64 %182
  %184 = shl nuw nsw i64 %176, 7
  %185 = getelementptr [17280 x i16], [17280 x i16]* %10, i64 0, i64 %184
  %186 = bitcast i16* %185 to i8*
  %187 = add i64 %171, %184
  %188 = getelementptr [17280 x i16], [17280 x i16]* %10, i64 0, i64 %187
  %189 = bitcast i16* %188 to i8*
  br i1 %71, label %190, label %302

190:                                              ; preds = %175
  br i1 %172, label %191, label %193

191:                                              ; preds = %301, %193, %190
  %192 = phi i64 [ 0, %193 ], [ 0, %190 ], [ %173, %301 ]
  br label %308

193:                                              ; preds = %190
  %194 = icmp ult i8* %181, %170
  %195 = icmp ult i8* %168, %183
  %196 = and i1 %194, %195
  %197 = icmp ult i8* %181, %189
  %198 = icmp ugt i8* %183, %186
  %199 = and i1 %197, %198
  %200 = or i1 %196, %199
  br i1 %200, label %191, label %201

201:                                              ; preds = %193
  %202 = load i8, i8* %46, align 1, !alias.scope !121
  %203 = insertelement <8 x i8> undef, i8 %202, i32 0
  %204 = shufflevector <8 x i8> %203, <8 x i8> undef, <8 x i32> zeroinitializer
  %205 = sext <8 x i8> %204 to <8 x i32>
  %206 = load i8, i8* %162, align 1, !alias.scope !121
  %207 = insertelement <8 x i8> undef, i8 %206, i32 0
  %208 = shufflevector <8 x i8> %207, <8 x i8> undef, <8 x i32> zeroinitializer
  %209 = sext <8 x i8> %208 to <8 x i32>
  %210 = load i8, i8* %163, align 1, !alias.scope !121
  %211 = insertelement <8 x i8> undef, i8 %210, i32 0
  %212 = shufflevector <8 x i8> %211, <8 x i8> undef, <8 x i32> zeroinitializer
  %213 = sext <8 x i8> %212 to <8 x i32>
  %214 = load i8, i8* %164, align 1, !alias.scope !121
  %215 = insertelement <8 x i8> undef, i8 %214, i32 0
  %216 = shufflevector <8 x i8> %215, <8 x i8> undef, <8 x i32> zeroinitializer
  %217 = sext <8 x i8> %216 to <8 x i32>
  %218 = load i8, i8* %165, align 1, !alias.scope !121
  %219 = insertelement <8 x i8> undef, i8 %218, i32 0
  %220 = shufflevector <8 x i8> %219, <8 x i8> undef, <8 x i32> zeroinitializer
  %221 = sext <8 x i8> %220 to <8 x i32>
  %222 = load i8, i8* %166, align 1, !alias.scope !121
  %223 = insertelement <8 x i8> undef, i8 %222, i32 0
  %224 = shufflevector <8 x i8> %223, <8 x i8> undef, <8 x i32> zeroinitializer
  %225 = sext <8 x i8> %224 to <8 x i32>
  %226 = load i8, i8* %167, align 1, !alias.scope !121
  %227 = insertelement <8 x i8> undef, i8 %226, i32 0
  %228 = shufflevector <8 x i8> %227, <8 x i8> undef, <8 x i32> zeroinitializer
  %229 = sext <8 x i8> %228 to <8 x i32>
  %230 = load i8, i8* %168, align 1, !alias.scope !121
  %231 = insertelement <8 x i8> undef, i8 %230, i32 0
  %232 = shufflevector <8 x i8> %231, <8 x i8> undef, <8 x i32> zeroinitializer
  %233 = sext <8 x i8> %232 to <8 x i32>
  br label %234

234:                                              ; preds = %234, %201
  %235 = phi i64 [ 0, %201 ], [ %299, %234 ]
  %236 = add nsw i64 %235, -384
  %237 = getelementptr inbounds i16, i16* %179, i64 %236
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !124
  %240 = sext <8 x i16> %239 to <8 x i32>
  %241 = mul nsw <8 x i32> %240, %205
  %242 = add nsw i64 %235, -256
  %243 = getelementptr inbounds i16, i16* %179, i64 %242
  %244 = bitcast i16* %243 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2, !alias.scope !124
  %246 = sext <8 x i16> %245 to <8 x i32>
  %247 = mul nsw <8 x i32> %246, %209
  %248 = add nsw i64 %235, -128
  %249 = getelementptr inbounds i16, i16* %179, i64 %248
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !124
  %252 = sext <8 x i16> %251 to <8 x i32>
  %253 = mul nsw <8 x i32> %252, %213
  %254 = getelementptr inbounds i16, i16* %179, i64 %235
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !124
  %257 = sext <8 x i16> %256 to <8 x i32>
  %258 = mul nsw <8 x i32> %257, %217
  %259 = add nuw nsw i64 %235, 128
  %260 = getelementptr inbounds i16, i16* %179, i64 %259
  %261 = bitcast i16* %260 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !124
  %263 = sext <8 x i16> %262 to <8 x i32>
  %264 = mul nsw <8 x i32> %263, %221
  %265 = add nuw nsw i64 %235, 256
  %266 = getelementptr inbounds i16, i16* %179, i64 %265
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2, !alias.scope !124
  %269 = sext <8 x i16> %268 to <8 x i32>
  %270 = mul nsw <8 x i32> %269, %225
  %271 = add nuw nsw i64 %235, 384
  %272 = getelementptr inbounds i16, i16* %179, i64 %271
  %273 = bitcast i16* %272 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !124
  %275 = sext <8 x i16> %274 to <8 x i32>
  %276 = mul nsw <8 x i32> %275, %229
  %277 = add nuw nsw i64 %235, 512
  %278 = getelementptr inbounds i16, i16* %179, i64 %277
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2, !alias.scope !124
  %281 = sext <8 x i16> %280 to <8 x i32>
  %282 = mul nsw <8 x i32> %281, %233
  %283 = add nsw <8 x i32> %241, <i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512, i32 512>
  %284 = add nsw <8 x i32> %283, %247
  %285 = add nsw <8 x i32> %284, %253
  %286 = add nsw <8 x i32> %285, %258
  %287 = add nsw <8 x i32> %286, %264
  %288 = add nsw <8 x i32> %287, %270
  %289 = add nsw <8 x i32> %288, %276
  %290 = add nsw <8 x i32> %289, %282
  %291 = ashr <8 x i32> %290, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %292 = icmp slt <8 x i32> %291, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %293 = select <8 x i1> %292, <8 x i32> %291, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %294 = icmp sgt <8 x i32> %293, zeroinitializer
  %295 = select <8 x i1> %294, <8 x i32> %293, <8 x i32> zeroinitializer
  %296 = trunc <8 x i32> %295 to <8 x i8>
  %297 = getelementptr inbounds i8, i8* %178, i64 %235
  %298 = bitcast i8* %297 to <8 x i8>*
  store <8 x i8> %296, <8 x i8>* %298, align 1, !alias.scope !126, !noalias !128
  %299 = add i64 %235, 8
  %300 = icmp eq i64 %299, %173
  br i1 %300, label %301, label %234, !llvm.loop !129

301:                                              ; preds = %234
  br i1 %174, label %302, label %191

302:                                              ; preds = %308, %301, %175
  %303 = getelementptr inbounds i16, i16* %179, i64 128
  %304 = getelementptr inbounds i8, i8* %178, i64 %1
  %305 = add nsw i32 %177, -1
  %306 = icmp eq i32 %305, 0
  %307 = add i64 %176, 1
  br i1 %306, label %382, label %175

308:                                              ; preds = %191, %308
  %309 = phi i64 [ %380, %308 ], [ %192, %191 ]
  %310 = load i8, i8* %46, align 1
  %311 = sext i8 %310 to i32
  %312 = add nsw i64 %309, -384
  %313 = getelementptr inbounds i16, i16* %179, i64 %312
  %314 = load i16, i16* %313, align 2
  %315 = sext i16 %314 to i32
  %316 = mul nsw i32 %315, %311
  %317 = load i8, i8* %162, align 1
  %318 = sext i8 %317 to i32
  %319 = add nsw i64 %309, -256
  %320 = getelementptr inbounds i16, i16* %179, i64 %319
  %321 = load i16, i16* %320, align 2
  %322 = sext i16 %321 to i32
  %323 = mul nsw i32 %322, %318
  %324 = load i8, i8* %163, align 1
  %325 = sext i8 %324 to i32
  %326 = add nsw i64 %309, -128
  %327 = getelementptr inbounds i16, i16* %179, i64 %326
  %328 = load i16, i16* %327, align 2
  %329 = sext i16 %328 to i32
  %330 = mul nsw i32 %329, %325
  %331 = load i8, i8* %164, align 1
  %332 = sext i8 %331 to i32
  %333 = getelementptr inbounds i16, i16* %179, i64 %309
  %334 = load i16, i16* %333, align 2
  %335 = sext i16 %334 to i32
  %336 = mul nsw i32 %335, %332
  %337 = load i8, i8* %165, align 1
  %338 = sext i8 %337 to i32
  %339 = add nuw nsw i64 %309, 128
  %340 = getelementptr inbounds i16, i16* %179, i64 %339
  %341 = load i16, i16* %340, align 2
  %342 = sext i16 %341 to i32
  %343 = mul nsw i32 %342, %338
  %344 = load i8, i8* %166, align 1
  %345 = sext i8 %344 to i32
  %346 = add nuw nsw i64 %309, 256
  %347 = getelementptr inbounds i16, i16* %179, i64 %346
  %348 = load i16, i16* %347, align 2
  %349 = sext i16 %348 to i32
  %350 = mul nsw i32 %349, %345
  %351 = load i8, i8* %167, align 1
  %352 = sext i8 %351 to i32
  %353 = add nuw nsw i64 %309, 384
  %354 = getelementptr inbounds i16, i16* %179, i64 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = mul nsw i32 %356, %352
  %358 = load i8, i8* %168, align 1
  %359 = sext i8 %358 to i32
  %360 = add nuw nsw i64 %309, 512
  %361 = getelementptr inbounds i16, i16* %179, i64 %360
  %362 = load i16, i16* %361, align 2
  %363 = sext i16 %362 to i32
  %364 = mul nsw i32 %363, %359
  %365 = add nsw i32 %316, 512
  %366 = add nsw i32 %365, %323
  %367 = add nsw i32 %366, %330
  %368 = add nsw i32 %367, %336
  %369 = add nsw i32 %368, %343
  %370 = add nsw i32 %369, %350
  %371 = add nsw i32 %370, %357
  %372 = add nsw i32 %371, %364
  %373 = ashr i32 %372, 10
  %374 = icmp slt i32 %373, 255
  %375 = select i1 %374, i32 %373, i32 255
  %376 = icmp sgt i32 %375, 0
  %377 = select i1 %376, i32 %375, i32 0
  %378 = trunc i32 %377 to i8
  %379 = getelementptr inbounds i8, i8* %178, i64 %309
  store i8 %378, i8* %379, align 1
  %380 = add nuw nsw i64 %309, 1
  %381 = icmp eq i64 %380, %169
  br i1 %381, label %302, label %308, !llvm.loop !130

382:                                              ; preds = %302
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %67) #7
  br label %688

383:                                              ; preds = %50, %509
  %384 = phi i64 [ 0, %50 ], [ %514, %509 ]
  %385 = phi i32 [ %5, %50 ], [ %512, %509 ]
  %386 = phi i8* [ %2, %50 ], [ %511, %509 ]
  %387 = phi i8* [ %0, %50 ], [ %510, %509 ]
  %388 = mul i64 %384, %1
  %389 = getelementptr i8, i8* %0, i64 %388
  %390 = add i64 %388, %59
  %391 = getelementptr i8, i8* %0, i64 %390
  %392 = mul i64 %384, %3
  %393 = add i64 %392, -3
  %394 = getelementptr i8, i8* %2, i64 %393
  %395 = add i64 %61, %392
  %396 = getelementptr i8, i8* %2, i64 %395
  br i1 %51, label %397, label %509

397:                                              ; preds = %383
  br i1 %62, label %398, label %400

398:                                              ; preds = %508, %400, %397
  %399 = phi i64 [ 0, %400 ], [ 0, %397 ], [ %63, %508 ]
  br label %515

400:                                              ; preds = %397
  %401 = icmp ult i8* %389, %60
  %402 = icmp ult i8* %58, %391
  %403 = and i1 %401, %402
  %404 = icmp ult i8* %389, %396
  %405 = icmp ult i8* %394, %391
  %406 = and i1 %404, %405
  %407 = or i1 %403, %406
  br i1 %407, label %398, label %408

408:                                              ; preds = %400
  %409 = load i8, i8* %28, align 1, !alias.scope !131
  %410 = insertelement <16 x i8> undef, i8 %409, i32 0
  %411 = shufflevector <16 x i8> %410, <16 x i8> undef, <16 x i32> zeroinitializer
  %412 = sext <16 x i8> %411 to <16 x i32>
  %413 = load i8, i8* %52, align 1, !alias.scope !131
  %414 = insertelement <16 x i8> undef, i8 %413, i32 0
  %415 = shufflevector <16 x i8> %414, <16 x i8> undef, <16 x i32> zeroinitializer
  %416 = sext <16 x i8> %415 to <16 x i32>
  %417 = load i8, i8* %53, align 1, !alias.scope !131
  %418 = insertelement <16 x i8> undef, i8 %417, i32 0
  %419 = shufflevector <16 x i8> %418, <16 x i8> undef, <16 x i32> zeroinitializer
  %420 = sext <16 x i8> %419 to <16 x i32>
  %421 = load i8, i8* %54, align 1, !alias.scope !131
  %422 = insertelement <16 x i8> undef, i8 %421, i32 0
  %423 = shufflevector <16 x i8> %422, <16 x i8> undef, <16 x i32> zeroinitializer
  %424 = sext <16 x i8> %423 to <16 x i32>
  %425 = load i8, i8* %55, align 1, !alias.scope !131
  %426 = insertelement <16 x i8> undef, i8 %425, i32 0
  %427 = shufflevector <16 x i8> %426, <16 x i8> undef, <16 x i32> zeroinitializer
  %428 = sext <16 x i8> %427 to <16 x i32>
  %429 = load i8, i8* %56, align 1, !alias.scope !131
  %430 = insertelement <16 x i8> undef, i8 %429, i32 0
  %431 = shufflevector <16 x i8> %430, <16 x i8> undef, <16 x i32> zeroinitializer
  %432 = sext <16 x i8> %431 to <16 x i32>
  %433 = load i8, i8* %57, align 1, !alias.scope !131
  %434 = insertelement <16 x i8> undef, i8 %433, i32 0
  %435 = shufflevector <16 x i8> %434, <16 x i8> undef, <16 x i32> zeroinitializer
  %436 = sext <16 x i8> %435 to <16 x i32>
  %437 = load i8, i8* %58, align 1, !alias.scope !131
  %438 = insertelement <16 x i8> undef, i8 %437, i32 0
  %439 = shufflevector <16 x i8> %438, <16 x i8> undef, <16 x i32> zeroinitializer
  %440 = sext <16 x i8> %439 to <16 x i32>
  br label %441

441:                                              ; preds = %441, %408
  %442 = phi i64 [ 0, %408 ], [ %506, %441 ]
  %443 = add nsw i64 %442, -3
  %444 = getelementptr inbounds i8, i8* %386, i64 %443
  %445 = bitcast i8* %444 to <16 x i8>*
  %446 = load <16 x i8>, <16 x i8>* %445, align 1, !alias.scope !134
  %447 = zext <16 x i8> %446 to <16 x i32>
  %448 = mul nsw <16 x i32> %447, %412
  %449 = add nsw i64 %442, -2
  %450 = getelementptr inbounds i8, i8* %386, i64 %449
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1, !alias.scope !134
  %453 = zext <16 x i8> %452 to <16 x i32>
  %454 = mul nsw <16 x i32> %453, %416
  %455 = add nsw i64 %442, -1
  %456 = getelementptr inbounds i8, i8* %386, i64 %455
  %457 = bitcast i8* %456 to <16 x i8>*
  %458 = load <16 x i8>, <16 x i8>* %457, align 1, !alias.scope !134
  %459 = zext <16 x i8> %458 to <16 x i32>
  %460 = mul nsw <16 x i32> %459, %420
  %461 = getelementptr inbounds i8, i8* %386, i64 %442
  %462 = bitcast i8* %461 to <16 x i8>*
  %463 = load <16 x i8>, <16 x i8>* %462, align 1, !alias.scope !134
  %464 = zext <16 x i8> %463 to <16 x i32>
  %465 = mul nsw <16 x i32> %464, %424
  %466 = or i64 %442, 1
  %467 = getelementptr inbounds i8, i8* %386, i64 %466
  %468 = bitcast i8* %467 to <16 x i8>*
  %469 = load <16 x i8>, <16 x i8>* %468, align 1, !alias.scope !134
  %470 = zext <16 x i8> %469 to <16 x i32>
  %471 = mul nsw <16 x i32> %470, %428
  %472 = or i64 %442, 2
  %473 = getelementptr inbounds i8, i8* %386, i64 %472
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !134
  %476 = zext <16 x i8> %475 to <16 x i32>
  %477 = mul nsw <16 x i32> %476, %432
  %478 = or i64 %442, 3
  %479 = getelementptr inbounds i8, i8* %386, i64 %478
  %480 = bitcast i8* %479 to <16 x i8>*
  %481 = load <16 x i8>, <16 x i8>* %480, align 1, !alias.scope !134
  %482 = zext <16 x i8> %481 to <16 x i32>
  %483 = mul nsw <16 x i32> %482, %436
  %484 = or i64 %442, 4
  %485 = getelementptr inbounds i8, i8* %386, i64 %484
  %486 = bitcast i8* %485 to <16 x i8>*
  %487 = load <16 x i8>, <16 x i8>* %486, align 1, !alias.scope !134
  %488 = zext <16 x i8> %487 to <16 x i32>
  %489 = mul nsw <16 x i32> %488, %440
  %490 = add nsw <16 x i32> %448, <i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34, i32 34>
  %491 = add nsw <16 x i32> %490, %454
  %492 = add nsw <16 x i32> %491, %460
  %493 = add nsw <16 x i32> %492, %465
  %494 = add nsw <16 x i32> %493, %471
  %495 = add nsw <16 x i32> %494, %477
  %496 = add nsw <16 x i32> %495, %483
  %497 = add nsw <16 x i32> %496, %489
  %498 = ashr <16 x i32> %497, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %499 = icmp slt <16 x i32> %498, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %500 = select <16 x i1> %499, <16 x i32> %498, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %501 = icmp sgt <16 x i32> %500, zeroinitializer
  %502 = select <16 x i1> %501, <16 x i32> %500, <16 x i32> zeroinitializer
  %503 = trunc <16 x i32> %502 to <16 x i8>
  %504 = getelementptr inbounds i8, i8* %387, i64 %442
  %505 = bitcast i8* %504 to <16 x i8>*
  store <16 x i8> %503, <16 x i8>* %505, align 1, !alias.scope !136, !noalias !138
  %506 = add i64 %442, 16
  %507 = icmp eq i64 %506, %63
  br i1 %507, label %508, label %441, !llvm.loop !139

508:                                              ; preds = %441
  br i1 %64, label %509, label %398

509:                                              ; preds = %515, %508, %383
  %510 = getelementptr inbounds i8, i8* %387, i64 %1
  %511 = getelementptr inbounds i8, i8* %386, i64 %3
  %512 = add nsw i32 %385, -1
  %513 = icmp eq i32 %512, 0
  %514 = add i64 %384, 1
  br i1 %513, label %688, label %383

515:                                              ; preds = %398, %515
  %516 = phi i64 [ %546, %515 ], [ %399, %398 ]
  %517 = load i8, i8* %28, align 1
  %518 = sext i8 %517 to i32
  %519 = add nsw i64 %516, -3
  %520 = getelementptr inbounds i8, i8* %386, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = mul nsw i32 %522, %518
  %524 = load i8, i8* %52, align 1
  %525 = sext i8 %524 to i32
  %526 = add nsw i64 %516, -2
  %527 = getelementptr inbounds i8, i8* %386, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i32
  %530 = mul nsw i32 %529, %525
  %531 = load i8, i8* %53, align 1
  %532 = sext i8 %531 to i32
  %533 = add nsw i64 %516, -1
  %534 = getelementptr inbounds i8, i8* %386, i64 %533
  %535 = load i8, i8* %534, align 1
  %536 = zext i8 %535 to i32
  %537 = mul nsw i32 %536, %532
  %538 = load i8, i8* %54, align 1
  %539 = sext i8 %538 to i32
  %540 = getelementptr inbounds i8, i8* %386, i64 %516
  %541 = load i8, i8* %540, align 1
  %542 = zext i8 %541 to i32
  %543 = mul nsw i32 %542, %539
  %544 = load i8, i8* %55, align 1
  %545 = sext i8 %544 to i32
  %546 = add nuw nsw i64 %516, 1
  %547 = getelementptr inbounds i8, i8* %386, i64 %546
  %548 = load i8, i8* %547, align 1
  %549 = zext i8 %548 to i32
  %550 = mul nsw i32 %549, %545
  %551 = load i8, i8* %56, align 1
  %552 = sext i8 %551 to i32
  %553 = add nuw nsw i64 %516, 2
  %554 = getelementptr inbounds i8, i8* %386, i64 %553
  %555 = load i8, i8* %554, align 1
  %556 = zext i8 %555 to i32
  %557 = mul nsw i32 %556, %552
  %558 = load i8, i8* %57, align 1
  %559 = sext i8 %558 to i32
  %560 = add nuw nsw i64 %516, 3
  %561 = getelementptr inbounds i8, i8* %386, i64 %560
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i32
  %564 = mul nsw i32 %563, %559
  %565 = load i8, i8* %58, align 1
  %566 = sext i8 %565 to i32
  %567 = add nuw nsw i64 %516, 4
  %568 = getelementptr inbounds i8, i8* %386, i64 %567
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = mul nsw i32 %570, %566
  %572 = add nsw i32 %523, 34
  %573 = add nsw i32 %572, %530
  %574 = add nsw i32 %573, %537
  %575 = add nsw i32 %574, %543
  %576 = add nsw i32 %575, %550
  %577 = add nsw i32 %576, %557
  %578 = add nsw i32 %577, %564
  %579 = add nsw i32 %578, %571
  %580 = ashr i32 %579, 6
  %581 = icmp slt i32 %580, 255
  %582 = select i1 %581, i32 %580, i32 255
  %583 = icmp sgt i32 %582, 0
  %584 = select i1 %583, i32 %582, i32 0
  %585 = trunc i32 %584 to i8
  %586 = getelementptr inbounds i8, i8* %387, i64 %516
  store i8 %585, i8* %586, align 1
  %587 = icmp eq i64 %546, %59
  br i1 %587, label %509, label %515, !llvm.loop !140

588:                                              ; preds = %45
  br i1 %48, label %589, label %687

589:                                              ; preds = %588
  %590 = icmp sgt i32 %4, 0
  %591 = mul nsw i64 %3, -3
  %592 = getelementptr inbounds i8, i8* %46, i64 1
  %593 = mul nsw i64 %3, -2
  %594 = getelementptr inbounds i8, i8* %46, i64 2
  %595 = getelementptr inbounds i8, i8* %46, i64 3
  %596 = getelementptr inbounds i8, i8* %46, i64 4
  %597 = getelementptr inbounds i8, i8* %46, i64 5
  %598 = shl i64 %3, 1
  %599 = getelementptr inbounds i8, i8* %46, i64 6
  %600 = mul nsw i64 %3, 3
  %601 = getelementptr inbounds i8, i8* %46, i64 7
  %602 = shl i64 %3, 2
  %603 = zext i32 %4 to i64
  br label %604

604:                                              ; preds = %589, %608
  %605 = phi i32 [ %611, %608 ], [ %5, %589 ]
  %606 = phi i8* [ %610, %608 ], [ %2, %589 ]
  %607 = phi i8* [ %609, %608 ], [ %0, %589 ]
  br i1 %590, label %613, label %608

608:                                              ; preds = %613, %604
  %609 = getelementptr inbounds i8, i8* %607, i64 %1
  %610 = getelementptr inbounds i8, i8* %606, i64 %3
  %611 = add nsw i32 %605, -1
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %688, label %604

613:                                              ; preds = %604, %613
  %614 = phi i64 [ %685, %613 ], [ 0, %604 ]
  %615 = load i8, i8* %46, align 1
  %616 = sext i8 %615 to i32
  %617 = add nsw i64 %591, %614
  %618 = getelementptr inbounds i8, i8* %606, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i32
  %621 = mul nsw i32 %620, %616
  %622 = load i8, i8* %592, align 1
  %623 = sext i8 %622 to i32
  %624 = add nsw i64 %593, %614
  %625 = getelementptr inbounds i8, i8* %606, i64 %624
  %626 = load i8, i8* %625, align 1
  %627 = zext i8 %626 to i32
  %628 = mul nsw i32 %627, %623
  %629 = load i8, i8* %594, align 1
  %630 = sext i8 %629 to i32
  %631 = sub i64 %614, %3
  %632 = getelementptr inbounds i8, i8* %606, i64 %631
  %633 = load i8, i8* %632, align 1
  %634 = zext i8 %633 to i32
  %635 = mul nsw i32 %634, %630
  %636 = load i8, i8* %595, align 1
  %637 = sext i8 %636 to i32
  %638 = getelementptr inbounds i8, i8* %606, i64 %614
  %639 = load i8, i8* %638, align 1
  %640 = zext i8 %639 to i32
  %641 = mul nsw i32 %640, %637
  %642 = load i8, i8* %596, align 1
  %643 = sext i8 %642 to i32
  %644 = add nsw i64 %614, %3
  %645 = getelementptr inbounds i8, i8* %606, i64 %644
  %646 = load i8, i8* %645, align 1
  %647 = zext i8 %646 to i32
  %648 = mul nsw i32 %647, %643
  %649 = load i8, i8* %597, align 1
  %650 = sext i8 %649 to i32
  %651 = add nsw i64 %598, %614
  %652 = getelementptr inbounds i8, i8* %606, i64 %651
  %653 = load i8, i8* %652, align 1
  %654 = zext i8 %653 to i32
  %655 = mul nsw i32 %654, %650
  %656 = load i8, i8* %599, align 1
  %657 = sext i8 %656 to i32
  %658 = add nsw i64 %600, %614
  %659 = getelementptr inbounds i8, i8* %606, i64 %658
  %660 = load i8, i8* %659, align 1
  %661 = zext i8 %660 to i32
  %662 = mul nsw i32 %661, %657
  %663 = load i8, i8* %601, align 1
  %664 = sext i8 %663 to i32
  %665 = add nsw i64 %602, %614
  %666 = getelementptr inbounds i8, i8* %606, i64 %665
  %667 = load i8, i8* %666, align 1
  %668 = zext i8 %667 to i32
  %669 = mul nsw i32 %668, %664
  %670 = add nsw i32 %621, 32
  %671 = add nsw i32 %670, %628
  %672 = add nsw i32 %671, %635
  %673 = add nsw i32 %672, %641
  %674 = add nsw i32 %673, %648
  %675 = add nsw i32 %674, %655
  %676 = add nsw i32 %675, %662
  %677 = add nsw i32 %676, %669
  %678 = ashr i32 %677, 6
  %679 = icmp slt i32 %678, 255
  %680 = select i1 %679, i32 %678, i32 255
  %681 = icmp sgt i32 %680, 0
  %682 = select i1 %681, i32 %680, i32 0
  %683 = trunc i32 %682 to i8
  %684 = getelementptr inbounds i8, i8* %607, i64 %614
  store i8 %683, i8* %684, align 1
  %685 = add nuw nsw i64 %614, 1
  %686 = icmp eq i64 %685, %603
  br i1 %686, label %608, label %613

687:                                              ; preds = %588
  tail call fastcc void @put_c(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5)
  br label %688

688:                                              ; preds = %509, %608, %687, %382
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @put_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) unnamed_addr #4 {
  %7 = sext i32 %4 to i64
  %8 = add nsw i32 %5, -1
  %9 = and i32 %5, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %6, %11
  %12 = phi i8* [ %17, %11 ], [ %2, %6 ]
  %13 = phi i8* [ %16, %11 ], [ %0, %6 ]
  %14 = phi i32 [ %18, %11 ], [ %5, %6 ]
  %15 = phi i32 [ %19, %11 ], [ %9, %6 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %12, i64 %7, i1 false)
  %16 = getelementptr inbounds i8, i8* %13, i64 %1
  %17 = getelementptr inbounds i8, i8* %12, i64 %3
  %18 = add nsw i32 %14, -1
  %19 = add i32 %15, -1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %11, !llvm.loop !141

21:                                               ; preds = %11, %6
  %22 = phi i8* [ %2, %6 ], [ %17, %11 ]
  %23 = phi i8* [ %0, %6 ], [ %16, %11 ]
  %24 = phi i32 [ %5, %6 ], [ %18, %11 ]
  %25 = icmp ult i32 %8, 3
  br i1 %25, label %40, label %26

26:                                               ; preds = %21, %26
  %27 = phi i8* [ %37, %26 ], [ %22, %21 ]
  %28 = phi i8* [ %36, %26 ], [ %23, %21 ]
  %29 = phi i32 [ %38, %26 ], [ %24, %21 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %27, i64 %7, i1 false)
  %30 = getelementptr inbounds i8, i8* %28, i64 %1
  %31 = getelementptr inbounds i8, i8* %27, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %7, i1 false)
  %32 = getelementptr inbounds i8, i8* %30, i64 %1
  %33 = getelementptr inbounds i8, i8* %31, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 %7, i1 false)
  %34 = getelementptr inbounds i8, i8* %32, i64 %1
  %35 = getelementptr inbounds i8, i8* %33, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %7, i1 false)
  %36 = getelementptr inbounds i8, i8* %34, i64 %1
  %37 = getelementptr inbounds i8, i8* %35, i64 %3
  %38 = add nsw i32 %29, -4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %26

40:                                               ; preds = %26, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @put_8tap_scaled_c(i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %12 = alloca [33664 x i16], align 16
  %13 = add nsw i32 %5, -1
  %14 = mul nsw i32 %13, %9
  %15 = add nsw i32 %14, %7
  %16 = ashr i32 %15, 10
  %17 = add nsw i32 %16, 8
  %18 = bitcast [33664 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67328, i8* nonnull %18) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 67328, i1 false)
  %19 = getelementptr inbounds [33664 x i16], [33664 x i16]* %12, i64 0, i64 0
  %20 = mul i64 %3, -3
  %21 = getelementptr inbounds i8, i8* %2, i64 %20
  %22 = icmp sgt i32 %4, 0
  %23 = icmp sgt i32 %4, 4
  %24 = and i32 %10, 1
  %25 = add nuw nsw i32 %24, 3
  %26 = zext i32 %25 to i64
  %27 = and i32 %10, 3
  %28 = zext i32 %27 to i64
  %29 = zext i32 %4 to i64
  br label %30

30:                                               ; preds = %143, %11
  %31 = phi i8* [ %21, %11 ], [ %145, %143 ]
  %32 = phi i32 [ %17, %11 ], [ %146, %143 ]
  %33 = phi i16* [ %19, %11 ], [ %144, %143 ]
  br i1 %22, label %34, label %143

34:                                               ; preds = %30, %133
  %35 = phi i64 [ %141, %133 ], [ 0, %30 ]
  %36 = phi i32 [ %139, %133 ], [ 0, %30 ]
  %37 = phi i32 [ %140, %133 ], [ %6, %30 ]
  %38 = ashr i32 %37, 6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %127, label %40

40:                                               ; preds = %34
  %41 = add nsw i32 %38, -1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %28, i64 %42, i64 0
  %44 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %26, i64 %42, i64 0
  %45 = select i1 %23, i8* %43, i8* %44
  %46 = icmp eq i8* %45, null
  br i1 %46, label %127, label %47

47:                                               ; preds = %40
  %48 = load i8, i8* %45, align 8
  %49 = sext i8 %48 to i32
  %50 = add nsw i32 %36, -3
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nsw i32 %54, %49
  %56 = getelementptr inbounds i8, i8* %45, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = add nsw i32 %36, -2
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %31, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = mul nsw i32 %63, %58
  %65 = getelementptr inbounds i8, i8* %45, i64 2
  %66 = load i8, i8* %65, align 2
  %67 = sext i8 %66 to i32
  %68 = add nsw i32 %36, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %31, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = mul nsw i32 %72, %67
  %74 = getelementptr inbounds i8, i8* %45, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = sext i32 %36 to i64
  %78 = getelementptr inbounds i8, i8* %31, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nsw i32 %80, %76
  %82 = getelementptr inbounds i8, i8* %45, i64 4
  %83 = load i8, i8* %82, align 4
  %84 = sext i8 %83 to i32
  %85 = add nsw i32 %36, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %31, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul nsw i32 %89, %84
  %91 = getelementptr inbounds i8, i8* %45, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = add nsw i32 %36, 2
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %31, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nsw i32 %98, %93
  %100 = getelementptr inbounds i8, i8* %45, i64 6
  %101 = load i8, i8* %100, align 2
  %102 = sext i8 %101 to i32
  %103 = add nsw i32 %36, 3
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %31, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = mul nsw i32 %107, %102
  %109 = getelementptr inbounds i8, i8* %45, i64 7
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = add nsw i32 %36, 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %31, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = mul nsw i32 %116, %111
  %118 = add nsw i32 %55, 2
  %119 = add nsw i32 %118, %64
  %120 = add nsw i32 %119, %73
  %121 = add nsw i32 %120, %81
  %122 = add nsw i32 %121, %90
  %123 = add nsw i32 %122, %99
  %124 = add nsw i32 %123, %108
  %125 = add nsw i32 %124, %117
  %126 = ashr i32 %125, 2
  br label %133

127:                                              ; preds = %34, %40
  %128 = sext i32 %36 to i64
  %129 = getelementptr inbounds i8, i8* %31, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = shl nuw nsw i32 %131, 4
  br label %133

133:                                              ; preds = %127, %47
  %134 = phi i32 [ %126, %47 ], [ %132, %127 ]
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds i16, i16* %33, i64 %35
  store i16 %135, i16* %136, align 2
  %137 = add nsw i32 %37, %8
  %138 = ashr i32 %137, 10
  %139 = add nsw i32 %138, %36
  %140 = and i32 %137, 1023
  %141 = add nuw nsw i64 %35, 1
  %142 = icmp eq i64 %141, %29
  br i1 %142, label %143, label %34

143:                                              ; preds = %133, %30
  %144 = getelementptr inbounds i16, i16* %33, i64 128
  %145 = getelementptr inbounds i8, i8* %31, i64 %3
  %146 = add nsw i32 %32, -1
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %30

148:                                              ; preds = %143
  %149 = icmp sgt i32 %5, 0
  br i1 %149, label %150, label %159

150:                                              ; preds = %148
  %151 = getelementptr inbounds [33664 x i16], [33664 x i16]* %12, i64 0, i64 384
  %152 = icmp sgt i32 %5, 4
  %153 = ashr i32 %10, 2
  %154 = and i32 %153, 1
  %155 = add nuw nsw i32 %154, 3
  %156 = zext i32 %155 to i64
  %157 = sext i32 %153 to i64
  %158 = zext i32 %4 to i64
  br label %160

159:                                              ; preds = %268, %148
  call void @llvm.lifetime.end.p0i8(i64 67328, i8* nonnull %18) #7
  ret void

160:                                              ; preds = %268, %150
  %161 = phi i32 [ 0, %150 ], [ %276, %268 ]
  %162 = phi i16* [ %151, %150 ], [ %273, %268 ]
  %163 = phi i8* [ %0, %150 ], [ %275, %268 ]
  %164 = phi i32 [ %7, %150 ], [ %274, %268 ]
  %165 = ashr i32 %164, 6
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %174, label %167

167:                                              ; preds = %160
  %168 = add nsw i32 %165, -1
  %169 = sext i32 %168 to i64
  br i1 %152, label %170, label %172

170:                                              ; preds = %167
  %171 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %157, i64 %169, i64 0
  br label %174

172:                                              ; preds = %167
  %173 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %156, i64 %169, i64 0
  br label %174

174:                                              ; preds = %160, %170, %172
  %175 = phi i8* [ null, %160 ], [ %171, %170 ], [ %173, %172 ]
  br i1 %22, label %176, label %268

176:                                              ; preds = %174
  %177 = icmp eq i8* %175, null
  %178 = getelementptr inbounds i8, i8* %175, i64 1
  %179 = getelementptr inbounds i8, i8* %175, i64 2
  %180 = getelementptr inbounds i8, i8* %175, i64 3
  %181 = getelementptr inbounds i8, i8* %175, i64 4
  %182 = getelementptr inbounds i8, i8* %175, i64 5
  %183 = getelementptr inbounds i8, i8* %175, i64 6
  %184 = getelementptr inbounds i8, i8* %175, i64 7
  br label %185

185:                                              ; preds = %256, %176
  %186 = phi i64 [ 0, %176 ], [ %266, %256 ]
  br i1 %177, label %251, label %187

187:                                              ; preds = %185
  %188 = load i8, i8* %175, align 1
  %189 = sext i8 %188 to i32
  %190 = add nsw i64 %186, -384
  %191 = getelementptr inbounds i16, i16* %162, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i32
  %194 = mul nsw i32 %193, %189
  %195 = load i8, i8* %178, align 1
  %196 = sext i8 %195 to i32
  %197 = add nsw i64 %186, -256
  %198 = getelementptr inbounds i16, i16* %162, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i32
  %201 = mul nsw i32 %200, %196
  %202 = load i8, i8* %179, align 1
  %203 = sext i8 %202 to i32
  %204 = add nsw i64 %186, -128
  %205 = getelementptr inbounds i16, i16* %162, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = sext i16 %206 to i32
  %208 = mul nsw i32 %207, %203
  %209 = load i8, i8* %180, align 1
  %210 = sext i8 %209 to i32
  %211 = getelementptr inbounds i16, i16* %162, i64 %186
  %212 = load i16, i16* %211, align 2
  %213 = sext i16 %212 to i32
  %214 = mul nsw i32 %213, %210
  %215 = load i8, i8* %181, align 1
  %216 = sext i8 %215 to i32
  %217 = add nuw nsw i64 %186, 128
  %218 = getelementptr inbounds i16, i16* %162, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = sext i16 %219 to i32
  %221 = mul nsw i32 %220, %216
  %222 = load i8, i8* %182, align 1
  %223 = sext i8 %222 to i32
  %224 = add nuw nsw i64 %186, 256
  %225 = getelementptr inbounds i16, i16* %162, i64 %224
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i32
  %228 = mul nsw i32 %227, %223
  %229 = load i8, i8* %183, align 1
  %230 = sext i8 %229 to i32
  %231 = add nuw nsw i64 %186, 384
  %232 = getelementptr inbounds i16, i16* %162, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = sext i16 %233 to i32
  %235 = mul nsw i32 %234, %230
  %236 = load i8, i8* %184, align 1
  %237 = sext i8 %236 to i32
  %238 = add nuw nsw i64 %186, 512
  %239 = getelementptr inbounds i16, i16* %162, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = sext i16 %240 to i32
  %242 = mul nsw i32 %241, %237
  %243 = add nsw i32 %194, 512
  %244 = add nsw i32 %243, %201
  %245 = add nsw i32 %244, %208
  %246 = add nsw i32 %245, %214
  %247 = add nsw i32 %246, %221
  %248 = add nsw i32 %247, %228
  %249 = add nsw i32 %248, %235
  %250 = add nsw i32 %249, %242
  br label %256

251:                                              ; preds = %185
  %252 = getelementptr inbounds i16, i16* %162, i64 %186
  %253 = load i16, i16* %252, align 2
  %254 = sext i16 %253 to i32
  %255 = add nsw i32 %254, 8
  br label %256

256:                                              ; preds = %251, %187
  %257 = phi i32 [ 4, %251 ], [ 10, %187 ]
  %258 = phi i32 [ %255, %251 ], [ %250, %187 ]
  %259 = ashr i32 %258, %257
  %260 = icmp slt i32 %259, 255
  %261 = select i1 %260, i32 %259, i32 255
  %262 = icmp sgt i32 %261, 0
  %263 = select i1 %262, i32 %261, i32 0
  %264 = trunc i32 %263 to i8
  %265 = getelementptr inbounds i8, i8* %163, i64 %186
  store i8 %264, i8* %265, align 1
  %266 = add nuw nsw i64 %186, 1
  %267 = icmp eq i64 %266, %158
  br i1 %267, label %268, label %185

268:                                              ; preds = %256, %174
  %269 = add nsw i32 %164, %9
  %270 = ashr i32 %269, 10
  %271 = shl nsw i32 %270, 7
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i16, i16* %162, i64 %272
  %274 = and i32 %269, 1023
  %275 = getelementptr inbounds i8, i8* %163, i64 %1
  %276 = add nuw nsw i32 %161, 1
  %277 = icmp eq i32 %276, %5
  br i1 %277, label %159, label %160
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @prep_8tap_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %9 = alloca [17280 x i16], align 16
  %10 = icmp eq i32 %5, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %8
  %12 = icmp sgt i32 %3, 4
  br i1 %12, label %13, label %19

13:                                               ; preds = %11
  %14 = and i32 %7, 3
  %15 = zext i32 %14 to i64
  %16 = add nsw i32 %5, -1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %15, i64 %17, i64 0
  br label %26

19:                                               ; preds = %11
  %20 = and i32 %7, 1
  %21 = add nuw nsw i32 %20, 3
  %22 = zext i32 %21 to i64
  %23 = add nsw i32 %5, -1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %22, i64 %24, i64 0
  br label %26

26:                                               ; preds = %8, %13, %19
  %27 = phi i8* [ null, %8 ], [ %18, %13 ], [ %25, %19 ]
  %28 = icmp eq i32 %6, 0
  br i1 %28, label %44, label %29

29:                                               ; preds = %26
  %30 = icmp sgt i32 %4, 4
  %31 = ashr i32 %7, 2
  br i1 %30, label %32, label %37

32:                                               ; preds = %29
  %33 = sext i32 %31 to i64
  %34 = add nsw i32 %6, -1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %33, i64 %35, i64 0
  br label %44

37:                                               ; preds = %29
  %38 = and i32 %31, 1
  %39 = add nuw nsw i32 %38, 3
  %40 = zext i32 %39 to i64
  %41 = add nsw i32 %6, -1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %40, i64 %42, i64 0
  br label %44

44:                                               ; preds = %26, %32, %37
  %45 = phi i8* [ null, %26 ], [ %36, %32 ], [ %43, %37 ]
  %46 = icmp eq i8* %27, null
  %47 = icmp ne i8* %45, null
  br i1 %46, label %587, label %48

48:                                               ; preds = %44
  br i1 %47, label %65, label %49

49:                                               ; preds = %48
  %50 = sext i32 %3 to i64
  %51 = icmp sgt i32 %3, 0
  %52 = getelementptr inbounds i8, i8* %27, i64 1
  %53 = getelementptr inbounds i8, i8* %27, i64 2
  %54 = getelementptr inbounds i8, i8* %27, i64 3
  %55 = getelementptr inbounds i8, i8* %27, i64 4
  %56 = getelementptr inbounds i8, i8* %27, i64 5
  %57 = getelementptr inbounds i8, i8* %27, i64 6
  %58 = getelementptr inbounds i8, i8* %27, i64 7
  %59 = zext i32 %3 to i64
  %60 = getelementptr i8, i8* %27, i64 8
  %61 = add nuw nsw i64 %59, 4
  %62 = icmp ult i32 %3, 8
  %63 = and i64 %59, 4294967288
  %64 = icmp eq i64 %63, %59
  br label %388

65:                                               ; preds = %48
  %66 = add nsw i32 %4, 7
  %67 = bitcast [17280 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %67) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -86, i64 34560, i1 false)
  %68 = getelementptr inbounds [17280 x i16], [17280 x i16]* %9, i64 0, i64 0
  %69 = mul i64 %2, -3
  %70 = getelementptr inbounds i8, i8* %1, i64 %69
  %71 = icmp sgt i32 %3, 0
  %72 = getelementptr inbounds i8, i8* %27, i64 1
  %73 = getelementptr inbounds i8, i8* %27, i64 2
  %74 = getelementptr inbounds i8, i8* %27, i64 3
  %75 = getelementptr inbounds i8, i8* %27, i64 4
  %76 = getelementptr inbounds i8, i8* %27, i64 5
  %77 = getelementptr inbounds i8, i8* %27, i64 6
  %78 = getelementptr inbounds i8, i8* %27, i64 7
  %79 = zext i32 %3 to i64
  br label %80

80:                                               ; preds = %98, %65
  %81 = phi i8* [ %70, %65 ], [ %100, %98 ]
  %82 = phi i32 [ %66, %65 ], [ %101, %98 ]
  %83 = phi i16* [ %68, %65 ], [ %99, %98 ]
  br i1 %71, label %84, label %98

84:                                               ; preds = %80
  %85 = getelementptr inbounds i8, i8* %81, i64 -3
  %86 = load i8, i8* %85, align 1
  %87 = getelementptr inbounds i8, i8* %81, i64 -2
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %81, i64 -1
  %90 = load i8, i8* %89, align 1
  %91 = load i8, i8* %81, align 1
  %92 = getelementptr inbounds i8, i8* %81, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %81, i64 2
  %95 = load i8, i8* %94, align 1
  %96 = getelementptr inbounds i8, i8* %81, i64 3
  %97 = load i8, i8* %96, align 1
  br label %103

98:                                               ; preds = %103, %80
  %99 = getelementptr inbounds i16, i16* %83, i64 128
  %100 = getelementptr inbounds i8, i8* %81, i64 %2
  %101 = add nsw i32 %82, -1
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %160, label %80

103:                                              ; preds = %103, %84
  %104 = phi i8 [ %97, %84 ], [ %145, %103 ]
  %105 = phi i8 [ %95, %84 ], [ %104, %103 ]
  %106 = phi i8 [ %93, %84 ], [ %105, %103 ]
  %107 = phi i8 [ %91, %84 ], [ %106, %103 ]
  %108 = phi i8 [ %90, %84 ], [ %107, %103 ]
  %109 = phi i8 [ %88, %84 ], [ %108, %103 ]
  %110 = phi i8 [ %86, %84 ], [ %109, %103 ]
  %111 = phi i64 [ 0, %84 ], [ %130, %103 ]
  %112 = load i8, i8* %27, align 1
  %113 = sext i8 %112 to i32
  %114 = zext i8 %110 to i32
  %115 = mul nsw i32 %114, %113
  %116 = load i8, i8* %72, align 1
  %117 = sext i8 %116 to i32
  %118 = zext i8 %109 to i32
  %119 = mul nsw i32 %118, %117
  %120 = load i8, i8* %73, align 1
  %121 = sext i8 %120 to i32
  %122 = zext i8 %108 to i32
  %123 = mul nsw i32 %122, %121
  %124 = load i8, i8* %74, align 1
  %125 = sext i8 %124 to i32
  %126 = zext i8 %107 to i32
  %127 = mul nsw i32 %126, %125
  %128 = load i8, i8* %75, align 1
  %129 = sext i8 %128 to i32
  %130 = add nuw nsw i64 %111, 1
  %131 = zext i8 %106 to i32
  %132 = mul nsw i32 %131, %129
  %133 = load i8, i8* %76, align 1
  %134 = sext i8 %133 to i32
  %135 = zext i8 %105 to i32
  %136 = mul nsw i32 %135, %134
  %137 = load i8, i8* %77, align 1
  %138 = sext i8 %137 to i32
  %139 = zext i8 %104 to i32
  %140 = mul nsw i32 %139, %138
  %141 = load i8, i8* %78, align 1
  %142 = sext i8 %141 to i32
  %143 = add nuw nsw i64 %111, 4
  %144 = getelementptr inbounds i8, i8* %81, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nsw i32 %146, %142
  %148 = add nsw i32 %115, 2
  %149 = add nsw i32 %148, %119
  %150 = add nsw i32 %149, %123
  %151 = add nsw i32 %150, %127
  %152 = add nsw i32 %151, %132
  %153 = add nsw i32 %152, %136
  %154 = add nsw i32 %153, %140
  %155 = add nsw i32 %154, %147
  %156 = lshr i32 %155, 2
  %157 = trunc i32 %156 to i16
  %158 = getelementptr inbounds i16, i16* %83, i64 %111
  store i16 %157, i16* %158, align 2
  %159 = icmp eq i64 %130, %79
  br i1 %159, label %98, label %103

160:                                              ; preds = %98
  %161 = getelementptr inbounds [17280 x i16], [17280 x i16]* %9, i64 0, i64 384
  %162 = getelementptr inbounds i8, i8* %45, i64 1
  %163 = getelementptr inbounds i8, i8* %45, i64 2
  %164 = getelementptr inbounds i8, i8* %45, i64 3
  %165 = getelementptr inbounds i8, i8* %45, i64 4
  %166 = getelementptr inbounds i8, i8* %45, i64 5
  %167 = getelementptr inbounds i8, i8* %45, i64 6
  %168 = getelementptr inbounds i8, i8* %45, i64 7
  %169 = sext i32 %3 to i64
  %170 = zext i32 %3 to i64
  %171 = getelementptr i8, i8* %45, i64 8
  %172 = add nuw nsw i64 %170, 896
  %173 = icmp ult i32 %3, 8
  %174 = and i64 %170, 4294967288
  %175 = icmp eq i64 %174, %170
  br label %176

176:                                              ; preds = %309, %160
  %177 = phi i64 [ %314, %309 ], [ 0, %160 ]
  %178 = phi i32 [ %312, %309 ], [ %4, %160 ]
  %179 = phi i16* [ %310, %309 ], [ %161, %160 ]
  %180 = phi i16* [ %311, %309 ], [ %0, %160 ]
  %181 = mul i64 %177, %169
  %182 = getelementptr i16, i16* %0, i64 %181
  %183 = bitcast i16* %182 to i8*
  %184 = add i64 %181, %170
  %185 = getelementptr i16, i16* %0, i64 %184
  %186 = bitcast i16* %185 to i8*
  %187 = shl nuw nsw i64 %177, 7
  %188 = getelementptr [17280 x i16], [17280 x i16]* %9, i64 0, i64 %187
  %189 = add i64 %172, %187
  %190 = getelementptr [17280 x i16], [17280 x i16]* %9, i64 0, i64 %189
  br i1 %71, label %191, label %309

191:                                              ; preds = %176
  br i1 %173, label %192, label %194

192:                                              ; preds = %308, %194, %191
  %193 = phi i64 [ 0, %194 ], [ 0, %191 ], [ %174, %308 ]
  br label %315

194:                                              ; preds = %191
  %195 = icmp ugt i8* %171, %183
  %196 = icmp ult i8* %168, %186
  %197 = and i1 %195, %196
  %198 = icmp ult i16* %182, %190
  %199 = icmp ult i16* %188, %185
  %200 = and i1 %198, %199
  %201 = or i1 %197, %200
  br i1 %201, label %192, label %202

202:                                              ; preds = %194
  %203 = load i8, i8* %45, align 1, !alias.scope !142
  %204 = insertelement <8 x i8> undef, i8 %203, i32 0
  %205 = shufflevector <8 x i8> %204, <8 x i8> undef, <8 x i32> zeroinitializer
  %206 = sext <8 x i8> %205 to <8 x i32>
  %207 = load i8, i8* %162, align 1, !alias.scope !142
  %208 = insertelement <8 x i8> undef, i8 %207, i32 0
  %209 = shufflevector <8 x i8> %208, <8 x i8> undef, <8 x i32> zeroinitializer
  %210 = sext <8 x i8> %209 to <8 x i32>
  %211 = load i8, i8* %163, align 1, !alias.scope !142
  %212 = insertelement <8 x i8> undef, i8 %211, i32 0
  %213 = shufflevector <8 x i8> %212, <8 x i8> undef, <8 x i32> zeroinitializer
  %214 = sext <8 x i8> %213 to <8 x i32>
  %215 = load i8, i8* %164, align 1, !alias.scope !142
  %216 = insertelement <8 x i8> undef, i8 %215, i32 0
  %217 = shufflevector <8 x i8> %216, <8 x i8> undef, <8 x i32> zeroinitializer
  %218 = sext <8 x i8> %217 to <8 x i32>
  %219 = load i8, i8* %165, align 1, !alias.scope !142
  %220 = insertelement <8 x i8> undef, i8 %219, i32 0
  %221 = shufflevector <8 x i8> %220, <8 x i8> undef, <8 x i32> zeroinitializer
  %222 = sext <8 x i8> %221 to <8 x i32>
  %223 = load i8, i8* %166, align 1, !alias.scope !142
  %224 = insertelement <8 x i8> undef, i8 %223, i32 0
  %225 = shufflevector <8 x i8> %224, <8 x i8> undef, <8 x i32> zeroinitializer
  %226 = sext <8 x i8> %225 to <8 x i32>
  %227 = load i8, i8* %167, align 1, !alias.scope !142
  %228 = insertelement <8 x i8> undef, i8 %227, i32 0
  %229 = shufflevector <8 x i8> %228, <8 x i8> undef, <8 x i32> zeroinitializer
  %230 = sext <8 x i8> %229 to <8 x i32>
  %231 = load i8, i8* %168, align 1, !alias.scope !142
  %232 = insertelement <8 x i8> undef, i8 %231, i32 0
  %233 = shufflevector <8 x i8> %232, <8 x i8> undef, <8 x i32> zeroinitializer
  %234 = sext <8 x i8> %233 to <8 x i32>
  br label %235

235:                                              ; preds = %235, %202
  %236 = phi i64 [ 0, %202 ], [ %306, %235 ]
  %237 = add nsw i64 %236, -384
  %238 = getelementptr inbounds i16, i16* %179, i64 %237
  %239 = bitcast i16* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !145
  %241 = sext <8 x i16> %240 to <8 x i32>
  %242 = mul nsw <8 x i32> %241, %206
  %243 = add nsw i64 %236, -256
  %244 = getelementptr inbounds i16, i16* %179, i64 %243
  %245 = bitcast i16* %244 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 2, !alias.scope !145
  %247 = sext <8 x i16> %246 to <8 x i32>
  %248 = mul nsw <8 x i32> %247, %210
  %249 = add nsw <8 x i32> %248, %242
  %250 = add nsw i64 %236, -128
  %251 = getelementptr inbounds i16, i16* %179, i64 %250
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !145
  %254 = sext <8 x i16> %253 to <8 x i32>
  %255 = mul nsw <8 x i32> %254, %214
  %256 = add nsw <8 x i32> %249, %255
  %257 = getelementptr inbounds i16, i16* %179, i64 %236
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !alias.scope !145
  %260 = sext <8 x i16> %259 to <8 x i32>
  %261 = mul nsw <8 x i32> %260, %218
  %262 = add nsw <8 x i32> %256, %261
  %263 = add nuw nsw i64 %236, 128
  %264 = getelementptr inbounds i16, i16* %179, i64 %263
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !145
  %267 = sext <8 x i16> %266 to <8 x i32>
  %268 = mul nsw <8 x i32> %267, %222
  %269 = add nsw <8 x i32> %262, %268
  %270 = add nuw nsw i64 %236, 256
  %271 = getelementptr inbounds i16, i16* %179, i64 %270
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !145
  %274 = sext <8 x i16> %273 to <8 x i32>
  %275 = mul nsw <8 x i32> %274, %226
  %276 = add nsw <8 x i32> %269, %275
  %277 = add nuw nsw i64 %236, 384
  %278 = getelementptr inbounds i16, i16* %179, i64 %277
  %279 = bitcast i16* %278 to <8 x i16>*
  %280 = load <8 x i16>, <8 x i16>* %279, align 2, !alias.scope !145
  %281 = sext <8 x i16> %280 to <8 x i32>
  %282 = mul nsw <8 x i32> %281, %230
  %283 = add nsw <8 x i32> %276, %282
  %284 = add nuw nsw i64 %236, 512
  %285 = getelementptr inbounds i16, i16* %179, i64 %284
  %286 = bitcast i16* %285 to <8 x i16>*
  %287 = load <8 x i16>, <8 x i16>* %286, align 2, !alias.scope !145
  %288 = sext <8 x i16> %287 to <8 x i32>
  %289 = mul nsw <8 x i32> %288, %234
  %290 = add nsw <8 x i32> %283, %289
  %291 = add nsw <8 x i32> %290, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %292 = lshr <8 x i32> %291, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %293 = add nsw <8 x i32> %290, <i32 2097184, i32 2097184, i32 2097184, i32 2097184, i32 2097184, i32 2097184, i32 2097184, i32 2097184>
  %294 = icmp ult <8 x i32> %293, <i32 4194304, i32 4194304, i32 4194304, i32 4194304, i32 4194304, i32 4194304, i32 4194304, i32 4194304>
  %295 = extractelement <8 x i1> %294, i32 0
  tail call void @llvm.assume(i1 %295)
  %296 = extractelement <8 x i1> %294, i32 1
  tail call void @llvm.assume(i1 %296)
  %297 = extractelement <8 x i1> %294, i32 2
  tail call void @llvm.assume(i1 %297)
  %298 = extractelement <8 x i1> %294, i32 3
  tail call void @llvm.assume(i1 %298)
  %299 = extractelement <8 x i1> %294, i32 4
  tail call void @llvm.assume(i1 %299)
  %300 = extractelement <8 x i1> %294, i32 5
  tail call void @llvm.assume(i1 %300)
  %301 = extractelement <8 x i1> %294, i32 6
  tail call void @llvm.assume(i1 %301)
  %302 = extractelement <8 x i1> %294, i32 7
  tail call void @llvm.assume(i1 %302)
  %303 = trunc <8 x i32> %292 to <8 x i16>
  %304 = getelementptr inbounds i16, i16* %180, i64 %236
  %305 = bitcast i16* %304 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %305, align 2, !alias.scope !147, !noalias !149
  %306 = add i64 %236, 8
  %307 = icmp eq i64 %306, %174
  br i1 %307, label %308, label %235, !llvm.loop !150

308:                                              ; preds = %235
  br i1 %175, label %309, label %192

309:                                              ; preds = %315, %308, %176
  %310 = getelementptr inbounds i16, i16* %179, i64 128
  %311 = getelementptr inbounds i16, i16* %180, i64 %169
  %312 = add nsw i32 %178, -1
  %313 = icmp eq i32 %312, 0
  %314 = add i64 %177, 1
  br i1 %313, label %387, label %176

315:                                              ; preds = %192, %315
  %316 = phi i64 [ %385, %315 ], [ %193, %192 ]
  %317 = load i8, i8* %45, align 1
  %318 = sext i8 %317 to i32
  %319 = add nsw i64 %316, -384
  %320 = getelementptr inbounds i16, i16* %179, i64 %319
  %321 = load i16, i16* %320, align 2
  %322 = sext i16 %321 to i32
  %323 = mul nsw i32 %322, %318
  %324 = load i8, i8* %162, align 1
  %325 = sext i8 %324 to i32
  %326 = add nsw i64 %316, -256
  %327 = getelementptr inbounds i16, i16* %179, i64 %326
  %328 = load i16, i16* %327, align 2
  %329 = sext i16 %328 to i32
  %330 = mul nsw i32 %329, %325
  %331 = add nsw i32 %330, %323
  %332 = load i8, i8* %163, align 1
  %333 = sext i8 %332 to i32
  %334 = add nsw i64 %316, -128
  %335 = getelementptr inbounds i16, i16* %179, i64 %334
  %336 = load i16, i16* %335, align 2
  %337 = sext i16 %336 to i32
  %338 = mul nsw i32 %337, %333
  %339 = add nsw i32 %331, %338
  %340 = load i8, i8* %164, align 1
  %341 = sext i8 %340 to i32
  %342 = getelementptr inbounds i16, i16* %179, i64 %316
  %343 = load i16, i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = mul nsw i32 %344, %341
  %346 = add nsw i32 %339, %345
  %347 = load i8, i8* %165, align 1
  %348 = sext i8 %347 to i32
  %349 = add nuw nsw i64 %316, 128
  %350 = getelementptr inbounds i16, i16* %179, i64 %349
  %351 = load i16, i16* %350, align 2
  %352 = sext i16 %351 to i32
  %353 = mul nsw i32 %352, %348
  %354 = add nsw i32 %346, %353
  %355 = load i8, i8* %166, align 1
  %356 = sext i8 %355 to i32
  %357 = add nuw nsw i64 %316, 256
  %358 = getelementptr inbounds i16, i16* %179, i64 %357
  %359 = load i16, i16* %358, align 2
  %360 = sext i16 %359 to i32
  %361 = mul nsw i32 %360, %356
  %362 = add nsw i32 %354, %361
  %363 = load i8, i8* %167, align 1
  %364 = sext i8 %363 to i32
  %365 = add nuw nsw i64 %316, 384
  %366 = getelementptr inbounds i16, i16* %179, i64 %365
  %367 = load i16, i16* %366, align 2
  %368 = sext i16 %367 to i32
  %369 = mul nsw i32 %368, %364
  %370 = add nsw i32 %362, %369
  %371 = load i8, i8* %168, align 1
  %372 = sext i8 %371 to i32
  %373 = add nuw nsw i64 %316, 512
  %374 = getelementptr inbounds i16, i16* %179, i64 %373
  %375 = load i16, i16* %374, align 2
  %376 = sext i16 %375 to i32
  %377 = mul nsw i32 %376, %372
  %378 = add nsw i32 %370, %377
  %379 = add nsw i32 %378, 32
  %380 = lshr i32 %379, 6
  %381 = add nsw i32 %378, 2097184
  %382 = icmp ult i32 %381, 4194304
  tail call void @llvm.assume(i1 %382)
  %383 = trunc i32 %380 to i16
  %384 = getelementptr inbounds i16, i16* %180, i64 %316
  store i16 %383, i16* %384, align 2
  %385 = add nuw nsw i64 %316, 1
  %386 = icmp eq i64 %385, %170
  br i1 %386, label %309, label %315, !llvm.loop !151

387:                                              ; preds = %309
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %67) #7
  br label %684

388:                                              ; preds = %49, %512
  %389 = phi i64 [ 0, %49 ], [ %517, %512 ]
  %390 = phi i32 [ %4, %49 ], [ %515, %512 ]
  %391 = phi i8* [ %1, %49 ], [ %514, %512 ]
  %392 = phi i16* [ %0, %49 ], [ %513, %512 ]
  %393 = mul i64 %389, %50
  %394 = getelementptr i16, i16* %0, i64 %393
  %395 = bitcast i16* %394 to i8*
  %396 = add i64 %393, %59
  %397 = getelementptr i16, i16* %0, i64 %396
  %398 = bitcast i16* %397 to i8*
  %399 = mul i64 %389, %2
  %400 = add i64 %399, -3
  %401 = getelementptr i8, i8* %1, i64 %400
  %402 = add i64 %61, %399
  %403 = getelementptr i8, i8* %1, i64 %402
  br i1 %51, label %404, label %512

404:                                              ; preds = %388
  br i1 %62, label %405, label %407

405:                                              ; preds = %511, %407, %404
  %406 = phi i64 [ 0, %407 ], [ 0, %404 ], [ %63, %511 ]
  br label %518

407:                                              ; preds = %404
  %408 = icmp ugt i8* %60, %395
  %409 = icmp ult i8* %58, %398
  %410 = and i1 %408, %409
  %411 = icmp ugt i8* %403, %395
  %412 = icmp ult i8* %401, %398
  %413 = and i1 %411, %412
  %414 = or i1 %410, %413
  br i1 %414, label %405, label %415

415:                                              ; preds = %407
  %416 = load i8, i8* %27, align 1, !alias.scope !152
  %417 = insertelement <8 x i8> undef, i8 %416, i32 0
  %418 = shufflevector <8 x i8> %417, <8 x i8> undef, <8 x i32> zeroinitializer
  %419 = sext <8 x i8> %418 to <8 x i32>
  %420 = load i8, i8* %52, align 1, !alias.scope !152
  %421 = insertelement <8 x i8> undef, i8 %420, i32 0
  %422 = shufflevector <8 x i8> %421, <8 x i8> undef, <8 x i32> zeroinitializer
  %423 = sext <8 x i8> %422 to <8 x i32>
  %424 = load i8, i8* %53, align 1, !alias.scope !152
  %425 = insertelement <8 x i8> undef, i8 %424, i32 0
  %426 = shufflevector <8 x i8> %425, <8 x i8> undef, <8 x i32> zeroinitializer
  %427 = sext <8 x i8> %426 to <8 x i32>
  %428 = load i8, i8* %54, align 1, !alias.scope !152
  %429 = insertelement <8 x i8> undef, i8 %428, i32 0
  %430 = shufflevector <8 x i8> %429, <8 x i8> undef, <8 x i32> zeroinitializer
  %431 = sext <8 x i8> %430 to <8 x i32>
  %432 = load i8, i8* %55, align 1, !alias.scope !152
  %433 = insertelement <8 x i8> undef, i8 %432, i32 0
  %434 = shufflevector <8 x i8> %433, <8 x i8> undef, <8 x i32> zeroinitializer
  %435 = sext <8 x i8> %434 to <8 x i32>
  %436 = load i8, i8* %56, align 1, !alias.scope !152
  %437 = insertelement <8 x i8> undef, i8 %436, i32 0
  %438 = shufflevector <8 x i8> %437, <8 x i8> undef, <8 x i32> zeroinitializer
  %439 = sext <8 x i8> %438 to <8 x i32>
  %440 = load i8, i8* %57, align 1, !alias.scope !152
  %441 = insertelement <8 x i8> undef, i8 %440, i32 0
  %442 = shufflevector <8 x i8> %441, <8 x i8> undef, <8 x i32> zeroinitializer
  %443 = sext <8 x i8> %442 to <8 x i32>
  %444 = load i8, i8* %58, align 1, !alias.scope !152
  %445 = insertelement <8 x i8> undef, i8 %444, i32 0
  %446 = shufflevector <8 x i8> %445, <8 x i8> undef, <8 x i32> zeroinitializer
  %447 = sext <8 x i8> %446 to <8 x i32>
  br label %448

448:                                              ; preds = %448, %415
  %449 = phi i64 [ 0, %415 ], [ %509, %448 ]
  %450 = add nsw i64 %449, -3
  %451 = getelementptr inbounds i8, i8* %391, i64 %450
  %452 = bitcast i8* %451 to <8 x i8>*
  %453 = load <8 x i8>, <8 x i8>* %452, align 1, !alias.scope !155
  %454 = zext <8 x i8> %453 to <8 x i32>
  %455 = mul nsw <8 x i32> %454, %419
  %456 = add nsw i64 %449, -2
  %457 = getelementptr inbounds i8, i8* %391, i64 %456
  %458 = bitcast i8* %457 to <8 x i8>*
  %459 = load <8 x i8>, <8 x i8>* %458, align 1, !alias.scope !155
  %460 = zext <8 x i8> %459 to <8 x i32>
  %461 = mul nsw <8 x i32> %460, %423
  %462 = add nsw i64 %449, -1
  %463 = getelementptr inbounds i8, i8* %391, i64 %462
  %464 = bitcast i8* %463 to <8 x i8>*
  %465 = load <8 x i8>, <8 x i8>* %464, align 1, !alias.scope !155
  %466 = zext <8 x i8> %465 to <8 x i32>
  %467 = mul nsw <8 x i32> %466, %427
  %468 = getelementptr inbounds i8, i8* %391, i64 %449
  %469 = bitcast i8* %468 to <8 x i8>*
  %470 = load <8 x i8>, <8 x i8>* %469, align 1, !alias.scope !155
  %471 = zext <8 x i8> %470 to <8 x i32>
  %472 = mul nsw <8 x i32> %471, %431
  %473 = or i64 %449, 1
  %474 = getelementptr inbounds i8, i8* %391, i64 %473
  %475 = bitcast i8* %474 to <8 x i8>*
  %476 = load <8 x i8>, <8 x i8>* %475, align 1, !alias.scope !155
  %477 = zext <8 x i8> %476 to <8 x i32>
  %478 = mul nsw <8 x i32> %477, %435
  %479 = or i64 %449, 2
  %480 = getelementptr inbounds i8, i8* %391, i64 %479
  %481 = bitcast i8* %480 to <8 x i8>*
  %482 = load <8 x i8>, <8 x i8>* %481, align 1, !alias.scope !155
  %483 = zext <8 x i8> %482 to <8 x i32>
  %484 = mul nsw <8 x i32> %483, %439
  %485 = or i64 %449, 3
  %486 = getelementptr inbounds i8, i8* %391, i64 %485
  %487 = bitcast i8* %486 to <8 x i8>*
  %488 = load <8 x i8>, <8 x i8>* %487, align 1, !alias.scope !155
  %489 = zext <8 x i8> %488 to <8 x i32>
  %490 = mul nsw <8 x i32> %489, %443
  %491 = or i64 %449, 4
  %492 = getelementptr inbounds i8, i8* %391, i64 %491
  %493 = bitcast i8* %492 to <8 x i8>*
  %494 = load <8 x i8>, <8 x i8>* %493, align 1, !alias.scope !155
  %495 = zext <8 x i8> %494 to <8 x i32>
  %496 = mul nsw <8 x i32> %495, %447
  %497 = add nsw <8 x i32> %455, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %498 = add nsw <8 x i32> %497, %461
  %499 = add nsw <8 x i32> %498, %467
  %500 = add nsw <8 x i32> %499, %472
  %501 = add nsw <8 x i32> %500, %478
  %502 = add nsw <8 x i32> %501, %484
  %503 = add nsw <8 x i32> %502, %490
  %504 = add nsw <8 x i32> %503, %496
  %505 = lshr <8 x i32> %504, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %506 = trunc <8 x i32> %505 to <8 x i16>
  %507 = getelementptr inbounds i16, i16* %392, i64 %449
  %508 = bitcast i16* %507 to <8 x i16>*
  store <8 x i16> %506, <8 x i16>* %508, align 2, !alias.scope !157, !noalias !159
  %509 = add i64 %449, 8
  %510 = icmp eq i64 %509, %63
  br i1 %510, label %511, label %448, !llvm.loop !160

511:                                              ; preds = %448
  br i1 %64, label %512, label %405

512:                                              ; preds = %518, %511, %388
  %513 = getelementptr inbounds i16, i16* %392, i64 %50
  %514 = getelementptr inbounds i8, i8* %391, i64 %2
  %515 = add nsw i32 %390, -1
  %516 = icmp eq i32 %515, 0
  %517 = add i64 %389, 1
  br i1 %516, label %684, label %388

518:                                              ; preds = %405, %518
  %519 = phi i64 [ %549, %518 ], [ %406, %405 ]
  %520 = load i8, i8* %27, align 1
  %521 = sext i8 %520 to i32
  %522 = add nsw i64 %519, -3
  %523 = getelementptr inbounds i8, i8* %391, i64 %522
  %524 = load i8, i8* %523, align 1
  %525 = zext i8 %524 to i32
  %526 = mul nsw i32 %525, %521
  %527 = load i8, i8* %52, align 1
  %528 = sext i8 %527 to i32
  %529 = add nsw i64 %519, -2
  %530 = getelementptr inbounds i8, i8* %391, i64 %529
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i32
  %533 = mul nsw i32 %532, %528
  %534 = load i8, i8* %53, align 1
  %535 = sext i8 %534 to i32
  %536 = add nsw i64 %519, -1
  %537 = getelementptr inbounds i8, i8* %391, i64 %536
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = mul nsw i32 %539, %535
  %541 = load i8, i8* %54, align 1
  %542 = sext i8 %541 to i32
  %543 = getelementptr inbounds i8, i8* %391, i64 %519
  %544 = load i8, i8* %543, align 1
  %545 = zext i8 %544 to i32
  %546 = mul nsw i32 %545, %542
  %547 = load i8, i8* %55, align 1
  %548 = sext i8 %547 to i32
  %549 = add nuw nsw i64 %519, 1
  %550 = getelementptr inbounds i8, i8* %391, i64 %549
  %551 = load i8, i8* %550, align 1
  %552 = zext i8 %551 to i32
  %553 = mul nsw i32 %552, %548
  %554 = load i8, i8* %56, align 1
  %555 = sext i8 %554 to i32
  %556 = add nuw nsw i64 %519, 2
  %557 = getelementptr inbounds i8, i8* %391, i64 %556
  %558 = load i8, i8* %557, align 1
  %559 = zext i8 %558 to i32
  %560 = mul nsw i32 %559, %555
  %561 = load i8, i8* %57, align 1
  %562 = sext i8 %561 to i32
  %563 = add nuw nsw i64 %519, 3
  %564 = getelementptr inbounds i8, i8* %391, i64 %563
  %565 = load i8, i8* %564, align 1
  %566 = zext i8 %565 to i32
  %567 = mul nsw i32 %566, %562
  %568 = load i8, i8* %58, align 1
  %569 = sext i8 %568 to i32
  %570 = add nuw nsw i64 %519, 4
  %571 = getelementptr inbounds i8, i8* %391, i64 %570
  %572 = load i8, i8* %571, align 1
  %573 = zext i8 %572 to i32
  %574 = mul nsw i32 %573, %569
  %575 = add nsw i32 %526, 2
  %576 = add nsw i32 %575, %533
  %577 = add nsw i32 %576, %540
  %578 = add nsw i32 %577, %546
  %579 = add nsw i32 %578, %553
  %580 = add nsw i32 %579, %560
  %581 = add nsw i32 %580, %567
  %582 = add nsw i32 %581, %574
  %583 = lshr i32 %582, 2
  %584 = trunc i32 %583 to i16
  %585 = getelementptr inbounds i16, i16* %392, i64 %519
  store i16 %584, i16* %585, align 2
  %586 = icmp eq i64 %549, %59
  br i1 %586, label %512, label %518, !llvm.loop !161

587:                                              ; preds = %44
  br i1 %47, label %588, label %683

588:                                              ; preds = %587
  %589 = sext i32 %3 to i64
  %590 = icmp sgt i32 %3, 0
  %591 = mul nsw i64 %2, -3
  %592 = getelementptr inbounds i8, i8* %45, i64 1
  %593 = mul nsw i64 %2, -2
  %594 = getelementptr inbounds i8, i8* %45, i64 2
  %595 = getelementptr inbounds i8, i8* %45, i64 3
  %596 = getelementptr inbounds i8, i8* %45, i64 4
  %597 = getelementptr inbounds i8, i8* %45, i64 5
  %598 = shl i64 %2, 1
  %599 = getelementptr inbounds i8, i8* %45, i64 6
  %600 = mul nsw i64 %2, 3
  %601 = getelementptr inbounds i8, i8* %45, i64 7
  %602 = shl i64 %2, 2
  %603 = zext i32 %3 to i64
  br label %604

604:                                              ; preds = %588, %608
  %605 = phi i32 [ %611, %608 ], [ %4, %588 ]
  %606 = phi i8* [ %610, %608 ], [ %1, %588 ]
  %607 = phi i16* [ %609, %608 ], [ %0, %588 ]
  br i1 %590, label %613, label %608

608:                                              ; preds = %613, %604
  %609 = getelementptr inbounds i16, i16* %607, i64 %589
  %610 = getelementptr inbounds i8, i8* %606, i64 %2
  %611 = add nsw i32 %605, -1
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %684, label %604

613:                                              ; preds = %604, %613
  %614 = phi i64 [ %681, %613 ], [ 0, %604 ]
  %615 = load i8, i8* %45, align 1
  %616 = sext i8 %615 to i32
  %617 = add nsw i64 %591, %614
  %618 = getelementptr inbounds i8, i8* %606, i64 %617
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i32
  %621 = mul nsw i32 %620, %616
  %622 = load i8, i8* %592, align 1
  %623 = sext i8 %622 to i32
  %624 = add nsw i64 %593, %614
  %625 = getelementptr inbounds i8, i8* %606, i64 %624
  %626 = load i8, i8* %625, align 1
  %627 = zext i8 %626 to i32
  %628 = mul nsw i32 %627, %623
  %629 = load i8, i8* %594, align 1
  %630 = sext i8 %629 to i32
  %631 = sub i64 %614, %2
  %632 = getelementptr inbounds i8, i8* %606, i64 %631
  %633 = load i8, i8* %632, align 1
  %634 = zext i8 %633 to i32
  %635 = mul nsw i32 %634, %630
  %636 = load i8, i8* %595, align 1
  %637 = sext i8 %636 to i32
  %638 = getelementptr inbounds i8, i8* %606, i64 %614
  %639 = load i8, i8* %638, align 1
  %640 = zext i8 %639 to i32
  %641 = mul nsw i32 %640, %637
  %642 = load i8, i8* %596, align 1
  %643 = sext i8 %642 to i32
  %644 = add nsw i64 %614, %2
  %645 = getelementptr inbounds i8, i8* %606, i64 %644
  %646 = load i8, i8* %645, align 1
  %647 = zext i8 %646 to i32
  %648 = mul nsw i32 %647, %643
  %649 = load i8, i8* %597, align 1
  %650 = sext i8 %649 to i32
  %651 = add nsw i64 %598, %614
  %652 = getelementptr inbounds i8, i8* %606, i64 %651
  %653 = load i8, i8* %652, align 1
  %654 = zext i8 %653 to i32
  %655 = mul nsw i32 %654, %650
  %656 = load i8, i8* %599, align 1
  %657 = sext i8 %656 to i32
  %658 = add nsw i64 %600, %614
  %659 = getelementptr inbounds i8, i8* %606, i64 %658
  %660 = load i8, i8* %659, align 1
  %661 = zext i8 %660 to i32
  %662 = mul nsw i32 %661, %657
  %663 = load i8, i8* %601, align 1
  %664 = sext i8 %663 to i32
  %665 = add nsw i64 %602, %614
  %666 = getelementptr inbounds i8, i8* %606, i64 %665
  %667 = load i8, i8* %666, align 1
  %668 = zext i8 %667 to i32
  %669 = mul nsw i32 %668, %664
  %670 = add nsw i32 %621, 2
  %671 = add nsw i32 %670, %628
  %672 = add nsw i32 %671, %635
  %673 = add nsw i32 %672, %641
  %674 = add nsw i32 %673, %648
  %675 = add nsw i32 %674, %655
  %676 = add nsw i32 %675, %662
  %677 = add nsw i32 %676, %669
  %678 = lshr i32 %677, 2
  %679 = trunc i32 %678 to i16
  %680 = getelementptr inbounds i16, i16* %607, i64 %614
  store i16 %679, i16* %680, align 2
  %681 = add nuw nsw i64 %614, 1
  %682 = icmp eq i64 %681, %603
  br i1 %682, label %608, label %613

683:                                              ; preds = %587
  tail call fastcc void @prep_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4)
  br label %684

684:                                              ; preds = %512, %608, %683, %387
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @prep_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32) unnamed_addr #6 {
  %6 = sext i32 %3 to i64
  %7 = icmp sgt i32 %3, 0
  %8 = zext i32 %3 to i64
  %9 = and i64 %8, 4294967280
  %10 = add nsw i64 %9, -16
  %11 = lshr exact i64 %10, 4
  %12 = add nuw nsw i64 %11, 1
  %13 = icmp ult i32 %3, 16
  %14 = and i64 %8, 4294967280
  %15 = and i64 %12, 1
  %16 = icmp eq i64 %10, 0
  %17 = sub nuw nsw i64 %12, %15
  %18 = icmp eq i64 %15, 0
  %19 = icmp eq i64 %14, %8
  %20 = and i64 %8, 3
  %21 = icmp eq i64 %20, 0
  br label %22

22:                                               ; preds = %114, %5
  %23 = phi i64 [ %119, %114 ], [ 0, %5 ]
  %24 = phi i8* [ %116, %114 ], [ %1, %5 ]
  %25 = phi i32 [ %117, %114 ], [ %4, %5 ]
  %26 = phi i16* [ %115, %114 ], [ %0, %5 ]
  %27 = mul i64 %23, %6
  %28 = getelementptr i16, i16* %0, i64 %27
  %29 = bitcast i16* %28 to i8*
  %30 = add i64 %27, %8
  %31 = getelementptr i16, i16* %0, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = mul i64 %23, %2
  %34 = getelementptr i8, i8* %1, i64 %33
  %35 = add i64 %33, %8
  %36 = getelementptr i8, i8* %1, i64 %35
  br i1 %7, label %37, label %114

37:                                               ; preds = %22
  br i1 %13, label %38, label %56

38:                                               ; preds = %113, %56, %37
  %39 = phi i64 [ 0, %56 ], [ 0, %37 ], [ %14, %113 ]
  %40 = xor i64 %39, -1
  %41 = add nsw i64 %40, %8
  br i1 %21, label %53, label %42

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %50, %42 ], [ %39, %38 ]
  %44 = phi i64 [ %51, %42 ], [ %20, %38 ]
  %45 = getelementptr inbounds i8, i8* %24, i64 %43
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  %48 = shl nuw nsw i16 %47, 4
  %49 = getelementptr inbounds i16, i16* %26, i64 %43
  store i16 %48, i16* %49, align 2
  %50 = add nuw nsw i64 %43, 1
  %51 = add i64 %44, -1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %42, !llvm.loop !162

53:                                               ; preds = %42, %38
  %54 = phi i64 [ %39, %38 ], [ %50, %42 ]
  %55 = icmp ult i64 %41, 3
  br i1 %55, label %114, label %120

56:                                               ; preds = %37
  %57 = icmp ugt i8* %36, %29
  %58 = icmp ult i8* %34, %32
  %59 = and i1 %57, %58
  br i1 %59, label %38, label %60

60:                                               ; preds = %56
  br i1 %16, label %96, label %61

61:                                               ; preds = %60, %61
  %62 = phi i64 [ %93, %61 ], [ 0, %60 ]
  %63 = phi i64 [ %94, %61 ], [ %17, %60 ]
  %64 = getelementptr inbounds i8, i8* %24, i64 %62
  %65 = bitcast i8* %64 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1, !alias.scope !163
  %67 = getelementptr inbounds i8, i8* %64, i64 8
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1, !alias.scope !163
  %70 = zext <8 x i8> %66 to <8 x i16>
  %71 = zext <8 x i8> %69 to <8 x i16>
  %72 = shl nuw nsw <8 x i16> %70, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %73 = shl nuw nsw <8 x i16> %71, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = getelementptr inbounds i16, i16* %26, i64 %62
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %75, align 2, !alias.scope !166, !noalias !163
  %76 = getelementptr inbounds i16, i16* %74, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %77, align 2, !alias.scope !166, !noalias !163
  %78 = or i64 %62, 16
  %79 = getelementptr inbounds i8, i8* %24, i64 %78
  %80 = bitcast i8* %79 to <8 x i8>*
  %81 = load <8 x i8>, <8 x i8>* %80, align 1, !alias.scope !163
  %82 = getelementptr inbounds i8, i8* %79, i64 8
  %83 = bitcast i8* %82 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1, !alias.scope !163
  %85 = zext <8 x i8> %81 to <8 x i16>
  %86 = zext <8 x i8> %84 to <8 x i16>
  %87 = shl nuw nsw <8 x i16> %85, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %88 = shl nuw nsw <8 x i16> %86, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %89 = getelementptr inbounds i16, i16* %26, i64 %78
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %90, align 2, !alias.scope !166, !noalias !163
  %91 = getelementptr inbounds i16, i16* %89, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !166, !noalias !163
  %93 = add i64 %62, 32
  %94 = add i64 %63, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %61, !llvm.loop !168

96:                                               ; preds = %61, %60
  %97 = phi i64 [ 0, %60 ], [ %93, %61 ]
  br i1 %18, label %113, label %98

98:                                               ; preds = %96
  %99 = getelementptr inbounds i8, i8* %24, i64 %97
  %100 = bitcast i8* %99 to <8 x i8>*
  %101 = load <8 x i8>, <8 x i8>* %100, align 1, !alias.scope !163
  %102 = getelementptr inbounds i8, i8* %99, i64 8
  %103 = bitcast i8* %102 to <8 x i8>*
  %104 = load <8 x i8>, <8 x i8>* %103, align 1, !alias.scope !163
  %105 = zext <8 x i8> %101 to <8 x i16>
  %106 = zext <8 x i8> %104 to <8 x i16>
  %107 = shl nuw nsw <8 x i16> %105, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %108 = shl nuw nsw <8 x i16> %106, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %109 = getelementptr inbounds i16, i16* %26, i64 %97
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !166, !noalias !163
  %111 = getelementptr inbounds i16, i16* %109, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !166, !noalias !163
  br label %113

113:                                              ; preds = %96, %98
  br i1 %19, label %114, label %38

114:                                              ; preds = %53, %120, %113, %22
  %115 = getelementptr inbounds i16, i16* %26, i64 %6
  %116 = getelementptr inbounds i8, i8* %24, i64 %2
  %117 = add nsw i32 %25, -1
  %118 = icmp eq i32 %117, 0
  %119 = add i64 %23, 1
  br i1 %118, label %147, label %22

120:                                              ; preds = %53, %120
  %121 = phi i64 [ %145, %120 ], [ %54, %53 ]
  %122 = getelementptr inbounds i8, i8* %24, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i16
  %125 = shl nuw nsw i16 %124, 4
  %126 = getelementptr inbounds i16, i16* %26, i64 %121
  store i16 %125, i16* %126, align 2
  %127 = add nuw nsw i64 %121, 1
  %128 = getelementptr inbounds i8, i8* %24, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = shl nuw nsw i16 %130, 4
  %132 = getelementptr inbounds i16, i16* %26, i64 %127
  store i16 %131, i16* %132, align 2
  %133 = add nuw nsw i64 %121, 2
  %134 = getelementptr inbounds i8, i8* %24, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i16
  %137 = shl nuw nsw i16 %136, 4
  %138 = getelementptr inbounds i16, i16* %26, i64 %133
  store i16 %137, i16* %138, align 2
  %139 = add nuw nsw i64 %121, 3
  %140 = getelementptr inbounds i8, i8* %24, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i16
  %143 = shl nuw nsw i16 %142, 4
  %144 = getelementptr inbounds i16, i16* %26, i64 %139
  store i16 %143, i16* %144, align 2
  %145 = add nuw nsw i64 %121, 4
  %146 = icmp eq i64 %145, %8
  br i1 %146, label %114, label %120, !llvm.loop !169

147:                                              ; preds = %114
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @prep_8tap_scaled_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #4 {
  %11 = alloca [33664 x i16], align 16
  %12 = add nsw i32 %4, -1
  %13 = mul nsw i32 %12, %8
  %14 = add nsw i32 %13, %6
  %15 = ashr i32 %14, 10
  %16 = add nsw i32 %15, 8
  %17 = bitcast [33664 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 67328, i8* nonnull %17) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 67328, i1 false)
  %18 = getelementptr inbounds [33664 x i16], [33664 x i16]* %11, i64 0, i64 0
  %19 = mul i64 %2, -3
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = icmp sgt i32 %3, 0
  %22 = icmp sgt i32 %3, 4
  %23 = and i32 %9, 1
  %24 = add nuw nsw i32 %23, 3
  %25 = zext i32 %24 to i64
  %26 = and i32 %9, 3
  %27 = zext i32 %26 to i64
  %28 = zext i32 %3 to i64
  br label %29

29:                                               ; preds = %142, %10
  %30 = phi i8* [ %20, %10 ], [ %144, %142 ]
  %31 = phi i32 [ %16, %10 ], [ %145, %142 ]
  %32 = phi i16* [ %18, %10 ], [ %143, %142 ]
  br i1 %21, label %33, label %142

33:                                               ; preds = %29, %132
  %34 = phi i64 [ %140, %132 ], [ 0, %29 ]
  %35 = phi i32 [ %138, %132 ], [ 0, %29 ]
  %36 = phi i32 [ %139, %132 ], [ %5, %29 ]
  %37 = ashr i32 %36, 6
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %126, label %39

39:                                               ; preds = %33
  %40 = add nsw i32 %37, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %27, i64 %41, i64 0
  %43 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %25, i64 %41, i64 0
  %44 = select i1 %22, i8* %42, i8* %43
  %45 = icmp eq i8* %44, null
  br i1 %45, label %126, label %46

46:                                               ; preds = %39
  %47 = load i8, i8* %44, align 8
  %48 = sext i8 %47 to i32
  %49 = add nsw i32 %35, -3
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %30, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = mul nsw i32 %53, %48
  %55 = getelementptr inbounds i8, i8* %44, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = add nsw i32 %35, -2
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %30, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = mul nsw i32 %62, %57
  %64 = getelementptr inbounds i8, i8* %44, i64 2
  %65 = load i8, i8* %64, align 2
  %66 = sext i8 %65 to i32
  %67 = add nsw i32 %35, -1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %30, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = mul nsw i32 %71, %66
  %73 = getelementptr inbounds i8, i8* %44, i64 3
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = sext i32 %35 to i64
  %77 = getelementptr inbounds i8, i8* %30, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = mul nsw i32 %79, %75
  %81 = getelementptr inbounds i8, i8* %44, i64 4
  %82 = load i8, i8* %81, align 4
  %83 = sext i8 %82 to i32
  %84 = add nsw i32 %35, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %30, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = mul nsw i32 %88, %83
  %90 = getelementptr inbounds i8, i8* %44, i64 5
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = add nsw i32 %35, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %30, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %97, %92
  %99 = getelementptr inbounds i8, i8* %44, i64 6
  %100 = load i8, i8* %99, align 2
  %101 = sext i8 %100 to i32
  %102 = add nsw i32 %35, 3
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %30, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = mul nsw i32 %106, %101
  %108 = getelementptr inbounds i8, i8* %44, i64 7
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = add nsw i32 %35, 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %30, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nsw i32 %115, %110
  %117 = add nsw i32 %54, 2
  %118 = add nsw i32 %117, %63
  %119 = add nsw i32 %118, %72
  %120 = add nsw i32 %119, %80
  %121 = add nsw i32 %120, %89
  %122 = add nsw i32 %121, %98
  %123 = add nsw i32 %122, %107
  %124 = add nsw i32 %123, %116
  %125 = ashr i32 %124, 2
  br label %132

126:                                              ; preds = %33, %39
  %127 = sext i32 %35 to i64
  %128 = getelementptr inbounds i8, i8* %30, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = shl nuw nsw i32 %130, 4
  br label %132

132:                                              ; preds = %126, %46
  %133 = phi i32 [ %125, %46 ], [ %131, %126 ]
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %32, i64 %34
  store i16 %134, i16* %135, align 2
  %136 = add nsw i32 %36, %7
  %137 = ashr i32 %136, 10
  %138 = add nsw i32 %137, %35
  %139 = and i32 %136, 1023
  %140 = add nuw nsw i64 %34, 1
  %141 = icmp eq i64 %140, %28
  br i1 %141, label %142, label %33

142:                                              ; preds = %132, %29
  %143 = getelementptr inbounds i16, i16* %32, i64 128
  %144 = getelementptr inbounds i8, i8* %30, i64 %2
  %145 = add nsw i32 %31, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %29

147:                                              ; preds = %142
  %148 = icmp sgt i32 %4, 0
  br i1 %148, label %149, label %159

149:                                              ; preds = %147
  %150 = getelementptr inbounds [33664 x i16], [33664 x i16]* %11, i64 0, i64 384
  %151 = icmp sgt i32 %4, 4
  %152 = ashr i32 %9, 2
  %153 = and i32 %152, 1
  %154 = add nuw nsw i32 %153, 3
  %155 = zext i32 %154 to i64
  %156 = sext i32 %152 to i64
  %157 = sext i32 %3 to i64
  %158 = zext i32 %3 to i64
  br label %160

159:                                              ; preds = %262, %147
  call void @llvm.lifetime.end.p0i8(i64 67328, i8* nonnull %17) #7
  ret void

160:                                              ; preds = %262, %149
  %161 = phi i32 [ 0, %149 ], [ %270, %262 ]
  %162 = phi i16* [ %150, %149 ], [ %267, %262 ]
  %163 = phi i16* [ %0, %149 ], [ %269, %262 ]
  %164 = phi i32 [ %6, %149 ], [ %268, %262 ]
  %165 = ashr i32 %164, 6
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %174, label %167

167:                                              ; preds = %160
  %168 = add nsw i32 %165, -1
  %169 = sext i32 %168 to i64
  br i1 %151, label %170, label %172

170:                                              ; preds = %167
  %171 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %156, i64 %169, i64 0
  br label %174

172:                                              ; preds = %167
  %173 = getelementptr inbounds [6 x [15 x [8 x i8]]], [6 x [15 x [8 x i8]]]* @dav1d_mc_subpel_filters, i64 0, i64 %155, i64 %169, i64 0
  br label %174

174:                                              ; preds = %160, %170, %172
  %175 = phi i8* [ null, %160 ], [ %171, %170 ], [ %173, %172 ]
  br i1 %21, label %176, label %262

176:                                              ; preds = %174
  %177 = icmp eq i8* %175, null
  %178 = getelementptr inbounds i8, i8* %175, i64 1
  %179 = getelementptr inbounds i8, i8* %175, i64 2
  %180 = getelementptr inbounds i8, i8* %175, i64 3
  %181 = getelementptr inbounds i8, i8* %175, i64 4
  %182 = getelementptr inbounds i8, i8* %175, i64 5
  %183 = getelementptr inbounds i8, i8* %175, i64 6
  %184 = getelementptr inbounds i8, i8* %175, i64 7
  br label %185

185:                                              ; preds = %256, %176
  %186 = phi i64 [ 0, %176 ], [ %260, %256 ]
  br i1 %177, label %252, label %187

187:                                              ; preds = %185
  %188 = load i8, i8* %175, align 1
  %189 = sext i8 %188 to i32
  %190 = add nsw i64 %186, -384
  %191 = getelementptr inbounds i16, i16* %162, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i32
  %194 = mul nsw i32 %193, %189
  %195 = load i8, i8* %178, align 1
  %196 = sext i8 %195 to i32
  %197 = add nsw i64 %186, -256
  %198 = getelementptr inbounds i16, i16* %162, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i32
  %201 = mul nsw i32 %200, %196
  %202 = load i8, i8* %179, align 1
  %203 = sext i8 %202 to i32
  %204 = add nsw i64 %186, -128
  %205 = getelementptr inbounds i16, i16* %162, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = sext i16 %206 to i32
  %208 = mul nsw i32 %207, %203
  %209 = load i8, i8* %180, align 1
  %210 = sext i8 %209 to i32
  %211 = getelementptr inbounds i16, i16* %162, i64 %186
  %212 = load i16, i16* %211, align 2
  %213 = sext i16 %212 to i32
  %214 = mul nsw i32 %213, %210
  %215 = load i8, i8* %181, align 1
  %216 = sext i8 %215 to i32
  %217 = add nuw nsw i64 %186, 128
  %218 = getelementptr inbounds i16, i16* %162, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = sext i16 %219 to i32
  %221 = mul nsw i32 %220, %216
  %222 = load i8, i8* %182, align 1
  %223 = sext i8 %222 to i32
  %224 = add nuw nsw i64 %186, 256
  %225 = getelementptr inbounds i16, i16* %162, i64 %224
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i32
  %228 = mul nsw i32 %227, %223
  %229 = load i8, i8* %183, align 1
  %230 = sext i8 %229 to i32
  %231 = add nuw nsw i64 %186, 384
  %232 = getelementptr inbounds i16, i16* %162, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = sext i16 %233 to i32
  %235 = mul nsw i32 %234, %230
  %236 = load i8, i8* %184, align 1
  %237 = sext i8 %236 to i32
  %238 = add nuw nsw i64 %186, 512
  %239 = getelementptr inbounds i16, i16* %162, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = sext i16 %240 to i32
  %242 = mul nsw i32 %241, %237
  %243 = add nsw i32 %194, 32
  %244 = add nsw i32 %243, %201
  %245 = add nsw i32 %244, %208
  %246 = add nsw i32 %245, %214
  %247 = add nsw i32 %246, %221
  %248 = add nsw i32 %247, %228
  %249 = add nsw i32 %248, %235
  %250 = add nsw i32 %249, %242
  %251 = ashr i32 %250, 6
  br label %256

252:                                              ; preds = %185
  %253 = getelementptr inbounds i16, i16* %162, i64 %186
  %254 = load i16, i16* %253, align 2
  %255 = sext i16 %254 to i32
  br label %256

256:                                              ; preds = %252, %187
  %257 = phi i32 [ %251, %187 ], [ %255, %252 ]
  %258 = trunc i32 %257 to i16
  %259 = getelementptr inbounds i16, i16* %163, i64 %186
  store i16 %258, i16* %259, align 2
  %260 = add nuw nsw i64 %186, 1
  %261 = icmp eq i64 %260, %158
  br i1 %261, label %262, label %185

262:                                              ; preds = %256, %174
  %263 = add nsw i32 %164, %8
  %264 = ashr i32 %263, 10
  %265 = shl nsw i32 %264, 7
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i16, i16* %162, i64 %266
  %268 = and i32 %263, 1023
  %269 = getelementptr inbounds i16, i16* %163, i64 %157
  %270 = add nuw nsw i32 %161, 1
  %271 = icmp eq i32 %270, %4
  br i1 %271, label %159, label %160
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @w_mask_c(i8* nocapture, i64, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i8* nocapture, i32, i32, i32) unnamed_addr #2 {
  %11 = sext i32 %4 to i64
  %12 = icmp sgt i32 %4, 0
  %13 = icmp eq i32 %8, 0
  %14 = icmp eq i32 %9, 0
  %15 = sub i32 1, %7
  %16 = icmp ne i32 %9, 0
  %17 = ashr i32 %4, %8
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %28, %10
  %20 = phi i8* [ %6, %10 ], [ %36, %28 ]
  %21 = phi i32 [ %5, %10 ], [ %37, %28 ]
  %22 = phi i16* [ %3, %10 ], [ %30, %28 ]
  %23 = phi i16* [ %2, %10 ], [ %29, %28 ]
  %24 = phi i8* [ %0, %10 ], [ %31, %28 ]
  br i1 %12, label %25, label %28

25:                                               ; preds = %19
  %26 = and i32 %21, %9
  %27 = icmp eq i32 %26, 0
  br label %39

28:                                               ; preds = %127, %19
  %29 = getelementptr inbounds i16, i16* %23, i64 %11
  %30 = getelementptr inbounds i16, i16* %22, i64 %11
  %31 = getelementptr inbounds i8, i8* %24, i64 %1
  %32 = and i32 %21, 1
  %33 = icmp eq i32 %32, 0
  %34 = and i1 %16, %33
  %35 = getelementptr inbounds i8, i8* %20, i64 %18
  %36 = select i1 %34, i8* %20, i8* %35
  %37 = add nsw i32 %21, -1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %131, label %19

39:                                               ; preds = %25, %127
  %40 = phi i32 [ 0, %25 ], [ %129, %127 ]
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %23, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = getelementptr inbounds i16, i16* %22, i64 %41
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = add nuw nsw i32 %51, 8
  %53 = lshr i32 %52, 8
  %54 = icmp ult i32 %53, 26
  %55 = select i1 %54, i32 %53, i32 26
  %56 = add nuw nsw i32 %55, 38
  %57 = mul nsw i32 %56, %44
  %58 = sub nuw nsw i32 26, %55
  %59 = mul nsw i32 %58, %47
  %60 = add nsw i32 %59, 512
  %61 = add nsw i32 %60, %57
  %62 = ashr i32 %61, 10
  %63 = icmp slt i32 %62, 255
  %64 = select i1 %63, i32 %62, i32 255
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %24, i64 %41
  store i8 %67, i8* %68, align 1
  br i1 %13, label %124, label %69

69:                                               ; preds = %39
  %70 = add nsw i32 %40, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i16, i16* %23, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = getelementptr inbounds i16, i16* %22, i64 %71
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = icmp slt i32 %78, 0
  %80 = sub nsw i32 0, %78
  %81 = select i1 %79, i32 %80, i32 %78
  %82 = add nuw nsw i32 %81, 8
  %83 = lshr i32 %82, 8
  %84 = icmp ult i32 %83, 26
  %85 = select i1 %84, i32 %83, i32 26
  %86 = add nuw nsw i32 %85, 38
  %87 = mul nsw i32 %86, %74
  %88 = sub nuw nsw i32 26, %85
  %89 = mul nsw i32 %88, %77
  %90 = add nsw i32 %89, 512
  %91 = add nsw i32 %90, %87
  %92 = ashr i32 %91, 10
  %93 = icmp slt i32 %92, 255
  %94 = select i1 %93, i32 %92, i32 255
  %95 = icmp sgt i32 %94, 0
  %96 = select i1 %95, i32 %94, i32 0
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %24, i64 %71
  store i8 %97, i8* %98, align 1
  %99 = add nuw nsw i32 %86, %56
  br i1 %27, label %111, label %100

100:                                              ; preds = %69
  %101 = ashr i32 %70, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %20, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i32 %99, 2
  %107 = sub i32 %106, %7
  %108 = add i32 %107, %105
  %109 = lshr i32 %108, 2
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %103, align 1
  br label %127

111:                                              ; preds = %69
  br i1 %14, label %117, label %112

112:                                              ; preds = %111
  %113 = trunc i32 %99 to i8
  %114 = ashr i32 %70, 1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %20, i64 %115
  store i8 %113, i8* %116, align 1
  br label %127

117:                                              ; preds = %111
  %118 = add i32 %15, %99
  %119 = lshr i32 %118, 1
  %120 = trunc i32 %119 to i8
  %121 = ashr i32 %70, 1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %20, i64 %122
  store i8 %120, i8* %123, align 1
  br label %127

124:                                              ; preds = %39
  %125 = trunc i32 %56 to i8
  %126 = getelementptr inbounds i8, i8* %20, i64 %41
  store i8 %125, i8* %126, align 1
  br label %127

127:                                              ; preds = %100, %117, %112, %124
  %128 = phi i32 [ %40, %124 ], [ %70, %112 ], [ %70, %117 ], [ %70, %100 ]
  %129 = add nsw i32 %128, 1
  %130 = icmp slt i32 %129, %4
  br i1 %130, label %39, label %28

131:                                              ; preds = %28
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!17, !14}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !5, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !5, !3}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !3}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = !{!40}
!40 = distinct !{!40, !36}
!41 = !{!38, !35}
!42 = distinct !{!42, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = distinct !{!45, !5, !3}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = !{!52}
!52 = distinct !{!52, !48}
!53 = !{!47, !50}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !3}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = !{!62}
!62 = distinct !{!62, !58}
!63 = !{!57, !60}
!64 = distinct !{!64, !3}
!65 = distinct !{!65, !3}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = !{!72}
!72 = distinct !{!72, !68}
!73 = !{!74}
!74 = distinct !{!74, !68}
!75 = !{!67, !70, !72}
!76 = distinct !{!76, !3}
!77 = distinct !{!77, !3}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82, !83}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !80}
!84 = !{!82}
!85 = !{!83}
!86 = distinct !{!86, !3}
!87 = distinct !{!87, !3}
!88 = !{!89}
!89 = distinct !{!89, !90}
!90 = distinct !{!90, !"LVerDomain"}
!91 = !{!92, !93}
!92 = distinct !{!92, !90}
!93 = distinct !{!93, !90}
!94 = !{!92}
!95 = !{!93}
!96 = distinct !{!96, !3}
!97 = distinct !{!97, !3}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !3}
!104 = distinct !{!104, !3}
!105 = !{!106}
!106 = distinct !{!106, !107}
!107 = distinct !{!107, !"LVerDomain"}
!108 = !{!109}
!109 = distinct !{!109, !107}
!110 = !{!111}
!111 = distinct !{!111, !107}
!112 = !{!113, !106, !109}
!113 = distinct !{!113, !107}
!114 = !{!113}
!115 = !{!106, !109}
!116 = distinct !{!116, !3}
!117 = distinct !{!117, !3}
!118 = distinct !{!118, !119}
!119 = !{!"llvm.loop.unroll.disable"}
!120 = distinct !{!120, !119}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = !{!127}
!127 = distinct !{!127, !123}
!128 = !{!122, !125}
!129 = distinct !{!129, !3}
!130 = distinct !{!130, !3}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = !{!137}
!137 = distinct !{!137, !133}
!138 = !{!132, !135}
!139 = distinct !{!139, !3}
!140 = distinct !{!140, !3}
!141 = distinct !{!141, !119}
!142 = !{!143}
!143 = distinct !{!143, !144}
!144 = distinct !{!144, !"LVerDomain"}
!145 = !{!146}
!146 = distinct !{!146, !144}
!147 = !{!148}
!148 = distinct !{!148, !144}
!149 = !{!143, !146}
!150 = distinct !{!150, !3}
!151 = distinct !{!151, !3}
!152 = !{!153}
!153 = distinct !{!153, !154}
!154 = distinct !{!154, !"LVerDomain"}
!155 = !{!156}
!156 = distinct !{!156, !154}
!157 = !{!158}
!158 = distinct !{!158, !154}
!159 = !{!153, !156}
!160 = distinct !{!160, !3}
!161 = distinct !{!161, !3}
!162 = distinct !{!162, !119}
!163 = !{!164}
!164 = distinct !{!164, !165}
!165 = distinct !{!165, !"LVerDomain"}
!166 = !{!167}
!167 = distinct !{!167, !165}
!168 = distinct !{!168, !3}
!169 = distinct !{!169, !3}
