; ModuleID = '../../third_party/webrtc/common_video/h264/h264_common.cc'
source_filename = "../../third_party/webrtc/common_video/h264/h264_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"*, %"class.std::__1::__compressed_pair" }
%"struct.webrtc::H264::NaluIndex" = type { i64, i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::H264::NaluIndex"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i8*, i8*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i8* }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.4" }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4H26415FindNaluIndicesEPKhm(%"class.std::__1::vector"* noalias sret, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #6
  %8 = icmp ult i64 %2, 3
  br i1 %8, label %124, label %9

9:                                                ; preds = %3
  %10 = add i64 %2, -3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %124, label %12

12:                                               ; preds = %9
  %13 = bitcast %"struct.webrtc::H264::NaluIndex"** %5 to i64*
  %14 = bitcast %"class.std::__1::vector"* %0 to i64*
  %15 = bitcast %"struct.webrtc::H264::NaluIndex"** %6 to i64*
  br label %20

16:                                               ; preds = %116
  %17 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %5, align 8
  %18 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %4, align 8
  %19 = icmp eq %"struct.webrtc::H264::NaluIndex"* %17, %18
  br i1 %19, label %124, label %119

20:                                               ; preds = %12, %116
  %21 = phi i64 [ 0, %12 ], [ %117, %116 ]
  %22 = add i64 %21, 2
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = icmp ugt i8 %24, 1
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = add i64 %21, 3
  br label %116

28:                                               ; preds = %20
  %29 = icmp eq i8 %24, 1
  %30 = add nuw i64 %21, 1
  br i1 %29, label %31, label %116

31:                                               ; preds = %28
  %32 = getelementptr inbounds i8, i8* %1, i64 %30
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %114

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %1, i64 %21
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %114

39:                                               ; preds = %35
  %40 = add i64 %21, 3
  %41 = icmp eq i64 %21, 0
  br i1 %41, label %48, label %42

42:                                               ; preds = %39
  %43 = add i64 %21, -1
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i64 %43, i64 %21
  br label %48

48:                                               ; preds = %42, %39
  %49 = phi i64 [ 0, %39 ], [ %47, %42 ]
  %50 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %5, align 8
  %51 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %4, align 8
  %52 = icmp eq %"struct.webrtc::H264::NaluIndex"* %50, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %50, i64 -1, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %49, %55
  %57 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %50, i64 -1, i32 2
  store i64 %56, i64* %57, align 8
  %58 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %5, align 8
  br label %59

59:                                               ; preds = %48, %53
  %60 = phi %"struct.webrtc::H264::NaluIndex"* [ %50, %48 ], [ %58, %53 ]
  %61 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %60 to i64
  %62 = load %"struct.webrtc::H264::NaluIndex"*, %"struct.webrtc::H264::NaluIndex"** %6, align 8
  %63 = icmp eq %"struct.webrtc::H264::NaluIndex"* %60, %62
  br i1 %63, label %70, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %60, i64 0, i32 0
  store i64 %49, i64* %65, align 8
  %66 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %60, i64 0, i32 1
  store i64 %40, i64* %66, align 8
  %67 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %60, i64 0, i32 2
  store i64 0, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %60, i64 1
  %69 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %68 to i64
  store i64 %69, i64* %13, align 8
  br label %114

70:                                               ; preds = %59
  %71 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %62 to i64
  %72 = load i64, i64* %14, align 8
  %73 = sub i64 %71, %72
  %74 = sdiv exact i64 %73, 24
  %75 = add nsw i64 %74, 1
  %76 = icmp ugt i64 %75, 768614336404564650
  br i1 %76, label %77, label %79

77:                                               ; preds = %70
  %78 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %78) #7
  unreachable

79:                                               ; preds = %70
  %80 = icmp ult i64 %74, 384307168202282325
  br i1 %80, label %81, label %86

81:                                               ; preds = %79
  %82 = shl nsw i64 %74, 1
  %83 = icmp ult i64 %82, %75
  %84 = select i1 %83, i64 %75, i64 %82
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %81, %79
  %87 = phi i64 [ %84, %81 ], [ 768614336404564650, %79 ]
  %88 = mul i64 %87, 24
  %89 = tail call i8* @_Znwm(i64 %88) #8
  %90 = bitcast i8* %89 to %"struct.webrtc::H264::NaluIndex"*
  br label %91

91:                                               ; preds = %86, %81
  %92 = phi i64 [ %87, %86 ], [ 0, %81 ]
  %93 = phi %"struct.webrtc::H264::NaluIndex"* [ %90, %86 ], [ null, %81 ]
  %94 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %93, i64 %74
  %95 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %93, i64 %92
  %96 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %95 to i64
  %97 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %94, i64 0, i32 0
  store i64 %49, i64* %97, align 8
  %98 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %93, i64 %74, i32 1
  store i64 %40, i64* %98, align 8
  %99 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %93, i64 %74, i32 2
  store i64 0, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %94, i64 1
  %101 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %100 to i64
  %102 = sub i64 %61, %72
  %103 = sdiv exact i64 %102, -24
  %104 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %94, i64 %103
  %105 = ptrtoint %"struct.webrtc::H264::NaluIndex"* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %91
  %108 = bitcast %"struct.webrtc::H264::NaluIndex"* %104 to i8*
  %109 = inttoptr i64 %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 %102, i1 false) #6
  br label %110

110:                                              ; preds = %107, %91
  store i64 %105, i64* %14, align 8
  store i64 %101, i64* %13, align 8
  store i64 %96, i64* %15, align 8
  %111 = icmp eq i64 %72, 0
  br i1 %111, label %114, label %112

112:                                              ; preds = %110
  %113 = inttoptr i64 %72 to i8*
  tail call void @_ZdlPv(i8* %113) #8
  br label %114

114:                                              ; preds = %112, %110, %64, %35, %31
  %115 = add i64 %21, 3
  br label %116

116:                                              ; preds = %28, %114, %26
  %117 = phi i64 [ %27, %26 ], [ %115, %114 ], [ %30, %28 ]
  %118 = icmp ult i64 %117, %10
  br i1 %118, label %20, label %16

119:                                              ; preds = %16
  %120 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %17, i64 -1, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %2, %121
  %123 = getelementptr inbounds %"struct.webrtc::H264::NaluIndex", %"struct.webrtc::H264::NaluIndex"* %17, i64 -1, i32 2
  store i64 %122, i64* %123, align 8
  br label %124

124:                                              ; preds = %9, %16, %119, %3
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN6webrtc4H26413ParseNaluTypeEh(i8 zeroext) local_unnamed_addr #1 {
  %2 = and i8 %0, 31
  ret i8 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4H2649ParseRbspEPKhm(%"class.std::__1::vector.1"* noalias sret, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #6
  %7 = bitcast i8** %5 to i64*
  %8 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %174, label %10

10:                                               ; preds = %3
  %11 = bitcast i8** %4 to i64*
  %12 = tail call i8* @_Znwm(i64 %2) #8
  %13 = ptrtoint i8* %12 to i64
  %14 = getelementptr inbounds i8, i8* %12, i64 %2
  %15 = ptrtoint i8* %14 to i64
  store i64 %13, i64* %8, align 8
  store i64 %13, i64* %11, align 8
  store i64 %15, i64* %7, align 8
  %16 = bitcast i8** %4 to i64*
  br label %17

17:                                               ; preds = %10, %170
  %18 = phi i64 [ 0, %10 ], [ %172, %170 ]
  %19 = sub i64 %2, %18
  %20 = icmp ugt i64 %19, 2
  br i1 %20, label %21, label %125

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %1, i64 %18
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %125

25:                                               ; preds = %21
  %26 = add nuw i64 %18, 1
  %27 = getelementptr inbounds i8, i8* %1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %125

30:                                               ; preds = %25
  %31 = add i64 %18, 2
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 3
  br i1 %34, label %35, label %125

35:                                               ; preds = %30
  %36 = load i8*, i8** %4, align 8
  %37 = load i8*, i8** %5, align 8
  %38 = icmp eq i8* %36, %37
  %39 = ptrtoint i8* %37 to i64
  br i1 %38, label %43, label %40

40:                                               ; preds = %35
  store i8 0, i8* %36, align 1
  %41 = getelementptr inbounds i8, i8* %36, i64 1
  %42 = ptrtoint i8* %41 to i64
  store i64 %42, i64* %16, align 8
  br label %79

43:                                               ; preds = %35
  %44 = ptrtoint i8* %36 to i64
  %45 = load i64, i64* %8, align 8
  %46 = sub i64 %44, %45
  %47 = add i64 %46, 1
  %48 = icmp slt i64 %47, 0
  %49 = inttoptr i64 %45 to i8*
  br i1 %48, label %50, label %52

50:                                               ; preds = %43
  %51 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #7
  unreachable

52:                                               ; preds = %43
  %53 = sub i64 %39, %45
  %54 = icmp ult i64 %53, 4611686018427387903
  br i1 %54, label %55, label %60

55:                                               ; preds = %52
  %56 = shl i64 %53, 1
  %57 = icmp ult i64 %56, %47
  %58 = select i1 %57, i64 %47, i64 %56
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %55, %52
  %61 = phi i64 [ %58, %55 ], [ 9223372036854775807, %52 ]
  %62 = tail call i8* @_Znwm(i64 %61) #8
  br label %63

63:                                               ; preds = %60, %55
  %64 = phi i64 [ %61, %60 ], [ 0, %55 ]
  %65 = phi i8* [ %62, %60 ], [ null, %55 ]
  %66 = getelementptr inbounds i8, i8* %65, i64 %46
  %67 = getelementptr inbounds i8, i8* %65, i64 %64
  %68 = ptrtoint i8* %67 to i64
  store i8 0, i8* %66, align 1
  %69 = getelementptr inbounds i8, i8* %66, i64 1
  %70 = ptrtoint i8* %69 to i64
  %71 = ptrtoint i8* %65 to i64
  %72 = icmp sgt i64 %46, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %63
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %49, i64 %46, i1 false) #6
  br label %74

74:                                               ; preds = %73, %63
  store i64 %71, i64* %8, align 8
  store i64 %70, i64* %16, align 8
  store i64 %68, i64* %7, align 8
  %75 = icmp eq i64 %45, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %74
  tail call void @_ZdlPv(i8* nonnull %49) #8
  %77 = load i8*, i8** %4, align 8
  %78 = ptrtoint i8* %77 to i64
  br label %79

79:                                               ; preds = %40, %74, %76
  %80 = phi i64 [ %42, %40 ], [ %70, %74 ], [ %78, %76 ]
  %81 = phi i8* [ %41, %40 ], [ %69, %74 ], [ %77, %76 ]
  %82 = load i8*, i8** %5, align 8
  %83 = icmp eq i8* %81, %82
  br i1 %83, label %88, label %84

84:                                               ; preds = %79
  %85 = load i8, i8* %27, align 1
  store i8 %85, i8* %81, align 1
  %86 = getelementptr inbounds i8, i8* %81, i64 1
  %87 = ptrtoint i8* %86 to i64
  store i64 %87, i64* %16, align 8
  br label %170

88:                                               ; preds = %79
  %89 = ptrtoint i8* %82 to i64
  %90 = load i64, i64* %8, align 8
  %91 = sub i64 %89, %90
  %92 = add i64 %91, 1
  %93 = icmp slt i64 %92, 0
  %94 = inttoptr i64 %90 to i8*
  br i1 %93, label %95, label %97

95:                                               ; preds = %88
  %96 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %96) #7
  unreachable

97:                                               ; preds = %88
  %98 = icmp ult i64 %91, 4611686018427387903
  br i1 %98, label %99, label %104

99:                                               ; preds = %97
  %100 = shl i64 %91, 1
  %101 = icmp ult i64 %100, %92
  %102 = select i1 %101, i64 %92, i64 %100
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %99, %97
  %105 = phi i64 [ %102, %99 ], [ 9223372036854775807, %97 ]
  %106 = tail call i8* @_Znwm(i64 %105) #8
  br label %107

107:                                              ; preds = %104, %99
  %108 = phi i64 [ %105, %104 ], [ 0, %99 ]
  %109 = phi i8* [ %106, %104 ], [ null, %99 ]
  %110 = getelementptr inbounds i8, i8* %109, i64 %91
  %111 = getelementptr inbounds i8, i8* %109, i64 %108
  %112 = ptrtoint i8* %111 to i64
  %113 = load i8, i8* %27, align 1
  store i8 %113, i8* %110, align 1
  %114 = getelementptr inbounds i8, i8* %110, i64 1
  %115 = ptrtoint i8* %114 to i64
  %116 = sub i64 %80, %90
  %117 = sub i64 0, %116
  %118 = getelementptr inbounds i8, i8* %110, i64 %117
  %119 = ptrtoint i8* %118 to i64
  %120 = icmp sgt i64 %116, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %107
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 1 %94, i64 %116, i1 false) #6
  br label %122

122:                                              ; preds = %121, %107
  store i64 %119, i64* %8, align 8
  store i64 %115, i64* %16, align 8
  store i64 %112, i64* %7, align 8
  %123 = icmp eq i64 %90, 0
  br i1 %123, label %170, label %124

124:                                              ; preds = %122
  tail call void @_ZdlPv(i8* nonnull %94) #8
  br label %170

125:                                              ; preds = %25, %21, %30, %17
  %126 = getelementptr inbounds i8, i8* %1, i64 %18
  %127 = load i8*, i8** %4, align 8
  %128 = load i8*, i8** %5, align 8
  %129 = icmp eq i8* %127, %128
  %130 = ptrtoint i8* %128 to i64
  br i1 %129, label %135, label %131

131:                                              ; preds = %125
  %132 = load i8, i8* %126, align 1
  store i8 %132, i8* %127, align 1
  %133 = getelementptr inbounds i8, i8* %127, i64 1
  %134 = ptrtoint i8* %133 to i64
  store i64 %134, i64* %16, align 8
  br label %170

135:                                              ; preds = %125
  %136 = ptrtoint i8* %127 to i64
  %137 = load i64, i64* %8, align 8
  %138 = sub i64 %136, %137
  %139 = add i64 %138, 1
  %140 = icmp slt i64 %139, 0
  %141 = inttoptr i64 %137 to i8*
  br i1 %140, label %142, label %144

142:                                              ; preds = %135
  %143 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %143) #7
  unreachable

144:                                              ; preds = %135
  %145 = sub i64 %130, %137
  %146 = icmp ult i64 %145, 4611686018427387903
  br i1 %146, label %147, label %152

147:                                              ; preds = %144
  %148 = shl i64 %145, 1
  %149 = icmp ult i64 %148, %139
  %150 = select i1 %149, i64 %139, i64 %148
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %155, label %152

152:                                              ; preds = %147, %144
  %153 = phi i64 [ %150, %147 ], [ 9223372036854775807, %144 ]
  %154 = tail call i8* @_Znwm(i64 %153) #8
  br label %155

155:                                              ; preds = %152, %147
  %156 = phi i64 [ %153, %152 ], [ 0, %147 ]
  %157 = phi i8* [ %154, %152 ], [ null, %147 ]
  %158 = getelementptr inbounds i8, i8* %157, i64 %138
  %159 = getelementptr inbounds i8, i8* %157, i64 %156
  %160 = ptrtoint i8* %159 to i64
  %161 = load i8, i8* %126, align 1
  store i8 %161, i8* %158, align 1
  %162 = getelementptr inbounds i8, i8* %158, i64 1
  %163 = ptrtoint i8* %162 to i64
  %164 = ptrtoint i8* %157 to i64
  %165 = icmp sgt i64 %138, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %155
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %157, i8* align 1 %141, i64 %138, i1 false) #6
  br label %167

167:                                              ; preds = %166, %155
  store i64 %164, i64* %8, align 8
  store i64 %163, i64* %16, align 8
  store i64 %160, i64* %7, align 8
  %168 = icmp eq i64 %137, 0
  br i1 %168, label %170, label %169

169:                                              ; preds = %167
  tail call void @_ZdlPv(i8* nonnull %141) #8
  br label %170

170:                                              ; preds = %169, %167, %131, %124, %122, %84
  %171 = phi i64 [ %31, %84 ], [ %31, %122 ], [ %31, %124 ], [ %18, %131 ], [ %18, %167 ], [ %18, %169 ]
  %172 = add i64 %171, 1
  %173 = icmp ult i64 %172, %2
  br i1 %173, label %17, label %174

174:                                              ; preds = %170, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4H2649WriteRbspEPKhmPN3rtc7BufferTIhLb0EEE(i8* nocapture readonly, i64, %"class.rtc::BufferT"* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %2, i64 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %1
  %7 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %2, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  br i1 %9, label %10, label %22

10:                                               ; preds = %3
  %11 = tail call i8* @_Znam(i64 %6) #8
  %12 = ptrtoint i8* %11 to i64
  %13 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %2, i64 0, i32 2
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %10
  %18 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  store i64 %12, i64* %18, align 8
  br label %21

19:                                               ; preds = %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %11, i8* nonnull align 1 %15, i64 %5, i1 false) #6
  %20 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  store i64 %12, i64* %20, align 8
  tail call void @_ZdaPv(i8* nonnull %15) #8
  br label %21

21:                                               ; preds = %19, %17
  store i64 %6, i64* %7, align 8
  br label %22

22:                                               ; preds = %3, %21
  %23 = icmp eq i64 %1, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %2, i64 0, i32 2
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %2, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %30

29:                                               ; preds = %81, %22
  ret void

30:                                               ; preds = %81, %24
  %31 = phi i64 [ 0, %24 ], [ %88, %81 ]
  %32 = phi i64 [ 0, %24 ], [ %87, %81 ]
  %33 = getelementptr inbounds i8, i8* %0, i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = icmp ult i8 %34, 4
  %36 = icmp ugt i64 %32, 1
  %37 = and i1 %36, %35
  %38 = load i64, i64* %4, align 8
  br i1 %37, label %39, label %61

39:                                               ; preds = %30
  %40 = add i64 %38, 1
  %41 = load i64, i64* %7, align 8
  %42 = icmp ult i64 %41, %40
  br i1 %42, label %43, label %57

43:                                               ; preds = %39
  %44 = lshr i64 %41, 1
  %45 = add i64 %44, %41
  %46 = icmp ugt i64 %45, %40
  %47 = select i1 %46, i64 %45, i64 %40
  %48 = tail call i8* @_Znam(i64 %47) #8
  %49 = ptrtoint i8* %48 to i64
  %50 = load i8*, i8** %26, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %43
  store i64 %49, i64* %27, align 8
  br label %55

53:                                               ; preds = %43
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* nonnull align 1 %50, i64 %38, i1 false) #6
  store i64 %49, i64* %27, align 8
  tail call void @_ZdaPv(i8* nonnull %50) #8
  %54 = load i64, i64* %4, align 8
  br label %55

55:                                               ; preds = %53, %52
  %56 = phi i64 [ %54, %53 ], [ %38, %52 ]
  store i64 %47, i64* %7, align 8
  br label %57

57:                                               ; preds = %39, %55
  %58 = phi i64 [ %38, %39 ], [ %56, %55 ]
  %59 = load i8*, i8** %28, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 %58
  store i8 3, i8* %60, align 1
  store i64 %40, i64* %4, align 8
  br label %61

61:                                               ; preds = %30, %57
  %62 = phi i64 [ %40, %57 ], [ %38, %30 ]
  %63 = phi i64 [ 0, %57 ], [ %32, %30 ]
  %64 = add i64 %62, 1
  %65 = load i64, i64* %7, align 8
  %66 = icmp ult i64 %65, %64
  br i1 %66, label %67, label %81

67:                                               ; preds = %61
  %68 = lshr i64 %65, 1
  %69 = add i64 %68, %65
  %70 = icmp ugt i64 %69, %64
  %71 = select i1 %70, i64 %69, i64 %64
  %72 = tail call i8* @_Znam(i64 %71) #8
  %73 = ptrtoint i8* %72 to i64
  %74 = load i8*, i8** %26, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %76, label %77

76:                                               ; preds = %67
  store i64 %73, i64* %27, align 8
  br label %79

77:                                               ; preds = %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %72, i8* nonnull align 1 %74, i64 %62, i1 false) #6
  store i64 %73, i64* %27, align 8
  tail call void @_ZdaPv(i8* nonnull %74) #8
  %78 = load i64, i64* %4, align 8
  br label %79

79:                                               ; preds = %77, %76
  %80 = phi i64 [ %78, %77 ], [ %62, %76 ]
  store i64 %71, i64* %7, align 8
  br label %81

81:                                               ; preds = %61, %79
  %82 = phi i64 [ %62, %61 ], [ %80, %79 ]
  %83 = load i8*, i8** %28, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %82
  store i8 %34, i8* %84, align 1
  store i64 %64, i64* %4, align 8
  %85 = icmp eq i8 %34, 0
  %86 = add i64 %63, 1
  %87 = select i1 %85, i64 %86, i64 0
  %88 = add nuw i64 %31, 1
  %89 = icmp eq i64 %88, %1
  br i1 %89, label %29, label %30
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
