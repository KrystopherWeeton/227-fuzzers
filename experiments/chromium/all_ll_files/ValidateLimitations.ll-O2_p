; ModuleID = '../../third_party/angle/src/compiler/translator/ValidateLimitations.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/ValidateLimitations.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector", %"class.std::__1::vector.1", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr.3"*, %"class.std::__1::unique_ptr.3"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::unique_ptr.3" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::unique_ptr.3"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.17"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.17" = type { %"class.std::__1::vector.18" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.20" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.28, i32 }
%union.anon.28 = type { i32 }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.29", %"class.std::__1::vector.37" }
%"class.std::__1::basic_string.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.32 }
%union.anon.32 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { i32*, i32*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i32* }
%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser" = type { %"class.sh::TLValueTrackingTraverser.base", i32, %"class.sh::TDiagnostics"*, %"class.std::__1::vector.80" }
%"class.sh::TLValueTrackingTraverser.base" = type <{ %"class.sh::TIntermTraverser", i8, i8 }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.44", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.59", %"class.std::__1::vector.66", %"class.sh::TVector.46", %"class.std::__1::vector.73" }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.54" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.46" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.46", %"class.sh::TVector.46" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.46", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.68" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector.46" = type { %"class.std::__1::vector.47" }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.75" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { i32*, i32*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { i32* }
%"class.sh::TLValueTrackingTraverser" = type <{ %"class.sh::TIntermTraverser", i8, i8, [6 x i8] }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.87", i8, [7 x i8] }>
%"class.sh::TVector.87" = type { %"class.std::__1::vector.88" }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { i32*, i32*, %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::(anonymous namespace)::ValidateConstIndexExpr" = type { %"class.sh::TIntermTraverser", i8, %"class.std::__1::vector.80" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.94"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.94" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.46", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.46" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

@_ZTVN2sh12_GLOBAL__N_128ValidateLimitationsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*)* @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*)* @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str = private unnamed_addr constant [72 x i8] c"Loop index cannot be statically assigned to within the body of the loop\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"Index expression must be constant\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@_ZTVN2sh12_GLOBAL__N_122ValidateConstIndexExprE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"*)* @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExprD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"*)* @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExprD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExpr11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.5 = private unnamed_addr constant [33 x i8] c"This type of loop is not allowed\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"while\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Missing init declaration\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"for\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Invalid init declaration\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"Invalid type for loop index\00", align 1
@.str.12 = private unnamed_addr constant [62 x i8] c"Loop index cannot be initialized with non-constant expression\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"Missing condition\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"Invalid condition\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"Expected loop index\00", align 1
@.str.16 = private unnamed_addr constant [28 x i8] c"Invalid relational operator\00", align 1
@.str.17 = private unnamed_addr constant [59 x i8] c"Loop index cannot be compared with non-constant expression\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"Missing expression\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"Invalid expression\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"Invalid operator\00", align 1
@.str.21 = private unnamed_addr constant [57 x i8] c"Loop index cannot be modified by non-constant expression\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh19ValidateLimitationsEPNS_11TIntermNodeEjPNS_12TSymbolTableEPNS_12TDiagnosticsE(%"class.sh::TIntermNode"*, i32, %"class.sh::TSymbolTable"*, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 {
  %5 = alloca %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", align 8
  %6 = bitcast %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 192, i1 false)
  %7 = bitcast %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5 to %"class.sh::TLValueTrackingTraverser"*
  call void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"* nonnull %7, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #9
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_128ValidateLimitationsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 1
  store i32 %1, i32* %9, align 4
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 2
  store %"class.sh::TDiagnostics"* %3, %"class.sh::TDiagnostics"** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 3
  %12 = bitcast %"class.std::__1::vector.80"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 0, i32 0
  %14 = bitcast %"class.sh::TIntermNode"* %0 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %15 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %15, i64 2
  %17 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %16, align 8
  call void %17(%"class.sh::TIntermNode"* %0, %"class.sh::TIntermTraverser"* nonnull %13) #9
  %18 = getelementptr inbounds %"class.sh::TDiagnostics", %"class.sh::TDiagnostics"* %3, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_128ValidateLimitationsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %21 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 3, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %4
  %25 = ptrtoint i32* %22 to i64
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %5, i64 0, i32 3, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = bitcast i32* %22 to i8*
  call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %4, %24
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %6) #9
  ret i1 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverserD2Ev(%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_128ValidateLimitationsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh24TLValueTrackingTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TLValueTrackingTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverserD0Ev(%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_128ValidateLimitationsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* nocapture readonly, %"class.sh::TIntermSymbol"*) unnamed_addr #0 align 2 {
  %3 = alloca <2 x i64>, align 16
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 1
  %7 = load i32*, i32** %6, align 8
  %8 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %1) #9
  %9 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32* %5, %7
  br i1 %11, label %19, label %12

12:                                               ; preds = %2, %16
  %13 = phi i32* [ %17, %16 ], [ %5, %2 ]
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %10
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds i32, i32* %13, i64 1
  %18 = icmp eq i32* %17, %7
  br i1 %18, label %19, label %12

19:                                               ; preds = %12, %16, %2
  %20 = phi i32* [ %5, %2 ], [ %7, %16 ], [ %13, %12 ]
  %21 = load i32*, i32** %6, align 8
  %22 = icmp eq i32* %20, %21
  br i1 %22, label %43, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 1
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 2
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %27, %23
  %32 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast %"struct.sh::TSourceLoc"* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 4
  %35 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* %1) #9
  %36 = extractvalue { i8*, i64 } %35, 0
  %37 = icmp eq i8* %36, null
  %38 = select i1 %37, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %36
  %39 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #9
  %40 = bitcast <2 x i64>* %3 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %34, <2 x i64>* %3, align 16
  %41 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %42 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %41, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %42, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %40, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str, i64 0, i64 0), i8* %38) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #9
  br label %43

43:                                               ; preds = %27, %19, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* nocapture readonly, i32, %"class.sh::TIntermBinary"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", align 8
  %5 = alloca <2 x i64>, align 16
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = and i8 %7, -2
  %9 = icmp eq i8 %8, 44
  br i1 %9, label %10, label %90

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 3
  %12 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 2
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 35633
  br i1 %17, label %18, label %27

18:                                               ; preds = %10
  %19 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %20, i64 31
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %21, align 8
  %23 = tail call dereferenceable(184) %"class.sh::TType"* %22(%"class.sh::TIntermTyped"* %14) #9
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %23, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 6
  br i1 %26, label %90, label %27

27:                                               ; preds = %18, %10
  %28 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %12, i64 0, i32 0
  %29 = bitcast %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %29) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 184, i1 false) #9
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3
  %31 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %31, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* null) #9
  %32 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ValidateConstIndexExprE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %33 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 1
  store i8 1, i8* %33, align 8
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 2
  %35 = bitcast %"class.std::__1::vector.80"* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #9
  %36 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.80"* %30 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %66, label %44

44:                                               ; preds = %27
  %45 = icmp ugt i64 %42, 4611686018427387903
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"class.std::__1::vector.80"* %34 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #11
  unreachable

48:                                               ; preds = %44
  %49 = call i8* @_Znwm(i64 %41) #10
  %50 = bitcast i8* %49 to i32*
  %51 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 2, i32 0, i32 1
  %52 = bitcast i32** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"class.std::__1::vector.80"* %34 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds i32, i32* %50, i64 %42
  %55 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store i32* %54, i32** %55, align 8
  %56 = bitcast i32** %51 to i64*
  %57 = ptrtoint i8* %49 to i64
  %58 = icmp sgt i64 %41, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %48
  %60 = lshr exact i64 %41, 2
  %61 = inttoptr i64 %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %61, i64 %41, i1 false) #9
  %62 = getelementptr inbounds i32, i32* %50, i64 %60
  %63 = ptrtoint i32* %62 to i64
  br label %64

64:                                               ; preds = %59, %48
  %65 = phi i64 [ %63, %59 ], [ %57, %48 ]
  store i64 %65, i64* %56, align 8
  br label %66

66:                                               ; preds = %64, %27
  %67 = bitcast %"class.sh::TIntermTyped"* %12 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %68 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %68, i64 2
  %70 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %69, align 8
  call void %70(%"class.sh::TIntermNode"* %28, %"class.sh::TIntermTraverser"* nonnull %31) #9
  %71 = load i8, i8* %33, align 8, !range !2
  %72 = icmp eq i8 %71, 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ValidateConstIndexExprE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %73 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 2, i32 0, i32 0
  %74 = load i32*, i32** %73, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %81, label %76

76:                                               ; preds = %66
  %77 = ptrtoint i32* %74 to i64
  %78 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %4, i64 0, i32 2, i32 0, i32 1
  %79 = bitcast i32** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = bitcast i32* %74 to i8*
  call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %76, %66
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %31) #9
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %29) #9
  br i1 %72, label %82, label %90

82:                                               ; preds = %81
  %83 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %12, i64 0, i32 0, i32 1
  %84 = bitcast %"struct.sh::TSourceLoc"* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 4
  %86 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %86) #9
  %87 = bitcast <2 x i64>* %5 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %85, <2 x i64>* %5, align 16
  %88 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %89 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %88, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %89, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %87, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %86) #9
  br label %90

90:                                               ; preds = %82, %81, %18, %3
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_128ValidateLimitationsTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"*, i32, %"class.sh::TIntermLoop"* nocapture readonly) unnamed_addr #0 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <2 x i64>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <2 x i64>, align 16
  %23 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 0, i32 1
  %28 = bitcast %"struct.sh::TSourceLoc"* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 4
  %30 = icmp eq i32 %24, 1
  %31 = select i1 %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)
  %32 = bitcast <2 x i64>* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = bitcast <2 x i64>* %22 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %29, <2 x i64>* %22, align 16
  %34 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %35 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %34, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %35, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %33, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i8* %31) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  br label %534

36:                                               ; preds = %3
  %37 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 2
  %38 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %37, align 8
  %39 = icmp eq %"class.sh::TIntermNode"* %38, null
  br i1 %39, label %40, label %48

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 0, i32 1
  %42 = bitcast %"struct.sh::TSourceLoc"* %41 to <2 x i64>*
  %43 = load <2 x i64>, <2 x i64>* %42, align 4
  %44 = bitcast <2 x i64>* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #9
  %45 = bitcast <2 x i64>* %20 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %43, <2 x i64>* %20, align 16
  %46 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %47 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %46, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %47, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %45, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #9
  br label %534

48:                                               ; preds = %36
  %49 = bitcast %"class.sh::TIntermNode"* %38 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %50 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %49, align 8
  %51 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %50, i64 11
  %52 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %51, align 8
  %53 = tail call %"class.sh::TIntermDeclaration"* %52(%"class.sh::TIntermNode"* nonnull %38) #9
  %54 = icmp eq %"class.sh::TIntermDeclaration"* %53, null
  br i1 %54, label %55, label %63

55:                                               ; preds = %48
  %56 = getelementptr inbounds %"class.sh::TIntermNode", %"class.sh::TIntermNode"* %38, i64 0, i32 1
  %57 = bitcast %"struct.sh::TSourceLoc"* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 4
  %59 = bitcast <2 x i64>* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #9
  %60 = bitcast <2 x i64>* %19 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %58, <2 x i64>* %19, align 16
  %61 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %62 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %61, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %62, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %60, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #9
  br label %534

63:                                               ; preds = %48
  %64 = bitcast %"class.sh::TIntermDeclaration"* %53 to %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)***
  %65 = load %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*** %64, align 8
  %66 = getelementptr inbounds %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)** %65, i64 27
  %67 = load %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)** %66, align 8
  %68 = tail call %"class.sh::TVector.46"* %67(%"class.sh::TIntermDeclaration"* nonnull %53) #9
  %69 = getelementptr inbounds %"class.sh::TVector.46", %"class.sh::TVector.46"* %68, i64 0, i32 0, i32 0, i32 1
  %70 = bitcast %"class.sh::TIntermNode"*** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.sh::TVector.46"* %68 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %71, %73
  %75 = icmp eq i64 %74, 8
  br i1 %75, label %84, label %76

76:                                               ; preds = %63
  %77 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %53, i64 0, i32 0, i32 1
  %78 = bitcast %"struct.sh::TSourceLoc"* %77 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 4
  %80 = bitcast <2 x i64>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %80) #9
  %81 = bitcast <2 x i64>* %17 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %79, <2 x i64>* %17, align 16
  %82 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %83 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %82, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %83, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %81, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %80) #9
  br label %534

84:                                               ; preds = %63
  %85 = inttoptr i64 %73 to %"class.sh::TIntermNode"**
  %86 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, align 8
  %87 = bitcast %"class.sh::TIntermNode"* %86 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %88 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %87, align 8
  %89 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %88, i64 13
  %90 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %89, align 8
  %91 = tail call %"class.sh::TIntermBinary"* %90(%"class.sh::TIntermNode"* %86) #9
  %92 = icmp eq %"class.sh::TIntermBinary"* %91, null
  br i1 %92, label %97, label %93

93:                                               ; preds = %84
  %94 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %91, i64 0, i32 0, i32 1
  %95 = load i8, i8* %94, align 8
  %96 = icmp eq i8 %95, -117
  br i1 %96, label %105, label %97

97:                                               ; preds = %93, %84
  %98 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %53, i64 0, i32 0, i32 1
  %99 = bitcast %"struct.sh::TSourceLoc"* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 4
  %101 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #9
  %102 = bitcast <2 x i64>* %15 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %100, <2 x i64>* %15, align 16
  %103 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %104 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %103, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %104, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %102, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %101) #9
  br label %534

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %91, i64 0, i32 2
  %107 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %106, align 8
  %108 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %107, i64 0, i32 0
  %109 = bitcast %"class.sh::TIntermTyped"* %107 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %110 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %109, align 8
  %111 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %110, i64 19
  %112 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %111, align 8
  %113 = tail call %"class.sh::TIntermSymbol"* %112(%"class.sh::TIntermNode"* %108) #9
  %114 = icmp eq %"class.sh::TIntermSymbol"* %113, null
  br i1 %114, label %115, label %123

115:                                              ; preds = %105
  %116 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %117 = bitcast %"struct.sh::TSourceLoc"* %116 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 4
  %119 = bitcast <2 x i64>* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %119) #9
  %120 = bitcast <2 x i64>* %16 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %118, <2 x i64>* %16, align 16
  %121 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %122 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %121, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %122, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %120, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %119) #9
  br label %534

123:                                              ; preds = %105
  %124 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %113, i64 0, i32 0
  %125 = bitcast %"class.sh::TIntermSymbol"* %113 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %126 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %125, align 8
  %127 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %126, i64 31
  %128 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %127, align 8
  %129 = tail call dereferenceable(184) %"class.sh::TType"* %128(%"class.sh::TIntermTyped"* %124) #9
  %130 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %129, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  switch i32 %131, label %132 [
    i32 4, label %141
    i32 3, label %141
    i32 1, label %141
  ]

132:                                              ; preds = %123
  %133 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %113, i64 0, i32 0, i32 0, i32 1
  %134 = bitcast %"struct.sh::TSourceLoc"* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 4
  %136 = tail call i8* @_ZN2sh14getBasicStringENS_10TBasicTypeE(i32 %131) #9
  %137 = bitcast <2 x i64>* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #9
  %138 = bitcast <2 x i64>* %18 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %135, <2 x i64>* %18, align 16
  %139 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %140 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %139, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %140, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %138, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0), i8* %136) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #9
  br label %534

141:                                              ; preds = %123, %123, %123
  %142 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %91, i64 0, i32 3
  %143 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %142, align 8
  %144 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %143, i64 0, i32 0
  %145 = bitcast %"class.sh::TIntermTyped"* %143 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %146 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %145, align 8
  %147 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %146, i64 5
  %148 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %147, align 8
  %149 = tail call %"class.sh::TIntermConstantUnion"* %148(%"class.sh::TIntermNode"* %144) #9
  %150 = icmp eq %"class.sh::TIntermConstantUnion"* %149, null
  br i1 %150, label %165, label %151

151:                                              ; preds = %141
  %152 = bitcast %"class.sh::TIntermTyped"* %143 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %153 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %152, align 8
  %154 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %153, i64 4
  %155 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %154, align 8
  %156 = tail call %"class.sh::TIntermTyped"* %155(%"class.sh::TIntermNode"* %144) #9
  %157 = bitcast %"class.sh::TIntermTyped"* %156 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %158 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %157, align 8
  %159 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %158, i64 31
  %160 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %159, align 8
  %161 = tail call dereferenceable(184) %"class.sh::TType"* %160(%"class.sh::TIntermTyped"* %156) #9
  %162 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %161, i64 0, i32 2
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %163, 2
  br i1 %164, label %177, label %165

165:                                              ; preds = %151, %141
  %166 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %167 = bitcast %"struct.sh::TSourceLoc"* %166 to <2 x i64>*
  %168 = load <2 x i64>, <2 x i64>* %167, align 4
  %169 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %113) #9
  %170 = extractvalue { i8*, i64 } %169, 0
  %171 = icmp eq i8* %170, null
  %172 = select i1 %171, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %170
  %173 = bitcast <2 x i64>* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173) #9
  %174 = bitcast <2 x i64>* %21 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %168, <2 x i64>* %21, align 16
  %175 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %176 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %175, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %176, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %174, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.12, i64 0, i64 0), i8* %172) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173) #9
  br label %534

177:                                              ; preds = %151
  %178 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nonnull %113) #9
  %179 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %178, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = icmp slt i32 %180, 0
  br i1 %181, label %534, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 3
  %184 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %183, align 8
  %185 = icmp eq %"class.sh::TIntermTyped"* %184, null
  br i1 %185, label %186, label %194

186:                                              ; preds = %182
  %187 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 0, i32 1
  %188 = bitcast %"struct.sh::TSourceLoc"* %187 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 4
  %190 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %190) #9
  %191 = bitcast <2 x i64>* %13 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %189, <2 x i64>* %13, align 16
  %192 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %193 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %192, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %193, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %191, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %190) #9
  br label %534

194:                                              ; preds = %182
  %195 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %184, i64 0, i32 0
  %196 = bitcast %"class.sh::TIntermTyped"* %184 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %197 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %196, align 8
  %198 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %197, i64 13
  %199 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %198, align 8
  %200 = tail call %"class.sh::TIntermBinary"* %199(%"class.sh::TIntermNode"* %195) #9
  %201 = icmp eq %"class.sh::TIntermBinary"* %200, null
  br i1 %201, label %202, label %210

202:                                              ; preds = %194
  %203 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 0, i32 1
  %204 = bitcast %"struct.sh::TSourceLoc"* %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 4
  %206 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %206) #9
  %207 = bitcast <2 x i64>* %12 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %205, <2 x i64>* %12, align 16
  %208 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %209 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %208, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %209, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %207, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %206) #9
  br label %534

210:                                              ; preds = %194
  %211 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 2
  %212 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %211, align 8
  %213 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %212, i64 0, i32 0
  %214 = bitcast %"class.sh::TIntermTyped"* %212 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %215 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %214, align 8
  %216 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %215, i64 19
  %217 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %216, align 8
  %218 = tail call %"class.sh::TIntermSymbol"* %217(%"class.sh::TIntermNode"* %213) #9
  %219 = icmp eq %"class.sh::TIntermSymbol"* %218, null
  br i1 %219, label %220, label %228

220:                                              ; preds = %210
  %221 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %222 = bitcast %"struct.sh::TSourceLoc"* %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 4
  %224 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %224) #9
  %225 = bitcast <2 x i64>* %10 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %223, <2 x i64>* %10, align 16
  %226 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %227 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %226, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %227, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %225, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %224) #9
  br label %534

228:                                              ; preds = %210
  %229 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nonnull %218) #9
  %230 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %229, i64 0, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %231, %180
  br i1 %232, label %245, label %233

233:                                              ; preds = %228
  %234 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %218, i64 0, i32 0, i32 0, i32 1
  %235 = bitcast %"struct.sh::TSourceLoc"* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 4
  %237 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %218) #9
  %238 = extractvalue { i8*, i64 } %237, 0
  %239 = icmp eq i8* %238, null
  %240 = select i1 %239, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %238
  %241 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %241) #9
  %242 = bitcast <2 x i64>* %9 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %236, <2 x i64>* %9, align 16
  %243 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %244 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %243, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %244, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %242, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i8* %240) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %241) #9
  br label %534

245:                                              ; preds = %228
  %246 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 0, i32 1
  %247 = load i8, i8* %246, align 8
  %248 = zext i8 %247 to i32
  %249 = add nsw i32 %248, -18
  %250 = icmp ult i32 %249, 6
  br i1 %250, label %260, label %251

251:                                              ; preds = %245
  %252 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %253 = bitcast %"struct.sh::TSourceLoc"* %252 to <2 x i64>*
  %254 = load <2 x i64>, <2 x i64>* %253, align 4
  %255 = tail call i8* @_Z17GetOperatorString9TOperator(i8 zeroext %247) #9
  %256 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %256) #9
  %257 = bitcast <2 x i64>* %11 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %254, <2 x i64>* %11, align 16
  %258 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %259 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %258, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %259, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %257, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.16, i64 0, i64 0), i8* %255) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %256) #9
  br label %260

260:                                              ; preds = %251, %245
  %261 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 3
  %262 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %261, align 8
  %263 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %262, i64 0, i32 0
  %264 = bitcast %"class.sh::TIntermTyped"* %262 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %265 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %264, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %265, i64 5
  %267 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %266, align 8
  %268 = call %"class.sh::TIntermConstantUnion"* %267(%"class.sh::TIntermNode"* %263) #9
  %269 = icmp eq %"class.sh::TIntermConstantUnion"* %268, null
  br i1 %269, label %284, label %270

270:                                              ; preds = %260
  %271 = bitcast %"class.sh::TIntermTyped"* %262 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %272 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %271, align 8
  %273 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %272, i64 4
  %274 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %273, align 8
  %275 = call %"class.sh::TIntermTyped"* %274(%"class.sh::TIntermNode"* %263) #9
  %276 = bitcast %"class.sh::TIntermTyped"* %275 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %277 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %276, align 8
  %278 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %277, i64 31
  %279 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %278, align 8
  %280 = call dereferenceable(184) %"class.sh::TType"* %279(%"class.sh::TIntermTyped"* %275) #9
  %281 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %280, i64 0, i32 2
  %282 = load i32, i32* %281, align 8
  %283 = icmp eq i32 %282, 2
  br i1 %283, label %296, label %284

284:                                              ; preds = %270, %260
  %285 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %200, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %286 = bitcast %"struct.sh::TSourceLoc"* %285 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 4
  %288 = call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %218) #9
  %289 = extractvalue { i8*, i64 } %288, 0
  %290 = icmp eq i8* %289, null
  %291 = select i1 %290, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %289
  %292 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %292) #9
  %293 = bitcast <2 x i64>* %14 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %287, <2 x i64>* %14, align 16
  %294 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %295 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %294, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %295, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %293, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.17, i64 0, i64 0), i8* %291) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %292) #9
  br label %534

296:                                              ; preds = %270
  %297 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 4
  %298 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %297, align 8
  %299 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %298, i64 0, i32 0
  %300 = icmp eq %"class.sh::TIntermTyped"* %298, null
  br i1 %300, label %301, label %309

301:                                              ; preds = %296
  %302 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 0, i32 1
  %303 = bitcast %"struct.sh::TSourceLoc"* %302 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 4
  %305 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %305) #9
  %306 = bitcast <2 x i64>* %7 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %304, <2 x i64>* %7, align 16
  %307 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %308 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %307, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %308, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %306, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %305) #9
  br label %534

309:                                              ; preds = %296
  %310 = bitcast %"class.sh::TIntermTyped"* %298 to %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)***
  %311 = load %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*** %310, align 8
  %312 = getelementptr inbounds %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)** %311, i64 14
  %313 = load %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)** %312, align 8
  %314 = call %"class.sh::TIntermUnary"* %313(%"class.sh::TIntermNode"* %299) #9
  %315 = icmp eq %"class.sh::TIntermUnary"* %314, null
  br i1 %315, label %327, label %316

316:                                              ; preds = %309
  %317 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %314, i64 0, i32 0, i32 1
  %318 = load i8, i8* %317, align 8
  %319 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %314, i64 0, i32 1
  %320 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %319, align 8
  %321 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %320, i64 0, i32 0
  %322 = bitcast %"class.sh::TIntermTyped"* %320 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %323 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %322, align 8
  %324 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %323, i64 19
  %325 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %324, align 8
  %326 = call %"class.sh::TIntermSymbol"* %325(%"class.sh::TIntermNode"* %321) #9
  br label %345

327:                                              ; preds = %309
  %328 = bitcast %"class.sh::TIntermTyped"* %298 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %329 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %328, align 8
  %330 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %329, i64 13
  %331 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %330, align 8
  %332 = call %"class.sh::TIntermBinary"* %331(%"class.sh::TIntermNode"* %299) #9
  %333 = icmp eq %"class.sh::TIntermBinary"* %332, null
  br i1 %333, label %350, label %334

334:                                              ; preds = %327
  %335 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %332, i64 0, i32 0, i32 1
  %336 = load i8, i8* %335, align 8
  %337 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %332, i64 0, i32 2
  %338 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %337, align 8
  %339 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %338, i64 0, i32 0
  %340 = bitcast %"class.sh::TIntermTyped"* %338 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %341 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %340, align 8
  %342 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %341, i64 19
  %343 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %342, align 8
  %344 = call %"class.sh::TIntermSymbol"* %343(%"class.sh::TIntermNode"* %339) #9
  br label %345

345:                                              ; preds = %334, %316
  %346 = phi %"class.sh::TIntermBinary"* [ null, %316 ], [ %332, %334 ]
  %347 = phi %"class.sh::TIntermSymbol"* [ %326, %316 ], [ %344, %334 ]
  %348 = phi i8 [ %318, %316 ], [ %336, %334 ]
  %349 = icmp eq %"class.sh::TIntermSymbol"* %347, null
  br i1 %349, label %350, label %358

350:                                              ; preds = %345, %327
  %351 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %298, i64 0, i32 0, i32 1
  %352 = bitcast %"struct.sh::TSourceLoc"* %351 to <2 x i64>*
  %353 = load <2 x i64>, <2 x i64>* %352, align 4
  %354 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %354) #9
  %355 = bitcast <2 x i64>* %4 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %353, <2 x i64>* %4, align 16
  %356 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %357 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %356, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %357, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %355, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0)) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %354) #9
  br label %534

358:                                              ; preds = %345
  %359 = call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nonnull %347) #9
  %360 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %359, i64 0, i32 0
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, %180
  br i1 %362, label %375, label %363

363:                                              ; preds = %358
  %364 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %347, i64 0, i32 0, i32 0, i32 1
  %365 = bitcast %"struct.sh::TSourceLoc"* %364 to <2 x i64>*
  %366 = load <2 x i64>, <2 x i64>* %365, align 4
  %367 = call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %347) #9
  %368 = extractvalue { i8*, i64 } %367, 0
  %369 = icmp eq i8* %368, null
  %370 = select i1 %369, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %368
  %371 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %371) #9
  %372 = bitcast <2 x i64>* %5 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %366, <2 x i64>* %5, align 16
  %373 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %374 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %373, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %374, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %372, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i8* %370) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %371) #9
  br label %534

375:                                              ; preds = %358
  switch i8 %348, label %376 [
    i8 8, label %385
    i8 9, label %385
    i8 10, label %385
    i8 11, label %385
    i8 -116, label %385
    i8 -115, label %385
  ]

376:                                              ; preds = %375
  %377 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %298, i64 0, i32 0, i32 1
  %378 = bitcast %"struct.sh::TSourceLoc"* %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 4
  %380 = call i8* @_Z17GetOperatorString9TOperator(i8 zeroext %348) #9
  %381 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %381) #9
  %382 = bitcast <2 x i64>* %6 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %379, <2 x i64>* %6, align 16
  %383 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %384 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %383, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %384, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %382, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i64 0, i64 0), i8* %380) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %381) #9
  br label %534

385:                                              ; preds = %375, %375, %375, %375, %375, %375
  %386 = icmp eq %"class.sh::TIntermBinary"* %346, null
  br i1 %386, label %423, label %387

387:                                              ; preds = %385
  %388 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %346, i64 0, i32 3
  %389 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %388, align 8
  %390 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %389, i64 0, i32 0
  %391 = bitcast %"class.sh::TIntermTyped"* %389 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %392 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %391, align 8
  %393 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %392, i64 5
  %394 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %393, align 8
  %395 = call %"class.sh::TIntermConstantUnion"* %394(%"class.sh::TIntermNode"* %390) #9
  %396 = icmp eq %"class.sh::TIntermConstantUnion"* %395, null
  br i1 %396, label %411, label %397

397:                                              ; preds = %387
  %398 = bitcast %"class.sh::TIntermTyped"* %389 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %399 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %398, align 8
  %400 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %399, i64 4
  %401 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %400, align 8
  %402 = call %"class.sh::TIntermTyped"* %401(%"class.sh::TIntermNode"* %390) #9
  %403 = bitcast %"class.sh::TIntermTyped"* %402 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %404 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %403, align 8
  %405 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %404, i64 31
  %406 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %405, align 8
  %407 = call dereferenceable(184) %"class.sh::TType"* %406(%"class.sh::TIntermTyped"* %402) #9
  %408 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %407, i64 0, i32 2
  %409 = load i32, i32* %408, align 8
  %410 = icmp eq i32 %409, 2
  br i1 %410, label %423, label %411

411:                                              ; preds = %397, %387
  %412 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %346, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %413 = bitcast %"struct.sh::TSourceLoc"* %412 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 4
  %415 = call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nonnull %347) #9
  %416 = extractvalue { i8*, i64 } %415, 0
  %417 = icmp eq i8* %416, null
  %418 = select i1 %417, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %416
  %419 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %419) #9
  %420 = bitcast <2 x i64>* %8 to %"struct.sh::TSourceLoc"*
  store <2 x i64> %414, <2 x i64>* %8, align 16
  %421 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 2
  %422 = load %"class.sh::TDiagnostics"*, %"class.sh::TDiagnostics"** %421, align 8
  call void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %422, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %420, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.21, i64 0, i64 0), i8* %418) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %419) #9
  br label %534

423:                                              ; preds = %397, %385
  %424 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 5
  %425 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %424, align 8
  %426 = icmp eq %"class.sh::TIntermBlock"* %425, null
  br i1 %426, label %534, label %427

427:                                              ; preds = %423
  %428 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %425, i64 0, i32 0
  %429 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3
  %430 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %37, align 8
  %431 = bitcast %"class.sh::TIntermNode"* %430 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %432 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %431, align 8
  %433 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %432, i64 11
  %434 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %433, align 8
  %435 = call %"class.sh::TIntermDeclaration"* %434(%"class.sh::TIntermNode"* %430) #9
  %436 = bitcast %"class.sh::TIntermDeclaration"* %435 to %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)***
  %437 = load %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*** %436, align 8
  %438 = getelementptr inbounds %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)** %437, i64 27
  %439 = load %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.46"* (%"class.sh::TIntermDeclaration"*)** %438, align 8
  %440 = call %"class.sh::TVector.46"* %439(%"class.sh::TIntermDeclaration"* %435) #9
  %441 = getelementptr inbounds %"class.sh::TVector.46", %"class.sh::TVector.46"* %440, i64 0, i32 0, i32 0, i32 0
  %442 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %441, align 8
  %443 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"* %443 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %445 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %444, align 8
  %446 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %445, i64 13
  %447 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %446, align 8
  %448 = call %"class.sh::TIntermBinary"* %447(%"class.sh::TIntermNode"* %443) #9
  %449 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %448, i64 0, i32 2
  %450 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %449, align 8
  %451 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %450, i64 0, i32 0
  %452 = bitcast %"class.sh::TIntermTyped"* %450 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %453 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %452, align 8
  %454 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %453, i64 19
  %455 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %454, align 8
  %456 = call %"class.sh::TIntermSymbol"* %455(%"class.sh::TIntermNode"* %451) #9
  %457 = call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %456) #9
  %458 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %457, i64 0, i32 0
  %459 = load i32, i32* %458, align 4
  %460 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 1
  %461 = load i32*, i32** %460, align 8
  %462 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %463 = load i32*, i32** %462, align 8
  %464 = icmp ult i32* %461, %463
  %465 = ptrtoint i32* %463 to i64
  br i1 %464, label %466, label %470

466:                                              ; preds = %427
  store i32 %459, i32* %461, align 4
  %467 = getelementptr inbounds i32, i32* %461, i64 1
  %468 = ptrtoint i32* %467 to i64
  %469 = bitcast i32** %460 to i64*
  store i64 %468, i64* %469, align 8
  br label %526

470:                                              ; preds = %427
  %471 = ptrtoint i32* %461 to i64
  %472 = bitcast i32** %460 to i64*
  %473 = bitcast %"class.std::__1::vector.80"* %429 to i64*
  %474 = load i64, i64* %473, align 8
  %475 = sub i64 %471, %474
  %476 = ashr exact i64 %475, 2
  %477 = add nsw i64 %476, 1
  %478 = icmp ugt i64 %477, 4611686018427387903
  br i1 %478, label %479, label %481

479:                                              ; preds = %470
  %480 = bitcast %"class.std::__1::vector.80"* %429 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %480) #11
  unreachable

481:                                              ; preds = %470
  %482 = bitcast i32** %462 to i64*
  %483 = sub i64 %465, %474
  %484 = ashr exact i64 %483, 2
  %485 = icmp ult i64 %484, 2305843009213693951
  br i1 %485, label %486, label %494

486:                                              ; preds = %481
  %487 = ashr exact i64 %483, 1
  %488 = icmp ult i64 %487, %477
  %489 = select i1 %488, i64 %477, i64 %487
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %499, label %491

491:                                              ; preds = %486
  %492 = icmp ugt i64 %489, 4611686018427387903
  br i1 %492, label %493, label %494

493:                                              ; preds = %491
  call void @abort() #11
  unreachable

494:                                              ; preds = %491, %481
  %495 = phi i64 [ %489, %491 ], [ 4611686018427387903, %481 ]
  %496 = shl i64 %495, 2
  %497 = call i8* @_Znwm(i64 %496) #10
  %498 = bitcast i8* %497 to i32*
  br label %499

499:                                              ; preds = %494, %486
  %500 = phi i64 [ %495, %494 ], [ 0, %486 ]
  %501 = phi i32* [ %498, %494 ], [ null, %486 ]
  %502 = getelementptr inbounds i32, i32* %501, i64 %476
  %503 = getelementptr inbounds i32, i32* %501, i64 %500
  %504 = ptrtoint i32* %503 to i64
  store i32 %459, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = ptrtoint i32* %505 to i64
  %507 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %429, i64 0, i32 0, i32 0
  %508 = load i32*, i32** %507, align 8
  %509 = load i64, i64* %472, align 8
  %510 = ptrtoint i32* %508 to i64
  %511 = sub i64 %509, %510
  %512 = ashr exact i64 %511, 2
  %513 = sub nsw i64 0, %512
  %514 = getelementptr inbounds i32, i32* %502, i64 %513
  %515 = ptrtoint i32* %514 to i64
  %516 = icmp sgt i64 %511, 0
  br i1 %516, label %517, label %521

517:                                              ; preds = %499
  %518 = bitcast i32* %514 to i8*
  %519 = bitcast i32* %508 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %518, i8* align 4 %519, i64 %511, i1 false) #9
  %520 = load i32*, i32** %507, align 8
  br label %521

521:                                              ; preds = %517, %499
  %522 = phi i32* [ %508, %499 ], [ %520, %517 ]
  store i64 %515, i64* %473, align 8
  store i64 %506, i64* %472, align 8
  store i64 %504, i64* %482, align 8
  %523 = icmp eq i32* %522, null
  br i1 %523, label %526, label %524

524:                                              ; preds = %521
  %525 = bitcast i32* %522 to i8*
  call void @_ZdlPv(i8* %525) #10
  br label %526

526:                                              ; preds = %466, %521, %524
  %527 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser", %"class.sh::(anonymous namespace)::ValidateLimitationsTraverser"* %0, i64 0, i32 0, i32 0
  %528 = bitcast %"class.sh::TIntermBlock"* %425 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %529 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %528, align 8
  %530 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %529, i64 2
  %531 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %530, align 8
  call void %531(%"class.sh::TIntermNode"* %428, %"class.sh::TIntermTraverser"* %527) #9
  %532 = load i32*, i32** %460, align 8
  %533 = getelementptr inbounds i32, i32* %532, i64 -1
  store i32* %533, i32** %460, align 8
  br label %534

534:                                              ; preds = %411, %376, %363, %350, %301, %284, %233, %220, %202, %186, %165, %132, %115, %97, %76, %55, %40, %177, %26, %526, %423
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh24TLValueTrackingTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #3

declare void @_ZN2sh24TLValueTrackingTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #3

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #3

declare void @_ZN2sh24TLValueTrackingTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TLValueTrackingTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #3

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #3

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #3

declare dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #3

declare void @_ZN2sh12TDiagnostics5errorERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16), i8*, i8*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExprD2Ev(%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ValidateConstIndexExprE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #9
  ret void
}

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExprD0Ev(%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ValidateConstIndexExprE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_122ValidateConstIndexExpr11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* nocapture, %"class.sh::TIntermSymbol"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ValidateConstIndexExpr", %"class.sh::(anonymous namespace)::ValidateConstIndexExpr"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load i32*, i32** %9, align 8
  %11 = tail call dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* %1) #9
  %12 = getelementptr inbounds %"class.sh::TSymbolUniqueId", %"class.sh::TSymbolUniqueId"* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32* %8, %10
  br i1 %14, label %22, label %15

15:                                               ; preds = %6, %19
  %16 = phi i32* [ %20, %19 ], [ %8, %6 ]
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, %13
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds i32, i32* %16, i64 1
  %21 = icmp eq i32* %20, %10
  br i1 %21, label %22, label %15

22:                                               ; preds = %15, %19, %6
  %23 = phi i32* [ %8, %6 ], [ %16, %15 ], [ %10, %19 ]
  %24 = load i32*, i32** %9, align 8
  %25 = icmp ne i32* %23, %24
  %26 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 0
  %27 = bitcast %"class.sh::TIntermSymbol"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, i64 31
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call dereferenceable(184) %"class.sh::TType"* %30(%"class.sh::TIntermTyped"* %26) #9
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 2
  %35 = or i1 %25, %34
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %3, align 8
  br label %37

37:                                               ; preds = %2, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #3

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #3

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare i8* @_ZN2sh14getBasicStringENS_10TBasicTypeE(i32) local_unnamed_addr #3

declare i8* @_Z17GetOperatorString9TOperator(i8 zeroext) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
