; ModuleID = '../../third_party/blink/renderer/platform/loader/subresource_integrity.cc'
source_filename = "../../third_party/blink/renderer/platform/loader/subresource_integrity.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SubresourceIntegrity::ReportInfo" = type { %"class.WTF::Vector", %"class.WTF::Vector.0" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.std::__1::pair"*, i32, i32, i32, [4 x i8] }>
%"struct.std::__1::pair" = type <{ %"class.WTF::String", i8, [7 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Resource" = type { %"class.blink::MemoryPressureListener", i8, i8, %"class.absl::optional", %"class.base::TimeTicks", i64, i64, i64, %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, %"class.blink::SubresourceIntegrity::ReportInfo", %"class.WTF::Vector.23", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashCountedSet", %"class.blink::HeapHashSet", %"struct.blink::ResourceLoaderOptions", %"class.base::Time", %"class.blink::TaskHandle", %"class.blink::ResourceRequestHead", i64, %"class.blink::Member", %"class.blink::ResourceResponse", %class.scoped_refptr.321, %"class.blink::WebScopedVirtualTimePauser", %"class.std::__1::set" }
%"class.blink::MemoryPressureListener" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::ResourceError" }
%"class.blink::ResourceError" = type { i32, i32, %"struct.net::ResolveErrorInfo", %"class.blink::KURL", %"class.WTF::String", i8, i8, [6 x i8], %"class.absl::optional.9", i8, %"class.absl::optional.18", i32 }
%"struct.net::ResolveErrorInfo" = type <{ i32, i8, [3 x i8] }>
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, [7 x i8], %union.anon.13 }
%union.anon.13 = type { %"struct.network::CorsErrorStatus" }
%"struct.network::CorsErrorStatus" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", i32, i8, [3 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.16 }
%union.anon.16 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.18" = type { %"class.absl::optional_internal::optional_data.19" }
%"class.absl::optional_internal::optional_data.19" = type { %"class.absl::optional_internal::optional_data_base.20" }
%"class.absl::optional_internal::optional_data_base.20" = type { %"class.absl::optional_internal::optional_data_dtor_base.21" }
%"class.absl::optional_internal::optional_data_dtor_base.21" = type { i8, %union.anon.22 }
%union.anon.22 = type { i32 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::Vector.23" = type { %"class.WTF::VectorBuffer.24" }
%"class.WTF::VectorBuffer.24" = type { %"class.WTF::VectorBufferBase.25" }
%"class.WTF::VectorBufferBase.25" = type { %"struct.blink::Resource::RedirectPair"*, i32, i32 }
%"struct.blink::Resource::RedirectPair" = type { %"class.blink::ResourceRequestHead", %"class.blink::ResourceResponse" }
%"class.blink::HeapHashCountedSet" = type { %"class.WTF::HashCountedSet" }
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.121" }
%"class.WTF::HashMap.121" = type { %"class.WTF::HashTable.122" }
%"class.WTF::HashTable.122" = type <{ %"struct.WTF::KeyValuePair.124"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.124" = type <{ %"class.blink::WeakMember.380", i32, [4 x i8] }>
%"class.blink::WeakMember.380" = type { %"class.blink::MemberBase.381" }
%"class.blink::MemberBase.381" = type { %"class.blink::ResourceClient"* }
%"class.blink::ResourceClient" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.127" }
%"class.WTF::HashSet.127" = type { %"class.WTF::HashTable.128" }
%"class.WTF::HashTable.128" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"struct.blink::ResourceLoaderOptions" = type { %"struct.blink::FetchInitiatorInfo", i8, i32, i8, i8, %"class.base::StrongAlias", %"class.WTF::String", %"class.WTF::HashSet", i8, i8, %class.scoped_refptr.130, %class.scoped_refptr.316, %class.scoped_refptr.318 }
%"struct.blink::FetchInitiatorInfo" = type { %"class.WTF::AtomicString", %"class.WTF::TextPosition", i8, i8, %"class.WTF::String" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.base::StrongAlias" = type { i8 }
%class.scoped_refptr.130 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted.131" }
%"class.base::RefCounted.131" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.132", i32, [4 x i8], %"class.std::__1::unique_ptr.270", %"class.std::__1::unique_ptr.270", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.281", %"class.std::__1::unique_ptr.287", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.299", %"class.std::__1::unique_ptr.305", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.312", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.183", %"class.std::__1::unique_ptr.183", %"class.std::__1::unique_ptr.190", %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.204", %"class.std::__1::unique_ptr.204", %"class.std::__1::unique_ptr.211", %"class.std::__1::unique_ptr.218", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.250", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.168" = type { %"struct.std::__1::__atomic_base.169" }
%"struct.std::__1::__atomic_base.169" = type { %"struct.std::__1::__atomic_base.170" }
%"struct.std::__1::__atomic_base.170" = type { %"struct.std::__1::__cxx_atomic_impl.171" }
%"struct.std::__1::__cxx_atomic_impl.171" = type { %"struct.std::__1::__cxx_atomic_base_impl.172" }
%"struct.std::__1::__cxx_atomic_base_impl.172" = type { i64 }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::Worklist.179"* }
%"class.blink::Worklist.179" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::Worklist.186"* }
%"class.blink::Worklist.186" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.190" = type { %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.blink::Worklist.193"* }
%"class.blink::Worklist.193" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::Worklist.200"* }
%"class.blink::Worklist.200" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.blink::Worklist.207"* }
%"class.blink::Worklist.207" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.blink::Worklist.214"* }
%"class.blink::Worklist.214" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::Worklist.221"* }
%"class.blink::Worklist.221" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.168" }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.228", %"class.std::__1::__compressed_pair.237", %"class.std::__1::__compressed_pair.242", %"class.std::__1::__compressed_pair.244", [4 x i8] }>
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230", %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { i64 }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { float }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.253", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.262" }
%"class.WTF::Vector.262" = type { %"class.WTF::VectorBuffer.263" }
%"class.WTF::VectorBuffer.263" = type { %"class.WTF::VectorBufferBase.264" }
%"class.WTF::VectorBufferBase.264" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.278" }
%"class.WTF::VectorBuffer.278" = type { %"class.WTF::VectorBufferBase.279" }
%"class.WTF::VectorBufferBase.279" = type { %"struct.std::__1::pair.280"*, i32, i32 }
%"struct.std::__1::pair.280" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.293" }
%"class.std::__1::unique_ptr.293" = type { %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.179"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.186"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.193"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.200"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.207"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.343", i64 }
%"class.std::__1::vector.343" = type { %"class.std::__1::__vector_base.344" }
%"class.std::__1::__vector_base.344" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.345" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.299" = type { %"class.std::__1::__compressed_pair.300" }
%"class.std::__1::__compressed_pair.300" = type { %"struct.std::__1::__compressed_pair_elem.301" }
%"struct.std::__1::__compressed_pair_elem.301" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.311 }
%class.scoped_refptr.311 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.312" = type { %"struct.std::__1::__atomic_base.313" }
%"struct.std::__1::__atomic_base.313" = type { %"struct.std::__1::__cxx_atomic_impl.314" }
%"struct.std::__1::__cxx_atomic_impl.314" = type { %"struct.std::__1::__cxx_atomic_base_impl.315" }
%"struct.std::__1::__cxx_atomic_base_impl.315" = type { i8 }
%class.scoped_refptr.316 = type { %"class.base::RefCountedData.317"* }
%"class.base::RefCountedData.317" = type opaque
%class.scoped_refptr.318 = type { %"class.base::RefCountedData.319"* }
%"class.base::RefCountedData.319" = type opaque
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.84" }
%"class.base::time_internal::TimeBase.84" = type { i64 }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.320 }
%class.scoped_refptr.320 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.blink::ResourceRequestHead" = type { %"class.blink::KURL", %"class.base::TimeDelta", %"class.net::SiteForCookies", %class.scoped_refptr.31, %class.scoped_refptr.31, %class.scoped_refptr.31, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", i16, i32, i8, i32, i32, i32, %class.scoped_refptr.35, i32, i32, i32, i32, i32, i32, %"class.WTF::String", %"class.WTF::String", i32, i8, i32, %"class.absl::optional.48", %"class.absl::optional.53", %"class.absl::optional.63", %"struct.blink::CacheControlHeader", i8, i8, i8, i8, %"class.absl::optional.73", %"class.absl::optional.63", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.absl::optional.63", i64, %"class.base::UnguessableToken", i64, i8, i8, i8, i8, i8, i8, %"class.absl::optional.73", %"class.absl::optional.78", i8, %class.scoped_refptr.83 }
%"class.base::TimeDelta" = type { i64 }
%"class.net::SiteForCookies" = type <{ %"class.net::SchemefulSite", i8, [7 x i8] }>
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.26" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.26" = type { %"class.absl::optional_internal::optional_data.27" }
%"class.absl::optional_internal::optional_data.27" = type { %"class.absl::optional_internal::optional_data_base.28" }
%"class.absl::optional_internal::optional_data_base.28" = type { %"class.absl::optional_internal::optional_data_dtor_base.29" }
%"class.absl::optional_internal::optional_data_dtor_base.29" = type { i8, %union.anon.30 }
%union.anon.30 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%class.scoped_refptr.31 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.350", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.26", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.31 }
%"class.WTF::RefCounted.350" = type { %"class.base::RefCounted.351" }
%"class.base::RefCounted.351" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::HTTPHeaderMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.32" }
%"class.WTF::HashTable.32" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%class.scoped_refptr.35 = type { %"class.blink::WebURLRequestExtraData"* }
%"class.blink::WebURLRequestExtraData" = type { i32 (...)**, %"class.base::RefCounted", i8, i32, i8, i8, %"class.blink::WebString", %"class.blink::WebVector", %class.scoped_refptr.42, i8, %"class.url::Origin" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::WebString" = type { %class.scoped_refptr }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.36"*, %"class.std::__1::unique_ptr.36"*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"class.blink::URLLoaderThrottle"* }
%"class.blink::URLLoaderThrottle" = type { i32 (...)**, %"class.blink::URLLoaderThrottle::Delegate"* }
%"class.blink::URLLoaderThrottle::Delegate" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::unique_ptr.36"* }
%class.scoped_refptr.42 = type { %"class.blink::WebFrameRequestBlocker"* }
%"class.blink::WebFrameRequestBlocker" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.43" }
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i32 }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { %"struct.blink::ResourceRequestHead::RedirectInfo" }
%"struct.blink::ResourceRequestHead::RedirectInfo" = type { %"class.blink::KURL", %"class.blink::KURL" }
%"class.absl::optional.53" = type { %"class.absl::optional_internal::optional_data.54" }
%"class.absl::optional_internal::optional_data.54" = type { %"class.absl::optional_internal::optional_data_base.55" }
%"class.absl::optional_internal::optional_data_base.55" = type { %"class.absl::optional_internal::optional_data_dtor_base.56" }
%"class.absl::optional_internal::optional_data_dtor_base.56" = type { i8, %union.anon.57 }
%union.anon.57 = type { %"class.network::mojom::blink::TrustTokenParams" }
%"class.network::mojom::blink::TrustTokenParams" = type { i32, i32, i32, i8, %"class.WTF::Vector.58", %"class.WTF::Vector.0", %"class.WTF::String" }
%"class.WTF::Vector.58" = type { %"class.WTF::VectorBuffer.59" }
%"class.WTF::VectorBuffer.59" = type { %"class.WTF::VectorBufferBase.60" }
%"class.WTF::VectorBufferBase.60" = type { %class.scoped_refptr.31*, i32, i32 }
%"struct.blink::CacheControlHeader" = type { i8, %"class.absl::optional.68", %"class.absl::optional.68" }
%"class.absl::optional.68" = type { %"class.absl::optional_internal::optional_data.69" }
%"class.absl::optional_internal::optional_data.69" = type { %"class.absl::optional_internal::optional_data_base.70" }
%"class.absl::optional_internal::optional_data_base.70" = type { %"class.absl::optional_internal::optional_data_dtor_base.71" }
%"class.absl::optional_internal::optional_data_dtor_base.71" = type { i8, %union.anon.72 }
%union.anon.72 = type { %"class.base::TimeDelta" }
%"class.absl::optional.63" = type { %"class.absl::optional_internal::optional_data.64" }
%"class.absl::optional_internal::optional_data.64" = type { %"class.absl::optional_internal::optional_data_base.65" }
%"class.absl::optional_internal::optional_data_base.65" = type { %"class.absl::optional_internal::optional_data_dtor_base.66" }
%"class.absl::optional_internal::optional_data_dtor_base.66" = type { i8, %union.anon.67 }
%union.anon.67 = type { %"class.WTF::String" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.absl::optional.73" = type { %"class.absl::optional_internal::optional_data.74" }
%"class.absl::optional_internal::optional_data.74" = type { %"class.absl::optional_internal::optional_data_base.75" }
%"class.absl::optional_internal::optional_data_base.75" = type { %"class.absl::optional_internal::optional_data_dtor_base.76" }
%"class.absl::optional_internal::optional_data_dtor_base.76" = type { i8, %union.anon.77 }
%union.anon.77 = type { %"class.base::UnguessableToken" }
%"class.absl::optional.78" = type { %"class.absl::optional_internal::optional_data.79" }
%"class.absl::optional_internal::optional_data.79" = type { %"class.absl::optional_internal::optional_data_base.80" }
%"class.absl::optional_internal::optional_data_base.80" = type { %"class.absl::optional_internal::optional_data_dtor_base.81" }
%"class.absl::optional_internal::optional_data_dtor_base.81" = type { i8, %union.anon.82 }
%union.anon.82 = type { %"struct.blink::ResourceRequestHead::WebBundleTokenParams" }
%"struct.blink::ResourceRequestHead::WebBundleTokenParams" = type { %"class.blink::KURL", %"class.base::UnguessableToken", %"class.mojo::PendingRemote" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%class.scoped_refptr.83 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.372", %"class.base::internal::flat_tree" }
%"class.base::RefCountedThreadSafe.372" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.373" }
%"class.std::__1::vector.373" = type { %"class.std::__1::__vector_base.374" }
%"class.std::__1::__vector_base.374" = type { i32*, i32*, %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376" }
%"struct.std::__1::__compressed_pair_elem.376" = type { i32* }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ResourceLoader"* }
%"class.blink::ResourceLoader" = type opaque
%"class.blink::ResourceResponse" = type { %"class.blink::KURL", %"class.WTF::AtomicString", i64, %"class.WTF::AtomicString", i32, i32, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", %"class.net::IPEndPoint", i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, %"class.base::Time", i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i64, i8, i32, i32, %"class.absl::optional.85", %class.scoped_refptr.100, %class.scoped_refptr.101, %"struct.blink::CacheControlHeader", %"class.absl::optional.68", %"class.absl::optional.102", %"class.absl::optional.102", %"class.absl::optional.102", i64, %"class.blink::KURL", %"class.WTF::Vector.107", %"class.WTF::String", %"class.WTF::Vector.0", %"class.base::Time", %"class.WTF::AtomicString", i32, i8, i64, i64, i64, %"class.absl::optional.73", %"class.WTF::Vector.0", %"class.blink::KURL", %"class.absl::optional.112" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.absl::optional.85" = type { %"class.absl::optional_internal::optional_data.86" }
%"class.absl::optional_internal::optional_data.86" = type { %"class.absl::optional_internal::optional_data_base.87" }
%"class.absl::optional_internal::optional_data_base.87" = type { %"class.absl::optional_internal::optional_data_dtor_base.88" }
%"class.absl::optional_internal::optional_data_dtor_base.88" = type { i8, %union.anon.89 }
%union.anon.89 = type { %"struct.blink::ResourceResponse::SecurityDetails" }
%"struct.blink::ResourceResponse::SecurityDetails" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector.0", %"class.WTF::String", i64, i64, %"class.WTF::Vector.90", %"class.WTF::Vector.95" }
%"class.WTF::Vector.90" = type { %"class.WTF::VectorBuffer.91" }
%"class.WTF::VectorBuffer.91" = type { %"class.WTF::VectorBufferBase.92" }
%"class.WTF::VectorBufferBase.92" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::Vector.95" = type { %"class.WTF::VectorBuffer.96" }
%"class.WTF::VectorBuffer.96" = type { %"class.WTF::VectorBufferBase.97" }
%"class.WTF::VectorBufferBase.97" = type { %"class.blink::ResourceResponse::SignedCertificateTimestamp"*, i32, i32 }
%"class.blink::ResourceResponse::SignedCertificateTimestamp" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i64, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.100 = type { %"class.blink::ResourceLoadTiming"* }
%"class.blink::ResourceLoadTiming" = type opaque
%class.scoped_refptr.101 = type { %"struct.blink::ResourceLoadInfo"* }
%"struct.blink::ResourceLoadInfo" = type opaque
%"class.absl::optional.102" = type { %"class.absl::optional_internal::optional_data.103" }
%"class.absl::optional_internal::optional_data.103" = type { %"class.absl::optional_internal::optional_data_base.104" }
%"class.absl::optional_internal::optional_data_base.104" = type { %"class.absl::optional_internal::optional_data_dtor_base.105" }
%"class.absl::optional_internal::optional_data_dtor_base.105" = type { i8, %union.anon.106 }
%union.anon.106 = type { %"class.base::Time" }
%"class.WTF::Vector.107" = type { %"class.WTF::VectorBuffer.108" }
%"class.WTF::VectorBuffer.108" = type { %"class.WTF::VectorBufferBase.109" }
%"class.WTF::VectorBufferBase.109" = type { %"class.blink::KURL"*, i32, i32 }
%"class.absl::optional.112" = type { %"class.absl::optional_internal::optional_data.113" }
%"class.absl::optional_internal::optional_data.113" = type { %"class.absl::optional_internal::optional_data_base.114" }
%"class.absl::optional_internal::optional_data_base.114" = type { %"class.absl::optional_internal::optional_data_dtor_base.115" }
%"class.absl::optional_internal::optional_data_dtor_base.115" = type { i8, %union.anon.116 }
%union.anon.116 = type { %"class.net::AuthChallengeInfo" }
%"class.net::AuthChallengeInfo" = type { i8, %"class.url::Origin", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%class.scoped_refptr.321 = type { %"class.WTF::SharedBuffer"* }
%"class.WTF::SharedBuffer" = type { %"class.WTF::RefCounted.322", i64, %"class.WTF::Vector.324", %"class.WTF::Vector.329" }
%"class.WTF::RefCounted.322" = type { %"class.base::RefCounted.323" }
%"class.base::RefCounted.323" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.324" = type { %"class.WTF::VectorBuffer.325" }
%"class.WTF::VectorBuffer.325" = type { %"class.WTF::VectorBufferBase.326" }
%"class.WTF::VectorBufferBase.326" = type { i8*, i32, i32 }
%"class.WTF::Vector.329" = type { %"class.WTF::VectorBuffer.330" }
%"class.WTF::VectorBuffer.330" = type { %"class.WTF::VectorBufferBase.331" }
%"class.WTF::VectorBufferBase.331" = type { %"class.std::__1::unique_ptr.332"*, i32, i32 }
%"class.std::__1::unique_ptr.332" = type opaque
%"class.blink::WebScopedVirtualTimePauser" = type { %"class.base::TimeTicks", i8, i8, i32, %"class.blink::scheduler::MainThreadSchedulerImpl"*, %"class.blink::WebString", i64 }
%"class.blink::scheduler::MainThreadSchedulerImpl" = type opaque
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.335", %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.352", i8* }
%"class.WTF::StringAppend.352" = type { i8*, %"class.WTF::String" }
%"class.WTF::StringTypeAdapter.391" = type <{ i8*, i32, [4 x i8] }>
%"class.WTF::StringAppend.359" = type { %"class.WTF::StringAppend", %"class.WTF::String" }
%"class.blink::IntegrityMetadata" = type <{ %"class.WTF::String", i8, [7 x i8] }>
%"class.WTF::Vector.353" = type { %"class.WTF::VectorBuffer.354" }
%"class.WTF::VectorBuffer.354" = type { %"class.WTF::VectorBufferBase.355", [64 x i8] }
%"class.WTF::VectorBufferBase.355" = type { i8*, i32, i32 }
%"class.WTF::StringAppend.358" = type { %"class.WTF::StringAppend.359", i8* }
%"class.WTF::Vector.362" = type { %"class.WTF::VectorBuffer.363" }
%"class.WTF::VectorBuffer.363" = type { %"class.WTF::VectorBufferBase.364" }
%"class.WTF::VectorBufferBase.364" = type { i16*, i32, i32 }
%"struct.std::__1::pair.360" = type <{ i8*, i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.392" = type { %"class.WTF::StringTypeAdapter.393" }
%"class.WTF::StringTypeAdapter.393" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev = comdat any

$_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev = comdat any

$_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZNK3WTF6VectorIhLj64ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEmm = comdat any

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_ = comdat any

$_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv = comdat any

$_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SB_SC_EERKS6_S6_EENS_18HashTableAddResultISD_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6ExpandEPS6_ = comdat any

$_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE8RehashToEPS6_jSE_ = comdat any

$_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS9_SB_SC_EES6_EENS2_IPS6_bEERKT0_ = comdat any

@.str = private unnamed_addr constant [38 x i8] c"Subresource Integrity: The resource '\00", align 1
@.str.1 = private unnamed_addr constant [198 x i8] c"' has an integrity attribute, but the resource requires the request to be CORS enabled to check the integrity, and it is not. The resource has been blocked because the integrity cannot be enforced.\00", align 1
@.str.2 = private unnamed_addr constant [74 x i8] c"Failed to find a valid digest in the 'integrity' attribute for resource '\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"' with computed SHA-256 integrity '\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"'. The resource has been blocked.\00", align 1
@.str.5 = private unnamed_addr constant [63 x i8] c"There was an error computing an integrity value for resource '\00", align 1
@_ZZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmEE9kPrefixes = internal unnamed_addr constant [6 x { i8*, i8 }] [{ i8*, i8 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8 0 }, { i8*, i8 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8 0 }, { i8*, i8 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8 1 }, { i8*, i8 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8 1 }, { i8*, i8 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8 2 }, { i8*, i8 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8 2 }], align 16
@.str.6 = private unnamed_addr constant [7 x i8] c"sha256\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"sha-256\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"sha384\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"sha-384\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"sha512\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"sha-512\00", align 1
@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@.str.12 = private unnamed_addr constant [39 x i8] c"Error parsing 'integrity' attribute ('\00", align 1
@.str.13 = private unnamed_addr constant [81 x i8] c"'). The specified hash algorithm must be one of 'sha256', 'sha384', or 'sha512'.\00", align 1
@.str.14 = private unnamed_addr constant [100 x i8] c"'). The hash algorithm must be one of 'sha256', 'sha384', or 'sha512', followed by a '-' character.\00", align 1
@.str.15 = private unnamed_addr constant [54 x i8] c"'). The digest must be a valid, base64-encoded value.\00", align 1
@.str.16 = private unnamed_addr constant [52 x i8] c"Ignoring unrecogized 'integrity' attribute option '\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"'.\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.19 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.21 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.22 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEPKcv = private unnamed_addr constant [106 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::SubresourceIntegrity::ReportInfo::UseCounterFeature]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.23 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.24 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.25 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@.str.26 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.27 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@.str.28 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.29 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEEEEPKcv = private unnamed_addr constant [102 x i8] c"const char *WTF::GetStringWithTypeName() [T = std::__1::pair<WTF::String, blink::IntegrityAlgorithm>]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20SubresourceIntegrity10ReportInfo11AddUseCountENS1_17UseCounterFeatureE(%"class.blink::SubresourceIntegrity::ReportInfo"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %16, label %9, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = zext i32 %5 to i64
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  store i32 %1, i32* %13, align 4
  %14 = load i32, i32* %4, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %4, align 4
  br label %18

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %17, i32* nonnull dereferenceable(4) %3) #10
  br label %18

18:                                               ; preds = %9, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20SubresourceIntegrity10ReportInfo22AddConsoleErrorMessageERKN3WTF6StringE(%"class.blink::SubresourceIntegrity::ReportInfo"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %37, label %9, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %3, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::String"*, %"class.WTF::String"** %10, align 8
  %12 = zext i32 %5 to i64
  %13 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 %12, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #10
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %22
  tail call void @llvm.trap() #10
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %32, %17, %9
  %35 = load i32, i32* %4, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %4, align 4
  br label %38

37:                                               ; preds = %2
  tail call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %3, %"class.WTF::String"* dereferenceable(8) %1) #10
  br label %38

38:                                               ; preds = %34, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20SubresourceIntegrity10ReportInfo5ClearEv(%"class.blink::SubresourceIntegrity::ReportInfo"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %9, %5
  %11 = bitcast %"class.blink::SubresourceIntegrity::ReportInfo"* %0 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast %"class.blink::SubresourceIntegrity::ReportInfo"* %0 to i64*
  store atomic i64 0, i64* %13 monotonic, align 8
  store i32 0, i32* %2, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %12) #10
  br label %14

14:                                               ; preds = %1, %10
  %15 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %54, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %50, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %15, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::String"*, %"class.WTF::String"** %24, align 8
  %26 = zext i32 %21 to i64
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %25, i64 %26
  br label %28

28:                                               ; preds = %46, %23
  %29 = phi %"class.WTF::String"* [ %47, %46 ], [ %25, %23 ]
  %30 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %29, i64 0, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #10
  br label %46

46:                                               ; preds = %45, %42, %28
  %47 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %29, i64 1
  %48 = icmp eq %"class.WTF::String"* %47, %27
  br i1 %48, label %49, label %28

49:                                               ; preds = %46
  store i32 0, i32* %20, align 4
  br label %50

50:                                               ; preds = %49, %19
  %51 = bitcast %"class.WTF::Vector.0"* %15 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = bitcast %"class.WTF::Vector.0"* %15 to i64*
  store atomic i64 0, i64* %53 monotonic, align 8
  store i32 0, i32* %16, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %52) #10
  br label %54

54:                                               ; preds = %14, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20SubresourceIntegrity25CheckSubresourceIntegrityERKN3WTF7HashSetINSt3__14pairINS1_6StringENS_18IntegrityAlgorithmEEENS1_8PairHashIS5_S6_EENS1_10HashTraitsIS7_EENS1_18PartitionAllocatorEEEPKcmRKNS_4KURLERKNS_8ResourceERNS0_10ReportInfoE(%"class.WTF::HashSet"* nocapture readonly dereferenceable(24), i8*, i64, %"class.blink::KURL"* dereferenceable(112), %"class.blink::Resource"* dereferenceable(2728), %"class.blink::SubresourceIntegrity::ReportInfo"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %7 = alloca i32, align 4
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = getelementptr inbounds %"class.blink::Resource", %"class.blink::Resource"* %4, i64 0, i32 29
  %11 = tail call zeroext i1 @_ZNK5blink16ResourceResponse16IsCorsSameOriginEv(%"class.blink::ResourceResponse"* %10) #10
  br i1 %11, label %220, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #10
  %15 = tail call %"class.WTF::StringImpl"* @_ZNK5blink4KURL12ElidedStringEv(%"class.blink::KURL"* %3) #10
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %92, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  br i1 %21, label %24, label %34

24:                                               ; preds = %17
  %25 = zext i32 %23 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #10
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !2

31:                                               ; preds = %24
  tail call void @llvm.trap() #10
  unreachable

32:                                               ; preds = %24
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %22, align 4
  br label %34

34:                                               ; preds = %32, %17
  %35 = phi i32 [ %33, %32 ], [ %23, %17 ]
  %36 = load atomic i32, i32* %18 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = zext i32 %35 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !2

46:                                               ; preds = %39
  tail call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %39
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %22, align 4
  br label %49

49:                                               ; preds = %47, %34
  %50 = phi i32 [ %48, %47 ], [ %35, %34 ]
  %51 = load atomic i32, i32* %18 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = add i32 %50, -1
  store i32 %55, i32* %22, align 4
  br label %56

56:                                               ; preds = %54, %49
  %57 = phi i32 [ %55, %54 ], [ %50, %49 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %15) #10
  br label %60

60:                                               ; preds = %56, %59
  %61 = load atomic i32, i32* %18 monotonic, align 4, !noalias !3
  %62 = and i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = load i32, i32* %22, align 4
  br i1 %63, label %65, label %75

65:                                               ; preds = %60
  %66 = zext i32 %64 to i33
  %67 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %66, i33 1) #10
  %68 = extractvalue { i33, i1 } %67, 1
  %69 = extractvalue { i33, i1 } %67, 0
  %70 = icmp slt i33 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %72, label %73, !prof !2

72:                                               ; preds = %65
  tail call void @llvm.trap() #10, !noalias !3
  unreachable

73:                                               ; preds = %65
  %74 = trunc i33 %69 to i32
  store i32 %74, i32* %22, align 4, !noalias !3
  br label %75

75:                                               ; preds = %60, %73
  %76 = phi i32 [ %74, %73 ], [ %64, %60 ]
  %77 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([38 x i8]* @.str to i64), i64* %77, align 8, !alias.scope !3
  %78 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"** %78, align 8, !alias.scope !3
  %79 = load atomic i32, i32* %18 monotonic, align 4, !noalias !3
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %96

82:                                               ; preds = %75
  %83 = zext i32 %76 to i33
  %84 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %83, i33 1) #10
  %85 = extractvalue { i33, i1 } %84, 1
  %86 = extractvalue { i33, i1 } %84, 0
  %87 = icmp slt i33 %86, 0
  %88 = or i1 %85, %87
  br i1 %88, label %89, label %90, !prof !2

89:                                               ; preds = %82
  tail call void @llvm.trap() #10, !noalias !3
  unreachable

90:                                               ; preds = %82
  %91 = trunc i33 %86 to i32
  store i32 %91, i32* %22, align 4, !noalias !3
  br label %96

92:                                               ; preds = %12
  %93 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([38 x i8]* @.str to i64), i64* %93, align 8, !alias.scope !3
  %94 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %94, align 8, !alias.scope !3
  %95 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.1, i64 0, i64 0), i8** %95, align 8, !alias.scope !3
  br label %108

96:                                               ; preds = %90, %75
  %97 = phi i32 [ %91, %90 ], [ %76, %75 ]
  %98 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.1, i64 0, i64 0), i8** %98, align 8, !alias.scope !3
  %99 = load atomic i32, i32* %18 monotonic, align 4, !noalias !3
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %96
  %103 = add i32 %97, -1
  store i32 %103, i32* %22, align 4, !noalias !3
  br label %104

104:                                              ; preds = %102, %96
  %105 = phi i32 [ %103, %102 ], [ %97, %96 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %15) #10, !noalias !3
  br label %108

108:                                              ; preds = %92, %104, %107
  %109 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %9)
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %109, %"class.WTF::StringImpl"** %110, align 8
  %111 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 1
  %112 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 1, i32 0, i32 0, i32 2
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 1, i32 0, i32 0, i32 1
  %115 = load i32, i32* %114, align 8
  %116 = icmp eq i32 %113, %115
  br i1 %116, label %143, label %117, !prof !2

117:                                              ; preds = %108
  %118 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %111, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %113 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120, i32 0, i32 0
  store %"class.WTF::StringImpl"* %109, %"class.WTF::StringImpl"** %121, align 8
  %122 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %122, label %140, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %109, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i33
  %132 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %131, i33 1) #10
  %133 = extractvalue { i33, i1 } %132, 1
  %134 = extractvalue { i33, i1 } %132, 0
  %135 = icmp slt i33 %134, 0
  %136 = or i1 %133, %135
  br i1 %136, label %137, label %138, !prof !2

137:                                              ; preds = %128
  call void @llvm.trap() #10
  unreachable

138:                                              ; preds = %128
  %139 = trunc i33 %134 to i32
  store i32 %139, i32* %129, align 4
  br label %140

140:                                              ; preds = %138, %123, %117
  %141 = load i32, i32* %112, align 4
  %142 = add i32 %141, 1
  store i32 %142, i32* %112, align 4
  br label %144

143:                                              ; preds = %108
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %111, %"class.WTF::String"* nonnull dereferenceable(8) %8) #10
  br label %144

144:                                              ; preds = %140, %143
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %146 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %146, label %160, label %147

147:                                              ; preds = %144
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %145) #10
  br label %160

160:                                              ; preds = %144, %156, %159
  %161 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %162 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, align 8
  %163 = icmp eq %"class.WTF::StringImpl"* %162, null
  br i1 %163, label %177, label %164

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %162, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %162, i64 0, i32 0
  %170 = load i32, i32* %169, align 4
  br i1 %168, label %171, label %173

171:                                              ; preds = %164
  %172 = add i32 %170, -1
  store i32 %172, i32* %169, align 4
  br label %173

173:                                              ; preds = %171, %164
  %174 = phi i32 [ %172, %171 ], [ %170, %164 ]
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %173
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %162) #10
  br label %177

177:                                              ; preds = %160, %173, %176
  br i1 %16, label %203, label %178

178:                                              ; preds = %177
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = and i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 0
  %184 = load i32, i32* %183, align 4
  br i1 %182, label %185, label %187

185:                                              ; preds = %178
  %186 = add i32 %184, -1
  store i32 %186, i32* %183, align 4
  br label %187

187:                                              ; preds = %185, %178
  %188 = phi i32 [ %186, %185 ], [ %184, %178 ]
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %192

190:                                              ; preds = %187
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %15) #10
  %191 = load i32, i32* %183, align 4
  br label %192

192:                                              ; preds = %187, %190
  %193 = phi i32 [ %188, %187 ], [ %191, %190 ]
  %194 = load atomic i32, i32* %179 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %199

197:                                              ; preds = %192
  %198 = add i32 %193, -1
  store i32 %198, i32* %183, align 4
  br label %199

199:                                              ; preds = %197, %192
  %200 = phi i32 [ %198, %197 ], [ %193, %192 ]
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %199
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %15) #10
  br label %203

203:                                              ; preds = %177, %199, %202
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  %204 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %204)
  store i32 2, i32* %7, align 4
  %205 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 2
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %206, %208
  br i1 %209, label %217, label %210, !prof !2

210:                                              ; preds = %203
  %211 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %212 = load i32*, i32** %211, align 8
  %213 = zext i32 %206 to i64
  %214 = getelementptr inbounds i32, i32* %212, i64 %213
  store i32 2, i32* %214, align 4
  %215 = load i32, i32* %205, align 4
  %216 = add i32 %215, 1
  store i32 %216, i32* %205, align 4
  br label %219

217:                                              ; preds = %203
  %218 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %5, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %218, i32* nonnull dereferenceable(4) %7) #10
  br label %219

219:                                              ; preds = %210, %217
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %204)
  br label %222

220:                                              ; preds = %6
  %221 = tail call zeroext i1 @_ZN5blink20SubresourceIntegrity29CheckSubresourceIntegrityImplERKN3WTF7HashSetINSt3__14pairINS1_6StringENS_18IntegrityAlgorithmEEENS1_8PairHashIS5_S6_EENS1_10HashTraitsIS7_EENS1_18PartitionAllocatorEEEPKcmRKNS_4KURLERNS0_10ReportInfoE(%"class.WTF::HashSet"* dereferenceable(24) %0, i8* %1, i64 %2, %"class.blink::KURL"* dereferenceable(112) %3, %"class.blink::SubresourceIntegrity::ReportInfo"* dereferenceable(32) %5)
  br label %222

222:                                              ; preds = %220, %219
  %223 = phi i1 [ %221, %220 ], [ false, %219 ]
  ret i1 %223
}

declare zeroext i1 @_ZNK5blink16ResourceResponse16IsCorsSameOriginEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.WTF::StringImpl"* @_ZNK5blink4KURL12ElidedStringEv(%"class.blink::KURL"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.391"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #10
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i8* %8) #10
  %9 = bitcast %"class.WTF::StringTypeAdapter.391"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #10
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %2, i8* %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #10
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #10
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %34
  call void @llvm.trap() #10
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #10
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #10
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %70
  call void @llvm.trap() #10
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20SubresourceIntegrity29CheckSubresourceIntegrityImplERKN3WTF7HashSetINSt3__14pairINS1_6StringENS_18IntegrityAlgorithmEEENS1_8PairHashIS5_S6_EENS1_10HashTraitsIS7_EENS1_18PartitionAllocatorEEEPKcmRKNS_4KURLERNS0_10ReportInfoE(%"class.WTF::HashSet"* nocapture readonly dereferenceable(24), i8*, i64, %"class.blink::KURL"* dereferenceable(112), %"class.blink::SubresourceIntegrity::ReportInfo"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::StringAppend.359", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.blink::IntegrityMetadata", align 8
  %10 = alloca %"class.WTF::Vector.353", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.WTF::StringAppend.358", align 8
  %13 = alloca %"class.WTF::StringAppend.359", align 8
  %14 = alloca %"class.WTF::StringAppend", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.WTF::StringAppend", align 8
  %17 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %739, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 0
  %22 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %21, align 8
  %23 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %22, i64 %25
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %20, %39
  %29 = phi %"struct.std::__1::pair"* [ %40, %39 ], [ %22, %20 ]
  %30 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  %33 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %29, i64 0, i32 1
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 0
  %36 = and i1 %32, %35
  %37 = icmp eq %"class.WTF::StringImpl"* %31, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %38 = or i1 %37, %36
  br i1 %38, label %39, label %42

39:                                               ; preds = %28
  %40 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %29, i64 1
  %41 = icmp eq %"struct.std::__1::pair"* %40, %26
  br i1 %41, label %42, label %28

42:                                               ; preds = %39, %28, %20
  %43 = phi %"struct.std::__1::pair"* [ %22, %20 ], [ %29, %28 ], [ %26, %39 ]
  %44 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %43, i64 0, i32 1
  %45 = load i8, i8* %44, align 8
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %43, i64 1
  %47 = icmp eq %"struct.std::__1::pair"* %46, %26
  br i1 %47, label %88, label %48

48:                                               ; preds = %42, %59
  %49 = phi %"struct.std::__1::pair"* [ %60, %59 ], [ %46, %42 ]
  %50 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 0, i32 1
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 0
  %56 = and i1 %52, %55
  %57 = icmp eq %"class.WTF::StringImpl"* %51, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %58 = or i1 %57, %56
  br i1 %58, label %59, label %62

59:                                               ; preds = %48
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 1
  %61 = icmp eq %"struct.std::__1::pair"* %60, %26
  br i1 %61, label %88, label %48

62:                                               ; preds = %48
  %63 = icmp eq %"struct.std::__1::pair"* %49, %26
  br i1 %63, label %88, label %64

64:                                               ; preds = %62, %86
  %65 = phi i8 [ %78, %86 ], [ %54, %62 ]
  %66 = phi %"struct.std::__1::pair"* [ %73, %86 ], [ %49, %62 ]
  %67 = phi i8 [ %69, %86 ], [ %45, %62 ]
  %68 = icmp ult i8 %65, %67
  %69 = select i1 %68, i8 %67, i8 %65
  %70 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %66, i64 1
  %71 = icmp eq %"struct.std::__1::pair"* %70, %26
  br i1 %71, label %88, label %72

72:                                               ; preds = %64, %83
  %73 = phi %"struct.std::__1::pair"* [ %84, %83 ], [ %70, %64 ]
  %74 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  %77 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 0, i32 1
  %78 = load i8, i8* %77, align 1
  %79 = icmp eq i8 %78, 0
  %80 = and i1 %76, %79
  %81 = icmp eq %"class.WTF::StringImpl"* %75, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %82 = or i1 %81, %80
  br i1 %82, label %83, label %86

83:                                               ; preds = %72
  %84 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %73, i64 1
  %85 = icmp eq %"struct.std::__1::pair"* %84, %26
  br i1 %85, label %88, label %72

86:                                               ; preds = %72
  %87 = icmp eq %"struct.std::__1::pair"* %73, %26
  br i1 %87, label %88, label %64

88:                                               ; preds = %59, %86, %64, %83, %62, %42
  %89 = phi i8 [ %45, %62 ], [ %45, %42 ], [ %69, %83 ], [ %69, %64 ], [ %69, %86 ], [ %45, %59 ]
  br i1 %27, label %104, label %90

90:                                               ; preds = %88, %101
  %91 = phi %"struct.std::__1::pair"* [ %102, %101 ], [ %22, %88 ]
  %92 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 0, i32 0, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 0, i32 1
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 0
  %98 = and i1 %94, %97
  %99 = icmp eq %"class.WTF::StringImpl"* %93, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %100 = or i1 %99, %98
  br i1 %100, label %101, label %104

101:                                              ; preds = %90
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %91, i64 1
  %103 = icmp eq %"struct.std::__1::pair"* %102, %26
  br i1 %103, label %195, label %90

104:                                              ; preds = %90, %88
  %105 = phi %"struct.std::__1::pair"* [ %22, %88 ], [ %91, %90 ]
  %106 = icmp eq %"struct.std::__1::pair"* %105, %26
  br i1 %106, label %195, label %107

107:                                              ; preds = %104
  %108 = bitcast %"class.blink::IntegrityMetadata"* %9 to i8*
  %109 = getelementptr inbounds %"class.blink::IntegrityMetadata", %"class.blink::IntegrityMetadata"* %9, i64 0, i32 1
  %110 = bitcast i32* %7 to i8*
  %111 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %112 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %113 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0
  %115 = getelementptr inbounds %"class.blink::IntegrityMetadata", %"class.blink::IntegrityMetadata"* %9, i64 0, i32 0, i32 0, i32 0
  br label %116

116:                                              ; preds = %107, %193
  %117 = phi %"struct.std::__1::pair"* [ %105, %107 ], [ %180, %193 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %108) #10
  %118 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %117, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %118, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %138, label %121

121:                                              ; preds = %116
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #10
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !2

135:                                              ; preds = %126
  call void @llvm.trap() #10
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %116, %121, %136
  %139 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %117, i64 0, i32 1
  %140 = load i8, i8* %139, align 8
  call void @_ZN5blink17IntegrityMetadataC1ENSt3__14pairIN3WTF6StringENS_18IntegrityAlgorithmEEE(%"class.blink::IntegrityMetadata"* nonnull %9, %"class.WTF::StringImpl"* %119, i8 %140) #10
  %141 = load i8, i8* %109, align 8
  %142 = icmp eq i8 %141, %89
  br i1 %142, label %143, label %157

143:                                              ; preds = %138
  %144 = call zeroext i1 @_ZN5blink20SubresourceIntegrity31CheckSubresourceIntegrityDigestERKNS_17IntegrityMetadataEPKcm(%"class.blink::IntegrityMetadata"* nonnull dereferenceable(16) %9, i8* %1, i64 %2)
  br i1 %144, label %145, label %157

145:                                              ; preds = %143
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110)
  store i32 0, i32* %7, align 4
  %146 = load i32, i32* %111, align 4
  %147 = load i32, i32* %112, align 8
  %148 = icmp eq i32 %146, %147
  br i1 %148, label %155, label %149, !prof !2

149:                                              ; preds = %145
  %150 = load i32*, i32** %113, align 8
  %151 = zext i32 %146 to i64
  %152 = getelementptr inbounds i32, i32* %150, i64 %151
  store i32 0, i32* %152, align 4
  %153 = load i32, i32* %111, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* %111, align 4
  br label %156

155:                                              ; preds = %145
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %114, i32* nonnull dereferenceable(4) %7) #10
  br label %156

156:                                              ; preds = %149, %155
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110)
  br label %157

157:                                              ; preds = %138, %143, %156
  %158 = phi i32 [ 1, %156 ], [ 0, %143 ], [ 0, %138 ]
  %159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %160 = icmp eq %"class.WTF::StringImpl"* %159, null
  br i1 %160, label %174, label %161

161:                                              ; preds = %157
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %159, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %159, i64 0, i32 0
  %167 = load i32, i32* %166, align 4
  br i1 %165, label %168, label %170

168:                                              ; preds = %161
  %169 = add i32 %167, -1
  store i32 %169, i32* %166, align 4
  br label %170

170:                                              ; preds = %168, %161
  %171 = phi i32 [ %169, %168 ], [ %167, %161 ]
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %174

173:                                              ; preds = %170
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %159) #10
  br label %174

174:                                              ; preds = %157, %170, %173
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #10
  %175 = icmp eq i32 %158, 0
  br i1 %175, label %176, label %739

176:                                              ; preds = %174
  %177 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %117, i64 1
  %178 = icmp eq %"struct.std::__1::pair"* %177, %26
  br i1 %178, label %195, label %179

179:                                              ; preds = %176, %190
  %180 = phi %"struct.std::__1::pair"* [ %191, %190 ], [ %177, %176 ]
  %181 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %180, i64 0, i32 0, i32 0, i32 0
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %181, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  %184 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %180, i64 0, i32 1
  %185 = load i8, i8* %184, align 1
  %186 = icmp eq i8 %185, 0
  %187 = and i1 %183, %186
  %188 = icmp eq %"class.WTF::StringImpl"* %182, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %189 = or i1 %188, %187
  br i1 %189, label %190, label %193

190:                                              ; preds = %179
  %191 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %180, i64 1
  %192 = icmp eq %"struct.std::__1::pair"* %191, %26
  br i1 %192, label %195, label %179

193:                                              ; preds = %179
  %194 = icmp eq %"struct.std::__1::pair"* %180, %26
  br i1 %194, label %195, label %116

195:                                              ; preds = %101, %176, %193, %190, %104
  %196 = bitcast %"class.WTF::Vector.353"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %196) #10
  %197 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %197, i8 -86, i64 64, i1 false)
  %198 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0, i32 1, i64 0
  %199 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0, i32 0, i32 0
  store i8* %198, i8** %199, align 8
  %200 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %200, align 8
  %201 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %201, align 4
  %202 = call zeroext i1 @_ZN5blink13ComputeDigestENS_13HashAlgorithmEPKcmRN3WTF6VectorIhLj64ENS3_18PartitionAllocatorEEE(i32 1, i8* %1, i64 %2, %"class.WTF::Vector.353"* nonnull dereferenceable(80) %10) #10
  br i1 %202, label %203, label %520

203:                                              ; preds = %195
  %204 = bitcast %"class.WTF::String"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #10
  %205 = bitcast %"class.WTF::StringAppend.358"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %205) #10
  %206 = bitcast %"class.WTF::StringAppend.359"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %206) #10
  %207 = bitcast %"class.WTF::StringAppend"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %207) #10
  %208 = call %"class.WTF::StringImpl"* @_ZNK5blink4KURL12ElidedStringEv(%"class.blink::KURL"* %3) #10
  %209 = icmp eq %"class.WTF::StringImpl"* %208, null
  br i1 %209, label %285, label %210

210:                                              ; preds = %203
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  br i1 %214, label %217, label %227

217:                                              ; preds = %210
  %218 = zext i32 %216 to i33
  %219 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %218, i33 1) #10
  %220 = extractvalue { i33, i1 } %219, 1
  %221 = extractvalue { i33, i1 } %219, 0
  %222 = icmp slt i33 %221, 0
  %223 = or i1 %220, %222
  br i1 %223, label %224, label %225, !prof !2

224:                                              ; preds = %217
  call void @llvm.trap() #10
  unreachable

225:                                              ; preds = %217
  %226 = trunc i33 %221 to i32
  store i32 %226, i32* %215, align 4
  br label %227

227:                                              ; preds = %225, %210
  %228 = phi i32 [ %226, %225 ], [ %216, %210 ]
  %229 = load atomic i32, i32* %211 monotonic, align 4
  %230 = and i32 %229, 2
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %242

232:                                              ; preds = %227
  %233 = zext i32 %228 to i33
  %234 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %233, i33 1) #10
  %235 = extractvalue { i33, i1 } %234, 1
  %236 = extractvalue { i33, i1 } %234, 0
  %237 = icmp slt i33 %236, 0
  %238 = or i1 %235, %237
  br i1 %238, label %239, label %240, !prof !2

239:                                              ; preds = %232
  call void @llvm.trap() #10
  unreachable

240:                                              ; preds = %232
  %241 = trunc i33 %236 to i32
  store i32 %241, i32* %215, align 4
  br label %242

242:                                              ; preds = %240, %227
  %243 = phi i32 [ %241, %240 ], [ %228, %227 ]
  %244 = load atomic i32, i32* %211 monotonic, align 4
  %245 = and i32 %244, 2
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %242
  %248 = add i32 %243, -1
  store i32 %248, i32* %215, align 4
  br label %249

249:                                              ; preds = %247, %242
  %250 = phi i32 [ %248, %247 ], [ %243, %242 ]
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %253

252:                                              ; preds = %249
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #10
  br label %253

253:                                              ; preds = %249, %252
  %254 = load atomic i32, i32* %211 monotonic, align 4, !noalias !6
  %255 = and i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = load i32, i32* %215, align 4
  br i1 %256, label %258, label %268

258:                                              ; preds = %253
  %259 = zext i32 %257 to i33
  %260 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %259, i33 1) #10
  %261 = extractvalue { i33, i1 } %260, 1
  %262 = extractvalue { i33, i1 } %260, 0
  %263 = icmp slt i33 %262, 0
  %264 = or i1 %261, %263
  br i1 %264, label %265, label %266, !prof !2

265:                                              ; preds = %258
  call void @llvm.trap() #10, !noalias !6
  unreachable

266:                                              ; preds = %258
  %267 = trunc i33 %262 to i32
  store i32 %267, i32* %215, align 4, !noalias !6
  br label %268

268:                                              ; preds = %253, %266
  %269 = phi i32 [ %267, %266 ], [ %257, %253 ]
  %270 = bitcast %"class.WTF::StringAppend"* %14 to i64*
  store i64 ptrtoint ([74 x i8]* @.str.2 to i64), i64* %270, align 8, !alias.scope !6
  %271 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %208, %"class.WTF::StringImpl"** %271, align 8, !alias.scope !6
  %272 = load atomic i32, i32* %211 monotonic, align 4, !noalias !6
  %273 = and i32 %272, 2
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %289

275:                                              ; preds = %268
  %276 = zext i32 %269 to i33
  %277 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %276, i33 1) #10
  %278 = extractvalue { i33, i1 } %277, 1
  %279 = extractvalue { i33, i1 } %277, 0
  %280 = icmp slt i33 %279, 0
  %281 = or i1 %278, %280
  br i1 %281, label %282, label %283, !prof !2

282:                                              ; preds = %275
  call void @llvm.trap() #10, !noalias !6
  unreachable

283:                                              ; preds = %275
  %284 = trunc i33 %279 to i32
  store i32 %284, i32* %215, align 4, !noalias !6
  br label %289

285:                                              ; preds = %203
  %286 = bitcast %"class.WTF::StringAppend"* %14 to i64*
  store i64 ptrtoint ([74 x i8]* @.str.2 to i64), i64* %286, align 8, !alias.scope !6
  %287 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %287, align 8, !alias.scope !6
  %288 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 1
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8** %288, align 8, !alias.scope !6
  br label %301

289:                                              ; preds = %283, %268
  %290 = phi i32 [ %284, %283 ], [ %269, %268 ]
  %291 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 1
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8** %291, align 8, !alias.scope !6
  %292 = load atomic i32, i32* %211 monotonic, align 4, !noalias !6
  %293 = and i32 %292, 2
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %297

295:                                              ; preds = %289
  %296 = add i32 %290, -1
  store i32 %296, i32* %215, align 4, !noalias !6
  br label %297

297:                                              ; preds = %295, %289
  %298 = phi i32 [ %296, %295 ], [ %290, %289 ]
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %300, label %301

300:                                              ; preds = %297
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #10, !noalias !6
  br label %301

301:                                              ; preds = %285, %297, %300
  %302 = load i8*, i8** %199, align 8
  %303 = load i32, i32* %201, align 4
  %304 = zext i32 %303 to i64
  %305 = call %"class.WTF::StringImpl"* @_ZN3WTF12Base64EncodeEN4base4spanIKhLm18446744073709551615EEENS_18Base64EncodePolicyE(i64 %304, i8* %302, i32 0) #10
  call void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.359"* nonnull sret %13, %"class.WTF::StringAppend"* nonnull dereferenceable(24) %14, %"class.WTF::StringImpl"* %305)
  %306 = bitcast %"class.WTF::StringAppend.359"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %306)
  %307 = bitcast %"class.WTF::StringAppend.359"* %13 to i64*
  %308 = load i64, i64* %307, align 8, !noalias !9
  %309 = bitcast %"class.WTF::StringAppend.359"* %6 to i64*
  store i64 %308, i64* %309, align 8, !noalias !9
  %310 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %311 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %310, align 8, !noalias !9
  %312 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %311, %"class.WTF::StringImpl"** %312, align 8, !noalias !9
  %313 = icmp eq %"class.WTF::StringImpl"* %311, null
  br i1 %313, label %331, label %314

314:                                              ; preds = %301
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %311, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %316 = load atomic i32, i32* %315 monotonic, align 4
  %317 = and i32 %316, 2
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %319, label %331

319:                                              ; preds = %314
  %320 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %311, i64 0, i32 0
  %321 = load i32, i32* %320, align 4
  %322 = zext i32 %321 to i33
  %323 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %322, i33 1) #10
  %324 = extractvalue { i33, i1 } %323, 1
  %325 = extractvalue { i33, i1 } %323, 0
  %326 = icmp slt i33 %325, 0
  %327 = or i1 %324, %326
  br i1 %327, label %328, label %329, !prof !2

328:                                              ; preds = %319
  call void @llvm.trap() #10
  unreachable

329:                                              ; preds = %319
  %330 = trunc i33 %325 to i32
  store i32 %330, i32* %320, align 4
  br label %331

331:                                              ; preds = %329, %314, %301
  %332 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %6, i64 0, i32 0, i32 1
  %333 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %13, i64 0, i32 0, i32 1
  %334 = bitcast i8** %333 to i64*
  %335 = load i64, i64* %334, align 8, !noalias !9
  %336 = bitcast i8** %332 to i64*
  store i64 %335, i64* %336, align 8, !noalias !9
  %337 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %13, i64 0, i32 1, i32 0, i32 0
  %338 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %337, align 8, !noalias !9
  %339 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %6, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %338, %"class.WTF::StringImpl"** %339, align 8, !noalias !9
  %340 = icmp eq %"class.WTF::StringImpl"* %338, null
  br i1 %340, label %358, label %341

341:                                              ; preds = %331
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %338, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load atomic i32, i32* %342 monotonic, align 4
  %344 = and i32 %343, 2
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %358

346:                                              ; preds = %341
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %338, i64 0, i32 0
  %348 = load i32, i32* %347, align 4
  %349 = zext i32 %348 to i33
  %350 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %349, i33 1) #10
  %351 = extractvalue { i33, i1 } %350, 1
  %352 = extractvalue { i33, i1 } %350, 0
  %353 = icmp slt i33 %352, 0
  %354 = or i1 %351, %353
  br i1 %354, label %355, label %356, !prof !2

355:                                              ; preds = %346
  call void @llvm.trap() #10
  unreachable

356:                                              ; preds = %346
  %357 = trunc i33 %352 to i32
  store i32 %357, i32* %347, align 4
  br label %358

358:                                              ; preds = %331, %341, %356
  call void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.358"* nonnull %12, %"class.WTF::StringAppend.359"* nonnull byval(%"class.WTF::StringAppend.359") align 8 %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0)) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %306)
  %359 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev(%"class.WTF::StringAppend.358"* nonnull %12)
  %360 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %359, %"class.WTF::StringImpl"** %360, align 8
  %361 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1
  %362 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1, i32 0, i32 0, i32 2
  %363 = load i32, i32* %362, align 4
  %364 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1, i32 0, i32 0, i32 1
  %365 = load i32, i32* %364, align 8
  %366 = icmp eq i32 %363, %365
  br i1 %366, label %393, label %367, !prof !2

367:                                              ; preds = %358
  %368 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %361, i64 0, i32 0, i32 0, i32 0
  %369 = load %"class.WTF::String"*, %"class.WTF::String"** %368, align 8
  %370 = zext i32 %363 to i64
  %371 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %369, i64 %370, i32 0, i32 0
  store %"class.WTF::StringImpl"* %359, %"class.WTF::StringImpl"** %371, align 8
  %372 = icmp eq %"class.WTF::StringImpl"* %359, null
  br i1 %372, label %390, label %373

373:                                              ; preds = %367
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load atomic i32, i32* %374 monotonic, align 4
  %376 = and i32 %375, 2
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %390

378:                                              ; preds = %373
  %379 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 0
  %380 = load i32, i32* %379, align 4
  %381 = zext i32 %380 to i33
  %382 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %381, i33 1) #10
  %383 = extractvalue { i33, i1 } %382, 1
  %384 = extractvalue { i33, i1 } %382, 0
  %385 = icmp slt i33 %384, 0
  %386 = or i1 %383, %385
  br i1 %386, label %387, label %388, !prof !2

387:                                              ; preds = %378
  call void @llvm.trap() #10
  unreachable

388:                                              ; preds = %378
  %389 = trunc i33 %384 to i32
  store i32 %389, i32* %379, align 4
  br label %390

390:                                              ; preds = %388, %373, %367
  %391 = load i32, i32* %362, align 4
  %392 = add i32 %391, 1
  store i32 %392, i32* %362, align 4
  br label %394

393:                                              ; preds = %358
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %361, %"class.WTF::String"* nonnull dereferenceable(8) %11) #10
  br label %394

394:                                              ; preds = %390, %393
  %395 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %360, align 8
  %396 = icmp eq %"class.WTF::StringImpl"* %395, null
  br i1 %396, label %410, label %397

397:                                              ; preds = %394
  %398 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %399 = load atomic i32, i32* %398 monotonic, align 4
  %400 = and i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %395, i64 0, i32 0
  %403 = load i32, i32* %402, align 4
  br i1 %401, label %404, label %406

404:                                              ; preds = %397
  %405 = add i32 %403, -1
  store i32 %405, i32* %402, align 4
  br label %406

406:                                              ; preds = %404, %397
  %407 = phi i32 [ %405, %404 ], [ %403, %397 ]
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %410

409:                                              ; preds = %406
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %395) #10
  br label %410

410:                                              ; preds = %394, %406, %409
  %411 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %12, i64 0, i32 0, i32 1, i32 0, i32 0
  %412 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %411, align 8
  %413 = icmp eq %"class.WTF::StringImpl"* %412, null
  br i1 %413, label %427, label %414

414:                                              ; preds = %410
  %415 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %416 = load atomic i32, i32* %415 monotonic, align 4
  %417 = and i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 0
  %420 = load i32, i32* %419, align 4
  br i1 %418, label %421, label %423

421:                                              ; preds = %414
  %422 = add i32 %420, -1
  store i32 %422, i32* %419, align 4
  br label %423

423:                                              ; preds = %421, %414
  %424 = phi i32 [ %422, %421 ], [ %420, %414 ]
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %427

426:                                              ; preds = %423
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %412) #10
  br label %427

427:                                              ; preds = %426, %423, %410
  %428 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %429 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %428, align 8
  %430 = icmp eq %"class.WTF::StringImpl"* %429, null
  br i1 %430, label %444, label %431

431:                                              ; preds = %427
  %432 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %429, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %433 = load atomic i32, i32* %432 monotonic, align 4
  %434 = and i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %429, i64 0, i32 0
  %437 = load i32, i32* %436, align 4
  br i1 %435, label %438, label %440

438:                                              ; preds = %431
  %439 = add i32 %437, -1
  store i32 %439, i32* %436, align 4
  br label %440

440:                                              ; preds = %438, %431
  %441 = phi i32 [ %439, %438 ], [ %437, %431 ]
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %444

443:                                              ; preds = %440
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %429) #10
  br label %444

444:                                              ; preds = %427, %440, %443
  %445 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %337, align 8
  %446 = icmp eq %"class.WTF::StringImpl"* %445, null
  br i1 %446, label %460, label %447

447:                                              ; preds = %444
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = and i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 0
  %453 = load i32, i32* %452, align 4
  br i1 %451, label %454, label %456

454:                                              ; preds = %447
  %455 = add i32 %453, -1
  store i32 %455, i32* %452, align 4
  br label %456

456:                                              ; preds = %454, %447
  %457 = phi i32 [ %455, %454 ], [ %453, %447 ]
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %460

459:                                              ; preds = %456
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %445) #10
  br label %460

460:                                              ; preds = %459, %456, %444
  %461 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %310, align 8
  %462 = icmp eq %"class.WTF::StringImpl"* %461, null
  br i1 %462, label %476, label %463

463:                                              ; preds = %460
  %464 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %461, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %465 = load atomic i32, i32* %464 monotonic, align 4
  %466 = and i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %461, i64 0, i32 0
  %469 = load i32, i32* %468, align 4
  br i1 %467, label %470, label %472

470:                                              ; preds = %463
  %471 = add i32 %469, -1
  store i32 %471, i32* %468, align 4
  br label %472

472:                                              ; preds = %470, %463
  %473 = phi i32 [ %471, %470 ], [ %469, %463 ]
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %476

475:                                              ; preds = %472
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %461) #10
  br label %476

476:                                              ; preds = %460, %472, %475
  %477 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  %478 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %477, align 8
  %479 = icmp eq %"class.WTF::StringImpl"* %478, null
  br i1 %479, label %493, label %480

480:                                              ; preds = %476
  %481 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %478, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %482 = load atomic i32, i32* %481 monotonic, align 4
  %483 = and i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %478, i64 0, i32 0
  %486 = load i32, i32* %485, align 4
  br i1 %484, label %487, label %489

487:                                              ; preds = %480
  %488 = add i32 %486, -1
  store i32 %488, i32* %485, align 4
  br label %489

489:                                              ; preds = %487, %480
  %490 = phi i32 [ %488, %487 ], [ %486, %480 ]
  %491 = icmp eq i32 %490, 0
  br i1 %491, label %492, label %493

492:                                              ; preds = %489
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %478) #10
  br label %493

493:                                              ; preds = %476, %489, %492
  br i1 %209, label %519, label %494

494:                                              ; preds = %493
  %495 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %496 = load atomic i32, i32* %495 monotonic, align 4
  %497 = and i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %500 = load i32, i32* %499, align 4
  br i1 %498, label %501, label %503

501:                                              ; preds = %494
  %502 = add i32 %500, -1
  store i32 %502, i32* %499, align 4
  br label %503

503:                                              ; preds = %501, %494
  %504 = phi i32 [ %502, %501 ], [ %500, %494 ]
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %508

506:                                              ; preds = %503
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #10
  %507 = load i32, i32* %499, align 4
  br label %508

508:                                              ; preds = %503, %506
  %509 = phi i32 [ %504, %503 ], [ %507, %506 ]
  %510 = load atomic i32, i32* %495 monotonic, align 4
  %511 = and i32 %510, 2
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %515

513:                                              ; preds = %508
  %514 = add i32 %509, -1
  store i32 %514, i32* %499, align 4
  br label %515

515:                                              ; preds = %513, %508
  %516 = phi i32 [ %514, %513 ], [ %509, %508 ]
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %519

518:                                              ; preds = %515
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #10
  br label %519

519:                                              ; preds = %493, %515, %518
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %207) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %206) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %205) #10
  br label %712

520:                                              ; preds = %195
  %521 = bitcast %"class.WTF::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %521) #10
  %522 = bitcast %"class.WTF::StringAppend"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %522) #10
  %523 = call %"class.WTF::StringImpl"* @_ZNK5blink4KURL12ElidedStringEv(%"class.blink::KURL"* %3) #10
  %524 = icmp eq %"class.WTF::StringImpl"* %523, null
  br i1 %524, label %600, label %525

525:                                              ; preds = %520
  %526 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %523, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %527 = load atomic i32, i32* %526 monotonic, align 4
  %528 = and i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %523, i64 0, i32 0
  %531 = load i32, i32* %530, align 4
  br i1 %529, label %532, label %542

532:                                              ; preds = %525
  %533 = zext i32 %531 to i33
  %534 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %533, i33 1) #10
  %535 = extractvalue { i33, i1 } %534, 1
  %536 = extractvalue { i33, i1 } %534, 0
  %537 = icmp slt i33 %536, 0
  %538 = or i1 %535, %537
  br i1 %538, label %539, label %540, !prof !2

539:                                              ; preds = %532
  call void @llvm.trap() #10
  unreachable

540:                                              ; preds = %532
  %541 = trunc i33 %536 to i32
  store i32 %541, i32* %530, align 4
  br label %542

542:                                              ; preds = %540, %525
  %543 = phi i32 [ %541, %540 ], [ %531, %525 ]
  %544 = load atomic i32, i32* %526 monotonic, align 4
  %545 = and i32 %544, 2
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %557

547:                                              ; preds = %542
  %548 = zext i32 %543 to i33
  %549 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %548, i33 1) #10
  %550 = extractvalue { i33, i1 } %549, 1
  %551 = extractvalue { i33, i1 } %549, 0
  %552 = icmp slt i33 %551, 0
  %553 = or i1 %550, %552
  br i1 %553, label %554, label %555, !prof !2

554:                                              ; preds = %547
  call void @llvm.trap() #10
  unreachable

555:                                              ; preds = %547
  %556 = trunc i33 %551 to i32
  store i32 %556, i32* %530, align 4
  br label %557

557:                                              ; preds = %555, %542
  %558 = phi i32 [ %556, %555 ], [ %543, %542 ]
  %559 = load atomic i32, i32* %526 monotonic, align 4
  %560 = and i32 %559, 2
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %562, label %564

562:                                              ; preds = %557
  %563 = add i32 %558, -1
  store i32 %563, i32* %530, align 4
  br label %564

564:                                              ; preds = %562, %557
  %565 = phi i32 [ %563, %562 ], [ %558, %557 ]
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %567, label %568

567:                                              ; preds = %564
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %523) #10
  br label %568

568:                                              ; preds = %564, %567
  %569 = load atomic i32, i32* %526 monotonic, align 4, !noalias !12
  %570 = and i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = load i32, i32* %530, align 4
  br i1 %571, label %573, label %583

573:                                              ; preds = %568
  %574 = zext i32 %572 to i33
  %575 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %574, i33 1) #10
  %576 = extractvalue { i33, i1 } %575, 1
  %577 = extractvalue { i33, i1 } %575, 0
  %578 = icmp slt i33 %577, 0
  %579 = or i1 %576, %578
  br i1 %579, label %580, label %581, !prof !2

580:                                              ; preds = %573
  call void @llvm.trap() #10, !noalias !12
  unreachable

581:                                              ; preds = %573
  %582 = trunc i33 %577 to i32
  store i32 %582, i32* %530, align 4, !noalias !12
  br label %583

583:                                              ; preds = %568, %581
  %584 = phi i32 [ %582, %581 ], [ %572, %568 ]
  %585 = bitcast %"class.WTF::StringAppend"* %16 to i64*
  store i64 ptrtoint ([63 x i8]* @.str.5 to i64), i64* %585, align 8, !alias.scope !12
  %586 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %523, %"class.WTF::StringImpl"** %586, align 8, !alias.scope !12
  %587 = load atomic i32, i32* %526 monotonic, align 4, !noalias !12
  %588 = and i32 %587, 2
  %589 = icmp eq i32 %588, 0
  br i1 %589, label %590, label %604

590:                                              ; preds = %583
  %591 = zext i32 %584 to i33
  %592 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %591, i33 1) #10
  %593 = extractvalue { i33, i1 } %592, 1
  %594 = extractvalue { i33, i1 } %592, 0
  %595 = icmp slt i33 %594, 0
  %596 = or i1 %593, %595
  br i1 %596, label %597, label %598, !prof !2

597:                                              ; preds = %590
  call void @llvm.trap() #10, !noalias !12
  unreachable

598:                                              ; preds = %590
  %599 = trunc i33 %594 to i32
  store i32 %599, i32* %530, align 4, !noalias !12
  br label %604

600:                                              ; preds = %520
  %601 = bitcast %"class.WTF::StringAppend"* %16 to i64*
  store i64 ptrtoint ([63 x i8]* @.str.5 to i64), i64* %601, align 8, !alias.scope !12
  %602 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %602, align 8, !alias.scope !12
  %603 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 1
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8** %603, align 8, !alias.scope !12
  br label %616

604:                                              ; preds = %598, %583
  %605 = phi i32 [ %599, %598 ], [ %584, %583 ]
  %606 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 1
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i8** %606, align 8, !alias.scope !12
  %607 = load atomic i32, i32* %526 monotonic, align 4, !noalias !12
  %608 = and i32 %607, 2
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %612

610:                                              ; preds = %604
  %611 = add i32 %605, -1
  store i32 %611, i32* %530, align 4, !noalias !12
  br label %612

612:                                              ; preds = %610, %604
  %613 = phi i32 [ %611, %610 ], [ %605, %604 ]
  %614 = icmp eq i32 %613, 0
  br i1 %614, label %615, label %616

615:                                              ; preds = %612
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %523) #10, !noalias !12
  br label %616

616:                                              ; preds = %600, %612, %615
  %617 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %16)
  %618 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %617, %"class.WTF::StringImpl"** %618, align 8
  %619 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1
  %620 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1, i32 0, i32 0, i32 2
  %621 = load i32, i32* %620, align 4
  %622 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 1, i32 0, i32 0, i32 1
  %623 = load i32, i32* %622, align 8
  %624 = icmp eq i32 %621, %623
  br i1 %624, label %651, label %625, !prof !2

625:                                              ; preds = %616
  %626 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %619, i64 0, i32 0, i32 0, i32 0
  %627 = load %"class.WTF::String"*, %"class.WTF::String"** %626, align 8
  %628 = zext i32 %621 to i64
  %629 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %627, i64 %628, i32 0, i32 0
  store %"class.WTF::StringImpl"* %617, %"class.WTF::StringImpl"** %629, align 8
  %630 = icmp eq %"class.WTF::StringImpl"* %617, null
  br i1 %630, label %648, label %631

631:                                              ; preds = %625
  %632 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %633 = load atomic i32, i32* %632 monotonic, align 4
  %634 = and i32 %633, 2
  %635 = icmp eq i32 %634, 0
  br i1 %635, label %636, label %648

636:                                              ; preds = %631
  %637 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %617, i64 0, i32 0
  %638 = load i32, i32* %637, align 4
  %639 = zext i32 %638 to i33
  %640 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %639, i33 1) #10
  %641 = extractvalue { i33, i1 } %640, 1
  %642 = extractvalue { i33, i1 } %640, 0
  %643 = icmp slt i33 %642, 0
  %644 = or i1 %641, %643
  br i1 %644, label %645, label %646, !prof !2

645:                                              ; preds = %636
  call void @llvm.trap() #10
  unreachable

646:                                              ; preds = %636
  %647 = trunc i33 %642 to i32
  store i32 %647, i32* %637, align 4
  br label %648

648:                                              ; preds = %646, %631, %625
  %649 = load i32, i32* %620, align 4
  %650 = add i32 %649, 1
  store i32 %650, i32* %620, align 4
  br label %652

651:                                              ; preds = %616
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %619, %"class.WTF::String"* nonnull dereferenceable(8) %15) #10
  br label %652

652:                                              ; preds = %648, %651
  %653 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %618, align 8
  %654 = icmp eq %"class.WTF::StringImpl"* %653, null
  br i1 %654, label %668, label %655

655:                                              ; preds = %652
  %656 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %653, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %657 = load atomic i32, i32* %656 monotonic, align 4
  %658 = and i32 %657, 2
  %659 = icmp eq i32 %658, 0
  %660 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %653, i64 0, i32 0
  %661 = load i32, i32* %660, align 4
  br i1 %659, label %662, label %664

662:                                              ; preds = %655
  %663 = add i32 %661, -1
  store i32 %663, i32* %660, align 4
  br label %664

664:                                              ; preds = %662, %655
  %665 = phi i32 [ %663, %662 ], [ %661, %655 ]
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %667, label %668

667:                                              ; preds = %664
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %653) #10
  br label %668

668:                                              ; preds = %652, %664, %667
  %669 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  %670 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %669, align 8
  %671 = icmp eq %"class.WTF::StringImpl"* %670, null
  br i1 %671, label %685, label %672

672:                                              ; preds = %668
  %673 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %670, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %674 = load atomic i32, i32* %673 monotonic, align 4
  %675 = and i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %670, i64 0, i32 0
  %678 = load i32, i32* %677, align 4
  br i1 %676, label %679, label %681

679:                                              ; preds = %672
  %680 = add i32 %678, -1
  store i32 %680, i32* %677, align 4
  br label %681

681:                                              ; preds = %679, %672
  %682 = phi i32 [ %680, %679 ], [ %678, %672 ]
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %684, label %685

684:                                              ; preds = %681
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %670) #10
  br label %685

685:                                              ; preds = %668, %681, %684
  br i1 %524, label %711, label %686

686:                                              ; preds = %685
  %687 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %523, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %688 = load atomic i32, i32* %687 monotonic, align 4
  %689 = and i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %523, i64 0, i32 0
  %692 = load i32, i32* %691, align 4
  br i1 %690, label %693, label %695

693:                                              ; preds = %686
  %694 = add i32 %692, -1
  store i32 %694, i32* %691, align 4
  br label %695

695:                                              ; preds = %693, %686
  %696 = phi i32 [ %694, %693 ], [ %692, %686 ]
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %698, label %700

698:                                              ; preds = %695
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %523) #10
  %699 = load i32, i32* %691, align 4
  br label %700

700:                                              ; preds = %695, %698
  %701 = phi i32 [ %696, %695 ], [ %699, %698 ]
  %702 = load atomic i32, i32* %687 monotonic, align 4
  %703 = and i32 %702, 2
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %705, label %707

705:                                              ; preds = %700
  %706 = add i32 %701, -1
  store i32 %706, i32* %691, align 4
  br label %707

707:                                              ; preds = %705, %700
  %708 = phi i32 [ %706, %705 ], [ %701, %700 ]
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %710, label %711

710:                                              ; preds = %707
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %523) #10
  br label %711

711:                                              ; preds = %685, %707, %710
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %522) #10
  br label %712

712:                                              ; preds = %711, %519
  %713 = phi i8* [ %521, %711 ], [ %204, %519 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %713) #10
  %714 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %714)
  store i32 1, i32* %8, align 4
  %715 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %716 = load i32, i32* %715, align 4
  %717 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %718 = load i32, i32* %717, align 8
  %719 = icmp eq i32 %716, %718
  br i1 %719, label %727, label %720, !prof !2

720:                                              ; preds = %712
  %721 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %722 = load i32*, i32** %721, align 8
  %723 = zext i32 %716 to i64
  %724 = getelementptr inbounds i32, i32* %722, i64 %723
  store i32 1, i32* %724, align 4
  %725 = load i32, i32* %715, align 4
  %726 = add i32 %725, 1
  store i32 %726, i32* %715, align 4
  br label %729

727:                                              ; preds = %712
  %728 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %4, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %728, i32* nonnull dereferenceable(4) %8) #10
  br label %729

729:                                              ; preds = %720, %727
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %714)
  %730 = load i32, i32* %201, align 4
  %731 = icmp eq i32 %730, 0
  br i1 %731, label %733, label %732, !prof !2

732:                                              ; preds = %729
  store i32 0, i32* %201, align 4
  br label %733

733:                                              ; preds = %732, %729
  %734 = load i8*, i8** %199, align 8
  %735 = icmp eq i8* %198, %734
  br i1 %735, label %738, label %736, !prof !15

736:                                              ; preds = %733
  %737 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %10, i64 0, i32 0
  call void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"* nonnull %737, i8* %734) #10
  br label %738

738:                                              ; preds = %733, %736
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %196) #10
  br label %739

739:                                              ; preds = %174, %738, %5
  %740 = phi i1 [ true, %5 ], [ false, %738 ], [ true, %174 ]
  ret i1 %740
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20SubresourceIntegrity25CheckSubresourceIntegrityERKN3WTF6StringENS0_17IntegrityFeaturesEPKcmRKNS_4KURLERNS0_10ReportInfoE(%"class.WTF::String"* dereferenceable(8), i32, i8*, i64, %"class.blink::KURL"* dereferenceable(112), %"class.blink::SubresourceIntegrity::ReportInfo"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::HashSet", align 8
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %60, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %60, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.WTF::HashSet"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %7, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %7, i64 0, i32 0, i32 1
  %19 = bitcast %"class.WTF::HashSet"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 20, i1 false) #10
  %20 = call i32 @_ZN5blink20SubresourceIntegrity23ParseIntegrityAttributeERKN3WTF6StringENS0_17IntegrityFeaturesERNS1_7HashSetINSt3__14pairIS2_NS_18IntegrityAlgorithmEEENS1_8PairHashIS2_S9_EENS1_10HashTraitsISA_EENS1_18PartitionAllocatorEEEPNS0_10ReportInfoE(%"class.WTF::String"* dereferenceable(8) %0, i32 %1, %"class.WTF::HashSet"* nonnull dereferenceable(24) %7, %"class.blink::SubresourceIntegrity::ReportInfo"* %5)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %15
  %23 = call zeroext i1 @_ZN5blink20SubresourceIntegrity29CheckSubresourceIntegrityImplERKN3WTF7HashSetINSt3__14pairINS1_6StringENS_18IntegrityAlgorithmEEENS1_8PairHashIS5_S6_EENS1_10HashTraitsIS7_EENS1_18PartitionAllocatorEEEPKcmRKNS_4KURLERNS0_10ReportInfoE(%"class.WTF::HashSet"* nonnull dereferenceable(24) %7, i8* %2, i64 %3, %"class.blink::KURL"* dereferenceable(112) %4, %"class.blink::SubresourceIntegrity::ReportInfo"* dereferenceable(32) %5)
  br label %24

24:                                               ; preds = %15, %22
  %25 = phi i1 [ %23, %22 ], [ true, %15 ]
  %26 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %17, align 8
  %27 = icmp eq %"struct.std::__1::pair"* %26, null
  br i1 %27, label %59, label %28, !prof !15

28:                                               ; preds = %24
  %29 = load i32, i32* %18, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %57, label %31

31:                                               ; preds = %28
  %32 = zext i32 %29 to i64
  br label %33

33:                                               ; preds = %54, %31
  %34 = phi i64 [ 0, %31 ], [ %55, %54 ]
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %26, i64 %34
  %36 = bitcast %"struct.std::__1::pair"* %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast i8* %37 to %"class.WTF::StringImpl"*
  %39 = ptrtoint i8* %37 to i64
  switch i64 %39, label %40 [
    i64 -1, label %54
    i64 0, label %54
  ]

40:                                               ; preds = %33
  %41 = getelementptr inbounds i8, i8* %37, i64 8
  %42 = bitcast i8* %41 to i32*
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = bitcast i8* %37 to i32*
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %40
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %40
  %51 = phi i32 [ %49, %48 ], [ %47, %40 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #10
  br label %54

54:                                               ; preds = %53, %50, %33, %33
  %55 = add nuw nsw i64 %34, 1
  %56 = icmp eq i64 %55, %32
  br i1 %56, label %57, label %33

57:                                               ; preds = %54, %28
  %58 = bitcast %"struct.std::__1::pair"* %26 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %58) #10
  store %"struct.std::__1::pair"* null, %"struct.std::__1::pair"** %17, align 8
  br label %59

59:                                               ; preds = %24, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  br label %60

60:                                               ; preds = %6, %11, %59
  %61 = phi i1 [ %25, %59 ], [ true, %11 ], [ true, %6 ]
  ret i1 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20SubresourceIntegrity23ParseIntegrityAttributeERKN3WTF6StringENS0_17IntegrityFeaturesERNS1_7HashSetINSt3__14pairIS2_NS_18IntegrityAlgorithmEEENS1_8PairHashIS2_S9_EENS1_10HashTraitsISA_EENS1_18PartitionAllocatorEEEPNS0_10ReportInfoE(%"class.WTF::String"* dereferenceable(8), i32, %"class.WTF::HashSet"* dereferenceable(24), %"class.blink::SubresourceIntegrity::ReportInfo"*) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %"class.WTF::Vector.362", align 8
  %9 = alloca i16*, align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.WTF::StringAppend", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = alloca %"class.WTF::StringAppend", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.WTF::StringAppend", align 8
  %17 = alloca %"class.WTF::String", align 8
  %18 = alloca %"class.WTF::StringAppend", align 8
  %19 = alloca %"class.WTF::String", align 8
  %20 = alloca %"class.blink::IntegrityMetadata", align 8
  %21 = alloca { %"class.WTF::StringImpl"*, i8 }, align 8
  %22 = bitcast { %"class.WTF::StringImpl"*, i8 }* %21 to %"struct.std::__1::pair"*
  %23 = bitcast %"class.WTF::Vector.362"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %8, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %8, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 16, i1 false) #10
  %26 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEv(%"class.WTF::String"* %0) #10
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %55, label %28

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %42, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 1
  br i1 %36, label %40, label %38

38:                                               ; preds = %32
  %39 = bitcast %"class.WTF::StringImpl"* %37 to i8*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector.362"* nonnull %8, i8* %39, i32 %30) #10
  br label %42

40:                                               ; preds = %32
  %41 = bitcast %"class.WTF::StringImpl"* %37 to i16*
  call void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector.362"* nonnull %8, i16* %41, i32 %30) #10
  br label %42

42:                                               ; preds = %28, %38, %40
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #10
  br label %55

55:                                               ; preds = %4, %51, %54
  %56 = bitcast i16** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #10
  %57 = load i16*, i16** %24, align 8
  store i16* %57, i16** %9, align 8
  %58 = load i32, i32* %25, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i16, i16* %57, i64 %59
  %61 = icmp eq i32 %58, 0
  br i1 %61, label %1077, label %62

62:                                               ; preds = %55
  %63 = bitcast %"class.WTF::String"* %10 to i8*
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  %65 = bitcast i16** %9 to i64*
  %66 = icmp eq i32 %1, 1
  %67 = select i1 %66, i64 6, i64 5
  %68 = icmp eq %"class.blink::SubresourceIntegrity::ReportInfo"* %3, null
  %69 = bitcast %"class.WTF::String"* %13 to i8*
  %70 = bitcast %"class.WTF::StringAppend"* %14 to i8*
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %72 = bitcast %"class.WTF::StringAppend"* %14 to i64*
  %73 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  %74 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 1
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 1
  %77 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 1, i32 0, i32 0, i32 2
  %78 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %79 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %76, i64 0, i32 0, i32 0, i32 0
  %80 = bitcast i32* %6 to i8*
  %81 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %82 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %83 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %84 = getelementptr inbounds %"class.blink::SubresourceIntegrity::ReportInfo", %"class.blink::SubresourceIntegrity::ReportInfo"* %3, i64 0, i32 0
  %85 = bitcast %"class.WTF::String"* %11 to i8*
  %86 = bitcast %"class.WTF::StringAppend"* %12 to i8*
  %87 = bitcast %"class.WTF::StringAppend"* %12 to i64*
  %88 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %12, i64 0, i32 0, i32 1, i32 0, i32 0
  %89 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %12, i64 0, i32 1
  %90 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %91 = bitcast i32* %7 to i8*
  %92 = bitcast %"class.WTF::String"* %15 to i8*
  %93 = bitcast %"class.WTF::StringAppend"* %16 to i8*
  %94 = bitcast %"class.WTF::StringAppend"* %16 to i64*
  %95 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  %96 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 1
  %97 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %98 = bitcast i32* %5 to i8*
  %99 = icmp ne %"class.blink::SubresourceIntegrity::ReportInfo"* %3, null
  %100 = bitcast %"class.WTF::String"* %17 to i8*
  %101 = bitcast %"class.WTF::StringAppend"* %18 to i8*
  %102 = bitcast %"class.WTF::String"* %19 to i8*
  %103 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %19, i64 0, i32 0, i32 0
  %104 = bitcast %"class.WTF::StringAppend"* %18 to i64*
  %105 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %18, i64 0, i32 0, i32 1, i32 0, i32 0
  %106 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %18, i64 0, i32 1
  %107 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %17, i64 0, i32 0, i32 0
  %108 = bitcast %"class.blink::IntegrityMetadata"* %20 to i8*
  %109 = getelementptr inbounds %"class.blink::IntegrityMetadata", %"class.blink::IntegrityMetadata"* %20, i64 0, i32 0, i32 0, i32 0
  %110 = bitcast { %"class.WTF::StringImpl"*, i8 }* %21 to i8*
  %111 = getelementptr inbounds { %"class.WTF::StringImpl"*, i8 }, { %"class.WTF::StringImpl"*, i8 }* %21, i64 0, i32 0
  %112 = getelementptr inbounds { %"class.WTF::StringImpl"*, i8 }, { %"class.WTF::StringImpl"*, i8 }* %21, i64 0, i32 1
  %113 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0
  %114 = bitcast %"class.blink::IntegrityMetadata"* %20 to i8*
  br label %115

115:                                              ; preds = %62, %1073
  %116 = phi i16* [ %57, %62 ], [ %1056, %1073 ]
  %117 = phi i8 [ 0, %62 ], [ %1057, %1073 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #10
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %64, align 8
  br label %118

118:                                              ; preds = %115, %123
  %119 = phi i16* [ %124, %123 ], [ %116, %115 ]
  %120 = load i16, i16* %119, align 2
  %121 = icmp ult i16 %120, 33
  br i1 %121, label %122, label %126

122:                                              ; preds = %118
  switch i16 %120, label %126 [
    i16 32, label %123
    i16 13, label %123
    i16 12, label %123
    i16 11, label %123
    i16 10, label %123
    i16 9, label %123
  ]

123:                                              ; preds = %122, %122, %122, %122, %122, %122
  %124 = getelementptr inbounds i16, i16* %119, i64 1
  store i16* %124, i16** %9, align 8
  %125 = icmp ult i16* %124, %60
  br i1 %125, label %118, label %126

126:                                              ; preds = %122, %118, %123
  %127 = phi i16* [ %124, %123 ], [ %119, %118 ], [ %119, %122 ]
  %128 = ptrtoint i16* %127 to i64
  %129 = icmp ugt i16* %60, %127
  br i1 %129, label %130, label %142

130:                                              ; preds = %126, %136
  %131 = phi i64 [ %138, %136 ], [ %128, %126 ]
  %132 = phi i16* [ %137, %136 ], [ %127, %126 ]
  %133 = load i16, i16* %132, align 2
  %134 = icmp ult i16 %133, 33
  br i1 %134, label %135, label %136

135:                                              ; preds = %130
  switch i16 %133, label %136 [
    i16 32, label %142
    i16 13, label %142
    i16 12, label %142
    i16 11, label %142
    i16 10, label %142
    i16 9, label %142
  ]

136:                                              ; preds = %135, %130
  %137 = getelementptr inbounds i16, i16* %132, i64 1
  %138 = ptrtoint i16* %137 to i64
  %139 = icmp ult i16* %137, %60
  br i1 %139, label %130, label %140

140:                                              ; preds = %136
  %141 = ptrtoint i16* %137 to i64
  br label %142

142:                                              ; preds = %135, %135, %135, %135, %135, %135, %140, %126
  %143 = phi i64 [ %128, %126 ], [ %141, %140 ], [ %131, %135 ], [ %131, %135 ], [ %131, %135 ], [ %131, %135 ], [ %131, %135 ], [ %131, %135 ]
  %144 = inttoptr i64 %143 to i16*
  %145 = icmp ult i16* %127, %144
  br label %146

146:                                              ; preds = %177, %142
  %147 = phi i64 [ 0, %142 ], [ %178, %177 ]
  %148 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* bitcast ([6 x { i8*, i8 }]* @_ZZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmEE9kPrefixes to %"struct.std::__1::pair.360"*), i64 %147, i32 0
  %149 = load i8*, i8** %148, align 16
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 0
  br i1 %145, label %152, label %168

152:                                              ; preds = %146, %162
  %153 = phi i1 [ %167, %162 ], [ %151, %146 ]
  %154 = phi i8 [ %166, %162 ], [ %150, %146 ]
  %155 = phi i16* [ %163, %162 ], [ %127, %146 ]
  %156 = phi i8* [ %164, %162 ], [ %149, %146 ]
  br i1 %153, label %171, label %157

157:                                              ; preds = %152
  %158 = load i16, i16* %155, align 2
  %159 = zext i16 %158 to i32
  %160 = sext i8 %154 to i32
  %161 = icmp eq i32 %159, %160
  br i1 %161, label %162, label %177

162:                                              ; preds = %157
  %163 = getelementptr inbounds i16, i16* %155, i64 1
  %164 = getelementptr inbounds i8, i8* %156, i64 1
  %165 = icmp ult i16* %163, %144
  %166 = load i8, i8* %164, align 1
  %167 = icmp eq i8 %166, 0
  br i1 %165, label %152, label %168

168:                                              ; preds = %162, %146
  %169 = phi i16* [ %127, %146 ], [ %163, %162 ]
  %170 = phi i1 [ %151, %146 ], [ %167, %162 ]
  br i1 %170, label %171, label %177

171:                                              ; preds = %152, %168
  %172 = phi i16* [ %169, %168 ], [ %155, %152 ]
  %173 = icmp ult i16* %172, %144
  br i1 %173, label %174, label %177

174:                                              ; preds = %171
  %175 = load i16, i16* %172, align 2
  %176 = icmp eq i16 %175, 45
  br i1 %176, label %576, label %177

177:                                              ; preds = %157, %174, %171, %168
  %178 = add nuw nsw i64 %147, 1
  %179 = icmp eq i64 %178, %67
  br i1 %179, label %180, label %146

180:                                              ; preds = %177
  br i1 %145, label %181, label %195

181:                                              ; preds = %180
  %182 = load i16, i16* %127, align 2
  %183 = icmp eq i16 %182, 45
  br i1 %183, label %195, label %187

184:                                              ; preds = %187
  %185 = load i16, i16* %189, align 2
  %186 = icmp eq i16 %185, 45
  br i1 %186, label %193, label %187

187:                                              ; preds = %181, %184
  %188 = phi i16* [ %189, %184 ], [ %127, %181 ]
  %189 = getelementptr inbounds i16, i16* %188, i64 1
  %190 = icmp ult i16* %189, %144
  br i1 %190, label %184, label %191

191:                                              ; preds = %187
  %192 = ptrtoint i16* %189 to i64
  br label %195

193:                                              ; preds = %184
  %194 = ptrtoint i16* %189 to i64
  br label %195

195:                                              ; preds = %193, %191, %181, %180
  %196 = phi i64 [ %128, %180 ], [ %192, %191 ], [ %128, %181 ], [ %194, %193 ]
  %197 = inttoptr i64 %196 to i16*
  %198 = icmp ult i16* %197, %144
  %199 = icmp ult i16* %127, %60
  br i1 %198, label %200, label %388

200:                                              ; preds = %195
  br i1 %199, label %201, label %209

201:                                              ; preds = %200, %206
  %202 = phi i16* [ %207, %206 ], [ %127, %200 ]
  %203 = load i16, i16* %202, align 2
  %204 = icmp ult i16 %203, 33
  br i1 %204, label %205, label %206

205:                                              ; preds = %201
  switch i16 %203, label %206 [
    i16 32, label %209
    i16 13, label %209
    i16 12, label %209
    i16 11, label %209
    i16 10, label %209
    i16 9, label %209
  ]

206:                                              ; preds = %205, %201
  %207 = getelementptr inbounds i16, i16* %202, i64 1
  store i16* %207, i16** %9, align 8
  %208 = icmp ult i16* %207, %60
  br i1 %208, label %201, label %209

209:                                              ; preds = %205, %205, %205, %205, %205, %205, %206, %200
  %210 = phi i16* [ %127, %200 ], [ %202, %205 ], [ %202, %205 ], [ %202, %205 ], [ %202, %205 ], [ %202, %205 ], [ %202, %205 ], [ %207, %206 ]
  br i1 %68, label %1055, label %211

211:                                              ; preds = %209
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #10
  %212 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %213 = icmp eq %"class.WTF::StringImpl"* %212, null
  br i1 %213, label %287, label %214

214:                                              ; preds = %211
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 0
  %220 = load i32, i32* %219, align 4
  br i1 %218, label %221, label %231

221:                                              ; preds = %214
  %222 = zext i32 %220 to i33
  %223 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %222, i33 1) #10
  %224 = extractvalue { i33, i1 } %223, 1
  %225 = extractvalue { i33, i1 } %223, 0
  %226 = icmp slt i33 %225, 0
  %227 = or i1 %224, %226
  br i1 %227, label %228, label %229, !prof !2

228:                                              ; preds = %221
  call void @llvm.trap() #10
  unreachable

229:                                              ; preds = %221
  %230 = trunc i33 %225 to i32
  store i32 %230, i32* %219, align 4
  br label %231

231:                                              ; preds = %229, %214
  %232 = phi i32 [ %230, %229 ], [ %220, %214 ]
  %233 = load atomic i32, i32* %215 monotonic, align 4
  %234 = and i32 %233, 2
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %246

236:                                              ; preds = %231
  %237 = zext i32 %232 to i33
  %238 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %237, i33 1) #10
  %239 = extractvalue { i33, i1 } %238, 1
  %240 = extractvalue { i33, i1 } %238, 0
  %241 = icmp slt i33 %240, 0
  %242 = or i1 %239, %241
  br i1 %242, label %243, label %244, !prof !2

243:                                              ; preds = %236
  call void @llvm.trap() #10
  unreachable

244:                                              ; preds = %236
  %245 = trunc i33 %240 to i32
  store i32 %245, i32* %219, align 4
  br label %246

246:                                              ; preds = %244, %231
  %247 = phi i32 [ %245, %244 ], [ %232, %231 ]
  %248 = load atomic i32, i32* %215 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %253

251:                                              ; preds = %246
  %252 = add i32 %247, -1
  store i32 %252, i32* %219, align 4
  br label %253

253:                                              ; preds = %251, %246
  %254 = phi i32 [ %252, %251 ], [ %247, %246 ]
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %253
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %212) #10
  br label %257

257:                                              ; preds = %253, %256
  %258 = load atomic i32, i32* %215 monotonic, align 4, !noalias !16
  %259 = and i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = load i32, i32* %219, align 4
  br i1 %260, label %262, label %272

262:                                              ; preds = %257
  %263 = zext i32 %261 to i33
  %264 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %263, i33 1) #10
  %265 = extractvalue { i33, i1 } %264, 1
  %266 = extractvalue { i33, i1 } %264, 0
  %267 = icmp slt i33 %266, 0
  %268 = or i1 %265, %267
  br i1 %268, label %269, label %270, !prof !2

269:                                              ; preds = %262
  call void @llvm.trap() #10, !noalias !16
  unreachable

270:                                              ; preds = %262
  %271 = trunc i33 %266 to i32
  store i32 %271, i32* %219, align 4, !noalias !16
  br label %272

272:                                              ; preds = %257, %270
  %273 = phi i32 [ %271, %270 ], [ %261, %257 ]
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %87, align 8, !alias.scope !16
  store %"class.WTF::StringImpl"* %212, %"class.WTF::StringImpl"** %88, align 8, !alias.scope !16
  %274 = load atomic i32, i32* %215 monotonic, align 4, !noalias !16
  %275 = and i32 %274, 2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %288

277:                                              ; preds = %272
  %278 = zext i32 %273 to i33
  %279 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %278, i33 1) #10
  %280 = extractvalue { i33, i1 } %279, 1
  %281 = extractvalue { i33, i1 } %279, 0
  %282 = icmp slt i33 %281, 0
  %283 = or i1 %280, %282
  br i1 %283, label %284, label %285, !prof !2

284:                                              ; preds = %277
  call void @llvm.trap() #10, !noalias !16
  unreachable

285:                                              ; preds = %277
  %286 = trunc i33 %281 to i32
  store i32 %286, i32* %219, align 4, !noalias !16
  br label %288

287:                                              ; preds = %211
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %87, align 8, !alias.scope !16
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %88, align 8, !alias.scope !16
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0), i8** %89, align 8, !alias.scope !16
  br label %299

288:                                              ; preds = %285, %272
  %289 = phi i32 [ %286, %285 ], [ %273, %272 ]
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0), i8** %89, align 8, !alias.scope !16
  %290 = load atomic i32, i32* %215 monotonic, align 4, !noalias !16
  %291 = and i32 %290, 2
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %295

293:                                              ; preds = %288
  %294 = add i32 %289, -1
  store i32 %294, i32* %219, align 4, !noalias !16
  br label %295

295:                                              ; preds = %293, %288
  %296 = phi i32 [ %294, %293 ], [ %289, %288 ]
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %212) #10, !noalias !16
  br label %299

299:                                              ; preds = %287, %295, %298
  %300 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %12)
  store %"class.WTF::StringImpl"* %300, %"class.WTF::StringImpl"** %90, align 8
  %301 = load i32, i32* %77, align 4
  %302 = load i32, i32* %78, align 8
  %303 = icmp eq i32 %301, %302
  br i1 %303, label %329, label %304, !prof !2

304:                                              ; preds = %299
  %305 = load %"class.WTF::String"*, %"class.WTF::String"** %79, align 8
  %306 = zext i32 %301 to i64
  %307 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %305, i64 %306, i32 0, i32 0
  store %"class.WTF::StringImpl"* %300, %"class.WTF::StringImpl"** %307, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %300, null
  br i1 %308, label %326, label %309

309:                                              ; preds = %304
  %310 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load atomic i32, i32* %310 monotonic, align 4
  %312 = and i32 %311, 2
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %326

314:                                              ; preds = %309
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 0
  %316 = load i32, i32* %315, align 4
  %317 = zext i32 %316 to i33
  %318 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %317, i33 1) #10
  %319 = extractvalue { i33, i1 } %318, 1
  %320 = extractvalue { i33, i1 } %318, 0
  %321 = icmp slt i33 %320, 0
  %322 = or i1 %319, %321
  br i1 %322, label %323, label %324, !prof !2

323:                                              ; preds = %314
  call void @llvm.trap() #10
  unreachable

324:                                              ; preds = %314
  %325 = trunc i33 %320 to i32
  store i32 %325, i32* %315, align 4
  br label %326

326:                                              ; preds = %324, %309, %304
  %327 = load i32, i32* %77, align 4
  %328 = add i32 %327, 1
  store i32 %328, i32* %77, align 4
  br label %330

329:                                              ; preds = %299
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %76, %"class.WTF::String"* nonnull dereferenceable(8) %11) #10
  br label %330

330:                                              ; preds = %326, %329
  %331 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %332 = icmp eq %"class.WTF::StringImpl"* %331, null
  br i1 %332, label %346, label %333

333:                                              ; preds = %330
  %334 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %331, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %335 = load atomic i32, i32* %334 monotonic, align 4
  %336 = and i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %331, i64 0, i32 0
  %339 = load i32, i32* %338, align 4
  br i1 %337, label %340, label %342

340:                                              ; preds = %333
  %341 = add i32 %339, -1
  store i32 %341, i32* %338, align 4
  br label %342

342:                                              ; preds = %340, %333
  %343 = phi i32 [ %341, %340 ], [ %339, %333 ]
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %342
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %331) #10
  br label %346

346:                                              ; preds = %330, %342, %345
  %347 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %348 = icmp eq %"class.WTF::StringImpl"* %347, null
  br i1 %348, label %362, label %349

349:                                              ; preds = %346
  %350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %347, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %351 = load atomic i32, i32* %350 monotonic, align 4
  %352 = and i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %347, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  br i1 %353, label %356, label %358

356:                                              ; preds = %349
  %357 = add i32 %355, -1
  store i32 %357, i32* %354, align 4
  br label %358

358:                                              ; preds = %356, %349
  %359 = phi i32 [ %357, %356 ], [ %355, %349 ]
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %358
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %347) #10
  br label %362

362:                                              ; preds = %346, %358, %361
  br i1 %213, label %376, label %363

363:                                              ; preds = %362
  %364 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %365 = load atomic i32, i32* %364 monotonic, align 4
  %366 = and i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 0
  %369 = load i32, i32* %368, align 4
  br i1 %367, label %370, label %372

370:                                              ; preds = %363
  %371 = add i32 %369, -1
  store i32 %371, i32* %368, align 4
  br label %372

372:                                              ; preds = %370, %363
  %373 = phi i32 [ %371, %370 ], [ %369, %363 ]
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %375, label %376

375:                                              ; preds = %372
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %212) #10
  br label %376

376:                                              ; preds = %362, %372, %375
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91)
  store i32 3, i32* %7, align 4
  %377 = load i32, i32* %81, align 4
  %378 = load i32, i32* %82, align 8
  %379 = icmp eq i32 %377, %378
  br i1 %379, label %386, label %380, !prof !2

380:                                              ; preds = %376
  %381 = load i32*, i32** %83, align 8
  %382 = zext i32 %377 to i64
  %383 = getelementptr inbounds i32, i32* %381, i64 %382
  store i32 3, i32* %383, align 4
  %384 = load i32, i32* %81, align 4
  %385 = add i32 %384, 1
  store i32 %385, i32* %81, align 4
  br label %387

386:                                              ; preds = %376
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %84, i32* nonnull dereferenceable(4) %7) #10
  br label %387

387:                                              ; preds = %380, %386
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91)
  br label %1055

388:                                              ; preds = %195
  br i1 %199, label %389, label %397

389:                                              ; preds = %388, %394
  %390 = phi i16* [ %395, %394 ], [ %127, %388 ]
  %391 = load i16, i16* %390, align 2
  %392 = icmp ult i16 %391, 33
  br i1 %392, label %393, label %394

393:                                              ; preds = %389
  switch i16 %391, label %394 [
    i16 32, label %397
    i16 13, label %397
    i16 12, label %397
    i16 11, label %397
    i16 10, label %397
    i16 9, label %397
  ]

394:                                              ; preds = %393, %389
  %395 = getelementptr inbounds i16, i16* %390, i64 1
  store i16* %395, i16** %9, align 8
  %396 = icmp ult i16* %395, %60
  br i1 %396, label %389, label %397

397:                                              ; preds = %393, %393, %393, %393, %393, %393, %394, %388
  %398 = phi i16* [ %127, %388 ], [ %390, %393 ], [ %390, %393 ], [ %390, %393 ], [ %390, %393 ], [ %390, %393 ], [ %390, %393 ], [ %395, %394 ]
  br i1 %68, label %1055, label %399

399:                                              ; preds = %397
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #10
  %400 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %401 = icmp eq %"class.WTF::StringImpl"* %400, null
  br i1 %401, label %475, label %402

402:                                              ; preds = %399
  %403 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %400, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %404 = load atomic i32, i32* %403 monotonic, align 4
  %405 = and i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %400, i64 0, i32 0
  %408 = load i32, i32* %407, align 4
  br i1 %406, label %409, label %419

409:                                              ; preds = %402
  %410 = zext i32 %408 to i33
  %411 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %410, i33 1) #10
  %412 = extractvalue { i33, i1 } %411, 1
  %413 = extractvalue { i33, i1 } %411, 0
  %414 = icmp slt i33 %413, 0
  %415 = or i1 %412, %414
  br i1 %415, label %416, label %417, !prof !2

416:                                              ; preds = %409
  call void @llvm.trap() #10
  unreachable

417:                                              ; preds = %409
  %418 = trunc i33 %413 to i32
  store i32 %418, i32* %407, align 4
  br label %419

419:                                              ; preds = %417, %402
  %420 = phi i32 [ %418, %417 ], [ %408, %402 ]
  %421 = load atomic i32, i32* %403 monotonic, align 4
  %422 = and i32 %421, 2
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %424, label %434

424:                                              ; preds = %419
  %425 = zext i32 %420 to i33
  %426 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %425, i33 1) #10
  %427 = extractvalue { i33, i1 } %426, 1
  %428 = extractvalue { i33, i1 } %426, 0
  %429 = icmp slt i33 %428, 0
  %430 = or i1 %427, %429
  br i1 %430, label %431, label %432, !prof !2

431:                                              ; preds = %424
  call void @llvm.trap() #10
  unreachable

432:                                              ; preds = %424
  %433 = trunc i33 %428 to i32
  store i32 %433, i32* %407, align 4
  br label %434

434:                                              ; preds = %432, %419
  %435 = phi i32 [ %433, %432 ], [ %420, %419 ]
  %436 = load atomic i32, i32* %403 monotonic, align 4
  %437 = and i32 %436, 2
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %434
  %440 = add i32 %435, -1
  store i32 %440, i32* %407, align 4
  br label %441

441:                                              ; preds = %439, %434
  %442 = phi i32 [ %440, %439 ], [ %435, %434 ]
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %445

444:                                              ; preds = %441
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %400) #10
  br label %445

445:                                              ; preds = %441, %444
  %446 = load atomic i32, i32* %403 monotonic, align 4, !noalias !19
  %447 = and i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = load i32, i32* %407, align 4
  br i1 %448, label %450, label %460

450:                                              ; preds = %445
  %451 = zext i32 %449 to i33
  %452 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %451, i33 1) #10
  %453 = extractvalue { i33, i1 } %452, 1
  %454 = extractvalue { i33, i1 } %452, 0
  %455 = icmp slt i33 %454, 0
  %456 = or i1 %453, %455
  br i1 %456, label %457, label %458, !prof !2

457:                                              ; preds = %450
  call void @llvm.trap() #10, !noalias !19
  unreachable

458:                                              ; preds = %450
  %459 = trunc i33 %454 to i32
  store i32 %459, i32* %407, align 4, !noalias !19
  br label %460

460:                                              ; preds = %445, %458
  %461 = phi i32 [ %459, %458 ], [ %449, %445 ]
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %72, align 8, !alias.scope !19
  store %"class.WTF::StringImpl"* %400, %"class.WTF::StringImpl"** %73, align 8, !alias.scope !19
  %462 = load atomic i32, i32* %403 monotonic, align 4, !noalias !19
  %463 = and i32 %462, 2
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %465, label %476

465:                                              ; preds = %460
  %466 = zext i32 %461 to i33
  %467 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %466, i33 1) #10
  %468 = extractvalue { i33, i1 } %467, 1
  %469 = extractvalue { i33, i1 } %467, 0
  %470 = icmp slt i33 %469, 0
  %471 = or i1 %468, %470
  br i1 %471, label %472, label %473, !prof !2

472:                                              ; preds = %465
  call void @llvm.trap() #10, !noalias !19
  unreachable

473:                                              ; preds = %465
  %474 = trunc i33 %469 to i32
  store i32 %474, i32* %407, align 4, !noalias !19
  br label %476

475:                                              ; preds = %399
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %72, align 8, !alias.scope !19
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %73, align 8, !alias.scope !19
  store i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.14, i64 0, i64 0), i8** %74, align 8, !alias.scope !19
  br label %487

476:                                              ; preds = %473, %460
  %477 = phi i32 [ %474, %473 ], [ %461, %460 ]
  store i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.14, i64 0, i64 0), i8** %74, align 8, !alias.scope !19
  %478 = load atomic i32, i32* %403 monotonic, align 4, !noalias !19
  %479 = and i32 %478, 2
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %483

481:                                              ; preds = %476
  %482 = add i32 %477, -1
  store i32 %482, i32* %407, align 4, !noalias !19
  br label %483

483:                                              ; preds = %481, %476
  %484 = phi i32 [ %482, %481 ], [ %477, %476 ]
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %486, label %487

486:                                              ; preds = %483
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %400) #10, !noalias !19
  br label %487

487:                                              ; preds = %475, %483, %486
  %488 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %14)
  store %"class.WTF::StringImpl"* %488, %"class.WTF::StringImpl"** %75, align 8
  %489 = load i32, i32* %77, align 4
  %490 = load i32, i32* %78, align 8
  %491 = icmp eq i32 %489, %490
  br i1 %491, label %517, label %492, !prof !2

492:                                              ; preds = %487
  %493 = load %"class.WTF::String"*, %"class.WTF::String"** %79, align 8
  %494 = zext i32 %489 to i64
  %495 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %493, i64 %494, i32 0, i32 0
  store %"class.WTF::StringImpl"* %488, %"class.WTF::StringImpl"** %495, align 8
  %496 = icmp eq %"class.WTF::StringImpl"* %488, null
  br i1 %496, label %514, label %497

497:                                              ; preds = %492
  %498 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %488, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %499 = load atomic i32, i32* %498 monotonic, align 4
  %500 = and i32 %499, 2
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %502, label %514

502:                                              ; preds = %497
  %503 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %488, i64 0, i32 0
  %504 = load i32, i32* %503, align 4
  %505 = zext i32 %504 to i33
  %506 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %505, i33 1) #10
  %507 = extractvalue { i33, i1 } %506, 1
  %508 = extractvalue { i33, i1 } %506, 0
  %509 = icmp slt i33 %508, 0
  %510 = or i1 %507, %509
  br i1 %510, label %511, label %512, !prof !2

511:                                              ; preds = %502
  call void @llvm.trap() #10
  unreachable

512:                                              ; preds = %502
  %513 = trunc i33 %508 to i32
  store i32 %513, i32* %503, align 4
  br label %514

514:                                              ; preds = %512, %497, %492
  %515 = load i32, i32* %77, align 4
  %516 = add i32 %515, 1
  store i32 %516, i32* %77, align 4
  br label %518

517:                                              ; preds = %487
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %76, %"class.WTF::String"* nonnull dereferenceable(8) %13) #10
  br label %518

518:                                              ; preds = %514, %517
  %519 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %520 = icmp eq %"class.WTF::StringImpl"* %519, null
  br i1 %520, label %534, label %521

521:                                              ; preds = %518
  %522 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %519, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %523 = load atomic i32, i32* %522 monotonic, align 4
  %524 = and i32 %523, 2
  %525 = icmp eq i32 %524, 0
  %526 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %519, i64 0, i32 0
  %527 = load i32, i32* %526, align 4
  br i1 %525, label %528, label %530

528:                                              ; preds = %521
  %529 = add i32 %527, -1
  store i32 %529, i32* %526, align 4
  br label %530

530:                                              ; preds = %528, %521
  %531 = phi i32 [ %529, %528 ], [ %527, %521 ]
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %534

533:                                              ; preds = %530
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %519) #10
  br label %534

534:                                              ; preds = %518, %530, %533
  %535 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %536 = icmp eq %"class.WTF::StringImpl"* %535, null
  br i1 %536, label %550, label %537

537:                                              ; preds = %534
  %538 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %535, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %539 = load atomic i32, i32* %538 monotonic, align 4
  %540 = and i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %535, i64 0, i32 0
  %543 = load i32, i32* %542, align 4
  br i1 %541, label %544, label %546

544:                                              ; preds = %537
  %545 = add i32 %543, -1
  store i32 %545, i32* %542, align 4
  br label %546

546:                                              ; preds = %544, %537
  %547 = phi i32 [ %545, %544 ], [ %543, %537 ]
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %549, label %550

549:                                              ; preds = %546
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %535) #10
  br label %550

550:                                              ; preds = %534, %546, %549
  br i1 %401, label %564, label %551

551:                                              ; preds = %550
  %552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %400, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %553 = load atomic i32, i32* %552 monotonic, align 4
  %554 = and i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %400, i64 0, i32 0
  %557 = load i32, i32* %556, align 4
  br i1 %555, label %558, label %560

558:                                              ; preds = %551
  %559 = add i32 %557, -1
  store i32 %559, i32* %556, align 4
  br label %560

560:                                              ; preds = %558, %551
  %561 = phi i32 [ %559, %558 ], [ %557, %551 ]
  %562 = icmp eq i32 %561, 0
  br i1 %562, label %563, label %564

563:                                              ; preds = %560
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %400) #10
  br label %564

564:                                              ; preds = %550, %560, %563
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80)
  store i32 3, i32* %6, align 4
  %565 = load i32, i32* %81, align 4
  %566 = load i32, i32* %82, align 8
  %567 = icmp eq i32 %565, %566
  br i1 %567, label %574, label %568, !prof !2

568:                                              ; preds = %564
  %569 = load i32*, i32** %83, align 8
  %570 = zext i32 %565 to i64
  %571 = getelementptr inbounds i32, i32* %569, i64 %570
  store i32 3, i32* %571, align 4
  %572 = load i32, i32* %81, align 4
  %573 = add i32 %572, 1
  store i32 %573, i32* %81, align 4
  br label %575

574:                                              ; preds = %564
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %84, i32* nonnull dereferenceable(4) %6) #10
  br label %575

575:                                              ; preds = %568, %574
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80)
  br label %1055

576:                                              ; preds = %174
  %577 = getelementptr inbounds i16, i16* %172, i64 1
  %578 = ptrtoint i16* %577 to i64
  store i64 %578, i64* %65, align 8
  %579 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* bitcast ([6 x { i8*, i8 }]* @_ZZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmEE9kPrefixes to %"struct.std::__1::pair.360"*), i64 %147, i32 1
  %580 = load i8, i8* %579, align 8
  %581 = call zeroext i1 @_ZN5blink20SubresourceIntegrity11ParseDigestERPKDsS2_RN3WTF6StringE(i16** nonnull dereferenceable(8) %9, i16* %144, %"class.WTF::String"* nonnull dereferenceable(8) %10)
  %582 = load i16*, i16** %9, align 8
  %583 = icmp ult i16* %582, %60
  br i1 %581, label %772, label %584

584:                                              ; preds = %576
  br i1 %583, label %585, label %593

585:                                              ; preds = %584, %590
  %586 = phi i16* [ %591, %590 ], [ %582, %584 ]
  %587 = load i16, i16* %586, align 2
  %588 = icmp ult i16 %587, 33
  br i1 %588, label %589, label %590

589:                                              ; preds = %585
  switch i16 %587, label %590 [
    i16 32, label %593
    i16 13, label %593
    i16 12, label %593
    i16 11, label %593
    i16 10, label %593
    i16 9, label %593
  ]

590:                                              ; preds = %589, %585
  %591 = getelementptr inbounds i16, i16* %586, i64 1
  store i16* %591, i16** %9, align 8
  %592 = icmp ult i16* %591, %60
  br i1 %592, label %585, label %593

593:                                              ; preds = %589, %589, %589, %589, %589, %589, %590, %584
  %594 = phi i16* [ %582, %584 ], [ %586, %589 ], [ %586, %589 ], [ %586, %589 ], [ %586, %589 ], [ %586, %589 ], [ %586, %589 ], [ %591, %590 ]
  br i1 %68, label %1055, label %595

595:                                              ; preds = %593
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %93) #10
  %596 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %597 = icmp eq %"class.WTF::StringImpl"* %596, null
  br i1 %597, label %671, label %598

598:                                              ; preds = %595
  %599 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %600 = load atomic i32, i32* %599 monotonic, align 4
  %601 = and i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 0
  %604 = load i32, i32* %603, align 4
  br i1 %602, label %605, label %615

605:                                              ; preds = %598
  %606 = zext i32 %604 to i33
  %607 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %606, i33 1) #10
  %608 = extractvalue { i33, i1 } %607, 1
  %609 = extractvalue { i33, i1 } %607, 0
  %610 = icmp slt i33 %609, 0
  %611 = or i1 %608, %610
  br i1 %611, label %612, label %613, !prof !2

612:                                              ; preds = %605
  call void @llvm.trap() #10
  unreachable

613:                                              ; preds = %605
  %614 = trunc i33 %609 to i32
  store i32 %614, i32* %603, align 4
  br label %615

615:                                              ; preds = %613, %598
  %616 = phi i32 [ %614, %613 ], [ %604, %598 ]
  %617 = load atomic i32, i32* %599 monotonic, align 4
  %618 = and i32 %617, 2
  %619 = icmp eq i32 %618, 0
  br i1 %619, label %620, label %630

620:                                              ; preds = %615
  %621 = zext i32 %616 to i33
  %622 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %621, i33 1) #10
  %623 = extractvalue { i33, i1 } %622, 1
  %624 = extractvalue { i33, i1 } %622, 0
  %625 = icmp slt i33 %624, 0
  %626 = or i1 %623, %625
  br i1 %626, label %627, label %628, !prof !2

627:                                              ; preds = %620
  call void @llvm.trap() #10
  unreachable

628:                                              ; preds = %620
  %629 = trunc i33 %624 to i32
  store i32 %629, i32* %603, align 4
  br label %630

630:                                              ; preds = %628, %615
  %631 = phi i32 [ %629, %628 ], [ %616, %615 ]
  %632 = load atomic i32, i32* %599 monotonic, align 4
  %633 = and i32 %632, 2
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %635, label %637

635:                                              ; preds = %630
  %636 = add i32 %631, -1
  store i32 %636, i32* %603, align 4
  br label %637

637:                                              ; preds = %635, %630
  %638 = phi i32 [ %636, %635 ], [ %631, %630 ]
  %639 = icmp eq i32 %638, 0
  br i1 %639, label %640, label %641

640:                                              ; preds = %637
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %596) #10
  br label %641

641:                                              ; preds = %637, %640
  %642 = load atomic i32, i32* %599 monotonic, align 4, !noalias !22
  %643 = and i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = load i32, i32* %603, align 4
  br i1 %644, label %646, label %656

646:                                              ; preds = %641
  %647 = zext i32 %645 to i33
  %648 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %647, i33 1) #10
  %649 = extractvalue { i33, i1 } %648, 1
  %650 = extractvalue { i33, i1 } %648, 0
  %651 = icmp slt i33 %650, 0
  %652 = or i1 %649, %651
  br i1 %652, label %653, label %654, !prof !2

653:                                              ; preds = %646
  call void @llvm.trap() #10, !noalias !22
  unreachable

654:                                              ; preds = %646
  %655 = trunc i33 %650 to i32
  store i32 %655, i32* %603, align 4, !noalias !22
  br label %656

656:                                              ; preds = %641, %654
  %657 = phi i32 [ %655, %654 ], [ %645, %641 ]
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %94, align 8, !alias.scope !22
  store %"class.WTF::StringImpl"* %596, %"class.WTF::StringImpl"** %95, align 8, !alias.scope !22
  %658 = load atomic i32, i32* %599 monotonic, align 4, !noalias !22
  %659 = and i32 %658, 2
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %661, label %672

661:                                              ; preds = %656
  %662 = zext i32 %657 to i33
  %663 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %662, i33 1) #10
  %664 = extractvalue { i33, i1 } %663, 1
  %665 = extractvalue { i33, i1 } %663, 0
  %666 = icmp slt i33 %665, 0
  %667 = or i1 %664, %666
  br i1 %667, label %668, label %669, !prof !2

668:                                              ; preds = %661
  call void @llvm.trap() #10, !noalias !22
  unreachable

669:                                              ; preds = %661
  %670 = trunc i33 %665 to i32
  store i32 %670, i32* %603, align 4, !noalias !22
  br label %672

671:                                              ; preds = %595
  store i64 ptrtoint ([39 x i8]* @.str.12 to i64), i64* %94, align 8, !alias.scope !22
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %95, align 8, !alias.scope !22
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.15, i64 0, i64 0), i8** %96, align 8, !alias.scope !22
  br label %683

672:                                              ; preds = %669, %656
  %673 = phi i32 [ %670, %669 ], [ %657, %656 ]
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.15, i64 0, i64 0), i8** %96, align 8, !alias.scope !22
  %674 = load atomic i32, i32* %599 monotonic, align 4, !noalias !22
  %675 = and i32 %674, 2
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %677, label %679

677:                                              ; preds = %672
  %678 = add i32 %673, -1
  store i32 %678, i32* %603, align 4, !noalias !22
  br label %679

679:                                              ; preds = %677, %672
  %680 = phi i32 [ %678, %677 ], [ %673, %672 ]
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %682, label %683

682:                                              ; preds = %679
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %596) #10, !noalias !22
  br label %683

683:                                              ; preds = %671, %679, %682
  %684 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %16)
  store %"class.WTF::StringImpl"* %684, %"class.WTF::StringImpl"** %97, align 8
  %685 = load i32, i32* %77, align 4
  %686 = load i32, i32* %78, align 8
  %687 = icmp eq i32 %685, %686
  br i1 %687, label %713, label %688, !prof !2

688:                                              ; preds = %683
  %689 = load %"class.WTF::String"*, %"class.WTF::String"** %79, align 8
  %690 = zext i32 %685 to i64
  %691 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %689, i64 %690, i32 0, i32 0
  store %"class.WTF::StringImpl"* %684, %"class.WTF::StringImpl"** %691, align 8
  %692 = icmp eq %"class.WTF::StringImpl"* %684, null
  br i1 %692, label %710, label %693

693:                                              ; preds = %688
  %694 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %684, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %695 = load atomic i32, i32* %694 monotonic, align 4
  %696 = and i32 %695, 2
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %698, label %710

698:                                              ; preds = %693
  %699 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %684, i64 0, i32 0
  %700 = load i32, i32* %699, align 4
  %701 = zext i32 %700 to i33
  %702 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %701, i33 1) #10
  %703 = extractvalue { i33, i1 } %702, 1
  %704 = extractvalue { i33, i1 } %702, 0
  %705 = icmp slt i33 %704, 0
  %706 = or i1 %703, %705
  br i1 %706, label %707, label %708, !prof !2

707:                                              ; preds = %698
  call void @llvm.trap() #10
  unreachable

708:                                              ; preds = %698
  %709 = trunc i33 %704 to i32
  store i32 %709, i32* %699, align 4
  br label %710

710:                                              ; preds = %708, %693, %688
  %711 = load i32, i32* %77, align 4
  %712 = add i32 %711, 1
  store i32 %712, i32* %77, align 4
  br label %714

713:                                              ; preds = %683
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %76, %"class.WTF::String"* nonnull dereferenceable(8) %15) #10
  br label %714

714:                                              ; preds = %710, %713
  %715 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %716 = icmp eq %"class.WTF::StringImpl"* %715, null
  br i1 %716, label %730, label %717

717:                                              ; preds = %714
  %718 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %715, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %719 = load atomic i32, i32* %718 monotonic, align 4
  %720 = and i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %715, i64 0, i32 0
  %723 = load i32, i32* %722, align 4
  br i1 %721, label %724, label %726

724:                                              ; preds = %717
  %725 = add i32 %723, -1
  store i32 %725, i32* %722, align 4
  br label %726

726:                                              ; preds = %724, %717
  %727 = phi i32 [ %725, %724 ], [ %723, %717 ]
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %730

729:                                              ; preds = %726
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %715) #10
  br label %730

730:                                              ; preds = %714, %726, %729
  %731 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  %732 = icmp eq %"class.WTF::StringImpl"* %731, null
  br i1 %732, label %746, label %733

733:                                              ; preds = %730
  %734 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %731, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %735 = load atomic i32, i32* %734 monotonic, align 4
  %736 = and i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %731, i64 0, i32 0
  %739 = load i32, i32* %738, align 4
  br i1 %737, label %740, label %742

740:                                              ; preds = %733
  %741 = add i32 %739, -1
  store i32 %741, i32* %738, align 4
  br label %742

742:                                              ; preds = %740, %733
  %743 = phi i32 [ %741, %740 ], [ %739, %733 ]
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %746

745:                                              ; preds = %742
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %731) #10
  br label %746

746:                                              ; preds = %730, %742, %745
  br i1 %597, label %760, label %747

747:                                              ; preds = %746
  %748 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %749 = load atomic i32, i32* %748 monotonic, align 4
  %750 = and i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %596, i64 0, i32 0
  %753 = load i32, i32* %752, align 4
  br i1 %751, label %754, label %756

754:                                              ; preds = %747
  %755 = add i32 %753, -1
  store i32 %755, i32* %752, align 4
  br label %756

756:                                              ; preds = %754, %747
  %757 = phi i32 [ %755, %754 ], [ %753, %747 ]
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %760

759:                                              ; preds = %756
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %596) #10
  br label %760

760:                                              ; preds = %746, %756, %759
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %93) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %98)
  store i32 3, i32* %5, align 4
  %761 = load i32, i32* %81, align 4
  %762 = load i32, i32* %82, align 8
  %763 = icmp eq i32 %761, %762
  br i1 %763, label %770, label %764, !prof !2

764:                                              ; preds = %760
  %765 = load i32*, i32** %83, align 8
  %766 = zext i32 %761 to i64
  %767 = getelementptr inbounds i32, i32* %765, i64 %766
  store i32 3, i32* %767, align 4
  %768 = load i32, i32* %81, align 4
  %769 = add i32 %768, 1
  store i32 %769, i32* %81, align 4
  br label %771

770:                                              ; preds = %760
  call void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"* %84, i32* nonnull dereferenceable(4) %5) #10
  br label %771

771:                                              ; preds = %764, %770
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98)
  br label %1055

772:                                              ; preds = %576
  br i1 %583, label %773, label %997

773:                                              ; preds = %772
  %774 = load i16, i16* %582, align 2
  %775 = icmp eq i16 %774, 63
  br i1 %775, label %776, label %997

776:                                              ; preds = %773
  %777 = getelementptr inbounds i16, i16* %582, i64 1
  store i16* %777, i16** %9, align 8
  %778 = icmp ult i16* %777, %60
  %779 = ptrtoint i16* %777 to i64
  br i1 %778, label %782, label %780

780:                                              ; preds = %776
  %781 = getelementptr inbounds i16, i16* %582, i64 1
  br label %997

782:                                              ; preds = %776
  %783 = load i16*, i16** %9, align 8
  %784 = getelementptr inbounds i16, i16* %582, i64 1
  %785 = load i16, i16* %784, align 2
  %786 = add i16 %785, -33
  %787 = icmp ult i16 %786, 94
  br i1 %787, label %793, label %800

788:                                              ; preds = %793
  %789 = getelementptr inbounds i16, i16* %582, i64 %795
  %790 = load i16, i16* %789, align 2
  %791 = add i16 %790, -33
  %792 = icmp ult i16 %791, 94
  br i1 %792, label %793, label %798

793:                                              ; preds = %782, %788
  %794 = phi i64 [ %795, %788 ], [ 1, %782 ]
  %795 = add nuw nsw i64 %794, 1
  %796 = getelementptr inbounds i16, i16* %582, i64 %795
  %797 = icmp ult i16* %796, %60
  br i1 %797, label %788, label %804

798:                                              ; preds = %788
  %799 = ptrtoint i16* %796 to i64
  br label %800

800:                                              ; preds = %798, %782
  %801 = phi i16* [ %796, %798 ], [ %783, %782 ]
  %802 = phi i64 [ %799, %798 ], [ %779, %782 ]
  %803 = phi i64 [ %795, %798 ], [ 1, %782 ]
  store i16* %801, i16** %9, align 8
  br label %806

804:                                              ; preds = %793
  store i16* %796, i16** %9, align 8
  %805 = ptrtoint i16* %796 to i64
  br label %806

806:                                              ; preds = %804, %800
  %807 = phi i64 [ %802, %800 ], [ %805, %804 ]
  %808 = phi i64 [ %803, %800 ], [ %795, %804 ]
  %809 = getelementptr inbounds i16, i16* %582, i64 %808
  %810 = icmp ne i64 %808, 1
  %811 = and i1 %99, %810
  br i1 %811, label %812, label %997

812:                                              ; preds = %806
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %100) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %101) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #10
  %813 = sub i64 %807, %779
  %814 = lshr exact i64 %813, 1
  %815 = trunc i64 %814 to i32
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %19, i16* %777, i32 %815) #10
  %816 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %817 = icmp eq %"class.WTF::StringImpl"* %816, null
  br i1 %817, label %891, label %818

818:                                              ; preds = %812
  %819 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %820 = load atomic i32, i32* %819 monotonic, align 4
  %821 = and i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 0
  %824 = load i32, i32* %823, align 4
  br i1 %822, label %825, label %835

825:                                              ; preds = %818
  %826 = zext i32 %824 to i33
  %827 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %826, i33 1) #10
  %828 = extractvalue { i33, i1 } %827, 1
  %829 = extractvalue { i33, i1 } %827, 0
  %830 = icmp slt i33 %829, 0
  %831 = or i1 %828, %830
  br i1 %831, label %832, label %833, !prof !2

832:                                              ; preds = %825
  call void @llvm.trap() #10
  unreachable

833:                                              ; preds = %825
  %834 = trunc i33 %829 to i32
  store i32 %834, i32* %823, align 4
  br label %835

835:                                              ; preds = %833, %818
  %836 = phi i32 [ %834, %833 ], [ %824, %818 ]
  %837 = load atomic i32, i32* %819 monotonic, align 4
  %838 = and i32 %837, 2
  %839 = icmp eq i32 %838, 0
  br i1 %839, label %840, label %850

840:                                              ; preds = %835
  %841 = zext i32 %836 to i33
  %842 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %841, i33 1) #10
  %843 = extractvalue { i33, i1 } %842, 1
  %844 = extractvalue { i33, i1 } %842, 0
  %845 = icmp slt i33 %844, 0
  %846 = or i1 %843, %845
  br i1 %846, label %847, label %848, !prof !2

847:                                              ; preds = %840
  call void @llvm.trap() #10
  unreachable

848:                                              ; preds = %840
  %849 = trunc i33 %844 to i32
  store i32 %849, i32* %823, align 4
  br label %850

850:                                              ; preds = %848, %835
  %851 = phi i32 [ %849, %848 ], [ %836, %835 ]
  %852 = load atomic i32, i32* %819 monotonic, align 4
  %853 = and i32 %852, 2
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %855, label %857

855:                                              ; preds = %850
  %856 = add i32 %851, -1
  store i32 %856, i32* %823, align 4
  br label %857

857:                                              ; preds = %855, %850
  %858 = phi i32 [ %856, %855 ], [ %851, %850 ]
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %860, label %861

860:                                              ; preds = %857
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %816) #10
  br label %861

861:                                              ; preds = %857, %860
  %862 = load atomic i32, i32* %819 monotonic, align 4, !noalias !25
  %863 = and i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = load i32, i32* %823, align 4
  br i1 %864, label %866, label %876

866:                                              ; preds = %861
  %867 = zext i32 %865 to i33
  %868 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %867, i33 1) #10
  %869 = extractvalue { i33, i1 } %868, 1
  %870 = extractvalue { i33, i1 } %868, 0
  %871 = icmp slt i33 %870, 0
  %872 = or i1 %869, %871
  br i1 %872, label %873, label %874, !prof !2

873:                                              ; preds = %866
  call void @llvm.trap() #10, !noalias !25
  unreachable

874:                                              ; preds = %866
  %875 = trunc i33 %870 to i32
  store i32 %875, i32* %823, align 4, !noalias !25
  br label %876

876:                                              ; preds = %861, %874
  %877 = phi i32 [ %875, %874 ], [ %865, %861 ]
  store i64 ptrtoint ([52 x i8]* @.str.16 to i64), i64* %104, align 8, !alias.scope !25
  store %"class.WTF::StringImpl"* %816, %"class.WTF::StringImpl"** %105, align 8, !alias.scope !25
  %878 = load atomic i32, i32* %819 monotonic, align 4, !noalias !25
  %879 = and i32 %878, 2
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %881, label %892

881:                                              ; preds = %876
  %882 = zext i32 %877 to i33
  %883 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %882, i33 1) #10
  %884 = extractvalue { i33, i1 } %883, 1
  %885 = extractvalue { i33, i1 } %883, 0
  %886 = icmp slt i33 %885, 0
  %887 = or i1 %884, %886
  br i1 %887, label %888, label %889, !prof !2

888:                                              ; preds = %881
  call void @llvm.trap() #10, !noalias !25
  unreachable

889:                                              ; preds = %881
  %890 = trunc i33 %885 to i32
  store i32 %890, i32* %823, align 4, !noalias !25
  br label %892

891:                                              ; preds = %812
  store i64 ptrtoint ([52 x i8]* @.str.16 to i64), i64* %104, align 8, !alias.scope !25
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %105, align 8, !alias.scope !25
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i8** %106, align 8, !alias.scope !25
  br label %903

892:                                              ; preds = %889, %876
  %893 = phi i32 [ %890, %889 ], [ %877, %876 ]
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i8** %106, align 8, !alias.scope !25
  %894 = load atomic i32, i32* %819 monotonic, align 4, !noalias !25
  %895 = and i32 %894, 2
  %896 = icmp eq i32 %895, 0
  br i1 %896, label %897, label %899

897:                                              ; preds = %892
  %898 = add i32 %893, -1
  store i32 %898, i32* %823, align 4, !noalias !25
  br label %899

899:                                              ; preds = %897, %892
  %900 = phi i32 [ %898, %897 ], [ %893, %892 ]
  %901 = icmp eq i32 %900, 0
  br i1 %901, label %902, label %903

902:                                              ; preds = %899
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %816) #10, !noalias !25
  br label %903

903:                                              ; preds = %891, %899, %902
  %904 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %18)
  store %"class.WTF::StringImpl"* %904, %"class.WTF::StringImpl"** %107, align 8
  %905 = load i32, i32* %77, align 4
  %906 = load i32, i32* %78, align 8
  %907 = icmp eq i32 %905, %906
  br i1 %907, label %933, label %908, !prof !2

908:                                              ; preds = %903
  %909 = load %"class.WTF::String"*, %"class.WTF::String"** %79, align 8
  %910 = zext i32 %905 to i64
  %911 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %909, i64 %910, i32 0, i32 0
  store %"class.WTF::StringImpl"* %904, %"class.WTF::StringImpl"** %911, align 8
  %912 = icmp eq %"class.WTF::StringImpl"* %904, null
  br i1 %912, label %930, label %913

913:                                              ; preds = %908
  %914 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %904, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %915 = load atomic i32, i32* %914 monotonic, align 4
  %916 = and i32 %915, 2
  %917 = icmp eq i32 %916, 0
  br i1 %917, label %918, label %930

918:                                              ; preds = %913
  %919 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %904, i64 0, i32 0
  %920 = load i32, i32* %919, align 4
  %921 = zext i32 %920 to i33
  %922 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %921, i33 1) #10
  %923 = extractvalue { i33, i1 } %922, 1
  %924 = extractvalue { i33, i1 } %922, 0
  %925 = icmp slt i33 %924, 0
  %926 = or i1 %923, %925
  br i1 %926, label %927, label %928, !prof !2

927:                                              ; preds = %918
  call void @llvm.trap() #10
  unreachable

928:                                              ; preds = %918
  %929 = trunc i33 %924 to i32
  store i32 %929, i32* %919, align 4
  br label %930

930:                                              ; preds = %928, %913, %908
  %931 = load i32, i32* %77, align 4
  %932 = add i32 %931, 1
  store i32 %932, i32* %77, align 4
  br label %934

933:                                              ; preds = %903
  call void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"* %76, %"class.WTF::String"* nonnull dereferenceable(8) %17) #10
  br label %934

934:                                              ; preds = %930, %933
  %935 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %936 = icmp eq %"class.WTF::StringImpl"* %935, null
  br i1 %936, label %950, label %937

937:                                              ; preds = %934
  %938 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %935, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %939 = load atomic i32, i32* %938 monotonic, align 4
  %940 = and i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %935, i64 0, i32 0
  %943 = load i32, i32* %942, align 4
  br i1 %941, label %944, label %946

944:                                              ; preds = %937
  %945 = add i32 %943, -1
  store i32 %945, i32* %942, align 4
  br label %946

946:                                              ; preds = %944, %937
  %947 = phi i32 [ %945, %944 ], [ %943, %937 ]
  %948 = icmp eq i32 %947, 0
  br i1 %948, label %949, label %950

949:                                              ; preds = %946
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %935) #10
  br label %950

950:                                              ; preds = %934, %946, %949
  %951 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %952 = icmp eq %"class.WTF::StringImpl"* %951, null
  br i1 %952, label %966, label %953

953:                                              ; preds = %950
  %954 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %951, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %955 = load atomic i32, i32* %954 monotonic, align 4
  %956 = and i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %951, i64 0, i32 0
  %959 = load i32, i32* %958, align 4
  br i1 %957, label %960, label %962

960:                                              ; preds = %953
  %961 = add i32 %959, -1
  store i32 %961, i32* %958, align 4
  br label %962

962:                                              ; preds = %960, %953
  %963 = phi i32 [ %961, %960 ], [ %959, %953 ]
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %965, label %966

965:                                              ; preds = %962
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %951) #10
  br label %966

966:                                              ; preds = %950, %962, %965
  br i1 %817, label %980, label %967

967:                                              ; preds = %966
  %968 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %969 = load atomic i32, i32* %968 monotonic, align 4
  %970 = and i32 %969, 2
  %971 = icmp eq i32 %970, 0
  %972 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %816, i64 0, i32 0
  %973 = load i32, i32* %972, align 4
  br i1 %971, label %974, label %976

974:                                              ; preds = %967
  %975 = add i32 %973, -1
  store i32 %975, i32* %972, align 4
  br label %976

976:                                              ; preds = %974, %967
  %977 = phi i32 [ %975, %974 ], [ %973, %967 ]
  %978 = icmp eq i32 %977, 0
  br i1 %978, label %979, label %980

979:                                              ; preds = %976
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %816) #10
  br label %980

980:                                              ; preds = %966, %976, %979
  %981 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %982 = icmp eq %"class.WTF::StringImpl"* %981, null
  br i1 %982, label %996, label %983

983:                                              ; preds = %980
  %984 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %981, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %985 = load atomic i32, i32* %984 monotonic, align 4
  %986 = and i32 %985, 2
  %987 = icmp eq i32 %986, 0
  %988 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %981, i64 0, i32 0
  %989 = load i32, i32* %988, align 4
  br i1 %987, label %990, label %992

990:                                              ; preds = %983
  %991 = add i32 %989, -1
  store i32 %991, i32* %988, align 4
  br label %992

992:                                              ; preds = %990, %983
  %993 = phi i32 [ %991, %990 ], [ %989, %983 ]
  %994 = icmp eq i32 %993, 0
  br i1 %994, label %995, label %996

995:                                              ; preds = %992
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %981) #10
  br label %996

996:                                              ; preds = %980, %992, %995
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %101) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #10
  br label %997

997:                                              ; preds = %780, %772, %773, %806, %996
  %998 = phi i16* [ %582, %772 ], [ %582, %773 ], [ %809, %806 ], [ %809, %996 ], [ %781, %780 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %108) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 16, i1 false)
  %999 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %1000 = icmp eq %"class.WTF::StringImpl"* %999, null
  br i1 %1000, label %1018, label %1001

1001:                                             ; preds = %997
  %1002 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %999, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1003 = load atomic i32, i32* %1002 monotonic, align 4
  %1004 = and i32 %1003, 2
  %1005 = icmp eq i32 %1004, 0
  br i1 %1005, label %1006, label %1018

1006:                                             ; preds = %1001
  %1007 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %999, i64 0, i32 0
  %1008 = load i32, i32* %1007, align 4
  %1009 = zext i32 %1008 to i33
  %1010 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1009, i33 1) #10
  %1011 = extractvalue { i33, i1 } %1010, 1
  %1012 = extractvalue { i33, i1 } %1010, 0
  %1013 = icmp slt i33 %1012, 0
  %1014 = or i1 %1011, %1013
  br i1 %1014, label %1015, label %1016, !prof !2

1015:                                             ; preds = %1006
  call void @llvm.trap() #10
  unreachable

1016:                                             ; preds = %1006
  %1017 = trunc i33 %1012 to i32
  store i32 %1017, i32* %1007, align 4
  br label %1018

1018:                                             ; preds = %997, %1001, %1016
  call void @_ZN5blink17IntegrityMetadataC1EN3WTF6StringENS_18IntegrityAlgorithmE(%"class.blink::IntegrityMetadata"* nonnull %20, %"class.WTF::StringImpl"* %999, i8 zeroext %580) #10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %110) #10
  %1019 = call { %"class.WTF::StringImpl"*, i8 } @_ZNK5blink17IntegrityMetadata6ToPairEv(%"class.blink::IntegrityMetadata"* nonnull %20) #10
  %1020 = extractvalue { %"class.WTF::StringImpl"*, i8 } %1019, 0
  store %"class.WTF::StringImpl"* %1020, %"class.WTF::StringImpl"** %111, align 8
  %1021 = extractvalue { %"class.WTF::StringImpl"*, i8 } %1019, 1
  store i8 %1021, i8* %112, align 8
  %1022 = call { %"struct.std::__1::pair"*, i8 } @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SB_SC_EERKS6_S6_EENS_18HashTableAddResultISD_S6_EEOT0_OT1_(%"class.WTF::HashTable"* %113, %"struct.std::__1::pair"* nonnull dereferenceable(16) %22, %"struct.std::__1::pair"* nonnull dereferenceable(16) %22) #10
  %1023 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %1024 = icmp eq %"class.WTF::StringImpl"* %1023, null
  br i1 %1024, label %1038, label %1025

1025:                                             ; preds = %1018
  %1026 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1023, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1027 = load atomic i32, i32* %1026 monotonic, align 4
  %1028 = and i32 %1027, 2
  %1029 = icmp eq i32 %1028, 0
  %1030 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1023, i64 0, i32 0
  %1031 = load i32, i32* %1030, align 4
  br i1 %1029, label %1032, label %1034

1032:                                             ; preds = %1025
  %1033 = add i32 %1031, -1
  store i32 %1033, i32* %1030, align 4
  br label %1034

1034:                                             ; preds = %1032, %1025
  %1035 = phi i32 [ %1033, %1032 ], [ %1031, %1025 ]
  %1036 = icmp eq i32 %1035, 0
  br i1 %1036, label %1037, label %1038

1037:                                             ; preds = %1034
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1023) #10
  br label %1038

1038:                                             ; preds = %1018, %1034, %1037
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %110) #10
  %1039 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %1040 = icmp eq %"class.WTF::StringImpl"* %1039, null
  br i1 %1040, label %1054, label %1041

1041:                                             ; preds = %1038
  %1042 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1039, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1043 = load atomic i32, i32* %1042 monotonic, align 4
  %1044 = and i32 %1043, 2
  %1045 = icmp eq i32 %1044, 0
  %1046 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1039, i64 0, i32 0
  %1047 = load i32, i32* %1046, align 4
  br i1 %1045, label %1048, label %1050

1048:                                             ; preds = %1041
  %1049 = add i32 %1047, -1
  store i32 %1049, i32* %1046, align 4
  br label %1050

1050:                                             ; preds = %1048, %1041
  %1051 = phi i32 [ %1049, %1048 ], [ %1047, %1041 ]
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %1053, label %1054

1053:                                             ; preds = %1050
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1039) #10
  br label %1054

1054:                                             ; preds = %1038, %1050, %1053
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %108) #10
  br label %1055

1055:                                             ; preds = %771, %593, %575, %397, %387, %209, %1054
  %1056 = phi i16* [ %998, %1054 ], [ %210, %209 ], [ %210, %387 ], [ %398, %397 ], [ %398, %575 ], [ %594, %593 ], [ %594, %771 ]
  %1057 = phi i8 [ %117, %1054 ], [ %117, %209 ], [ %117, %387 ], [ 1, %397 ], [ 1, %575 ], [ 1, %593 ], [ 1, %771 ]
  %1058 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %1059 = icmp eq %"class.WTF::StringImpl"* %1058, null
  br i1 %1059, label %1073, label %1060

1060:                                             ; preds = %1055
  %1061 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1058, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1062 = load atomic i32, i32* %1061 monotonic, align 4
  %1063 = and i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1058, i64 0, i32 0
  %1066 = load i32, i32* %1065, align 4
  br i1 %1064, label %1067, label %1069

1067:                                             ; preds = %1060
  %1068 = add i32 %1066, -1
  store i32 %1068, i32* %1065, align 4
  br label %1069

1069:                                             ; preds = %1067, %1060
  %1070 = phi i32 [ %1068, %1067 ], [ %1066, %1060 ]
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1072, label %1073

1072:                                             ; preds = %1069
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1058) #10
  br label %1073

1073:                                             ; preds = %1055, %1069, %1072
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #10
  %1074 = icmp ult i16* %1056, %60
  br i1 %1074, label %115, label %1075

1075:                                             ; preds = %1073
  %1076 = load i16*, i16** %24, align 8
  br label %1077

1077:                                             ; preds = %1075, %55
  %1078 = phi i16* [ %57, %55 ], [ %1076, %1075 ]
  %1079 = phi i8 [ 0, %55 ], [ %1057, %1075 ]
  %1080 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 2
  %1081 = load i32, i32* %1080, align 4
  %1082 = icmp eq i32 %1081, 0
  %1083 = and i8 %1079, 1
  %1084 = icmp ne i8 %1083, 0
  %1085 = and i1 %1084, %1082
  %1086 = zext i1 %1085 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #10
  %1087 = icmp eq i16* %1078, null
  %1088 = bitcast i16* %1078 to i8*
  br i1 %1087, label %1094, label %1089, !prof !15

1089:                                             ; preds = %1077
  %1090 = load i32, i32* %25, align 4
  %1091 = icmp eq i32 %1090, 0
  br i1 %1091, label %1093, label %1092, !prof !2

1092:                                             ; preds = %1089
  store i32 0, i32* %25, align 4
  br label %1093

1093:                                             ; preds = %1092, %1089
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %1088) #10
  store i16* null, i16** %24, align 8
  br label %1094

1094:                                             ; preds = %1077, %1093
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  ret i32 %1086
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN5blink20SubresourceIntegrity17FindBestAlgorithmERKN3WTF7HashSetINSt3__14pairINS1_6StringENS_18IntegrityAlgorithmEEENS1_8PairHashIS5_S6_EENS1_10HashTraitsIS7_EENS1_18PartitionAllocatorEEE(%"class.WTF::HashSet"* nocapture readonly dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 0
  %6 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %0, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %6, i64 %9
  br i1 %4, label %27, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %8, 0
  br i1 %12, label %27, label %13

13:                                               ; preds = %11, %24
  %14 = phi %"struct.std::__1::pair"* [ %25, %24 ], [ %6, %11 ]
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  %18 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 0, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  %21 = and i1 %17, %20
  %22 = icmp eq %"class.WTF::StringImpl"* %16, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %23 = or i1 %22, %21
  br i1 %23, label %24, label %27

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 1
  %26 = icmp eq %"struct.std::__1::pair"* %25, %10
  br i1 %26, label %27, label %13

27:                                               ; preds = %13, %24, %1, %11
  %28 = phi %"struct.std::__1::pair"* [ %10, %1 ], [ %6, %11 ], [ %10, %24 ], [ %14, %13 ]
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %28, i64 0, i32 1
  %30 = load i8, i8* %29, align 8
  %31 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %28, i64 1
  %32 = icmp eq %"struct.std::__1::pair"* %31, %10
  br i1 %32, label %74, label %33

33:                                               ; preds = %27, %44
  %34 = phi %"struct.std::__1::pair"* [ %45, %44 ], [ %31, %27 ]
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  %41 = and i1 %37, %40
  %42 = icmp eq %"class.WTF::StringImpl"* %36, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %43 = or i1 %42, %41
  br i1 %43, label %44, label %47

44:                                               ; preds = %33
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 1
  %46 = icmp eq %"struct.std::__1::pair"* %45, %10
  br i1 %46, label %74, label %33

47:                                               ; preds = %33
  %48 = icmp eq %"struct.std::__1::pair"* %34, %10
  br i1 %48, label %74, label %49

49:                                               ; preds = %47, %72
  %50 = phi %"struct.std::__1::pair"* [ %59, %72 ], [ %34, %47 ]
  %51 = phi i8 [ %55, %72 ], [ %30, %47 ]
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 0, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp ult i8 %53, %51
  %55 = select i1 %54, i8 %51, i8 %53
  %56 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %50, i64 1
  %57 = icmp eq %"struct.std::__1::pair"* %56, %10
  br i1 %57, label %74, label %58

58:                                               ; preds = %49, %69
  %59 = phi %"struct.std::__1::pair"* [ %70, %69 ], [ %56, %49 ]
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %59, i64 0, i32 1
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  %66 = and i1 %62, %65
  %67 = icmp eq %"class.WTF::StringImpl"* %61, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %68 = or i1 %67, %66
  br i1 %68, label %69, label %72

69:                                               ; preds = %58
  %70 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %59, i64 1
  %71 = icmp eq %"struct.std::__1::pair"* %70, %10
  br i1 %71, label %74, label %58

72:                                               ; preds = %58
  %73 = icmp eq %"struct.std::__1::pair"* %59, %10
  br i1 %73, label %74, label %49

74:                                               ; preds = %44, %49, %72, %69, %27, %47
  %75 = phi i8 [ %30, %47 ], [ %30, %27 ], [ %55, %69 ], [ %55, %72 ], [ %55, %49 ], [ %30, %44 ]
  ret i8 %75
}

declare void @_ZN5blink17IntegrityMetadataC1ENSt3__14pairIN3WTF6StringENS_18IntegrityAlgorithmEEE(%"class.blink::IntegrityMetadata"*, %"class.WTF::StringImpl"*, i8) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20SubresourceIntegrity31CheckSubresourceIntegrityDigestERKNS_17IntegrityMetadataEPKcm(%"class.blink::IntegrityMetadata"* nocapture readonly dereferenceable(16), i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Vector.353", align 8
  %5 = alloca %"class.WTF::Vector.324", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::Vector.353", align 8
  %8 = getelementptr inbounds %"class.blink::IntegrityMetadata", %"class.blink::IntegrityMetadata"* %0, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 1
  %11 = select i1 %10, i32 2, i32 1
  %12 = icmp eq i8 %9, 2
  %13 = select i1 %12, i32 3, i32 %11
  %14 = bitcast %"class.WTF::Vector.353"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %14) #10
  %15 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 64, i1 false)
  %16 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0, i32 1, i64 0
  %17 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %16, i8** %17, align 8
  %18 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %18, align 8
  %19 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %19, align 4
  %20 = call zeroext i1 @_ZN5blink13ComputeDigestENS_13HashAlgorithmEPKcmRN3WTF6VectorIhLj64ENS3_18PartitionAllocatorEEE(i32 %13, i8* %1, i64 %2, %"class.WTF::Vector.353"* nonnull dereferenceable(80) %4) #10
  br i1 %20, label %21, label %112

21:                                               ; preds = %3
  %22 = bitcast %"class.WTF::Vector.324"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.324", %"class.WTF::Vector.324"* %5, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.WTF::Vector.324", %"class.WTF::Vector.324"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 16, i1 false) #10
  %25 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  %26 = getelementptr inbounds %"class.blink::IntegrityMetadata", %"class.blink::IntegrityMetadata"* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #10
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !2

43:                                               ; preds = %34
  call void @llvm.trap() #10
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %46

46:                                               ; preds = %21, %29, %44
  %47 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %27, %"class.WTF::StringImpl"** %47, align 8
  %48 = call zeroext i1 @_ZN3WTF12Base64DecodeERKNS_6StringERNS_6VectorIcLj0ENS_18PartitionAllocatorEEEPFbDsENS_18Base64DecodePolicyE(%"class.WTF::String"* nonnull dereferenceable(8) %6, %"class.WTF::Vector.324"* nonnull dereferenceable(16) %5, i1 (i16)* null, i32 0) #10
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #10
  br label %64

64:                                               ; preds = %46, %60, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #10
  %65 = bitcast %"class.WTF::Vector.353"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %65) #10
  %66 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 -86, i64 64, i1 false)
  %67 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0, i32 1, i64 0
  %68 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0, i32 0, i32 0
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %69, align 8
  %70 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %70, align 4
  %71 = load i8*, i8** %23, align 8
  %72 = load i32, i32* %24, align 4
  call void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector.353"* nonnull %7, i8* %71, i32 %72)
  %73 = load i32, i32* %19, align 4
  %74 = load i32, i32* %70, align 4
  %75 = icmp eq i32 %73, %74
  br i1 %75, label %76, label %92

76:                                               ; preds = %64
  %77 = icmp eq i32 %73, 0
  br i1 %77, label %97, label %81

78:                                               ; preds = %81
  %79 = load i32, i32* %19, align 4
  %80 = icmp ult i32 %88, %79
  br i1 %80, label %81, label %89

81:                                               ; preds = %76, %78
  %82 = phi i32 [ %88, %78 ], [ 0, %76 ]
  %83 = call dereferenceable(1) i8* @_ZNK3WTF6VectorIhLj64ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.353"* nonnull %4, i32 %82) #10
  %84 = load i8, i8* %83, align 1
  %85 = call dereferenceable(1) i8* @_ZNK3WTF6VectorIhLj64ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.353"* nonnull %7, i32 %82) #10
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %84, %86
  %88 = add nuw i32 %82, 1
  br i1 %87, label %78, label %89

89:                                               ; preds = %81, %78
  %90 = phi i1 [ false, %81 ], [ true, %78 ]
  %91 = load i32, i32* %70, align 4
  br label %92

92:                                               ; preds = %89, %64
  %93 = phi i32 [ %74, %64 ], [ %91, %89 ]
  %94 = phi i1 [ false, %64 ], [ %90, %89 ]
  %95 = icmp eq i32 %93, 0
  br i1 %95, label %97, label %96, !prof !2

96:                                               ; preds = %92
  store i32 0, i32* %70, align 4
  br label %97

97:                                               ; preds = %76, %96, %92
  %98 = phi i1 [ %94, %96 ], [ %94, %92 ], [ true, %76 ]
  %99 = load i8*, i8** %68, align 8
  %100 = icmp eq i8* %67, %99
  br i1 %100, label %103, label %101, !prof !15

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %7, i64 0, i32 0
  call void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"* nonnull %102, i8* %99) #10
  br label %103

103:                                              ; preds = %97, %101
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %65) #10
  %104 = load i8*, i8** %23, align 8
  %105 = icmp eq i8* %104, null
  br i1 %105, label %111, label %106, !prof !15

106:                                              ; preds = %103
  %107 = load i32, i32* %24, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %110, label %109, !prof !2

109:                                              ; preds = %106
  store i32 0, i32* %24, align 4
  br label %110

110:                                              ; preds = %109, %106
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %104) #10
  store i8* null, i8** %23, align 8
  br label %111

111:                                              ; preds = %103, %110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #10
  br label %112

112:                                              ; preds = %3, %111
  %113 = phi i1 [ %98, %111 ], [ false, %3 ]
  %114 = load i32, i32* %19, align 4
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %117, label %116, !prof !2

116:                                              ; preds = %112
  store i32 0, i32* %19, align 4
  br label %117

117:                                              ; preds = %116, %112
  %118 = load i8*, i8** %17, align 8
  %119 = icmp eq i8* %16, %118
  br i1 %119, label %122, label %120, !prof !15

120:                                              ; preds = %117
  %121 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %4, i64 0, i32 0
  call void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"* nonnull %121, i8* %118) #10
  br label %122

122:                                              ; preds = %117, %120
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %14) #10
  ret i1 %113
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare zeroext i1 @_ZN5blink13ComputeDigestENS_13HashAlgorithmEPKcmRN3WTF6VectorIhLj64ENS3_18PartitionAllocatorEEE(i32, i8*, i64, %"class.WTF::Vector.353"* dereferenceable(80)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_12StringAppendIPKcNS_6StringEEES3_S4_EENS1_INS1_IT_T0_EET1_EERKS8_S9_(%"class.WTF::StringAppend.359"* noalias sret, %"class.WTF::StringAppend"* dereferenceable(24), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::StringAppend", align 8
  %5 = bitcast %"class.WTF::StringAppend"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.WTF::StringAppend"* %4 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %3, %12, %27
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %4, i64 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 1
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast i8** %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %53, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %54

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #10
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %41
  tail call void @llvm.trap() #10
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %54

53:                                               ; preds = %29
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.359"* %0, %"class.WTF::StringAppend"* nonnull byval(%"class.WTF::StringAppend") align 8 %4, %"class.WTF::StringImpl"* null)
  br label %66

54:                                               ; preds = %36, %51
  tail call void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.359"* %0, %"class.WTF::StringAppend"* nonnull byval(%"class.WTF::StringAppend") align 8 %4, %"class.WTF::StringImpl"* nonnull %2)
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %54
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %54
  %63 = phi i32 [ %61, %60 ], [ %59, %54 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %66

66:                                               ; preds = %53, %62, %65
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF12Base64EncodeEN4base4spanIKhLm18446744073709551615EEENS_18Base64EncodePolicyE(i64, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EcvS3_Ev(%"class.WTF::StringAppend.358"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = alloca i8*, align 8
  %6 = alloca i16*, align 8
  %7 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 16, i1 false) #10
  %9 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = bitcast %"class.WTF::StringTypeAdapter.391"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false) #10
  %15 = load i8*, i8** %14, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i8* %15) #10
  %16 = bitcast %"class.WTF::StringTypeAdapter.391"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false) #10
  %18 = load i8*, i8** %17, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %2, i8* %18) #10
  %19 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %23 = select i1 %21, %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"* %20
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %23, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  br i1 %27, label %28, label %29

28:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  br label %72

29:                                               ; preds = %1
  %30 = icmp eq %"class.WTF::StringImpl"* %11, null
  %31 = select i1 %30, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %11
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  br i1 %35, label %72, label %36

36:                                               ; preds = %29
  %37 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %38 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.358"* %0)
  %39 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %38, i8** nonnull dereferenceable(8) %5) #10
  %40 = load i8*, i8** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.358"* %0, i8* %40)
  %41 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %41, label %108, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %59

49:                                               ; preds = %42
  %50 = zext i32 %48 to i33
  %51 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %50, i33 1) #10
  %52 = extractvalue { i33, i1 } %51, 1
  %53 = extractvalue { i33, i1 } %51, 0
  %54 = icmp slt i33 %53, 0
  %55 = or i1 %52, %54
  br i1 %55, label %56, label %57, !prof !2

56:                                               ; preds = %49
  call void @llvm.trap() #10
  unreachable

57:                                               ; preds = %49
  %58 = trunc i33 %53 to i32
  store i32 %58, i32* %47, align 4
  br label %59

59:                                               ; preds = %42, %57
  %60 = phi i32 [ %58, %57 ], [ %48, %42 ]
  %61 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  %62 = load atomic i32, i32* %43 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %59
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %67 = add i32 %60, -1
  store i32 %67, i32* %66, align 4
  br label %68

68:                                               ; preds = %65, %59
  %69 = phi i32 [ %67, %65 ], [ %60, %59 ]
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %108

71:                                               ; preds = %68
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #10
  br label %108

72:                                               ; preds = %29, %28
  %73 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #10
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %6, align 8
  %74 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.358"* %0)
  %75 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %74, i16** nonnull dereferenceable(8) %6) #10
  %76 = load i16*, i16** %6, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.358"* %0, i16* %76)
  %77 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %77, label %108, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %95

85:                                               ; preds = %78
  %86 = zext i32 %84 to i33
  %87 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #10
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !2

92:                                               ; preds = %85
  call void @llvm.trap() #10
  unreachable

93:                                               ; preds = %85
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %83, align 4
  br label %95

95:                                               ; preds = %78, %93
  %96 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %97 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %98 = load atomic i32, i32* %79 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %95
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %103 = add i32 %96, -1
  store i32 %103, i32* %102, align 4
  br label %104

104:                                              ; preds = %101, %95
  %105 = phi i32 [ %103, %101 ], [ %96, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #10
  br label %108

108:                                              ; preds = %107, %104, %72, %71, %68, %36
  %109 = phi i8* [ %37, %36 ], [ %37, %68 ], [ %37, %71 ], [ %73, %72 ], [ %73, %104 ], [ %73, %107 ]
  %110 = phi i64 [ 0, %36 ], [ %61, %68 ], [ %61, %71 ], [ 0, %72 ], [ %97, %104 ], [ %97, %107 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #10
  %111 = inttoptr i64 %110 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %111
}

declare zeroext i1 @_ZN3WTF12Base64DecodeERKNS_6StringERNS_6VectorIcLj0ENS_18PartitionAllocatorEEEPFbDsENS_18Base64DecodePolicyE(%"class.WTF::String"* dereferenceable(8), %"class.WTF::Vector.324"* dereferenceable(16), i1 (i16)*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector.353"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %28

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %22, label %21

21:                                               ; preds = %17, %13
  tail call void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.353"* %0, i32 %9) #10
  br label %28

22:                                               ; preds = %17
  %23 = ptrtoint i8* %1 to i64
  %24 = ptrtoint i8* %15 to i64
  %25 = sub i64 %23, %24
  tail call void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.353"* %0, i32 %9) #10
  %26 = load i8*, i8** %14, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %25
  br label %28

28:                                               ; preds = %22, %21, %3
  %29 = phi i8* [ %1, %3 ], [ %1, %21 ], [ %27, %22 ]
  %30 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #10
  %31 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %31, align 8
  %32 = load i32, i32* %7, align 4
  %33 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33)
  %34 = icmp ult i32 %9, %32
  br i1 %34, label %36, label %35

35:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33)
  store i8* null, i8** %31, align 8
  br label %45

36:                                               ; preds = %28
  %37 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  %38 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %32) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i64 0, i64 0), i8* %37, i8* %38) #10
  %39 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33)
  store i8* %40, i8** %31, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #10
  %44 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #10
  br label %45

45:                                               ; preds = %35, %36, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #10
  %46 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i32, i32* %7, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = icmp ne i8* %50, null
  %52 = icmp ne i8* %29, null
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %56, !prof !15

54:                                               ; preds = %45
  %55 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %50, i8* nonnull align 1 %29, i64 %55, i1 false) #10
  br label %56

56:                                               ; preds = %45, %54
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmE(i16** nocapture dereferenceable(8), i16* readnone, i32, i8* nocapture dereferenceable(1)) local_unnamed_addr #4 align 2 {
  %5 = icmp eq i32 %2, 1
  %6 = select i1 %5, i64 6, i64 5
  %7 = bitcast i16** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = inttoptr i64 %8 to i16*
  %10 = icmp ult i16* %9, %1
  br label %11

11:                                               ; preds = %42, %4
  %12 = phi i64 [ 0, %4 ], [ %43, %42 ]
  %13 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* bitcast ([6 x { i8*, i8 }]* @_ZZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmEE9kPrefixes to %"struct.std::__1::pair.360"*), i64 %12, i32 0
  %14 = load i8*, i8** %13, align 16
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %10, label %17, label %33

17:                                               ; preds = %11, %27
  %18 = phi i1 [ %32, %27 ], [ %16, %11 ]
  %19 = phi i8 [ %31, %27 ], [ %15, %11 ]
  %20 = phi i16* [ %28, %27 ], [ %9, %11 ]
  %21 = phi i8* [ %29, %27 ], [ %14, %11 ]
  br i1 %18, label %36, label %22

22:                                               ; preds = %17
  %23 = load i16, i16* %20, align 2
  %24 = zext i16 %23 to i32
  %25 = sext i8 %19 to i32
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %42

27:                                               ; preds = %22
  %28 = getelementptr inbounds i16, i16* %20, i64 1
  %29 = getelementptr inbounds i8, i8* %21, i64 1
  %30 = icmp ult i16* %28, %1
  %31 = load i8, i8* %29, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %30, label %17, label %33

33:                                               ; preds = %27, %11
  %34 = phi i16* [ %9, %11 ], [ %28, %27 ]
  %35 = phi i1 [ %16, %11 ], [ %32, %27 ]
  br i1 %35, label %36, label %42

36:                                               ; preds = %17, %33
  %37 = phi i16* [ %34, %33 ], [ %20, %17 ]
  %38 = icmp ult i16* %37, %1
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = load i16, i16* %37, align 2
  %41 = icmp eq i16 %40, 45
  br i1 %41, label %45, label %42

42:                                               ; preds = %22, %39, %36, %33
  %43 = add nuw nsw i64 %12, 1
  %44 = icmp eq i64 %43, %6
  br i1 %44, label %50, label %11

45:                                               ; preds = %39
  %46 = getelementptr inbounds i16, i16* %37, i64 1
  %47 = ptrtoint i16* %46 to i64
  store i64 %47, i64* %7, align 8
  %48 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* bitcast ([6 x { i8*, i8 }]* @_ZZN5blink20SubresourceIntegrity23ParseAttributeAlgorithmERPKDsS2_NS0_17IntegrityFeaturesERNS_18IntegrityAlgorithmEE9kPrefixes to %"struct.std::__1::pair.360"*), i64 %12, i32 1
  %49 = load i8, i8* %48, align 8
  store i8 %49, i8* %3, align 1
  br label %70

50:                                               ; preds = %42
  br i1 %10, label %51, label %65

51:                                               ; preds = %50
  %52 = load i16, i16* %9, align 2
  %53 = icmp eq i16 %52, 45
  br i1 %53, label %65, label %57

54:                                               ; preds = %57
  %55 = load i16, i16* %59, align 2
  %56 = icmp eq i16 %55, 45
  br i1 %56, label %63, label %57

57:                                               ; preds = %51, %54
  %58 = phi i16* [ %59, %54 ], [ %9, %51 ]
  %59 = getelementptr inbounds i16, i16* %58, i64 1
  %60 = icmp ult i16* %59, %1
  br i1 %60, label %54, label %61

61:                                               ; preds = %57
  %62 = ptrtoint i16* %59 to i64
  br label %65

63:                                               ; preds = %54
  %64 = ptrtoint i16* %59 to i64
  br label %65

65:                                               ; preds = %63, %61, %51, %50
  %66 = phi i64 [ %8, %50 ], [ %62, %61 ], [ %8, %51 ], [ %64, %63 ]
  %67 = inttoptr i64 %66 to i16*
  %68 = icmp ult i16* %67, %1
  %69 = select i1 %68, i32 2, i32 1
  br label %70

70:                                               ; preds = %45, %65
  %71 = phi i32 [ %69, %65 ], [ 0, %45 ]
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20SubresourceIntegrity20ParseAlgorithmPrefixERPKDsS2_PKNSt3__14pairIPKcNS_18IntegrityAlgorithmEEEmRS8_(i16** nocapture dereferenceable(8), i16* readnone, %"struct.std::__1::pair.360"* nocapture readonly, i64, i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %6 = icmp eq i64 %3, 0
  %7 = bitcast i16** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = inttoptr i64 %8 to i16*
  br i1 %6, label %53, label %10

10:                                               ; preds = %5
  %11 = icmp ult i16* %9, %1
  br label %12

12:                                               ; preds = %43, %10
  %13 = phi i64 [ 0, %10 ], [ %44, %43 ]
  %14 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* %2, i64 %13, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %11, label %18, label %34

18:                                               ; preds = %12, %28
  %19 = phi i1 [ %33, %28 ], [ %17, %12 ]
  %20 = phi i8 [ %32, %28 ], [ %16, %12 ]
  %21 = phi i16* [ %29, %28 ], [ %9, %12 ]
  %22 = phi i8* [ %30, %28 ], [ %15, %12 ]
  br i1 %19, label %37, label %23

23:                                               ; preds = %18
  %24 = load i16, i16* %21, align 2
  %25 = zext i16 %24 to i32
  %26 = sext i8 %20 to i32
  %27 = icmp eq i32 %25, %26
  br i1 %27, label %28, label %43

28:                                               ; preds = %23
  %29 = getelementptr inbounds i16, i16* %21, i64 1
  %30 = getelementptr inbounds i8, i8* %22, i64 1
  %31 = icmp ult i16* %29, %1
  %32 = load i8, i8* %30, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %31, label %18, label %34

34:                                               ; preds = %28, %12
  %35 = phi i16* [ %9, %12 ], [ %29, %28 ]
  %36 = phi i1 [ %17, %12 ], [ %33, %28 ]
  br i1 %36, label %37, label %43

37:                                               ; preds = %18, %34
  %38 = phi i16* [ %35, %34 ], [ %21, %18 ]
  %39 = icmp ult i16* %38, %1
  br i1 %39, label %40, label %43

40:                                               ; preds = %37
  %41 = load i16, i16* %38, align 2
  %42 = icmp eq i16 %41, 45
  br i1 %42, label %46, label %43

43:                                               ; preds = %23, %37, %40, %34
  %44 = add nuw i64 %13, 1
  %45 = icmp eq i64 %44, %3
  br i1 %45, label %51, label %12

46:                                               ; preds = %40
  %47 = getelementptr inbounds i16, i16* %38, i64 1
  %48 = ptrtoint i16* %47 to i64
  store i64 %48, i64* %7, align 8
  %49 = getelementptr inbounds %"struct.std::__1::pair.360", %"struct.std::__1::pair.360"* %2, i64 %13, i32 1
  %50 = load i8, i8* %49, align 8
  store i8 %50, i8* %4, align 1
  br label %75

51:                                               ; preds = %43
  %52 = inttoptr i64 %8 to i16*
  br label %53

53:                                               ; preds = %5, %51
  %54 = phi i16* [ %52, %51 ], [ %9, %5 ]
  %55 = icmp ult i16* %54, %1
  br i1 %55, label %56, label %70

56:                                               ; preds = %53
  %57 = load i16, i16* %54, align 2
  %58 = icmp eq i16 %57, 45
  br i1 %58, label %70, label %62

59:                                               ; preds = %62
  %60 = load i16, i16* %64, align 2
  %61 = icmp eq i16 %60, 45
  br i1 %61, label %68, label %62

62:                                               ; preds = %56, %59
  %63 = phi i16* [ %64, %59 ], [ %54, %56 ]
  %64 = getelementptr inbounds i16, i16* %63, i64 1
  %65 = icmp ult i16* %64, %1
  br i1 %65, label %59, label %66

66:                                               ; preds = %62
  %67 = ptrtoint i16* %64 to i64
  br label %70

68:                                               ; preds = %59
  %69 = ptrtoint i16* %64 to i64
  br label %70

70:                                               ; preds = %68, %56, %66, %53
  %71 = phi i64 [ %8, %53 ], [ %67, %66 ], [ %8, %56 ], [ %69, %68 ]
  %72 = inttoptr i64 %71 to i16*
  %73 = icmp ult i16* %72, %1
  %74 = select i1 %73, i32 2, i32 1
  br label %75

75:                                               ; preds = %46, %70
  %76 = phi i32 [ %74, %70 ], [ 0, %46 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20SubresourceIntegrity11ParseDigestERPKDsS2_RN3WTF6StringE(i16** nocapture dereferenceable(8), i16* readnone, %"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::String", align 8
  %5 = load i16*, i16** %0, align 8
  %6 = icmp ult i16* %5, %1
  %7 = ptrtoint i16* %5 to i64
  br i1 %6, label %8, label %34

8:                                                ; preds = %3, %19
  %9 = phi i64 [ %22, %19 ], [ %7, %3 ]
  %10 = phi i16* [ %20, %19 ], [ %5, %3 ]
  %11 = load i16, i16* %10, align 2
  %12 = add i16 %11, -48
  %13 = icmp ult i16 %12, 10
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = or i16 %11, 32
  %16 = add i16 %15, -97
  %17 = icmp ult i16 %16, 26
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  switch i16 %11, label %25 [
    i16 95, label %19
    i16 47, label %19
    i16 45, label %19
    i16 43, label %19
    i16 61, label %19
  ]

19:                                               ; preds = %18, %18, %18, %18, %18, %14, %8
  %20 = getelementptr inbounds i16, i16* %10, i64 1
  store i16* %20, i16** %0, align 8
  %21 = icmp ult i16* %20, %1
  %22 = ptrtoint i16* %20 to i64
  br i1 %21, label %8, label %23

23:                                               ; preds = %19
  %24 = ptrtoint i16* %20 to i64
  br label %25

25:                                               ; preds = %18, %23
  %26 = phi i64 [ %24, %23 ], [ %9, %18 ]
  %27 = phi i16* [ %20, %23 ], [ %10, %18 ]
  %28 = icmp eq i16* %27, %5
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = icmp eq i16* %27, %1
  br i1 %30, label %75, label %31

31:                                               ; preds = %29
  %32 = load i16, i16* %27, align 2
  %33 = icmp eq i16 %32, 63
  br i1 %33, label %75, label %34

34:                                               ; preds = %3, %31, %25
  %35 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %35, i64 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #10
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !2

53:                                               ; preds = %44
  tail call void @llvm.trap() #10
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %54, %39, %34
  %57 = ptrtoint %"class.WTF::StringImpl"* %37 to i64
  %58 = bitcast %"class.WTF::String"* %2 to i64*
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  store i64 %57, i64* %58, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %117, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %117

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %117

75:                                               ; preds = %31, %29
  %76 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #10
  %77 = sub i64 %26, %7
  %78 = lshr exact i64 %77, 1
  %79 = trunc i64 %78 to i32
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %4, i16* %5, i32 %79) #10
  %80 = call %"class.WTF::StringImpl"* @_ZN3WTF17NormalizeToBase64ERKNS_6StringE(%"class.WTF::String"* nonnull dereferenceable(8) %4) #10
  %81 = ptrtoint %"class.WTF::StringImpl"* %80 to i64
  %82 = bitcast %"class.WTF::String"* %2 to i64*
  %83 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  store i64 %81, i64* %82, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %99, label %86

86:                                               ; preds = %75
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #10
  br label %99

99:                                               ; preds = %98, %95, %75
  %100 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %100, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %101, null
  br i1 %102, label %116, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %112

110:                                              ; preds = %103
  %111 = add i32 %109, -1
  store i32 %111, i32* %108, align 4
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi i32 [ %111, %110 ], [ %109, %103 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %101) #10
  br label %116

116:                                              ; preds = %99, %112, %115
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #10
  br label %117

117:                                              ; preds = %74, %71, %56, %116
  %118 = phi i1 [ true, %116 ], [ false, %56 ], [ false, %71 ], [ false, %74 ]
  ret i1 %118
}

declare %"class.WTF::StringImpl"* @_ZN3WTF17NormalizeToBase64ERKNS_6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink20SubresourceIntegrity23ParseIntegrityAttributeERKN3WTF6StringENS0_17IntegrityFeaturesERNS1_7HashSetINSt3__14pairIS2_NS_18IntegrityAlgorithmEEENS1_8PairHashIS2_S9_EENS1_10HashTraitsISA_EENS1_18PartitionAllocatorEEE(%"class.WTF::String"* dereferenceable(8), i32, %"class.WTF::HashSet"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @_ZN5blink20SubresourceIntegrity23ParseIntegrityAttributeERKN3WTF6StringENS0_17IntegrityFeaturesERNS1_7HashSetINSt3__14pairIS2_NS_18IntegrityAlgorithmEEENS1_8PairHashIS2_S9_EENS1_10HashTraitsISA_EENS1_18PartitionAllocatorEEEPNS0_10ReportInfoE(%"class.WTF::String"* dereferenceable(8) %0, i32 %1, %"class.WTF::HashSet"* dereferenceable(24) %2, %"class.blink::SubresourceIntegrity::ReportInfo"* null)
  ret i32 %4
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String15StripWhiteSpaceEv(%"class.WTF::String"*) local_unnamed_addr #1

declare void @_ZN5blink17IntegrityMetadataC1EN3WTF6StringENS_18IntegrityAlgorithmE(%"class.blink::IntegrityMetadata"*, %"class.WTF::StringImpl"*, i8 zeroext) unnamed_addr #1

declare { %"class.WTF::StringImpl"*, i8 } @_ZNK5blink17IntegrityMetadata6ToPairEv(%"class.blink::IntegrityMetadata"*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"*, i8*) local_unnamed_addr #5 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNK3WTF6VectorIhLj64ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.353"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #10
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i8* %14, i8* %15) #10
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #10
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %23 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector"*, i32* dereferenceable(4)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = icmp ugt i32* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i32, i32* %7, i64 %10
  %12 = icmp ugt i32* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !15

24:                                               ; preds = %13
  %25 = icmp eq i32* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 2
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to i32*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 2
  %37 = ptrtoint i8* %28 to i64
  %38 = load i32*, i32** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne i32* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast i32* %38 to i8*
  br i1 %41, label %43, label %49, !prof !15

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to i32*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint i32* %1 to i64
  %56 = ptrtoint i32* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !15

69:                                               ; preds = %54
  %70 = icmp eq i32* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load i32*, i32** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne i32* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast i32* %78 to i8*
  br i1 %81, label %83, label %89, !prof !15

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 2
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to i32*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi i32* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds i32, i32* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi i32* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi i32* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %100, i64 %103
  %105 = load i32, i32* %101, align 4
  store i32 %105, i32* %104, align 4
  %106 = load i32, i32* %3, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink20SubresourceIntegrity10ReportInfo17UseCounterFeatureEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.22, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.0"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %8 = icmp ugt %"class.WTF::String"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::String"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !15

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::String"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::String"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::String"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !15

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #10
  %47 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #10
  %51 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::String"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::String"* %1 to i64
  %56 = ptrtoint %"class.WTF::String"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !15

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::String"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %71) #10
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #10
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::String"*, %"class.WTF::String"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::String"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::String"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !15

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #10
  %87 = bitcast %"class.WTF::Vector.0"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #10
  %91 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::String"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::String"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::String"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::String"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %101, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %100, i64 %103, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #10
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !2

122:                                              ; preds = %113
  tail call void @llvm.trap() #10
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.22, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.391", %"class.WTF::StringTypeAdapter.391"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %14) #10
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.352"* %9) #10
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.352"* %9) #10
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.23, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.392", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.391"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.391"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.391"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.391", %"class.WTF::StringTypeAdapter.391"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.392"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.392"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i8* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.393"* nonnull %34, i8* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.352"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.391"* nonnull %5, i8* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.392", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.391"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.391"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %5, i8* %10) #10
  %11 = bitcast %"class.WTF::StringTypeAdapter.391"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.391", %"class.WTF::StringTypeAdapter.391"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #10
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i8* %14) #10
  %15 = bitcast %"class.WTF::StringTypeAdapter.392"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #10
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.392"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.391"* nonnull %3, i16* %1) #10
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.393"* nonnull %34, i16* %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.352"* %6) #10
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.391"* nonnull %5, i16* %40) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.352"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.391", %"class.WTF::StringTypeAdapter.391"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.352", %"class.WTF::StringAppend.352"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %13) #10
  %14 = getelementptr inbounds %"class.WTF::StringAppend.352", %"class.WTF::StringAppend.352"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.23, i64 0, i64 0), i8* %30, i8* %31) #10
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #10
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #10
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i64 0, i64 0), i8* %45, i8* %46) #10
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #10
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #10
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.391"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.393"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.391"*, i16*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.393"*, i16*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_EC2ES5_S3_(%"class.WTF::StringAppend.359"*, %"class.WTF::StringAppend"* byval(%"class.WTF::StringAppend") align 8, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.359"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %0, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %1, i64 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %34, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %35, label %65, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %53

43:                                               ; preds = %36
  %44 = zext i32 %42 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #10
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !2

50:                                               ; preds = %43
  tail call void @llvm.trap() #10
  unreachable

51:                                               ; preds = %43
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %41, align 4
  br label %53

53:                                               ; preds = %36, %51
  %54 = phi i32 [ %52, %51 ], [ %42, %36 ]
  %55 = load atomic i32, i32* %37 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %60 = add i32 %54, -1
  store i32 %60, i32* %59, align 4
  br label %61

61:                                               ; preds = %58, %53
  %62 = phi i32 [ %60, %58 ], [ %54, %53 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %65

65:                                               ; preds = %28, %61, %64
  br i1 %10, label %79, label %66

66:                                               ; preds = %65
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %79

79:                                               ; preds = %65, %75, %78
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_EC2ES6_S2_(%"class.WTF::StringAppend.358"*, %"class.WTF::StringAppend.359"* byval(%"class.WTF::StringAppend.359") align 8, i8*) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.WTF::StringAppend.359"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.WTF::StringAppend.358"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #10
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #10
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %3
  %29 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %1, i64 0, i32 0, i32 1
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8** %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %1, i64 0, i32 1, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %36, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %37, label %55, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %57

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i33
  %47 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %46, i33 1) #10
  %48 = extractvalue { i33, i1 } %47, 1
  %49 = extractvalue { i33, i1 } %47, 0
  %50 = icmp slt i33 %49, 0
  %51 = or i1 %48, %50
  br i1 %51, label %52, label %53, !prof !2

52:                                               ; preds = %43
  tail call void @llvm.trap() #10
  unreachable

53:                                               ; preds = %43
  %54 = trunc i33 %49 to i32
  store i32 %54, i32* %44, align 4
  br label %57

55:                                               ; preds = %28
  %56 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  store i8* %2, i8** %56, align 8
  br label %70

57:                                               ; preds = %38, %53
  %58 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  store i8* %2, i8** %58, align 8
  %59 = load atomic i32, i32* %39 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #10
  br label %70

70:                                               ; preds = %55, %69, %66
  br i1 %10, label %84, label %71

71:                                               ; preds = %70
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %77 = load i32, i32* %76, align 4
  br i1 %75, label %78, label %80

78:                                               ; preds = %71
  %79 = add i32 %77, -1
  store i32 %79, i32* %76, align 4
  br label %80

80:                                               ; preds = %78, %71
  %81 = phi i32 [ %79, %78 ], [ %77, %71 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %84

84:                                               ; preds = %70, %80, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E6lengthEv(%"class.WTF::StringAppend.358"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.391", %"class.WTF::StringTypeAdapter.391"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %14) #10
  %15 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.359"* %9) #10
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.359"* %9) #10
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.23, i64 0, i64 0), i8* %25, i8* %26) #10
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #10
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPh(%"class.WTF::StringAppend.358"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.392", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.392"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #10
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.392"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %10, i8* %1) #10
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %10) #10
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.393"* nonnull %30, i8* %33) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.359"* %5) #10
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %36) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS0_INS0_IPKcNS_6StringEEES2_EES3_EES2_E7WriteToEPDs(%"class.WTF::StringAppend.358"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.392", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.391", align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0
  %6 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 1
  %8 = bitcast %"class.WTF::StringTypeAdapter.391"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i8* %9) #10
  %10 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.392"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.WTF::StringAppend.358", %"class.WTF::StringAppend.358"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false) #10
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %25

19:                                               ; preds = %2
  %20 = ptrtoint %"class.WTF::StringImpl"* %15 to i64
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  %24 = bitcast %"class.WTF::StringImpl"* %23 to i8*
  br label %25

25:                                               ; preds = %17, %19
  %26 = phi i8* [ null, %17 ], [ %24, %19 ]
  %27 = phi i64 [ %18, %17 ], [ %20, %19 ]
  %28 = phi i32 [ 0, %17 ], [ %22, %19 ]
  %29 = bitcast %"class.WTF::StringTypeAdapter.392"* %3 to i64*
  store i64 %27, i64* %29, align 8
  store i8* %26, i8** %12, align 8
  store i32 %28, i32* %13, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %10, i16* %1) #10
  %30 = getelementptr inbounds %"class.WTF::StringTypeAdapter.392", %"class.WTF::StringTypeAdapter.392"* %3, i64 0, i32 0
  %31 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %10) #10
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %1, i64 %32
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.393"* nonnull %30, i16* %33) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  %34 = call i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.359"* %5) #10
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %1, i64 %35
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.391"* nonnull %4, i16* %36) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS0_IPKcNS_6StringEEES2_EES3_E6lengthEv(%"class.WTF::StringAppend.359"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend.359", %"class.WTF::StringAppend.359"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %8) #10
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %8) #10
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.23, i64 0, i64 0), i8* %26, i8* %27) #10
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #10
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #10
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i64 0, i64 0), i8* %41, i8* %42) #10
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.24, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #10
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.353"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.27, i64 0, i64 0), i8* %15, i8* %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !15

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 64
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #10
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #10
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.353"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector.353"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 64, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.353"* %0, i32 %27) #10
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj64ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.353"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 65
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector.353"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector.353"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 64, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !2

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #10
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"* %18, i8* nonnull %6) #10
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #10
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #10
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !15

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #10
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !15

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj64ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer.354"* %46, i8* %42) #10
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector.353"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector.353", %"class.WTF::Vector.353"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.22, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #10
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector.362"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %52

13:                                               ; preds = %3
  %14 = lshr i32 %11, 2
  %15 = add nuw i32 %11, 1
  %16 = add i32 %15, %14
  %17 = icmp ugt i32 %16, 4
  %18 = select i1 %17, i32 %16, i32 4
  %19 = icmp ugt i32 %18, %9
  %20 = select i1 %19, i32 %18, i32 %9
  %21 = icmp ult i32 %11, %20
  br i1 %21, label %22, label %52, !prof !15

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i16* %24, null
  %26 = zext i32 %20 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %26) #10
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  br i1 %25, label %29, label %34

29:                                               ; preds = %22
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 1
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %10, align 8
  br label %52

34:                                               ; preds = %22
  %35 = lshr i64 %27, 1
  %36 = ptrtoint i8* %28 to i64
  %37 = load i16*, i16** %23, align 8
  %38 = icmp ne i8* %28, null
  %39 = icmp ne i16* %37, null
  %40 = and i1 %38, %39
  %41 = bitcast i16* %37 to i8*
  br i1 %40, label %42, label %48, !prof !15

42:                                               ; preds = %34
  %43 = load i32, i32* %7, align 4
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 %44, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %28, i8* nonnull align 2 %41, i64 %45, i1 false) #10
  %46 = bitcast %"class.WTF::Vector.362"* %0 to i8**
  %47 = load i8*, i8** %46, align 8
  br label %48

48:                                               ; preds = %42, %34
  %49 = phi i8* [ %47, %42 ], [ %41, %34 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #10
  %50 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %36, i64* %50 monotonic, align 8
  %51 = trunc i64 %35 to i32
  store i32 %51, i32* %10, align 8
  br label %52

52:                                               ; preds = %48, %29, %13, %3
  %53 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #10
  %54 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %54, align 8
  %55 = load i32, i32* %7, align 4
  %56 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56)
  %57 = icmp ult i32 %9, %55
  br i1 %57, label %59, label %58

58:                                               ; preds = %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56)
  store i8* null, i8** %54, align 8
  br label %68

59:                                               ; preds = %52
  %60 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  %61 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %55) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i64 0, i64 0), i8* %60, i8* %61) #10
  %62 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56)
  store i8* %63, i8** %54, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #10
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #10
  br label %68

68:                                               ; preds = %58, %59, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #10
  %69 = zext i32 %2 to i64
  %70 = getelementptr inbounds i8, i8* %1, i64 %69
  %71 = icmp eq i32 %2, 0
  br i1 %71, label %158, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 0
  %74 = load i16*, i16** %73, align 8
  %75 = load i32, i32* %7, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %74, i64 %76
  %78 = icmp ult i32 %2, 16
  br i1 %78, label %147, label %79

79:                                               ; preds = %72
  %80 = bitcast i16* %77 to i8*
  %81 = add nuw nsw i64 %76, %69
  %82 = getelementptr i16, i16* %74, i64 %81
  %83 = bitcast i16* %82 to i8*
  %84 = icmp ugt i8* %70, %80
  %85 = icmp ugt i8* %83, %1
  %86 = and i1 %84, %85
  br i1 %86, label %147, label %87

87:                                               ; preds = %79
  %88 = and i64 %69, 4294967280
  %89 = getelementptr i16, i16* %77, i64 %88
  %90 = getelementptr i8, i8* %1, i64 %88
  %91 = add nsw i64 %88, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %91, 0
  br i1 %95, label %129, label %96

96:                                               ; preds = %87
  %97 = sub nuw nsw i64 %93, %94
  br label %98

98:                                               ; preds = %98, %96
  %99 = phi i64 [ 0, %96 ], [ %126, %98 ]
  %100 = phi i64 [ %97, %96 ], [ %127, %98 ]
  %101 = getelementptr i16, i16* %77, i64 %99
  %102 = getelementptr i8, i8* %1, i64 %99
  %103 = bitcast i8* %102 to <8 x i8>*
  %104 = load <8 x i8>, <8 x i8>* %103, align 1, !alias.scope !28
  %105 = getelementptr i8, i8* %102, i64 8
  %106 = bitcast i8* %105 to <8 x i8>*
  %107 = load <8 x i8>, <8 x i8>* %106, align 1, !alias.scope !28
  %108 = zext <8 x i8> %104 to <8 x i16>
  %109 = zext <8 x i8> %107 to <8 x i16>
  %110 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 2, !alias.scope !31, !noalias !28
  %111 = getelementptr i16, i16* %101, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2, !alias.scope !31, !noalias !28
  %113 = or i64 %99, 16
  %114 = getelementptr i16, i16* %77, i64 %113
  %115 = getelementptr i8, i8* %1, i64 %113
  %116 = bitcast i8* %115 to <8 x i8>*
  %117 = load <8 x i8>, <8 x i8>* %116, align 1, !alias.scope !28
  %118 = getelementptr i8, i8* %115, i64 8
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !alias.scope !28
  %121 = zext <8 x i8> %117 to <8 x i16>
  %122 = zext <8 x i8> %120 to <8 x i16>
  %123 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %121, <8 x i16>* %123, align 2, !alias.scope !31, !noalias !28
  %124 = getelementptr i16, i16* %114, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !31, !noalias !28
  %126 = add i64 %99, 32
  %127 = add i64 %100, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %98, !llvm.loop !33

129:                                              ; preds = %98, %87
  %130 = phi i64 [ 0, %87 ], [ %126, %98 ]
  %131 = icmp eq i64 %94, 0
  br i1 %131, label %145, label %132

132:                                              ; preds = %129
  %133 = getelementptr i16, i16* %77, i64 %130
  %134 = getelementptr i8, i8* %1, i64 %130
  %135 = bitcast i8* %134 to <8 x i8>*
  %136 = load <8 x i8>, <8 x i8>* %135, align 1, !alias.scope !28
  %137 = getelementptr i8, i8* %134, i64 8
  %138 = bitcast i8* %137 to <8 x i8>*
  %139 = load <8 x i8>, <8 x i8>* %138, align 1, !alias.scope !28
  %140 = zext <8 x i8> %136 to <8 x i16>
  %141 = zext <8 x i8> %139 to <8 x i16>
  %142 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %142, align 2, !alias.scope !31, !noalias !28
  %143 = getelementptr i16, i16* %133, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !31, !noalias !28
  br label %145

145:                                              ; preds = %129, %132
  %146 = icmp eq i64 %88, %69
  br i1 %146, label %158, label %147

147:                                              ; preds = %145, %79, %72
  %148 = phi i16* [ %77, %79 ], [ %77, %72 ], [ %89, %145 ]
  %149 = phi i8* [ %1, %79 ], [ %1, %72 ], [ %90, %145 ]
  br label %150

150:                                              ; preds = %147, %150
  %151 = phi i16* [ %155, %150 ], [ %148, %147 ]
  %152 = phi i8* [ %156, %150 ], [ %149, %147 ]
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i16
  store i16 %154, i16* %151, align 2
  %155 = getelementptr inbounds i16, i16* %151, i64 1
  %156 = getelementptr inbounds i8, i8* %152, i64 1
  %157 = icmp eq i8* %156, %70
  br i1 %157, label %158, label %150, !llvm.loop !35

158:                                              ; preds = %150, %145, %68
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj0ENS_18PartitionAllocatorEE6AppendIDsEEvPKT_j(%"class.WTF::Vector.362"*, i16*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %101

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i16*, i16** %14, align 8
  %16 = icmp ugt i16* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i16, i16* %15, i64 %18
  %20 = icmp ugt i16* %19, %1
  br i1 %20, label %58, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %101, !prof !15

30:                                               ; preds = %21
  %31 = icmp eq i16* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %32) #10
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  br i1 %31, label %35, label %40

35:                                               ; preds = %30
  %36 = ptrtoint i8* %34 to i64
  %37 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %36, i64* %37 monotonic, align 8
  %38 = lshr i64 %33, 1
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %10, align 8
  br label %101

40:                                               ; preds = %30
  %41 = lshr i64 %33, 1
  %42 = ptrtoint i8* %34 to i64
  %43 = load i16*, i16** %14, align 8
  %44 = icmp ne i8* %34, null
  %45 = icmp ne i16* %43, null
  %46 = and i1 %44, %45
  %47 = bitcast i16* %43 to i8*
  br i1 %46, label %48, label %54, !prof !15

48:                                               ; preds = %40
  %49 = load i32, i32* %7, align 4
  %50 = zext i32 %49 to i64
  %51 = shl nuw nsw i64 %50, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %34, i8* nonnull align 2 %47, i64 %51, i1 false) #10
  %52 = bitcast %"class.WTF::Vector.362"* %0 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %48, %40
  %55 = phi i8* [ %53, %48 ], [ %47, %40 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %55) #10
  %56 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %42, i64* %56 monotonic, align 8
  %57 = trunc i64 %41 to i32
  store i32 %57, i32* %10, align 8
  br label %101

58:                                               ; preds = %17
  %59 = ptrtoint i16* %1 to i64
  %60 = ptrtoint i16* %15 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 1
  %63 = lshr i32 %11, 2
  %64 = add nuw i32 %11, 1
  %65 = add i32 %64, %63
  %66 = icmp ugt i32 %65, 4
  %67 = select i1 %66, i32 %65, i32 4
  %68 = icmp ugt i32 %67, %9
  %69 = select i1 %68, i32 %67, i32 %9
  %70 = icmp ult i32 %11, %69
  br i1 %70, label %71, label %98, !prof !15

71:                                               ; preds = %58
  %72 = icmp eq i16* %15, null
  %73 = zext i32 %69 to i64
  %74 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %73) #10
  %75 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %74, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #10
  %76 = ptrtoint i8* %75 to i64
  br i1 %72, label %77, label %79

77:                                               ; preds = %71
  %78 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %76, i64* %78 monotonic, align 8
  br label %94

79:                                               ; preds = %71
  %80 = load i16*, i16** %14, align 8
  %81 = icmp ne i8* %75, null
  %82 = icmp ne i16* %80, null
  %83 = and i1 %81, %82
  %84 = bitcast i16* %80 to i8*
  br i1 %83, label %85, label %91, !prof !15

85:                                               ; preds = %79
  %86 = load i32, i32* %7, align 4
  %87 = zext i32 %86 to i64
  %88 = shl nuw nsw i64 %87, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %75, i8* nonnull align 2 %84, i64 %88, i1 false) #10
  %89 = bitcast %"class.WTF::Vector.362"* %0 to i8**
  %90 = load i8*, i8** %89, align 8
  br label %91

91:                                               ; preds = %85, %79
  %92 = phi i8* [ %90, %85 ], [ %84, %79 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %92) #10
  %93 = bitcast %"class.WTF::Vector.362"* %0 to i64*
  store atomic i64 %76, i64* %93 monotonic, align 8
  br label %94

94:                                               ; preds = %91, %77
  %95 = lshr i64 %74, 1
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %10, align 8
  %97 = bitcast i8* %75 to i16*
  br label %98

98:                                               ; preds = %94, %58
  %99 = phi i16* [ %15, %58 ], [ %97, %94 ]
  %100 = getelementptr inbounds i16, i16* %99, i64 %62
  br label %101

101:                                              ; preds = %98, %21, %35, %54, %3
  %102 = phi i16* [ %1, %3 ], [ %100, %98 ], [ %1, %21 ], [ %1, %35 ], [ %1, %54 ]
  %103 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #10
  %104 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %104, align 8
  %105 = load i32, i32* %7, align 4
  %106 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106)
  %107 = icmp ult i32 %9, %105
  br i1 %107, label %109, label %108

108:                                              ; preds = %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106)
  store i8* null, i8** %104, align 8
  br label %118

109:                                              ; preds = %101
  %110 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #10
  %111 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %105) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i64 0, i64 0), i8* %110, i8* %111) #10
  %112 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %113 = load i8*, i8** %112, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106)
  store i8* %113, i8** %104, align 8
  %114 = icmp eq i8* %113, null
  br i1 %114, label %118, label %115

115:                                              ; preds = %109
  %116 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #10
  %117 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116) #10
  br label %118

118:                                              ; preds = %108, %109, %115
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #10
  %119 = getelementptr inbounds %"class.WTF::Vector.362", %"class.WTF::Vector.362"* %0, i64 0, i32 0, i32 0, i32 0
  %120 = load i16*, i16** %119, align 8
  %121 = load i32, i32* %7, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i16, i16* %120, i64 %122
  %124 = icmp ne i16* %123, null
  %125 = icmp ne i16* %102, null
  %126 = and i1 %125, %124
  br i1 %126, label %127, label %132, !prof !15

127:                                              ; preds = %118
  %128 = zext i32 %2 to i64
  %129 = bitcast i16* %123 to i8*
  %130 = bitcast i16* %102 to i8*
  %131 = shl nuw nsw i64 %128, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %129, i8* nonnull align 2 %130, i64 %131, i1 false) #10
  br label %132

132:                                              ; preds = %118, %127
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.22, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::pair"*, i8 } @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SB_SC_EERKS6_S6_EENS_18HashTableAddResultISD_S6_EEOT0_OT1_(%"class.WTF::HashTable"*, %"struct.std::__1::pair"* dereferenceable(16), %"struct.std::__1::pair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %4, align 8
  %6 = icmp eq %"struct.std::__1::pair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.std::__1::pair"* @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable"* %0, %"struct.std::__1::pair"* null)
  %9 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.std::__1::pair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %10
  %23 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %17) #10
  br label %24

24:                                               ; preds = %10, %22
  %25 = phi i32 [ %23, %22 ], [ %20, %10 ]
  %26 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %27 = load i8, i8* %26, align 8
  %28 = zext i8 %27 to i32
  %29 = shl nuw nsw i32 %28, 15
  %30 = xor i32 %29, -1
  %31 = add nsw i32 %30, %28
  %32 = lshr i32 %31, 10
  %33 = xor i32 %32, %31
  %34 = mul nsw i32 %33, 9
  %35 = lshr i32 %34, 6
  %36 = xor i32 %35, %34
  %37 = shl i32 %36, 11
  %38 = xor i32 %37, -1
  %39 = add i32 %36, %38
  %40 = lshr i32 %39, 16
  %41 = xor i32 %40, %39
  %42 = zext i32 %25 to i64
  %43 = mul i64 %42, 5146158508761418231
  %44 = zext i32 %41 to i64
  %45 = mul i64 %44, -682818954288075998
  %46 = add i64 %45, %43
  %47 = lshr i64 %46, 32
  %48 = trunc i64 %47 to i32
  %49 = and i32 %14, %48
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %11, i64 %50
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %11, i64 %50, i32 1
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  %58 = and i1 %54, %57
  br i1 %58, label %107, label %59

59:                                               ; preds = %24
  %60 = xor i32 %48, -1
  %61 = lshr i64 %46, 55
  %62 = trunc i64 %61 to i32
  %63 = add i32 %62, %60
  %64 = shl i32 %63, 12
  %65 = xor i32 %64, %63
  %66 = lshr i32 %65, 7
  %67 = xor i32 %66, %65
  %68 = shl i32 %67, 2
  %69 = xor i32 %68, %67
  %70 = lshr i32 %69, 20
  %71 = xor i32 %70, %69
  %72 = or i32 %71, 1
  %73 = zext i32 %72 to i64
  br label %74

74:                                               ; preds = %59, %91
  %75 = phi i8* [ %55, %59 ], [ %101, %91 ]
  %76 = phi %"class.WTF::StringImpl"* [ %53, %59 ], [ %99, %91 ]
  %77 = phi %"struct.std::__1::pair"* [ %51, %59 ], [ %97, %91 ]
  %78 = phi %"struct.std::__1::pair"* [ null, %59 ], [ %92, %91 ]
  %79 = phi i64 [ %50, %59 ], [ %96, %91 ]
  %80 = phi i64 [ 0, %59 ], [ %94, %91 ]
  %81 = bitcast %"struct.std::__1::pair"* %77 to i8**
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i8* %82, inttoptr (i64 -1 to i8*)
  br i1 %83, label %91, label %84

84:                                               ; preds = %74
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %86 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %76, %"class.WTF::StringImpl"* %85) #10
  br i1 %86, label %87, label %91

87:                                               ; preds = %84
  %88 = load i8, i8* %75, align 8
  %89 = load i8, i8* %26, align 8
  %90 = icmp eq i8 %88, %89
  br i1 %90, label %156, label %91

91:                                               ; preds = %74, %84, %87
  %92 = phi %"struct.std::__1::pair"* [ %78, %87 ], [ %77, %74 ], [ %78, %84 ]
  %93 = icmp eq i64 %80, 0
  %94 = select i1 %93, i64 %73, i64 %80
  %95 = add i64 %94, %79
  %96 = and i64 %95, %15
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %11, i64 %96
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  %101 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %11, i64 %96, i32 1
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, 0
  %104 = and i1 %100, %103
  br i1 %104, label %105, label %74

105:                                              ; preds = %91
  %106 = icmp eq %"struct.std::__1::pair"* %92, null
  br i1 %106, label %107, label %110

107:                                              ; preds = %24, %105
  %108 = phi %"struct.std::__1::pair"* [ %97, %105 ], [ %51, %24 ]
  %109 = bitcast %"struct.std::__1::pair"* %108 to i64*
  br label %119

110:                                              ; preds = %105
  %111 = bitcast %"struct.std::__1::pair"* %92 to i64*
  store i64 0, i64* %111, align 8
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %92, i64 0, i32 1
  store i8 0, i8* %112, align 8
  %113 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %114 = load i32, i32* %113, align 8
  %115 = add i32 %114, 2147483647
  %116 = and i32 %115, 2147483647
  %117 = and i32 %114, -2147483648
  %118 = or i32 %116, %117
  store i32 %118, i32* %113, align 8
  br label %119

119:                                              ; preds = %107, %110
  %120 = phi i64* [ %109, %107 ], [ %111, %110 ]
  %121 = phi %"struct.std::__1::pair"* [ %108, %107 ], [ %92, %110 ]
  %122 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0, i32 0, i32 0
  %123 = bitcast %"struct.std::__1::pair"* %2 to i64*
  %124 = load i64, i64* %123, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %122, align 8
  %125 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %121, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  store i64 %124, i64* %120, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %119
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %126) #10
  br label %141

141:                                              ; preds = %119, %137, %140
  %142 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1
  %143 = load i8, i8* %142, align 1
  %144 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %121, i64 0, i32 1
  store i8 %143, i8* %144, align 8
  %145 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %145, align 4
  %148 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %149 = load i32, i32* %148, align 8
  %150 = add i32 %149, %147
  %151 = shl i32 %150, 1
  %152 = load i32, i32* %12, align 8
  %153 = icmp ult i32 %151, %152
  br i1 %153, label %156, label %154

154:                                              ; preds = %141
  %155 = tail call %"struct.std::__1::pair"* @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable"* %0, %"struct.std::__1::pair"* %121)
  br label %156

156:                                              ; preds = %87, %141, %154
  %157 = phi i8 [ 1, %141 ], [ 1, %154 ], [ 0, %87 ]
  %158 = phi %"struct.std::__1::pair"* [ %121, %141 ], [ %155, %154 ], [ %77, %87 ]
  %159 = insertvalue { %"struct.std::__1::pair"*, i8 } undef, %"struct.std::__1::pair"* %158, 0
  %160 = insertvalue { %"struct.std::__1::pair"*, i8 } %159, i8 %157, 1
  ret { %"struct.std::__1::pair"*, i8 } %160
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::pair"* @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable"*, %"struct.std::__1::pair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.29, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEEEEPKcv, i64 0, i64 0)) #10
  %36 = bitcast i8* %35 to %"struct.std::__1::pair"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %77, label %38

38:                                               ; preds = %31
  %39 = add nsw i64 %33, -1
  %40 = and i64 %33, 3
  %41 = icmp ult i64 %39, 3
  br i1 %41, label %65, label %42

42:                                               ; preds = %38
  %43 = sub nsw i64 %33, %40
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %62, %44 ]
  %46 = phi i64 [ %43, %42 ], [ %63, %44 ]
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %45
  %48 = bitcast %"struct.std::__1::pair"* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %45, i32 1
  store i8 0, i8* %49, align 8
  %50 = or i64 %45, 1
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %50
  %52 = bitcast %"struct.std::__1::pair"* %51 to i64*
  store i64 0, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %50, i32 1
  store i8 0, i8* %53, align 8
  %54 = or i64 %45, 2
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %54
  %56 = bitcast %"struct.std::__1::pair"* %55 to i64*
  store i64 0, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %54, i32 1
  store i8 0, i8* %57, align 8
  %58 = or i64 %45, 3
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %58
  %60 = bitcast %"struct.std::__1::pair"* %59 to i64*
  store i64 0, i64* %60, align 8
  %61 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %58, i32 1
  store i8 0, i8* %61, align 8
  %62 = add nuw nsw i64 %45, 4
  %63 = add i64 %46, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %44

65:                                               ; preds = %44, %38
  %66 = phi i64 [ 0, %38 ], [ %62, %44 ]
  %67 = icmp eq i64 %40, 0
  br i1 %67, label %77, label %68

68:                                               ; preds = %65, %68
  %69 = phi i64 [ %74, %68 ], [ %66, %65 ]
  %70 = phi i64 [ %75, %68 ], [ %40, %65 ]
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %69
  %72 = bitcast %"struct.std::__1::pair"* %71 to i64*
  store i64 0, i64* %72, align 8
  %73 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %36, i64 %69, i32 1
  store i8 0, i8* %73, align 8
  %74 = add nuw nsw i64 %69, 1
  %75 = add i64 %70, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !36

77:                                               ; preds = %65, %68, %31
  %78 = call %"struct.std::__1::pair"* @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE8RehashToEPS6_jSE_(%"class.WTF::HashTable"* %0, %"struct.std::__1::pair"* %36, i32 %32, %"struct.std::__1::pair"* %1) #10
  ret %"struct.std::__1::pair"* %78
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.std::__1::pair"* @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE8RehashToEPS6_jSE_(%"class.WTF::HashTable"*, %"struct.std::__1::pair"*, i32, %"struct.std::__1::pair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable", align 8
  %6 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.std::__1::pair"* %1, %"struct.std::__1::pair"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %15, align 8
  %23 = ptrtoint %"struct.std::__1::pair"* %22 to i64
  br label %71

24:                                               ; preds = %119
  %25 = bitcast %"class.WTF::HashTable"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %120, %24 ]
  %33 = phi %"struct.std::__1::pair"* [ null, %16 ], [ %123, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %121, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.std::__1::pair"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %67, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %62, %39
  %42 = phi i64 [ 0, %39 ], [ %63, %62 ]
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %35, i64 %42
  %44 = bitcast %"struct.std::__1::pair"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %"class.WTF::StringImpl"*
  %47 = ptrtoint i8* %45 to i64
  switch i64 %47, label %48 [
    i64 -1, label %62
    i64 0, label %62
  ]

48:                                               ; preds = %41
  %49 = getelementptr inbounds i8, i8* %45, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = bitcast i8* %45 to i32*
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %48
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %48
  %59 = phi i32 [ %57, %56 ], [ %55, %48 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %46) #10
  br label %62

62:                                               ; preds = %61, %58, %41, %41
  %63 = add nuw nsw i64 %42, 1
  %64 = icmp eq i64 %63, %40
  br i1 %64, label %65, label %41

65:                                               ; preds = %62, %37
  %66 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %66) #10
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %67

67:                                               ; preds = %28, %65
  %68 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = and i32 %69, -2147483648
  store i32 %70, i32* %68, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"struct.std::__1::pair"* %33

71:                                               ; preds = %21, %119
  %72 = phi i64 [ %120, %119 ], [ %23, %21 ]
  %73 = phi i32 [ %121, %119 ], [ %13, %21 ]
  %74 = phi %"struct.std::__1::pair"* [ %122, %119 ], [ %22, %21 ]
  %75 = phi %"struct.std::__1::pair"* [ %123, %119 ], [ null, %21 ]
  %76 = phi i32 [ %124, %119 ], [ 0, %21 ]
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %74, i64 %77
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %78, i64 0, i32 0, i32 0, i32 0
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %74, i64 %77, i32 1
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  %85 = and i1 %81, %84
  %86 = icmp eq %"class.WTF::StringImpl"* %80, inttoptr (i64 -1 to %"class.WTF::StringImpl"*)
  %87 = or i1 %86, %85
  br i1 %87, label %119, label %88

88:                                               ; preds = %71
  %89 = call { %"struct.std::__1::pair"*, i8 } @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS9_SB_SC_EES6_EENS2_IPS6_bEERKT0_(%"class.WTF::HashTable"* nonnull %5, %"struct.std::__1::pair"* dereferenceable(16) %78) #10
  %90 = extractvalue { %"struct.std::__1::pair"*, i8 } %89, 0
  %91 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %90, i64 0, i32 0, i32 0, i32 0
  %92 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  %93 = icmp eq %"class.WTF::StringImpl"* %92, null
  br i1 %93, label %107, label %94

94:                                               ; preds = %88
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %92, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  br i1 %98, label %101, label %103

101:                                              ; preds = %94
  %102 = add i32 %100, -1
  store i32 %102, i32* %99, align 4
  br label %103

103:                                              ; preds = %101, %94
  %104 = phi i32 [ %102, %101 ], [ %100, %94 ]
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %103
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %92) #10
  br label %107

107:                                              ; preds = %88, %103, %106
  %108 = bitcast %"struct.std::__1::pair"* %78 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.std::__1::pair"* %90 to i64*
  store i64 %109, i64* %110, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %111 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %90, i64 0, i32 1
  %112 = load i8, i8* %82, align 8
  store i8 %112, i8* %111, align 8
  %113 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %15, align 8
  %114 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %113, i64 %77
  %115 = icmp eq %"struct.std::__1::pair"* %114, %3
  %116 = select i1 %115, %"struct.std::__1::pair"* %90, %"struct.std::__1::pair"* %75
  %117 = load i32, i32* %12, align 8
  %118 = ptrtoint %"struct.std::__1::pair"* %113 to i64
  br label %119

119:                                              ; preds = %71, %107
  %120 = phi i64 [ %72, %71 ], [ %118, %107 ]
  %121 = phi i32 [ %73, %71 ], [ %117, %107 ]
  %122 = phi %"struct.std::__1::pair"* [ %74, %71 ], [ %113, %107 ]
  %123 = phi %"struct.std::__1::pair"* [ %75, %71 ], [ %116, %107 ]
  %124 = add i32 %76, 1
  %125 = icmp eq i32 %124, %121
  br i1 %125, label %24, label %71
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::pair"*, i8 } @_ZN3WTF9HashTableINSt3__14pairINS_6StringEN5blink18IntegrityAlgorithmEEES6_NS_17IdentityExtractorENS_8PairHashIS3_S5_EENS_10HashTraitsIS6_EESB_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS9_SB_SC_EES6_EENS2_IPS6_bEERKT0_(%"class.WTF::HashTable"*, %"struct.std::__1::pair"* dereferenceable(16)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %10) #10
  br label %17

17:                                               ; preds = %2, %15
  %18 = phi i32 [ %16, %15 ], [ %13, %2 ]
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %20 = load i8, i8* %19, align 8
  %21 = zext i8 %20 to i32
  %22 = shl nuw nsw i32 %21, 15
  %23 = xor i32 %22, -1
  %24 = add nsw i32 %23, %21
  %25 = lshr i32 %24, 10
  %26 = xor i32 %25, %24
  %27 = mul nsw i32 %26, 9
  %28 = lshr i32 %27, 6
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 11
  %31 = xor i32 %30, -1
  %32 = add i32 %29, %31
  %33 = lshr i32 %32, 16
  %34 = xor i32 %33, %32
  %35 = zext i32 %18 to i64
  %36 = mul i64 %35, 5146158508761418231
  %37 = zext i32 %34 to i64
  %38 = mul i64 %37, -682818954288075998
  %39 = add i64 %38, %36
  %40 = lshr i64 %39, 32
  %41 = trunc i64 %40 to i32
  %42 = and i32 %7, %41
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 %43
  %45 = ptrtoint %"struct.std::__1::pair"* %44 to i64
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %44, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  %49 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 %43, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %50, 0
  %52 = and i1 %48, %51
  br i1 %52, label %70, label %53

53:                                               ; preds = %17
  %54 = xor i32 %41, -1
  %55 = lshr i64 %39, 55
  %56 = trunc i64 %55 to i32
  %57 = add i32 %56, %54
  %58 = shl i32 %57, 12
  %59 = xor i32 %58, %57
  %60 = lshr i32 %59, 7
  %61 = xor i32 %60, %59
  %62 = shl i32 %61, 2
  %63 = xor i32 %62, %61
  %64 = lshr i32 %63, 20
  %65 = xor i32 %64, %63
  %66 = or i32 %65, 1
  %67 = zext i32 %66 to i64
  br label %76

68:                                               ; preds = %94
  %69 = ptrtoint %"struct.std::__1::pair"* %100 to i64
  br label %70

70:                                               ; preds = %68, %17
  %71 = phi i64 [ %45, %17 ], [ %69, %68 ]
  %72 = phi %"struct.std::__1::pair"* [ null, %17 ], [ %95, %68 ]
  %73 = icmp eq %"struct.std::__1::pair"* %72, null
  %74 = ptrtoint %"struct.std::__1::pair"* %72 to i64
  %75 = select i1 %73, i64 %71, i64 %74
  br label %109

76:                                               ; preds = %53, %94
  %77 = phi %"struct.std::__1::pair"* [ null, %53 ], [ %95, %94 ]
  %78 = phi i8* [ %49, %53 ], [ %105, %94 ]
  %79 = phi %"class.WTF::StringImpl"* [ %47, %53 ], [ %103, %94 ]
  %80 = phi i64 [ %45, %53 ], [ %101, %94 ]
  %81 = phi %"struct.std::__1::pair"* [ %44, %53 ], [ %100, %94 ]
  %82 = phi i64 [ %43, %53 ], [ %99, %94 ]
  %83 = phi i64 [ 0, %53 ], [ %97, %94 ]
  %84 = bitcast %"struct.std::__1::pair"* %81 to i8**
  %85 = load i8*, i8** %84, align 8
  %86 = icmp eq i8* %85, inttoptr (i64 -1 to i8*)
  br i1 %86, label %94, label %87

87:                                               ; preds = %76
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %89 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %79, %"class.WTF::StringImpl"* %88) #10
  br i1 %89, label %90, label %94

90:                                               ; preds = %87
  %91 = load i8, i8* %78, align 8
  %92 = load i8, i8* %19, align 8
  %93 = icmp eq i8 %91, %92
  br i1 %93, label %109, label %94

94:                                               ; preds = %76, %87, %90
  %95 = phi %"struct.std::__1::pair"* [ %77, %87 ], [ %77, %90 ], [ %81, %76 ]
  %96 = icmp eq i64 %83, 0
  %97 = select i1 %96, i64 %67, i64 %83
  %98 = add i64 %97, %82
  %99 = and i64 %98, %8
  %100 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 %99
  %101 = ptrtoint %"struct.std::__1::pair"* %100 to i64
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %100, i64 0, i32 0, i32 0, i32 0
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  %105 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 %99, i32 1
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %106, 0
  %108 = and i1 %104, %107
  br i1 %108, label %68, label %76

109:                                              ; preds = %90, %70
  %110 = phi i64 [ %75, %70 ], [ %80, %90 ]
  %111 = phi i8 [ 0, %70 ], [ 1, %90 ]
  %112 = inttoptr i64 %110 to %"struct.std::__1::pair"*
  %113 = insertvalue { %"struct.std::__1::pair"*, i8 } undef, %"struct.std::__1::pair"* %112, 0
  %114 = insertvalue { %"struct.std::__1::pair"*, i8 } %113, i8 %111, 1
  ret { %"struct.std::__1::pair"*, i8 } %114
}

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!5 = distinct !{!5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!8 = distinct !{!8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_: argument 0"}
!11 = distinct !{!11, !"_ZN3WTFplINS_12StringAppendINS1_IPKcNS_6StringEEES3_EES4_S3_EENS1_INS1_IT_T0_EET1_EERKS9_SA_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!14 = distinct !{!14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!15 = !{!"branch_weights", i32 2000, i32 1}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!18 = distinct !{!18, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!21 = distinct !{!21, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!24 = distinct !{!24, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!27 = distinct !{!27, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.isvectorized", i32 1}
!35 = distinct !{!35, !34}
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.unroll.disable"}
