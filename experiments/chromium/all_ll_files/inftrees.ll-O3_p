; ModuleID = '../../third_party/zlib/inftrees.c'
source_filename = "../../third_party/zlib/inftrees.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.code = type { i8, i8, i16 }

@Cr_z_inflate_copyright = hidden local_unnamed_addr constant [48 x i8] c" inflate 1.2.11 Copyright 1995-2017 Mark Adler \00", align 16
@Cr_z_inflate_table.lbase = internal unnamed_addr constant [31 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 0, i16 0], align 16
@Cr_z_inflate_table.lext = internal unnamed_addr constant [31 x i16] [i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 17, i16 17, i16 17, i16 17, i16 18, i16 18, i16 18, i16 18, i16 19, i16 19, i16 19, i16 19, i16 20, i16 20, i16 20, i16 20, i16 21, i16 21, i16 21, i16 21, i16 16, i16 77, i16 202], align 16
@Cr_z_inflate_table.dbase = internal unnamed_addr constant [32 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577, i16 0, i16 0], align 16
@Cr_z_inflate_table.dext = internal unnamed_addr constant [32 x i16] [i16 16, i16 16, i16 16, i16 16, i16 17, i16 17, i16 18, i16 18, i16 19, i16 19, i16 20, i16 20, i16 21, i16 21, i16 22, i16 22, i16 23, i16 23, i16 24, i16 24, i16 25, i16 25, i16 26, i16 26, i16 27, i16 27, i16 28, i16 28, i16 29, i16 29, i16 64, i16 64], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflate_table(i32, i16* nocapture readonly, i32, %struct.code** nocapture, i32* nocapture, i16* nocapture) local_unnamed_addr #0 {
  %7 = alloca [16 x i16], align 16
  %8 = bitcast [16 x i16]* %7 to i8*
  %9 = alloca [16 x i16], align 16
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #2
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 1
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 2
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 3
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 4
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 5
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 6
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 7
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 8
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 9
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 10
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 11
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 12
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 13
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 14
  %24 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 15
  %25 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #2
  %26 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 1
  %27 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 2
  %28 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 3
  %29 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 4
  %30 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 5
  %31 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 6
  %32 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 7
  %33 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 8
  %34 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 9
  %35 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 10
  %36 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 11
  %37 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 12
  %38 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 13
  %39 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 14
  %40 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 15
  %41 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -86, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 32, i1 false)
  %42 = icmp eq i32 %2, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %6
  %44 = load i32, i32* %4, align 4
  br label %104

45:                                               ; preds = %6
  %46 = zext i32 %2 to i64
  %47 = add nsw i64 %46, -1
  %48 = and i64 %46, 3
  %49 = icmp ult i64 %47, 3
  br i1 %49, label %85, label %50

50:                                               ; preds = %45
  %51 = sub nsw i64 %46, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %82, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %83, %52 ]
  %55 = getelementptr inbounds i16, i16* %1, i64 %53
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i64
  %58 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %57
  %59 = load i16, i16* %58, align 2
  %60 = add i16 %59, 1
  store i16 %60, i16* %58, align 2
  %61 = or i64 %53, 1
  %62 = getelementptr inbounds i16, i16* %1, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i64
  %65 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = add i16 %66, 1
  store i16 %67, i16* %65, align 2
  %68 = or i64 %53, 2
  %69 = getelementptr inbounds i16, i16* %1, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i64
  %72 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = add i16 %73, 1
  store i16 %74, i16* %72, align 2
  %75 = or i64 %53, 3
  %76 = getelementptr inbounds i16, i16* %1, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i64
  %79 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = add i16 %80, 1
  store i16 %81, i16* %79, align 2
  %82 = add nuw nsw i64 %53, 4
  %83 = add i64 %54, -4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %52

85:                                               ; preds = %52, %45
  %86 = phi i64 [ 0, %45 ], [ %82, %52 ]
  %87 = icmp eq i64 %48, 0
  br i1 %87, label %100, label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %97, %88 ], [ %86, %85 ]
  %90 = phi i64 [ %98, %88 ], [ %48, %85 ]
  %91 = getelementptr inbounds i16, i16* %1, i64 %89
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i64
  %94 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = add i16 %95, 1
  store i16 %96, i16* %94, align 2
  %97 = add nuw nsw i64 %89, 1
  %98 = add i64 %90, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %88, !llvm.loop !2

100:                                              ; preds = %88, %85
  %101 = load i16, i16* %24, align 2
  %102 = load i32, i32* %4, align 4
  %103 = icmp eq i16 %101, 0
  br i1 %103, label %104, label %111

104:                                              ; preds = %43, %100
  %105 = phi i32 [ %44, %43 ], [ %102, %100 ]
  %106 = load i16, i16* %23, align 4
  %107 = icmp eq i16 %106, 0
  br i1 %107, label %449, label %111

108:                                              ; preds = %485
  %109 = icmp ne i32 %105, 0
  %110 = zext i1 %109 to i32
  br label %130

111:                                              ; preds = %100, %104, %449, %452, %455, %458, %461, %464, %467, %470, %473, %476, %479, %482
  %112 = phi i32 [ %105, %482 ], [ %105, %479 ], [ %105, %476 ], [ %105, %473 ], [ %105, %470 ], [ %105, %467 ], [ %105, %464 ], [ %105, %461 ], [ %105, %458 ], [ %105, %455 ], [ %105, %452 ], [ %105, %449 ], [ %105, %104 ], [ %102, %100 ]
  %113 = phi i16 [ 0, %482 ], [ 0, %479 ], [ 0, %476 ], [ 0, %473 ], [ 0, %470 ], [ 0, %467 ], [ 0, %464 ], [ 0, %461 ], [ 0, %458 ], [ 0, %455 ], [ 0, %452 ], [ 0, %449 ], [ 0, %104 ], [ %101, %100 ]
  %114 = phi i32 [ 2, %482 ], [ 3, %479 ], [ 4, %476 ], [ 5, %473 ], [ 6, %470 ], [ 7, %467 ], [ 8, %464 ], [ 9, %461 ], [ 10, %458 ], [ 11, %455 ], [ 12, %452 ], [ 13, %449 ], [ 14, %104 ], [ 15, %100 ]
  %115 = icmp ugt i32 %112, %114
  %116 = select i1 %115, i32 %114, i32 %112
  %117 = zext i32 %114 to i64
  br label %118

118:                                              ; preds = %124, %111
  %119 = phi i64 [ 1, %111 ], [ %125, %124 ]
  %120 = phi i32 [ 1, %111 ], [ %126, %124 ]
  %121 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %119
  %122 = load i16, i16* %121, align 2
  %123 = icmp eq i16 %122, 0
  br i1 %123, label %124, label %128

124:                                              ; preds = %118
  %125 = add nuw nsw i64 %119, 1
  %126 = add nuw nsw i32 %120, 1
  %127 = icmp eq i64 %125, %117
  br i1 %127, label %130, label %118

128:                                              ; preds = %118
  %129 = trunc i64 %119 to i32
  br label %130

130:                                              ; preds = %124, %128, %108
  %131 = phi i32 [ %110, %108 ], [ %116, %128 ], [ %116, %124 ]
  %132 = phi i32 [ 1, %108 ], [ %114, %128 ], [ %114, %124 ]
  %133 = phi i16 [ 0, %108 ], [ %113, %128 ], [ %113, %124 ]
  %134 = phi i32 [ 1, %108 ], [ %129, %128 ], [ %126, %124 ]
  %135 = icmp ult i32 %131, %134
  %136 = select i1 %135, i32 %134, i32 %131
  %137 = load i16, i16* %10, align 2
  %138 = icmp ugt i16 %137, 2
  br i1 %138, label %368, label %139

139:                                              ; preds = %130
  %140 = zext i16 %137 to i32
  %141 = shl nuw nsw i32 %140, 1
  %142 = sub nuw nsw i32 4, %141
  %143 = load i16, i16* %11, align 4
  %144 = zext i16 %143 to i32
  %145 = sub nsw i32 %142, %144
  %146 = icmp slt i32 %145, 0
  br i1 %146, label %368, label %370

147:                                              ; preds = %447
  %148 = icmp eq i32 %0, 0
  %149 = icmp ne i32 %132, 1
  %150 = or i1 %148, %149
  br i1 %150, label %368, label %151

151:                                              ; preds = %447, %147
  store i16 0, i16* %26, align 2
  store i16 %137, i16* %27, align 4
  %152 = add i16 %143, %137
  store i16 %152, i16* %28, align 2
  %153 = add i16 %372, %152
  store i16 %153, i16* %29, align 8
  %154 = add i16 %378, %153
  store i16 %154, i16* %30, align 2
  %155 = add i16 %384, %154
  store i16 %155, i16* %31, align 4
  %156 = add i16 %390, %155
  store i16 %156, i16* %32, align 2
  %157 = add i16 %396, %156
  store i16 %157, i16* %33, align 16
  %158 = add i16 %402, %157
  store i16 %158, i16* %34, align 2
  %159 = add i16 %408, %158
  store i16 %159, i16* %35, align 4
  %160 = add i16 %414, %159
  store i16 %160, i16* %36, align 2
  %161 = add i16 %420, %160
  store i16 %161, i16* %37, align 8
  %162 = add i16 %426, %161
  store i16 %162, i16* %38, align 2
  %163 = add i16 %432, %162
  store i16 %163, i16* %39, align 4
  %164 = add i16 %438, %163
  store i16 %164, i16* %40, align 2
  br i1 %42, label %205, label %165

165:                                              ; preds = %151
  %166 = zext i32 %2 to i64
  %167 = and i64 %166, 1
  %168 = icmp eq i32 %2, 1
  br i1 %168, label %190, label %169

169:                                              ; preds = %165
  %170 = sub nsw i64 %166, %167
  br label %171

171:                                              ; preds = %507, %169
  %172 = phi i64 [ 0, %169 ], [ %508, %507 ]
  %173 = phi i64 [ %170, %169 ], [ %509, %507 ]
  %174 = getelementptr inbounds i16, i16* %1, i64 %172
  %175 = load i16, i16* %174, align 2
  %176 = icmp eq i16 %175, 0
  br i1 %176, label %185, label %177

177:                                              ; preds = %171
  %178 = trunc i64 %172 to i16
  %179 = zext i16 %175 to i64
  %180 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = add i16 %181, 1
  store i16 %182, i16* %180, align 2
  %183 = zext i16 %181 to i64
  %184 = getelementptr inbounds i16, i16* %5, i64 %183
  store i16 %178, i16* %184, align 2
  br label %185

185:                                              ; preds = %171, %177
  %186 = or i64 %172, 1
  %187 = getelementptr inbounds i16, i16* %1, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = icmp eq i16 %188, 0
  br i1 %189, label %507, label %499

190:                                              ; preds = %507, %165
  %191 = phi i64 [ 0, %165 ], [ %508, %507 ]
  %192 = icmp eq i64 %167, 0
  br i1 %192, label %205, label %193

193:                                              ; preds = %190
  %194 = getelementptr inbounds i16, i16* %1, i64 %191
  %195 = load i16, i16* %194, align 2
  %196 = icmp eq i16 %195, 0
  br i1 %196, label %205, label %197

197:                                              ; preds = %193
  %198 = trunc i64 %191 to i16
  %199 = zext i16 %195 to i64
  %200 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = add i16 %201, 1
  store i16 %202, i16* %200, align 2
  %203 = zext i16 %201 to i64
  %204 = getelementptr inbounds i16, i16* %5, i64 %203
  store i16 %198, i16* %204, align 2
  br label %205

205:                                              ; preds = %190, %193, %197, %151
  switch i32 %0, label %208 [
    i32 0, label %212
    i32 1, label %206
  ]

206:                                              ; preds = %205
  %207 = icmp ugt i32 %136, 9
  br i1 %207, label %368, label %212

208:                                              ; preds = %205
  %209 = icmp ugt i32 %136, 9
  %210 = icmp eq i32 %0, 2
  %211 = and i1 %210, %209
  br i1 %211, label %368, label %212

212:                                              ; preds = %206, %205, %208
  %213 = phi i1 [ %210, %208 ], [ false, %205 ], [ false, %206 ]
  %214 = phi i16* [ getelementptr inbounds ([32 x i16], [32 x i16]* @Cr_z_inflate_table.dbase, i64 0, i64 0), %208 ], [ %5, %205 ], [ getelementptr inbounds ([31 x i16], [31 x i16]* @Cr_z_inflate_table.lbase, i64 0, i64 0), %206 ]
  %215 = phi i16* [ getelementptr inbounds ([32 x i16], [32 x i16]* @Cr_z_inflate_table.dext, i64 0, i64 0), %208 ], [ %5, %205 ], [ getelementptr inbounds ([31 x i16], [31 x i16]* @Cr_z_inflate_table.lext, i64 0, i64 0), %206 ]
  %216 = phi i32 [ 0, %208 ], [ 20, %205 ], [ 257, %206 ]
  %217 = phi i1 [ false, %208 ], [ false, %205 ], [ true, %206 ]
  %218 = shl i32 1, %136
  %219 = add i32 %218, -1
  %220 = load %struct.code*, %struct.code** %3, align 8
  %221 = trunc i32 %136 to i8
  br label %222

222:                                              ; preds = %342, %212
  %223 = phi i32 [ %301, %342 ], [ %134, %212 ]
  %224 = phi i32 [ %284, %342 ], [ 0, %212 ]
  %225 = phi i32 [ %335, %342 ], [ %136, %212 ]
  %226 = phi i32 [ %309, %342 ], [ 0, %212 ]
  %227 = phi i32 [ %336, %342 ], [ %218, %212 ]
  %228 = phi i32 [ %283, %342 ], [ 0, %212 ]
  %229 = phi i32 [ %304, %342 ], [ -1, %212 ]
  %230 = phi %struct.code* [ %311, %342 ], [ %220, %212 ]
  %231 = shl i32 1, %225
  br label %232

232:                                              ; preds = %306, %222
  %233 = phi i32 [ %223, %222 ], [ %301, %306 ]
  %234 = phi i32 [ %224, %222 ], [ %284, %306 ]
  %235 = phi i32 [ %228, %222 ], [ %283, %306 ]
  %236 = sub i32 %233, %226
  %237 = trunc i32 %236 to i8
  %238 = zext i32 %234 to i64
  %239 = getelementptr inbounds i16, i16* %5, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i32
  %242 = add nuw nsw i32 %241, 1
  %243 = icmp ult i32 %242, %216
  br i1 %243, label %254, label %244

244:                                              ; preds = %232
  %245 = icmp ugt i32 %216, %241
  br i1 %245, label %254, label %246

246:                                              ; preds = %244
  %247 = sub nsw i32 %241, %216
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i16, i16* %215, i64 %248
  %250 = load i16, i16* %249, align 2
  %251 = trunc i16 %250 to i8
  %252 = getelementptr inbounds i16, i16* %214, i64 %248
  %253 = load i16, i16* %252, align 2
  br label %254

254:                                              ; preds = %244, %232, %246
  %255 = phi i16 [ %253, %246 ], [ %240, %232 ], [ 0, %244 ]
  %256 = phi i8 [ %251, %246 ], [ 0, %232 ], [ 96, %244 ]
  %257 = shl i32 1, %236
  %258 = lshr i32 %235, %226
  br label %259

259:                                              ; preds = %259, %254
  %260 = phi i32 [ %231, %254 ], [ %261, %259 ]
  %261 = sub i32 %260, %257
  %262 = add i32 %261, %258
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %263, i32 0
  store i8 %256, i8* %264, align 2
  %265 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %263, i32 1
  store i8 %237, i8* %265, align 1
  %266 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %263, i32 2
  store i16 %255, i16* %266, align 2
  %267 = icmp eq i32 %261, 0
  br i1 %267, label %268, label %259

268:                                              ; preds = %259
  %269 = add i32 %233, -1
  %270 = shl i32 1, %269
  br label %271

271:                                              ; preds = %271, %268
  %272 = phi i32 [ %270, %268 ], [ %275, %271 ]
  %273 = and i32 %272, %235
  %274 = icmp eq i32 %273, 0
  %275 = lshr i32 %272, 1
  br i1 %274, label %276, label %271

276:                                              ; preds = %271
  %277 = icmp eq i32 %272, 0
  br i1 %277, label %282, label %278

278:                                              ; preds = %276
  %279 = add i32 %272, -1
  %280 = and i32 %279, %235
  %281 = add i32 %280, %272
  br label %282

282:                                              ; preds = %276, %278
  %283 = phi i32 [ %281, %278 ], [ 0, %276 ]
  %284 = add i32 %234, 1
  %285 = zext i32 %233 to i64
  %286 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %285
  %287 = load i16, i16* %286, align 2
  %288 = add i16 %287, -1
  store i16 %288, i16* %286, align 2
  %289 = icmp eq i16 %288, 0
  br i1 %289, label %290, label %300

290:                                              ; preds = %282
  %291 = icmp eq i32 %233, %132
  br i1 %291, label %356, label %292

292:                                              ; preds = %290
  %293 = zext i32 %284 to i64
  %294 = getelementptr inbounds i16, i16* %5, i64 %293
  %295 = load i16, i16* %294, align 2
  %296 = zext i16 %295 to i64
  %297 = getelementptr inbounds i16, i16* %1, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  br label %300

300:                                              ; preds = %292, %282
  %301 = phi i32 [ %299, %292 ], [ %233, %282 ]
  %302 = icmp ugt i32 %301, %136
  br i1 %302, label %303, label %306

303:                                              ; preds = %300
  %304 = and i32 %283, %219
  %305 = icmp eq i32 %304, %229
  br i1 %305, label %306, label %307

306:                                              ; preds = %303, %300
  br label %232

307:                                              ; preds = %303
  %308 = icmp eq i32 %226, 0
  %309 = select i1 %308, i32 %136, i32 %226
  %310 = zext i32 %231 to i64
  %311 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %310
  %312 = sub i32 %301, %309
  %313 = shl i32 1, %312
  %314 = icmp ult i32 %301, %132
  br i1 %314, label %315, label %333

315:                                              ; preds = %307, %325
  %316 = phi i32 [ %328, %325 ], [ %301, %307 ]
  %317 = phi i32 [ %327, %325 ], [ %313, %307 ]
  %318 = phi i32 [ %326, %325 ], [ %312, %307 ]
  %319 = zext i32 %316 to i64
  %320 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %319
  %321 = load i16, i16* %320, align 2
  %322 = zext i16 %321 to i32
  %323 = sub nsw i32 %317, %322
  %324 = icmp slt i32 %323, 1
  br i1 %324, label %330, label %325

325:                                              ; preds = %315
  %326 = add i32 %318, 1
  %327 = shl i32 %323, 1
  %328 = add i32 %326, %309
  %329 = icmp ult i32 %328, %132
  br i1 %329, label %315, label %330

330:                                              ; preds = %315, %325
  %331 = phi i32 [ %326, %325 ], [ %318, %315 ]
  %332 = shl i32 1, %331
  br label %333

333:                                              ; preds = %330, %307
  %334 = phi i32 [ %332, %330 ], [ %313, %307 ]
  %335 = phi i32 [ %331, %330 ], [ %312, %307 ]
  %336 = add i32 %334, %227
  %337 = icmp ugt i32 %336, 852
  %338 = and i1 %217, %337
  %339 = icmp ugt i32 %336, 592
  %340 = and i1 %213, %339
  %341 = or i1 %338, %340
  br i1 %341, label %368, label %342

342:                                              ; preds = %333
  %343 = trunc i32 %335 to i8
  %344 = load %struct.code*, %struct.code** %3, align 8
  %345 = zext i32 %304 to i64
  %346 = getelementptr inbounds %struct.code, %struct.code* %344, i64 %345, i32 0
  store i8 %343, i8* %346, align 2
  %347 = load %struct.code*, %struct.code** %3, align 8
  %348 = getelementptr inbounds %struct.code, %struct.code* %347, i64 %345, i32 1
  store i8 %221, i8* %348, align 1
  %349 = load %struct.code*, %struct.code** %3, align 8
  %350 = ptrtoint %struct.code* %311 to i64
  %351 = ptrtoint %struct.code* %349 to i64
  %352 = sub i64 %350, %351
  %353 = lshr exact i64 %352, 2
  %354 = trunc i64 %353 to i16
  %355 = getelementptr inbounds %struct.code, %struct.code* %349, i64 %345, i32 2
  store i16 %354, i16* %355, align 2
  br label %222

356:                                              ; preds = %290
  %357 = icmp eq i32 %283, 0
  br i1 %357, label %364, label %358

358:                                              ; preds = %356
  %359 = trunc i32 %236 to i8
  %360 = zext i32 %283 to i64
  %361 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %360, i32 0
  store i8 64, i8* %361, align 2
  %362 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %360, i32 1
  store i8 %359, i8* %362, align 1
  %363 = getelementptr inbounds %struct.code, %struct.code* %230, i64 %360, i32 2
  store i16 0, i16* %363, align 2
  br label %364

364:                                              ; preds = %356, %358
  %365 = load %struct.code*, %struct.code** %3, align 8
  %366 = zext i32 %227 to i64
  %367 = getelementptr inbounds %struct.code, %struct.code* %365, i64 %366
  store %struct.code* %367, %struct.code** %3, align 8
  store i32 %136, i32* %4, align 4
  br label %368

368:                                              ; preds = %333, %130, %139, %370, %376, %382, %388, %394, %400, %406, %412, %418, %424, %430, %436, %442, %206, %208, %147, %364, %488
  %369 = phi i32 [ 0, %488 ], [ 0, %364 ], [ -1, %147 ], [ 1, %208 ], [ 1, %206 ], [ -1, %442 ], [ -1, %436 ], [ -1, %430 ], [ -1, %424 ], [ -1, %418 ], [ -1, %412 ], [ -1, %406 ], [ -1, %400 ], [ -1, %394 ], [ -1, %388 ], [ -1, %382 ], [ -1, %376 ], [ -1, %370 ], [ -1, %139 ], [ -1, %130 ], [ 1, %333 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #2
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #2
  ret i32 %369

370:                                              ; preds = %139
  %371 = shl nsw i32 %145, 1
  %372 = load i16, i16* %12, align 2
  %373 = zext i16 %372 to i32
  %374 = sub nsw i32 %371, %373
  %375 = icmp slt i32 %374, 0
  br i1 %375, label %368, label %376

376:                                              ; preds = %370
  %377 = shl nsw i32 %374, 1
  %378 = load i16, i16* %13, align 8
  %379 = zext i16 %378 to i32
  %380 = sub nsw i32 %377, %379
  %381 = icmp slt i32 %380, 0
  br i1 %381, label %368, label %382

382:                                              ; preds = %376
  %383 = shl i32 %380, 1
  %384 = load i16, i16* %14, align 2
  %385 = zext i16 %384 to i32
  %386 = sub nsw i32 %383, %385
  %387 = icmp slt i32 %386, 0
  br i1 %387, label %368, label %388

388:                                              ; preds = %382
  %389 = shl i32 %386, 1
  %390 = load i16, i16* %15, align 4
  %391 = zext i16 %390 to i32
  %392 = sub nsw i32 %389, %391
  %393 = icmp slt i32 %392, 0
  br i1 %393, label %368, label %394

394:                                              ; preds = %388
  %395 = shl i32 %392, 1
  %396 = load i16, i16* %16, align 2
  %397 = zext i16 %396 to i32
  %398 = sub nsw i32 %395, %397
  %399 = icmp slt i32 %398, 0
  br i1 %399, label %368, label %400

400:                                              ; preds = %394
  %401 = shl i32 %398, 1
  %402 = load i16, i16* %17, align 16
  %403 = zext i16 %402 to i32
  %404 = sub nsw i32 %401, %403
  %405 = icmp slt i32 %404, 0
  br i1 %405, label %368, label %406

406:                                              ; preds = %400
  %407 = shl i32 %404, 1
  %408 = load i16, i16* %18, align 2
  %409 = zext i16 %408 to i32
  %410 = sub nsw i32 %407, %409
  %411 = icmp slt i32 %410, 0
  br i1 %411, label %368, label %412

412:                                              ; preds = %406
  %413 = shl i32 %410, 1
  %414 = load i16, i16* %19, align 4
  %415 = zext i16 %414 to i32
  %416 = sub nsw i32 %413, %415
  %417 = icmp slt i32 %416, 0
  br i1 %417, label %368, label %418

418:                                              ; preds = %412
  %419 = shl i32 %416, 1
  %420 = load i16, i16* %20, align 2
  %421 = zext i16 %420 to i32
  %422 = sub nsw i32 %419, %421
  %423 = icmp slt i32 %422, 0
  br i1 %423, label %368, label %424

424:                                              ; preds = %418
  %425 = shl i32 %422, 1
  %426 = load i16, i16* %21, align 8
  %427 = zext i16 %426 to i32
  %428 = sub nsw i32 %425, %427
  %429 = icmp slt i32 %428, 0
  br i1 %429, label %368, label %430

430:                                              ; preds = %424
  %431 = shl i32 %428, 1
  %432 = load i16, i16* %22, align 2
  %433 = zext i16 %432 to i32
  %434 = sub nsw i32 %431, %433
  %435 = icmp slt i32 %434, 0
  br i1 %435, label %368, label %436

436:                                              ; preds = %430
  %437 = shl i32 %434, 1
  %438 = load i16, i16* %23, align 4
  %439 = zext i16 %438 to i32
  %440 = sub nsw i32 %437, %439
  %441 = icmp slt i32 %440, 0
  br i1 %441, label %368, label %442

442:                                              ; preds = %436
  %443 = shl i32 %440, 1
  %444 = zext i16 %133 to i32
  %445 = sub nsw i32 %443, %444
  %446 = icmp slt i32 %445, 0
  br i1 %446, label %368, label %447

447:                                              ; preds = %442
  %448 = icmp eq i32 %445, 0
  br i1 %448, label %151, label %147

449:                                              ; preds = %104
  %450 = load i16, i16* %22, align 2
  %451 = icmp eq i16 %450, 0
  br i1 %451, label %452, label %111

452:                                              ; preds = %449
  %453 = load i16, i16* %21, align 8
  %454 = icmp eq i16 %453, 0
  br i1 %454, label %455, label %111

455:                                              ; preds = %452
  %456 = load i16, i16* %20, align 2
  %457 = icmp eq i16 %456, 0
  br i1 %457, label %458, label %111

458:                                              ; preds = %455
  %459 = load i16, i16* %19, align 4
  %460 = icmp eq i16 %459, 0
  br i1 %460, label %461, label %111

461:                                              ; preds = %458
  %462 = load i16, i16* %18, align 2
  %463 = icmp eq i16 %462, 0
  br i1 %463, label %464, label %111

464:                                              ; preds = %461
  %465 = load i16, i16* %17, align 16
  %466 = icmp eq i16 %465, 0
  br i1 %466, label %467, label %111

467:                                              ; preds = %464
  %468 = load i16, i16* %16, align 2
  %469 = icmp eq i16 %468, 0
  br i1 %469, label %470, label %111

470:                                              ; preds = %467
  %471 = load i16, i16* %15, align 4
  %472 = icmp eq i16 %471, 0
  br i1 %472, label %473, label %111

473:                                              ; preds = %470
  %474 = load i16, i16* %14, align 2
  %475 = icmp eq i16 %474, 0
  br i1 %475, label %476, label %111

476:                                              ; preds = %473
  %477 = load i16, i16* %13, align 8
  %478 = icmp eq i16 %477, 0
  br i1 %478, label %479, label %111

479:                                              ; preds = %476
  %480 = load i16, i16* %12, align 2
  %481 = icmp eq i16 %480, 0
  br i1 %481, label %482, label %111

482:                                              ; preds = %479
  %483 = load i16, i16* %11, align 4
  %484 = icmp eq i16 %483, 0
  br i1 %484, label %485, label %111

485:                                              ; preds = %482
  %486 = load i16, i16* %10, align 2
  %487 = icmp eq i16 %486, 0
  br i1 %487, label %488, label %108

488:                                              ; preds = %485
  %489 = load %struct.code*, %struct.code** %3, align 8
  %490 = getelementptr inbounds %struct.code, %struct.code* %489, i64 1
  store %struct.code* %490, %struct.code** %3, align 8
  %491 = getelementptr inbounds %struct.code, %struct.code* %489, i64 0, i32 0
  store i8 64, i8* %491, align 2
  %492 = getelementptr inbounds %struct.code, %struct.code* %489, i64 0, i32 1
  store i8 1, i8* %492, align 1
  %493 = getelementptr inbounds %struct.code, %struct.code* %489, i64 0, i32 2
  store i16 0, i16* %493, align 2
  %494 = load %struct.code*, %struct.code** %3, align 8
  %495 = getelementptr inbounds %struct.code, %struct.code* %494, i64 1
  store %struct.code* %495, %struct.code** %3, align 8
  %496 = getelementptr inbounds %struct.code, %struct.code* %494, i64 0, i32 0
  store i8 64, i8* %496, align 2
  %497 = getelementptr inbounds %struct.code, %struct.code* %494, i64 0, i32 1
  store i8 1, i8* %497, align 1
  %498 = getelementptr inbounds %struct.code, %struct.code* %494, i64 0, i32 2
  store i16 0, i16* %498, align 2
  store i32 1, i32* %4, align 4
  br label %368

499:                                              ; preds = %185
  %500 = trunc i64 %186 to i16
  %501 = zext i16 %188 to i64
  %502 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %501
  %503 = load i16, i16* %502, align 2
  %504 = add i16 %503, 1
  store i16 %504, i16* %502, align 2
  %505 = zext i16 %503 to i64
  %506 = getelementptr inbounds i16, i16* %5, i64 %505
  store i16 %500, i16* %506, align 2
  br label %507

507:                                              ; preds = %499, %185
  %508 = add nuw nsw i64 %172, 2
  %509 = add i64 %173, -2
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %190, label %171
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
