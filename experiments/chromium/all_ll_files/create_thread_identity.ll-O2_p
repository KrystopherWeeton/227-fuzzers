; ModuleID = '../../third_party/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc'
source_filename = "../../third_party/abseil-cpp/absl/synchronization/internal/create_thread_identity.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.absl::base_internal::ThreadIdentity" = type { %"struct.absl::base_internal::PerThreadSynch", %"struct.absl::base_internal::ThreadIdentity::WaiterState", %"struct.std::__1::atomic.0"*, %"struct.std::__1::atomic.0", %"struct.std::__1::atomic.0", %"struct.std::__1::atomic.5", %"struct.absl::base_internal::ThreadIdentity"* }
%"struct.absl::base_internal::PerThreadSynch" = type { %"struct.absl::base_internal::PerThreadSynch"*, %"struct.absl::base_internal::PerThreadSynch"*, i8, i8, i8, i8, i8, i32, %"struct.std::__1::atomic", %"struct.absl::SynchWaitParams"*, i64, i64, %"struct.absl::SynchLocksHeld"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.absl::SynchWaitParams" = type opaque
%"struct.absl::SynchLocksHeld" = type opaque
%"struct.absl::base_internal::ThreadIdentity::WaiterState" = type { [128 x i8] }
%"struct.std::__1::atomic.0" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i32 }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i8 }
%"class.absl::base_internal::SpinLock" = type { %"struct.std::__1::atomic.9" }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i32 }

@_ZN4absl24synchronization_internalL24thread_identity_freelistE = internal unnamed_addr global %"struct.absl::base_internal::ThreadIdentity"* null, align 8
@_ZN4absl24synchronization_internalL13freelist_lockE = internal global { { { i32 } } } zeroinitializer, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl24synchronization_internal21ReclaimThreadIdentityEPv(i8*) #0 {
  %2 = bitcast i8* %0 to %"struct.absl::base_internal::ThreadIdentity"*
  %3 = getelementptr inbounds i8, i8* %0, i64 56
  %4 = bitcast i8* %3 to %"struct.absl::SynchLocksHeld"**
  %5 = load %"struct.absl::SynchLocksHeld"*, %"struct.absl::SynchLocksHeld"** %4, align 8
  %6 = icmp eq %"struct.absl::SynchLocksHeld"* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.absl::SynchLocksHeld"* %5 to i8*
  tail call void @_ZN4absl13base_internal13LowLevelAlloc4FreeEPv(i8* nonnull %8) #4
  br label %9

9:                                                ; preds = %1, %7
  tail call void @_ZN4absl24synchronization_internal12PerThreadSem7DestroyEPNS_13base_internal14ThreadIdentityE(%"struct.absl::base_internal::ThreadIdentity"* %2) #4
  tail call void @_ZN4absl13base_internal26ClearCurrentThreadIdentityEv() #4
  %10 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0) monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %9
  %14 = or i32 %10, 1
  %15 = cmpxchg i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0), i32 %10, i32 %14 acquire monotonic
  %16 = extractvalue { i32, i1 } %15, 0
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %13, %9
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* bitcast ({ { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE to %"class.absl::base_internal::SpinLock"*)) #5
  br label %20

20:                                               ; preds = %13, %19
  %21 = load i64, i64* bitcast (%"struct.absl::base_internal::ThreadIdentity"** @_ZN4absl24synchronization_internalL24thread_identity_freelistE to i64*), align 8
  %22 = getelementptr inbounds i8, i8* %0, i64 216
  %23 = bitcast i8* %22 to i64*
  store i64 %21, i64* %23, align 8
  store i8* %0, i8** bitcast (%"struct.absl::base_internal::ThreadIdentity"** @_ZN4absl24synchronization_internalL24thread_identity_freelistE to i8**), align 8
  %24 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0) monotonic, align 4
  %25 = and i32 %24, 2
  %26 = atomicrmw xchg i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0), i32 %25 release
  %27 = icmp ugt i32 %26, 7
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* bitcast ({ { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE to %"class.absl::base_internal::SpinLock"*), i32 %26) #5
  br label %29

29:                                               ; preds = %20, %28
  ret void
}

declare void @_ZN4absl13base_internal13LowLevelAlloc4FreeEPv(i8*) local_unnamed_addr #1 section "malloc_hook"

declare void @_ZN4absl24synchronization_internal12PerThreadSem7DestroyEPNS_13base_internal14ThreadIdentityE(%"struct.absl::base_internal::ThreadIdentity"*) local_unnamed_addr #1

declare void @_ZN4absl13base_internal26ClearCurrentThreadIdentityEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.absl::base_internal::ThreadIdentity"* @_ZN4absl24synchronization_internal20CreateThreadIdentityEv() local_unnamed_addr #0 {
  %1 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0) monotonic, align 4
  %2 = and i32 %1, 1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %10

4:                                                ; preds = %0
  %5 = or i32 %1, 1
  %6 = cmpxchg i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0), i32 %1, i32 %5 acquire monotonic
  %7 = extractvalue { i32, i1 } %6, 0
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %4, %0
  tail call void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"* bitcast ({ { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE to %"class.absl::base_internal::SpinLock"*)) #5
  br label %11

11:                                               ; preds = %10, %4
  %12 = load %"struct.absl::base_internal::ThreadIdentity"*, %"struct.absl::base_internal::ThreadIdentity"** @_ZN4absl24synchronization_internalL24thread_identity_freelistE, align 8
  %13 = icmp eq %"struct.absl::base_internal::ThreadIdentity"* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %12, i64 0, i32 6
  %16 = bitcast %"struct.absl::base_internal::ThreadIdentity"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* bitcast (%"struct.absl::base_internal::ThreadIdentity"** @_ZN4absl24synchronization_internalL24thread_identity_freelistE to i64*), align 8
  br label %18

18:                                               ; preds = %14, %11
  %19 = load atomic i32, i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0) monotonic, align 4
  %20 = and i32 %19, 2
  %21 = atomicrmw xchg i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE, i64 0, i32 0, i32 0, i32 0), i32 %20 release
  %22 = icmp ugt i32 %21, 7
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  tail call void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"* bitcast ({ { { i32 } } }* @_ZN4absl24synchronization_internalL13freelist_lockE to %"class.absl::base_internal::SpinLock"*), i32 %21) #5
  br label %24

24:                                               ; preds = %23, %18
  br i1 %13, label %25, label %31

25:                                               ; preds = %24
  %26 = tail call i8* @_ZN4absl13base_internal13LowLevelAlloc5AllocEm(i64 479) #4
  %27 = ptrtoint i8* %26 to i64
  %28 = add nsw i64 %27, 255
  %29 = and i64 %28, -256
  %30 = inttoptr i64 %29 to %"struct.absl::base_internal::ThreadIdentity"*
  br label %31

31:                                               ; preds = %24, %25
  %32 = phi %"struct.absl::base_internal::ThreadIdentity"* [ %30, %25 ], [ %12, %24 ]
  %33 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 9
  %34 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 6
  store i8 0, i8* %34, align 4
  %35 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 7
  store i32 0, i32* %35, align 8
  %36 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %37 = bitcast %"struct.absl::base_internal::ThreadIdentity"* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 17, i1 false) #4
  %38 = bitcast %"struct.absl::SynchWaitParams"** %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #4
  store atomic i32 0, i32* %36 monotonic, align 4
  %39 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 5
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 3
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 4
  store i8 0, i8* %41, align 2
  %42 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 0, i32 12
  store %"struct.absl::SynchLocksHeld"* null, %"struct.absl::SynchLocksHeld"** %42, align 8
  %43 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 2
  store %"struct.std::__1::atomic.0"* null, %"struct.std::__1::atomic.0"** %43, align 8
  %44 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %44 monotonic, align 4
  %45 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %45 monotonic, align 4
  %46 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store atomic i8 0, i8* %46 monotonic, align 1
  %47 = getelementptr inbounds %"struct.absl::base_internal::ThreadIdentity", %"struct.absl::base_internal::ThreadIdentity"* %32, i64 0, i32 6
  store %"struct.absl::base_internal::ThreadIdentity"* null, %"struct.absl::base_internal::ThreadIdentity"** %47, align 8
  tail call void @_ZN4absl24synchronization_internal12PerThreadSem4InitEPNS_13base_internal14ThreadIdentityE(%"struct.absl::base_internal::ThreadIdentity"* %32) #4
  tail call void @_ZN4absl13base_internal24SetCurrentThreadIdentityEPNS0_14ThreadIdentityEPFvPvE(%"struct.absl::base_internal::ThreadIdentity"* %32, void (i8*)* nonnull @_ZN4absl24synchronization_internal21ReclaimThreadIdentityEPv) #4
  ret %"struct.absl::base_internal::ThreadIdentity"* %32
}

declare void @_ZN4absl24synchronization_internal12PerThreadSem4InitEPNS_13base_internal14ThreadIdentityE(%"struct.absl::base_internal::ThreadIdentity"*) local_unnamed_addr #1

declare void @_ZN4absl13base_internal24SetCurrentThreadIdentityEPNS0_14ThreadIdentityEPFvPvE(%"struct.absl::base_internal::ThreadIdentity"*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: cold
declare void @_ZN4absl13base_internal8SpinLock8SlowLockEv(%"class.absl::base_internal::SpinLock"*) local_unnamed_addr #2

; Function Attrs: cold
declare void @_ZN4absl13base_internal8SpinLock10SlowUnlockEj(%"class.absl::base_internal::SpinLock"*, i32) local_unnamed_addr #2

declare i8* @_ZN4absl13base_internal13LowLevelAlloc5AllocEm(i64) local_unnamed_addr #1 section "malloc_hook"

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { cold nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
