; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_postproc.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_postproc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.vp9_ppflags_t = type { i32, i32, i32 }

@vpx_rv = external local_unnamed_addr constant [0 x i16], align 2
@.str = private unnamed_addr constant [36 x i8] c"Failed to allocate MFQE framebuffer\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c"Failed to allocate post-processing buffer\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_post_proc_down_and_across_c(i16* nocapture readonly, i16* nocapture, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca <8 x i16>, align 16
  %9 = bitcast <8 x i16>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #4
  %10 = icmp sgt i32 %4, 0
  %11 = bitcast <8 x i16>* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  br i1 %10, label %12, label %117

12:                                               ; preds = %7
  %13 = icmp sgt i32 %5, 0
  %14 = sext i32 %2 to i64
  %15 = sext i32 %3 to i64
  %16 = zext i32 %5 to i64
  %17 = mul nsw i64 %14, -2
  %18 = icmp slt i32 %6, 0
  %19 = shl nsw i64 %14, 1
  %20 = zext i32 %5 to i64
  br label %21

21:                                               ; preds = %97, %12
  %22 = phi i32 [ 0, %12 ], [ %115, %97 ]
  %23 = phi i16* [ %0, %12 ], [ %113, %97 ]
  %24 = phi i16* [ %1, %12 ], [ %114, %97 ]
  br i1 %13, label %28, label %94

25:                                               ; preds = %53
  %26 = bitcast i16* %24 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 2
  store <8 x i16> %27, <8 x i16>* %8, align 16
  br i1 %13, label %59, label %97

28:                                               ; preds = %21, %53
  %29 = phi i64 [ %57, %53 ], [ 0, %21 ]
  %30 = getelementptr inbounds i16, i16* %23, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = add nsw i64 %17, %29
  %34 = getelementptr inbounds i16, i16* %23, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = sub nsw i32 %32, %36
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = icmp sgt i32 %40, %6
  br i1 %41, label %53, label %42

42:                                               ; preds = %28
  %43 = sub i64 %29, %14
  %44 = getelementptr inbounds i16, i16* %23, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = sub nsw i32 %32, %46
  %48 = icmp slt i32 %47, 0
  %49 = sub nsw i32 0, %47
  %50 = select i1 %48, i32 %49, i32 %47
  %51 = icmp sgt i32 %50, %6
  %52 = or i1 %51, %18
  br i1 %52, label %53, label %118

53:                                               ; preds = %42, %28, %118, %128, %138
  %54 = phi i32 [ %145, %138 ], [ %32, %128 ], [ %32, %118 ], [ %32, %42 ], [ %32, %28 ]
  %55 = trunc i32 %54 to i16
  %56 = getelementptr inbounds i16, i16* %24, i64 %29
  store i16 %55, i16* %56, align 2
  %57 = add nuw nsw i64 %29, 1
  %58 = icmp eq i64 %57, %16
  br i1 %58, label %25, label %28

59:                                               ; preds = %25, %91
  %60 = phi i64 [ %92, %91 ], [ 0, %25 ]
  %61 = getelementptr inbounds i16, i16* %24, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  %64 = and i64 %60, 7
  %65 = getelementptr inbounds <8 x i16>, <8 x i16>* %8, i64 0, i64 %64
  store i16 %62, i16* %65, align 2
  %66 = add nsw i64 %60, -2
  %67 = getelementptr inbounds i16, i16* %24, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %63, %69
  %71 = icmp slt i32 %70, 0
  %72 = sub nsw i32 0, %70
  %73 = select i1 %71, i32 %72, i32 %70
  %74 = icmp sgt i32 %73, %6
  br i1 %74, label %85, label %75

75:                                               ; preds = %59
  %76 = add nsw i64 %60, -1
  %77 = getelementptr inbounds i16, i16* %24, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = sub nsw i32 %63, %79
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = icmp sgt i32 %83, %6
  br i1 %84, label %85, label %146

85:                                               ; preds = %59, %75, %146, %154, %164, %174
  %86 = icmp ugt i64 %60, 1
  br i1 %86, label %87, label %91

87:                                               ; preds = %85
  %88 = and i64 %66, 7
  %89 = getelementptr inbounds <8 x i16>, <8 x i16>* %8, i64 0, i64 %88
  %90 = load i16, i16* %89, align 2
  store i16 %90, i16* %67, align 2
  br label %91

91:                                               ; preds = %85, %87
  %92 = add nuw nsw i64 %60, 1
  %93 = icmp eq i64 %92, %20
  br i1 %93, label %97, label %59

94:                                               ; preds = %21
  %95 = bitcast i16* %24 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2
  store <8 x i16> %96, <8 x i16>* %8, align 16
  br label %97

97:                                               ; preds = %91, %94, %25
  %98 = phi i32 [ 0, %25 ], [ 0, %94 ], [ %5, %91 ]
  %99 = add nsw i32 %98, -2
  %100 = and i32 %99, 7
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds <8 x i16>, <8 x i16>* %8, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds i16, i16* %24, i64 %104
  store i16 %103, i16* %105, align 2
  %106 = add nsw i32 %98, -1
  %107 = and i32 %106, 7
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds <8 x i16>, <8 x i16>* %8, i64 0, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = sext i32 %106 to i64
  %112 = getelementptr inbounds i16, i16* %24, i64 %111
  store i16 %110, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %23, i64 %14
  %114 = getelementptr inbounds i16, i16* %24, i64 %15
  %115 = add nuw nsw i32 %22, 1
  %116 = icmp eq i32 %115, %4
  br i1 %116, label %117, label %21

117:                                              ; preds = %97, %7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #4
  ret void

118:                                              ; preds = %42
  %119 = add nsw i64 %29, %14
  %120 = getelementptr inbounds i16, i16* %23, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = sub nsw i32 %32, %122
  %124 = icmp slt i32 %123, 0
  %125 = sub nsw i32 0, %123
  %126 = select i1 %124, i32 %125, i32 %123
  %127 = icmp sgt i32 %126, %6
  br i1 %127, label %53, label %128

128:                                              ; preds = %118
  %129 = add nsw i64 %19, %29
  %130 = getelementptr inbounds i16, i16* %23, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = sub nsw i32 %32, %132
  %134 = icmp slt i32 %133, 0
  %135 = sub nsw i32 0, %133
  %136 = select i1 %134, i32 %135, i32 %133
  %137 = icmp sgt i32 %136, %6
  br i1 %137, label %53, label %138

138:                                              ; preds = %128
  %139 = shl nuw nsw i32 %32, 2
  %140 = add nuw nsw i32 %36, 4
  %141 = add nuw nsw i32 %140, %46
  %142 = add nuw nsw i32 %139, %141
  %143 = add nuw nsw i32 %142, %122
  %144 = add nuw nsw i32 %143, %132
  %145 = lshr i32 %144, 3
  br label %53

146:                                              ; preds = %75
  %147 = load i16, i16* %61, align 2
  %148 = zext i16 %147 to i32
  %149 = sub nsw i32 %63, %148
  %150 = icmp slt i32 %149, 0
  %151 = sub nsw i32 0, %149
  %152 = select i1 %150, i32 %151, i32 %149
  %153 = icmp sgt i32 %152, %6
  br i1 %153, label %85, label %154

154:                                              ; preds = %146
  %155 = add nuw nsw i64 %60, 1
  %156 = getelementptr inbounds i16, i16* %24, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = sub nsw i32 %63, %158
  %160 = icmp slt i32 %159, 0
  %161 = sub nsw i32 0, %159
  %162 = select i1 %160, i32 %161, i32 %159
  %163 = icmp sgt i32 %162, %6
  br i1 %163, label %85, label %164

164:                                              ; preds = %154
  %165 = add nuw nsw i64 %60, 2
  %166 = getelementptr inbounds i16, i16* %24, i64 %165
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = sub nsw i32 %63, %168
  %170 = icmp slt i32 %169, 0
  %171 = sub nsw i32 0, %169
  %172 = select i1 %170, i32 %171, i32 %169
  %173 = icmp sgt i32 %172, %6
  br i1 %173, label %85, label %174

174:                                              ; preds = %164
  %175 = shl nuw nsw i32 %148, 2
  %176 = add nuw nsw i32 %69, 4
  %177 = add nuw nsw i32 %176, %79
  %178 = add nuw nsw i32 %175, %177
  %179 = add nuw nsw i32 %178, %158
  %180 = add nuw nsw i32 %179, %168
  %181 = lshr i32 %180, 3
  %182 = trunc i32 %181 to i16
  store i16 %182, i16* %65, align 2
  br label %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_mbpost_proc_across_ip_c(i16* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x i16], align 16
  %7 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #4
  %8 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 0
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 1
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 2
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 3
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 4
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 5
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 6
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 7
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 8
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 9
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 10
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 11
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 12
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 13
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 14
  %23 = icmp sgt i32 %2, 0
  %24 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 32, i1 false)
  br i1 %23, label %25, label %163

25:                                               ; preds = %5
  %26 = add i32 %3, 8
  %27 = icmp sgt i32 %26, 0
  %28 = sext i32 %1 to i64
  %29 = zext i32 %26 to i64
  br label %30

30:                                               ; preds = %159, %25
  %31 = phi i32 [ 0, %25 ], [ %161, %159 ]
  %32 = phi i16* [ %0, %25 ], [ %160, %159 ]
  %33 = getelementptr inbounds i16, i16* %32, i64 -8
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  store i16 0, i16* %8, align 16
  %36 = getelementptr inbounds i16, i16* %32, i64 -7
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  store i16 0, i16* %9, align 2
  %39 = getelementptr inbounds i16, i16* %32, i64 -6
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  store i16 0, i16* %10, align 4
  %42 = getelementptr inbounds i16, i16* %32, i64 -5
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  store i16 0, i16* %11, align 2
  %45 = getelementptr inbounds i16, i16* %32, i64 -4
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  store i16 0, i16* %12, align 8
  %48 = getelementptr inbounds i16, i16* %32, i64 -3
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  store i16 0, i16* %13, align 2
  %51 = getelementptr inbounds i16, i16* %32, i64 -2
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  store i16 0, i16* %14, align 4
  %54 = getelementptr inbounds i16, i16* %32, i64 -1
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  store i16 0, i16* %15, align 2
  %57 = load i16, i16* %32, align 2
  %58 = zext i16 %57 to i32
  store i16 0, i16* %16, align 16
  %59 = getelementptr inbounds i16, i16* %32, i64 1
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  store i16 0, i16* %17, align 2
  %62 = getelementptr inbounds i16, i16* %32, i64 2
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  store i16 0, i16* %18, align 4
  %65 = getelementptr inbounds i16, i16* %32, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  store i16 0, i16* %19, align 2
  %68 = getelementptr inbounds i16, i16* %32, i64 4
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  store i16 0, i16* %20, align 8
  %71 = getelementptr inbounds i16, i16* %32, i64 5
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  store i16 0, i16* %21, align 2
  %74 = getelementptr inbounds i16, i16* %32, i64 6
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  store i16 0, i16* %22, align 4
  br i1 %27, label %77, label %159

77:                                               ; preds = %30
  %78 = add nuw nsw i32 %35, %38
  %79 = add nuw nsw i32 %78, %41
  %80 = add nuw nsw i32 %79, %44
  %81 = add nuw nsw i32 %80, %47
  %82 = add nuw nsw i32 %81, %50
  %83 = add nuw nsw i32 %82, %53
  %84 = add nuw nsw i32 %83, %56
  %85 = add nuw nsw i32 %84, %58
  %86 = add nuw nsw i32 %85, %61
  %87 = add nuw nsw i32 %86, %64
  %88 = add nuw nsw i32 %87, %67
  %89 = add nuw nsw i32 %88, %70
  %90 = add nuw nsw i32 %89, %73
  %91 = add nuw nsw i32 %90, %76
  %92 = mul nuw nsw i32 %76, %76
  %93 = mul nuw nsw i32 %73, %73
  %94 = mul nuw nsw i32 %70, %70
  %95 = mul nuw nsw i32 %67, %67
  %96 = mul nuw nsw i32 %64, %64
  %97 = mul nuw nsw i32 %61, %61
  %98 = mul nuw nsw i32 %58, %58
  %99 = mul nuw nsw i32 %56, %56
  %100 = mul nuw nsw i32 %53, %53
  %101 = mul nuw nsw i32 %50, %50
  %102 = mul nuw nsw i32 %47, %47
  %103 = mul nuw nsw i32 %44, %44
  %104 = mul nuw nsw i32 %41, %41
  %105 = mul nuw nsw i32 %38, %38
  %106 = mul nuw nsw i32 %35, %35
  %107 = add nuw nsw i32 %105, %106
  %108 = add nuw nsw i32 %104, %107
  %109 = add nuw nsw i32 %103, %108
  %110 = add nuw nsw i32 %102, %109
  %111 = add nuw nsw i32 %101, %110
  %112 = add nuw nsw i32 %100, %111
  %113 = add nuw nsw i32 %99, %112
  %114 = add nuw nsw i32 %98, %113
  %115 = add nuw nsw i32 %97, %114
  %116 = add nuw nsw i32 %96, %115
  %117 = add nuw nsw i32 %95, %116
  %118 = add nuw nsw i32 %94, %117
  %119 = add nuw nsw i32 %93, %118
  %120 = add nuw nsw i32 %92, %119
  br label %121

121:                                              ; preds = %153, %77
  %122 = phi i64 [ 0, %77 ], [ %157, %153 ]
  %123 = phi i32 [ %91, %77 ], [ %135, %153 ]
  %124 = phi i32 [ %120, %77 ], [ %137, %153 ]
  %125 = add nuw nsw i64 %122, 7
  %126 = getelementptr inbounds i16, i16* %32, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = add nsw i64 %122, -8
  %130 = getelementptr inbounds i16, i16* %32, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = sub nsw i32 %128, %132
  %134 = add nuw nsw i32 %132, %128
  %135 = add nsw i32 %133, %123
  %136 = mul nsw i32 %133, %134
  %137 = add nsw i32 %136, %124
  %138 = getelementptr inbounds i16, i16* %32, i64 %122
  %139 = load i16, i16* %138, align 2
  %140 = and i64 %122, 15
  %141 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %140
  store i16 %139, i16* %141, align 2
  %142 = mul nsw i32 %137, 15
  %143 = mul nsw i32 %135, %135
  %144 = sub nsw i32 %142, %143
  %145 = icmp slt i32 %144, %4
  br i1 %145, label %146, label %153

146:                                              ; preds = %121
  %147 = add nsw i32 %135, 8
  %148 = load i16, i16* %138, align 2
  %149 = zext i16 %148 to i32
  %150 = add nsw i32 %147, %149
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i16
  store i16 %152, i16* %141, align 2
  br label %153

153:                                              ; preds = %146, %121
  %154 = and i64 %129, 15
  %155 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %154
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %130, align 2
  %157 = add nuw nsw i64 %122, 1
  %158 = icmp eq i64 %157, %29
  br i1 %158, label %159, label %121

159:                                              ; preds = %153, %30
  %160 = getelementptr inbounds i16, i16* %32, i64 %28
  %161 = add nuw nsw i32 %31, 1
  %162 = icmp eq i32 %161, %2
  br i1 %162, label %163, label %30

163:                                              ; preds = %159, %5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_mbpost_proc_down_c(i16* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [16 x i16], align 16
  %7 = tail call i32 @rand() #4
  %8 = and i32 %7, 63
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [0 x i16], [0 x i16]* @vpx_rv, i64 0, i64 %9
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %181

12:                                               ; preds = %5
  %13 = bitcast [16 x i16]* %6 to i8*
  %14 = add i32 %2, 8
  %15 = icmp sgt i32 %14, 0
  %16 = mul nsw i32 %1, 7
  %17 = sext i32 %16 to i64
  %18 = mul nsw i32 %1, -8
  %19 = sext i32 %18 to i64
  %20 = sext i32 %1 to i64
  %21 = zext i32 %3 to i64
  %22 = mul nsw i64 %20, -8
  %23 = bitcast [16 x i16]* %6 to i8*
  %24 = mul nsw i64 %20, -7
  %25 = mul nsw i64 %20, -6
  %26 = mul nsw i64 %20, -5
  %27 = mul nsw i64 %20, -4
  %28 = mul nsw i64 %20, -3
  %29 = mul nsw i64 %20, -2
  %30 = sub nsw i64 0, %20
  %31 = shl nsw i64 %20, 1
  %32 = mul nsw i64 %20, 3
  %33 = shl nsw i64 %20, 2
  %34 = mul nsw i64 %20, 5
  %35 = mul nsw i64 %20, 6
  br label %36

36:                                               ; preds = %178, %12
  %37 = phi i64 [ 0, %12 ], [ %179, %178 ]
  %38 = getelementptr inbounds i16, i16* %0, i64 %37
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #4
  %39 = mul i64 %37, 17
  %40 = and i64 %39, 127
  %41 = getelementptr inbounds i16, i16* %38, i64 %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 32, i1 false)
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds i16, i16* %38, i64 %24
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds i16, i16* %38, i64 %25
  %48 = load i16, i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = getelementptr inbounds i16, i16* %38, i64 %26
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = getelementptr inbounds i16, i16* %38, i64 %27
  %54 = load i16, i16* %53, align 2
  %55 = zext i16 %54 to i32
  %56 = getelementptr inbounds i16, i16* %38, i64 %28
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = getelementptr inbounds i16, i16* %38, i64 %29
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = getelementptr inbounds i16, i16* %38, i64 %30
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = load i16, i16* %38, align 2
  %66 = zext i16 %65 to i32
  %67 = getelementptr inbounds i16, i16* %38, i64 %20
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds i16, i16* %38, i64 %31
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = getelementptr inbounds i16, i16* %38, i64 %32
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = getelementptr inbounds i16, i16* %38, i64 %33
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = getelementptr inbounds i16, i16* %38, i64 %34
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds i16, i16* %38, i64 %35
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = getelementptr inbounds i16, i16* %10, i64 %40
  br i1 %15, label %86, label %178

86:                                               ; preds = %36
  %87 = add nuw nsw i32 %43, %46
  %88 = add nuw nsw i32 %87, %49
  %89 = add nuw nsw i32 %88, %52
  %90 = add nuw nsw i32 %89, %55
  %91 = add nuw nsw i32 %90, %58
  %92 = add nuw nsw i32 %91, %61
  %93 = add nuw nsw i32 %92, %64
  %94 = add nuw nsw i32 %93, %66
  %95 = add nuw nsw i32 %94, %69
  %96 = add nuw nsw i32 %95, %72
  %97 = add nuw nsw i32 %96, %75
  %98 = add nuw nsw i32 %97, %78
  %99 = add nuw nsw i32 %98, %81
  %100 = add nuw nsw i32 %99, %84
  %101 = mul nuw nsw i32 %84, %84
  %102 = mul nuw nsw i32 %81, %81
  %103 = mul nuw nsw i32 %78, %78
  %104 = mul nuw nsw i32 %75, %75
  %105 = mul nuw nsw i32 %72, %72
  %106 = mul nuw nsw i32 %69, %69
  %107 = mul nuw nsw i32 %66, %66
  %108 = mul nuw nsw i32 %64, %64
  %109 = mul nuw nsw i32 %61, %61
  %110 = mul nuw nsw i32 %58, %58
  %111 = mul nuw nsw i32 %55, %55
  %112 = mul nuw nsw i32 %52, %52
  %113 = mul nuw nsw i32 %49, %49
  %114 = mul nuw nsw i32 %46, %46
  %115 = mul nuw nsw i32 %43, %43
  %116 = add nuw nsw i32 %114, %115
  %117 = add nuw nsw i32 %113, %116
  %118 = add nuw nsw i32 %112, %117
  %119 = add nuw nsw i32 %111, %118
  %120 = add nuw nsw i32 %110, %119
  %121 = add nuw nsw i32 %109, %120
  %122 = add nuw nsw i32 %108, %121
  %123 = add nuw nsw i32 %107, %122
  %124 = add nuw nsw i32 %106, %123
  %125 = add nuw nsw i32 %105, %124
  %126 = add nuw nsw i32 %104, %125
  %127 = add nuw nsw i32 %103, %126
  %128 = add nuw nsw i32 %102, %127
  %129 = add nuw nsw i32 %101, %128
  br label %130

130:                                              ; preds = %176, %86
  %131 = phi i16 [ %177, %176 ], [ %65, %86 ]
  %132 = phi i32 [ %147, %176 ], [ %100, %86 ]
  %133 = phi i32 [ %145, %176 ], [ %129, %86 ]
  %134 = phi i16* [ %173, %176 ], [ %38, %86 ]
  %135 = phi i32 [ %174, %176 ], [ 0, %86 ]
  %136 = getelementptr inbounds i16, i16* %134, i64 %17
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nuw nsw i32 %138, %138
  %140 = getelementptr inbounds i16, i16* %134, i64 %19
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = mul nuw nsw i32 %142, %142
  %144 = sub nsw i32 %139, %143
  %145 = add nsw i32 %144, %133
  %146 = sub nsw i32 %138, %142
  %147 = add nsw i32 %146, %132
  %148 = and i32 %135, 15
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %149
  store i16 %131, i16* %150, align 2
  %151 = mul nsw i32 %145, 15
  %152 = mul nsw i32 %147, %147
  %153 = sub nsw i32 %151, %152
  %154 = icmp slt i32 %153, %4
  br i1 %154, label %155, label %167

155:                                              ; preds = %130
  %156 = and i32 %135, 127
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i16, i16* %85, i64 %157
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = add nsw i32 %147, %160
  %162 = load i16, i16* %134, align 2
  %163 = zext i16 %162 to i32
  %164 = add nsw i32 %161, %163
  %165 = lshr i32 %164, 4
  %166 = trunc i32 %165 to i16
  store i16 %166, i16* %150, align 2
  br label %167

167:                                              ; preds = %155, %130
  %168 = add nuw i32 %135, 8
  %169 = and i32 %168, 15
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %170
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %140, align 2
  %173 = getelementptr inbounds i16, i16* %134, i64 %20
  %174 = add nuw nsw i32 %135, 1
  %175 = icmp eq i32 %174, %14
  br i1 %175, label %178, label %176

176:                                              ; preds = %167
  %177 = load i16, i16* %173, align 2
  br label %130

178:                                              ; preds = %167, %36
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #4
  %179 = add nuw nsw i64 %37, 1
  %180 = icmp eq i64 %179, %21
  br i1 %180, label %181, label %36

181:                                              ; preds = %178, %5
  ret void
}

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_deblock(%struct.VP9Common* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i8*) local_unnamed_addr #0 {
  %6 = sitofp i32 %3 to double
  %7 = fmul double %6, 6.000000e-05
  %8 = fmul double %7, %6
  %9 = fmul double %8, %6
  %10 = fmul double %6, 6.700000e-03
  %11 = fmul double %10, %6
  %12 = fsub double %9, %11
  %13 = fmul double %6, 3.060000e-01
  %14 = fadd double %13, %12
  %15 = fadd double %14, 0x3F7A9FBE76C8B439
  %16 = fadd double %15, 5.000000e-01
  %17 = fptosi double %16 to i32
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 29
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %69, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %30 = bitcast i8** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %56 = load i32, i32* %55, align 4
  %57 = shl i64 %25, 1
  %58 = inttoptr i64 %57 to i16*
  %59 = shl i64 %46, 1
  %60 = inttoptr i64 %59 to i16*
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %58, i16* %60, i32 %33, i32 %54, i32 %41, i32 %37, i32 %17)
  %61 = shl i64 %28, 1
  %62 = inttoptr i64 %61 to i16*
  %63 = shl i64 %49, 1
  %64 = inttoptr i64 %63 to i16*
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %62, i16* %64, i32 %35, i32 %56, i32 %43, i32 %39, i32 %17)
  %65 = shl i64 %31, 1
  %66 = inttoptr i64 %65 to i16*
  %67 = shl i64 %52, 1
  %68 = inttoptr i64 %67 to i16*
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %66, i16* %68, i32 %35, i32 %56, i32 %43, i32 %39, i32 %17)
  br label %130

69:                                               ; preds = %5
  %70 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 32
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 34
  %73 = load i32, i32* %72, align 4
  %74 = trunc i32 %17 to i8
  %75 = shl nsw i32 %73, 4
  %76 = sext i32 %75 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 %74, i64 %76, i1 false)
  %77 = icmp sgt i32 %71, 0
  br i1 %77, label %78, label %130

78:                                               ; preds = %69
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %80 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %81 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %83 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %86 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %88 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %90 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  br label %91

91:                                               ; preds = %91, %78
  %92 = phi i32 [ 0, %78 ], [ %128, %91 ]
  %93 = load i8*, i8** %79, align 8
  %94 = shl nsw i32 %92, 4
  %95 = load i32, i32* %80, align 8
  %96 = mul nsw i32 %95, %94
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %93, i64 %97
  %99 = load i8*, i8** %81, align 8
  %100 = load i32, i32* %82, align 8
  %101 = mul nsw i32 %100, %94
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %99, i64 %102
  %104 = load i32, i32* %83, align 8
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %98, i8* %103, i32 %95, i32 %100, i32 %104, i8* %4, i32 16) #4
  %105 = load i8*, i8** %84, align 8
  %106 = shl nsw i32 %92, 3
  %107 = load i32, i32* %85, align 4
  %108 = mul nsw i32 %107, %106
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %105, i64 %109
  %111 = load i8*, i8** %86, align 8
  %112 = load i32, i32* %87, align 4
  %113 = mul nsw i32 %112, %106
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = load i32, i32* %88, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %110, i8* %115, i32 %107, i32 %112, i32 %116, i8* %4, i32 8) #4
  %117 = load i8*, i8** %89, align 8
  %118 = load i32, i32* %85, align 4
  %119 = mul nsw i32 %118, %106
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %117, i64 %120
  %122 = load i8*, i8** %90, align 8
  %123 = load i32, i32* %87, align 4
  %124 = mul nsw i32 %123, %106
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %122, i64 %125
  %127 = load i32, i32* %88, align 4
  tail call void @vpx_post_proc_down_and_across_mb_row_sse2(i8* %121, i8* %126, i32 %118, i32 %123, i32 %127, i8* %4, i32 8) #4
  %128 = add nuw nsw i32 %92, 1
  %129 = icmp eq i32 %128, %71
  br i1 %129, label %130, label %91

130:                                              ; preds = %91, %69, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_post_proc_down_and_across_mb_row_sse2(i8*, i8*, i32, i32, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoise(%struct.VP9Common* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i8*) local_unnamed_addr #0 {
  tail call void @vp9_deblock(%struct.VP9Common* %0, %struct.yv12_buffer_config* %1, %struct.yv12_buffer_config* %2, i32 %3, i8* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_post_proc_frame(%struct.VP9Common*, %struct.yv12_buffer_config* nocapture, %struct.vp9_ppflags_t* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 52
  %8 = shl nsw i32 %6, 1
  %9 = select i1 %7, i32 105, i32 %8
  %10 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 12
  %14 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  %15 = icmp eq %struct.yv12_buffer_config* %14, null
  br i1 %15, label %269, label %16

16:                                               ; preds = %4
  %17 = icmp eq i32 %11, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = bitcast %struct.yv12_buffer_config* %1 to i8*
  %20 = bitcast %struct.yv12_buffer_config* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* nonnull align 8 %20, i64 160, i1 false)
  br label %269

21:                                               ; preds = %16
  tail call void @vpx_clear_system_state() #4
  %22 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 77
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %30

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 38
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 2
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 3
  store i32 1, i32* %29, align 4
  br label %30

30:                                               ; preds = %25, %21
  %31 = and i32 %11, 8
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %85

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 4
  %35 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %36 = icmp eq %struct.MODE_INFO* %35, null
  br i1 %36, label %37, label %52

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 44
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = tail call i8* @vpx_calloc(i64 %40, i64 68) #4
  %42 = bitcast %struct.MODE_INFO** %34 to i8**
  store i8* %41, i8** %42, align 8
  %43 = icmp eq i8* %41, null
  br i1 %43, label %269, label %44

44:                                               ; preds = %37
  %45 = bitcast i8* %41 to %struct.MODE_INFO*
  %46 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %45, i64 %48
  %50 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %49, i64 1
  %51 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 5
  store %struct.MODE_INFO* %50, %struct.MODE_INFO** %51, align 8
  br label %52

52:                                               ; preds = %33, %44
  %53 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21, i32 17
  %54 = load i8*, i8** %53, align 8
  %55 = icmp ne i8* %54, null
  %56 = and i32 %11, 3
  %57 = icmp eq i32 %56, 0
  %58 = or i1 %57, %55
  br i1 %58, label %85, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  %61 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %62 = load i32, i32* %61, align 16
  %63 = add nsw i32 %62, 15
  %64 = and i32 %63, -16
  %65 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, 15
  %68 = and i32 %67, -16
  %69 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %74 = load i32, i32* %73, align 16
  %75 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 87
  %76 = load i32, i32* %75, align 16
  %77 = tail call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %60, i32 %64, i32 %68, i32 %70, i32 %72, i32 %74, i32 160, i32 %76) #4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %59
  %80 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %80, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0)) #4
  br label %81

81:                                               ; preds = %79, %59
  %82 = load i8*, i8** %53, align 8
  %83 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20, i32 20
  %84 = load i64, i64* %83, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 -128, i64 %84, i1 false)
  br label %85

85:                                               ; preds = %52, %30, %81
  %86 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %87 = load i32, i32* %86, align 16
  %88 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %95 = load i32, i32* %94, align 16
  %96 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 87
  %97 = load i32, i32* %96, align 16
  %98 = tail call i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config* %12, i32 %87, i32 %89, i32 %91, i32 %93, i32 %95, i32 32, i32 %97, %struct.vpx_codec_frame_buffer* null, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)* null, i8* null) #4
  %99 = icmp slt i32 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %85
  %101 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %101, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %102

102:                                              ; preds = %100, %85
  %103 = and i32 %11, 3
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %107 = load i8*, i8** %106, align 8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = sext i32 %3 to i64
  %111 = tail call i8* @vpx_calloc(i64 %110, i64 1) #4
  store i8* %111, i8** %106, align 8
  br label %112

112:                                              ; preds = %105, %102, %109
  %113 = and i32 %11, 4
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %112
  %116 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 8
  %117 = load i8*, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %119, label %125

119:                                              ; preds = %115
  %120 = load i32, i32* %86, align 16
  %121 = add nsw i32 %120, 256
  %122 = sext i32 %121 to i64
  %123 = tail call i8* @vpx_calloc(i64 %122, i64 1) #4
  store i8* %123, i8** %116, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %269, label %125

125:                                              ; preds = %119, %115, %112
  br i1 %32, label %126, label %175

126:                                              ; preds = %125
  %127 = load i32, i32* %22, align 4
  %128 = icmp ugt i32 %127, 1
  br i1 %128, label %129, label %175

129:                                              ; preds = %126
  %130 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 3
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %175, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 80
  %135 = load i32, i32* %134, align 16
  %136 = icmp eq i32 %135, 8
  br i1 %136, label %137, label %175

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 2
  %139 = load i32, i32* %138, align 8
  %140 = icmp slt i32 %139, 171
  br i1 %140, label %141, label %175

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 38
  %143 = load i32, i32* %142, align 4
  %144 = sub nsw i32 %143, %139
  %145 = icmp sgt i32 %144, 19
  br i1 %145, label %146, label %175

146:                                              ; preds = %141
  tail call void @vp9_mfqe(%struct.VP9Common* %0) #4
  %147 = and i32 %11, 2
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = and i32 %11, 1
  %151 = icmp eq i32 %150, 0
  %152 = and i1 %151, %149
  br i1 %152, label %155, label %153

153:                                              ; preds = %146
  %154 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  tail call void @vpx_yv12_copy_frame_c(%struct.yv12_buffer_config* %12, %struct.yv12_buffer_config* %154) #4
  br label %155

155:                                              ; preds = %146, %153
  br i1 %148, label %156, label %169

156:                                              ; preds = %155
  %157 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21, i32 17
  %158 = load i8*, i8** %157, align 8
  %159 = icmp eq i8* %158, null
  br i1 %159, label %169, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  %162 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %2, i64 0, i32 1
  %163 = load i32, i32* %162, align 4
  %164 = mul i32 %163, 10
  %165 = add i32 %9, -50
  %166 = add i32 %165, %164
  %167 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %168 = load i8*, i8** %167, align 8
  tail call fastcc void @deblock_and_de_macro_block(%struct.VP9Common* %0, %struct.yv12_buffer_config* %161, %struct.yv12_buffer_config* %12, i32 %166, i8* %168)
  br label %195

169:                                              ; preds = %156, %155
  %170 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  br i1 %151, label %174, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %173 = load i8*, i8** %172, align 8
  tail call void @vp9_deblock(%struct.VP9Common* %0, %struct.yv12_buffer_config* %170, %struct.yv12_buffer_config* %12, i32 %9, i8* %173)
  br label %195

174:                                              ; preds = %169
  tail call void @vpx_yv12_copy_frame_c(%struct.yv12_buffer_config* %170, %struct.yv12_buffer_config* %12) #4
  br label %195

175:                                              ; preds = %129, %141, %137, %133, %126, %125
  %176 = and i32 %11, 2
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %187, label %178

178:                                              ; preds = %175
  %179 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  %180 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %2, i64 0, i32 1
  %181 = load i32, i32* %180, align 4
  %182 = mul i32 %181, 10
  %183 = add i32 %9, -50
  %184 = add i32 %183, %182
  %185 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %186 = load i8*, i8** %185, align 8
  tail call fastcc void @deblock_and_de_macro_block(%struct.VP9Common* %0, %struct.yv12_buffer_config* %179, %struct.yv12_buffer_config* %12, i32 %184, i8* %186)
  br label %195

187:                                              ; preds = %175
  %188 = and i32 %11, 1
  %189 = icmp eq i32 %188, 0
  %190 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %13, align 8
  br i1 %189, label %194, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %193 = load i8*, i8** %192, align 8
  tail call void @vp9_deblock(%struct.VP9Common* %0, %struct.yv12_buffer_config* %190, %struct.yv12_buffer_config* %12, i32 %9, i8* %193)
  br label %195

194:                                              ; preds = %187
  tail call void @vpx_yv12_copy_frame_c(%struct.yv12_buffer_config* %190, %struct.yv12_buffer_config* %12) #4
  br label %195

195:                                              ; preds = %178, %194, %191, %160, %174, %171
  %196 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 38
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 2
  store i32 %197, i32* %198, align 8
  %199 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 3
  store i32 1, i32* %199, align 4
  br i1 %114, label %200, label %239

200:                                              ; preds = %195
  %201 = getelementptr inbounds %struct.vp9_ppflags_t, %struct.vp9_ppflags_t* %2, i64 0, i32 2
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 0
  %204 = load i32, i32* %203, align 8
  %205 = icmp eq i32 %204, %9
  br i1 %205, label %206, label %213

206:                                              ; preds = %200
  %207 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, %202
  br i1 %209, label %210, label %213

210:                                              ; preds = %206
  %211 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 6
  %212 = load i32, i32* %211, align 8
  br label %227

213:                                              ; preds = %206, %200
  tail call void @vpx_clear_system_state() #4
  %214 = sitofp i32 %202 to double
  %215 = fadd double %214, 5.000000e-01
  %216 = sitofp i32 %9 to double
  %217 = fmul double %216, 6.000000e-01
  %218 = fdiv double %217, 6.300000e+01
  %219 = fadd double %218, %215
  %220 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 8
  %221 = load i8*, i8** %220, align 8
  %222 = load i32, i32* %86, align 16
  %223 = add nsw i32 %222, 256
  %224 = tail call i32 @vpx_setup_noise(double %219, i8* %221, i32 %223) #4
  %225 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 6
  store i32 %224, i32* %225, align 8
  store i32 %9, i32* %203, align 8
  %226 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 1
  store i32 %202, i32* %226, align 4
  br label %227

227:                                              ; preds = %210, %213
  %228 = phi i32 [ %212, %210 ], [ %224, %213 ]
  %229 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20, i32 13
  %230 = load i8*, i8** %229, align 8
  %231 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 8
  %232 = load i8*, i8** %231, align 8
  %233 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %12, i64 0, i32 0
  %234 = load i32, i32* %233, align 8
  %235 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20, i32 4
  %238 = load i32, i32* %237, align 8
  tail call void @vpx_plane_add_noise_sse2(i8* %230, i8* %232, i32 %228, i32 %228, i32 %234, i32 %236, i32 %238) #4
  br label %239

239:                                              ; preds = %227, %195
  %240 = bitcast %struct.yv12_buffer_config* %1 to i8*
  %241 = bitcast %struct.yv12_buffer_config* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %240, i8* align 8 %241, i64 160, i1 false)
  %242 = load i32, i32* %86, align 16
  %243 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  store i32 %242, i32* %243, align 8
  %244 = load i32, i32* %88, align 4
  %245 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  store i32 %244, i32* %245, align 4
  %246 = load i32, i32* %90, align 8
  %247 = ashr i32 %242, %246
  %248 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  store i32 %247, i32* %248, align 4
  %249 = load i32, i32* %92, align 4
  %250 = ashr i32 %244, %249
  %251 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  store i32 %250, i32* %251, align 8
  br i1 %32, label %252, label %269

252:                                              ; preds = %239
  %253 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 4
  %254 = load %struct.MODE_INFO*, %struct.MODE_INFO** %253, align 8
  %255 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 45
  %256 = bitcast %struct.MODE_INFO** %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %struct.MODE_INFO** %253 to i64*
  store i64 %257, i64* %258, align 8
  store %struct.MODE_INFO* %254, %struct.MODE_INFO** %255, align 8
  %259 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %260 = load i32, i32* %259, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %254, i64 %261
  %263 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %262, i64 1
  %264 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 46
  store %struct.MODE_INFO* %263, %struct.MODE_INFO** %264, align 16
  %265 = inttoptr i64 %257 to %struct.MODE_INFO*
  %266 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %265, i64 %261
  %267 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %266, i64 1
  %268 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 5
  store %struct.MODE_INFO* %267, %struct.MODE_INFO** %268, align 8
  br label %269

269:                                              ; preds = %239, %252, %119, %37, %4, %18
  %270 = phi i32 [ 0, %18 ], [ -1, %4 ], [ 1, %37 ], [ 1, %119 ], [ 0, %252 ], [ 0, %239 ]
  ret i32 %270
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vpx_clear_system_state() local_unnamed_addr #3

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #3

declare i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @vpx_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_codec_frame_buffer*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i8*) local_unnamed_addr #3

declare void @vp9_mfqe(%struct.VP9Common*) local_unnamed_addr #3

declare void @vpx_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @deblock_and_de_macro_block(%struct.VP9Common* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i32, i8*) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 29
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %98, label %10

10:                                               ; preds = %5
  %11 = sitofp i32 %3 to double
  %12 = fmul double %11, 6.000000e-05
  %13 = insertelement <2 x double> <double undef, double 6.700000e-03>, double %12, i32 0
  %14 = insertelement <2 x double> undef, double %11, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = fmul <2 x double> %13, %15
  %17 = fmul <2 x double> %16, %15
  %18 = extractelement <2 x double> %17, i32 0
  %19 = extractelement <2 x double> %17, i32 1
  %20 = fsub double %18, %19
  %21 = fmul double %11, 3.060000e-01
  %22 = fadd double %21, %20
  %23 = fadd double %22, 0x3F7A9FBE76C8B439
  %24 = fadd double %23, 5.000000e-01
  %25 = fptosi double %24 to i32
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = shl i64 %28, 1
  %30 = inttoptr i64 %29 to i16*
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %32 = bitcast i8** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = shl i64 %33, 1
  %35 = inttoptr i64 %34 to i16*
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %30, i16* %35, i32 %37, i32 %39, i32 %41, i32 %43, i32 %25)
  %44 = load i64, i64* %32, align 8
  %45 = shl i64 %44, 1
  %46 = inttoptr i64 %45 to i16*
  %47 = load i32, i32* %38, align 8
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp sgt i32 %3, 20
  %53 = select i1 %52, i32 %3, i32 20
  %54 = mul i32 %53, 10
  %55 = add i32 %54, -500
  %56 = sdiv i32 %55, 8
  %57 = add nsw i32 %56, 50
  %58 = mul nsw i32 %57, %57
  %59 = udiv i32 %58, 3
  tail call void @vp9_highbd_mbpost_proc_across_ip_c(i16* %46, i32 %47, i32 %49, i32 %51, i32 %59)
  %60 = load i64, i64* %32, align 8
  %61 = shl i64 %60, 1
  %62 = inttoptr i64 %61 to i16*
  %63 = load i32, i32* %38, align 8
  %64 = load i32, i32* %48, align 4
  %65 = load i32, i32* %50, align 8
  tail call void @vp9_highbd_mbpost_proc_down_c(i16* %62, i32 %63, i32 %64, i32 %65, i32 %59)
  %66 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %67 = bitcast i8** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = shl i64 %68, 1
  %70 = inttoptr i64 %69 to i16*
  %71 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %72 = bitcast i8** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = shl i64 %73, 1
  %75 = inttoptr i64 %74 to i16*
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %83 = load i32, i32* %82, align 4
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %70, i16* %75, i32 %77, i32 %79, i32 %81, i32 %83, i32 %25)
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %85 = bitcast i8** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = shl i64 %86, 1
  %88 = inttoptr i64 %87 to i16*
  %89 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  %90 = bitcast i8** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = shl i64 %91, 1
  %93 = inttoptr i64 %92 to i16*
  %94 = load i32, i32* %76, align 4
  %95 = load i32, i32* %78, align 4
  %96 = load i32, i32* %80, align 8
  %97 = load i32, i32* %82, align 4
  tail call void @vp9_highbd_post_proc_down_and_across_c(i16* %88, i16* %93, i32 %94, i32 %95, i32 %96, i32 %97, i32 %25)
  br label %119

98:                                               ; preds = %5
  tail call void @vp9_deblock(%struct.VP9Common* %0, %struct.yv12_buffer_config* %1, %struct.yv12_buffer_config* %2, i32 %3, i8* %4)
  %99 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  %107 = icmp sgt i32 %3, 20
  %108 = select i1 %107, i32 %3, i32 20
  %109 = mul i32 %108, 10
  %110 = add i32 %109, -500
  %111 = sdiv i32 %110, 8
  %112 = add nsw i32 %111, 50
  %113 = mul nsw i32 %112, %112
  %114 = udiv i32 %113, 3
  tail call void @vpx_mbpost_proc_across_ip_sse2(i8* %100, i32 %102, i32 %104, i32 %106, i32 %114) #4
  %115 = load i8*, i8** %99, align 8
  %116 = load i32, i32* %101, align 8
  %117 = load i32, i32* %103, align 4
  %118 = load i32, i32* %105, align 8
  tail call void @vpx_mbpost_proc_down_sse2(i8* %115, i32 %116, i32 %117, i32 %118, i32 %114) #4
  br label %119

119:                                              ; preds = %98, %10
  ret void
}

declare i32 @vpx_setup_noise(double, i8*, i32) local_unnamed_addr #3

declare void @vpx_plane_add_noise_sse2(i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @vpx_mbpost_proc_across_ip_sse2(i8*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @vpx_mbpost_proc_down_sse2(i8*, i32, i32, i32, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
