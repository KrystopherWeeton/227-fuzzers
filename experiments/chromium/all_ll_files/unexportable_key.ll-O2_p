; ModuleID = '../../crypto/unexportable_key.cc'
source_filename = "../../crypto/unexportable_key.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crypto::UnexportableKeyProvider" = type { i32 (...)** }
%"class.crypto::UnexportableSigningKey" = type { i32 (...)** }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZN6cryptoL15g_mock_providerE = internal unnamed_addr global %"class.crypto::UnexportableKeyProvider"* ()* null, align 8
@.str = private unnamed_addr constant [33 x i8] c"../../crypto/unexportable_key.cc\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"!func\00", align 1
@_ZTVN6crypto22UnexportableSigningKeyE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.crypto::UnexportableSigningKey"*)* @_ZN6crypto22UnexportableSigningKeyD2Ev to i8*), i8* bitcast (void (%"class.crypto::UnexportableSigningKey"*)* @_ZN6crypto22UnexportableSigningKeyD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN6crypto23UnexportableKeyProviderE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.crypto::UnexportableKeyProvider"*)* @_ZN6crypto23UnexportableKeyProviderD2Ev to i8*), i8* bitcast (void (%"class.crypto::UnexportableKeyProvider"*)* @_ZN6crypto23UnexportableKeyProviderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN6crypto22UnexportableSigningKeyD1Ev = hidden unnamed_addr alias void (%"class.crypto::UnexportableSigningKey"*), void (%"class.crypto::UnexportableSigningKey"*)* @_ZN6crypto22UnexportableSigningKeyD2Ev
@_ZN6crypto23UnexportableKeyProviderD1Ev = hidden unnamed_addr alias void (%"class.crypto::UnexportableKeyProvider"*), void (%"class.crypto::UnexportableKeyProvider"*)* @_ZN6crypto23UnexportableKeyProviderD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6crypto22UnexportableSigningKeyD2Ev(%"class.crypto::UnexportableSigningKey"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6crypto22UnexportableSigningKeyD0Ev(%"class.crypto::UnexportableSigningKey"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6crypto23UnexportableKeyProviderD2Ev(%"class.crypto::UnexportableKeyProvider"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6crypto23UnexportableKeyProviderD0Ev(%"class.crypto::UnexportableKeyProvider"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crypto::UnexportableKeyProvider"* @_ZN6crypto26GetUnexportableKeyProviderEv() local_unnamed_addr #3 {
  %1 = load %"class.crypto::UnexportableKeyProvider"* ()*, %"class.crypto::UnexportableKeyProvider"* ()** @_ZN6cryptoL15g_mock_providerE, align 8
  %2 = icmp eq %"class.crypto::UnexportableKeyProvider"* ()* %1, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  %4 = tail call %"class.crypto::UnexportableKeyProvider"* %1() #8
  br label %5

5:                                                ; preds = %0, %3
  %6 = phi %"class.crypto::UnexportableKeyProvider"* [ %4, %3 ], [ null, %0 ]
  ret %"class.crypto::UnexportableKeyProvider"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6crypto8internal36SetUnexportableKeyProviderForTestingEPFNSt3__110unique_ptrINS_23UnexportableKeyProviderENS1_14default_deleteIS3_EEEEvE(%"class.crypto::UnexportableKeyProvider"* ()*) local_unnamed_addr #3 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = load %"class.crypto::UnexportableKeyProvider"* ()*, %"class.crypto::UnexportableKeyProvider"* ()** @_ZN6cryptoL15g_mock_providerE, align 8
  %4 = icmp eq %"class.crypto::UnexportableKeyProvider"* ()* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = icmp eq %"class.crypto::UnexportableKeyProvider"* ()* %0, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 91, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #8
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  br label %10

10:                                               ; preds = %7, %5, %1
  %11 = phi %"class.crypto::UnexportableKeyProvider"* ()* [ %0, %1 ], [ null, %5 ], [ null, %7 ]
  store %"class.crypto::UnexportableKeyProvider"* ()* %11, %"class.crypto::UnexportableKeyProvider"* ()** @_ZN6cryptoL15g_mock_providerE, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
