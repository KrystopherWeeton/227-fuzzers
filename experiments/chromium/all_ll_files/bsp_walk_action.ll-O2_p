; ModuleID = '../../components/viz/service/display/bsp_walk_action.cc'
source_filename = "../../components/viz/service/display/bsp_walk_action.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.viz::BspWalkActionDrawPolygon" = type <{ %"class.viz::BspWalkAction", %"class.viz::DirectRenderer"*, %"class.gfx::Rect"*, i8, [7 x i8] }>
%"class.viz::BspWalkAction" = type { i32 (...)** }
%"class.viz::DirectRenderer" = type <{ i32 (...)**, %"class.viz::RendererSettings"*, %"struct.viz::DebugRendererSettings"*, %"class.viz::OutputSurface"*, %"class.viz::DisplayResourceProvider"*, %"class.viz::OverlayProcessorInterface"*, i8, i8, i8, [5 x i8], %"class.base::flat_map.59", %"class.base::flat_map.69", %"class.base::flat_map.69", %"class.base::flat_map.79", %"class.base::flat_map.89", i8, i8, [2 x i8], %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", i8, [3 x i8], %"class.gfx::Rect", %"class.gfx::Size", %"struct.viz::DirectRenderer::DrawingFrame", i8, [7 x i8], %"class.base::TimeTicks", %"class.gfx::Size", %"class.gfx::Size", float, %"class.gfx::ColorSpace", %"class.absl::optional.167", i8, [7 x i8] }>
%"class.viz::RendererSettings" = type opaque
%"struct.viz::DebugRendererSettings" = type opaque
%"class.viz::OutputSurface" = type { i32 (...)**, %"struct.viz::OutputSurface::Capabilities", %class.scoped_refptr, %"class.std::__1::unique_ptr", i32, %class.SkMatrix44 }
%"struct.viz::OutputSurface::Capabilities" = type { i32, i32, i8, i32, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, [15 x i32] }
%class.scoped_refptr = type { %"class.viz::ContextProvider"* }
%"class.viz::ContextProvider" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::SoftwareOutputDevice"* }
%"class.viz::SoftwareOutputDevice" = type { i32 (...)**, %class.scoped_refptr.0, %"class.viz::SoftwareOutputDeviceClient"*, %"class.gfx::Size", %"class.gfx::Rect", %class.sk_sp, %"class.std::__1::unique_ptr.2" }
%class.scoped_refptr.0 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.viz::SoftwareOutputDeviceClient" = type { i32 (...)** }
%class.sk_sp = type { %class.SkSurface* }
%class.SkSurface = type { %class.SkRefCnt.base, %class.SkSurfaceProps, i32, i32, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.gfx::VSyncProvider"* }
%"class.gfx::VSyncProvider" = type opaque
%"class.viz::DisplayResourceProvider" = type <{ %"class.base::trace_event::MemoryDumpProvider", i32, [4 x i8], %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.26", %"class.base::flat_map", %class.scoped_refptr.57, i32, %"class.viz::ResourceIdGenerator", i32, i32, i8, [3 x i8] }>
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.9", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.21", %"class.std::__1::__compressed_pair.23", [4 x i8] }>
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11", %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i64 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { float }
%"class.std::__1::unordered_map.26" = type { %"class.std::__1::__hash_table.27" }
%"class.std::__1::__hash_table.27" = type <{ %"class.std::__1::unique_ptr.28", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.46", [4 x i8] }>
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::__hash_node_base.31"** }
%"struct.std::__1::__hash_node_base.31" = type { %"struct.std::__1::__hash_node_base.31"* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::__bucket_list_deallocator.33" }
%"class.std::__1::__bucket_list_deallocator.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base.31" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.52" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.std::__1::pair"* }
%class.scoped_refptr.57 = type { %"class.viz::ResourceFence"* }
%"class.viz::ResourceFence" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.58", [4 x i8] }>
%"class.base::RefCountedThreadSafe.58" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.viz::ResourceIdGenerator" = type { i32, i32 }
%"class.viz::OverlayProcessorInterface" = type { i32 (...)** }
%"class.base::flat_map.59" = type { %"class.base::internal::flat_tree.60" }
%"class.base::internal::flat_tree.60" = type { %"class.std::__1::vector.61" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.std::__1::pair.63"*, %"struct.std::__1::pair.63"*, %"class.std::__1::__compressed_pair.64" }
%"struct.std::__1::pair.63" = type opaque
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.std::__1::pair.63"* }
%"class.base::flat_map.69" = type { %"class.base::internal::flat_tree.70" }
%"class.base::internal::flat_tree.70" = type { %"class.std::__1::vector.71" }
%"class.std::__1::vector.71" = type { %"class.std::__1::__vector_base.72" }
%"class.std::__1::__vector_base.72" = type { %"struct.std::__1::pair.73"*, %"struct.std::__1::pair.73"*, %"class.std::__1::__compressed_pair.74" }
%"struct.std::__1::pair.73" = type opaque
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.std::__1::pair.73"* }
%"class.base::flat_map.79" = type { %"class.base::internal::flat_tree.80" }
%"class.base::internal::flat_tree.80" = type { %"class.std::__1::vector.81" }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %"struct.std::__1::pair.83"*, %"struct.std::__1::pair.83"*, %"class.std::__1::__compressed_pair.84" }
%"struct.std::__1::pair.83" = type opaque
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.std::__1::pair.83"* }
%"class.base::flat_map.89" = type { %"class.base::internal::flat_tree.90" }
%"class.base::internal::flat_tree.90" = type { %"class.std::__1::vector.91" }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.std::__1::pair.93"*, %"struct.std::__1::pair.93"*, %"class.std::__1::__compressed_pair.94" }
%"struct.std::__1::pair.93" = type opaque
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::pair.93"* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"struct.viz::DirectRenderer::DrawingFrame" = type { %"class.std::__1::vector.99"*, %"class.viz::AggregatedRenderPass"*, %"class.viz::AggregatedRenderPass"*, %"class.gfx::Rect", %"class.std::__1::vector.111", %"class.gfx::Size", %"class.gfx::DisplayColorSpaces", %"class.gfx::Transform", %"class.gfx::Transform", %"class.std::__1::vector.148", %"class.absl::optional.162" }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"class.std::__1::unique_ptr.101"*, %"class.std::__1::unique_ptr.101"*, %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::unique_ptr.101" = type opaque
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.std::__1::unique_ptr.101"* }
%"class.viz::AggregatedRenderPass" = type <{ %"class.viz::RenderPassInternal", %"class.util::IdType", i8, i8, [6 x i8] }>
%"class.viz::RenderPassInternal" = type { %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.123", i8, i8, i8, i8, %"class.std::__1::vector.128", %"class.viz::QuadList", %"class.cc::ListContainer.142" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.107" }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.118" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.109, [20 x float], i32, [4 x i8], %"class.std::__1::vector.111", i32, [4 x i8] }>
%class.sk_sp.109 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.110, i32, %"class.absl::optional", i8, i32 }
%class.sk_sp.110 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.123" = type { %"class.absl::optional_internal::optional_data.124" }
%"class.absl::optional_internal::optional_data.124" = type { %"class.absl::optional_internal::optional_data_base.125" }
%"class.absl::optional_internal::optional_data_base.125" = type { %"class.absl::optional_internal::optional_data_dtor_base.126" }
%"class.absl::optional_internal::optional_data_dtor_base.126" = type { i8, %union.anon.127 }
%union.anon.127 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.std::__1::unique_ptr.130"*, %"class.std::__1::unique_ptr.130"*, %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::unique_ptr.130" = type opaque
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.std::__1::unique_ptr.130"* }
%"class.viz::QuadList" = type { %"class.cc::ListContainer" }
%"class.cc::ListContainer" = type { %"class.cc::ListContainerHelper" }
%"class.cc::ListContainerHelper" = type { %"class.std::__1::unique_ptr.136" }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.cc::ListContainerHelper::CharAllocator"* }
%"class.cc::ListContainerHelper::CharAllocator" = type opaque
%"class.cc::ListContainer.142" = type { %"class.cc::ListContainerHelper" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i64 }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.gfx::Rect"* }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.143" }
%"class.absl::optional.143" = type { %"class.absl::optional_internal::optional_data.144" }
%"class.absl::optional_internal::optional_data.144" = type { %"class.absl::optional_internal::optional_data_base.145" }
%"class.absl::optional_internal::optional_data_base.145" = type { %"class.absl::optional_internal::optional_data_dtor_base.146" }
%"class.absl::optional_internal::optional_data_dtor_base.146" = type { i8, %union.anon.147 }
%union.anon.147 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.std::__1::vector.148" = type { %"class.std::__1::__vector_base.149" }
%"class.std::__1::__vector_base.149" = type { %"class.viz::OverlayCandidate"*, %"class.viz::OverlayCandidate"*, %"class.std::__1::__compressed_pair.157" }
%"class.viz::OverlayCandidate" = type { i32, i32, %"class.gfx::ColorSpace", %"class.gfx::Size", %"class.gfx::RectF", %"class.gfx::RectF", %"class.absl::optional.150", i8, i8, %"class.util::IdType.155", %"struct.gpu::Mailbox", i32, i8, i32, i32, i32, i8, i8, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.absl::optional.150" = type { %"class.absl::optional_internal::optional_data.151" }
%"class.absl::optional_internal::optional_data.151" = type { %"class.absl::optional_internal::optional_data_base.152" }
%"class.absl::optional_internal::optional_data_base.152" = type { %"class.absl::optional_internal::optional_data_dtor_base.153" }
%"class.absl::optional_internal::optional_data_dtor_base.153" = type { i8, %union.anon.154 }
%union.anon.154 = type { %"class.gfx::Rect" }
%"class.util::IdType.155" = type { %"class.base::StrongAlias.156" }
%"class.base::StrongAlias.156" = type { i32 }
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.viz::OverlayCandidate"* }
%"class.absl::optional.162" = type { %"class.absl::optional_internal::optional_data.163" }
%"class.absl::optional_internal::optional_data.163" = type { %"class.absl::optional_internal::optional_data_base.164" }
%"class.absl::optional_internal::optional_data_base.164" = type { %"class.absl::optional_internal::optional_data_dtor_base.165" }
%"class.absl::optional_internal::optional_data_dtor_base.165" = type { i8, %union.anon.166 }
%union.anon.166 = type { %"struct.viz::OverlayProcessorInterface::OutputSurfaceOverlayPlane" }
%"struct.viz::OverlayProcessorInterface::OutputSurfaceOverlayPlane" = type { i32, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::Size", i32, %"class.gfx::ColorSpace", i8, i32, %"struct.gpu::Mailbox" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.167" = type { %"class.absl::optional_internal::optional_data.168" }
%"class.absl::optional_internal::optional_data.168" = type { %"class.absl::optional_internal::optional_data_base.169" }
%"class.absl::optional_internal::optional_data_base.169" = type { %"class.absl::optional_internal::optional_data_dtor_base.170" }
%"class.absl::optional_internal::optional_data_dtor_base.170" = type { i8, %union.anon.171 }
%union.anon.171 = type { i32 }
%"class.viz::BspWalkActionToVector" = type { %"class.viz::BspWalkAction", %"class.std::__1::vector.184"* }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"class.viz::DrawPolygon"**, %"class.viz::DrawPolygon"**, %"class.std::__1::__compressed_pair.186" }
%"class.viz::DrawPolygon" = type <{ %"class.std::__1::vector.172", %"class.gfx::Vector3dF", i32, %"class.viz::DrawQuad"*, i8, [7 x i8] }>
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"class.gfx::Point3F"*, %"class.gfx::Point3F"*, %"class.std::__1::__compressed_pair.174" }
%"class.gfx::Point3F" = type { float, float, float }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.gfx::Point3F"* }
%"class.gfx::Vector3dF" = type { float, float, float }
%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional.150", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.179", float, i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.absl::optional.179" = type { %"class.absl::optional_internal::optional_data.180" }
%"class.absl::optional_internal::optional_data.180" = type { %"class.absl::optional_internal::optional_data_base.181" }
%"class.absl::optional_internal::optional_data_base.181" = type { %"class.absl::optional_internal::optional_data_dtor_base.182" }
%"class.absl::optional_internal::optional_data_dtor_base.182" = type { i8, %union.anon.183 }
%union.anon.183 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType.155"] }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.viz::DrawPolygon"** }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZTVN3viz24BspWalkActionDrawPolygonE = hidden unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::BspWalkActionDrawPolygon"*, %"class.viz::DrawPolygon"*)* @_ZN3viz24BspWalkActionDrawPolygonclEPNS_11DrawPolygonE to i8*)] }, align 8
@__const._ZN3viz24BspWalkActionDrawPolygonclEPNS_11DrawPolygonE.inverse_transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@_ZTVN3viz21BspWalkActionToVectorE = hidden unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::BspWalkActionToVector"*, %"class.viz::DrawPolygon"*)* @_ZN3viz21BspWalkActionToVectorclEPNS_11DrawPolygonE to i8*)] }, align 8
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN3viz24BspWalkActionDrawPolygonC1EPNS_14DirectRendererERKN3gfx4RectEb = hidden unnamed_addr alias void (%"class.viz::BspWalkActionDrawPolygon"*, %"class.viz::DirectRenderer"*, %"class.gfx::Rect"*, i1), void (%"class.viz::BspWalkActionDrawPolygon"*, %"class.viz::DirectRenderer"*, %"class.gfx::Rect"*, i1)* @_ZN3viz24BspWalkActionDrawPolygonC2EPNS_14DirectRendererERKN3gfx4RectEb
@_ZN3viz21BspWalkActionToVectorC1EPNSt3__16vectorIPNS_11DrawPolygonENS1_9allocatorIS4_EEEE = hidden unnamed_addr alias void (%"class.viz::BspWalkActionToVector"*, %"class.std::__1::vector.184"*), void (%"class.viz::BspWalkActionToVector"*, %"class.std::__1::vector.184"*)* @_ZN3viz21BspWalkActionToVectorC2EPNSt3__16vectorIPNS_11DrawPolygonENS1_9allocatorIS4_EEEE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz24BspWalkActionDrawPolygonC2EPNS_14DirectRendererERKN3gfx4RectEb(%"class.viz::BspWalkActionDrawPolygon"* nocapture, %"class.viz::DirectRenderer"*, %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) unnamed_addr #0 align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN3viz24BspWalkActionDrawPolygonE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 1
  store %"class.viz::DirectRenderer"* %1, %"class.viz::DirectRenderer"** %7, align 8
  %8 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 2
  store %"class.gfx::Rect"* %2, %"class.gfx::Rect"** %8, align 8
  %9 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 3
  store i8 %5, i8* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz24BspWalkActionDrawPolygonclEPNS_11DrawPolygonE(%"class.viz::BspWalkActionDrawPolygon"* nocapture readonly, %"class.viz::DrawPolygon"*) unnamed_addr #1 align 2 {
  %3 = alloca %"class.gfx::Transform", align 4
  %4 = bitcast %"class.gfx::Transform"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %4) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN3viz24BspWalkActionDrawPolygonclEPNS_11DrawPolygonE.inverse_transform to i8*), i64 68, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %4, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #8
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %3, i64 0, i32 0, i32 1
  store i8 0, i8* %5, align 4
  %6 = getelementptr inbounds %"class.viz::DrawPolygon", %"class.viz::DrawPolygon"* %1, i64 0, i32 3
  %7 = load %"class.viz::DrawQuad"*, %"class.viz::DrawQuad"** %6, align 8
  %8 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %7, i64 0, i32 6
  %9 = load %"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"** %8, align 8
  %10 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %9, i64 0, i32 0
  %11 = call zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"* %10, %"class.gfx::Transform"* nonnull %3) #8
  br i1 %11, label %12, label %20

12:                                               ; preds = %2
  call void @_ZN3viz11DrawPolygon21TransformToLayerSpaceERKN3gfx9TransformE(%"class.viz::DrawPolygon"* %1, %"class.gfx::Transform"* nonnull dereferenceable(68) %3) #8
  %13 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 1
  %14 = load %"class.viz::DirectRenderer"*, %"class.viz::DirectRenderer"** %13, align 8
  %15 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 2
  %16 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %15, align 8
  %17 = getelementptr inbounds %"class.viz::BspWalkActionDrawPolygon", %"class.viz::BspWalkActionDrawPolygon"* %0, i64 0, i32 3
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp ne i8 %18, 0
  call void @_ZN3viz14DirectRenderer13DoDrawPolygonERKNS_11DrawPolygonERKN3gfx4RectEb(%"class.viz::DirectRenderer"* %14, %"class.viz::DrawPolygon"* dereferenceable(56) %1, %"class.gfx::Rect"* dereferenceable(16) %16, i1 zeroext %19) #8
  br label %20

20:                                               ; preds = %2, %12
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %4) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"*) local_unnamed_addr #3

declare void @_ZN3viz11DrawPolygon21TransformToLayerSpaceERKN3gfx9TransformE(%"class.viz::DrawPolygon"*, %"class.gfx::Transform"* dereferenceable(68)) local_unnamed_addr #3

declare void @_ZN3viz14DirectRenderer13DoDrawPolygonERKNS_11DrawPolygonERKN3gfx4RectEb(%"class.viz::DirectRenderer"*, %"class.viz::DrawPolygon"* dereferenceable(56), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz21BspWalkActionToVectorC2EPNSt3__16vectorIPNS_11DrawPolygonENS1_9allocatorIS4_EEEE(%"class.viz::BspWalkActionToVector"* nocapture, %"class.std::__1::vector.184"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::BspWalkActionToVector", %"class.viz::BspWalkActionToVector"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN3viz21BspWalkActionToVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::BspWalkActionToVector", %"class.viz::BspWalkActionToVector"* %0, i64 0, i32 1
  store %"class.std::__1::vector.184"* %1, %"class.std::__1::vector.184"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz21BspWalkActionToVectorclEPNS_11DrawPolygonE(%"class.viz::BspWalkActionToVector"* nocapture readonly, %"class.viz::DrawPolygon"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.viz::DrawPolygon"* %1 to i64
  %4 = getelementptr inbounds %"class.viz::BspWalkActionToVector", %"class.viz::BspWalkActionToVector"* %0, i64 0, i32 1
  %5 = load %"class.std::__1::vector.184"*, %"class.std::__1::vector.184"** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.184", %"class.std::__1::vector.184"* %5, i64 0, i32 0, i32 1
  %7 = load %"class.viz::DrawPolygon"**, %"class.viz::DrawPolygon"*** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.184", %"class.std::__1::vector.184"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = load %"class.viz::DrawPolygon"**, %"class.viz::DrawPolygon"*** %8, align 8
  %10 = icmp eq %"class.viz::DrawPolygon"** %7, %9
  %11 = ptrtoint %"class.viz::DrawPolygon"** %9 to i64
  br i1 %10, label %17, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.viz::DrawPolygon"** %7 to i64*
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds %"class.viz::DrawPolygon"*, %"class.viz::DrawPolygon"** %7, i64 1
  %15 = ptrtoint %"class.viz::DrawPolygon"** %14 to i64
  %16 = bitcast %"class.viz::DrawPolygon"*** %6 to i64*
  store i64 %15, i64* %16, align 8
  br label %74

17:                                               ; preds = %2
  %18 = ptrtoint %"class.viz::DrawPolygon"** %7 to i64
  %19 = bitcast %"class.viz::DrawPolygon"*** %6 to i64*
  %20 = bitcast %"class.std::__1::vector.184"* %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 3
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 2305843009213693951
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector.184"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #9
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"class.viz::DrawPolygon"*** %8 to i64*
  %30 = sub i64 %11, %21
  %31 = ashr exact i64 %30, 3
  %32 = icmp ult i64 %31, 1152921504606846975
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 2
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 2305843009213693951
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #9
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 2305843009213693951, %28 ]
  %43 = shl i64 %42, 3
  %44 = tail call i8* @_Znwm(i64 %43) #10
  %45 = bitcast i8* %44 to %"class.viz::DrawPolygon"**
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi %"class.viz::DrawPolygon"** [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds %"class.viz::DrawPolygon"*, %"class.viz::DrawPolygon"** %48, i64 %23
  %50 = getelementptr inbounds %"class.viz::DrawPolygon"*, %"class.viz::DrawPolygon"** %48, i64 %47
  %51 = ptrtoint %"class.viz::DrawPolygon"** %50 to i64
  %52 = bitcast %"class.viz::DrawPolygon"** %49 to i64*
  store i64 %3, i64* %52, align 8
  %53 = getelementptr inbounds %"class.viz::DrawPolygon"*, %"class.viz::DrawPolygon"** %49, i64 1
  %54 = ptrtoint %"class.viz::DrawPolygon"** %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.184", %"class.std::__1::vector.184"* %5, i64 0, i32 0, i32 0
  %56 = load %"class.viz::DrawPolygon"**, %"class.viz::DrawPolygon"*** %55, align 8
  %57 = load i64, i64* %19, align 8
  %58 = ptrtoint %"class.viz::DrawPolygon"** %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 3
  %61 = sub nsw i64 0, %60
  %62 = getelementptr inbounds %"class.viz::DrawPolygon"*, %"class.viz::DrawPolygon"** %49, i64 %61
  %63 = ptrtoint %"class.viz::DrawPolygon"** %62 to i64
  %64 = icmp sgt i64 %59, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %46
  %66 = bitcast %"class.viz::DrawPolygon"** %62 to i8*
  %67 = bitcast %"class.viz::DrawPolygon"** %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 %59, i1 false) #8
  %68 = load %"class.viz::DrawPolygon"**, %"class.viz::DrawPolygon"*** %55, align 8
  br label %69

69:                                               ; preds = %65, %46
  %70 = phi %"class.viz::DrawPolygon"** [ %56, %46 ], [ %68, %65 ]
  store i64 %63, i64* %20, align 8
  store i64 %54, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %71 = icmp eq %"class.viz::DrawPolygon"** %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast %"class.viz::DrawPolygon"** %70 to i8*
  tail call void @_ZdlPv(i8* %73) #10
  br label %74

74:                                               ; preds = %12, %69, %72
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
