; ModuleID = '../../third_party/pdfium/fxbarcode/common/BC_CommonBitMatrix.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/common/BC_CommonBitMatrix.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_CommonBitMatrix = type { i32, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN19CBC_CommonBitMatrixC1Ev = hidden unnamed_addr alias void (%class.CBC_CommonBitMatrix*), void (%class.CBC_CommonBitMatrix*)* @_ZN19CBC_CommonBitMatrixC2Ev
@_ZN19CBC_CommonBitMatrixD1Ev = hidden unnamed_addr alias void (%class.CBC_CommonBitMatrix*), void (%class.CBC_CommonBitMatrix*)* @_ZN19CBC_CommonBitMatrixD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_CommonBitMatrixC2Ev(%class.CBC_CommonBitMatrix* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 2
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_CommonBitMatrix4InitEii(%class.CBC_CommonBitMatrix* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 0
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 4
  %7 = add nsw i32 %1, 31
  %8 = ashr i32 %7, 5
  %9 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 2
  store i32 %8, i32* %9, align 8
  %10 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  %11 = sext i32 %8 to i64
  %12 = sext i32 %2 to i64
  %13 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %11, i64 %12) #9
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  br i1 %14, label %16, label %17, !prof !2

16:                                               ; preds = %3
  tail call void @llvm.trap() #9
  unreachable

17:                                               ; preds = %3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #9, !alias.scope !3
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %40, label %19

19:                                               ; preds = %17
  %20 = icmp ugt i64 %15, 4611686018427387903
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #10
  unreachable

23:                                               ; preds = %19
  %24 = shl i64 %15, 2
  %25 = tail call i8* @_Znwm(i64 %24) #11
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %25, i8** %28, align 8, !alias.scope !3
  %29 = getelementptr inbounds i32, i32* %26, i64 %15
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %29, i32** %30, align 8, !alias.scope !3
  %31 = bitcast i32** %27 to i64*
  %32 = ptrtoint i8* %25 to i64
  %33 = add nsw i64 %15, -1
  %34 = getelementptr i32, i32* %26, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 4, %32
  %37 = add i64 %36, %35
  %38 = and i64 %37, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %25, i8 0, i64 %38, i1 false) #9, !noalias !3
  %39 = ptrtoint i32* %29 to i64
  store i64 %39, i64* %31, align 8, !alias.scope !3
  br label %40

40:                                               ; preds = %17, %23
  %41 = phi i64 [ 0, %17 ], [ %39, %23 ]
  %42 = phi i64 [ 0, %17 ], [ %32, %23 ]
  %43 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %43, i64 0, i32 0, i32 0
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %45, null
  br i1 %46, label %53, label %47

47:                                               ; preds = %40
  %48 = ptrtoint i32* %45 to i64
  %49 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 1
  %50 = bitcast i32** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast i32* %45 to i8*
  tail call void @_ZdlPv(i8* %51) #11
  %52 = bitcast %"class.std::__1::vector"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 24, i1 false) #9
  br label %53

53:                                               ; preds = %47, %40
  %54 = bitcast %"class.std::__1::vector"* %43 to i64*
  store i64 %42, i64* %54, align 8
  %55 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 1
  %56 = bitcast i32** %55 to i64*
  store i64 %41, i64* %56, align 8
  %57 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %58 = bitcast i32** %57 to i64*
  store i64 %41, i64* %58, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CBC_CommonBitMatrixD2Ev(%class.CBC_CommonBitMatrix* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK19CBC_CommonBitMatrix3GetEii(%class.CBC_CommonBitMatrix* nocapture readonly, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = mul nsw i32 %5, %2
  %7 = ashr i32 %1, 5
  %8 = add nsw i32 %6, %7
  %9 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, %5
  %12 = icmp sge i32 %8, %11
  %13 = icmp slt i32 %8, 0
  %14 = or i1 %12, %13
  br i1 %14, label %25, label %15

15:                                               ; preds = %3
  %16 = sext i32 %8 to i64
  %17 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds i32, i32* %18, i64 %16
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %1, 31
  %22 = shl i32 1, %21
  %23 = and i32 %20, %22
  %24 = icmp ne i32 %23, 0
  br label %25

25:                                               ; preds = %3, %15
  %26 = phi i1 [ %24, %15 ], [ false, %3 ]
  ret i1 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN19CBC_CommonBitMatrix3SetEii(%class.CBC_CommonBitMatrix* nocapture readonly, i32, i32) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = mul nsw i32 %5, %2
  %7 = ashr i32 %1, 5
  %8 = add nsw i32 %6, %7
  %9 = and i32 %1, 31
  %10 = shl i32 1, %9
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds %class.CBC_CommonBitMatrix, %class.CBC_CommonBitMatrix* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 %11
  %15 = load i32, i32* %14, align 4
  %16 = or i32 %15, %10
  store i32 %16, i32* %14, align 4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6pdfium8Vector2DIiNSt3__19allocatorIiEEEENS1_6vectorIT_T0_EEmm: argument 0"}
!5 = distinct !{!5, !"_ZN6pdfium8Vector2DIiNSt3__19allocatorIiEEEENS1_6vectorIT_T0_EEmm"}
