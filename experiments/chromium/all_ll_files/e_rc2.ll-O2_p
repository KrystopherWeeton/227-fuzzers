; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/e_rc2.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/e_rc2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.EVP_RC2_KEY = type { i32, %struct.rc2_key_st }
%struct.rc2_key_st = type { [64 x i16] }

@rc2_40_cbc = internal constant %struct.evp_cipher_st { i32 98, i32 8, i32 5, i32 8, i32 132, i32 578, i8* null, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)* @rc2_init_key, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)* @rc2_cbc_cipher, void (%struct.evp_cipher_ctx_st*)* null, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* @rc2_ctrl }, align 8
@rc2_cbc = internal constant %struct.evp_cipher_st { i32 37, i32 8, i32 16, i32 8, i32 132, i32 578, i8* null, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)* @rc2_init_key, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)* @rc2_cbc_cipher, void (%struct.evp_cipher_ctx_st*)* null, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* @rc2_ctrl }, align 8
@key_table = internal unnamed_addr constant [256 x i8] c"\D9x\F9\C4\19\DD\B5\ED(\E9\FDyJ\A0\D8\9D\C6~7\83+vS\8EbLd\88D\8B\FB\A2\17\9AY\F5\87\B3O\13aEm\8D\09\81}2\BD\8F@\EB\86\B7{\0B\F0\95!\22\5CkN\82T\D6e\93\CE`\B2\1CsV\C0\14\A7\8C\F1\DC\12u\CA\1F;\BE\E4\D1B=\D40\A3<\B6&o\BF\0E\DAFi\07W'\F2\1D\9B\BC\94C\03\F8\11\C7\F6\90\EF>\E7\06\C3\D5/\C8f\1E\D7\08\E8\EA\DE\80R\EE\F7\84\AAr\AC5Mj*\96\1A\D2qZ\15ItK\9F\D0^\04\18\A4\EC\C2\E0An\0FQ\CB\CC$\91\AFP\A1\F4p9\99|:\85#\B8\B4z\FC\026[%U\971-]\FA\98\E3\8A\92\AE\05\DF)\10gl\BA\C9\D3\00\E6\CF\E1\9E\A8,c\16\01?X\E2\89\A9\0D84\1B\AB3\FF\B0\BBH\0C_\B9\B1\CD.\C5\F3\DBG\E5\A5\9Cw\0A\A6 h\FE\7F\C1\AD", align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_cipher_st* @EVP_rc2_40_cbc() local_unnamed_addr #0 {
  ret %struct.evp_cipher_st* @rc2_40_cbc
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.evp_cipher_st* @EVP_rc2_cbc() local_unnamed_addr #0 {
  ret %struct.evp_cipher_st* @rc2_cbc
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rc2_init_key(%struct.evp_cipher_ctx_st*, i8* nocapture readonly, i8* nocapture readnone, i32) #1 {
  %5 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to %struct.EVP_RC2_KEY**
  %7 = load %struct.EVP_RC2_KEY*, %struct.EVP_RC2_KEY** %6, align 8
  %8 = bitcast %struct.EVP_RC2_KEY* %7 to i8*
  %9 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 1
  %10 = tail call i32 @EVP_CIPHER_CTX_key_length(%struct.evp_cipher_ctx_st* %0) #5
  %11 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %struct.rc2_key_st* %9 to i8*
  store i8 0, i8* %13, align 1
  %14 = icmp slt i32 %10, 128
  %15 = select i1 %14, i32 %10, i32 128
  %16 = icmp slt i32 %12, 1
  %17 = select i1 %16, i32 1024, i32 %12
  %18 = icmp slt i32 %17, 1024
  %19 = select i1 %18, i32 %17, i32 1024
  %20 = icmp sgt i32 %10, 0
  br i1 %20, label %21, label %125

21:                                               ; preds = %4
  %22 = sext i32 %15 to i64
  %23 = icmp sgt i64 %22, 1
  %24 = select i1 %23, i64 %22, i64 1
  %25 = icmp ult i64 %24, 32
  br i1 %25, label %116, label %26

26:                                               ; preds = %21
  %27 = getelementptr %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 1, i32 0, i64 0
  %28 = bitcast i16* %27 to i8*
  %29 = icmp sgt i64 %22, 1
  %30 = select i1 %29, i64 %22, i64 1
  %31 = add nuw nsw i64 %30, 4
  %32 = getelementptr i8, i8* %8, i64 %31
  %33 = getelementptr i8, i8* %1, i64 %30
  %34 = icmp ugt i8* %33, %28
  %35 = icmp ugt i8* %32, %1
  %36 = and i1 %34, %35
  br i1 %36, label %116, label %37

37:                                               ; preds = %26
  %38 = and i64 %24, 9223372036854775776
  %39 = add nsw i64 %38, -32
  %40 = lshr exact i64 %39, 5
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 3
  %43 = icmp ult i64 %39, 96
  br i1 %43, label %95, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %92, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %93, %46 ]
  %49 = getelementptr inbounds i8, i8* %1, i64 %47
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !2
  %52 = getelementptr inbounds i8, i8* %49, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !2
  %55 = getelementptr inbounds i8, i8* %13, i64 %47
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %56, align 1, !alias.scope !5, !noalias !2
  %57 = getelementptr inbounds i8, i8* %55, i64 16
  %58 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %58, align 1, !alias.scope !5, !noalias !2
  %59 = or i64 %47, 32
  %60 = getelementptr inbounds i8, i8* %1, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !2
  %63 = getelementptr inbounds i8, i8* %60, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !2
  %66 = getelementptr inbounds i8, i8* %13, i64 %59
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %67, align 1, !alias.scope !5, !noalias !2
  %68 = getelementptr inbounds i8, i8* %66, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %69, align 1, !alias.scope !5, !noalias !2
  %70 = or i64 %47, 64
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !2
  %74 = getelementptr inbounds i8, i8* %71, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !2
  %77 = getelementptr inbounds i8, i8* %13, i64 %70
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %78, align 1, !alias.scope !5, !noalias !2
  %79 = getelementptr inbounds i8, i8* %77, i64 16
  %80 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %80, align 1, !alias.scope !5, !noalias !2
  %81 = or i64 %47, 96
  %82 = getelementptr inbounds i8, i8* %1, i64 %81
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !2
  %85 = getelementptr inbounds i8, i8* %82, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !2
  %88 = getelementptr inbounds i8, i8* %13, i64 %81
  %89 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %89, align 1, !alias.scope !5, !noalias !2
  %90 = getelementptr inbounds i8, i8* %88, i64 16
  %91 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %91, align 1, !alias.scope !5, !noalias !2
  %92 = add i64 %47, 128
  %93 = add i64 %48, -4
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %46, !llvm.loop !7

95:                                               ; preds = %46, %37
  %96 = phi i64 [ 0, %37 ], [ %92, %46 ]
  %97 = icmp eq i64 %42, 0
  br i1 %97, label %114, label %98

98:                                               ; preds = %95, %98
  %99 = phi i64 [ %111, %98 ], [ %96, %95 ]
  %100 = phi i64 [ %112, %98 ], [ %42, %95 ]
  %101 = getelementptr inbounds i8, i8* %1, i64 %99
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !2
  %104 = getelementptr inbounds i8, i8* %101, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !2
  %107 = getelementptr inbounds i8, i8* %13, i64 %99
  %108 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %108, align 1, !alias.scope !5, !noalias !2
  %109 = getelementptr inbounds i8, i8* %107, i64 16
  %110 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %110, align 1, !alias.scope !5, !noalias !2
  %111 = add i64 %99, 32
  %112 = add i64 %100, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %98, !llvm.loop !9

114:                                              ; preds = %98, %95
  %115 = icmp eq i64 %24, %38
  br i1 %115, label %125, label %116

116:                                              ; preds = %114, %26, %21
  %117 = phi i64 [ 0, %26 ], [ 0, %21 ], [ %38, %114 ]
  br label %118

118:                                              ; preds = %116, %118
  %119 = phi i64 [ %123, %118 ], [ %117, %116 ]
  %120 = getelementptr inbounds i8, i8* %1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %13, i64 %119
  store i8 %121, i8* %122, align 1
  %123 = add nuw nsw i64 %119, 1
  %124 = icmp slt i64 %123, %22
  br i1 %124, label %118, label %125, !llvm.loop !11

125:                                              ; preds = %118, %114, %4
  br i1 %14, label %126, label %148

126:                                              ; preds = %125
  %127 = add nsw i32 %15, -1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %13, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = sext i32 %15 to i64
  br label %132

132:                                              ; preds = %132, %126
  %133 = phi i64 [ %131, %126 ], [ %145, %132 ]
  %134 = phi i64 [ 0, %126 ], [ %146, %132 ]
  %135 = phi i8 [ %130, %126 ], [ %143, %132 ]
  %136 = zext i8 %135 to i64
  %137 = getelementptr inbounds i8, i8* %13, i64 %134
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i64
  %140 = add nuw nsw i64 %139, %136
  %141 = and i64 %140, 255
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* @key_table, i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = getelementptr inbounds i8, i8* %13, i64 %133
  store i8 %143, i8* %144, align 1
  %145 = add nsw i64 %133, 1
  %146 = add nuw nsw i64 %134, 1
  %147 = icmp slt i64 %145, 128
  br i1 %147, label %132, label %148

148:                                              ; preds = %132, %125
  %149 = add nsw i32 %19, 7
  %150 = ashr i32 %149, 3
  %151 = sub nsw i32 128, %150
  %152 = sub nsw i32 0, %19
  %153 = and i32 %152, 7
  %154 = lshr i32 255, %153
  %155 = sext i32 %151 to i64
  %156 = getelementptr inbounds i8, i8* %13, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = and i32 %154, %158
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [256 x i8], [256 x i8]* @key_table, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  store i8 %162, i8* %156, align 1
  %163 = icmp eq i32 %151, 0
  br i1 %163, label %206, label %164

164:                                              ; preds = %148
  %165 = sub nsw i32 127, %150
  %166 = sext i32 %165 to i64
  %167 = sext i32 %150 to i64
  %168 = and i32 %149, 8
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %180, label %170

170:                                              ; preds = %164
  %171 = add nsw i64 %166, %167
  %172 = getelementptr inbounds i8, i8* %13, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = xor i8 %173, %162
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [256 x i8], [256 x i8]* @key_table, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds i8, i8* %13, i64 %166
  store i8 %177, i8* %178, align 1
  %179 = add nsw i64 %166, -1
  br label %180

180:                                              ; preds = %164, %170
  %181 = phi i64 [ %166, %164 ], [ %179, %170 ]
  %182 = phi i8 [ %162, %164 ], [ %177, %170 ]
  %183 = icmp eq i32 %165, 0
  br i1 %183, label %206, label %184

184:                                              ; preds = %180, %184
  %185 = phi i64 [ %204, %184 ], [ %181, %180 ]
  %186 = phi i8 [ %202, %184 ], [ %182, %180 ]
  %187 = add nsw i64 %185, %167
  %188 = getelementptr inbounds i8, i8* %13, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = xor i8 %189, %186
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* @key_table, i64 0, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = getelementptr inbounds i8, i8* %13, i64 %185
  store i8 %193, i8* %194, align 1
  %195 = add i64 %185, -1
  %196 = add nsw i64 %195, %167
  %197 = getelementptr inbounds i8, i8* %13, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = xor i8 %198, %193
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [256 x i8], [256 x i8]* @key_table, i64 0, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = getelementptr inbounds i8, i8* %13, i64 %195
  store i8 %202, i8* %203, align 1
  %204 = add i64 %185, -2
  %205 = icmp eq i64 %195, 0
  br i1 %205, label %206, label %184

206:                                              ; preds = %180, %184, %148
  %207 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 1, i32 0, i64 63
  br label %208

208:                                              ; preds = %208, %206
  %209 = phi i64 [ 127, %206 ], [ %232, %208 ]
  %210 = phi i16* [ %207, %206 ], [ %231, %208 ]
  %211 = getelementptr inbounds i8, i8* %13, i64 %209
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i16
  %214 = shl nuw i16 %213, 8
  %215 = add nsw i64 %209, -1
  %216 = getelementptr inbounds i8, i8* %13, i64 %215
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i16
  %219 = or i16 %214, %218
  %220 = getelementptr inbounds i16, i16* %210, i64 -1
  store i16 %219, i16* %210, align 2
  %221 = add nsw i64 %209, -2
  %222 = getelementptr inbounds i8, i8* %13, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i16
  %225 = shl nuw i16 %224, 8
  %226 = add nsw i64 %209, -3
  %227 = getelementptr inbounds i8, i8* %13, i64 %226
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i16
  %230 = or i16 %225, %229
  %231 = getelementptr inbounds i16, i16* %210, i64 -2
  store i16 %230, i16* %220, align 2
  %232 = add nsw i64 %209, -4
  %233 = icmp sgt i64 %232, -1
  br i1 %233, label %208, label %234

234:                                              ; preds = %208
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rc2_cbc_cipher(%struct.evp_cipher_ctx_st*, i8* nocapture, i8* nocapture readonly, i64) #1 {
  %5 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to %struct.EVP_RC2_KEY**
  %7 = load %struct.EVP_RC2_KEY*, %struct.EVP_RC2_KEY** %6, align 8
  %8 = icmp ugt i64 %3, 65535
  br i1 %8, label %9, label %24

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 1
  %11 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 7, i64 0
  %12 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 4
  br label %13

13:                                               ; preds = %9, %13
  %14 = phi i64 [ %3, %9 ], [ %18, %13 ]
  %15 = phi i8* [ %2, %9 ], [ %19, %13 ]
  %16 = phi i8* [ %1, %9 ], [ %20, %13 ]
  %17 = load i32, i32* %12, align 4
  tail call fastcc void @RC2_cbc_encrypt(i8* %15, i8* %16, i64 65536, %struct.rc2_key_st* %10, i8* %11, i32 %17)
  %18 = add i64 %14, -65536
  %19 = getelementptr inbounds i8, i8* %15, i64 65536
  %20 = getelementptr inbounds i8, i8* %16, i64 65536
  %21 = icmp ugt i64 %18, 65535
  br i1 %21, label %13, label %22

22:                                               ; preds = %13
  %23 = and i64 %3, 65535
  br label %24

24:                                               ; preds = %22, %4
  %25 = phi i8* [ %1, %4 ], [ %20, %22 ]
  %26 = phi i8* [ %2, %4 ], [ %19, %22 ]
  %27 = phi i64 [ %3, %4 ], [ %23, %22 ]
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 1
  %31 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 7, i64 0
  %32 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 4
  tail call fastcc void @RC2_cbc_encrypt(i8* %26, i8* %25, i64 %27, %struct.rc2_key_st* %30, i8* %31, i32 %33)
  br label %34

34:                                               ; preds = %24, %29
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @rc2_ctrl(%struct.evp_cipher_ctx_st*, i32, i32, i8* nocapture readnone) #1 {
  %5 = getelementptr inbounds %struct.evp_cipher_ctx_st, %struct.evp_cipher_ctx_st* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to %struct.EVP_RC2_KEY**
  %7 = load %struct.EVP_RC2_KEY*, %struct.EVP_RC2_KEY** %6, align 8
  switch i32 %1, label %14 [
    i32 0, label %8
    i32 3, label %11
  ]

8:                                                ; preds = %4
  %9 = tail call i32 @EVP_CIPHER_CTX_key_length(%struct.evp_cipher_ctx_st* %0) #5
  %10 = shl i32 %9, 3
  br label %11

11:                                               ; preds = %4, %8
  %12 = phi i32 [ %10, %8 ], [ %2, %4 ]
  %13 = getelementptr inbounds %struct.EVP_RC2_KEY, %struct.EVP_RC2_KEY* %7, i64 0, i32 0
  store i32 %12, i32* %13, align 4
  br label %14

14:                                               ; preds = %11, %4
  %15 = phi i32 [ -1, %4 ], [ 1, %11 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @EVP_CIPHER_CTX_key_length(%struct.evp_cipher_ctx_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @RC2_cbc_encrypt(i8* nocapture readonly, i8* nocapture, i64, %struct.rc2_key_st* nocapture readonly, i8*, i32) unnamed_addr #1 {
  %7 = alloca [2 x i32], align 4
  %8 = bitcast [2 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #5
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 0
  store i32 -1431655766, i32* %9, align 4
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %7, i64 0, i64 1
  store i32 -1431655766, i32* %10, align 4
  %11 = icmp eq i32 %5, 0
  %12 = getelementptr inbounds i8, i8* %4, i64 1
  %13 = load i8, i8* %4, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %4, i64 2
  %16 = load i8, i8* %12, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %18, %14
  %20 = getelementptr inbounds i8, i8* %4, i64 3
  %21 = load i8, i8* %15, align 1
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 16
  %24 = or i32 %19, %23
  %25 = getelementptr inbounds i8, i8* %4, i64 4
  %26 = load i8, i8* %20, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw i32 %27, 24
  %29 = or i32 %24, %28
  %30 = getelementptr inbounds i8, i8* %4, i64 5
  %31 = load i8, i8* %25, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %4, i64 6
  %34 = load i8, i8* %30, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 8
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds i8, i8* %4, i64 7
  %39 = load i8, i8* %33, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 16
  %42 = or i32 %37, %41
  %43 = load i8, i8* %38, align 1
  %44 = zext i8 %43 to i32
  %45 = shl nuw i32 %44, 24
  %46 = or i32 %42, %45
  %47 = add i64 %2, -8
  %48 = icmp sgt i64 %47, -1
  br i1 %11, label %50, label %49

49:                                               ; preds = %6
  br i1 %48, label %51, label %123

50:                                               ; preds = %6
  br i1 %48, label %213, label %285

51:                                               ; preds = %49, %51
  %52 = phi i64 [ %119, %51 ], [ %47, %49 ]
  %53 = phi i32 [ %107, %51 ], [ %46, %49 ]
  %54 = phi i32 [ %95, %51 ], [ %29, %49 ]
  %55 = phi i8* [ %88, %51 ], [ %0, %49 ]
  %56 = phi i8* [ %118, %51 ], [ %1, %49 ]
  %57 = getelementptr inbounds i8, i8* %55, i64 1
  %58 = load i8, i8* %55, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds i8, i8* %55, i64 2
  %61 = load i8, i8* %57, align 1
  %62 = zext i8 %61 to i32
  %63 = shl nuw nsw i32 %62, 8
  %64 = or i32 %63, %59
  %65 = getelementptr inbounds i8, i8* %55, i64 3
  %66 = load i8, i8* %60, align 1
  %67 = zext i8 %66 to i32
  %68 = shl nuw nsw i32 %67, 16
  %69 = or i32 %64, %68
  %70 = getelementptr inbounds i8, i8* %55, i64 4
  %71 = load i8, i8* %65, align 1
  %72 = zext i8 %71 to i32
  %73 = shl nuw i32 %72, 24
  %74 = or i32 %69, %73
  %75 = getelementptr inbounds i8, i8* %55, i64 5
  %76 = load i8, i8* %70, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds i8, i8* %55, i64 6
  %79 = load i8, i8* %75, align 1
  %80 = zext i8 %79 to i32
  %81 = shl nuw nsw i32 %80, 8
  %82 = or i32 %81, %77
  %83 = getelementptr inbounds i8, i8* %55, i64 7
  %84 = load i8, i8* %78, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 16
  %87 = or i32 %82, %86
  %88 = getelementptr inbounds i8, i8* %55, i64 8
  %89 = load i8, i8* %83, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw i32 %90, 24
  %92 = or i32 %87, %91
  %93 = xor i32 %74, %54
  %94 = xor i32 %92, %53
  store i32 %93, i32* %9, align 4
  store i32 %94, i32* %10, align 4
  call fastcc void @RC2_encrypt(i32* nonnull %9, %struct.rc2_key_st* %3)
  %95 = load i32, i32* %9, align 4
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 %96, i8* %56, align 1
  %98 = lshr i32 %95, 8
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 %99, i8* %97, align 1
  %101 = lshr i32 %95, 16
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds i8, i8* %56, i64 3
  store i8 %102, i8* %100, align 1
  %104 = lshr i32 %95, 24
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %56, i64 4
  store i8 %105, i8* %103, align 1
  %107 = load i32, i32* %10, align 4
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %56, i64 5
  store i8 %108, i8* %106, align 1
  %110 = lshr i32 %107, 8
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %56, i64 6
  store i8 %111, i8* %109, align 1
  %113 = lshr i32 %107, 16
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %56, i64 7
  store i8 %114, i8* %112, align 1
  %116 = lshr i32 %107, 24
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %56, i64 8
  store i8 %117, i8* %115, align 1
  %119 = add nsw i64 %52, -8
  %120 = icmp sgt i64 %119, -1
  br i1 %120, label %51, label %121

121:                                              ; preds = %51
  %122 = and i64 %47, 7
  br label %123

123:                                              ; preds = %121, %49
  %124 = phi i8* [ %1, %49 ], [ %118, %121 ]
  %125 = phi i8* [ %0, %49 ], [ %88, %121 ]
  %126 = phi i32 [ %29, %49 ], [ %95, %121 ]
  %127 = phi i32 [ %46, %49 ], [ %107, %121 ]
  %128 = phi i64 [ %2, %49 ], [ %122, %121 ]
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %365, label %130

130:                                              ; preds = %123
  %131 = getelementptr inbounds i8, i8* %125, i64 %128
  switch i64 %128, label %185 [
    i64 1, label %177
    i64 7, label %132
    i64 6, label %137
    i64 5, label %145
    i64 4, label %152
    i64 3, label %159
    i64 2, label %168
  ]

132:                                              ; preds = %130
  %133 = getelementptr inbounds i8, i8* %131, i64 -1
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = shl nuw nsw i32 %135, 16
  br label %137

137:                                              ; preds = %130, %132
  %138 = phi i8* [ %131, %130 ], [ %133, %132 ]
  %139 = phi i32 [ 0, %130 ], [ %136, %132 ]
  %140 = getelementptr inbounds i8, i8* %138, i64 -1
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = shl nuw nsw i32 %142, 8
  %144 = or i32 %143, %139
  br label %145

145:                                              ; preds = %130, %137
  %146 = phi i8* [ %131, %130 ], [ %140, %137 ]
  %147 = phi i32 [ 0, %130 ], [ %144, %137 ]
  %148 = getelementptr inbounds i8, i8* %146, i64 -1
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = or i32 %147, %150
  br label %152

152:                                              ; preds = %130, %145
  %153 = phi i8* [ %131, %130 ], [ %148, %145 ]
  %154 = phi i32 [ 0, %130 ], [ %151, %145 ]
  %155 = getelementptr inbounds i8, i8* %153, i64 -1
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = shl nuw i32 %157, 24
  br label %159

159:                                              ; preds = %130, %152
  %160 = phi i8* [ %131, %130 ], [ %155, %152 ]
  %161 = phi i32 [ 0, %130 ], [ %158, %152 ]
  %162 = phi i32 [ 0, %130 ], [ %154, %152 ]
  %163 = getelementptr inbounds i8, i8* %160, i64 -1
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = shl nuw nsw i32 %165, 16
  %167 = or i32 %166, %161
  br label %168

168:                                              ; preds = %130, %159
  %169 = phi i8* [ %131, %130 ], [ %163, %159 ]
  %170 = phi i32 [ 0, %130 ], [ %167, %159 ]
  %171 = phi i32 [ 0, %130 ], [ %162, %159 ]
  %172 = getelementptr inbounds i8, i8* %169, i64 -1
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = shl nuw nsw i32 %174, 8
  %176 = or i32 %175, %170
  br label %177

177:                                              ; preds = %130, %168
  %178 = phi i8* [ %131, %130 ], [ %172, %168 ]
  %179 = phi i32 [ 0, %130 ], [ %176, %168 ]
  %180 = phi i32 [ 0, %130 ], [ %171, %168 ]
  %181 = getelementptr inbounds i8, i8* %178, i64 -1
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = or i32 %179, %183
  br label %185

185:                                              ; preds = %177, %130
  %186 = phi i32 [ 0, %130 ], [ %184, %177 ]
  %187 = phi i32 [ 0, %130 ], [ %180, %177 ]
  %188 = xor i32 %186, %126
  %189 = xor i32 %187, %127
  store i32 %188, i32* %9, align 4
  store i32 %189, i32* %10, align 4
  call fastcc void @RC2_encrypt(i32* nonnull %9, %struct.rc2_key_st* %3)
  %190 = load i32, i32* %9, align 4
  %191 = trunc i32 %190 to i8
  %192 = getelementptr inbounds i8, i8* %124, i64 1
  store i8 %191, i8* %124, align 1
  %193 = lshr i32 %190, 8
  %194 = trunc i32 %193 to i8
  %195 = getelementptr inbounds i8, i8* %124, i64 2
  store i8 %194, i8* %192, align 1
  %196 = lshr i32 %190, 16
  %197 = trunc i32 %196 to i8
  %198 = getelementptr inbounds i8, i8* %124, i64 3
  store i8 %197, i8* %195, align 1
  %199 = lshr i32 %190, 24
  %200 = trunc i32 %199 to i8
  %201 = getelementptr inbounds i8, i8* %124, i64 4
  store i8 %200, i8* %198, align 1
  %202 = load i32, i32* %10, align 4
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds i8, i8* %124, i64 5
  store i8 %203, i8* %201, align 1
  %205 = lshr i32 %202, 8
  %206 = trunc i32 %205 to i8
  %207 = getelementptr inbounds i8, i8* %124, i64 6
  store i8 %206, i8* %204, align 1
  %208 = lshr i32 %202, 16
  %209 = trunc i32 %208 to i8
  %210 = getelementptr inbounds i8, i8* %124, i64 7
  store i8 %209, i8* %207, align 1
  %211 = lshr i32 %202, 24
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %210, align 1
  br label %365

213:                                              ; preds = %50, %213
  %214 = phi i64 [ %281, %213 ], [ %47, %50 ]
  %215 = phi i32 [ %254, %213 ], [ %46, %50 ]
  %216 = phi i32 [ %236, %213 ], [ %29, %50 ]
  %217 = phi i8* [ %250, %213 ], [ %0, %50 ]
  %218 = phi i8* [ %280, %213 ], [ %1, %50 ]
  %219 = getelementptr inbounds i8, i8* %217, i64 1
  %220 = load i8, i8* %217, align 1
  %221 = zext i8 %220 to i32
  %222 = getelementptr inbounds i8, i8* %217, i64 2
  %223 = load i8, i8* %219, align 1
  %224 = zext i8 %223 to i32
  %225 = shl nuw nsw i32 %224, 8
  %226 = or i32 %225, %221
  %227 = getelementptr inbounds i8, i8* %217, i64 3
  %228 = load i8, i8* %222, align 1
  %229 = zext i8 %228 to i32
  %230 = shl nuw nsw i32 %229, 16
  %231 = or i32 %226, %230
  %232 = getelementptr inbounds i8, i8* %217, i64 4
  %233 = load i8, i8* %227, align 1
  %234 = zext i8 %233 to i32
  %235 = shl nuw i32 %234, 24
  %236 = or i32 %231, %235
  store i32 %236, i32* %9, align 4
  %237 = getelementptr inbounds i8, i8* %217, i64 5
  %238 = load i8, i8* %232, align 1
  %239 = zext i8 %238 to i32
  %240 = getelementptr inbounds i8, i8* %217, i64 6
  %241 = load i8, i8* %237, align 1
  %242 = zext i8 %241 to i32
  %243 = shl nuw nsw i32 %242, 8
  %244 = or i32 %243, %239
  %245 = getelementptr inbounds i8, i8* %217, i64 7
  %246 = load i8, i8* %240, align 1
  %247 = zext i8 %246 to i32
  %248 = shl nuw nsw i32 %247, 16
  %249 = or i32 %244, %248
  %250 = getelementptr inbounds i8, i8* %217, i64 8
  %251 = load i8, i8* %245, align 1
  %252 = zext i8 %251 to i32
  %253 = shl nuw i32 %252, 24
  %254 = or i32 %249, %253
  store i32 %254, i32* %10, align 4
  call fastcc void @RC2_decrypt(i32* nonnull %9, %struct.rc2_key_st* %3)
  %255 = load i32, i32* %9, align 4
  %256 = xor i32 %255, %216
  %257 = load i32, i32* %10, align 4
  %258 = xor i32 %257, %215
  %259 = trunc i32 %256 to i8
  %260 = getelementptr inbounds i8, i8* %218, i64 1
  store i8 %259, i8* %218, align 1
  %261 = lshr i32 %256, 8
  %262 = trunc i32 %261 to i8
  %263 = getelementptr inbounds i8, i8* %218, i64 2
  store i8 %262, i8* %260, align 1
  %264 = lshr i32 %256, 16
  %265 = trunc i32 %264 to i8
  %266 = getelementptr inbounds i8, i8* %218, i64 3
  store i8 %265, i8* %263, align 1
  %267 = lshr i32 %256, 24
  %268 = trunc i32 %267 to i8
  %269 = getelementptr inbounds i8, i8* %218, i64 4
  store i8 %268, i8* %266, align 1
  %270 = trunc i32 %258 to i8
  %271 = getelementptr inbounds i8, i8* %218, i64 5
  store i8 %270, i8* %269, align 1
  %272 = lshr i32 %258, 8
  %273 = trunc i32 %272 to i8
  %274 = getelementptr inbounds i8, i8* %218, i64 6
  store i8 %273, i8* %271, align 1
  %275 = lshr i32 %258, 16
  %276 = trunc i32 %275 to i8
  %277 = getelementptr inbounds i8, i8* %218, i64 7
  store i8 %276, i8* %274, align 1
  %278 = lshr i32 %258, 24
  %279 = trunc i32 %278 to i8
  %280 = getelementptr inbounds i8, i8* %218, i64 8
  store i8 %279, i8* %277, align 1
  %281 = add nsw i64 %214, -8
  %282 = icmp sgt i64 %281, -1
  br i1 %282, label %213, label %283

283:                                              ; preds = %213
  %284 = and i64 %47, 7
  br label %285

285:                                              ; preds = %283, %50
  %286 = phi i8* [ %1, %50 ], [ %280, %283 ]
  %287 = phi i8* [ %0, %50 ], [ %250, %283 ]
  %288 = phi i32 [ %29, %50 ], [ %236, %283 ]
  %289 = phi i32 [ %46, %50 ], [ %254, %283 ]
  %290 = phi i64 [ %2, %50 ], [ %284, %283 ]
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %365, label %292

292:                                              ; preds = %285
  %293 = getelementptr inbounds i8, i8* %287, i64 1
  %294 = load i8, i8* %287, align 1
  %295 = zext i8 %294 to i32
  %296 = getelementptr inbounds i8, i8* %287, i64 2
  %297 = load i8, i8* %293, align 1
  %298 = zext i8 %297 to i32
  %299 = shl nuw nsw i32 %298, 8
  %300 = or i32 %299, %295
  %301 = getelementptr inbounds i8, i8* %287, i64 3
  %302 = load i8, i8* %296, align 1
  %303 = zext i8 %302 to i32
  %304 = shl nuw nsw i32 %303, 16
  %305 = or i32 %300, %304
  %306 = getelementptr inbounds i8, i8* %287, i64 4
  %307 = load i8, i8* %301, align 1
  %308 = zext i8 %307 to i32
  %309 = shl nuw i32 %308, 24
  %310 = or i32 %305, %309
  store i32 %310, i32* %9, align 4
  %311 = getelementptr inbounds i8, i8* %287, i64 5
  %312 = load i8, i8* %306, align 1
  %313 = zext i8 %312 to i32
  %314 = getelementptr inbounds i8, i8* %287, i64 6
  %315 = load i8, i8* %311, align 1
  %316 = zext i8 %315 to i32
  %317 = shl nuw nsw i32 %316, 8
  %318 = or i32 %317, %313
  %319 = getelementptr inbounds i8, i8* %287, i64 7
  %320 = load i8, i8* %314, align 1
  %321 = zext i8 %320 to i32
  %322 = shl nuw nsw i32 %321, 16
  %323 = or i32 %318, %322
  %324 = load i8, i8* %319, align 1
  %325 = zext i8 %324 to i32
  %326 = shl nuw i32 %325, 24
  %327 = or i32 %323, %326
  store i32 %327, i32* %10, align 4
  call fastcc void @RC2_decrypt(i32* nonnull %9, %struct.rc2_key_st* %3)
  %328 = load i32, i32* %9, align 4
  %329 = xor i32 %328, %288
  %330 = load i32, i32* %10, align 4
  %331 = xor i32 %330, %289
  %332 = getelementptr inbounds i8, i8* %286, i64 %290
  switch i64 %290, label %365 [
    i64 1, label %361
    i64 7, label %333
    i64 6, label %337
    i64 5, label %342
    i64 4, label %346
    i64 3, label %351
    i64 2, label %356
  ]

333:                                              ; preds = %292
  %334 = lshr i32 %331, 16
  %335 = trunc i32 %334 to i8
  %336 = getelementptr inbounds i8, i8* %332, i64 -1
  store i8 %335, i8* %336, align 1
  br label %337

337:                                              ; preds = %292, %333
  %338 = phi i8* [ %332, %292 ], [ %336, %333 ]
  %339 = lshr i32 %331, 8
  %340 = trunc i32 %339 to i8
  %341 = getelementptr inbounds i8, i8* %338, i64 -1
  store i8 %340, i8* %341, align 1
  br label %342

342:                                              ; preds = %292, %337
  %343 = phi i8* [ %332, %292 ], [ %341, %337 ]
  %344 = trunc i32 %331 to i8
  %345 = getelementptr inbounds i8, i8* %343, i64 -1
  store i8 %344, i8* %345, align 1
  br label %346

346:                                              ; preds = %292, %342
  %347 = phi i8* [ %332, %292 ], [ %345, %342 ]
  %348 = lshr i32 %329, 24
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds i8, i8* %347, i64 -1
  store i8 %349, i8* %350, align 1
  br label %351

351:                                              ; preds = %292, %346
  %352 = phi i8* [ %332, %292 ], [ %350, %346 ]
  %353 = lshr i32 %329, 16
  %354 = trunc i32 %353 to i8
  %355 = getelementptr inbounds i8, i8* %352, i64 -1
  store i8 %354, i8* %355, align 1
  br label %356

356:                                              ; preds = %292, %351
  %357 = phi i8* [ %332, %292 ], [ %355, %351 ]
  %358 = lshr i32 %329, 8
  %359 = trunc i32 %358 to i8
  %360 = getelementptr inbounds i8, i8* %357, i64 -1
  store i8 %359, i8* %360, align 1
  br label %361

361:                                              ; preds = %292, %356
  %362 = phi i8* [ %332, %292 ], [ %360, %356 ]
  %363 = trunc i32 %329 to i8
  %364 = getelementptr inbounds i8, i8* %362, i64 -1
  store i8 %363, i8* %364, align 1
  br label %365

365:                                              ; preds = %285, %361, %292, %185, %123
  %366 = phi i32 [ %190, %185 ], [ %126, %123 ], [ %288, %285 ], [ %310, %361 ], [ %310, %292 ]
  %367 = phi i32 [ %202, %185 ], [ %127, %123 ], [ %289, %285 ], [ %327, %361 ], [ %327, %292 ]
  %368 = trunc i32 %366 to i8
  store i8 %368, i8* %4, align 1
  %369 = lshr i32 %366, 8
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* %12, align 1
  %371 = lshr i32 %366, 16
  %372 = trunc i32 %371 to i8
  store i8 %372, i8* %15, align 1
  %373 = lshr i32 %366, 24
  %374 = trunc i32 %373 to i8
  store i8 %374, i8* %20, align 1
  %375 = trunc i32 %367 to i8
  store i8 %375, i8* %25, align 1
  %376 = lshr i32 %367, 8
  %377 = trunc i32 %376 to i8
  store i8 %377, i8* %30, align 1
  %378 = lshr i32 %367, 16
  %379 = trunc i32 %378 to i8
  store i8 %379, i8* %33, align 1
  %380 = lshr i32 %367, 24
  %381 = trunc i32 %380 to i8
  store i8 %381, i8* %38, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @RC2_encrypt(i32* nocapture, %struct.rc2_key_st* nocapture readonly) unnamed_addr #4 {
  %3 = load i32, i32* %0, align 4
  %4 = lshr i32 %3, 16
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 16
  %8 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 0
  br label %9

9:                                                ; preds = %84, %2
  %10 = phi i32 [ %82, %84 ], [ 3, %2 ]
  %11 = phi i16* [ %66, %84 ], [ %8, %2 ]
  %12 = phi i32 [ %93, %84 ], [ %3, %2 ]
  %13 = phi i32 [ %99, %84 ], [ %4, %2 ]
  %14 = phi i32 [ %105, %84 ], [ %6, %2 ]
  %15 = phi i32 [ %111, %84 ], [ %7, %2 ]
  %16 = phi i32 [ %86, %84 ], [ 5, %2 ]
  br label %17

17:                                               ; preds = %9, %17
  %18 = phi i16* [ %66, %17 ], [ %11, %9 ]
  %19 = phi i32 [ %36, %17 ], [ %12, %9 ]
  %20 = phi i32 [ %49, %17 ], [ %13, %9 ]
  %21 = phi i32 [ %62, %17 ], [ %14, %9 ]
  %22 = phi i32 [ %75, %17 ], [ %15, %9 ]
  %23 = phi i32 [ %76, %17 ], [ %16, %9 ]
  %24 = xor i32 %22, 65535
  %25 = and i32 %24, %20
  %26 = and i32 %22, %21
  %27 = getelementptr inbounds i16, i16* %18, i64 1
  %28 = load i16, i16* %18, align 2
  %29 = zext i16 %28 to i32
  %30 = add i32 %26, %19
  %31 = add i32 %30, %25
  %32 = add i32 %31, %29
  %33 = and i32 %32, 65535
  %34 = shl nuw nsw i32 %33, 1
  %35 = lshr i32 %33, 15
  %36 = or i32 %34, %35
  %37 = xor i32 %36, 65535
  %38 = and i32 %37, %21
  %39 = and i32 %36, %22
  %40 = getelementptr inbounds i16, i16* %18, i64 2
  %41 = load i16, i16* %27, align 2
  %42 = zext i16 %41 to i32
  %43 = add nsw i32 %20, %42
  %44 = add nsw i32 %43, %39
  %45 = add nsw i32 %44, %38
  %46 = and i32 %45, 65535
  %47 = shl nuw nsw i32 %46, 2
  %48 = lshr i32 %46, 14
  %49 = or i32 %47, %48
  %50 = xor i32 %49, 65535
  %51 = and i32 %50, %22
  %52 = and i32 %49, %36
  %53 = getelementptr inbounds i16, i16* %18, i64 3
  %54 = load i16, i16* %40, align 2
  %55 = zext i16 %54 to i32
  %56 = add i32 %21, %55
  %57 = add i32 %56, %52
  %58 = add i32 %57, %51
  %59 = and i32 %58, 65535
  %60 = shl nuw nsw i32 %59, 3
  %61 = lshr i32 %59, 13
  %62 = or i32 %60, %61
  %63 = xor i32 %62, 65535
  %64 = and i32 %63, %36
  %65 = and i32 %62, %49
  %66 = getelementptr inbounds i16, i16* %18, i64 4
  %67 = load i16, i16* %53, align 2
  %68 = zext i16 %67 to i32
  %69 = add nsw i32 %22, %68
  %70 = add nsw i32 %69, %65
  %71 = add nsw i32 %70, %64
  %72 = and i32 %71, 65535
  %73 = shl nuw nsw i32 %72, 5
  %74 = lshr i32 %72, 11
  %75 = or i32 %73, %74
  %76 = add nsw i32 %23, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %17

78:                                               ; preds = %17
  %79 = and i32 %36, 65535
  %80 = and i32 %49, 65535
  %81 = and i32 %62, 65535
  %82 = add nsw i32 %10, -1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %112, label %84

84:                                               ; preds = %78
  %85 = icmp eq i32 %82, 2
  %86 = select i1 %85, i32 6, i32 5
  %87 = and i32 %75, 65535
  %88 = and i32 %75, 63
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %79, %92
  %94 = and i32 %93, 63
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = add nuw nsw i32 %80, %98
  %100 = and i32 %99, 63
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = add nuw nsw i32 %81, %104
  %106 = and i32 %105, 63
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = add nuw nsw i32 %87, %110
  br label %9

112:                                              ; preds = %78
  %113 = shl i32 %49, 16
  %114 = or i32 %113, %79
  store i32 %114, i32* %0, align 4
  %115 = shl i32 %75, 16
  %116 = or i32 %115, %81
  store i32 %116, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @RC2_decrypt(i32* nocapture, %struct.rc2_key_st* nocapture readonly) unnamed_addr #4 {
  %3 = load i32, i32* %0, align 4
  %4 = lshr i32 %3, 16
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = lshr i32 %6, 16
  %8 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 63
  br label %9

9:                                                ; preds = %105, %2
  %10 = phi i32 [ 3, %2 ], [ %107, %105 ]
  %11 = phi i16* [ %8, %2 ], [ %66, %105 ]
  %12 = phi i32 [ %3, %2 ], [ %114, %105 ]
  %13 = phi i32 [ %4, %2 ], [ %113, %105 ]
  %14 = phi i32 [ %6, %2 ], [ %112, %105 ]
  %15 = phi i32 [ %7, %2 ], [ %106, %105 ]
  %16 = phi i32 [ 5, %2 ], [ %111, %105 ]
  %17 = shl nuw nsw i32 %15, 11
  %18 = lshr i32 %15, 5
  %19 = and i32 %17, 63488
  %20 = or i32 %19, %18
  %21 = and i32 %12, 65535
  %22 = and i32 %14, 65535
  %23 = xor i32 %22, 65535
  %24 = and i32 %23, %12
  %25 = and i32 %14, %13
  %26 = getelementptr inbounds i16, i16* %11, i64 -1
  %27 = load i16, i16* %11, align 2
  %28 = zext i16 %27 to i32
  %29 = add nuw nsw i32 %24, %25
  %30 = sub nsw i32 %20, %29
  %31 = sub nsw i32 %30, %28
  %32 = shl nuw nsw i32 %22, 13
  %33 = lshr i32 %22, 3
  %34 = and i32 %32, 57344
  %35 = or i32 %34, %33
  %36 = and i32 %31, 65535
  %37 = xor i32 %13, 65535
  %38 = and i32 %31, %37
  %39 = and i32 %13, %12
  %40 = getelementptr inbounds i16, i16* %11, i64 -2
  %41 = load i16, i16* %26, align 2
  %42 = zext i16 %41 to i32
  %43 = sub nsw i32 %35, %39
  %44 = sub nsw i32 %43, %42
  %45 = sub nsw i32 %44, %38
  %46 = shl nuw nsw i32 %13, 14
  %47 = lshr i32 %13, 2
  %48 = and i32 %46, 49152
  %49 = or i32 %48, %47
  %50 = xor i32 %21, 65535
  %51 = and i32 %45, %50
  %52 = and i32 %31, %12
  %53 = getelementptr inbounds i16, i16* %11, i64 -3
  %54 = load i16, i16* %40, align 2
  %55 = zext i16 %54 to i32
  %56 = sub nsw i32 %49, %55
  %57 = sub i32 %56, %52
  %58 = sub i32 %57, %51
  %59 = shl nuw nsw i32 %21, 15
  %60 = lshr i32 %21, 1
  %61 = and i32 %59, 32768
  %62 = or i32 %61, %60
  %63 = xor i32 %36, 65535
  %64 = and i32 %58, %63
  %65 = and i32 %45, %31
  %66 = getelementptr inbounds i16, i16* %11, i64 -4
  %67 = load i16, i16* %53, align 2
  %68 = zext i16 %67 to i32
  %69 = sub nsw i32 %62, %68
  %70 = sub i32 %69, %65
  %71 = sub i32 %70, %64
  %72 = add nsw i32 %16, -1
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %105

74:                                               ; preds = %9
  %75 = add nsw i32 %10, -1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %115, label %77

77:                                               ; preds = %74
  %78 = icmp eq i32 %75, 2
  %79 = select i1 %78, i32 6, i32 5
  %80 = and i32 %45, 63
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = sub nsw i32 %31, %84
  %86 = and i32 %58, 63
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = sub nsw i32 %45, %90
  %92 = and i32 %71, 63
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = sub i32 %58, %96
  %98 = and i32 %85, 63
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds %struct.rc2_key_st, %struct.rc2_key_st* %1, i64 0, i32 0, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = sub i32 %71, %102
  %104 = and i32 %85, 65535
  br label %105

105:                                              ; preds = %77, %9
  %106 = phi i32 [ %104, %77 ], [ %36, %9 ]
  %107 = phi i32 [ %75, %77 ], [ %10, %9 ]
  %108 = phi i32 [ %103, %77 ], [ %71, %9 ]
  %109 = phi i32 [ %97, %77 ], [ %58, %9 ]
  %110 = phi i32 [ %91, %77 ], [ %45, %9 ]
  %111 = phi i32 [ %79, %77 ], [ %72, %9 ]
  %112 = and i32 %110, 65535
  %113 = and i32 %109, 65535
  %114 = and i32 %108, 65535
  br label %9

115:                                              ; preds = %74
  %116 = and i32 %45, 65535
  %117 = and i32 %71, 65535
  %118 = shl i32 %58, 16
  %119 = or i32 %117, %118
  store i32 %119, i32* %0, align 4
  %120 = shl i32 %31, 16
  %121 = or i32 %116, %120
  store i32 %121, i32* %5, align 4
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
