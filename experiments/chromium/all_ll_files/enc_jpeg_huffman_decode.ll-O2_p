; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_huffman_decode.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/enc_jpeg_huffman_decode.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::HuffmanTableEntry" = type { i8, i16 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl4jpeg21BuildJpegHuffmanTableEPKjS2_PNS0_17HuffmanTableEntryE(i32* nocapture readonly, i32* nocapture readonly, %"struct.jxl::jpeg::HuffmanTableEntry"*) local_unnamed_addr #0 {
  %4 = alloca [17 x i32], align 16
  %5 = bitcast [17 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %5) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 68, i1 false)
  %6 = getelementptr inbounds [17 x i32], [17 x i32]* %4, i64 0, i64 1
  %7 = bitcast i32* %6 to i8*
  %8 = getelementptr i32, i32* %0, i64 1
  %9 = bitcast i32* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %9, i64 64, i1 false)
  %10 = bitcast i32* %8 to <16 x i32>*
  %11 = load <16 x i32>, <16 x i32>* %10, align 4
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %13 = add nsw <16 x i32> %11, %12
  %14 = shufflevector <16 x i32> %13, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = add nsw <16 x i32> %13, %14
  %16 = shufflevector <16 x i32> %15, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %17 = add nsw <16 x i32> %15, %16
  %18 = shufflevector <16 x i32> %17, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = add nsw <16 x i32> %17, %18
  %20 = extractelement <16 x i32> %19, i32 0
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %157

22:                                               ; preds = %3
  %23 = load i32, i32* %1, align 4
  %24 = shl i32 %23, 16
  %25 = or i32 %24, 43520
  %26 = insertelement <4 x i32> undef, i32 %25, i32 0
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> zeroinitializer
  %28 = insertelement <4 x i32> undef, i32 %25, i32 0
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> zeroinitializer
  %30 = bitcast %"struct.jxl::jpeg::HuffmanTableEntry"* %2 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %30, align 2
  %31 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 4, i32 0
  %32 = bitcast i8* %31 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %32, align 2
  %33 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 8, i32 0
  %34 = bitcast i8* %33 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %34, align 2
  %35 = getelementptr inbounds i8, i8* %33, i64 16
  %36 = bitcast i8* %35 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %36, align 2
  %37 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 16, i32 0
  %38 = bitcast i8* %37 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %38, align 2
  %39 = getelementptr inbounds i8, i8* %37, i64 16
  %40 = bitcast i8* %39 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %40, align 2
  %41 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 24, i32 0
  %42 = bitcast i8* %41 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %42, align 2
  %43 = getelementptr inbounds i8, i8* %41, i64 16
  %44 = bitcast i8* %43 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %44, align 2
  %45 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 32, i32 0
  %46 = bitcast i8* %45 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %46, align 2
  %47 = getelementptr inbounds i8, i8* %45, i64 16
  %48 = bitcast i8* %47 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %48, align 2
  %49 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 40, i32 0
  %50 = bitcast i8* %49 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %50, align 2
  %51 = getelementptr inbounds i8, i8* %49, i64 16
  %52 = bitcast i8* %51 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %52, align 2
  %53 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 48, i32 0
  %54 = bitcast i8* %53 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %54, align 2
  %55 = getelementptr inbounds i8, i8* %53, i64 16
  %56 = bitcast i8* %55 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %56, align 2
  %57 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 56, i32 0
  %58 = bitcast i8* %57 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %58, align 2
  %59 = getelementptr inbounds i8, i8* %57, i64 16
  %60 = bitcast i8* %59 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %60, align 2
  %61 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 64, i32 0
  %62 = bitcast i8* %61 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %62, align 2
  %63 = getelementptr inbounds i8, i8* %61, i64 16
  %64 = bitcast i8* %63 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %64, align 2
  %65 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 72, i32 0
  %66 = bitcast i8* %65 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %66, align 2
  %67 = getelementptr inbounds i8, i8* %65, i64 16
  %68 = bitcast i8* %67 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %68, align 2
  %69 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 80, i32 0
  %70 = bitcast i8* %69 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %70, align 2
  %71 = getelementptr inbounds i8, i8* %69, i64 16
  %72 = bitcast i8* %71 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %72, align 2
  %73 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 88, i32 0
  %74 = bitcast i8* %73 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %74, align 2
  %75 = getelementptr inbounds i8, i8* %73, i64 16
  %76 = bitcast i8* %75 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %76, align 2
  %77 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 96, i32 0
  %78 = bitcast i8* %77 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %78, align 2
  %79 = getelementptr inbounds i8, i8* %77, i64 16
  %80 = bitcast i8* %79 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %80, align 2
  %81 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 104, i32 0
  %82 = bitcast i8* %81 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %82, align 2
  %83 = getelementptr inbounds i8, i8* %81, i64 16
  %84 = bitcast i8* %83 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %84, align 2
  %85 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 112, i32 0
  %86 = bitcast i8* %85 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %86, align 2
  %87 = getelementptr inbounds i8, i8* %85, i64 16
  %88 = bitcast i8* %87 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %88, align 2
  %89 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 120, i32 0
  %90 = bitcast i8* %89 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %90, align 2
  %91 = getelementptr inbounds i8, i8* %89, i64 16
  %92 = bitcast i8* %91 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %92, align 2
  %93 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 128, i32 0
  %94 = bitcast i8* %93 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %94, align 2
  %95 = getelementptr inbounds i8, i8* %93, i64 16
  %96 = bitcast i8* %95 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %96, align 2
  %97 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 136, i32 0
  %98 = bitcast i8* %97 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %98, align 2
  %99 = getelementptr inbounds i8, i8* %97, i64 16
  %100 = bitcast i8* %99 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %100, align 2
  %101 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 144, i32 0
  %102 = bitcast i8* %101 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %102, align 2
  %103 = getelementptr inbounds i8, i8* %101, i64 16
  %104 = bitcast i8* %103 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %104, align 2
  %105 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 152, i32 0
  %106 = bitcast i8* %105 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %106, align 2
  %107 = getelementptr inbounds i8, i8* %105, i64 16
  %108 = bitcast i8* %107 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %108, align 2
  %109 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 160, i32 0
  %110 = bitcast i8* %109 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %110, align 2
  %111 = getelementptr inbounds i8, i8* %109, i64 16
  %112 = bitcast i8* %111 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %112, align 2
  %113 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 168, i32 0
  %114 = bitcast i8* %113 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %114, align 2
  %115 = getelementptr inbounds i8, i8* %113, i64 16
  %116 = bitcast i8* %115 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %116, align 2
  %117 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 176, i32 0
  %118 = bitcast i8* %117 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %118, align 2
  %119 = getelementptr inbounds i8, i8* %117, i64 16
  %120 = bitcast i8* %119 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %120, align 2
  %121 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 184, i32 0
  %122 = bitcast i8* %121 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %122, align 2
  %123 = getelementptr inbounds i8, i8* %121, i64 16
  %124 = bitcast i8* %123 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %124, align 2
  %125 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 192, i32 0
  %126 = bitcast i8* %125 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %126, align 2
  %127 = getelementptr inbounds i8, i8* %125, i64 16
  %128 = bitcast i8* %127 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %128, align 2
  %129 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 200, i32 0
  %130 = bitcast i8* %129 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %130, align 2
  %131 = getelementptr inbounds i8, i8* %129, i64 16
  %132 = bitcast i8* %131 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %132, align 2
  %133 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 208, i32 0
  %134 = bitcast i8* %133 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %134, align 2
  %135 = getelementptr inbounds i8, i8* %133, i64 16
  %136 = bitcast i8* %135 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %136, align 2
  %137 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 216, i32 0
  %138 = bitcast i8* %137 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %138, align 2
  %139 = getelementptr inbounds i8, i8* %137, i64 16
  %140 = bitcast i8* %139 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %140, align 2
  %141 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 224, i32 0
  %142 = bitcast i8* %141 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %142, align 2
  %143 = getelementptr inbounds i8, i8* %141, i64 16
  %144 = bitcast i8* %143 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %144, align 2
  %145 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 232, i32 0
  %146 = bitcast i8* %145 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %146, align 2
  %147 = getelementptr inbounds i8, i8* %145, i64 16
  %148 = bitcast i8* %147 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %148, align 2
  %149 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 240, i32 0
  %150 = bitcast i8* %149 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %150, align 2
  %151 = getelementptr inbounds i8, i8* %149, i64 16
  %152 = bitcast i8* %151 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %152, align 2
  %153 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 248, i32 0
  %154 = bitcast i8* %153 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %154, align 2
  %155 = getelementptr inbounds i8, i8* %153, i64 16
  %156 = bitcast i8* %155 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %156, align 2
  br label %452

157:                                              ; preds = %3, %265
  %158 = phi i64 [ %268, %265 ], [ 1, %3 ]
  %159 = phi i32 [ %267, %265 ], [ 0, %3 ]
  %160 = phi i32 [ %266, %265 ], [ 0, %3 ]
  %161 = getelementptr inbounds [17 x i32], [17 x i32]* %4, i64 0, i64 %158
  %162 = load i32, i32* %161, align 4
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %164, label %265

164:                                              ; preds = %157
  %165 = trunc i64 %158 to i32
  %166 = sub i32 8, %165
  %167 = shl i32 1, %166
  %168 = sext i32 %160 to i64
  %169 = trunc i64 %158 to i32
  %170 = add nsw i32 %167, -1
  %171 = zext i32 %170 to i64
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 8589934584
  %174 = add nsw i64 %173, -8
  %175 = lshr exact i64 %174, 3
  %176 = add nuw nsw i64 %175, 1
  %177 = icmp ult i64 %172, 8
  %178 = and i64 %172, 8589934584
  %179 = trunc i64 %178 to i32
  %180 = sub i32 %167, %179
  %181 = and i64 %176, 3
  %182 = icmp ult i64 %174, 24
  %183 = sub nsw i64 %176, %181
  %184 = icmp eq i64 %181, 0
  %185 = icmp eq i64 %172, %178
  br label %186

186:                                              ; preds = %164, %256
  %187 = phi i64 [ %168, %164 ], [ %258, %256 ]
  %188 = phi i32 [ %162, %164 ], [ %260, %256 ]
  %189 = phi i32 [ %159, %164 ], [ %259, %256 ]
  %190 = getelementptr inbounds i32, i32* %1, i64 %187
  %191 = load i32, i32* %190, align 4
  %192 = shl i32 %191, 16
  %193 = or i32 %192, %169
  %194 = or i32 %193, 43520
  %195 = sext i32 %189 to i64
  br i1 %177, label %245, label %196

196:                                              ; preds = %186
  %197 = add nsw i64 %178, %195
  %198 = insertelement <4 x i32> undef, i32 %194, i32 0
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = insertelement <4 x i32> undef, i32 %194, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %182, label %231, label %202

202:                                              ; preds = %196, %202
  %203 = phi i64 [ %228, %202 ], [ 0, %196 ]
  %204 = phi i64 [ %229, %202 ], [ %183, %196 ]
  %205 = add i64 %203, %195
  %206 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %205, i32 0
  %207 = bitcast i8* %206 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %207, align 2
  %208 = getelementptr inbounds i8, i8* %206, i64 16
  %209 = bitcast i8* %208 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %209, align 2
  %210 = or i64 %203, 8
  %211 = add i64 %210, %195
  %212 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %211, i32 0
  %213 = bitcast i8* %212 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %213, align 2
  %214 = getelementptr inbounds i8, i8* %212, i64 16
  %215 = bitcast i8* %214 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %215, align 2
  %216 = or i64 %203, 16
  %217 = add i64 %216, %195
  %218 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %217, i32 0
  %219 = bitcast i8* %218 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %219, align 2
  %220 = getelementptr inbounds i8, i8* %218, i64 16
  %221 = bitcast i8* %220 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %221, align 2
  %222 = or i64 %203, 24
  %223 = add i64 %222, %195
  %224 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %223, i32 0
  %225 = bitcast i8* %224 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %225, align 2
  %226 = getelementptr inbounds i8, i8* %224, i64 16
  %227 = bitcast i8* %226 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %227, align 2
  %228 = add i64 %203, 32
  %229 = add i64 %204, -4
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %202, !llvm.loop !2

231:                                              ; preds = %202, %196
  %232 = phi i64 [ 0, %196 ], [ %228, %202 ]
  br i1 %184, label %244, label %233

233:                                              ; preds = %231, %233
  %234 = phi i64 [ %241, %233 ], [ %232, %231 ]
  %235 = phi i64 [ %242, %233 ], [ %181, %231 ]
  %236 = add i64 %234, %195
  %237 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %236, i32 0
  %238 = bitcast i8* %237 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %238, align 2
  %239 = getelementptr inbounds i8, i8* %237, i64 16
  %240 = bitcast i8* %239 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %240, align 2
  %241 = add i64 %234, 8
  %242 = add i64 %235, -1
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %233, !llvm.loop !4

244:                                              ; preds = %233, %231
  br i1 %185, label %256, label %245

245:                                              ; preds = %244, %186
  %246 = phi i64 [ %195, %186 ], [ %197, %244 ]
  %247 = phi i32 [ %167, %186 ], [ %180, %244 ]
  br label %248

248:                                              ; preds = %245, %248
  %249 = phi i64 [ %252, %248 ], [ %246, %245 ]
  %250 = phi i32 [ %251, %248 ], [ %247, %245 ]
  %251 = add nsw i32 %250, -1
  %252 = add nsw i64 %249, 1
  %253 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %249, i32 0
  %254 = bitcast i8* %253 to i32*
  store i32 %194, i32* %254, align 2
  %255 = icmp eq i32 %251, 0
  br i1 %255, label %256, label %248, !llvm.loop !6

256:                                              ; preds = %248, %244
  %257 = phi i64 [ %197, %244 ], [ %252, %248 ]
  %258 = add nsw i64 %187, 1
  %259 = trunc i64 %257 to i32
  %260 = add nsw i32 %188, -1
  %261 = icmp sgt i32 %260, 0
  br i1 %261, label %186, label %262

262:                                              ; preds = %256
  %263 = trunc i64 %257 to i32
  %264 = trunc i64 %258 to i32
  store i32 0, i32* %161, align 4
  br label %265

265:                                              ; preds = %262, %157
  %266 = phi i32 [ %264, %262 ], [ %160, %157 ]
  %267 = phi i32 [ %263, %262 ], [ %159, %157 ]
  %268 = add nuw nsw i64 %158, 1
  %269 = icmp eq i64 %268, 9
  br i1 %269, label %270, label %157

270:                                              ; preds = %265
  %271 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 256
  %272 = ptrtoint %"struct.jxl::jpeg::HuffmanTableEntry"* %2 to i64
  br label %273

273:                                              ; preds = %443, %270
  %274 = phi i64 [ 9, %270 ], [ %450, %443 ]
  %275 = phi i32 [ 0, %270 ], [ %449, %443 ]
  %276 = phi i32 [ 8, %270 ], [ %448, %443 ]
  %277 = phi i32 [ 0, %270 ], [ %447, %443 ]
  %278 = phi i32 [ %267, %270 ], [ %446, %443 ]
  %279 = phi i32 [ %266, %270 ], [ %445, %443 ]
  %280 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %271, %270 ], [ %444, %443 ]
  %281 = getelementptr inbounds [17 x i32], [17 x i32]* %4, i64 0, i64 %274
  %282 = load i32, i32* %281, align 4
  %283 = icmp sgt i32 %282, 0
  br i1 %283, label %284, label %443

284:                                              ; preds = %273
  %285 = icmp ult i64 %274, 16
  %286 = trunc i64 %274 to i32
  %287 = add i32 %286, -8
  %288 = shl i32 1, %287
  %289 = sext i32 %279 to i64
  %290 = trunc i64 %274 to i32
  %291 = trunc i64 %274 to i32
  %292 = add i32 %291, 248
  %293 = and i32 %292, 255
  br label %294

294:                                              ; preds = %284, %433
  %295 = phi i32 [ %282, %284 ], [ %438, %433 ]
  %296 = phi i64 [ %289, %284 ], [ %435, %433 ]
  %297 = phi i32 [ %275, %284 ], [ %348, %433 ]
  %298 = phi i32 [ %276, %284 ], [ %347, %433 ]
  %299 = phi i32 [ %277, %284 ], [ %436, %433 ]
  %300 = phi i32 [ %278, %284 ], [ %345, %433 ]
  %301 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %280, %284 ], [ %344, %433 ]
  %302 = icmp slt i32 %299, %297
  br i1 %302, label %343, label %303

303:                                              ; preds = %294
  %304 = sext i32 %297 to i64
  %305 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %301, i64 %304
  br i1 %285, label %306, label %329

306:                                              ; preds = %303
  %307 = sub nsw i32 %288, %295
  %308 = icmp slt i32 %307, 1
  br i1 %308, label %322, label %309

309:                                              ; preds = %306, %316
  %310 = phi i32 [ %320, %316 ], [ %307, %306 ]
  %311 = phi i32 [ %314, %316 ], [ %290, %306 ]
  %312 = phi i64 [ %313, %316 ], [ %274, %306 ]
  %313 = add nuw nsw i64 %312, 1
  %314 = add nuw nsw i32 %311, 1
  %315 = icmp eq i64 %313, 16
  br i1 %315, label %325, label %316

316:                                              ; preds = %309
  %317 = shl i32 %310, 1
  %318 = getelementptr inbounds [17 x i32], [17 x i32]* %4, i64 0, i64 %313
  %319 = load i32, i32* %318, align 4
  %320 = sub nsw i32 %317, %319
  %321 = icmp slt i32 %320, 1
  br i1 %321, label %322, label %309

322:                                              ; preds = %316, %306
  %323 = phi i64 [ %274, %306 ], [ %313, %316 ]
  %324 = trunc i64 %323 to i32
  br label %325

325:                                              ; preds = %309, %322
  %326 = phi i32 [ %324, %322 ], [ %314, %309 ]
  %327 = add nsw i32 %326, -8
  %328 = shl i32 1, %327
  br label %329

329:                                              ; preds = %303, %325
  %330 = phi i32 [ %288, %303 ], [ %328, %325 ]
  %331 = phi i32 [ %287, %303 ], [ %327, %325 ]
  %332 = trunc i32 %331 to i8
  %333 = add i8 %332, 8
  %334 = sext i32 %300 to i64
  %335 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %334, i32 0
  store i8 %333, i8* %335, align 2
  %336 = ptrtoint %"struct.jxl::jpeg::HuffmanTableEntry"* %305 to i64
  %337 = sub i64 %336, %272
  %338 = lshr exact i64 %337, 2
  %339 = sub nsw i64 %338, %334
  %340 = trunc i64 %339 to i16
  %341 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %2, i64 %334, i32 1
  store i16 %340, i16* %341, align 2
  %342 = add nsw i32 %300, 1
  br label %343

343:                                              ; preds = %294, %329
  %344 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %305, %329 ], [ %301, %294 ]
  %345 = phi i32 [ %342, %329 ], [ %300, %294 ]
  %346 = phi i32 [ 0, %329 ], [ %299, %294 ]
  %347 = phi i32 [ %331, %329 ], [ %298, %294 ]
  %348 = phi i32 [ %330, %329 ], [ %297, %294 ]
  %349 = getelementptr inbounds i32, i32* %1, i64 %296
  %350 = load i32, i32* %349, align 4
  %351 = sub nsw i32 %347, %293
  %352 = shl i32 1, %351
  %353 = shl i32 %350, 16
  %354 = or i32 %293, %353
  %355 = or i32 %354, 43520
  %356 = sext i32 %346 to i64
  %357 = add nsw i32 %352, -1
  %358 = zext i32 %357 to i64
  %359 = add nuw nsw i64 %358, 1
  %360 = icmp ult i64 %359, 8
  br i1 %360, label %422, label %361

361:                                              ; preds = %343
  %362 = and i64 %359, 8589934584
  %363 = add nsw i64 %362, %356
  %364 = trunc i64 %362 to i32
  %365 = sub i32 %352, %364
  %366 = insertelement <4 x i32> undef, i32 %355, i32 0
  %367 = shufflevector <4 x i32> %366, <4 x i32> undef, <4 x i32> zeroinitializer
  %368 = insertelement <4 x i32> undef, i32 %355, i32 0
  %369 = shufflevector <4 x i32> %368, <4 x i32> undef, <4 x i32> zeroinitializer
  %370 = add nsw i64 %362, -8
  %371 = lshr exact i64 %370, 3
  %372 = add nuw nsw i64 %371, 1
  %373 = and i64 %372, 3
  %374 = icmp ult i64 %370, 24
  br i1 %374, label %406, label %375

375:                                              ; preds = %361
  %376 = sub nsw i64 %372, %373
  br label %377

377:                                              ; preds = %377, %375
  %378 = phi i64 [ 0, %375 ], [ %403, %377 ]
  %379 = phi i64 [ %376, %375 ], [ %404, %377 ]
  %380 = add i64 %378, %356
  %381 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %380, i32 0
  %382 = bitcast i8* %381 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %382, align 2
  %383 = getelementptr inbounds i8, i8* %381, i64 16
  %384 = bitcast i8* %383 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %384, align 2
  %385 = or i64 %378, 8
  %386 = add i64 %385, %356
  %387 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %386, i32 0
  %388 = bitcast i8* %387 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %388, align 2
  %389 = getelementptr inbounds i8, i8* %387, i64 16
  %390 = bitcast i8* %389 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %390, align 2
  %391 = or i64 %378, 16
  %392 = add i64 %391, %356
  %393 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %392, i32 0
  %394 = bitcast i8* %393 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %394, align 2
  %395 = getelementptr inbounds i8, i8* %393, i64 16
  %396 = bitcast i8* %395 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %396, align 2
  %397 = or i64 %378, 24
  %398 = add i64 %397, %356
  %399 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %398, i32 0
  %400 = bitcast i8* %399 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %400, align 2
  %401 = getelementptr inbounds i8, i8* %399, i64 16
  %402 = bitcast i8* %401 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %402, align 2
  %403 = add i64 %378, 32
  %404 = add i64 %379, -4
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %377, !llvm.loop !8

406:                                              ; preds = %377, %361
  %407 = phi i64 [ 0, %361 ], [ %403, %377 ]
  %408 = icmp eq i64 %373, 0
  br i1 %408, label %420, label %409

409:                                              ; preds = %406, %409
  %410 = phi i64 [ %417, %409 ], [ %407, %406 ]
  %411 = phi i64 [ %418, %409 ], [ %373, %406 ]
  %412 = add i64 %410, %356
  %413 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %412, i32 0
  %414 = bitcast i8* %413 to <4 x i32>*
  store <4 x i32> %367, <4 x i32>* %414, align 2
  %415 = getelementptr inbounds i8, i8* %413, i64 16
  %416 = bitcast i8* %415 to <4 x i32>*
  store <4 x i32> %369, <4 x i32>* %416, align 2
  %417 = add i64 %410, 8
  %418 = add i64 %411, -1
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %420, label %409, !llvm.loop !9

420:                                              ; preds = %409, %406
  %421 = icmp eq i64 %359, %362
  br i1 %421, label %433, label %422

422:                                              ; preds = %420, %343
  %423 = phi i64 [ %356, %343 ], [ %363, %420 ]
  %424 = phi i32 [ %352, %343 ], [ %365, %420 ]
  br label %425

425:                                              ; preds = %422, %425
  %426 = phi i64 [ %429, %425 ], [ %423, %422 ]
  %427 = phi i32 [ %428, %425 ], [ %424, %422 ]
  %428 = add nsw i32 %427, -1
  %429 = add nsw i64 %426, 1
  %430 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanTableEntry", %"struct.jxl::jpeg::HuffmanTableEntry"* %344, i64 %426, i32 0
  %431 = bitcast i8* %430 to i32*
  store i32 %355, i32* %431, align 2
  %432 = icmp eq i32 %428, 0
  br i1 %432, label %433, label %425, !llvm.loop !10

433:                                              ; preds = %425, %420
  %434 = phi i64 [ %363, %420 ], [ %429, %425 ]
  %435 = add i64 %296, 1
  %436 = trunc i64 %434 to i32
  %437 = load i32, i32* %281, align 4
  %438 = add nsw i32 %437, -1
  store i32 %438, i32* %281, align 4
  %439 = icmp sgt i32 %438, 0
  br i1 %439, label %294, label %440

440:                                              ; preds = %433
  %441 = trunc i64 %434 to i32
  %442 = trunc i64 %435 to i32
  br label %443

443:                                              ; preds = %440, %273
  %444 = phi %"struct.jxl::jpeg::HuffmanTableEntry"* [ %280, %273 ], [ %344, %440 ]
  %445 = phi i32 [ %279, %273 ], [ %442, %440 ]
  %446 = phi i32 [ %278, %273 ], [ %345, %440 ]
  %447 = phi i32 [ %277, %273 ], [ %441, %440 ]
  %448 = phi i32 [ %276, %273 ], [ %347, %440 ]
  %449 = phi i32 [ %275, %273 ], [ %348, %440 ]
  %450 = add nuw nsw i64 %274, 1
  %451 = icmp eq i64 %450, 17
  br i1 %451, label %452, label %273

452:                                              ; preds = %443, %22
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %5) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
