; ModuleID = '../../third_party/blink/renderer/core/style/counter_directives.cc'
source_filename = "../../third_party/blink/renderer/core/style/counter_directives.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CounterDirectives" = type { %"class.absl::optional", %"class.absl::optional", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blinkeqERKNS_17CounterDirectivesES2_(%"class.blink::CounterDirectives"* nocapture readonly dereferenceable(24), %"class.blink::CounterDirectives"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp ne i8 %4, 0
  %6 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp ne i8 %7, 0
  %9 = xor i1 %5, %8
  %10 = xor i1 %5, true
  %11 = or i1 %9, %10
  br i1 %11, label %21, label %12

12:                                               ; preds = %2
  %13 = icmp eq i8 %7, 0
  br i1 %13, label %14, label %15, !prof !3

14:                                               ; preds = %12
  tail call void @llvm.trap() #2
  unreachable

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %22, label %62

21:                                               ; preds = %2
  br i1 %9, label %62, label %22

22:                                               ; preds = %21, %15
  %23 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %24 = load i8, i8* %23, align 4, !range !2
  %25 = icmp ne i8 %24, 0
  %26 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %27 = load i8, i8* %26, align 4, !range !2
  %28 = icmp ne i8 %27, 0
  %29 = xor i1 %25, %28
  %30 = xor i1 %25, true
  %31 = or i1 %29, %30
  br i1 %31, label %41, label %32

32:                                               ; preds = %22
  %33 = icmp eq i8 %27, 0
  br i1 %33, label %34, label %35, !prof !3

34:                                               ; preds = %32
  tail call void @llvm.trap() #2
  unreachable

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %42, label %62

41:                                               ; preds = %22
  br i1 %29, label %62, label %42

42:                                               ; preds = %41, %35
  %43 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %44 = load i8, i8* %43, align 4, !range !2
  %45 = icmp ne i8 %44, 0
  %46 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %47 = load i8, i8* %46, align 4, !range !2
  %48 = icmp ne i8 %47, 0
  %49 = xor i1 %45, %48
  %50 = xor i1 %45, true
  %51 = or i1 %49, %50
  %52 = xor i1 %49, true
  br i1 %51, label %62, label %53

53:                                               ; preds = %42
  %54 = icmp eq i8 %47, 0
  br i1 %54, label %55, label %56, !prof !3

55:                                               ; preds = %53
  tail call void @llvm.trap() #2
  unreachable

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.blink::CounterDirectives", %"class.blink::CounterDirectives"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %58, %60
  br label %62

62:                                               ; preds = %21, %41, %56, %42, %35, %15
  %63 = phi i1 [ false, %41 ], [ false, %21 ], [ false, %15 ], [ false, %35 ], [ %52, %42 ], [ %61, %56 ]
  ret i1 %63
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
