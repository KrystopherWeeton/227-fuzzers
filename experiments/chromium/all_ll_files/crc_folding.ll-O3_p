; ModuleID = '../../third_party/zlib/crc_folding.c'
source_filename = "../../third_party/zlib/crc_folding.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.internal_state = type { %struct.z_stream_s*, i32, i8*, i64, i8*, i64, i32, %struct.Cr_z_gz_header_s*, i64, i8, i32, [20 x i32], i32, i32, i32, i8*, i64, i16*, i16*, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [573 x %struct.ct_data_s], [61 x %struct.ct_data_s], [39 x %struct.ct_data_s], %struct.tree_desc_s, %struct.tree_desc_s, %struct.tree_desc_s, [16 x i16], [573 x i32], i32, i32, [573 x i8], i8*, i32, i32, i32, i64, i64, i32, i32, i16, i32, i64 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.Cr_z_gz_header_s = type { i32, i64, i32, i32, i8*, i32, i32, i8*, i32, i8*, i32, i32, i32 }
%struct.ct_data_s = type { %union.anon, %union.anon.0 }
%union.anon = type { i16 }
%union.anon.0 = type { i16 }
%struct.tree_desc_s = type { %struct.ct_data_s*, i32, %struct.static_tree_desc_s* }
%struct.static_tree_desc_s = type opaque

@pshufb_shf_table = internal unnamed_addr constant [60 x i32] [i32 -2071756159, i32 -2004384123, i32 -1937012087, i32 9408141, i32 -2054913150, i32 -1987541114, i32 -1920169078, i32 16813966, i32 -2038070141, i32 -1970698105, i32 -1903326069, i32 33620111, i32 -2021227132, i32 -1953855096, i32 -1886483060, i32 50462976, i32 -2004384123, i32 -1937012087, i32 9408141, i32 67305985, i32 -1987541114, i32 -1920169078, i32 16813966, i32 84148994, i32 -1970698105, i32 -1903326069, i32 33620111, i32 100992003, i32 -1953855096, i32 -1886483060, i32 50462976, i32 117835012, i32 -1937012087, i32 9408141, i32 67305985, i32 134678021, i32 -1920169078, i32 16813966, i32 84148994, i32 151521030, i32 -1903326069, i32 33620111, i32 100992003, i32 168364039, i32 -1886483060, i32 50462976, i32 117835012, i32 185207048, i32 9408141, i32 67305985, i32 134678021, i32 202050057, i32 16813966, i32 84148994, i32 151521030, i32 218893066, i32 33620111, i32 100992003, i32 168364039, i32 235736075], align 32

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @Cr_z_crc_fold_init(%struct.internal_state* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 0
  %3 = bitcast i32* %2 to <2 x i64>*
  %4 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 4
  store <2 x i64> <i64 2645828743, i64 0>, <2 x i64>* %3, align 1
  %5 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 0
  %6 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %6, i8 0, i64 48, i1 false)
  %7 = load %struct.z_stream_s*, %struct.z_stream_s** %5, align 8
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %7, i64 0, i32 12
  store i64 0, i64* %8, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @Cr_z_crc_fold_copy(%struct.internal_state* nocapture, i8* nocapture, i8*, i64) local_unnamed_addr #2 {
  %5 = alloca [2 x i64], align 16
  %6 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 0
  %7 = bitcast i32* %6 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 1
  %9 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 4
  %10 = bitcast i32* %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 1
  %12 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 8
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 12
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 16
  %19 = bitcast i32* %18 to <2 x i64>*
  %20 = icmp slt i64 %3, 16
  br i1 %20, label %21, label %23

21:                                               ; preds = %4
  %22 = icmp eq i64 %3, 0
  br i1 %22, label %268, label %209

23:                                               ; preds = %4
  %24 = load <2 x i64>, <2 x i64>* %19, align 1
  %25 = ptrtoint i8* %2 to i64
  %26 = sub i64 0, %25
  %27 = and i64 %26, 15
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %69, label %29

29:                                               ; preds = %23
  %30 = bitcast i8* %2 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 1
  %32 = bitcast i8* %1 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %1, i64 %27
  %34 = getelementptr inbounds i8, i8* %2, i64 %27
  %35 = sub nuw nsw i64 %3, %27
  %36 = add nsw i64 %27, -1
  %37 = getelementptr inbounds <2 x i64>, <2 x i64>* bitcast ([60 x i32]* @pshufb_shf_table to <2 x i64>*), i64 %36
  %38 = bitcast <2 x i64>* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 16
  %40 = bitcast <2 x i64> %8 to <16 x i8>
  %41 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %40, <16 x i8> %39) #5
  %42 = bitcast <16 x i8> %41 to <2 x i64>
  %43 = xor <16 x i8> %39, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %44 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %40, <16 x i8> %43) #5
  %45 = bitcast <2 x i64> %11 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %45, <16 x i8> %39) #5
  %47 = or <16 x i8> %46, %44
  %48 = bitcast <16 x i8> %47 to <2 x i64>
  %49 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %45, <16 x i8> %43) #5
  %50 = bitcast <2 x i64> %14 to <16 x i8>
  %51 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %50, <16 x i8> %39) #5
  %52 = or <16 x i8> %51, %49
  %53 = bitcast <16 x i8> %52 to <2 x i64>
  %54 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %50, <16 x i8> %43) #5
  %55 = bitcast <2 x i64> %17 to <16 x i8>
  %56 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %55, <16 x i8> %39) #5
  %57 = or <16 x i8> %56, %54
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %55, <16 x i8> %43) #5
  %60 = bitcast <2 x i64> %31 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %60, <16 x i8> %39) #5
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = or <16 x i8> %61, %59
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  %65 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %42, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %66 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %42, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %67 = xor <2 x i64> %65, %64
  %68 = xor <2 x i64> %67, %66
  br label %69

69:                                               ; preds = %23, %29
  %70 = phi <2 x i64> [ %8, %23 ], [ %48, %29 ]
  %71 = phi <2 x i64> [ %11, %23 ], [ %53, %29 ]
  %72 = phi <2 x i64> [ %14, %23 ], [ %58, %29 ]
  %73 = phi <2 x i64> [ %17, %23 ], [ %68, %29 ]
  %74 = phi <2 x i64> [ %24, %23 ], [ %62, %29 ]
  %75 = phi i8* [ %1, %23 ], [ %33, %29 ]
  %76 = phi i8* [ %2, %23 ], [ %34, %29 ]
  %77 = phi i64 [ %3, %23 ], [ %35, %29 ]
  %78 = add nsw i64 %77, -64
  %79 = icmp sgt i64 %78, -1
  br i1 %79, label %80, label %128

80:                                               ; preds = %69, %80
  %81 = phi i64 [ %124, %80 ], [ %78, %69 ]
  %82 = phi i8* [ %122, %80 ], [ %76, %69 ]
  %83 = phi i8* [ %123, %80 ], [ %75, %69 ]
  %84 = phi <2 x i64> [ %121, %80 ], [ %73, %69 ]
  %85 = phi <2 x i64> [ %119, %80 ], [ %72, %69 ]
  %86 = phi <2 x i64> [ %117, %80 ], [ %71, %69 ]
  %87 = phi <2 x i64> [ %115, %80 ], [ %70, %69 ]
  %88 = bitcast i8* %82 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 16
  %90 = getelementptr inbounds i8, i8* %82, i64 16
  %91 = bitcast i8* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 16
  %93 = getelementptr inbounds i8, i8* %82, i64 32
  %94 = bitcast i8* %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 16
  %96 = getelementptr inbounds i8, i8* %82, i64 48
  %97 = bitcast i8* %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 16
  %99 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %87, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %100 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %87, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %101 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %86, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %102 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %86, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %103 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %85, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %104 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %85, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %105 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %84, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %106 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %84, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %107 = bitcast i8* %83 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %107, align 1
  %108 = getelementptr inbounds i8, i8* %83, i64 16
  %109 = bitcast i8* %108 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %109, align 1
  %110 = getelementptr inbounds i8, i8* %83, i64 32
  %111 = bitcast i8* %110 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %111, align 1
  %112 = getelementptr inbounds i8, i8* %83, i64 48
  %113 = bitcast i8* %112 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %113, align 1
  %114 = xor <2 x i64> %99, %89
  %115 = xor <2 x i64> %114, %100
  %116 = xor <2 x i64> %101, %92
  %117 = xor <2 x i64> %116, %102
  %118 = xor <2 x i64> %103, %95
  %119 = xor <2 x i64> %118, %104
  %120 = xor <2 x i64> %105, %98
  %121 = xor <2 x i64> %120, %106
  %122 = getelementptr inbounds i8, i8* %82, i64 64
  %123 = getelementptr inbounds i8, i8* %83, i64 64
  %124 = add nsw i64 %81, -64
  %125 = icmp sgt i64 %124, -1
  br i1 %125, label %80, label %126

126:                                              ; preds = %80
  %127 = and i64 %78, 63
  br label %128

128:                                              ; preds = %126, %69
  %129 = phi <2 x i64> [ %70, %69 ], [ %115, %126 ]
  %130 = phi <2 x i64> [ %71, %69 ], [ %117, %126 ]
  %131 = phi <2 x i64> [ %72, %69 ], [ %119, %126 ]
  %132 = phi <2 x i64> [ %73, %69 ], [ %121, %126 ]
  %133 = phi i8* [ %75, %69 ], [ %123, %126 ]
  %134 = phi i8* [ %76, %69 ], [ %122, %126 ]
  %135 = phi i64 [ %77, %69 ], [ %127, %126 ]
  %136 = add nsw i64 %135, -48
  %137 = icmp sgt i64 %136, -1
  br i1 %137, label %138, label %168

138:                                              ; preds = %128
  %139 = bitcast i8* %134 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 16
  %141 = getelementptr inbounds i8, i8* %134, i64 16
  %142 = bitcast i8* %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 16
  %144 = getelementptr inbounds i8, i8* %134, i64 32
  %145 = bitcast i8* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 16
  %147 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %131, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %148 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %131, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %149 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %130, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %150 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %130, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %151 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %152 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %153 = bitcast i8* %133 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %153, align 1
  %154 = getelementptr inbounds i8, i8* %133, i64 16
  %155 = bitcast i8* %154 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %155, align 1
  %156 = getelementptr inbounds i8, i8* %133, i64 32
  %157 = bitcast i8* %156 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %157, align 1
  %158 = xor <2 x i64> %151, %140
  %159 = xor <2 x i64> %158, %152
  %160 = xor <2 x i64> %149, %143
  %161 = xor <2 x i64> %160, %150
  %162 = xor <2 x i64> %147, %146
  %163 = xor <2 x i64> %162, %148
  %164 = icmp eq i64 %136, 0
  br i1 %164, label %262, label %165

165:                                              ; preds = %138
  %166 = getelementptr inbounds i8, i8* %133, i64 48
  %167 = getelementptr inbounds i8, i8* %134, i64 48
  br label %209

168:                                              ; preds = %128
  %169 = add nsw i64 %135, -32
  %170 = icmp sgt i64 %169, -1
  br i1 %170, label %171, label %192

171:                                              ; preds = %168
  %172 = bitcast i8* %134 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 16
  %174 = getelementptr inbounds i8, i8* %134, i64 16
  %175 = bitcast i8* %174 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 16
  %177 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %130, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %178 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %130, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %179 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %180 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %181 = bitcast i8* %133 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %181, align 1
  %182 = getelementptr inbounds i8, i8* %133, i64 16
  %183 = bitcast i8* %182 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %183, align 1
  %184 = xor <2 x i64> %179, %173
  %185 = xor <2 x i64> %184, %180
  %186 = xor <2 x i64> %177, %176
  %187 = xor <2 x i64> %186, %178
  %188 = icmp eq i64 %169, 0
  br i1 %188, label %262, label %189

189:                                              ; preds = %171
  %190 = getelementptr inbounds i8, i8* %133, i64 32
  %191 = getelementptr inbounds i8, i8* %134, i64 32
  br label %209

192:                                              ; preds = %168
  %193 = add nsw i64 %135, -16
  %194 = icmp sgt i64 %193, -1
  br i1 %194, label %195, label %207

195:                                              ; preds = %192
  %196 = bitcast i8* %134 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 16
  %198 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %199 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %129, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %200 = bitcast i8* %133 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %200, align 1
  %201 = xor <2 x i64> %198, %197
  %202 = xor <2 x i64> %201, %199
  %203 = icmp eq i64 %193, 0
  br i1 %203, label %262, label %204

204:                                              ; preds = %195
  %205 = getelementptr inbounds i8, i8* %133, i64 16
  %206 = getelementptr inbounds i8, i8* %134, i64 16
  br label %209

207:                                              ; preds = %192
  %208 = icmp eq i64 %135, 0
  br i1 %208, label %262, label %209

209:                                              ; preds = %165, %204, %207, %189, %21
  %210 = phi <2 x i64> [ %8, %21 ], [ %132, %165 ], [ %131, %189 ], [ %130, %204 ], [ %129, %207 ]
  %211 = phi <2 x i64> [ %11, %21 ], [ %159, %165 ], [ %132, %189 ], [ %131, %204 ], [ %130, %207 ]
  %212 = phi <2 x i64> [ %14, %21 ], [ %161, %165 ], [ %185, %189 ], [ %132, %204 ], [ %131, %207 ]
  %213 = phi <2 x i64> [ %17, %21 ], [ %163, %165 ], [ %187, %189 ], [ %202, %204 ], [ %132, %207 ]
  %214 = phi i8* [ %1, %21 ], [ %166, %165 ], [ %190, %189 ], [ %205, %204 ], [ %133, %207 ]
  %215 = phi i8* [ %2, %21 ], [ %167, %165 ], [ %191, %189 ], [ %206, %204 ], [ %134, %207 ]
  %216 = phi i64 [ %3, %21 ], [ %136, %165 ], [ %169, %189 ], [ %193, %204 ], [ %135, %207 ]
  %217 = bitcast [2 x i64]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %217)
  %218 = icmp ugt i64 %216, 15
  %219 = sub i64 16, %216
  %220 = select i1 %218, i64 0, i64 %219
  %221 = getelementptr i8, i8* %217, i64 %216
  call void @llvm.memset.p0i8.i64(i8* align 1 %221, i8 0, i64 %220, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %217, i8* align 1 %215, i64 %216, i1 false)
  %222 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %225 = load i64, i64* %224, align 16
  %226 = insertelement <2 x i64> undef, i64 %225, i32 0
  %227 = insertelement <2 x i64> %226, i64 %223, i32 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %217)
  %228 = bitcast i8* %214 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %228, align 1
  %229 = add i64 %216, -1
  %230 = getelementptr inbounds <2 x i64>, <2 x i64>* bitcast ([60 x i32]* @pshufb_shf_table to <2 x i64>*), i64 %229
  %231 = bitcast <2 x i64>* %230 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 16
  %233 = bitcast <2 x i64> %210 to <16 x i8>
  %234 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %233, <16 x i8> %232) #5
  %235 = bitcast <16 x i8> %234 to <2 x i64>
  %236 = xor <16 x i8> %232, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %237 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %233, <16 x i8> %236) #5
  %238 = bitcast <2 x i64> %211 to <16 x i8>
  %239 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %238, <16 x i8> %232) #5
  %240 = or <16 x i8> %239, %237
  %241 = bitcast <16 x i8> %240 to <2 x i64>
  %242 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %238, <16 x i8> %236) #5
  %243 = bitcast <2 x i64> %212 to <16 x i8>
  %244 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %243, <16 x i8> %232) #5
  %245 = or <16 x i8> %244, %242
  %246 = bitcast <16 x i8> %245 to <2 x i64>
  %247 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %243, <16 x i8> %236) #5
  %248 = bitcast <2 x i64> %213 to <16 x i8>
  %249 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %248, <16 x i8> %232) #5
  %250 = or <16 x i8> %249, %247
  %251 = bitcast <16 x i8> %250 to <2 x i64>
  %252 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %248, <16 x i8> %236) #5
  %253 = bitcast <2 x i64> %227 to <16 x i8>
  %254 = tail call <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8> %253, <16 x i8> %232) #5
  %255 = bitcast <16 x i8> %254 to <2 x i64>
  %256 = or <16 x i8> %254, %252
  %257 = bitcast <16 x i8> %256 to <2 x i64>
  %258 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %235, <2 x i64> <i64 undef, i64 5708721108>, i8 16) #5
  %259 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %235, <2 x i64> <i64 7631803798, i64 undef>, i8 1) #5
  %260 = xor <2 x i64> %258, %257
  %261 = xor <2 x i64> %260, %259
  br label %262

262:                                              ; preds = %207, %195, %171, %138, %209
  %263 = phi <2 x i64> [ %241, %209 ], [ %132, %138 ], [ %131, %171 ], [ %130, %195 ], [ %129, %207 ]
  %264 = phi <2 x i64> [ %246, %209 ], [ %159, %138 ], [ %132, %171 ], [ %131, %195 ], [ %130, %207 ]
  %265 = phi <2 x i64> [ %251, %209 ], [ %161, %138 ], [ %185, %171 ], [ %132, %195 ], [ %131, %207 ]
  %266 = phi <2 x i64> [ %261, %209 ], [ %163, %138 ], [ %187, %171 ], [ %202, %195 ], [ %132, %207 ]
  %267 = phi <2 x i64> [ %255, %209 ], [ %74, %138 ], [ %74, %171 ], [ %74, %195 ], [ %74, %207 ]
  store <2 x i64> %263, <2 x i64>* %7, align 1
  store <2 x i64> %264, <2 x i64>* %10, align 1
  store <2 x i64> %265, <2 x i64>* %13, align 1
  store <2 x i64> %266, <2 x i64>* %16, align 1
  store <2 x i64> %267, <2 x i64>* %19, align 1
  br label %268

268:                                              ; preds = %21, %262
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @Cr_z_crc_fold_512to32(%struct.internal_state* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 0
  %3 = bitcast i32* %2 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 1
  %5 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 4
  %6 = bitcast i32* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 8
  %9 = bitcast i32* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = getelementptr inbounds %struct.internal_state, %struct.internal_state* %0, i64 0, i32 11, i64 12
  %12 = bitcast i32* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  %14 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %4, <2 x i64> <i64 undef, i64 6259578832>, i8 16)
  %15 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %4, <2 x i64> <i64 3433693342, i64 undef>, i8 1)
  %16 = xor <2 x i64> %14, %7
  %17 = xor <2 x i64> %16, %15
  %18 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %17, <2 x i64> <i64 undef, i64 6259578832>, i8 16)
  %19 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %17, <2 x i64> <i64 3433693342, i64 undef>, i8 1)
  %20 = xor <2 x i64> %18, %10
  %21 = xor <2 x i64> %20, %19
  %22 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %21, <2 x i64> <i64 undef, i64 6259578832>, i8 16)
  %23 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %21, <2 x i64> <i64 3433693342, i64 undef>, i8 1)
  %24 = xor <2 x i64> %22, %13
  %25 = xor <2 x i64> %24, %23
  %26 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %25, <2 x i64> <i64 3433693342, i64 undef>, i8 0)
  %27 = bitcast <2 x i64> %25 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %29 = bitcast <16 x i8> %28 to <2 x i64>
  %30 = xor <2 x i64> %26, %29
  %31 = bitcast <2 x i64> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %31, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = bitcast <16 x i8> %32 to <2 x i64>
  %34 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %33, <2 x i64> <i64 undef, i64 5969371428>, i8 16)
  %35 = xor <2 x i64> %30, %34
  %36 = and <2 x i64> %35, <i64 -4294967296, i64 -1>
  %37 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %36, <2 x i64> <i64 8439010880, i64 undef>, i8 0)
  %38 = xor <2 x i64> %36, %37
  %39 = and <2 x i64> %38, <i64 -1, i64 0>
  %40 = tail call <2 x i64> @llvm.x86.pclmulqdq(<2 x i64> %39, <2 x i64> <i64 undef, i64 7976584768>, i8 16)
  %41 = xor <2 x i64> %36, %40
  %42 = xor <2 x i64> %41, %39
  %43 = bitcast <2 x i64> %42 to <4 x i32>
  %44 = extractelement <4 x i32> %43, i64 2
  %45 = xor i32 %44, -1
  ret i32 %45
}

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.pclmulqdq(<2 x i64>, <2 x i64>, i8 immarg) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.pshuf.b.128(<16 x i8>, <16 x i8>) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+pclmul,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+pclmul,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+pclmul,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
