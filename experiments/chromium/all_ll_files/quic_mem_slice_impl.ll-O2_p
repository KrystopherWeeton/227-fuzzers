; ModuleID = '../../net/quic/platform/impl/quic_mem_slice_impl.cc'
source_filename = "../../net/quic/platform/impl/quic_mem_slice_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::QuicMemSliceImpl" = type { %class.scoped_refptr, i64 }
%class.scoped_refptr = type { %"class.net::IOBuffer"* }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i8* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.quic::QuicBufferAllocator" = type { i32 (...)** }
%"class.quic::(anonymous namespace)::QuicIOBuffer" = type { %"class.net::IOBuffer", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.quic::QuicBufferDeleter" }
%"class.quic::QuicBufferDeleter" = type { %"class.quic::QuicBufferAllocator"* }
%"class.quic::(anonymous namespace)::QuicIOBuffer.7" = type { %"class.net::IOBuffer", %"class.std::__1::unique_ptr.3" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem" }

@_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEEE = internal unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::(anonymous namespace)::QuicIOBuffer"*)* @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEED2Ev to i8*), i8* bitcast (void (%"class.quic::(anonymous namespace)::QuicIOBuffer"*)* @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEED0Ev to i8*)] }, align 8
@_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEEE = internal unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::(anonymous namespace)::QuicIOBuffer.7"*)* @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEED2Ev to i8*), i8* bitcast (void (%"class.quic::(anonymous namespace)::QuicIOBuffer.7"*)* @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEED0Ev to i8*)] }, align 8

@_ZN4quic16QuicMemSliceImplC1Ev = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*), void (%"class.quic::QuicMemSliceImpl"*)* @_ZN4quic16QuicMemSliceImplC2Ev
@_ZN4quic16QuicMemSliceImplC1ENSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEm = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*, i8*, %"class.quic::QuicBufferAllocator"*, i64), void (%"class.quic::QuicMemSliceImpl"*, i8*, %"class.quic::QuicBufferAllocator"*, i64)* @_ZN4quic16QuicMemSliceImplC2ENSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEm
@_ZN4quic16QuicMemSliceImplC1ENSt3__110unique_ptrIA_cNS1_14default_deleteIS3_EEEEm = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*, i8*, i64), void (%"class.quic::QuicMemSliceImpl"*, i8*, i64)* @_ZN4quic16QuicMemSliceImplC2ENSt3__110unique_ptrIA_cNS1_14default_deleteIS3_EEEEm
@_ZN4quic16QuicMemSliceImplC1E13scoped_refptrIN3net8IOBufferEEm = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*, %"class.net::IOBuffer"*, i64), void (%"class.quic::QuicMemSliceImpl"*, %"class.net::IOBuffer"*, i64)* @_ZN4quic16QuicMemSliceImplC2E13scoped_refptrIN3net8IOBufferEEm
@_ZN4quic16QuicMemSliceImplC1EOS0_ = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*, %"class.quic::QuicMemSliceImpl"*), void (%"class.quic::QuicMemSliceImpl"*, %"class.quic::QuicMemSliceImpl"*)* @_ZN4quic16QuicMemSliceImplC2EOS0_
@_ZN4quic16QuicMemSliceImplD1Ev = hidden unnamed_addr alias void (%"class.quic::QuicMemSliceImpl"*), void (%"class.quic::QuicMemSliceImpl"*)* @_ZN4quic16QuicMemSliceImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic16QuicMemSliceImplC2Ev(%"class.quic::QuicMemSliceImpl"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImplC2ENSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEm(%"class.quic::QuicMemSliceImpl"* nocapture, i8*, %"class.quic::QuicBufferAllocator"*, i64) unnamed_addr #1 align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint %"class.quic::QuicBufferAllocator"* %2 to i64
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  %9 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false)
  %10 = tail call i8* @_Znwm(i64 40) #9
  %11 = bitcast i8* %10 to %"class.net::IOBuffer"*
  tail call void @_ZN3net8IOBufferC2Ev(%"class.net::IOBuffer"* nonnull %11) #10
  %12 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 24
  %14 = bitcast i8* %13 to i64*
  store i64 %5, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %10, i64 32
  %16 = bitcast i8* %15 to i64*
  store i64 %6, i64* %16, align 8
  tail call void @_ZN3net8IOBuffer21AssertValidBufferSizeEm(i64 %3) #10
  %17 = load i64, i64* %14, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 16
  %19 = bitcast i8* %18 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %10, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = atomicrmw add i32* %21, i32 1 monotonic
  %23 = ptrtoint i8* %10 to i64
  %24 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  %25 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %7, align 8
  store i64 %23, i64* %24, align 8
  %26 = icmp eq %"class.net::IOBuffer"* %25, null
  br i1 %26, label %39, label %27

27:                                               ; preds = %4
  %28 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %25, i64 0, i32 1
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw sub i32* %29, i32 1 acq_rel
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %39

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %28, i64 -2
  %34 = bitcast %"class.base::RefCountedThreadSafe"* %33 to %"class.net::IOBuffer"*
  %35 = bitcast %"class.base::RefCountedThreadSafe"* %33 to void (%"class.net::IOBuffer"*)***
  %36 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %36, i64 1
  %38 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %37, align 8
  tail call void %38(%"class.net::IOBuffer"* nonnull %34) #10
  br label %39

39:                                               ; preds = %4, %27, %32
  store i64 %3, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImplC2ENSt3__110unique_ptrIA_cNS1_14default_deleteIS3_EEEEm(%"class.quic::QuicMemSliceImpl"* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  %7 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  %8 = tail call i8* @_Znwm(i64 32) #9
  %9 = bitcast i8* %8 to %"class.net::IOBuffer"*
  tail call void @_ZN3net8IOBufferC2Ev(%"class.net::IOBuffer"* nonnull %9) #10
  %10 = bitcast i8* %8 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %8, i64 24
  %12 = bitcast i8* %11 to i64*
  store i64 %4, i64* %12, align 8
  tail call void @_ZN3net8IOBuffer21AssertValidBufferSizeEm(i64 %2) #10
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %8, i64 16
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 8
  %17 = bitcast i8* %16 to i32*
  %18 = atomicrmw add i32* %17, i32 1 monotonic
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  %21 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %5, align 8
  store i64 %19, i64* %20, align 8
  %22 = icmp eq %"class.net::IOBuffer"* %21, null
  br i1 %22, label %35, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %21, i64 0, i32 1
  %25 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw sub i32* %25, i32 1 acq_rel
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %35

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %24, i64 -2
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %29 to %"class.net::IOBuffer"*
  %31 = bitcast %"class.base::RefCountedThreadSafe"* %29 to void (%"class.net::IOBuffer"*)***
  %32 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %32, i64 1
  %34 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %33, align 8
  tail call void %34(%"class.net::IOBuffer"* nonnull %30) #10
  br label %35

35:                                               ; preds = %3, %23, %28
  store i64 %2, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImplC2E13scoped_refptrIN3net8IOBufferEEm(%"class.quic::QuicMemSliceImpl"* nocapture, %"class.net::IOBuffer"*, i64) unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.net::IOBuffer"* %1 to i64
  %5 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImplC2EOS0_(%"class.quic::QuicMemSliceImpl"* nocapture, %"class.quic::QuicMemSliceImpl"* nocapture dereferenceable(16)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.quic::QuicMemSliceImpl"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %3, align 8
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %7, align 8
  store i64 0, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"class.quic::QuicMemSliceImpl"* @_ZN4quic16QuicMemSliceImplaSEOS0_(%"class.quic::QuicMemSliceImpl"* returned, %"class.quic::QuicMemSliceImpl"* nocapture dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 0, i32 0
  %4 = bitcast %"class.quic::QuicMemSliceImpl"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.net::IOBuffer"* null, %"class.net::IOBuffer"** %3, align 8
  %6 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  %7 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %7, align 8
  store i64 %5, i64* %6, align 8
  %9 = icmp eq %"class.net::IOBuffer"* %8, null
  br i1 %9, label %22, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %8, i64 0, i32 1
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw sub i32* %12, i32 1 acq_rel
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %22

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %11, i64 -2
  %17 = bitcast %"class.base::RefCountedThreadSafe"* %16 to %"class.net::IOBuffer"*
  %18 = bitcast %"class.base::RefCountedThreadSafe"* %16 to void (%"class.net::IOBuffer"*)***
  %19 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %19, i64 1
  %21 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %20, align 8
  tail call void %21(%"class.net::IOBuffer"* nonnull %17) #10
  br label %22

22:                                               ; preds = %2, %10, %15
  %23 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %1, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  store i64 %24, i64* %25, align 8
  store i64 0, i64* %23, align 8
  ret %"class.quic::QuicMemSliceImpl"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImplD2Ev(%"class.quic::QuicMemSliceImpl"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %2, align 8
  %4 = icmp eq %"class.net::IOBuffer"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw sub i32* %7, i32 1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %6, i64 -2
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %11 to %"class.net::IOBuffer"*
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %11 to void (%"class.net::IOBuffer"*)***
  %14 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %14, i64 1
  %16 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %15, align 8
  tail call void %16(%"class.net::IOBuffer"* nonnull %12) #10
  br label %17

17:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic16QuicMemSliceImpl5ResetEv(%"class.quic::QuicMemSliceImpl"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.quic::QuicMemSliceImpl"* %0 to i64*
  %3 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %3, align 8
  store i64 0, i64* %2, align 8
  %5 = icmp eq %"class.net::IOBuffer"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.net::IOBuffer"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.net::IOBuffer"*)***
  %15 = load void (%"class.net::IOBuffer"*)**, void (%"class.net::IOBuffer"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %15, i64 1
  %17 = load void (%"class.net::IOBuffer"*)*, void (%"class.net::IOBuffer"*)** %16, align 8
  tail call void %17(%"class.net::IOBuffer"* nonnull %13) #10
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 1
  store i64 0, i64* %19, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK4quic16QuicMemSliceImpl4dataEv(%"class.quic::QuicMemSliceImpl"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::QuicMemSliceImpl", %"class.quic::QuicMemSliceImpl"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.net::IOBuffer"*, %"class.net::IOBuffer"** %2, align 8
  %4 = icmp eq %"class.net::IOBuffer"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::IOBuffer", %"class.net::IOBuffer"* %3, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i8* [ %7, %5 ], [ null, %1 ]
  ret i8* %9
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN3net8IOBufferC2Ev(%"class.net::IOBuffer"*) unnamed_addr #5

declare void @_ZN3net8IOBuffer21AssertValidBufferSizeEm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEED2Ev(%"class.quic::(anonymous namespace)::QuicIOBuffer"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8** %4 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %7, align 8
  %8 = icmp eq i8* %6, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %11 = load %"class.quic::QuicBufferAllocator"*, %"class.quic::QuicBufferAllocator"** %10, align 8
  %12 = bitcast %"class.quic::QuicBufferAllocator"* %11 to void (%"class.quic::QuicBufferAllocator"*, i8*)***
  %13 = load void (%"class.quic::QuicBufferAllocator"*, i8*)**, void (%"class.quic::QuicBufferAllocator"*, i8*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.quic::QuicBufferAllocator"*, i8*)*, void (%"class.quic::QuicBufferAllocator"*, i8*)** %13, i64 4
  %15 = load void (%"class.quic::QuicBufferAllocator"*, i8*)*, void (%"class.quic::QuicBufferAllocator"*, i8*)** %14, align 8
  tail call void %15(%"class.quic::QuicBufferAllocator"* %11, i8* nonnull %6) #10
  br label %16

16:                                               ; preds = %1, %9
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEED0Ev(%"class.quic::(anonymous namespace)::QuicIOBuffer"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS_17QuicBufferDeleterEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8** %4 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %7, align 8
  %8 = icmp eq i8* %6, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer", %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %11 = load %"class.quic::QuicBufferAllocator"*, %"class.quic::QuicBufferAllocator"** %10, align 8
  %12 = bitcast %"class.quic::QuicBufferAllocator"* %11 to void (%"class.quic::QuicBufferAllocator"*, i8*)***
  %13 = load void (%"class.quic::QuicBufferAllocator"*, i8*)**, void (%"class.quic::QuicBufferAllocator"*, i8*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.quic::QuicBufferAllocator"*, i8*)*, void (%"class.quic::QuicBufferAllocator"*, i8*)** %13, i64 4
  %15 = load void (%"class.quic::QuicBufferAllocator"*, i8*)*, void (%"class.quic::QuicBufferAllocator"*, i8*)** %14, align 8
  tail call void %15(%"class.quic::QuicBufferAllocator"* %11, i8* nonnull %6) #10
  br label %16

16:                                               ; preds = %1, %9
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #10
  %17 = bitcast %"class.quic::(anonymous namespace)::QuicIOBuffer"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEED2Ev(%"class.quic::(anonymous namespace)::QuicIOBuffer.7"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8** %4 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %7, align 8
  %8 = icmp eq i8* %6, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %6) #9
  br label %10

10:                                               ; preds = %1, %9
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEED0Ev(%"class.quic::(anonymous namespace)::QuicIOBuffer.7"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4quic12_GLOBAL__N_112QuicIOBufferINSt3__110unique_ptrIA_cNS2_14default_deleteIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.quic::(anonymous namespace)::QuicIOBuffer.7", %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8** %4 to <2 x i8*>*
  store <2 x i8*> zeroinitializer, <2 x i8*>* %7, align 8
  %8 = icmp eq i8* %6, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %6) #9
  br label %10

10:                                               ; preds = %1, %9
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #10
  %11 = bitcast %"class.quic::(anonymous namespace)::QuicIOBuffer.7"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
