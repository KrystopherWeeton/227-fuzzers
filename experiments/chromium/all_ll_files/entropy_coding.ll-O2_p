; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/entropy_coding.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/entropy_coding.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.Bitstreamstruct = type { [600 x i8], i32, i32, i32 }
%struct.IsacSaveEncoderData = type { i32, i16, [2 x i32], [2 x double], [8 x i32], [216 x i32], [24 x i32], [156 x double], [84 x double], [480 x i16], [480 x i16], [2 x i16], i32 }
%struct.ISACUBSaveEncDataStruct = type { [16 x i32], [12 x double], [12 x i32], %struct.Bitstreamstruct, [240 x i16], [240 x i16] }

@WebRtcIsac_kQKltModelCdfPtr = external global [1 x i16*], align 8
@WebRtcIsac_kQKltModelInitIndex = external constant [1 x i16], align 2
@WebRtcIsac_kQKltCdfPtrShape = external global [108 x i16*], align 16
@WebRtcIsac_kQKltInitIndexShape = external constant [108 x i16], align 16
@WebRtcIsac_kQKltCdfPtrGain = external global [12 x i16*], align 16
@WebRtcIsac_kQKltInitIndexGain = external constant [12 x i16], align 16
@WebRtcIsac_kQKltLevelsShape = external local_unnamed_addr constant [578 x double], align 16
@WebRtcIsac_kQKltOffsetShape = external local_unnamed_addr constant [108 x i16], align 16
@WebRtcIsac_kQKltLevelsGain = external local_unnamed_addr constant [392 x double], align 16
@WebRtcIsac_kQKltOffsetGain = external local_unnamed_addr constant [12 x i16], align 16
@WebRtcIsac_kKltT1Gain = external local_unnamed_addr constant [4 x double], align 16
@WebRtcIsac_kKltT1Shape = external local_unnamed_addr constant [324 x double], align 16
@WebRtcIsac_kKltT2Gain = external local_unnamed_addr constant [36 x double], align 16
@WebRtcIsac_kKltT2Shape = external local_unnamed_addr constant [36 x double], align 16
@WebRtcIsac_kLpcMeansGain = external local_unnamed_addr constant [12 x double], align 16
@WebRtcIsac_kLpcMeansShape = external local_unnamed_addr constant [108 x double], align 16
@WebRtcIsac_kQKltQuantMinShape = external local_unnamed_addr constant [108 x i16], align 16
@WebRtcIsac_kQKltMaxIndShape = external local_unnamed_addr constant [108 x i16], align 16
@WebRtcIsac_kLpcShapeCdfMatUb12 = external global [8 x i16*], align 16
@WebRtcIsac_kLpcShapeCdfMatUb16 = external global [16 x i16*], align 16
@WebRtcIsac_kQKltQuantMinGain = external local_unnamed_addr constant [12 x i16], align 16
@WebRtcIsac_kQKltMaxIndGain = external local_unnamed_addr constant [12 x i16], align 16
@WebRtcIsac_kLpcGainCdfMat = external global [6 x i16*], align 16
@WebRtcIsac_kLpcGainEntropySearch = external constant [6 x i16], align 2
@WebRtcIsac_kQArRcCdfPtr = external global [6 x i16*], align 16
@WebRtcIsac_kQArRcInitIndex = external constant [6 x i16], align 2
@WebRtcIsac_kQArRcLevelsPtr = external local_unnamed_addr global [6 x i16*], align 16
@WebRtcIsac_kQArBoundaryLevels = external local_unnamed_addr constant [12 x i16], align 16
@WebRtcIsac_kQGainCdf_ptr = external global [1 x i16*], align 8
@WebRtcIsac_kQGainInitIndex = external constant [1 x i16], align 2
@WebRtcIsac_kQGain2Levels = external local_unnamed_addr constant [18 x i32], align 16
@WebRtcIsac_kQGain2BoundaryLevels = external local_unnamed_addr constant [19 x i32], align 16
@WebRtcIsac_kQPitchGainCdf = external constant [255 x i16], align 16
@WebRtcIsac_kQCdfTableSizeGain = external constant [1 x i16], align 2
@WebRtcIsac_kQMeanGain1Q12 = external local_unnamed_addr constant [144 x i16], align 16
@WebRtcIsac_kQMeanGain2Q12 = external local_unnamed_addr constant [144 x i16], align 16
@WebRtcIsac_kQMeanGain3Q12 = external local_unnamed_addr constant [144 x i16], align 16
@WebRtcIsac_kQMeanGain4Q12 = external local_unnamed_addr constant [144 x i16], align 16
@WebRtcIsac_kTransform = external local_unnamed_addr constant [4 x [4 x double]], align 16
@WebRtcIsac_kIndexLowerLimitGain = external local_unnamed_addr constant [3 x i16], align 2
@WebRtcIsac_kIndexUpperLimitGain = external local_unnamed_addr constant [3 x i16], align 2
@WebRtcIsac_kIndexMultsGain = external local_unnamed_addr constant [2 x i16], align 2
@WebRtcIsac_kQPitchLagStepsizeLo = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kQPitchLagCdfPtrLo = external global [4 x i16*], align 16
@WebRtcIsac_kQPitchLagCdfSizeLo = external constant [1 x i16], align 2
@WebRtcIsac_kQMeanLag2Lo = external local_unnamed_addr constant [19 x double], align 16
@WebRtcIsac_kQMeanLag3Lo = external local_unnamed_addr constant [1 x double], align 8
@WebRtcIsac_kQMeanLag4Lo = external local_unnamed_addr constant [9 x double], align 16
@WebRtcIsac_kQIndexLowerLimitLagLo = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kQInitIndexLagLo = external constant [3 x i16], align 2
@WebRtcIsac_kQPitchLagStepsizeMid = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kQPitchLagCdfPtrMid = external global [4 x i16*], align 16
@WebRtcIsac_kQPitchLagCdfSizeMid = external constant [1 x i16], align 2
@WebRtcIsac_kQMeanLag2Mid = external local_unnamed_addr constant [35 x double], align 16
@WebRtcIsac_kQMeanLag3Mid = external local_unnamed_addr constant [1 x double], align 8
@WebRtcIsac_kQMeanLag4Mid = external local_unnamed_addr constant [19 x double], align 16
@WebRtcIsac_kQIndexLowerLimitLagMid = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kQInitIndexLagMid = external constant [3 x i16], align 2
@WebRtcIsac_kQPitchLagStepsizeHi = external local_unnamed_addr constant double, align 8
@WebRtcIsac_kQPitchLagCdfPtrHi = external global [4 x i16*], align 16
@WebRtcIsac_kQPitchLagCdfSizeHi = external constant [1 x i16], align 2
@WebRtcIsac_kQMeanLag2Hi = external local_unnamed_addr constant [67 x double], align 16
@WebRtcIsac_kQMeanLag3Hi = external local_unnamed_addr constant [1 x double], align 8
@WebRtcIsac_kQMeanLag4Hi = external local_unnamed_addr constant [34 x double], align 16
@WebRtcIsac_kQindexLowerLimitLagHi = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kQInitIndexLagHi = external constant [3 x i16], align 2
@WebRtcIsac_kTransformTranspose = external local_unnamed_addr constant [4 x [4 x double]], align 16
@WebRtcIsac_kQIndexUpperLimitLagLo = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kQIndexUpperLimitLagMid = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kQindexUpperLimitLagHi = external local_unnamed_addr constant [4 x i16], align 2
@WebRtcIsac_kFrameLengthCdf = hidden constant [4 x i16] [i16 0, i16 21845, i16 -21846, i16 -1], align 2
@WebRtcIsac_kFrameLengthCdf_ptr = hidden global [1 x i16*] [i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kFrameLengthCdf, i32 0, i32 0)], align 8
@WebRtcIsac_kFrameLengthInitIndex = hidden constant [1 x i16] [i16 1], align 2
@kBwCdfPtr = internal constant [1 x i16*] [i16* getelementptr inbounds ([25 x i16], [25 x i16]* @kBwCdf, i32 0, i32 0)], align 8
@kBwInitIndex = internal constant [1 x i16] [i16 7], align 2
@WebRtcIsac_kLpcShapeEntropySearchUb12 = external constant [8 x i16], align 16
@WebRtcIsac_kLpcShapeEntropySearchUb16 = external constant [16 x i16], align 16
@kOneBitEqualProbCdf_ptr = internal constant [1 x i16*] [i16* getelementptr inbounds ([3 x i16], [3 x i16]* @kOneBitEqualProbCdf, i32 0, i32 0)], align 8
@kOneBitEqualProbInitIndex = internal constant [1 x i16] [i16 1], align 2
@WebRtcIsac_kCos = external local_unnamed_addr constant [6 x [60 x i16]], align 16
@kBwCdf = internal constant [25 x i16] [i16 0, i16 2731, i16 5461, i16 8192, i16 10923, i16 13653, i16 16384, i16 19114, i16 21845, i16 24576, i16 27306, i16 30037, i16 -32768, i16 -30038, i16 -27307, i16 -24577, i16 -21846, i16 -19115, i16 -16385, i16 -13654, i16 -10923, i16 -8193, i16 -5462, i16 -2732, i16 -1], align 16
@kOneBitEqualProbCdf = internal constant [3 x i16] [i16 0, i16 -32768, i16 -1], align 2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeSpec(%struct.Bitstreamstruct*, i16 signext, i32, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %6 = alloca [6 x i32], align 16
  %7 = alloca i32, align 4
  %8 = alloca [480 x i16], align 16
  %9 = alloca [480 x i16], align 16
  %10 = alloca [120 x i32], align 16
  %11 = alloca [120 x i16], align 16
  %12 = alloca [7 x i16], align 2
  %13 = alloca [6 x i16], align 2
  %14 = bitcast [480 x i16]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 960, i1 false)
  %15 = bitcast [480 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 960, i1 false)
  %16 = bitcast [120 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 480, i1 false)
  %17 = bitcast [120 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %17) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 240, i1 false)
  %18 = bitcast [7 x i16]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 14, i8* nonnull %18) #7
  %19 = getelementptr inbounds [7 x i16], [7 x i16]* %12, i64 0, i64 0
  %20 = bitcast [6 x i16]* %13 to i8*
  %21 = bitcast [7 x i16]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %21, i8 -86, i64 14, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20) #7
  %22 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 0
  %23 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 1
  %24 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 2
  %25 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 3
  %26 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 4
  %27 = getelementptr inbounds [6 x i16], [6 x i16]* %13, i64 0, i64 5
  %28 = icmp eq i32 %2, 0
  %29 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 0
  %30 = getelementptr inbounds %struct.Bitstreamstruct, %struct.Bitstreamstruct* %0, i64 0, i32 1
  %31 = bitcast [6 x i16]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %31, i8 -86, i64 12, i1 false)
  %32 = load i32, i32* %30, align 4
  br i1 %28, label %33, label %92

33:                                               ; preds = %5
  %34 = icmp slt i16 %1, 614
  br i1 %34, label %35, label %66

35:                                               ; preds = %33, %57
  %36 = phi i64 [ %64, %57 ], [ 0, %33 ]
  %37 = phi i32 [ %43, %57 ], [ %32, %33 ]
  %38 = mul i32 %37, 196314165
  %39 = add i32 %38, 924410731
  %40 = ashr i32 %39, 25
  %41 = trunc i32 %40 to i16
  %42 = mul i32 %37, -1268468999
  %43 = add i32 %42, -1653660526
  %44 = add i32 %42, -1636883310
  %45 = ashr i32 %44, 25
  %46 = trunc i32 %45 to i16
  %47 = lshr i32 %43, 25
  %48 = and i32 %47, 15
  %49 = icmp ult i32 %48, 5
  br i1 %49, label %50, label %52

50:                                               ; preds = %35
  %51 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %36
  store i16 %41, i16* %51, align 2
  br label %57

52:                                               ; preds = %35
  %53 = icmp ult i32 %48, 10
  %54 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %36
  br i1 %53, label %55, label %56

55:                                               ; preds = %52
  store i16 %41, i16* %54, align 2
  br label %57

56:                                               ; preds = %52
  store i16 0, i16* %54, align 2
  br label %57

57:                                               ; preds = %56, %55, %50
  %58 = phi i16 [ %41, %56 ], [ 0, %55 ], [ %46, %50 ]
  %59 = phi i16 [ %46, %56 ], [ %46, %55 ], [ 0, %50 ]
  %60 = add nuw nsw i64 %36, 1
  %61 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %60
  store i16 %58, i16* %61, align 2
  %62 = add nuw nsw i64 %36, 2
  %63 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %62
  store i16 %59, i16* %63, align 2
  %64 = add nuw nsw i64 %36, 3
  %65 = icmp ult i64 %64, 478
  br i1 %65, label %35, label %119

66:                                               ; preds = %33
  %67 = mul i16 %1, -10
  %68 = add i16 %67, 22528
  %69 = sext i16 %68 to i32
  br label %70

70:                                               ; preds = %70, %66
  %71 = phi i32 [ 0, %66 ], [ %90, %70 ]
  %72 = phi i32 [ %32, %66 ], [ %74, %70 ]
  %73 = mul i32 %72, 196314165
  %74 = add i32 %73, 907633515
  %75 = add i32 %73, 924410731
  %76 = ashr i32 %75, 25
  %77 = lshr i32 %74, 25
  %78 = and i32 %77, 1
  %79 = mul nsw i32 %76, %69
  %80 = add nsw i32 %79, 8192
  %81 = ashr i32 %80, 14
  %82 = trunc i32 %81 to i16
  %83 = or i32 %78, %71
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %84
  store i16 %82, i16* %85, align 2
  %86 = or i32 %71, 1
  %87 = sub nuw nsw i32 %86, %78
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %88
  store i16 0, i16* %89, align 2
  %90 = add nuw nsw i32 %71, 2
  %91 = icmp ult i32 %90, 479
  br i1 %91, label %70, label %119

92:                                               ; preds = %5, %92
  %93 = phi i64 [ %113, %92 ], [ 0, %5 ]
  %94 = phi i32 [ %108, %92 ], [ %32, %5 ]
  %95 = mul i32 %94, 196314165
  %96 = add i32 %95, 924410731
  %97 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %93
  %98 = ashr i32 %96, 27
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %97, align 2
  %100 = add nuw nsw i64 %93, 1
  %101 = mul i32 %94, -1268468999
  %102 = add i32 %101, -1636883310
  %103 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %100
  %104 = ashr i32 %102, 27
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %103, align 2
  %106 = add nuw nsw i64 %93, 2
  %107 = mul i32 %94, 473723277
  %108 = add i32 %107, -183681627
  %109 = add i32 %107, -166904411
  %110 = getelementptr inbounds [480 x i16], [480 x i16]* %8, i64 0, i64 %106
  %111 = ashr i32 %109, 27
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* %110, align 2
  %113 = add nuw nsw i64 %93, 3
  %114 = icmp eq i64 %113, 480
  br i1 %114, label %115, label %92

115:                                              ; preds = %92
  %116 = icmp eq i32 %2, 1
  %117 = zext i1 %116 to i16
  %118 = select i1 %116, i32 240, i32 480
  br label %119

119:                                              ; preds = %70, %57, %115
  %120 = phi i16 [ %117, %115 ], [ 0, %57 ], [ 0, %70 ]
  %121 = phi i32 [ %118, %115 ], [ 480, %57 ], [ 480, %70 ]
  %122 = bitcast [6 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %122) #7
  %123 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %122, i8 -86, i64 24, i1 false) #7
  %124 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %123, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcCdfPtr, i64 0, i64 0), i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kQArRcInitIndex, i64 0, i64 0), i32 6) #7
  %125 = icmp slt i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %119
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %122) #7
  br label %337

127:                                              ; preds = %119
  %128 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 5
  %129 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 4
  %130 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 3
  %131 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 2
  %132 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 1
  %133 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 0), align 16
  %134 = load i32, i32* %123, align 16
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %133, i64 %135
  %137 = load i16, i16* %136, align 2
  store i16 %137, i16* %22, align 2
  %138 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 1), align 8
  %139 = load i32, i32* %132, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i16, i16* %138, i64 %140
  %142 = load i16, i16* %141, align 2
  store i16 %142, i16* %23, align 2
  %143 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 2), align 16
  %144 = load i32, i32* %131, align 8
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %143, i64 %145
  %147 = load i16, i16* %146, align 2
  store i16 %147, i16* %24, align 2
  %148 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 3), align 8
  %149 = load i32, i32* %130, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i16, i16* %148, i64 %150
  %152 = load i16, i16* %151, align 2
  store i16 %152, i16* %25, align 2
  %153 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 4), align 16
  %154 = load i32, i32* %129, align 16
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %153, i64 %155
  %157 = load i16, i16* %156, align 2
  store i16 %157, i16* %26, align 2
  %158 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 5), align 8
  %159 = load i32, i32* %128, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i16, i16* %158, i64 %160
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %27, align 2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %122) #7
  call void @WebRtcSpl_ReflCoefToLpc(i16* nonnull %22, i32 6, i16* nonnull %19) #7
  %163 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #7
  store i32 -1431655766, i32* %7, align 4
  %164 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %7, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQGainCdf_ptr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQGainInitIndex, i64 0, i64 0), i32 1) #7
  %165 = icmp slt i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %127
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #7
  br label %337

167:                                              ; preds = %127
  %168 = load i32, i32* %7, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [18 x i32], [18 x i32]* @WebRtcIsac_kQGain2Levels, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #7
  %172 = getelementptr inbounds [120 x i32], [120 x i32]* %10, i64 0, i64 0
  call fastcc void @FindInvArSpec(i16* nonnull %19, i32 %171, i32* nonnull %172)
  %173 = load i32, i32* %172, align 16
  %174 = call i32 @llvm.ctlz.i32(i32 %173, i1 false) #7, !range !2
  %175 = trunc i32 %174 to i16
  %176 = sub nsw i16 32, %175
  %177 = ashr i16 %176, 1
  %178 = sext i16 %177 to i32
  %179 = shl i32 1, %178
  br label %180

180:                                              ; preds = %206, %167
  %181 = phi i32 [ %173, %167 ], [ %208, %206 ]
  %182 = phi i64 [ 0, %167 ], [ %204, %206 ]
  %183 = phi i32 [ %179, %167 ], [ %200, %206 ]
  %184 = icmp slt i32 %181, 0
  %185 = sub nsw i32 0, %181
  %186 = select i1 %184, i32 %185, i32 %181
  %187 = sdiv i32 %186, %183
  %188 = add nsw i32 %187, %183
  %189 = ashr i32 %188, 1
  %190 = sdiv i32 %186, %189
  %191 = add nsw i32 %190, %189
  %192 = ashr i32 %191, 1
  %193 = icmp eq i32 %192, %189
  br i1 %193, label %199, label %194

194:                                              ; preds = %180
  %195 = sdiv i32 %186, %192
  %196 = add nsw i32 %195, %192
  %197 = ashr i32 %196, 1
  %198 = icmp eq i32 %197, %192
  br i1 %198, label %199, label %339

199:                                              ; preds = %379, %374, %369, %364, %359, %354, %349, %344, %339, %194, %180
  %200 = phi i32 [ %189, %180 ], [ %192, %194 ], [ %197, %339 ], [ %342, %344 ], [ %347, %349 ], [ %352, %354 ], [ %357, %359 ], [ %362, %364 ], [ %367, %369 ], [ %372, %374 ], [ %377, %379 ]
  %201 = phi i32 [ %189, %180 ], [ %192, %194 ], [ %197, %339 ], [ %342, %344 ], [ %347, %349 ], [ %352, %354 ], [ %357, %359 ], [ %362, %364 ], [ %367, %369 ], [ %372, %374 ], [ %382, %379 ]
  %202 = trunc i32 %201 to i16
  %203 = getelementptr inbounds [120 x i16], [120 x i16]* %11, i64 0, i64 %182
  store i16 %202, i16* %203, align 2
  %204 = add nuw nsw i64 %182, 1
  %205 = icmp eq i64 %204, 120
  br i1 %205, label %209, label %206

206:                                              ; preds = %199
  %207 = getelementptr inbounds [120 x i32], [120 x i32]* %10, i64 0, i64 %204
  %208 = load i32, i32* %207, align 4
  br label %180

209:                                              ; preds = %199
  %210 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 0
  %211 = getelementptr inbounds [120 x i16], [120 x i16]* %11, i64 0, i64 0
  %212 = call i32 @WebRtcIsac_DecLogisticMulti2(i16* nonnull %210, %struct.Bitstreamstruct* %0, i16* nonnull %211, i16* nonnull %29, i32 %121, i16 signext %120) #7
  %213 = icmp slt i32 %212, 1
  br i1 %213, label %337, label %214

214:                                              ; preds = %209
  switch i32 %2, label %337 [
    i32 0, label %215
    i32 1, label %272
    i32 2, label %307
  ]

215:                                              ; preds = %214
  %216 = icmp slt i16 %1, 615
  %217 = select i1 %216, i32 30720, i32 36864
  %218 = select i1 %216, i32 2195456, i32 2654208
  br label %219

219:                                              ; preds = %215, %219
  %220 = phi i64 [ 0, %215 ], [ %270, %219 ]
  %221 = phi double* [ %4, %215 ], [ %269, %219 ]
  %222 = phi double* [ %3, %215 ], [ %259, %219 ]
  %223 = lshr exact i64 %220, 2
  %224 = getelementptr inbounds [120 x i32], [120 x i32]* %10, i64 0, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = add nsw i32 %225, %218
  %227 = lshr i32 %226, 16
  %228 = trunc i32 %227 to i16
  %229 = call signext i16 @WebRtcSpl_DivW32W16ResW16(i32 %217, i16 signext %228) #7
  %230 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %220
  %231 = load i16, i16* %230, align 8
  %232 = sext i16 %231 to i32
  %233 = sext i16 %229 to i32
  %234 = mul nsw i32 %232, %233
  %235 = add nsw i32 %234, 512
  %236 = ashr i32 %235, 10
  %237 = sitofp i32 %236 to double
  %238 = fmul double %237, 7.812500e-03
  %239 = getelementptr inbounds double, double* %222, i64 1
  store double %238, double* %222, align 8
  %240 = or i64 %220, 1
  %241 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %240
  %242 = load i16, i16* %241, align 2
  %243 = sext i16 %242 to i32
  %244 = mul nsw i32 %243, %233
  %245 = add nsw i32 %244, 512
  %246 = ashr i32 %245, 10
  %247 = sitofp i32 %246 to double
  %248 = fmul double %247, 7.812500e-03
  %249 = getelementptr inbounds double, double* %221, i64 1
  store double %248, double* %221, align 8
  %250 = or i64 %220, 2
  %251 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %250
  %252 = load i16, i16* %251, align 4
  %253 = sext i16 %252 to i32
  %254 = mul nsw i32 %253, %233
  %255 = add nsw i32 %254, 512
  %256 = ashr i32 %255, 10
  %257 = sitofp i32 %256 to double
  %258 = fmul double %257, 7.812500e-03
  %259 = getelementptr inbounds double, double* %222, i64 2
  store double %258, double* %239, align 8
  %260 = or i64 %220, 3
  %261 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %260
  %262 = load i16, i16* %261, align 2
  %263 = sext i16 %262 to i32
  %264 = mul nsw i32 %263, %233
  %265 = add nsw i32 %264, 512
  %266 = ashr i32 %265, 10
  %267 = sitofp i32 %266 to double
  %268 = fmul double %267, 7.812500e-03
  %269 = getelementptr inbounds double, double* %221, i64 2
  store double %268, double* %249, align 8
  %270 = add nuw nsw i64 %220, 4
  %271 = icmp ult i64 %270, 480
  br i1 %271, label %219, label %337

272:                                              ; preds = %214, %272
  %273 = phi i64 [ %300, %272 ], [ 0, %214 ]
  %274 = phi i64 [ %299, %272 ], [ 0, %214 ]
  %275 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %273
  %276 = load i16, i16* %275, align 8
  %277 = sitofp i16 %276 to double
  %278 = fmul double %277, 7.812500e-03
  %279 = getelementptr inbounds double, double* %3, i64 %274
  store double %278, double* %279, align 8
  %280 = or i64 %273, 1
  %281 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %280
  %282 = load i16, i16* %281, align 2
  %283 = sitofp i16 %282 to double
  %284 = fmul double %283, 7.812500e-03
  %285 = getelementptr inbounds double, double* %4, i64 %274
  store double %284, double* %285, align 8
  %286 = or i64 %274, 1
  %287 = or i64 %273, 2
  %288 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %287
  %289 = load i16, i16* %288, align 4
  %290 = sitofp i16 %289 to double
  %291 = fmul double %290, 7.812500e-03
  %292 = getelementptr inbounds double, double* %3, i64 %286
  store double %291, double* %292, align 8
  %293 = or i64 %273, 3
  %294 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %293
  %295 = load i16, i16* %294, align 2
  %296 = sitofp i16 %295 to double
  %297 = fmul double %296, 7.812500e-03
  %298 = getelementptr inbounds double, double* %4, i64 %286
  store double %297, double* %298, align 8
  %299 = add nuw nsw i64 %274, 2
  %300 = add nuw nsw i64 %273, 4
  %301 = icmp ult i64 %300, 240
  br i1 %301, label %272, label %302

302:                                              ; preds = %272
  %303 = getelementptr inbounds double, double* %3, i64 120
  %304 = bitcast double* %303 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %304, i8 0, i64 960, i1 false)
  %305 = getelementptr inbounds double, double* %4, i64 120
  %306 = bitcast double* %305 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %306, i8 0, i64 960, i1 false)
  br label %337

307:                                              ; preds = %214, %307
  %308 = phi i64 [ %334, %307 ], [ 0, %214 ]
  %309 = phi i64 [ %335, %307 ], [ 0, %214 ]
  %310 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %308
  %311 = load i16, i16* %310, align 8
  %312 = sitofp i16 %311 to double
  %313 = fmul double %312, 7.812500e-03
  %314 = getelementptr inbounds double, double* %3, i64 %309
  store double %313, double* %314, align 8
  %315 = or i64 %308, 1
  %316 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %315
  %317 = load i16, i16* %316, align 2
  %318 = sitofp i16 %317 to double
  %319 = fmul double %318, 7.812500e-03
  %320 = getelementptr inbounds double, double* %4, i64 %309
  store double %319, double* %320, align 8
  %321 = or i64 %308, 2
  %322 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %321
  %323 = load i16, i16* %322, align 4
  %324 = sitofp i16 %323 to double
  %325 = fmul double %324, 7.812500e-03
  %326 = sub nuw nsw i64 239, %309
  %327 = getelementptr inbounds double, double* %3, i64 %326
  store double %325, double* %327, align 8
  %328 = or i64 %308, 3
  %329 = getelementptr inbounds [480 x i16], [480 x i16]* %9, i64 0, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = sitofp i16 %330 to double
  %332 = fmul double %331, 7.812500e-03
  %333 = getelementptr inbounds double, double* %4, i64 %326
  store double %332, double* %333, align 8
  %334 = add nuw nsw i64 %308, 4
  %335 = add nuw nsw i64 %309, 1
  %336 = icmp eq i64 %335, 120
  br i1 %336, label %337, label %307

337:                                              ; preds = %307, %219, %166, %126, %302, %214, %209
  %338 = phi i32 [ -6690, %209 ], [ %212, %214 ], [ %212, %302 ], [ -6690, %126 ], [ -6690, %166 ], [ %212, %219 ], [ %212, %307 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20) #7
  call void @llvm.lifetime.end.p0i8(i64 14, i8* nonnull %18) #7
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %17) #7
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %14) #7
  ret i32 %338

339:                                              ; preds = %194
  %340 = sdiv i32 %186, %197
  %341 = add nsw i32 %340, %197
  %342 = ashr i32 %341, 1
  %343 = icmp eq i32 %342, %197
  br i1 %343, label %199, label %344

344:                                              ; preds = %339
  %345 = sdiv i32 %186, %342
  %346 = add nsw i32 %345, %342
  %347 = ashr i32 %346, 1
  %348 = icmp eq i32 %347, %342
  br i1 %348, label %199, label %349

349:                                              ; preds = %344
  %350 = sdiv i32 %186, %347
  %351 = add nsw i32 %350, %347
  %352 = ashr i32 %351, 1
  %353 = icmp eq i32 %352, %347
  br i1 %353, label %199, label %354

354:                                              ; preds = %349
  %355 = sdiv i32 %186, %352
  %356 = add nsw i32 %355, %352
  %357 = ashr i32 %356, 1
  %358 = icmp eq i32 %357, %352
  br i1 %358, label %199, label %359

359:                                              ; preds = %354
  %360 = sdiv i32 %186, %357
  %361 = add nsw i32 %360, %357
  %362 = ashr i32 %361, 1
  %363 = icmp eq i32 %362, %357
  br i1 %363, label %199, label %364

364:                                              ; preds = %359
  %365 = sdiv i32 %186, %362
  %366 = add nsw i32 %365, %362
  %367 = ashr i32 %366, 1
  %368 = icmp eq i32 %367, %362
  br i1 %368, label %199, label %369

369:                                              ; preds = %364
  %370 = sdiv i32 %186, %367
  %371 = add nsw i32 %370, %367
  %372 = ashr i32 %371, 1
  %373 = icmp eq i32 %372, %367
  br i1 %373, label %199, label %374

374:                                              ; preds = %369
  %375 = sdiv i32 %186, %372
  %376 = add nsw i32 %375, %372
  %377 = ashr i32 %376, 1
  %378 = icmp eq i32 %377, %372
  br i1 %378, label %199, label %379

379:                                              ; preds = %374
  %380 = sdiv i32 %186, %377
  %381 = add nsw i32 %380, %377
  %382 = ashr i32 %381, 1
  br label %199
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeRc(%struct.Bitstreamstruct*, i16* nocapture) local_unnamed_addr #0 {
  %3 = alloca [6 x i32], align 16
  %4 = bitcast [6 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  %5 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 0
  %6 = bitcast [6 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  %7 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %5, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcCdfPtr, i64 0, i64 0), i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kQArRcInitIndex, i64 0, i64 0), i32 6) #7
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 5
  %11 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 4
  %12 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 3
  %13 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 2
  %14 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 1
  %15 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 0), align 16
  %16 = load i32, i32* %5, align 16
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i16, i16* %15, i64 %17
  %19 = load i16, i16* %18, align 2
  store i16 %19, i16* %1, align 2
  %20 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 1), align 8
  %21 = load i32, i32* %14, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %20, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %24, i16* %25, align 2
  %26 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 2), align 16
  %27 = load i32, i32* %13, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %26, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %30, i16* %31, align 2
  %32 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 3), align 8
  %33 = load i32, i32* %12, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %32, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %36, i16* %37, align 2
  %38 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 4), align 16
  %39 = load i32, i32* %11, align 16
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %38, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = getelementptr inbounds i16, i16* %1, i64 4
  store i16 %42, i16* %43, align 2
  %44 = load i16*, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 5), align 8
  %45 = load i32, i32* %10, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %44, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %1, i64 5
  store i16 %48, i16* %49, align 2
  br label %50

50:                                               ; preds = %9, %2
  %51 = phi i32 [ %7, %2 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  ret i32 %51
}

declare void @WebRtcSpl_ReflCoefToLpc(i16*, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeGain2(%struct.Bitstreamstruct*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQGainCdf_ptr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQGainInitIndex, i64 0, i64 0), i32 1) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %3, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [18 x i32], [18 x i32]* @WebRtcIsac_kQGain2Levels, i64 0, i64 %9
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %1, align 4
  br label %12

12:                                               ; preds = %2, %7
  %13 = phi i32 [ 0, %7 ], [ %5, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @FindInvArSpec(i16* nocapture readonly, i32, i32* nocapture) unnamed_addr #0 {
  %4 = alloca [60 x i32], align 16
  %5 = bitcast [60 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 240, i1 false)
  %6 = load i16, i16* %0, align 2
  %7 = sext i16 %6 to i32
  %8 = mul nsw i32 %7, %7
  %9 = getelementptr inbounds i16, i16* %0, i64 1
  %10 = load i16, i16* %9, align 2
  %11 = sext i16 %10 to i32
  %12 = mul nsw i32 %11, %11
  %13 = add nuw i32 %8, %12
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i16, i16* %0, i64 2
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  %18 = mul nsw i32 %17, %17
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %14, %19
  %21 = getelementptr inbounds i16, i16* %0, i64 3
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  %24 = mul nsw i32 %23, %23
  %25 = zext i32 %24 to i64
  %26 = add nuw nsw i64 %20, %25
  %27 = getelementptr inbounds i16, i16* %0, i64 4
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  %30 = mul nsw i32 %29, %29
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %26, %31
  %33 = getelementptr inbounds i16, i16* %0, i64 5
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = mul nsw i32 %35, %35
  %37 = zext i32 %36 to i64
  %38 = add nuw nsw i64 %32, %37
  %39 = getelementptr inbounds i16, i16* %0, i64 6
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = add nuw nsw i64 %38, %43
  %45 = lshr i64 %44, 6
  %46 = mul nuw nsw i64 %45, 65
  %47 = add nuw nsw i64 %46, 32768
  %48 = lshr i64 %47, 16
  %49 = sext i32 %1 to i64
  %50 = mul nsw i64 %48, %49
  %51 = add nsw i64 %50, 256
  %52 = icmp sgt i32 %1, 400000
  %53 = ashr i32 %1, 3
  %54 = sext i32 %53 to i64
  %55 = select i1 %52, i64 %54, i64 %49
  %56 = select i1 %52, i64 32, i64 256
  %57 = select i1 %52, i64 6, i64 9
  %58 = sext i16 %10 to i64
  %59 = load i16, i16* %0, align 2
  %60 = sext i16 %59 to i64
  %61 = mul nsw i64 %58, %60
  %62 = add nsw i64 %61, 16384
  %63 = getelementptr inbounds i16, i16* %0, i64 2
  %64 = load i16, i16* %63, align 2
  %65 = getelementptr inbounds i16, i16* %0, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i64
  %68 = sext i16 %64 to i64
  %69 = mul nsw i64 %68, %67
  %70 = add nsw i64 %69, %62
  %71 = getelementptr inbounds i16, i16* %0, i64 3
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds i16, i16* %0, i64 2
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i64
  %76 = sext i16 %72 to i64
  %77 = mul nsw i64 %76, %75
  %78 = add nsw i64 %77, %70
  %79 = getelementptr inbounds i16, i16* %0, i64 4
  %80 = load i16, i16* %79, align 2
  %81 = getelementptr inbounds i16, i16* %0, i64 3
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i64
  %84 = sext i16 %80 to i64
  %85 = mul nsw i64 %84, %83
  %86 = add nsw i64 %85, %78
  %87 = getelementptr inbounds i16, i16* %0, i64 5
  %88 = load i16, i16* %87, align 2
  %89 = getelementptr inbounds i16, i16* %0, i64 4
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i64
  %92 = sext i16 %88 to i64
  %93 = mul nsw i64 %92, %91
  %94 = add nsw i64 %93, %86
  %95 = getelementptr inbounds i16, i16* %0, i64 6
  %96 = load i16, i16* %95, align 2
  %97 = getelementptr inbounds i16, i16* %0, i64 5
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i64
  %100 = sext i16 %96 to i64
  %101 = mul nsw i64 %100, %99
  %102 = add nsw i64 %101, %94
  %103 = ashr i64 %102, 15
  %104 = mul nsw i64 %103, %55
  %105 = add nsw i64 %104, %56
  %106 = ashr i64 %105, %57
  %107 = trunc i64 %106 to i32
  %108 = sext i16 %16 to i64
  %109 = load i16, i16* %0, align 2
  %110 = sext i16 %109 to i64
  %111 = mul nsw i64 %108, %110
  %112 = add nsw i64 %111, 16384
  %113 = getelementptr inbounds i16, i16* %0, i64 3
  %114 = load i16, i16* %113, align 2
  %115 = getelementptr inbounds i16, i16* %0, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i64
  %118 = sext i16 %114 to i64
  %119 = mul nsw i64 %118, %117
  %120 = add nsw i64 %119, %112
  %121 = getelementptr inbounds i16, i16* %0, i64 4
  %122 = load i16, i16* %121, align 2
  %123 = getelementptr inbounds i16, i16* %0, i64 2
  %124 = load i16, i16* %123, align 2
  %125 = sext i16 %124 to i64
  %126 = sext i16 %122 to i64
  %127 = mul nsw i64 %126, %125
  %128 = add nsw i64 %127, %120
  %129 = getelementptr inbounds i16, i16* %0, i64 5
  %130 = load i16, i16* %129, align 2
  %131 = getelementptr inbounds i16, i16* %0, i64 3
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i64
  %134 = sext i16 %130 to i64
  %135 = mul nsw i64 %134, %133
  %136 = add nsw i64 %135, %128
  %137 = getelementptr inbounds i16, i16* %0, i64 6
  %138 = load i16, i16* %137, align 2
  %139 = getelementptr inbounds i16, i16* %0, i64 4
  %140 = load i16, i16* %139, align 2
  %141 = sext i16 %140 to i64
  %142 = sext i16 %138 to i64
  %143 = mul nsw i64 %142, %141
  %144 = add nsw i64 %143, %136
  %145 = ashr i64 %144, 15
  %146 = mul nsw i64 %145, %55
  %147 = add nsw i64 %146, %56
  %148 = ashr i64 %147, %57
  %149 = trunc i64 %148 to i32
  %150 = sext i16 %22 to i64
  %151 = load i16, i16* %0, align 2
  %152 = sext i16 %151 to i64
  %153 = mul nsw i64 %150, %152
  %154 = add nsw i64 %153, 16384
  %155 = getelementptr inbounds i16, i16* %0, i64 4
  %156 = load i16, i16* %155, align 2
  %157 = getelementptr inbounds i16, i16* %0, i64 1
  %158 = load i16, i16* %157, align 2
  %159 = sext i16 %158 to i64
  %160 = sext i16 %156 to i64
  %161 = mul nsw i64 %160, %159
  %162 = add nsw i64 %161, %154
  %163 = getelementptr inbounds i16, i16* %0, i64 5
  %164 = load i16, i16* %163, align 2
  %165 = getelementptr inbounds i16, i16* %0, i64 2
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i64
  %168 = sext i16 %164 to i64
  %169 = mul nsw i64 %168, %167
  %170 = add nsw i64 %169, %162
  %171 = getelementptr inbounds i16, i16* %0, i64 6
  %172 = load i16, i16* %171, align 2
  %173 = getelementptr inbounds i16, i16* %0, i64 3
  %174 = load i16, i16* %173, align 2
  %175 = sext i16 %174 to i64
  %176 = sext i16 %172 to i64
  %177 = mul nsw i64 %176, %175
  %178 = add nsw i64 %177, %170
  %179 = ashr i64 %178, 15
  %180 = mul nsw i64 %179, %55
  %181 = add nsw i64 %180, %56
  %182 = ashr i64 %181, %57
  %183 = trunc i64 %182 to i32
  %184 = sext i16 %28 to i64
  %185 = load i16, i16* %0, align 2
  %186 = sext i16 %185 to i64
  %187 = mul nsw i64 %184, %186
  %188 = add nsw i64 %187, 16384
  %189 = getelementptr inbounds i16, i16* %0, i64 5
  %190 = load i16, i16* %189, align 2
  %191 = getelementptr inbounds i16, i16* %0, i64 1
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i64
  %194 = sext i16 %190 to i64
  %195 = mul nsw i64 %194, %193
  %196 = add nsw i64 %195, %188
  %197 = getelementptr inbounds i16, i16* %0, i64 6
  %198 = load i16, i16* %197, align 2
  %199 = getelementptr inbounds i16, i16* %0, i64 2
  %200 = load i16, i16* %199, align 2
  %201 = sext i16 %200 to i64
  %202 = sext i16 %198 to i64
  %203 = mul nsw i64 %202, %201
  %204 = add nsw i64 %203, %196
  %205 = ashr i64 %204, 15
  %206 = mul nsw i64 %205, %55
  %207 = add nsw i64 %206, %56
  %208 = ashr i64 %207, %57
  %209 = trunc i64 %208 to i32
  %210 = sext i16 %34 to i64
  %211 = load i16, i16* %0, align 2
  %212 = sext i16 %211 to i64
  %213 = mul nsw i64 %210, %212
  %214 = add nsw i64 %213, 16384
  %215 = getelementptr inbounds i16, i16* %0, i64 6
  %216 = load i16, i16* %215, align 2
  %217 = getelementptr inbounds i16, i16* %0, i64 1
  %218 = load i16, i16* %217, align 2
  %219 = sext i16 %218 to i64
  %220 = sext i16 %216 to i64
  %221 = mul nsw i64 %220, %219
  %222 = add nsw i64 %221, %214
  %223 = ashr i64 %222, 15
  %224 = mul nsw i64 %223, %55
  %225 = add nsw i64 %224, %56
  %226 = ashr i64 %225, %57
  %227 = trunc i64 %226 to i32
  %228 = sext i16 %40 to i64
  %229 = load i16, i16* %0, align 2
  %230 = sext i16 %229 to i64
  %231 = mul nsw i64 %228, %230
  %232 = add nsw i64 %231, 16384
  %233 = ashr i64 %232, 15
  %234 = mul nsw i64 %233, %55
  %235 = add nsw i64 %234, %56
  %236 = ashr i64 %235, %57
  %237 = trunc i64 %236 to i32
  %238 = lshr i64 %51, 2
  %239 = trunc i64 %238 to i32
  %240 = and i32 %239, -128
  %241 = insertelement <4 x i32> undef, i32 %240, i32 0
  %242 = shufflevector <4 x i32> %241, <4 x i32> undef, <4 x i32> zeroinitializer
  %243 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %243, align 4
  %244 = getelementptr inbounds i32, i32* %2, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds i32, i32* %2, i64 8
  %247 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %247, align 4
  %248 = getelementptr inbounds i32, i32* %2, i64 12
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %249, align 4
  %250 = getelementptr inbounds i32, i32* %2, i64 16
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds i32, i32* %2, i64 20
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %253, align 4
  %254 = getelementptr inbounds i32, i32* %2, i64 24
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds i32, i32* %2, i64 28
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %257, align 4
  %258 = getelementptr inbounds i32, i32* %2, i64 32
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %259, align 4
  %260 = getelementptr inbounds i32, i32* %2, i64 36
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %261, align 4
  %262 = getelementptr inbounds i32, i32* %2, i64 40
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds i32, i32* %2, i64 44
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %265, align 4
  %266 = getelementptr inbounds i32, i32* %2, i64 48
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %267, align 4
  %268 = getelementptr inbounds i32, i32* %2, i64 52
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %269, align 4
  %270 = getelementptr inbounds i32, i32* %2, i64 56
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %271, align 4
  %272 = getelementptr i32, i32* %2, i64 60
  %273 = icmp ult i32* %2, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 0) to i32*)
  %274 = icmp ugt i32* %272, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 0) to i32*)
  %275 = and i1 %273, %274
  br i1 %275, label %295, label %276

276:                                              ; preds = %3
  %277 = insertelement <4 x i32> undef, i32 %149, i32 0
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %279

279:                                              ; preds = %659, %276
  %280 = phi i64 [ 0, %276 ], [ %672, %659 ]
  %281 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 %280
  %282 = bitcast i16* %281 to <4 x i16>*
  %283 = load <4 x i16>, <4 x i16>* %282, align 8, !alias.scope !3
  %284 = sext <4 x i16> %283 to <4 x i32>
  %285 = mul nsw <4 x i32> %278, %284
  %286 = add nsw <4 x i32> %285, <i32 2, i32 2, i32 2, i32 2>
  %287 = ashr <4 x i32> %286, <i32 2, i32 2, i32 2, i32 2>
  %288 = getelementptr inbounds i32, i32* %2, i64 %280
  %289 = bitcast i32* %288 to <4 x i32>*
  %290 = load <4 x i32>, <4 x i32>* %289, align 4, !alias.scope !6, !noalias !3
  %291 = add nsw <4 x i32> %287, %290
  %292 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %291, <4 x i32>* %292, align 4, !alias.scope !6, !noalias !3
  %293 = or i64 %280, 4
  %294 = icmp eq i64 %293, 60
  br i1 %294, label %318, label %659, !llvm.loop !8

295:                                              ; preds = %3, %295
  %296 = phi i64 [ %316, %295 ], [ 0, %3 ]
  %297 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 %296
  %298 = load i16, i16* %297, align 4
  %299 = sext i16 %298 to i32
  %300 = mul nsw i32 %149, %299
  %301 = add nsw i32 %300, 2
  %302 = ashr i32 %301, 2
  %303 = getelementptr inbounds i32, i32* %2, i64 %296
  %304 = load i32, i32* %303, align 4
  %305 = add nsw i32 %302, %304
  store i32 %305, i32* %303, align 4
  %306 = or i64 %296, 1
  %307 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 %306
  %308 = load i16, i16* %307, align 2
  %309 = sext i16 %308 to i32
  %310 = mul nsw i32 %149, %309
  %311 = add nsw i32 %310, 2
  %312 = ashr i32 %311, 2
  %313 = getelementptr inbounds i32, i32* %2, i64 %306
  %314 = load i32, i32* %313, align 4
  %315 = add nsw i32 %312, %314
  store i32 %315, i32* %313, align 4
  %316 = add nuw nsw i64 %296, 2
  %317 = icmp eq i64 %316, 60
  br i1 %317, label %318, label %295, !llvm.loop !10

318:                                              ; preds = %279, %295
  %319 = getelementptr i32, i32* %2, i64 60
  %320 = icmp ult i32* %2, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 0) to i32*)
  %321 = icmp ugt i32* %319, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 0) to i32*)
  %322 = and i1 %320, %321
  br i1 %322, label %531, label %323

323:                                              ; preds = %318
  %324 = insertelement <4 x i32> undef, i32 %209, i32 0
  %325 = shufflevector <4 x i32> %324, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %326

326:                                              ; preds = %645, %323
  %327 = phi i64 [ 0, %323 ], [ %658, %645 ]
  %328 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 %327
  %329 = bitcast i16* %328 to <4 x i16>*
  %330 = load <4 x i16>, <4 x i16>* %329, align 8, !alias.scope !11
  %331 = sext <4 x i16> %330 to <4 x i32>
  %332 = mul nsw <4 x i32> %325, %331
  %333 = add nsw <4 x i32> %332, <i32 2, i32 2, i32 2, i32 2>
  %334 = ashr <4 x i32> %333, <i32 2, i32 2, i32 2, i32 2>
  %335 = getelementptr inbounds i32, i32* %2, i64 %327
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4, !alias.scope !14, !noalias !11
  %338 = add nsw <4 x i32> %334, %337
  %339 = bitcast i32* %335 to <4 x i32>*
  store <4 x i32> %338, <4 x i32>* %339, align 4, !alias.scope !14, !noalias !11
  %340 = or i64 %327, 4
  %341 = icmp eq i64 %340, 60
  br i1 %341, label %554, label %645, !llvm.loop !16

342:                                              ; preds = %601
  %343 = icmp eq i32 %149, 0
  br i1 %343, label %352, label %344

344:                                              ; preds = %342, %601
  %345 = phi i32 [ %107, %601 ], [ %149, %342 ]
  %346 = ashr i32 %345, 31
  %347 = xor i32 %346, %345
  %348 = tail call i32 @llvm.ctlz.i32(i32 %347, i1 false) #7, !range !2
  %349 = trunc i32 %348 to i16
  %350 = add nuw nsw i32 %348, 65535
  %351 = icmp ult i16 %349, 10
  br i1 %351, label %352, label %357

352:                                              ; preds = %342, %344
  %353 = phi i32 [ %350, %344 ], [ 0, %342 ]
  %354 = shl i32 %353, 16
  %355 = sub i32 589824, %354
  %356 = ashr exact i32 %355, 16
  br label %357

357:                                              ; preds = %352, %344
  %358 = phi i32 [ %356, %352 ], [ 0, %344 ]
  %359 = ashr i32 %107, %358
  %360 = insertelement <4 x i32> undef, i32 %359, i32 0
  %361 = shufflevector <4 x i32> %360, <4 x i32> undef, <4 x i32> zeroinitializer
  %362 = load <4 x i16>, <4 x i16>* bitcast ([6 x [60 x i16]]* @WebRtcIsac_kCos to <4 x i16>*), align 16
  %363 = sext <4 x i16> %362 to <4 x i32>
  %364 = mul nsw <4 x i32> %361, %363
  %365 = add nsw <4 x i32> %364, <i32 2, i32 2, i32 2, i32 2>
  %366 = ashr <4 x i32> %365, <i32 2, i32 2, i32 2, i32 2>
  %367 = bitcast [60 x i32]* %4 to <4 x i32>*
  store <4 x i32> %366, <4 x i32>* %367, align 16
  %368 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 4) to <4 x i16>*), align 8
  %369 = sext <4 x i16> %368 to <4 x i32>
  %370 = mul nsw <4 x i32> %361, %369
  %371 = add nsw <4 x i32> %370, <i32 2, i32 2, i32 2, i32 2>
  %372 = ashr <4 x i32> %371, <i32 2, i32 2, i32 2, i32 2>
  %373 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 4
  %374 = bitcast i32* %373 to <4 x i32>*
  store <4 x i32> %372, <4 x i32>* %374, align 16
  %375 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 8) to <4 x i16>*), align 16
  %376 = sext <4 x i16> %375 to <4 x i32>
  %377 = mul nsw <4 x i32> %361, %376
  %378 = add nsw <4 x i32> %377, <i32 2, i32 2, i32 2, i32 2>
  %379 = ashr <4 x i32> %378, <i32 2, i32 2, i32 2, i32 2>
  %380 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 8
  %381 = bitcast i32* %380 to <4 x i32>*
  store <4 x i32> %379, <4 x i32>* %381, align 16
  %382 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 12) to <4 x i16>*), align 8
  %383 = sext <4 x i16> %382 to <4 x i32>
  %384 = mul nsw <4 x i32> %361, %383
  %385 = add nsw <4 x i32> %384, <i32 2, i32 2, i32 2, i32 2>
  %386 = ashr <4 x i32> %385, <i32 2, i32 2, i32 2, i32 2>
  %387 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 12
  %388 = bitcast i32* %387 to <4 x i32>*
  store <4 x i32> %386, <4 x i32>* %388, align 16
  %389 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 16) to <4 x i16>*), align 16
  %390 = sext <4 x i16> %389 to <4 x i32>
  %391 = mul nsw <4 x i32> %361, %390
  %392 = add nsw <4 x i32> %391, <i32 2, i32 2, i32 2, i32 2>
  %393 = ashr <4 x i32> %392, <i32 2, i32 2, i32 2, i32 2>
  %394 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 16
  %395 = bitcast i32* %394 to <4 x i32>*
  store <4 x i32> %393, <4 x i32>* %395, align 16
  %396 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 20) to <4 x i16>*), align 8
  %397 = sext <4 x i16> %396 to <4 x i32>
  %398 = mul nsw <4 x i32> %361, %397
  %399 = add nsw <4 x i32> %398, <i32 2, i32 2, i32 2, i32 2>
  %400 = ashr <4 x i32> %399, <i32 2, i32 2, i32 2, i32 2>
  %401 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 20
  %402 = bitcast i32* %401 to <4 x i32>*
  store <4 x i32> %400, <4 x i32>* %402, align 16
  %403 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 24) to <4 x i16>*), align 16
  %404 = sext <4 x i16> %403 to <4 x i32>
  %405 = mul nsw <4 x i32> %361, %404
  %406 = add nsw <4 x i32> %405, <i32 2, i32 2, i32 2, i32 2>
  %407 = ashr <4 x i32> %406, <i32 2, i32 2, i32 2, i32 2>
  %408 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 24
  %409 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %407, <4 x i32>* %409, align 16
  %410 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 28) to <4 x i16>*), align 8
  %411 = sext <4 x i16> %410 to <4 x i32>
  %412 = mul nsw <4 x i32> %361, %411
  %413 = add nsw <4 x i32> %412, <i32 2, i32 2, i32 2, i32 2>
  %414 = ashr <4 x i32> %413, <i32 2, i32 2, i32 2, i32 2>
  %415 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 28
  %416 = bitcast i32* %415 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %416, align 16
  %417 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 32) to <4 x i16>*), align 16
  %418 = sext <4 x i16> %417 to <4 x i32>
  %419 = mul nsw <4 x i32> %361, %418
  %420 = add nsw <4 x i32> %419, <i32 2, i32 2, i32 2, i32 2>
  %421 = ashr <4 x i32> %420, <i32 2, i32 2, i32 2, i32 2>
  %422 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 32
  %423 = bitcast i32* %422 to <4 x i32>*
  store <4 x i32> %421, <4 x i32>* %423, align 16
  %424 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 36) to <4 x i16>*), align 8
  %425 = sext <4 x i16> %424 to <4 x i32>
  %426 = mul nsw <4 x i32> %361, %425
  %427 = add nsw <4 x i32> %426, <i32 2, i32 2, i32 2, i32 2>
  %428 = ashr <4 x i32> %427, <i32 2, i32 2, i32 2, i32 2>
  %429 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 36
  %430 = bitcast i32* %429 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %430, align 16
  %431 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 40) to <4 x i16>*), align 16
  %432 = sext <4 x i16> %431 to <4 x i32>
  %433 = mul nsw <4 x i32> %361, %432
  %434 = add nsw <4 x i32> %433, <i32 2, i32 2, i32 2, i32 2>
  %435 = ashr <4 x i32> %434, <i32 2, i32 2, i32 2, i32 2>
  %436 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 40
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> %435, <4 x i32>* %437, align 16
  %438 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 44) to <4 x i16>*), align 8
  %439 = sext <4 x i16> %438 to <4 x i32>
  %440 = mul nsw <4 x i32> %361, %439
  %441 = add nsw <4 x i32> %440, <i32 2, i32 2, i32 2, i32 2>
  %442 = ashr <4 x i32> %441, <i32 2, i32 2, i32 2, i32 2>
  %443 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 44
  %444 = bitcast i32* %443 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %444, align 16
  %445 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 48) to <4 x i16>*), align 16
  %446 = sext <4 x i16> %445 to <4 x i32>
  %447 = mul nsw <4 x i32> %361, %446
  %448 = add nsw <4 x i32> %447, <i32 2, i32 2, i32 2, i32 2>
  %449 = ashr <4 x i32> %448, <i32 2, i32 2, i32 2, i32 2>
  %450 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 48
  %451 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> %449, <4 x i32>* %451, align 16
  %452 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 52) to <4 x i16>*), align 8
  %453 = sext <4 x i16> %452 to <4 x i32>
  %454 = mul nsw <4 x i32> %361, %453
  %455 = add nsw <4 x i32> %454, <i32 2, i32 2, i32 2, i32 2>
  %456 = ashr <4 x i32> %455, <i32 2, i32 2, i32 2, i32 2>
  %457 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 52
  %458 = bitcast i32* %457 to <4 x i32>*
  store <4 x i32> %456, <4 x i32>* %458, align 16
  %459 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 56) to <4 x i16>*), align 16
  %460 = sext <4 x i16> %459 to <4 x i32>
  %461 = mul nsw <4 x i32> %361, %460
  %462 = add nsw <4 x i32> %461, <i32 2, i32 2, i32 2, i32 2>
  %463 = ashr <4 x i32> %462, <i32 2, i32 2, i32 2, i32 2>
  %464 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 56
  %465 = bitcast i32* %464 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %465, align 16
  %466 = ashr i32 %183, %358
  %467 = insertelement <4 x i32> undef, i32 %466, i32 0
  %468 = shufflevector <4 x i32> %467, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %469

469:                                              ; preds = %617, %357
  %470 = phi i64 [ 0, %357 ], [ %630, %617 ]
  %471 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 %470
  %472 = bitcast i16* %471 to <4 x i16>*
  %473 = load <4 x i16>, <4 x i16>* %472, align 16
  %474 = sext <4 x i16> %473 to <4 x i32>
  %475 = mul nsw <4 x i32> %468, %474
  %476 = add nsw <4 x i32> %475, <i32 2, i32 2, i32 2, i32 2>
  %477 = ashr <4 x i32> %476, <i32 2, i32 2, i32 2, i32 2>
  %478 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %470
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 16
  %481 = add nsw <4 x i32> %477, %480
  %482 = bitcast i32* %478 to <4 x i32>*
  store <4 x i32> %481, <4 x i32>* %482, align 16
  %483 = or i64 %470, 4
  %484 = icmp eq i64 %483, 60
  br i1 %484, label %485, label %617, !llvm.loop !17

485:                                              ; preds = %469
  %486 = ashr i32 %227, %358
  %487 = insertelement <4 x i32> undef, i32 %486, i32 0
  %488 = shufflevector <4 x i32> %487, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %489

489:                                              ; preds = %603, %485
  %490 = phi i64 [ 0, %485 ], [ %616, %603 ]
  %491 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 %490
  %492 = bitcast i16* %491 to <4 x i16>*
  %493 = load <4 x i16>, <4 x i16>* %492, align 16
  %494 = sext <4 x i16> %493 to <4 x i32>
  %495 = mul nsw <4 x i32> %488, %494
  %496 = add nsw <4 x i32> %495, <i32 2, i32 2, i32 2, i32 2>
  %497 = ashr <4 x i32> %496, <i32 2, i32 2, i32 2, i32 2>
  %498 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %490
  %499 = bitcast i32* %498 to <4 x i32>*
  %500 = load <4 x i32>, <4 x i32>* %499, align 16
  %501 = add nsw <4 x i32> %497, %500
  %502 = bitcast i32* %498 to <4 x i32>*
  store <4 x i32> %501, <4 x i32>* %502, align 16
  %503 = or i64 %490, 4
  %504 = icmp eq i64 %503, 60
  br i1 %504, label %505, label %603, !llvm.loop !18

505:                                              ; preds = %489, %505
  %506 = phi i64 [ %528, %505 ], [ 0, %489 ]
  %507 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %506
  %508 = load i32, i32* %507, align 8
  %509 = shl i32 %508, %358
  %510 = getelementptr inbounds i32, i32* %2, i64 %506
  %511 = load i32, i32* %510, align 4
  %512 = sub nsw i32 %511, %509
  %513 = sub nuw nsw i64 119, %506
  %514 = getelementptr inbounds i32, i32* %2, i64 %513
  store i32 %512, i32* %514, align 4
  %515 = load i32, i32* %510, align 4
  %516 = add nsw i32 %515, %509
  store i32 %516, i32* %510, align 4
  %517 = or i64 %506, 1
  %518 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %517
  %519 = load i32, i32* %518, align 4
  %520 = shl i32 %519, %358
  %521 = getelementptr inbounds i32, i32* %2, i64 %517
  %522 = load i32, i32* %521, align 4
  %523 = sub nsw i32 %522, %520
  %524 = sub nsw i64 118, %506
  %525 = getelementptr inbounds i32, i32* %2, i64 %524
  store i32 %523, i32* %525, align 4
  %526 = load i32, i32* %521, align 4
  %527 = add nsw i32 %526, %520
  store i32 %527, i32* %521, align 4
  %528 = add nuw nsw i64 %506, 2
  %529 = icmp eq i64 %528, 60
  br i1 %529, label %530, label %505

530:                                              ; preds = %505
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %5) #7
  ret void

531:                                              ; preds = %318, %531
  %532 = phi i64 [ %552, %531 ], [ 0, %318 ]
  %533 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 %532
  %534 = load i16, i16* %533, align 4
  %535 = sext i16 %534 to i32
  %536 = mul nsw i32 %209, %535
  %537 = add nsw i32 %536, 2
  %538 = ashr i32 %537, 2
  %539 = getelementptr inbounds i32, i32* %2, i64 %532
  %540 = load i32, i32* %539, align 4
  %541 = add nsw i32 %538, %540
  store i32 %541, i32* %539, align 4
  %542 = or i64 %532, 1
  %543 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 %542
  %544 = load i16, i16* %543, align 2
  %545 = sext i16 %544 to i32
  %546 = mul nsw i32 %209, %545
  %547 = add nsw i32 %546, 2
  %548 = ashr i32 %547, 2
  %549 = getelementptr inbounds i32, i32* %2, i64 %542
  %550 = load i32, i32* %549, align 4
  %551 = add nsw i32 %548, %550
  store i32 %551, i32* %549, align 4
  %552 = add nuw nsw i64 %532, 2
  %553 = icmp eq i64 %552, 60
  br i1 %553, label %554, label %531, !llvm.loop !19

554:                                              ; preds = %326, %531
  %555 = getelementptr i32, i32* %2, i64 60
  %556 = icmp ult i32* %2, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 1, i64 0, i64 0) to i32*)
  %557 = icmp ugt i32* %555, bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 0) to i32*)
  %558 = and i1 %556, %557
  br i1 %558, label %578, label %559

559:                                              ; preds = %554
  %560 = insertelement <4 x i32> undef, i32 %237, i32 0
  %561 = shufflevector <4 x i32> %560, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %562

562:                                              ; preds = %631, %559
  %563 = phi i64 [ 0, %559 ], [ %644, %631 ]
  %564 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 %563
  %565 = bitcast i16* %564 to <4 x i16>*
  %566 = load <4 x i16>, <4 x i16>* %565, align 8, !alias.scope !20
  %567 = sext <4 x i16> %566 to <4 x i32>
  %568 = mul nsw <4 x i32> %561, %567
  %569 = add nsw <4 x i32> %568, <i32 2, i32 2, i32 2, i32 2>
  %570 = ashr <4 x i32> %569, <i32 2, i32 2, i32 2, i32 2>
  %571 = getelementptr inbounds i32, i32* %2, i64 %563
  %572 = bitcast i32* %571 to <4 x i32>*
  %573 = load <4 x i32>, <4 x i32>* %572, align 4, !alias.scope !23, !noalias !20
  %574 = add nsw <4 x i32> %570, %573
  %575 = bitcast i32* %571 to <4 x i32>*
  store <4 x i32> %574, <4 x i32>* %575, align 4, !alias.scope !23, !noalias !20
  %576 = or i64 %563, 4
  %577 = icmp eq i64 %576, 60
  br i1 %577, label %601, label %631, !llvm.loop !25

578:                                              ; preds = %554, %578
  %579 = phi i64 [ %599, %578 ], [ 0, %554 ]
  %580 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 %579
  %581 = load i16, i16* %580, align 4
  %582 = sext i16 %581 to i32
  %583 = mul nsw i32 %237, %582
  %584 = add nsw i32 %583, 2
  %585 = ashr i32 %584, 2
  %586 = getelementptr inbounds i32, i32* %2, i64 %579
  %587 = load i32, i32* %586, align 4
  %588 = add nsw i32 %585, %587
  store i32 %588, i32* %586, align 4
  %589 = or i64 %579, 1
  %590 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 %589
  %591 = load i16, i16* %590, align 2
  %592 = sext i16 %591 to i32
  %593 = mul nsw i32 %237, %592
  %594 = add nsw i32 %593, 2
  %595 = ashr i32 %594, 2
  %596 = getelementptr inbounds i32, i32* %2, i64 %589
  %597 = load i32, i32* %596, align 4
  %598 = add nsw i32 %595, %597
  store i32 %598, i32* %596, align 4
  %599 = add nuw nsw i64 %579, 2
  %600 = icmp eq i64 %599, 60
  br i1 %600, label %601, label %578, !llvm.loop !26

601:                                              ; preds = %562, %578
  %602 = icmp eq i32 %107, 0
  br i1 %602, label %342, label %344

603:                                              ; preds = %489
  %604 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 %503
  %605 = bitcast i16* %604 to <4 x i16>*
  %606 = load <4 x i16>, <4 x i16>* %605, align 8
  %607 = sext <4 x i16> %606 to <4 x i32>
  %608 = mul nsw <4 x i32> %488, %607
  %609 = add nsw <4 x i32> %608, <i32 2, i32 2, i32 2, i32 2>
  %610 = ashr <4 x i32> %609, <i32 2, i32 2, i32 2, i32 2>
  %611 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %503
  %612 = bitcast i32* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 16
  %614 = add nsw <4 x i32> %610, %613
  %615 = bitcast i32* %611 to <4 x i32>*
  store <4 x i32> %614, <4 x i32>* %615, align 16
  %616 = add nuw nsw i64 %490, 8
  br label %489

617:                                              ; preds = %469
  %618 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 %483
  %619 = bitcast i16* %618 to <4 x i16>*
  %620 = load <4 x i16>, <4 x i16>* %619, align 8
  %621 = sext <4 x i16> %620 to <4 x i32>
  %622 = mul nsw <4 x i32> %468, %621
  %623 = add nsw <4 x i32> %622, <i32 2, i32 2, i32 2, i32 2>
  %624 = ashr <4 x i32> %623, <i32 2, i32 2, i32 2, i32 2>
  %625 = getelementptr inbounds [60 x i32], [60 x i32]* %4, i64 0, i64 %483
  %626 = bitcast i32* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 16
  %628 = add nsw <4 x i32> %624, %627
  %629 = bitcast i32* %625 to <4 x i32>*
  store <4 x i32> %628, <4 x i32>* %629, align 16
  %630 = add nuw nsw i64 %470, 8
  br label %469

631:                                              ; preds = %562
  %632 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 %576
  %633 = bitcast i16* %632 to <4 x i16>*
  %634 = load <4 x i16>, <4 x i16>* %633, align 8, !alias.scope !20
  %635 = sext <4 x i16> %634 to <4 x i32>
  %636 = mul nsw <4 x i32> %561, %635
  %637 = add nsw <4 x i32> %636, <i32 2, i32 2, i32 2, i32 2>
  %638 = ashr <4 x i32> %637, <i32 2, i32 2, i32 2, i32 2>
  %639 = getelementptr inbounds i32, i32* %2, i64 %576
  %640 = bitcast i32* %639 to <4 x i32>*
  %641 = load <4 x i32>, <4 x i32>* %640, align 4, !alias.scope !23, !noalias !20
  %642 = add nsw <4 x i32> %638, %641
  %643 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %642, <4 x i32>* %643, align 4, !alias.scope !23, !noalias !20
  %644 = add nuw nsw i64 %563, 8
  br label %562

645:                                              ; preds = %326
  %646 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 %340
  %647 = bitcast i16* %646 to <4 x i16>*
  %648 = load <4 x i16>, <4 x i16>* %647, align 8, !alias.scope !11
  %649 = sext <4 x i16> %648 to <4 x i32>
  %650 = mul nsw <4 x i32> %325, %649
  %651 = add nsw <4 x i32> %650, <i32 2, i32 2, i32 2, i32 2>
  %652 = ashr <4 x i32> %651, <i32 2, i32 2, i32 2, i32 2>
  %653 = getelementptr inbounds i32, i32* %2, i64 %340
  %654 = bitcast i32* %653 to <4 x i32>*
  %655 = load <4 x i32>, <4 x i32>* %654, align 4, !alias.scope !14, !noalias !11
  %656 = add nsw <4 x i32> %652, %655
  %657 = bitcast i32* %653 to <4 x i32>*
  store <4 x i32> %656, <4 x i32>* %657, align 4, !alias.scope !14, !noalias !11
  %658 = add nuw nsw i64 %327, 8
  br label %326

659:                                              ; preds = %279
  %660 = getelementptr inbounds [6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 %293
  %661 = bitcast i16* %660 to <4 x i16>*
  %662 = load <4 x i16>, <4 x i16>* %661, align 8, !alias.scope !3
  %663 = sext <4 x i16> %662 to <4 x i32>
  %664 = mul nsw <4 x i32> %278, %663
  %665 = add nsw <4 x i32> %664, <i32 2, i32 2, i32 2, i32 2>
  %666 = ashr <4 x i32> %665, <i32 2, i32 2, i32 2, i32 2>
  %667 = getelementptr inbounds i32, i32* %2, i64 %293
  %668 = bitcast i32* %667 to <4 x i32>*
  %669 = load <4 x i32>, <4 x i32>* %668, align 4, !alias.scope !6, !noalias !3
  %670 = add nsw <4 x i32> %666, %669
  %671 = bitcast i32* %667 to <4 x i32>*
  store <4 x i32> %670, <4 x i32>* %671, align 4, !alias.scope !6, !noalias !3
  %672 = add nuw nsw i64 %280, 8
  br label %279
}

declare i32 @WebRtcIsac_DecLogisticMulti2(i16*, %struct.Bitstreamstruct*, i16*, i16*, i32, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcSpl_DivW32W16ResW16(i32, i16 signext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_EncodeSpec(i16* nocapture readonly, i16* nocapture readonly, i16 signext, i32, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %6 = alloca [6 x i32], align 16
  %7 = alloca [60 x i32], align 16
  %8 = alloca [60 x i32], align 16
  %9 = alloca i32, align 4
  %10 = alloca [480 x i16], align 16
  %11 = bitcast [480 x i16]* %10 to i8*
  %12 = alloca [480 x i16], align 16
  %13 = bitcast [480 x i16]* %12 to i8*
  %14 = alloca [120 x i32], align 16
  %15 = bitcast [120 x i32]* %14 to i8*
  %16 = alloca [120 x i32], align 16
  %17 = alloca [120 x i16], align 16
  %18 = alloca [7 x i32], align 16
  %19 = alloca [6 x i16], align 2
  %20 = alloca [7 x i16], align 2
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 960, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 960, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 480, i1 false)
  %21 = bitcast [120 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 480, i8* nonnull %21) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 480, i1 false)
  %22 = bitcast [120 x i16]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %22) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 240, i1 false)
  %23 = bitcast [7 x i32]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %23) #7
  %24 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 0
  %25 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 1
  %26 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 2
  %27 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 3
  %28 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 4
  %29 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 5
  %30 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 6
  %31 = bitcast [6 x i16]* %19 to i8*
  %32 = bitcast [7 x i32]* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 28, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %31) #7
  %33 = getelementptr inbounds [6 x i16], [6 x i16]* %19, i64 0, i64 0
  %34 = bitcast [7 x i16]* %20 to i8*
  %35 = bitcast [6 x i16]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %35, i8 -86, i64 12, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 14, i8* nonnull %34) #7
  %36 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 0
  %37 = icmp eq i32 %3, 0
  %38 = getelementptr inbounds %struct.Bitstreamstruct, %struct.Bitstreamstruct* %4, i64 0, i32 1
  %39 = bitcast [7 x i16]* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %39, i8 -86, i64 14, i1 false)
  %40 = load i32, i32* %38, align 4
  br i1 %37, label %41, label %100

41:                                               ; preds = %5
  %42 = icmp slt i16 %2, 614
  br i1 %42, label %43, label %74

43:                                               ; preds = %41, %65
  %44 = phi i64 [ %72, %65 ], [ 0, %41 ]
  %45 = phi i32 [ %51, %65 ], [ %40, %41 ]
  %46 = mul i32 %45, 196314165
  %47 = add i32 %46, 924410731
  %48 = ashr i32 %47, 25
  %49 = trunc i32 %48 to i16
  %50 = mul i32 %45, -1268468999
  %51 = add i32 %50, -1653660526
  %52 = add i32 %50, -1636883310
  %53 = ashr i32 %52, 25
  %54 = trunc i32 %53 to i16
  %55 = lshr i32 %51, 25
  %56 = and i32 %55, 15
  %57 = icmp ult i32 %56, 5
  br i1 %57, label %58, label %60

58:                                               ; preds = %43
  %59 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %44
  store i16 %49, i16* %59, align 2
  br label %65

60:                                               ; preds = %43
  %61 = icmp ult i32 %56, 10
  %62 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %44
  br i1 %61, label %63, label %64

63:                                               ; preds = %60
  store i16 %49, i16* %62, align 2
  br label %65

64:                                               ; preds = %60
  store i16 0, i16* %62, align 2
  br label %65

65:                                               ; preds = %64, %63, %58
  %66 = phi i16 [ %49, %64 ], [ 0, %63 ], [ %54, %58 ]
  %67 = phi i16 [ %54, %64 ], [ %54, %63 ], [ 0, %58 ]
  %68 = add nuw nsw i64 %44, 1
  %69 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %68
  store i16 %66, i16* %69, align 2
  %70 = add nuw nsw i64 %44, 2
  %71 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %70
  store i16 %67, i16* %71, align 2
  %72 = add nuw nsw i64 %44, 3
  %73 = icmp ult i64 %72, 478
  br i1 %73, label %43, label %127

74:                                               ; preds = %41
  %75 = mul i16 %2, -10
  %76 = add i16 %75, 22528
  %77 = sext i16 %76 to i32
  br label %78

78:                                               ; preds = %78, %74
  %79 = phi i32 [ 0, %74 ], [ %98, %78 ]
  %80 = phi i32 [ %40, %74 ], [ %82, %78 ]
  %81 = mul i32 %80, 196314165
  %82 = add i32 %81, 907633515
  %83 = add i32 %81, 924410731
  %84 = ashr i32 %83, 25
  %85 = lshr i32 %82, 25
  %86 = and i32 %85, 1
  %87 = mul nsw i32 %84, %77
  %88 = add nsw i32 %87, 8192
  %89 = ashr i32 %88, 14
  %90 = trunc i32 %89 to i16
  %91 = or i32 %86, %79
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %92
  store i16 %90, i16* %93, align 2
  %94 = or i32 %79, 1
  %95 = sub nuw nsw i32 %94, %86
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %96
  store i16 0, i16* %97, align 2
  %98 = add nuw nsw i32 %79, 2
  %99 = icmp ult i32 %98, 479
  br i1 %99, label %78, label %127

100:                                              ; preds = %5, %100
  %101 = phi i64 [ %121, %100 ], [ 0, %5 ]
  %102 = phi i32 [ %116, %100 ], [ %40, %5 ]
  %103 = mul i32 %102, 196314165
  %104 = add i32 %103, 924410731
  %105 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %101
  %106 = ashr i32 %104, 27
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %105, align 2
  %108 = add nuw nsw i64 %101, 1
  %109 = mul i32 %102, -1268468999
  %110 = add i32 %109, -1636883310
  %111 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %108
  %112 = ashr i32 %110, 27
  %113 = trunc i32 %112 to i16
  store i16 %113, i16* %111, align 2
  %114 = add nuw nsw i64 %101, 2
  %115 = mul i32 %102, 473723277
  %116 = add i32 %115, -183681627
  %117 = add i32 %115, -166904411
  %118 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %114
  %119 = ashr i32 %117, 27
  %120 = trunc i32 %119 to i16
  store i16 %120, i16* %118, align 2
  %121 = add nuw nsw i64 %101, 3
  %122 = icmp eq i64 %121, 480
  br i1 %122, label %123, label %100

123:                                              ; preds = %100
  %124 = icmp eq i32 %3, 1
  %125 = zext i1 %124 to i16
  %126 = select i1 %124, i32 240, i32 480
  br label %127

127:                                              ; preds = %78, %65, %123
  %128 = phi i16 [ %125, %123 ], [ 0, %65 ], [ 0, %78 ]
  %129 = phi i32 [ %126, %123 ], [ 480, %65 ], [ 480, %78 ]
  switch i32 %3, label %536 [
    i32 0, label %308
    i32 1, label %198
    i32 2, label %130
  ]

130:                                              ; preds = %127
  %131 = getelementptr inbounds i16, i16* %0, i64 -3
  %132 = getelementptr inbounds i16, i16* %1, i64 -3
  br label %133

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %196, %133 ], [ 0, %130 ]
  %135 = shl i64 %134, 2
  %136 = getelementptr inbounds i16, i16* %0, i64 %134
  %137 = bitcast i16* %136 to <4 x i16>*
  %138 = load <4 x i16>, <4 x i16>* %137, align 2
  %139 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %135
  %140 = bitcast i16* %139 to <16 x i16>*
  %141 = load <16 x i16>, <16 x i16>* %140, align 16
  %142 = shufflevector <16 x i16> %141, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %143 = shufflevector <16 x i16> %141, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %144 = shufflevector <16 x i16> %141, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %145 = shufflevector <16 x i16> %141, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %146 = add <4 x i16> %138, <i16 64, i16 64, i16 64, i16 64>
  %147 = add <4 x i16> %146, %142
  %148 = and <4 x i16> %147, <i16 -128, i16 -128, i16 -128, i16 -128>
  %149 = sub <4 x i16> %148, %142
  %150 = sext <4 x i16> %149 to <4 x i32>
  %151 = mul nsw <4 x i32> %150, %150
  %152 = getelementptr inbounds i16, i16* %1, i64 %134
  %153 = bitcast i16* %152 to <4 x i16>*
  %154 = load <4 x i16>, <4 x i16>* %153, align 2
  %155 = add <4 x i16> %154, <i16 64, i16 64, i16 64, i16 64>
  %156 = add <4 x i16> %155, %143
  %157 = and <4 x i16> %156, <i16 -128, i16 -128, i16 -128, i16 -128>
  %158 = sub <4 x i16> %157, %143
  %159 = sext <4 x i16> %158 to <4 x i32>
  %160 = mul nsw <4 x i32> %159, %159
  %161 = add nuw <4 x i32> %160, %151
  %162 = sub nuw nsw i64 239, %134
  %163 = getelementptr inbounds i16, i16* %131, i64 %162
  %164 = bitcast i16* %163 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2
  %166 = add <4 x i16> %165, <i16 64, i16 64, i16 64, i16 64>
  %167 = shufflevector <4 x i16> %166, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %168 = add <4 x i16> %167, %144
  %169 = and <4 x i16> %168, <i16 -128, i16 -128, i16 -128, i16 -128>
  %170 = sub <4 x i16> %169, %144
  %171 = sext <4 x i16> %170 to <4 x i32>
  %172 = mul nsw <4 x i32> %171, %171
  %173 = add <4 x i32> %161, %172
  %174 = getelementptr inbounds i16, i16* %132, i64 %162
  %175 = bitcast i16* %174 to <4 x i16>*
  %176 = load <4 x i16>, <4 x i16>* %175, align 2
  %177 = or i64 %135, 3
  %178 = add <4 x i16> %176, <i16 64, i16 64, i16 64, i16 64>
  %179 = shufflevector <4 x i16> %178, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %180 = add <4 x i16> %179, %145
  %181 = and <4 x i16> %180, <i16 -128, i16 -128, i16 -128, i16 -128>
  %182 = sub <4 x i16> %181, %145
  %183 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %177
  %184 = getelementptr inbounds i16, i16* %183, i64 -3
  %185 = bitcast i16* %184 to <16 x i16>*
  %186 = shufflevector <4 x i16> %149, <4 x i16> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %187 = shufflevector <4 x i16> %170, <4 x i16> %182, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %188 = shufflevector <8 x i16> %186, <8 x i16> %187, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %188, <16 x i16>* %185, align 2
  %189 = sext <4 x i16> %182 to <4 x i32>
  %190 = mul nsw <4 x i32> %189, %189
  %191 = add <4 x i32> %173, %190
  %192 = lshr <4 x i32> %191, <i32 2, i32 2, i32 2, i32 2>
  %193 = and i64 %134, 4611686018427387900
  %194 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %193
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %195, align 16
  %196 = add i64 %134, 4
  %197 = icmp eq i64 %196, 120
  br i1 %197, label %536, label %133, !llvm.loop !27

198:                                              ; preds = %127
  %199 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 240
  %200 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 1, i64 0
  %201 = getelementptr i16, i16* %0, i64 120
  %202 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 240
  %203 = getelementptr i16, i16* %1, i64 120
  %204 = bitcast i32* %200 to [480 x i16]*
  %205 = icmp ult [480 x i16]* %12, %204
  %206 = bitcast i16* %199 to [120 x i32]*
  %207 = icmp ult [120 x i32]* %14, %206
  %208 = and i1 %205, %207
  %209 = bitcast i16* %201 to [480 x i16]*
  %210 = icmp ult [480 x i16]* %12, %209
  %211 = icmp ugt i16* %199, %0
  %212 = and i1 %210, %211
  %213 = or i1 %208, %212
  %214 = bitcast i16* %202 to [480 x i16]*
  %215 = icmp ult [480 x i16]* %12, %214
  %216 = bitcast i16* %199 to [480 x i16]*
  %217 = icmp ult [480 x i16]* %10, %216
  %218 = and i1 %215, %217
  %219 = or i1 %213, %218
  %220 = bitcast i16* %203 to [480 x i16]*
  %221 = icmp ult [480 x i16]* %12, %220
  %222 = icmp ugt i16* %199, %1
  %223 = and i1 %221, %222
  %224 = or i1 %219, %223
  %225 = bitcast i16* %201 to [120 x i32]*
  %226 = icmp ult [120 x i32]* %14, %225
  %227 = bitcast i32* %200 to i16*
  %228 = icmp ugt i16* %227, %0
  %229 = and i1 %226, %228
  %230 = or i1 %224, %229
  %231 = bitcast i16* %202 to [120 x i32]*
  %232 = icmp ult [120 x i32]* %14, %231
  %233 = bitcast i32* %200 to [480 x i16]*
  %234 = icmp ult [480 x i16]* %10, %233
  %235 = and i1 %232, %234
  %236 = or i1 %230, %235
  %237 = bitcast i16* %203 to [120 x i32]*
  %238 = icmp ult [120 x i32]* %14, %237
  %239 = bitcast i32* %200 to i16*
  %240 = icmp ugt i16* %239, %1
  %241 = and i1 %238, %240
  %242 = or i1 %236, %241
  br i1 %242, label %474, label %243

243:                                              ; preds = %198, %243
  %244 = phi i64 [ %306, %243 ], [ 0, %198 ]
  %245 = shl i64 %244, 2
  %246 = shl i64 %244, 1
  %247 = shl i64 %244, 1
  %248 = getelementptr i16, i16* %0, i64 %247
  %249 = shl i64 %244, 1
  %250 = getelementptr i16, i16* %1, i64 %249
  %251 = bitcast i16* %248 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2
  %253 = shufflevector <8 x i16> %252, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %254 = shufflevector <8 x i16> %252, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %255 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %245
  %256 = bitcast i16* %255 to <16 x i16>*
  %257 = load <16 x i16>, <16 x i16>* %256, align 16
  %258 = shufflevector <16 x i16> %257, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %259 = shufflevector <16 x i16> %257, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %260 = shufflevector <16 x i16> %257, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %261 = shufflevector <16 x i16> %257, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %262 = add <4 x i16> %253, <i16 64, i16 64, i16 64, i16 64>
  %263 = add <4 x i16> %262, %258
  %264 = and <4 x i16> %263, <i16 -128, i16 -128, i16 -128, i16 -128>
  %265 = sub <4 x i16> %264, %258
  %266 = sext <4 x i16> %265 to <4 x i32>
  %267 = mul nsw <4 x i32> %266, %266
  %268 = bitcast i16* %250 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2
  %270 = shufflevector <8 x i16> %269, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %271 = shufflevector <8 x i16> %269, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %272 = add <4 x i16> %270, <i16 64, i16 64, i16 64, i16 64>
  %273 = add <4 x i16> %272, %259
  %274 = and <4 x i16> %273, <i16 -128, i16 -128, i16 -128, i16 -128>
  %275 = sub <4 x i16> %274, %259
  %276 = sext <4 x i16> %275 to <4 x i32>
  %277 = mul nsw <4 x i32> %276, %276
  %278 = add nuw <4 x i32> %277, %267
  %279 = lshr <4 x i32> %278, <i32 1, i32 1, i32 1, i32 1>
  %280 = or i64 %246, 1
  %281 = add <4 x i16> %254, <i16 64, i16 64, i16 64, i16 64>
  %282 = add <4 x i16> %281, %260
  %283 = and <4 x i16> %282, <i16 -128, i16 -128, i16 -128, i16 -128>
  %284 = sub <4 x i16> %283, %260
  %285 = sext <4 x i16> %284 to <4 x i32>
  %286 = mul nsw <4 x i32> %285, %285
  %287 = or i64 %245, 3
  %288 = add <4 x i16> %271, <i16 64, i16 64, i16 64, i16 64>
  %289 = add <4 x i16> %288, %261
  %290 = and <4 x i16> %289, <i16 -128, i16 -128, i16 -128, i16 -128>
  %291 = sub <4 x i16> %290, %261
  %292 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %287
  %293 = getelementptr inbounds i16, i16* %292, i64 -3
  %294 = bitcast i16* %293 to <16 x i16>*
  %295 = shufflevector <4 x i16> %265, <4 x i16> %275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %296 = shufflevector <4 x i16> %284, <4 x i16> %291, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %297 = shufflevector <8 x i16> %295, <8 x i16> %296, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %297, <16 x i16>* %294, align 2
  %298 = sext <4 x i16> %291 to <4 x i32>
  %299 = mul nsw <4 x i32> %298, %298
  %300 = add nuw <4 x i32> %299, %286
  %301 = lshr <4 x i32> %300, <i32 1, i32 1, i32 1, i32 1>
  %302 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %280
  %303 = getelementptr inbounds i32, i32* %302, i64 -1
  %304 = bitcast i32* %303 to <8 x i32>*
  %305 = shufflevector <4 x i32> %279, <4 x i32> %301, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %305, <8 x i32>* %304, align 4
  %306 = add i64 %244, 4
  %307 = icmp eq i64 %306, 60
  br i1 %307, label %536, label %243, !llvm.loop !28

308:                                              ; preds = %127
  %309 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 1, i64 0
  %310 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 1, i64 0
  %311 = getelementptr i16, i16* %0, i64 240
  %312 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 1, i64 0
  %313 = getelementptr i16, i16* %1, i64 240
  %314 = bitcast i32* %310 to [480 x i16]*
  %315 = icmp ult [480 x i16]* %12, %314
  %316 = bitcast i16* %309 to [120 x i32]*
  %317 = icmp ult [120 x i32]* %14, %316
  %318 = and i1 %315, %317
  %319 = bitcast i16* %311 to [480 x i16]*
  %320 = icmp ult [480 x i16]* %12, %319
  %321 = icmp ugt i16* %309, %0
  %322 = and i1 %320, %321
  %323 = or i1 %318, %322
  %324 = bitcast i16* %312 to [480 x i16]*
  %325 = icmp ult [480 x i16]* %12, %324
  %326 = bitcast i16* %309 to [480 x i16]*
  %327 = icmp ult [480 x i16]* %10, %326
  %328 = and i1 %325, %327
  %329 = or i1 %323, %328
  %330 = bitcast i16* %313 to [480 x i16]*
  %331 = icmp ult [480 x i16]* %12, %330
  %332 = icmp ugt i16* %309, %1
  %333 = and i1 %331, %332
  %334 = or i1 %329, %333
  %335 = bitcast i16* %311 to [120 x i32]*
  %336 = icmp ult [120 x i32]* %14, %335
  %337 = bitcast i32* %310 to i16*
  %338 = icmp ugt i16* %337, %0
  %339 = and i1 %336, %338
  %340 = or i1 %334, %339
  %341 = bitcast i16* %312 to [120 x i32]*
  %342 = icmp ult [120 x i32]* %14, %341
  %343 = bitcast i32* %310 to [480 x i16]*
  %344 = icmp ult [480 x i16]* %10, %343
  %345 = and i1 %342, %344
  %346 = or i1 %340, %345
  %347 = bitcast i16* %313 to [120 x i32]*
  %348 = icmp ult [120 x i32]* %14, %347
  %349 = bitcast i32* %310 to i16*
  %350 = icmp ugt i16* %349, %1
  %351 = and i1 %348, %350
  %352 = or i1 %346, %351
  br i1 %352, label %415, label %353

353:                                              ; preds = %308, %353
  %354 = phi i64 [ %413, %353 ], [ 0, %308 ]
  %355 = shl i64 %354, 2
  %356 = shl i64 %354, 1
  %357 = getelementptr i16, i16* %0, i64 %356
  %358 = shl i64 %354, 1
  %359 = getelementptr i16, i16* %1, i64 %358
  %360 = bitcast i16* %357 to <8 x i16>*
  %361 = load <8 x i16>, <8 x i16>* %360, align 2
  %362 = shufflevector <8 x i16> %361, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %363 = shufflevector <8 x i16> %361, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %364 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %355
  %365 = bitcast i16* %364 to <16 x i16>*
  %366 = load <16 x i16>, <16 x i16>* %365, align 16
  %367 = shufflevector <16 x i16> %366, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %368 = shufflevector <16 x i16> %366, <16 x i16> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %369 = shufflevector <16 x i16> %366, <16 x i16> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %370 = shufflevector <16 x i16> %366, <16 x i16> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %371 = add <4 x i16> %362, <i16 64, i16 64, i16 64, i16 64>
  %372 = add <4 x i16> %371, %367
  %373 = and <4 x i16> %372, <i16 -128, i16 -128, i16 -128, i16 -128>
  %374 = sub <4 x i16> %373, %367
  %375 = sext <4 x i16> %374 to <4 x i32>
  %376 = mul nsw <4 x i32> %375, %375
  %377 = bitcast i16* %359 to <8 x i16>*
  %378 = load <8 x i16>, <8 x i16>* %377, align 2
  %379 = shufflevector <8 x i16> %378, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %380 = shufflevector <8 x i16> %378, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %381 = add <4 x i16> %379, <i16 64, i16 64, i16 64, i16 64>
  %382 = add <4 x i16> %381, %368
  %383 = and <4 x i16> %382, <i16 -128, i16 -128, i16 -128, i16 -128>
  %384 = sub <4 x i16> %383, %368
  %385 = sext <4 x i16> %384 to <4 x i32>
  %386 = mul nsw <4 x i32> %385, %385
  %387 = add nuw <4 x i32> %386, %376
  %388 = add <4 x i16> %363, <i16 64, i16 64, i16 64, i16 64>
  %389 = add <4 x i16> %388, %369
  %390 = and <4 x i16> %389, <i16 -128, i16 -128, i16 -128, i16 -128>
  %391 = sub <4 x i16> %390, %369
  %392 = sext <4 x i16> %391 to <4 x i32>
  %393 = mul nsw <4 x i32> %392, %392
  %394 = add <4 x i32> %387, %393
  %395 = or i64 %355, 3
  %396 = add <4 x i16> %380, <i16 64, i16 64, i16 64, i16 64>
  %397 = add <4 x i16> %396, %370
  %398 = and <4 x i16> %397, <i16 -128, i16 -128, i16 -128, i16 -128>
  %399 = sub <4 x i16> %398, %370
  %400 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %395
  %401 = getelementptr inbounds i16, i16* %400, i64 -3
  %402 = bitcast i16* %401 to <16 x i16>*
  %403 = shufflevector <4 x i16> %374, <4 x i16> %384, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %404 = shufflevector <4 x i16> %391, <4 x i16> %399, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %405 = shufflevector <8 x i16> %403, <8 x i16> %404, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i16> %405, <16 x i16>* %402, align 2
  %406 = sext <4 x i16> %399 to <4 x i32>
  %407 = mul nsw <4 x i32> %406, %406
  %408 = add <4 x i32> %394, %407
  %409 = lshr <4 x i32> %408, <i32 2, i32 2, i32 2, i32 2>
  %410 = and i64 %354, 4611686018427387900
  %411 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %410
  %412 = bitcast i32* %411 to <4 x i32>*
  store <4 x i32> %409, <4 x i32>* %412, align 16, !alias.scope !29, !noalias !32
  %413 = add i64 %354, 4
  %414 = icmp eq i64 %413, 120
  br i1 %414, label %536, label %353, !llvm.loop !36

415:                                              ; preds = %308, %415
  %416 = phi i64 [ %472, %415 ], [ 0, %308 ]
  %417 = phi i16* [ %443, %415 ], [ %0, %308 ]
  %418 = phi i16* [ %456, %415 ], [ %1, %308 ]
  %419 = getelementptr inbounds i16, i16* %417, i64 1
  %420 = load i16, i16* %417, align 2
  %421 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %416
  %422 = load i16, i16* %421, align 8
  %423 = add i16 %420, 64
  %424 = add i16 %423, %422
  %425 = and i16 %424, -128
  %426 = sub i16 %425, %422
  %427 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %416
  store i16 %426, i16* %427, align 8
  %428 = sext i16 %426 to i32
  %429 = mul nsw i32 %428, %428
  %430 = getelementptr inbounds i16, i16* %418, i64 1
  %431 = load i16, i16* %418, align 2
  %432 = or i64 %416, 1
  %433 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %432
  %434 = load i16, i16* %433, align 2
  %435 = add i16 %431, 64
  %436 = add i16 %435, %434
  %437 = and i16 %436, -128
  %438 = sub i16 %437, %434
  %439 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %432
  store i16 %438, i16* %439, align 2
  %440 = sext i16 %438 to i32
  %441 = mul nsw i32 %440, %440
  %442 = add nuw i32 %441, %429
  %443 = getelementptr inbounds i16, i16* %417, i64 2
  %444 = load i16, i16* %419, align 2
  %445 = or i64 %416, 2
  %446 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %445
  %447 = load i16, i16* %446, align 4
  %448 = add i16 %444, 64
  %449 = add i16 %448, %447
  %450 = and i16 %449, -128
  %451 = sub i16 %450, %447
  %452 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %445
  store i16 %451, i16* %452, align 4
  %453 = sext i16 %451 to i32
  %454 = mul nsw i32 %453, %453
  %455 = add i32 %442, %454
  %456 = getelementptr inbounds i16, i16* %418, i64 2
  %457 = load i16, i16* %430, align 2
  %458 = or i64 %416, 3
  %459 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %458
  %460 = load i16, i16* %459, align 2
  %461 = add i16 %457, 64
  %462 = add i16 %461, %460
  %463 = and i16 %462, -128
  %464 = sub i16 %463, %460
  %465 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %458
  store i16 %464, i16* %465, align 2
  %466 = sext i16 %464 to i32
  %467 = mul nsw i32 %466, %466
  %468 = add i32 %455, %467
  %469 = lshr i32 %468, 2
  %470 = lshr exact i64 %416, 2
  %471 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %470
  store i32 %469, i32* %471, align 4
  %472 = add nuw nsw i64 %416, 4
  %473 = icmp ult i64 %472, 480
  br i1 %473, label %415, label %536, !llvm.loop !37

474:                                              ; preds = %198, %474
  %475 = phi i64 [ %534, %474 ], [ 0, %198 ]
  %476 = phi i64 [ %532, %474 ], [ 0, %198 ]
  %477 = phi i16* [ %506, %474 ], [ %0, %198 ]
  %478 = phi i16* [ %518, %474 ], [ %1, %198 ]
  %479 = getelementptr inbounds i16, i16* %477, i64 1
  %480 = load i16, i16* %477, align 2
  %481 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %475
  %482 = load i16, i16* %481, align 8
  %483 = add i16 %480, 64
  %484 = add i16 %483, %482
  %485 = and i16 %484, -128
  %486 = sub i16 %485, %482
  %487 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %475
  store i16 %486, i16* %487, align 8
  %488 = sext i16 %486 to i32
  %489 = mul nsw i32 %488, %488
  %490 = getelementptr inbounds i16, i16* %478, i64 1
  %491 = load i16, i16* %478, align 2
  %492 = or i64 %475, 1
  %493 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %492
  %494 = load i16, i16* %493, align 2
  %495 = add i16 %491, 64
  %496 = add i16 %495, %494
  %497 = and i16 %496, -128
  %498 = sub i16 %497, %494
  %499 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %492
  store i16 %498, i16* %499, align 2
  %500 = sext i16 %498 to i32
  %501 = mul nsw i32 %500, %500
  %502 = add nuw i32 %501, %489
  %503 = lshr i32 %502, 1
  %504 = or i64 %476, 1
  %505 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %476
  store i32 %503, i32* %505, align 8
  %506 = getelementptr inbounds i16, i16* %477, i64 2
  %507 = load i16, i16* %479, align 2
  %508 = or i64 %475, 2
  %509 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %508
  %510 = load i16, i16* %509, align 4
  %511 = add i16 %507, 64
  %512 = add i16 %511, %510
  %513 = and i16 %512, -128
  %514 = sub i16 %513, %510
  %515 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %508
  store i16 %514, i16* %515, align 4
  %516 = sext i16 %514 to i32
  %517 = mul nsw i32 %516, %516
  %518 = getelementptr inbounds i16, i16* %478, i64 2
  %519 = load i16, i16* %490, align 2
  %520 = or i64 %475, 3
  %521 = getelementptr inbounds [480 x i16], [480 x i16]* %10, i64 0, i64 %520
  %522 = load i16, i16* %521, align 2
  %523 = add i16 %519, 64
  %524 = add i16 %523, %522
  %525 = and i16 %524, -128
  %526 = sub i16 %525, %522
  %527 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 %520
  store i16 %526, i16* %527, align 2
  %528 = sext i16 %526 to i32
  %529 = mul nsw i32 %528, %528
  %530 = add nuw i32 %529, %517
  %531 = lshr i32 %530, 1
  %532 = add nuw nsw i64 %476, 2
  %533 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %504
  store i32 %531, i32* %533, align 4
  %534 = add nuw nsw i64 %475, 4
  %535 = icmp ult i64 %534, 240
  br i1 %535, label %474, label %536, !llvm.loop !38

536:                                              ; preds = %133, %243, %474, %353, %415, %127
  %537 = bitcast [60 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %537) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %537, i8 -86, i64 240, i1 false) #7
  %538 = bitcast [60 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %538) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %538, i8 -86, i64 240, i1 false) #7
  br label %539

539:                                              ; preds = %1871, %536
  %540 = phi i64 [ 0, %536 ], [ %1890, %1871 ]
  %541 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %540
  %542 = bitcast i32* %541 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 16
  %544 = sub nuw nsw i64 119, %540
  %545 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %544
  %546 = getelementptr inbounds i32, i32* %545, i64 -3
  %547 = bitcast i32* %546 to <4 x i32>*
  %548 = load <4 x i32>, <4 x i32>* %547, align 4
  %549 = shufflevector <4 x i32> %548, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %550 = add <4 x i32> %543, <i32 16, i32 16, i32 16, i32 16>
  %551 = add <4 x i32> %550, %549
  %552 = ashr <4 x i32> %551, <i32 5, i32 5, i32 5, i32 5>
  %553 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 %540
  %554 = bitcast i32* %553 to <4 x i32>*
  store <4 x i32> %552, <4 x i32>* %554, align 16
  %555 = sub <4 x i32> %550, %549
  %556 = ashr <4 x i32> %555, <i32 5, i32 5, i32 5, i32 5>
  %557 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 %540
  %558 = bitcast i32* %557 to <4 x i32>*
  store <4 x i32> %556, <4 x i32>* %558, align 16
  %559 = or i64 %540, 4
  %560 = icmp eq i64 %559, 60
  br i1 %560, label %561, label %1871, !llvm.loop !39

561:                                              ; preds = %539
  %562 = bitcast [60 x i32]* %7 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 16
  %564 = add nsw <4 x i32> %563, <i32 2, i32 0, i32 0, i32 0>
  %565 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 4
  %566 = bitcast i32* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 16
  %568 = add nsw <4 x i32> %567, %564
  %569 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 8
  %570 = bitcast i32* %569 to <4 x i32>*
  %571 = load <4 x i32>, <4 x i32>* %570, align 16
  %572 = add nsw <4 x i32> %571, %568
  %573 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 12
  %574 = bitcast i32* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 16
  %576 = add nsw <4 x i32> %575, %572
  %577 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 16
  %578 = bitcast i32* %577 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 16
  %580 = add nsw <4 x i32> %579, %576
  %581 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 20
  %582 = bitcast i32* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 16
  %584 = add nsw <4 x i32> %583, %580
  %585 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 24
  %586 = bitcast i32* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 16
  %588 = add nsw <4 x i32> %587, %584
  %589 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 28
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 16
  %592 = add nsw <4 x i32> %591, %588
  %593 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 32
  %594 = bitcast i32* %593 to <4 x i32>*
  %595 = load <4 x i32>, <4 x i32>* %594, align 16
  %596 = add nsw <4 x i32> %595, %592
  %597 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 36
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 16
  %600 = add nsw <4 x i32> %599, %596
  %601 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 40
  %602 = bitcast i32* %601 to <4 x i32>*
  %603 = load <4 x i32>, <4 x i32>* %602, align 16
  %604 = add nsw <4 x i32> %603, %600
  %605 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 44
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 16
  %608 = add nsw <4 x i32> %607, %604
  %609 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 48
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 16
  %612 = add nsw <4 x i32> %611, %608
  %613 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 52
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 16
  %616 = add nsw <4 x i32> %615, %612
  %617 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 56
  %618 = bitcast i32* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 16
  %620 = add nsw <4 x i32> %619, %616
  %621 = shufflevector <4 x i32> %620, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %622 = add <4 x i32> %620, %621
  %623 = shufflevector <4 x i32> %622, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %624 = add <4 x i32> %622, %623
  %625 = extractelement <4 x i32> %624, i32 0
  %626 = load <4 x i16>, <4 x i16>* bitcast ([6 x [60 x i16]]* @WebRtcIsac_kCos to <4 x i16>*), align 16
  %627 = sext <4 x i16> %626 to <4 x i32>
  %628 = bitcast [60 x i32]* %8 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 16
  %630 = mul nsw <4 x i32> %629, %627
  %631 = add nsw <4 x i32> %630, <i32 256, i32 256, i32 256, i32 256>
  %632 = ashr <4 x i32> %631, <i32 9, i32 9, i32 9, i32 9>
  %633 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 4) to <4 x i16>*), align 8
  %634 = sext <4 x i16> %633 to <4 x i32>
  %635 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 16
  %638 = mul nsw <4 x i32> %637, %634
  %639 = add nsw <4 x i32> %638, <i32 256, i32 256, i32 256, i32 256>
  %640 = ashr <4 x i32> %639, <i32 9, i32 9, i32 9, i32 9>
  %641 = add nsw <4 x i32> %640, %632
  %642 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 8) to <4 x i16>*), align 16
  %643 = sext <4 x i16> %642 to <4 x i32>
  %644 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 8
  %645 = bitcast i32* %644 to <4 x i32>*
  %646 = load <4 x i32>, <4 x i32>* %645, align 16
  %647 = mul nsw <4 x i32> %646, %643
  %648 = add nsw <4 x i32> %647, <i32 256, i32 256, i32 256, i32 256>
  %649 = ashr <4 x i32> %648, <i32 9, i32 9, i32 9, i32 9>
  %650 = add nsw <4 x i32> %649, %641
  %651 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 12) to <4 x i16>*), align 8
  %652 = sext <4 x i16> %651 to <4 x i32>
  %653 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 12
  %654 = bitcast i32* %653 to <4 x i32>*
  %655 = load <4 x i32>, <4 x i32>* %654, align 16
  %656 = mul nsw <4 x i32> %655, %652
  %657 = add nsw <4 x i32> %656, <i32 256, i32 256, i32 256, i32 256>
  %658 = ashr <4 x i32> %657, <i32 9, i32 9, i32 9, i32 9>
  %659 = add nsw <4 x i32> %658, %650
  %660 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 16) to <4 x i16>*), align 16
  %661 = sext <4 x i16> %660 to <4 x i32>
  %662 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 16
  %663 = bitcast i32* %662 to <4 x i32>*
  %664 = load <4 x i32>, <4 x i32>* %663, align 16
  %665 = mul nsw <4 x i32> %664, %661
  %666 = add nsw <4 x i32> %665, <i32 256, i32 256, i32 256, i32 256>
  %667 = ashr <4 x i32> %666, <i32 9, i32 9, i32 9, i32 9>
  %668 = add nsw <4 x i32> %667, %659
  %669 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 20) to <4 x i16>*), align 8
  %670 = sext <4 x i16> %669 to <4 x i32>
  %671 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 20
  %672 = bitcast i32* %671 to <4 x i32>*
  %673 = load <4 x i32>, <4 x i32>* %672, align 16
  %674 = mul nsw <4 x i32> %673, %670
  %675 = add nsw <4 x i32> %674, <i32 256, i32 256, i32 256, i32 256>
  %676 = ashr <4 x i32> %675, <i32 9, i32 9, i32 9, i32 9>
  %677 = add nsw <4 x i32> %676, %668
  %678 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 24) to <4 x i16>*), align 16
  %679 = sext <4 x i16> %678 to <4 x i32>
  %680 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 24
  %681 = bitcast i32* %680 to <4 x i32>*
  %682 = load <4 x i32>, <4 x i32>* %681, align 16
  %683 = mul nsw <4 x i32> %682, %679
  %684 = add nsw <4 x i32> %683, <i32 256, i32 256, i32 256, i32 256>
  %685 = ashr <4 x i32> %684, <i32 9, i32 9, i32 9, i32 9>
  %686 = add nsw <4 x i32> %685, %677
  %687 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 28) to <4 x i16>*), align 8
  %688 = sext <4 x i16> %687 to <4 x i32>
  %689 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 28
  %690 = bitcast i32* %689 to <4 x i32>*
  %691 = load <4 x i32>, <4 x i32>* %690, align 16
  %692 = mul nsw <4 x i32> %691, %688
  %693 = add nsw <4 x i32> %692, <i32 256, i32 256, i32 256, i32 256>
  %694 = ashr <4 x i32> %693, <i32 9, i32 9, i32 9, i32 9>
  %695 = add nsw <4 x i32> %694, %686
  %696 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 32) to <4 x i16>*), align 16
  %697 = sext <4 x i16> %696 to <4 x i32>
  %698 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 32
  %699 = bitcast i32* %698 to <4 x i32>*
  %700 = load <4 x i32>, <4 x i32>* %699, align 16
  %701 = mul nsw <4 x i32> %700, %697
  %702 = add nsw <4 x i32> %701, <i32 256, i32 256, i32 256, i32 256>
  %703 = ashr <4 x i32> %702, <i32 9, i32 9, i32 9, i32 9>
  %704 = add nsw <4 x i32> %703, %695
  %705 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 36) to <4 x i16>*), align 8
  %706 = sext <4 x i16> %705 to <4 x i32>
  %707 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 36
  %708 = bitcast i32* %707 to <4 x i32>*
  %709 = load <4 x i32>, <4 x i32>* %708, align 16
  %710 = mul nsw <4 x i32> %709, %706
  %711 = add nsw <4 x i32> %710, <i32 256, i32 256, i32 256, i32 256>
  %712 = ashr <4 x i32> %711, <i32 9, i32 9, i32 9, i32 9>
  %713 = add nsw <4 x i32> %712, %704
  %714 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 40) to <4 x i16>*), align 16
  %715 = sext <4 x i16> %714 to <4 x i32>
  %716 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 40
  %717 = bitcast i32* %716 to <4 x i32>*
  %718 = load <4 x i32>, <4 x i32>* %717, align 16
  %719 = mul nsw <4 x i32> %718, %715
  %720 = add nsw <4 x i32> %719, <i32 256, i32 256, i32 256, i32 256>
  %721 = ashr <4 x i32> %720, <i32 9, i32 9, i32 9, i32 9>
  %722 = add nsw <4 x i32> %721, %713
  %723 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 44) to <4 x i16>*), align 8
  %724 = sext <4 x i16> %723 to <4 x i32>
  %725 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 44
  %726 = bitcast i32* %725 to <4 x i32>*
  %727 = load <4 x i32>, <4 x i32>* %726, align 16
  %728 = mul nsw <4 x i32> %727, %724
  %729 = add nsw <4 x i32> %728, <i32 256, i32 256, i32 256, i32 256>
  %730 = ashr <4 x i32> %729, <i32 9, i32 9, i32 9, i32 9>
  %731 = add nsw <4 x i32> %730, %722
  %732 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 48) to <4 x i16>*), align 16
  %733 = sext <4 x i16> %732 to <4 x i32>
  %734 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 48
  %735 = bitcast i32* %734 to <4 x i32>*
  %736 = load <4 x i32>, <4 x i32>* %735, align 16
  %737 = mul nsw <4 x i32> %736, %733
  %738 = add nsw <4 x i32> %737, <i32 256, i32 256, i32 256, i32 256>
  %739 = ashr <4 x i32> %738, <i32 9, i32 9, i32 9, i32 9>
  %740 = add nsw <4 x i32> %739, %731
  %741 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 52) to <4 x i16>*), align 8
  %742 = sext <4 x i16> %741 to <4 x i32>
  %743 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 52
  %744 = bitcast i32* %743 to <4 x i32>*
  %745 = load <4 x i32>, <4 x i32>* %744, align 16
  %746 = mul nsw <4 x i32> %745, %742
  %747 = add nsw <4 x i32> %746, <i32 256, i32 256, i32 256, i32 256>
  %748 = ashr <4 x i32> %747, <i32 9, i32 9, i32 9, i32 9>
  %749 = add nsw <4 x i32> %748, %740
  %750 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 0, i64 56) to <4 x i16>*), align 16
  %751 = sext <4 x i16> %750 to <4 x i32>
  %752 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 56
  %753 = bitcast i32* %752 to <4 x i32>*
  %754 = load <4 x i32>, <4 x i32>* %753, align 16
  %755 = mul nsw <4 x i32> %754, %751
  %756 = add nsw <4 x i32> %755, <i32 256, i32 256, i32 256, i32 256>
  %757 = ashr <4 x i32> %756, <i32 9, i32 9, i32 9, i32 9>
  %758 = add nsw <4 x i32> %757, %749
  %759 = shufflevector <4 x i32> %758, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %760 = add <4 x i32> %758, %759
  %761 = shufflevector <4 x i32> %760, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = add <4 x i32> %760, %761
  %763 = extractelement <4 x i32> %762, i32 0
  %764 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 0) to <4 x i16>*), align 16
  %765 = sext <4 x i16> %764 to <4 x i32>
  %766 = bitcast [60 x i32]* %8 to <4 x i32>*
  %767 = load <4 x i32>, <4 x i32>* %766, align 16
  %768 = mul nsw <4 x i32> %767, %765
  %769 = add nsw <4 x i32> %768, <i32 256, i32 256, i32 256, i32 256>
  %770 = ashr <4 x i32> %769, <i32 9, i32 9, i32 9, i32 9>
  %771 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 4) to <4 x i16>*), align 8
  %772 = sext <4 x i16> %771 to <4 x i32>
  %773 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 4
  %774 = bitcast i32* %773 to <4 x i32>*
  %775 = load <4 x i32>, <4 x i32>* %774, align 16
  %776 = mul nsw <4 x i32> %775, %772
  %777 = add nsw <4 x i32> %776, <i32 256, i32 256, i32 256, i32 256>
  %778 = ashr <4 x i32> %777, <i32 9, i32 9, i32 9, i32 9>
  %779 = add nsw <4 x i32> %778, %770
  %780 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 8) to <4 x i16>*), align 16
  %781 = sext <4 x i16> %780 to <4 x i32>
  %782 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 8
  %783 = bitcast i32* %782 to <4 x i32>*
  %784 = load <4 x i32>, <4 x i32>* %783, align 16
  %785 = mul nsw <4 x i32> %784, %781
  %786 = add nsw <4 x i32> %785, <i32 256, i32 256, i32 256, i32 256>
  %787 = ashr <4 x i32> %786, <i32 9, i32 9, i32 9, i32 9>
  %788 = add nsw <4 x i32> %787, %779
  %789 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 12) to <4 x i16>*), align 8
  %790 = sext <4 x i16> %789 to <4 x i32>
  %791 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 12
  %792 = bitcast i32* %791 to <4 x i32>*
  %793 = load <4 x i32>, <4 x i32>* %792, align 16
  %794 = mul nsw <4 x i32> %793, %790
  %795 = add nsw <4 x i32> %794, <i32 256, i32 256, i32 256, i32 256>
  %796 = ashr <4 x i32> %795, <i32 9, i32 9, i32 9, i32 9>
  %797 = add nsw <4 x i32> %796, %788
  %798 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 16) to <4 x i16>*), align 16
  %799 = sext <4 x i16> %798 to <4 x i32>
  %800 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 16
  %801 = bitcast i32* %800 to <4 x i32>*
  %802 = load <4 x i32>, <4 x i32>* %801, align 16
  %803 = mul nsw <4 x i32> %802, %799
  %804 = add nsw <4 x i32> %803, <i32 256, i32 256, i32 256, i32 256>
  %805 = ashr <4 x i32> %804, <i32 9, i32 9, i32 9, i32 9>
  %806 = add nsw <4 x i32> %805, %797
  %807 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 20) to <4 x i16>*), align 8
  %808 = sext <4 x i16> %807 to <4 x i32>
  %809 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 20
  %810 = bitcast i32* %809 to <4 x i32>*
  %811 = load <4 x i32>, <4 x i32>* %810, align 16
  %812 = mul nsw <4 x i32> %811, %808
  %813 = add nsw <4 x i32> %812, <i32 256, i32 256, i32 256, i32 256>
  %814 = ashr <4 x i32> %813, <i32 9, i32 9, i32 9, i32 9>
  %815 = add nsw <4 x i32> %814, %806
  %816 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 24) to <4 x i16>*), align 16
  %817 = sext <4 x i16> %816 to <4 x i32>
  %818 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 24
  %819 = bitcast i32* %818 to <4 x i32>*
  %820 = load <4 x i32>, <4 x i32>* %819, align 16
  %821 = mul nsw <4 x i32> %820, %817
  %822 = add nsw <4 x i32> %821, <i32 256, i32 256, i32 256, i32 256>
  %823 = ashr <4 x i32> %822, <i32 9, i32 9, i32 9, i32 9>
  %824 = add nsw <4 x i32> %823, %815
  %825 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 28) to <4 x i16>*), align 8
  %826 = sext <4 x i16> %825 to <4 x i32>
  %827 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 28
  %828 = bitcast i32* %827 to <4 x i32>*
  %829 = load <4 x i32>, <4 x i32>* %828, align 16
  %830 = mul nsw <4 x i32> %829, %826
  %831 = add nsw <4 x i32> %830, <i32 256, i32 256, i32 256, i32 256>
  %832 = ashr <4 x i32> %831, <i32 9, i32 9, i32 9, i32 9>
  %833 = add nsw <4 x i32> %832, %824
  %834 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 32) to <4 x i16>*), align 16
  %835 = sext <4 x i16> %834 to <4 x i32>
  %836 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 32
  %837 = bitcast i32* %836 to <4 x i32>*
  %838 = load <4 x i32>, <4 x i32>* %837, align 16
  %839 = mul nsw <4 x i32> %838, %835
  %840 = add nsw <4 x i32> %839, <i32 256, i32 256, i32 256, i32 256>
  %841 = ashr <4 x i32> %840, <i32 9, i32 9, i32 9, i32 9>
  %842 = add nsw <4 x i32> %841, %833
  %843 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 36) to <4 x i16>*), align 8
  %844 = sext <4 x i16> %843 to <4 x i32>
  %845 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 36
  %846 = bitcast i32* %845 to <4 x i32>*
  %847 = load <4 x i32>, <4 x i32>* %846, align 16
  %848 = mul nsw <4 x i32> %847, %844
  %849 = add nsw <4 x i32> %848, <i32 256, i32 256, i32 256, i32 256>
  %850 = ashr <4 x i32> %849, <i32 9, i32 9, i32 9, i32 9>
  %851 = add nsw <4 x i32> %850, %842
  %852 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 40) to <4 x i16>*), align 16
  %853 = sext <4 x i16> %852 to <4 x i32>
  %854 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 40
  %855 = bitcast i32* %854 to <4 x i32>*
  %856 = load <4 x i32>, <4 x i32>* %855, align 16
  %857 = mul nsw <4 x i32> %856, %853
  %858 = add nsw <4 x i32> %857, <i32 256, i32 256, i32 256, i32 256>
  %859 = ashr <4 x i32> %858, <i32 9, i32 9, i32 9, i32 9>
  %860 = add nsw <4 x i32> %859, %851
  %861 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 44) to <4 x i16>*), align 8
  %862 = sext <4 x i16> %861 to <4 x i32>
  %863 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 44
  %864 = bitcast i32* %863 to <4 x i32>*
  %865 = load <4 x i32>, <4 x i32>* %864, align 16
  %866 = mul nsw <4 x i32> %865, %862
  %867 = add nsw <4 x i32> %866, <i32 256, i32 256, i32 256, i32 256>
  %868 = ashr <4 x i32> %867, <i32 9, i32 9, i32 9, i32 9>
  %869 = add nsw <4 x i32> %868, %860
  %870 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 48) to <4 x i16>*), align 16
  %871 = sext <4 x i16> %870 to <4 x i32>
  %872 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 48
  %873 = bitcast i32* %872 to <4 x i32>*
  %874 = load <4 x i32>, <4 x i32>* %873, align 16
  %875 = mul nsw <4 x i32> %874, %871
  %876 = add nsw <4 x i32> %875, <i32 256, i32 256, i32 256, i32 256>
  %877 = ashr <4 x i32> %876, <i32 9, i32 9, i32 9, i32 9>
  %878 = add nsw <4 x i32> %877, %869
  %879 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 52) to <4 x i16>*), align 8
  %880 = sext <4 x i16> %879 to <4 x i32>
  %881 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 52
  %882 = bitcast i32* %881 to <4 x i32>*
  %883 = load <4 x i32>, <4 x i32>* %882, align 16
  %884 = mul nsw <4 x i32> %883, %880
  %885 = add nsw <4 x i32> %884, <i32 256, i32 256, i32 256, i32 256>
  %886 = ashr <4 x i32> %885, <i32 9, i32 9, i32 9, i32 9>
  %887 = add nsw <4 x i32> %886, %878
  %888 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 2, i64 56) to <4 x i16>*), align 16
  %889 = sext <4 x i16> %888 to <4 x i32>
  %890 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 56
  %891 = bitcast i32* %890 to <4 x i32>*
  %892 = load <4 x i32>, <4 x i32>* %891, align 16
  %893 = mul nsw <4 x i32> %892, %889
  %894 = add nsw <4 x i32> %893, <i32 256, i32 256, i32 256, i32 256>
  %895 = ashr <4 x i32> %894, <i32 9, i32 9, i32 9, i32 9>
  %896 = add nsw <4 x i32> %895, %887
  %897 = shufflevector <4 x i32> %896, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %898 = add <4 x i32> %896, %897
  %899 = shufflevector <4 x i32> %898, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %900 = add <4 x i32> %898, %899
  %901 = extractelement <4 x i32> %900, i32 0
  %902 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 0) to <4 x i16>*), align 16
  %903 = sext <4 x i16> %902 to <4 x i32>
  %904 = bitcast [60 x i32]* %8 to <4 x i32>*
  %905 = load <4 x i32>, <4 x i32>* %904, align 16
  %906 = mul nsw <4 x i32> %905, %903
  %907 = add nsw <4 x i32> %906, <i32 256, i32 256, i32 256, i32 256>
  %908 = ashr <4 x i32> %907, <i32 9, i32 9, i32 9, i32 9>
  %909 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 4) to <4 x i16>*), align 8
  %910 = sext <4 x i16> %909 to <4 x i32>
  %911 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 4
  %912 = bitcast i32* %911 to <4 x i32>*
  %913 = load <4 x i32>, <4 x i32>* %912, align 16
  %914 = mul nsw <4 x i32> %913, %910
  %915 = add nsw <4 x i32> %914, <i32 256, i32 256, i32 256, i32 256>
  %916 = ashr <4 x i32> %915, <i32 9, i32 9, i32 9, i32 9>
  %917 = add nsw <4 x i32> %916, %908
  %918 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 8) to <4 x i16>*), align 16
  %919 = sext <4 x i16> %918 to <4 x i32>
  %920 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 8
  %921 = bitcast i32* %920 to <4 x i32>*
  %922 = load <4 x i32>, <4 x i32>* %921, align 16
  %923 = mul nsw <4 x i32> %922, %919
  %924 = add nsw <4 x i32> %923, <i32 256, i32 256, i32 256, i32 256>
  %925 = ashr <4 x i32> %924, <i32 9, i32 9, i32 9, i32 9>
  %926 = add nsw <4 x i32> %925, %917
  %927 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 12) to <4 x i16>*), align 8
  %928 = sext <4 x i16> %927 to <4 x i32>
  %929 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 12
  %930 = bitcast i32* %929 to <4 x i32>*
  %931 = load <4 x i32>, <4 x i32>* %930, align 16
  %932 = mul nsw <4 x i32> %931, %928
  %933 = add nsw <4 x i32> %932, <i32 256, i32 256, i32 256, i32 256>
  %934 = ashr <4 x i32> %933, <i32 9, i32 9, i32 9, i32 9>
  %935 = add nsw <4 x i32> %934, %926
  %936 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 16) to <4 x i16>*), align 16
  %937 = sext <4 x i16> %936 to <4 x i32>
  %938 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 16
  %939 = bitcast i32* %938 to <4 x i32>*
  %940 = load <4 x i32>, <4 x i32>* %939, align 16
  %941 = mul nsw <4 x i32> %940, %937
  %942 = add nsw <4 x i32> %941, <i32 256, i32 256, i32 256, i32 256>
  %943 = ashr <4 x i32> %942, <i32 9, i32 9, i32 9, i32 9>
  %944 = add nsw <4 x i32> %943, %935
  %945 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 20) to <4 x i16>*), align 8
  %946 = sext <4 x i16> %945 to <4 x i32>
  %947 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 20
  %948 = bitcast i32* %947 to <4 x i32>*
  %949 = load <4 x i32>, <4 x i32>* %948, align 16
  %950 = mul nsw <4 x i32> %949, %946
  %951 = add nsw <4 x i32> %950, <i32 256, i32 256, i32 256, i32 256>
  %952 = ashr <4 x i32> %951, <i32 9, i32 9, i32 9, i32 9>
  %953 = add nsw <4 x i32> %952, %944
  %954 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 24) to <4 x i16>*), align 16
  %955 = sext <4 x i16> %954 to <4 x i32>
  %956 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 24
  %957 = bitcast i32* %956 to <4 x i32>*
  %958 = load <4 x i32>, <4 x i32>* %957, align 16
  %959 = mul nsw <4 x i32> %958, %955
  %960 = add nsw <4 x i32> %959, <i32 256, i32 256, i32 256, i32 256>
  %961 = ashr <4 x i32> %960, <i32 9, i32 9, i32 9, i32 9>
  %962 = add nsw <4 x i32> %961, %953
  %963 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 28) to <4 x i16>*), align 8
  %964 = sext <4 x i16> %963 to <4 x i32>
  %965 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 28
  %966 = bitcast i32* %965 to <4 x i32>*
  %967 = load <4 x i32>, <4 x i32>* %966, align 16
  %968 = mul nsw <4 x i32> %967, %964
  %969 = add nsw <4 x i32> %968, <i32 256, i32 256, i32 256, i32 256>
  %970 = ashr <4 x i32> %969, <i32 9, i32 9, i32 9, i32 9>
  %971 = add nsw <4 x i32> %970, %962
  %972 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 32) to <4 x i16>*), align 16
  %973 = sext <4 x i16> %972 to <4 x i32>
  %974 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 32
  %975 = bitcast i32* %974 to <4 x i32>*
  %976 = load <4 x i32>, <4 x i32>* %975, align 16
  %977 = mul nsw <4 x i32> %976, %973
  %978 = add nsw <4 x i32> %977, <i32 256, i32 256, i32 256, i32 256>
  %979 = ashr <4 x i32> %978, <i32 9, i32 9, i32 9, i32 9>
  %980 = add nsw <4 x i32> %979, %971
  %981 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 36) to <4 x i16>*), align 8
  %982 = sext <4 x i16> %981 to <4 x i32>
  %983 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 36
  %984 = bitcast i32* %983 to <4 x i32>*
  %985 = load <4 x i32>, <4 x i32>* %984, align 16
  %986 = mul nsw <4 x i32> %985, %982
  %987 = add nsw <4 x i32> %986, <i32 256, i32 256, i32 256, i32 256>
  %988 = ashr <4 x i32> %987, <i32 9, i32 9, i32 9, i32 9>
  %989 = add nsw <4 x i32> %988, %980
  %990 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 40) to <4 x i16>*), align 16
  %991 = sext <4 x i16> %990 to <4 x i32>
  %992 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 40
  %993 = bitcast i32* %992 to <4 x i32>*
  %994 = load <4 x i32>, <4 x i32>* %993, align 16
  %995 = mul nsw <4 x i32> %994, %991
  %996 = add nsw <4 x i32> %995, <i32 256, i32 256, i32 256, i32 256>
  %997 = ashr <4 x i32> %996, <i32 9, i32 9, i32 9, i32 9>
  %998 = add nsw <4 x i32> %997, %989
  %999 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 44) to <4 x i16>*), align 8
  %1000 = sext <4 x i16> %999 to <4 x i32>
  %1001 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 44
  %1002 = bitcast i32* %1001 to <4 x i32>*
  %1003 = load <4 x i32>, <4 x i32>* %1002, align 16
  %1004 = mul nsw <4 x i32> %1003, %1000
  %1005 = add nsw <4 x i32> %1004, <i32 256, i32 256, i32 256, i32 256>
  %1006 = ashr <4 x i32> %1005, <i32 9, i32 9, i32 9, i32 9>
  %1007 = add nsw <4 x i32> %1006, %998
  %1008 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 48) to <4 x i16>*), align 16
  %1009 = sext <4 x i16> %1008 to <4 x i32>
  %1010 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 48
  %1011 = bitcast i32* %1010 to <4 x i32>*
  %1012 = load <4 x i32>, <4 x i32>* %1011, align 16
  %1013 = mul nsw <4 x i32> %1012, %1009
  %1014 = add nsw <4 x i32> %1013, <i32 256, i32 256, i32 256, i32 256>
  %1015 = ashr <4 x i32> %1014, <i32 9, i32 9, i32 9, i32 9>
  %1016 = add nsw <4 x i32> %1015, %1007
  %1017 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 52) to <4 x i16>*), align 8
  %1018 = sext <4 x i16> %1017 to <4 x i32>
  %1019 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 52
  %1020 = bitcast i32* %1019 to <4 x i32>*
  %1021 = load <4 x i32>, <4 x i32>* %1020, align 16
  %1022 = mul nsw <4 x i32> %1021, %1018
  %1023 = add nsw <4 x i32> %1022, <i32 256, i32 256, i32 256, i32 256>
  %1024 = ashr <4 x i32> %1023, <i32 9, i32 9, i32 9, i32 9>
  %1025 = add nsw <4 x i32> %1024, %1016
  %1026 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 4, i64 56) to <4 x i16>*), align 16
  %1027 = sext <4 x i16> %1026 to <4 x i32>
  %1028 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 56
  %1029 = bitcast i32* %1028 to <4 x i32>*
  %1030 = load <4 x i32>, <4 x i32>* %1029, align 16
  %1031 = mul nsw <4 x i32> %1030, %1027
  %1032 = add nsw <4 x i32> %1031, <i32 256, i32 256, i32 256, i32 256>
  %1033 = ashr <4 x i32> %1032, <i32 9, i32 9, i32 9, i32 9>
  %1034 = add nsw <4 x i32> %1033, %1025
  %1035 = shufflevector <4 x i32> %1034, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1036 = add <4 x i32> %1034, %1035
  %1037 = shufflevector <4 x i32> %1036, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1038 = add <4 x i32> %1036, %1037
  %1039 = extractelement <4 x i32> %1038, i32 0
  %1040 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 0) to <4 x i16>*), align 8
  %1041 = sext <4 x i16> %1040 to <4 x i32>
  %1042 = bitcast [60 x i32]* %7 to <4 x i32>*
  %1043 = load <4 x i32>, <4 x i32>* %1042, align 16
  %1044 = mul nsw <4 x i32> %1043, %1041
  %1045 = add nsw <4 x i32> %1044, <i32 256, i32 256, i32 256, i32 256>
  %1046 = ashr <4 x i32> %1045, <i32 9, i32 9, i32 9, i32 9>
  %1047 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 4) to <4 x i16>*), align 8
  %1048 = sext <4 x i16> %1047 to <4 x i32>
  %1049 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 4
  %1050 = bitcast i32* %1049 to <4 x i32>*
  %1051 = load <4 x i32>, <4 x i32>* %1050, align 16
  %1052 = mul nsw <4 x i32> %1051, %1048
  %1053 = add nsw <4 x i32> %1052, <i32 256, i32 256, i32 256, i32 256>
  %1054 = ashr <4 x i32> %1053, <i32 9, i32 9, i32 9, i32 9>
  %1055 = add nsw <4 x i32> %1054, %1046
  %1056 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 8) to <4 x i16>*), align 8
  %1057 = sext <4 x i16> %1056 to <4 x i32>
  %1058 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 8
  %1059 = bitcast i32* %1058 to <4 x i32>*
  %1060 = load <4 x i32>, <4 x i32>* %1059, align 16
  %1061 = mul nsw <4 x i32> %1060, %1057
  %1062 = add nsw <4 x i32> %1061, <i32 256, i32 256, i32 256, i32 256>
  %1063 = ashr <4 x i32> %1062, <i32 9, i32 9, i32 9, i32 9>
  %1064 = add nsw <4 x i32> %1063, %1055
  %1065 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 12) to <4 x i16>*), align 8
  %1066 = sext <4 x i16> %1065 to <4 x i32>
  %1067 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 12
  %1068 = bitcast i32* %1067 to <4 x i32>*
  %1069 = load <4 x i32>, <4 x i32>* %1068, align 16
  %1070 = mul nsw <4 x i32> %1069, %1066
  %1071 = add nsw <4 x i32> %1070, <i32 256, i32 256, i32 256, i32 256>
  %1072 = ashr <4 x i32> %1071, <i32 9, i32 9, i32 9, i32 9>
  %1073 = add nsw <4 x i32> %1072, %1064
  %1074 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 16) to <4 x i16>*), align 8
  %1075 = sext <4 x i16> %1074 to <4 x i32>
  %1076 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 16
  %1077 = bitcast i32* %1076 to <4 x i32>*
  %1078 = load <4 x i32>, <4 x i32>* %1077, align 16
  %1079 = mul nsw <4 x i32> %1078, %1075
  %1080 = add nsw <4 x i32> %1079, <i32 256, i32 256, i32 256, i32 256>
  %1081 = ashr <4 x i32> %1080, <i32 9, i32 9, i32 9, i32 9>
  %1082 = add nsw <4 x i32> %1081, %1073
  %1083 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 20) to <4 x i16>*), align 8
  %1084 = sext <4 x i16> %1083 to <4 x i32>
  %1085 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 20
  %1086 = bitcast i32* %1085 to <4 x i32>*
  %1087 = load <4 x i32>, <4 x i32>* %1086, align 16
  %1088 = mul nsw <4 x i32> %1087, %1084
  %1089 = add nsw <4 x i32> %1088, <i32 256, i32 256, i32 256, i32 256>
  %1090 = ashr <4 x i32> %1089, <i32 9, i32 9, i32 9, i32 9>
  %1091 = add nsw <4 x i32> %1090, %1082
  %1092 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 24) to <4 x i16>*), align 8
  %1093 = sext <4 x i16> %1092 to <4 x i32>
  %1094 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 24
  %1095 = bitcast i32* %1094 to <4 x i32>*
  %1096 = load <4 x i32>, <4 x i32>* %1095, align 16
  %1097 = mul nsw <4 x i32> %1096, %1093
  %1098 = add nsw <4 x i32> %1097, <i32 256, i32 256, i32 256, i32 256>
  %1099 = ashr <4 x i32> %1098, <i32 9, i32 9, i32 9, i32 9>
  %1100 = add nsw <4 x i32> %1099, %1091
  %1101 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 28) to <4 x i16>*), align 8
  %1102 = sext <4 x i16> %1101 to <4 x i32>
  %1103 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 28
  %1104 = bitcast i32* %1103 to <4 x i32>*
  %1105 = load <4 x i32>, <4 x i32>* %1104, align 16
  %1106 = mul nsw <4 x i32> %1105, %1102
  %1107 = add nsw <4 x i32> %1106, <i32 256, i32 256, i32 256, i32 256>
  %1108 = ashr <4 x i32> %1107, <i32 9, i32 9, i32 9, i32 9>
  %1109 = add nsw <4 x i32> %1108, %1100
  %1110 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 32) to <4 x i16>*), align 8
  %1111 = sext <4 x i16> %1110 to <4 x i32>
  %1112 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 32
  %1113 = bitcast i32* %1112 to <4 x i32>*
  %1114 = load <4 x i32>, <4 x i32>* %1113, align 16
  %1115 = mul nsw <4 x i32> %1114, %1111
  %1116 = add nsw <4 x i32> %1115, <i32 256, i32 256, i32 256, i32 256>
  %1117 = ashr <4 x i32> %1116, <i32 9, i32 9, i32 9, i32 9>
  %1118 = add nsw <4 x i32> %1117, %1109
  %1119 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 36) to <4 x i16>*), align 8
  %1120 = sext <4 x i16> %1119 to <4 x i32>
  %1121 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 36
  %1122 = bitcast i32* %1121 to <4 x i32>*
  %1123 = load <4 x i32>, <4 x i32>* %1122, align 16
  %1124 = mul nsw <4 x i32> %1123, %1120
  %1125 = add nsw <4 x i32> %1124, <i32 256, i32 256, i32 256, i32 256>
  %1126 = ashr <4 x i32> %1125, <i32 9, i32 9, i32 9, i32 9>
  %1127 = add nsw <4 x i32> %1126, %1118
  %1128 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 40) to <4 x i16>*), align 8
  %1129 = sext <4 x i16> %1128 to <4 x i32>
  %1130 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 40
  %1131 = bitcast i32* %1130 to <4 x i32>*
  %1132 = load <4 x i32>, <4 x i32>* %1131, align 16
  %1133 = mul nsw <4 x i32> %1132, %1129
  %1134 = add nsw <4 x i32> %1133, <i32 256, i32 256, i32 256, i32 256>
  %1135 = ashr <4 x i32> %1134, <i32 9, i32 9, i32 9, i32 9>
  %1136 = add nsw <4 x i32> %1135, %1127
  %1137 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 44) to <4 x i16>*), align 8
  %1138 = sext <4 x i16> %1137 to <4 x i32>
  %1139 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 44
  %1140 = bitcast i32* %1139 to <4 x i32>*
  %1141 = load <4 x i32>, <4 x i32>* %1140, align 16
  %1142 = mul nsw <4 x i32> %1141, %1138
  %1143 = add nsw <4 x i32> %1142, <i32 256, i32 256, i32 256, i32 256>
  %1144 = ashr <4 x i32> %1143, <i32 9, i32 9, i32 9, i32 9>
  %1145 = add nsw <4 x i32> %1144, %1136
  %1146 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 48) to <4 x i16>*), align 8
  %1147 = sext <4 x i16> %1146 to <4 x i32>
  %1148 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 48
  %1149 = bitcast i32* %1148 to <4 x i32>*
  %1150 = load <4 x i32>, <4 x i32>* %1149, align 16
  %1151 = mul nsw <4 x i32> %1150, %1147
  %1152 = add nsw <4 x i32> %1151, <i32 256, i32 256, i32 256, i32 256>
  %1153 = ashr <4 x i32> %1152, <i32 9, i32 9, i32 9, i32 9>
  %1154 = add nsw <4 x i32> %1153, %1145
  %1155 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 52) to <4 x i16>*), align 8
  %1156 = sext <4 x i16> %1155 to <4 x i32>
  %1157 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 52
  %1158 = bitcast i32* %1157 to <4 x i32>*
  %1159 = load <4 x i32>, <4 x i32>* %1158, align 16
  %1160 = mul nsw <4 x i32> %1159, %1156
  %1161 = add nsw <4 x i32> %1160, <i32 256, i32 256, i32 256, i32 256>
  %1162 = ashr <4 x i32> %1161, <i32 9, i32 9, i32 9, i32 9>
  %1163 = add nsw <4 x i32> %1162, %1154
  %1164 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 1, i64 56) to <4 x i16>*), align 8
  %1165 = sext <4 x i16> %1164 to <4 x i32>
  %1166 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 56
  %1167 = bitcast i32* %1166 to <4 x i32>*
  %1168 = load <4 x i32>, <4 x i32>* %1167, align 16
  %1169 = mul nsw <4 x i32> %1168, %1165
  %1170 = add nsw <4 x i32> %1169, <i32 256, i32 256, i32 256, i32 256>
  %1171 = ashr <4 x i32> %1170, <i32 9, i32 9, i32 9, i32 9>
  %1172 = add nsw <4 x i32> %1171, %1163
  %1173 = shufflevector <4 x i32> %1172, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1174 = add <4 x i32> %1172, %1173
  %1175 = shufflevector <4 x i32> %1174, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1176 = add <4 x i32> %1174, %1175
  %1177 = extractelement <4 x i32> %1176, i32 0
  %1178 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 0) to <4 x i16>*), align 8
  %1179 = sext <4 x i16> %1178 to <4 x i32>
  %1180 = bitcast [60 x i32]* %7 to <4 x i32>*
  %1181 = load <4 x i32>, <4 x i32>* %1180, align 16
  %1182 = mul nsw <4 x i32> %1181, %1179
  %1183 = add nsw <4 x i32> %1182, <i32 256, i32 256, i32 256, i32 256>
  %1184 = ashr <4 x i32> %1183, <i32 9, i32 9, i32 9, i32 9>
  %1185 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 4) to <4 x i16>*), align 8
  %1186 = sext <4 x i16> %1185 to <4 x i32>
  %1187 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 4
  %1188 = bitcast i32* %1187 to <4 x i32>*
  %1189 = load <4 x i32>, <4 x i32>* %1188, align 16
  %1190 = mul nsw <4 x i32> %1189, %1186
  %1191 = add nsw <4 x i32> %1190, <i32 256, i32 256, i32 256, i32 256>
  %1192 = ashr <4 x i32> %1191, <i32 9, i32 9, i32 9, i32 9>
  %1193 = add nsw <4 x i32> %1192, %1184
  %1194 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 8) to <4 x i16>*), align 8
  %1195 = sext <4 x i16> %1194 to <4 x i32>
  %1196 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 8
  %1197 = bitcast i32* %1196 to <4 x i32>*
  %1198 = load <4 x i32>, <4 x i32>* %1197, align 16
  %1199 = mul nsw <4 x i32> %1198, %1195
  %1200 = add nsw <4 x i32> %1199, <i32 256, i32 256, i32 256, i32 256>
  %1201 = ashr <4 x i32> %1200, <i32 9, i32 9, i32 9, i32 9>
  %1202 = add nsw <4 x i32> %1201, %1193
  %1203 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 12) to <4 x i16>*), align 8
  %1204 = sext <4 x i16> %1203 to <4 x i32>
  %1205 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 12
  %1206 = bitcast i32* %1205 to <4 x i32>*
  %1207 = load <4 x i32>, <4 x i32>* %1206, align 16
  %1208 = mul nsw <4 x i32> %1207, %1204
  %1209 = add nsw <4 x i32> %1208, <i32 256, i32 256, i32 256, i32 256>
  %1210 = ashr <4 x i32> %1209, <i32 9, i32 9, i32 9, i32 9>
  %1211 = add nsw <4 x i32> %1210, %1202
  %1212 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 16) to <4 x i16>*), align 8
  %1213 = sext <4 x i16> %1212 to <4 x i32>
  %1214 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 16
  %1215 = bitcast i32* %1214 to <4 x i32>*
  %1216 = load <4 x i32>, <4 x i32>* %1215, align 16
  %1217 = mul nsw <4 x i32> %1216, %1213
  %1218 = add nsw <4 x i32> %1217, <i32 256, i32 256, i32 256, i32 256>
  %1219 = ashr <4 x i32> %1218, <i32 9, i32 9, i32 9, i32 9>
  %1220 = add nsw <4 x i32> %1219, %1211
  %1221 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 20) to <4 x i16>*), align 8
  %1222 = sext <4 x i16> %1221 to <4 x i32>
  %1223 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 20
  %1224 = bitcast i32* %1223 to <4 x i32>*
  %1225 = load <4 x i32>, <4 x i32>* %1224, align 16
  %1226 = mul nsw <4 x i32> %1225, %1222
  %1227 = add nsw <4 x i32> %1226, <i32 256, i32 256, i32 256, i32 256>
  %1228 = ashr <4 x i32> %1227, <i32 9, i32 9, i32 9, i32 9>
  %1229 = add nsw <4 x i32> %1228, %1220
  %1230 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 24) to <4 x i16>*), align 8
  %1231 = sext <4 x i16> %1230 to <4 x i32>
  %1232 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 24
  %1233 = bitcast i32* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1235 = mul nsw <4 x i32> %1234, %1231
  %1236 = add nsw <4 x i32> %1235, <i32 256, i32 256, i32 256, i32 256>
  %1237 = ashr <4 x i32> %1236, <i32 9, i32 9, i32 9, i32 9>
  %1238 = add nsw <4 x i32> %1237, %1229
  %1239 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 28) to <4 x i16>*), align 8
  %1240 = sext <4 x i16> %1239 to <4 x i32>
  %1241 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 28
  %1242 = bitcast i32* %1241 to <4 x i32>*
  %1243 = load <4 x i32>, <4 x i32>* %1242, align 16
  %1244 = mul nsw <4 x i32> %1243, %1240
  %1245 = add nsw <4 x i32> %1244, <i32 256, i32 256, i32 256, i32 256>
  %1246 = ashr <4 x i32> %1245, <i32 9, i32 9, i32 9, i32 9>
  %1247 = add nsw <4 x i32> %1246, %1238
  %1248 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 32) to <4 x i16>*), align 8
  %1249 = sext <4 x i16> %1248 to <4 x i32>
  %1250 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 32
  %1251 = bitcast i32* %1250 to <4 x i32>*
  %1252 = load <4 x i32>, <4 x i32>* %1251, align 16
  %1253 = mul nsw <4 x i32> %1252, %1249
  %1254 = add nsw <4 x i32> %1253, <i32 256, i32 256, i32 256, i32 256>
  %1255 = ashr <4 x i32> %1254, <i32 9, i32 9, i32 9, i32 9>
  %1256 = add nsw <4 x i32> %1255, %1247
  %1257 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 36) to <4 x i16>*), align 8
  %1258 = sext <4 x i16> %1257 to <4 x i32>
  %1259 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 36
  %1260 = bitcast i32* %1259 to <4 x i32>*
  %1261 = load <4 x i32>, <4 x i32>* %1260, align 16
  %1262 = mul nsw <4 x i32> %1261, %1258
  %1263 = add nsw <4 x i32> %1262, <i32 256, i32 256, i32 256, i32 256>
  %1264 = ashr <4 x i32> %1263, <i32 9, i32 9, i32 9, i32 9>
  %1265 = add nsw <4 x i32> %1264, %1256
  %1266 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 40) to <4 x i16>*), align 8
  %1267 = sext <4 x i16> %1266 to <4 x i32>
  %1268 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 40
  %1269 = bitcast i32* %1268 to <4 x i32>*
  %1270 = load <4 x i32>, <4 x i32>* %1269, align 16
  %1271 = mul nsw <4 x i32> %1270, %1267
  %1272 = add nsw <4 x i32> %1271, <i32 256, i32 256, i32 256, i32 256>
  %1273 = ashr <4 x i32> %1272, <i32 9, i32 9, i32 9, i32 9>
  %1274 = add nsw <4 x i32> %1273, %1265
  %1275 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 44) to <4 x i16>*), align 8
  %1276 = sext <4 x i16> %1275 to <4 x i32>
  %1277 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 44
  %1278 = bitcast i32* %1277 to <4 x i32>*
  %1279 = load <4 x i32>, <4 x i32>* %1278, align 16
  %1280 = mul nsw <4 x i32> %1279, %1276
  %1281 = add nsw <4 x i32> %1280, <i32 256, i32 256, i32 256, i32 256>
  %1282 = ashr <4 x i32> %1281, <i32 9, i32 9, i32 9, i32 9>
  %1283 = add nsw <4 x i32> %1282, %1274
  %1284 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 48) to <4 x i16>*), align 8
  %1285 = sext <4 x i16> %1284 to <4 x i32>
  %1286 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 48
  %1287 = bitcast i32* %1286 to <4 x i32>*
  %1288 = load <4 x i32>, <4 x i32>* %1287, align 16
  %1289 = mul nsw <4 x i32> %1288, %1285
  %1290 = add nsw <4 x i32> %1289, <i32 256, i32 256, i32 256, i32 256>
  %1291 = ashr <4 x i32> %1290, <i32 9, i32 9, i32 9, i32 9>
  %1292 = add nsw <4 x i32> %1291, %1283
  %1293 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 52) to <4 x i16>*), align 8
  %1294 = sext <4 x i16> %1293 to <4 x i32>
  %1295 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 52
  %1296 = bitcast i32* %1295 to <4 x i32>*
  %1297 = load <4 x i32>, <4 x i32>* %1296, align 16
  %1298 = mul nsw <4 x i32> %1297, %1294
  %1299 = add nsw <4 x i32> %1298, <i32 256, i32 256, i32 256, i32 256>
  %1300 = ashr <4 x i32> %1299, <i32 9, i32 9, i32 9, i32 9>
  %1301 = add nsw <4 x i32> %1300, %1292
  %1302 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 3, i64 56) to <4 x i16>*), align 8
  %1303 = sext <4 x i16> %1302 to <4 x i32>
  %1304 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 56
  %1305 = bitcast i32* %1304 to <4 x i32>*
  %1306 = load <4 x i32>, <4 x i32>* %1305, align 16
  %1307 = mul nsw <4 x i32> %1306, %1303
  %1308 = add nsw <4 x i32> %1307, <i32 256, i32 256, i32 256, i32 256>
  %1309 = ashr <4 x i32> %1308, <i32 9, i32 9, i32 9, i32 9>
  %1310 = add nsw <4 x i32> %1309, %1301
  %1311 = shufflevector <4 x i32> %1310, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1312 = add <4 x i32> %1310, %1311
  %1313 = shufflevector <4 x i32> %1312, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1314 = add <4 x i32> %1312, %1313
  %1315 = extractelement <4 x i32> %1314, i32 0
  %1316 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 0) to <4 x i16>*), align 8
  %1317 = sext <4 x i16> %1316 to <4 x i32>
  %1318 = bitcast [60 x i32]* %7 to <4 x i32>*
  %1319 = load <4 x i32>, <4 x i32>* %1318, align 16
  %1320 = mul nsw <4 x i32> %1319, %1317
  %1321 = add nsw <4 x i32> %1320, <i32 256, i32 256, i32 256, i32 256>
  %1322 = ashr <4 x i32> %1321, <i32 9, i32 9, i32 9, i32 9>
  %1323 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 4) to <4 x i16>*), align 8
  %1324 = sext <4 x i16> %1323 to <4 x i32>
  %1325 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 4
  %1326 = bitcast i32* %1325 to <4 x i32>*
  %1327 = load <4 x i32>, <4 x i32>* %1326, align 16
  %1328 = mul nsw <4 x i32> %1327, %1324
  %1329 = add nsw <4 x i32> %1328, <i32 256, i32 256, i32 256, i32 256>
  %1330 = ashr <4 x i32> %1329, <i32 9, i32 9, i32 9, i32 9>
  %1331 = add nsw <4 x i32> %1330, %1322
  %1332 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 8) to <4 x i16>*), align 8
  %1333 = sext <4 x i16> %1332 to <4 x i32>
  %1334 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 8
  %1335 = bitcast i32* %1334 to <4 x i32>*
  %1336 = load <4 x i32>, <4 x i32>* %1335, align 16
  %1337 = mul nsw <4 x i32> %1336, %1333
  %1338 = add nsw <4 x i32> %1337, <i32 256, i32 256, i32 256, i32 256>
  %1339 = ashr <4 x i32> %1338, <i32 9, i32 9, i32 9, i32 9>
  %1340 = add nsw <4 x i32> %1339, %1331
  %1341 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 12) to <4 x i16>*), align 8
  %1342 = sext <4 x i16> %1341 to <4 x i32>
  %1343 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 12
  %1344 = bitcast i32* %1343 to <4 x i32>*
  %1345 = load <4 x i32>, <4 x i32>* %1344, align 16
  %1346 = mul nsw <4 x i32> %1345, %1342
  %1347 = add nsw <4 x i32> %1346, <i32 256, i32 256, i32 256, i32 256>
  %1348 = ashr <4 x i32> %1347, <i32 9, i32 9, i32 9, i32 9>
  %1349 = add nsw <4 x i32> %1348, %1340
  %1350 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 16) to <4 x i16>*), align 8
  %1351 = sext <4 x i16> %1350 to <4 x i32>
  %1352 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 16
  %1353 = bitcast i32* %1352 to <4 x i32>*
  %1354 = load <4 x i32>, <4 x i32>* %1353, align 16
  %1355 = mul nsw <4 x i32> %1354, %1351
  %1356 = add nsw <4 x i32> %1355, <i32 256, i32 256, i32 256, i32 256>
  %1357 = ashr <4 x i32> %1356, <i32 9, i32 9, i32 9, i32 9>
  %1358 = add nsw <4 x i32> %1357, %1349
  %1359 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 20) to <4 x i16>*), align 8
  %1360 = sext <4 x i16> %1359 to <4 x i32>
  %1361 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 20
  %1362 = bitcast i32* %1361 to <4 x i32>*
  %1363 = load <4 x i32>, <4 x i32>* %1362, align 16
  %1364 = mul nsw <4 x i32> %1363, %1360
  %1365 = add nsw <4 x i32> %1364, <i32 256, i32 256, i32 256, i32 256>
  %1366 = ashr <4 x i32> %1365, <i32 9, i32 9, i32 9, i32 9>
  %1367 = add nsw <4 x i32> %1366, %1358
  %1368 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 24) to <4 x i16>*), align 8
  %1369 = sext <4 x i16> %1368 to <4 x i32>
  %1370 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 24
  %1371 = bitcast i32* %1370 to <4 x i32>*
  %1372 = load <4 x i32>, <4 x i32>* %1371, align 16
  %1373 = mul nsw <4 x i32> %1372, %1369
  %1374 = add nsw <4 x i32> %1373, <i32 256, i32 256, i32 256, i32 256>
  %1375 = ashr <4 x i32> %1374, <i32 9, i32 9, i32 9, i32 9>
  %1376 = add nsw <4 x i32> %1375, %1367
  %1377 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 28) to <4 x i16>*), align 8
  %1378 = sext <4 x i16> %1377 to <4 x i32>
  %1379 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 28
  %1380 = bitcast i32* %1379 to <4 x i32>*
  %1381 = load <4 x i32>, <4 x i32>* %1380, align 16
  %1382 = mul nsw <4 x i32> %1381, %1378
  %1383 = add nsw <4 x i32> %1382, <i32 256, i32 256, i32 256, i32 256>
  %1384 = ashr <4 x i32> %1383, <i32 9, i32 9, i32 9, i32 9>
  %1385 = add nsw <4 x i32> %1384, %1376
  %1386 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 32) to <4 x i16>*), align 8
  %1387 = sext <4 x i16> %1386 to <4 x i32>
  %1388 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 32
  %1389 = bitcast i32* %1388 to <4 x i32>*
  %1390 = load <4 x i32>, <4 x i32>* %1389, align 16
  %1391 = mul nsw <4 x i32> %1390, %1387
  %1392 = add nsw <4 x i32> %1391, <i32 256, i32 256, i32 256, i32 256>
  %1393 = ashr <4 x i32> %1392, <i32 9, i32 9, i32 9, i32 9>
  %1394 = add nsw <4 x i32> %1393, %1385
  %1395 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 36) to <4 x i16>*), align 8
  %1396 = sext <4 x i16> %1395 to <4 x i32>
  %1397 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 36
  %1398 = bitcast i32* %1397 to <4 x i32>*
  %1399 = load <4 x i32>, <4 x i32>* %1398, align 16
  %1400 = mul nsw <4 x i32> %1399, %1396
  %1401 = add nsw <4 x i32> %1400, <i32 256, i32 256, i32 256, i32 256>
  %1402 = ashr <4 x i32> %1401, <i32 9, i32 9, i32 9, i32 9>
  %1403 = add nsw <4 x i32> %1402, %1394
  %1404 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 40) to <4 x i16>*), align 8
  %1405 = sext <4 x i16> %1404 to <4 x i32>
  %1406 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 40
  %1407 = bitcast i32* %1406 to <4 x i32>*
  %1408 = load <4 x i32>, <4 x i32>* %1407, align 16
  %1409 = mul nsw <4 x i32> %1408, %1405
  %1410 = add nsw <4 x i32> %1409, <i32 256, i32 256, i32 256, i32 256>
  %1411 = ashr <4 x i32> %1410, <i32 9, i32 9, i32 9, i32 9>
  %1412 = add nsw <4 x i32> %1411, %1403
  %1413 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 44) to <4 x i16>*), align 8
  %1414 = sext <4 x i16> %1413 to <4 x i32>
  %1415 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 44
  %1416 = bitcast i32* %1415 to <4 x i32>*
  %1417 = load <4 x i32>, <4 x i32>* %1416, align 16
  %1418 = mul nsw <4 x i32> %1417, %1414
  %1419 = add nsw <4 x i32> %1418, <i32 256, i32 256, i32 256, i32 256>
  %1420 = ashr <4 x i32> %1419, <i32 9, i32 9, i32 9, i32 9>
  %1421 = add nsw <4 x i32> %1420, %1412
  %1422 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 48) to <4 x i16>*), align 8
  %1423 = sext <4 x i16> %1422 to <4 x i32>
  %1424 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 48
  %1425 = bitcast i32* %1424 to <4 x i32>*
  %1426 = load <4 x i32>, <4 x i32>* %1425, align 16
  %1427 = mul nsw <4 x i32> %1426, %1423
  %1428 = add nsw <4 x i32> %1427, <i32 256, i32 256, i32 256, i32 256>
  %1429 = ashr <4 x i32> %1428, <i32 9, i32 9, i32 9, i32 9>
  %1430 = add nsw <4 x i32> %1429, %1421
  %1431 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 52) to <4 x i16>*), align 8
  %1432 = sext <4 x i16> %1431 to <4 x i32>
  %1433 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 52
  %1434 = bitcast i32* %1433 to <4 x i32>*
  %1435 = load <4 x i32>, <4 x i32>* %1434, align 16
  %1436 = mul nsw <4 x i32> %1435, %1432
  %1437 = add nsw <4 x i32> %1436, <i32 256, i32 256, i32 256, i32 256>
  %1438 = ashr <4 x i32> %1437, <i32 9, i32 9, i32 9, i32 9>
  %1439 = add nsw <4 x i32> %1438, %1430
  %1440 = load <4 x i16>, <4 x i16>* bitcast (i16* getelementptr inbounds ([6 x [60 x i16]], [6 x [60 x i16]]* @WebRtcIsac_kCos, i64 0, i64 5, i64 56) to <4 x i16>*), align 8
  %1441 = sext <4 x i16> %1440 to <4 x i32>
  %1442 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 56
  %1443 = bitcast i32* %1442 to <4 x i32>*
  %1444 = load <4 x i32>, <4 x i32>* %1443, align 16
  %1445 = mul nsw <4 x i32> %1444, %1441
  %1446 = add nsw <4 x i32> %1445, <i32 256, i32 256, i32 256, i32 256>
  %1447 = ashr <4 x i32> %1446, <i32 9, i32 9, i32 9, i32 9>
  %1448 = add nsw <4 x i32> %1447, %1439
  %1449 = shufflevector <4 x i32> %1448, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1450 = add <4 x i32> %1448, %1449
  %1451 = shufflevector <4 x i32> %1450, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1452 = add <4 x i32> %1450, %1451
  %1453 = extractelement <4 x i32> %1452, i32 0
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %538) #7
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %537) #7
  %1454 = icmp eq i32 %625, 0
  br i1 %1454, label %1470, label %1455

1455:                                             ; preds = %561
  %1456 = ashr i32 %625, 31
  %1457 = xor i32 %1456, %625
  %1458 = tail call i32 @llvm.ctlz.i32(i32 %1457, i1 false) #7, !range !2
  %1459 = add nsw i32 %1458, -1
  %1460 = add nsw i32 %1458, -19
  %1461 = icmp sgt i32 %1460, 0
  br i1 %1461, label %1462, label %1470

1462:                                             ; preds = %1455
  %1463 = shl i32 %625, %1460
  store i32 %1463, i32* %24, align 16
  %1464 = shl i32 %763, %1460
  store i32 %1464, i32* %25, align 4
  %1465 = shl i32 %1177, %1460
  store i32 %1465, i32* %26, align 8
  %1466 = shl i32 %901, %1460
  store i32 %1466, i32* %27, align 4
  %1467 = shl i32 %1315, %1460
  store i32 %1467, i32* %28, align 16
  %1468 = shl i32 %1039, %1460
  store i32 %1468, i32* %29, align 4
  %1469 = shl i32 %1453, %1460
  br label %1481

1470:                                             ; preds = %561, %1455
  %1471 = phi i32 [ %1460, %1455 ], [ -18, %561 ]
  %1472 = phi i32 [ %1459, %1455 ], [ 0, %561 ]
  %1473 = sub nsw i32 18, %1472
  %1474 = ashr i32 %625, %1473
  store i32 %1474, i32* %24, align 16
  %1475 = ashr i32 %763, %1473
  store i32 %1475, i32* %25, align 4
  %1476 = ashr i32 %1177, %1473
  store i32 %1476, i32* %26, align 8
  %1477 = ashr i32 %901, %1473
  store i32 %1477, i32* %27, align 4
  %1478 = ashr i32 %1315, %1473
  store i32 %1478, i32* %28, align 16
  %1479 = ashr i32 %1039, %1473
  store i32 %1479, i32* %29, align 4
  %1480 = ashr i32 %1453, %1473
  br label %1481

1481:                                             ; preds = %1470, %1462
  %1482 = phi i1 [ true, %1462 ], [ false, %1470 ]
  %1483 = phi i32 [ %1460, %1462 ], [ %1471, %1470 ]
  %1484 = phi i32 [ %1459, %1462 ], [ %1472, %1470 ]
  %1485 = phi i32 [ %1469, %1462 ], [ %1480, %1470 ]
  store i32 %1485, i32* %30, align 8
  call void @WebRtcSpl_AutoCorrToReflCoef(i32* nonnull %24, i32 6, i16* nonnull %33) #7
  %1486 = bitcast [6 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1486) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1486, i8 -86, i64 24, i1 false) #7
  br label %1487

1487:                                             ; preds = %1534, %1481
  %1488 = phi i64 [ 0, %1481 ], [ %1541, %1534 ]
  %1489 = getelementptr inbounds [6 x i16], [6 x i16]* @WebRtcIsac_kQArRcInitIndex, i64 0, i64 %1488
  %1490 = load i16, i16* %1489, align 2
  %1491 = zext i16 %1490 to i32
  %1492 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 %1488
  store i32 %1491, i32* %1492, align 4
  %1493 = getelementptr inbounds [6 x i16], [6 x i16]* %19, i64 0, i64 %1488
  %1494 = load i16, i16* %1493, align 2
  %1495 = zext i16 %1490 to i64
  %1496 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %1495
  %1497 = load i16, i16* %1496, align 2
  %1498 = icmp sgt i16 %1494, %1497
  br i1 %1498, label %1501, label %1499

1499:                                             ; preds = %1487
  %1500 = icmp eq i16 %1490, 0
  br i1 %1500, label %1534, label %1520

1501:                                             ; preds = %1487
  %1502 = add nuw nsw i32 %1491, 1
  %1503 = icmp ult i32 %1502, 12
  br i1 %1503, label %1504, label %1534

1504:                                             ; preds = %1501
  %1505 = zext i32 %1502 to i64
  %1506 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %1505
  %1507 = load i16, i16* %1506, align 2
  %1508 = icmp sgt i16 %1494, %1507
  br i1 %1508, label %1513, label %1534

1509:                                             ; preds = %1513
  %1510 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %1515
  %1511 = load i16, i16* %1510, align 2
  %1512 = icmp sgt i16 %1494, %1511
  br i1 %1512, label %1513, label %1526

1513:                                             ; preds = %1504, %1509
  %1514 = phi i64 [ %1515, %1509 ], [ %1505, %1504 ]
  %1515 = add nuw nsw i64 %1514, 1
  %1516 = trunc i64 %1515 to i32
  %1517 = icmp eq i32 %1516, 12
  br i1 %1517, label %1528, label %1509

1518:                                             ; preds = %1520
  %1519 = icmp sgt i64 %1522, 0
  br i1 %1519, label %1520, label %1530

1520:                                             ; preds = %1499, %1518
  %1521 = phi i64 [ %1522, %1518 ], [ %1495, %1499 ]
  %1522 = add nsw i64 %1521, -1
  %1523 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %1522
  %1524 = load i16, i16* %1523, align 2
  %1525 = icmp slt i16 %1494, %1524
  br i1 %1525, label %1518, label %1532

1526:                                             ; preds = %1509
  %1527 = trunc i64 %1514 to i32
  store i32 %1527, i32* %1492, align 4
  br label %1534

1528:                                             ; preds = %1513
  %1529 = trunc i64 %1514 to i32
  store i32 %1529, i32* %1492, align 4
  br label %1534

1530:                                             ; preds = %1518
  %1531 = trunc i64 %1522 to i32
  store i32 %1531, i32* %1492, align 4
  br label %1534

1532:                                             ; preds = %1520
  %1533 = trunc i64 %1522 to i32
  store i32 %1533, i32* %1492, align 4
  br label %1534

1534:                                             ; preds = %1499, %1530, %1532, %1504, %1526, %1528, %1501
  %1535 = phi i32 [ %1491, %1501 ], [ %1529, %1528 ], [ %1527, %1526 ], [ %1491, %1504 ], [ %1533, %1532 ], [ %1531, %1530 ], [ 0, %1499 ]
  %1536 = getelementptr inbounds [6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 %1488
  %1537 = load i16*, i16** %1536, align 8
  %1538 = sext i32 %1535 to i64
  %1539 = getelementptr inbounds i16, i16* %1537, i64 %1538
  %1540 = load i16, i16* %1539, align 2
  store i16 %1540, i16* %1493, align 2
  %1541 = add nuw nsw i64 %1488, 1
  %1542 = icmp eq i64 %1541, 6
  br i1 %1542, label %1543, label %1487

1543:                                             ; preds = %1534
  %1544 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 0
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %4, i32* nonnull %1544, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcCdfPtr, i64 0, i64 0), i32 6) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1486) #7
  call void @WebRtcSpl_ReflCoefToLpc(i16* nonnull %33, i32 6, i16* nonnull %36) #7
  %1545 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 0
  %1546 = load i16, i16* %1545, align 2
  %1547 = sext i16 %1546 to i32
  %1548 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 1
  %1549 = load i16, i16* %1548, align 2
  %1550 = sext i16 %1549 to i32
  %1551 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 2
  %1552 = load i16, i16* %1551, align 2
  %1553 = sext i16 %1552 to i32
  %1554 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 3
  %1555 = load i16, i16* %1554, align 2
  %1556 = sext i16 %1555 to i32
  %1557 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 4
  %1558 = load i16, i16* %1557, align 2
  %1559 = sext i16 %1558 to i32
  %1560 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 5
  %1561 = load i16, i16* %1560, align 2
  %1562 = sext i16 %1561 to i32
  %1563 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 6
  %1564 = load i16, i16* %1563, align 2
  %1565 = sext i16 %1564 to i32
  br label %1570

1566:                                             ; preds = %1649, %1638, %1588
  %1567 = phi i32 [ %1589, %1588 ], [ %1644, %1638 ], [ %1664, %1649 ]
  %1568 = add nuw nsw i64 %1572, 1
  %1569 = icmp eq i64 %1590, 7
  br i1 %1569, label %1667, label %1570

1570:                                             ; preds = %1566, %1543
  %1571 = phi i64 [ 0, %1543 ], [ %1590, %1566 ]
  %1572 = phi i64 [ 1, %1543 ], [ %1568, %1566 ]
  %1573 = phi i32 [ 0, %1543 ], [ %1567, %1566 ]
  %1574 = sub nsw i64 6, %1571
  %1575 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 %1571
  %1576 = load i16, i16* %1575, align 2
  %1577 = sext i16 %1576 to i32
  %1578 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1571
  %1579 = load i32, i32* %1578, align 4
  %1580 = mul nsw i32 %1579, %1547
  %1581 = add nsw i32 %1580, 256
  %1582 = ashr i32 %1581, 9
  %1583 = mul nsw i32 %1582, %1577
  %1584 = add nsw i32 %1583, 4
  %1585 = ashr i32 %1584, 3
  %1586 = add nsw i32 %1585, %1573
  %1587 = icmp eq i64 %1572, 1
  br i1 %1587, label %1588, label %1800

1588:                                             ; preds = %1860, %1848, %1836, %1824, %1812, %1800, %1570
  %1589 = phi i32 [ %1586, %1570 ], [ %1810, %1800 ], [ %1822, %1812 ], [ %1834, %1824 ], [ %1846, %1836 ], [ %1858, %1848 ], [ %1870, %1860 ]
  %1590 = add nuw nsw i64 %1571, 1
  %1591 = icmp ult i64 %1590, 7
  br i1 %1591, label %1592, label %1566

1592:                                             ; preds = %1588
  %1593 = icmp ult i64 %1574, 8
  br i1 %1593, label %1646, label %1594

1594:                                             ; preds = %1592
  %1595 = and i64 %1574, -8
  %1596 = add i64 %1572, %1595
  %1597 = insertelement <4 x i32> undef, i32 %1577, i32 0
  %1598 = shufflevector <4 x i32> %1597, <4 x i32> undef, <4 x i32> zeroinitializer
  %1599 = insertelement <4 x i32> undef, i32 %1577, i32 0
  %1600 = shufflevector <4 x i32> %1599, <4 x i32> undef, <4 x i32> zeroinitializer
  %1601 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1589, i32 0
  br label %1602

1602:                                             ; preds = %1602, %1594
  %1603 = phi i64 [ 0, %1594 ], [ %1636, %1602 ]
  %1604 = phi <4 x i32> [ %1601, %1594 ], [ %1634, %1602 ]
  %1605 = phi <4 x i32> [ zeroinitializer, %1594 ], [ %1635, %1602 ]
  %1606 = add i64 %1572, %1603
  %1607 = sub nuw nsw i64 %1606, %1571
  %1608 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1607
  %1609 = bitcast i32* %1608 to <4 x i32>*
  %1610 = load <4 x i32>, <4 x i32>* %1609, align 4
  %1611 = getelementptr inbounds i32, i32* %1608, i64 4
  %1612 = bitcast i32* %1611 to <4 x i32>*
  %1613 = load <4 x i32>, <4 x i32>* %1612, align 4
  %1614 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 %1606
  %1615 = bitcast i16* %1614 to <4 x i16>*
  %1616 = load <4 x i16>, <4 x i16>* %1615, align 2
  %1617 = getelementptr inbounds i16, i16* %1614, i64 4
  %1618 = bitcast i16* %1617 to <4 x i16>*
  %1619 = load <4 x i16>, <4 x i16>* %1618, align 2
  %1620 = sext <4 x i16> %1616 to <4 x i32>
  %1621 = sext <4 x i16> %1619 to <4 x i32>
  %1622 = mul nsw <4 x i32> %1610, %1620
  %1623 = mul nsw <4 x i32> %1613, %1621
  %1624 = add nsw <4 x i32> %1622, <i32 256, i32 256, i32 256, i32 256>
  %1625 = add nsw <4 x i32> %1623, <i32 256, i32 256, i32 256, i32 256>
  %1626 = ashr <4 x i32> %1624, <i32 9, i32 9, i32 9, i32 9>
  %1627 = ashr <4 x i32> %1625, <i32 9, i32 9, i32 9, i32 9>
  %1628 = mul nsw <4 x i32> %1626, %1598
  %1629 = mul nsw <4 x i32> %1627, %1600
  %1630 = add nsw <4 x i32> %1628, <i32 4, i32 4, i32 4, i32 4>
  %1631 = add nsw <4 x i32> %1629, <i32 4, i32 4, i32 4, i32 4>
  %1632 = ashr <4 x i32> %1630, <i32 3, i32 3, i32 3, i32 3>
  %1633 = ashr <4 x i32> %1631, <i32 3, i32 3, i32 3, i32 3>
  %1634 = add nsw <4 x i32> %1632, %1604
  %1635 = add nsw <4 x i32> %1633, %1605
  %1636 = add i64 %1603, 8
  %1637 = icmp eq i64 %1636, %1595
  br i1 %1637, label %1638, label %1602, !llvm.loop !40

1638:                                             ; preds = %1602
  %1639 = add <4 x i32> %1635, %1634
  %1640 = shufflevector <4 x i32> %1639, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1641 = add <4 x i32> %1639, %1640
  %1642 = shufflevector <4 x i32> %1641, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1643 = add <4 x i32> %1641, %1642
  %1644 = extractelement <4 x i32> %1643, i32 0
  %1645 = icmp eq i64 %1574, %1595
  br i1 %1645, label %1566, label %1646

1646:                                             ; preds = %1638, %1592
  %1647 = phi i64 [ %1572, %1592 ], [ %1596, %1638 ]
  %1648 = phi i32 [ %1589, %1592 ], [ %1644, %1638 ]
  br label %1649

1649:                                             ; preds = %1646, %1649
  %1650 = phi i64 [ %1665, %1649 ], [ %1647, %1646 ]
  %1651 = phi i32 [ %1664, %1649 ], [ %1648, %1646 ]
  %1652 = sub nuw nsw i64 %1650, %1571
  %1653 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1652
  %1654 = load i32, i32* %1653, align 4
  %1655 = getelementptr inbounds [7 x i16], [7 x i16]* %20, i64 0, i64 %1650
  %1656 = load i16, i16* %1655, align 2
  %1657 = sext i16 %1656 to i32
  %1658 = mul nsw i32 %1654, %1657
  %1659 = add nsw i32 %1658, 256
  %1660 = ashr i32 %1659, 9
  %1661 = mul nsw i32 %1660, %1577
  %1662 = add nsw i32 %1661, 4
  %1663 = ashr i32 %1662, 3
  %1664 = add nsw i32 %1663, %1651
  %1665 = add nuw nsw i64 %1650, 1
  %1666 = icmp eq i64 %1665, 7
  br i1 %1666, label %1566, label %1649, !llvm.loop !41

1667:                                             ; preds = %1566
  %1668 = lshr i32 %1567, %1483
  %1669 = sub nsw i32 18, %1484
  %1670 = shl i32 %1567, %1669
  %1671 = select i1 %1482, i32 %1668, i32 %1670
  %1672 = icmp ult i32 %1671, 2147483647
  %1673 = select i1 %1672, i32 %1671, i32 2147483647
  %1674 = call i32 @WebRtcSpl_DivResultInQ31(i32 120, i32 %1673) #7
  %1675 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1675) #7
  %1676 = load i16, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQGainInitIndex, i64 0, i64 0), align 2
  %1677 = zext i16 %1676 to i32
  store i32 %1677, i32* %9, align 4
  %1678 = zext i16 %1676 to i64
  %1679 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %1678
  %1680 = load i32, i32* %1679, align 4
  %1681 = icmp sgt i32 %1674, %1680
  br i1 %1681, label %1682, label %1696

1682:                                             ; preds = %1667
  %1683 = add nuw nsw i32 %1677, 1
  %1684 = zext i32 %1683 to i64
  %1685 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %1684
  %1686 = load i32, i32* %1685, align 4
  %1687 = icmp sgt i32 %1674, %1686
  br i1 %1687, label %1688, label %1706

1688:                                             ; preds = %1682
  %1689 = add nuw nsw i64 %1678, 1
  br label %1690

1690:                                             ; preds = %1690, %1688
  %1691 = phi i64 [ %1689, %1688 ], [ %1692, %1690 ]
  %1692 = add i64 %1691, 1
  %1693 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %1692
  %1694 = load i32, i32* %1693, align 4
  %1695 = icmp sgt i32 %1674, %1694
  br i1 %1695, label %1690, label %1702

1696:                                             ; preds = %1667, %1696
  %1697 = phi i64 [ %1698, %1696 ], [ %1678, %1667 ]
  %1698 = add nsw i64 %1697, -1
  %1699 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %1698
  %1700 = load i32, i32* %1699, align 4
  %1701 = icmp slt i32 %1674, %1700
  br i1 %1701, label %1696, label %1704

1702:                                             ; preds = %1690
  %1703 = trunc i64 %1691 to i32
  store i32 %1703, i32* %9, align 4
  br label %1706

1704:                                             ; preds = %1696
  %1705 = trunc i64 %1698 to i32
  store i32 %1705, i32* %9, align 4
  br label %1706

1706:                                             ; preds = %1682, %1702, %1704
  %1707 = phi i32 [ %1677, %1682 ], [ %1703, %1702 ], [ %1705, %1704 ]
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds [18 x i32], [18 x i32]* @WebRtcIsac_kQGain2Levels, i64 0, i64 %1708
  %1710 = load i32, i32* %1709, align 4
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %4, i32* nonnull %9, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQGainCdf_ptr, i64 0, i64 0), i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1675) #7
  %1711 = getelementptr inbounds [120 x i32], [120 x i32]* %16, i64 0, i64 0
  call fastcc void @FindInvArSpec(i16* nonnull %36, i32 %1710, i32* nonnull %1711)
  %1712 = load i32, i32* %1711, align 16
  %1713 = call i32 @llvm.ctlz.i32(i32 %1712, i1 false) #7, !range !2
  %1714 = trunc i32 %1713 to i16
  %1715 = sub nsw i16 32, %1714
  %1716 = ashr i16 %1715, 1
  %1717 = sext i16 %1716 to i32
  %1718 = shl i32 1, %1717
  br label %1719

1719:                                             ; preds = %1745, %1706
  %1720 = phi i32 [ %1712, %1706 ], [ %1747, %1745 ]
  %1721 = phi i64 [ 0, %1706 ], [ %1743, %1745 ]
  %1722 = phi i32 [ %1718, %1706 ], [ %1739, %1745 ]
  %1723 = icmp slt i32 %1720, 0
  %1724 = sub nsw i32 0, %1720
  %1725 = select i1 %1723, i32 %1724, i32 %1720
  %1726 = sdiv i32 %1725, %1722
  %1727 = add nsw i32 %1726, %1722
  %1728 = ashr i32 %1727, 1
  %1729 = sdiv i32 %1725, %1728
  %1730 = add nsw i32 %1729, %1728
  %1731 = ashr i32 %1730, 1
  %1732 = icmp eq i32 %1731, %1728
  br i1 %1732, label %1738, label %1733

1733:                                             ; preds = %1719
  %1734 = sdiv i32 %1725, %1731
  %1735 = add nsw i32 %1734, %1731
  %1736 = ashr i32 %1735, 1
  %1737 = icmp eq i32 %1736, %1731
  br i1 %1737, label %1738, label %1756

1738:                                             ; preds = %1796, %1791, %1786, %1781, %1776, %1771, %1766, %1761, %1756, %1733, %1719
  %1739 = phi i32 [ %1728, %1719 ], [ %1731, %1733 ], [ %1736, %1756 ], [ %1759, %1761 ], [ %1764, %1766 ], [ %1769, %1771 ], [ %1774, %1776 ], [ %1779, %1781 ], [ %1784, %1786 ], [ %1789, %1791 ], [ %1794, %1796 ]
  %1740 = phi i32 [ %1728, %1719 ], [ %1731, %1733 ], [ %1736, %1756 ], [ %1759, %1761 ], [ %1764, %1766 ], [ %1769, %1771 ], [ %1774, %1776 ], [ %1779, %1781 ], [ %1784, %1786 ], [ %1789, %1791 ], [ %1799, %1796 ]
  %1741 = trunc i32 %1740 to i16
  %1742 = getelementptr inbounds [120 x i16], [120 x i16]* %17, i64 0, i64 %1721
  store i16 %1741, i16* %1742, align 2
  %1743 = add nuw nsw i64 %1721, 1
  %1744 = icmp eq i64 %1743, 120
  br i1 %1744, label %1748, label %1745

1745:                                             ; preds = %1738
  %1746 = getelementptr inbounds [120 x i32], [120 x i32]* %16, i64 0, i64 %1743
  %1747 = load i32, i32* %1746, align 4
  br label %1719

1748:                                             ; preds = %1738
  %1749 = getelementptr inbounds [480 x i16], [480 x i16]* %12, i64 0, i64 0
  %1750 = getelementptr inbounds [120 x i16], [120 x i16]* %17, i64 0, i64 0
  %1751 = call i32 @WebRtcIsac_EncLogisticMulti2(%struct.Bitstreamstruct* %4, i16* nonnull %1749, i16* nonnull %1750, i32 %129, i16 signext %128) #7
  %1752 = shl i32 %1751, 16
  %1753 = icmp slt i32 %1752, 0
  %1754 = ashr exact i32 %1752, 16
  %1755 = select i1 %1753, i32 %1754, i32 0
  call void @llvm.lifetime.end.p0i8(i64 14, i8* nonnull %34) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %23) #7
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %22) #7
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %21) #7
  call void @llvm.lifetime.end.p0i8(i64 480, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %11) #7
  ret i32 %1755

1756:                                             ; preds = %1733
  %1757 = sdiv i32 %1725, %1736
  %1758 = add nsw i32 %1757, %1736
  %1759 = ashr i32 %1758, 1
  %1760 = icmp eq i32 %1759, %1736
  br i1 %1760, label %1738, label %1761

1761:                                             ; preds = %1756
  %1762 = sdiv i32 %1725, %1759
  %1763 = add nsw i32 %1762, %1759
  %1764 = ashr i32 %1763, 1
  %1765 = icmp eq i32 %1764, %1759
  br i1 %1765, label %1738, label %1766

1766:                                             ; preds = %1761
  %1767 = sdiv i32 %1725, %1764
  %1768 = add nsw i32 %1767, %1764
  %1769 = ashr i32 %1768, 1
  %1770 = icmp eq i32 %1769, %1764
  br i1 %1770, label %1738, label %1771

1771:                                             ; preds = %1766
  %1772 = sdiv i32 %1725, %1769
  %1773 = add nsw i32 %1772, %1769
  %1774 = ashr i32 %1773, 1
  %1775 = icmp eq i32 %1774, %1769
  br i1 %1775, label %1738, label %1776

1776:                                             ; preds = %1771
  %1777 = sdiv i32 %1725, %1774
  %1778 = add nsw i32 %1777, %1774
  %1779 = ashr i32 %1778, 1
  %1780 = icmp eq i32 %1779, %1774
  br i1 %1780, label %1738, label %1781

1781:                                             ; preds = %1776
  %1782 = sdiv i32 %1725, %1779
  %1783 = add nsw i32 %1782, %1779
  %1784 = ashr i32 %1783, 1
  %1785 = icmp eq i32 %1784, %1779
  br i1 %1785, label %1738, label %1786

1786:                                             ; preds = %1781
  %1787 = sdiv i32 %1725, %1784
  %1788 = add nsw i32 %1787, %1784
  %1789 = ashr i32 %1788, 1
  %1790 = icmp eq i32 %1789, %1784
  br i1 %1790, label %1738, label %1791

1791:                                             ; preds = %1786
  %1792 = sdiv i32 %1725, %1789
  %1793 = add nsw i32 %1792, %1789
  %1794 = ashr i32 %1793, 1
  %1795 = icmp eq i32 %1794, %1789
  br i1 %1795, label %1738, label %1796

1796:                                             ; preds = %1791
  %1797 = sdiv i32 %1725, %1794
  %1798 = add nsw i32 %1797, %1794
  %1799 = ashr i32 %1798, 1
  br label %1738

1800:                                             ; preds = %1570
  %1801 = add nsw i64 %1571, -1
  %1802 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1801
  %1803 = load i32, i32* %1802, align 4
  %1804 = mul nsw i32 %1803, %1550
  %1805 = add nsw i32 %1804, 256
  %1806 = ashr i32 %1805, 9
  %1807 = mul nsw i32 %1806, %1577
  %1808 = add nsw i32 %1807, 4
  %1809 = ashr i32 %1808, 3
  %1810 = add nsw i32 %1809, %1586
  %1811 = icmp eq i64 %1572, 2
  br i1 %1811, label %1588, label %1812

1812:                                             ; preds = %1800
  %1813 = add nsw i64 %1571, -2
  %1814 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1813
  %1815 = load i32, i32* %1814, align 4
  %1816 = mul nsw i32 %1815, %1553
  %1817 = add nsw i32 %1816, 256
  %1818 = ashr i32 %1817, 9
  %1819 = mul nsw i32 %1818, %1577
  %1820 = add nsw i32 %1819, 4
  %1821 = ashr i32 %1820, 3
  %1822 = add nsw i32 %1821, %1810
  %1823 = icmp eq i64 %1572, 3
  br i1 %1823, label %1588, label %1824

1824:                                             ; preds = %1812
  %1825 = add nsw i64 %1571, -3
  %1826 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1825
  %1827 = load i32, i32* %1826, align 4
  %1828 = mul nsw i32 %1827, %1556
  %1829 = add nsw i32 %1828, 256
  %1830 = ashr i32 %1829, 9
  %1831 = mul nsw i32 %1830, %1577
  %1832 = add nsw i32 %1831, 4
  %1833 = ashr i32 %1832, 3
  %1834 = add nsw i32 %1833, %1822
  %1835 = icmp eq i64 %1572, 4
  br i1 %1835, label %1588, label %1836

1836:                                             ; preds = %1824
  %1837 = add nsw i64 %1571, -4
  %1838 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1837
  %1839 = load i32, i32* %1838, align 4
  %1840 = mul nsw i32 %1839, %1559
  %1841 = add nsw i32 %1840, 256
  %1842 = ashr i32 %1841, 9
  %1843 = mul nsw i32 %1842, %1577
  %1844 = add nsw i32 %1843, 4
  %1845 = ashr i32 %1844, 3
  %1846 = add nsw i32 %1845, %1834
  %1847 = icmp eq i64 %1572, 5
  br i1 %1847, label %1588, label %1848

1848:                                             ; preds = %1836
  %1849 = add nsw i64 %1571, -5
  %1850 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1849
  %1851 = load i32, i32* %1850, align 4
  %1852 = mul nsw i32 %1851, %1562
  %1853 = add nsw i32 %1852, 256
  %1854 = ashr i32 %1853, 9
  %1855 = mul nsw i32 %1854, %1577
  %1856 = add nsw i32 %1855, 4
  %1857 = ashr i32 %1856, 3
  %1858 = add nsw i32 %1857, %1846
  %1859 = icmp eq i64 %1572, 6
  br i1 %1859, label %1588, label %1860

1860:                                             ; preds = %1848
  %1861 = add nsw i64 %1571, -6
  %1862 = getelementptr inbounds [7 x i32], [7 x i32]* %18, i64 0, i64 %1861
  %1863 = load i32, i32* %1862, align 4
  %1864 = mul nsw i32 %1863, %1565
  %1865 = add nsw i32 %1864, 256
  %1866 = ashr i32 %1865, 9
  %1867 = mul nsw i32 %1866, %1577
  %1868 = add nsw i32 %1867, 4
  %1869 = ashr i32 %1868, 3
  %1870 = add nsw i32 %1869, %1858
  br label %1588

1871:                                             ; preds = %539
  %1872 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %559
  %1873 = bitcast i32* %1872 to <4 x i32>*
  %1874 = load <4 x i32>, <4 x i32>* %1873, align 16
  %1875 = sub nsw i64 115, %540
  %1876 = getelementptr inbounds [120 x i32], [120 x i32]* %14, i64 0, i64 %1875
  %1877 = getelementptr inbounds i32, i32* %1876, i64 -3
  %1878 = bitcast i32* %1877 to <4 x i32>*
  %1879 = load <4 x i32>, <4 x i32>* %1878, align 4
  %1880 = shufflevector <4 x i32> %1879, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1881 = add <4 x i32> %1874, <i32 16, i32 16, i32 16, i32 16>
  %1882 = add <4 x i32> %1881, %1880
  %1883 = ashr <4 x i32> %1882, <i32 5, i32 5, i32 5, i32 5>
  %1884 = getelementptr inbounds [60 x i32], [60 x i32]* %7, i64 0, i64 %559
  %1885 = bitcast i32* %1884 to <4 x i32>*
  store <4 x i32> %1883, <4 x i32>* %1885, align 16
  %1886 = sub <4 x i32> %1881, %1880
  %1887 = ashr <4 x i32> %1886, <i32 5, i32 5, i32 5, i32 5>
  %1888 = getelementptr inbounds [60 x i32], [60 x i32]* %8, i64 0, i64 %559
  %1889 = bitcast i32* %1888 to <4 x i32>*
  store <4 x i32> %1887, <4 x i32>* %1889, align 16
  %1890 = add nuw nsw i64 %540, 8
  br label %539
}

declare void @WebRtcSpl_AutoCorrToReflCoef(i32*, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeRc(i16* nocapture, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca [6 x i32], align 16
  %4 = bitcast [6 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7
  %5 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 0
  %6 = bitcast [6 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  br label %7

7:                                                ; preds = %58, %2
  %8 = phi i64 [ 0, %2 ], [ %65, %58 ]
  %9 = getelementptr inbounds [6 x i16], [6 x i16]* @WebRtcIsac_kQArRcInitIndex, i64 0, i64 %8
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  %12 = getelementptr inbounds [6 x i32], [6 x i32]* %3, i64 0, i64 %8
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds i16, i16* %0, i64 %8
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %10 to i64
  %16 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = icmp sgt i16 %14, %17
  br i1 %18, label %23, label %19

19:                                               ; preds = %7
  %20 = icmp eq i16 %10, 0
  br i1 %20, label %58, label %21

21:                                               ; preds = %19
  %22 = zext i16 %10 to i64
  br label %43

23:                                               ; preds = %7
  %24 = add nuw nsw i32 %11, 1
  %25 = icmp ult i32 %24, 12
  br i1 %25, label %26, label %58

26:                                               ; preds = %23
  %27 = zext i32 %24 to i64
  %28 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = icmp sgt i16 %14, %29
  br i1 %30, label %35, label %58

31:                                               ; preds = %35
  %32 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %38
  %33 = load i16, i16* %32, align 2
  %34 = icmp sgt i16 %14, %33
  br i1 %34, label %35, label %54

35:                                               ; preds = %26, %31
  %36 = phi i64 [ %38, %31 ], [ %27, %26 ]
  %37 = trunc i64 %36 to i32
  %38 = add nuw nsw i64 %36, 1
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 12
  br i1 %40, label %50, label %31

41:                                               ; preds = %43
  %42 = icmp sgt i64 %45, 0
  br i1 %42, label %43, label %56

43:                                               ; preds = %21, %41
  %44 = phi i64 [ %22, %21 ], [ %45, %41 ]
  %45 = add nsw i64 %44, -1
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQArBoundaryLevels, i64 0, i64 %45
  %48 = load i16, i16* %47, align 2
  %49 = icmp slt i16 %14, %48
  br i1 %49, label %41, label %52

50:                                               ; preds = %35
  store i32 %37, i32* %12, align 4
  %51 = trunc i64 %36 to i32
  br label %58

52:                                               ; preds = %43
  store i32 %46, i32* %12, align 4
  %53 = trunc i64 %45 to i32
  br label %58

54:                                               ; preds = %31
  store i32 %37, i32* %12, align 4
  %55 = trunc i64 %36 to i32
  br label %58

56:                                               ; preds = %41
  store i32 %46, i32* %12, align 4
  %57 = trunc i64 %45 to i32
  br label %58

58:                                               ; preds = %56, %54, %19, %26, %52, %50, %23
  %59 = phi i32 [ %11, %23 ], [ %51, %50 ], [ %53, %52 ], [ %11, %26 ], [ %11, %19 ], [ %55, %54 ], [ %57, %56 ]
  %60 = getelementptr inbounds [6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcLevelsPtr, i64 0, i64 %8
  %61 = load i16*, i16** %60, align 8
  %62 = sext i32 %59 to i64
  %63 = getelementptr inbounds i16, i16* %61, i64 %62
  %64 = load i16, i16* %63, align 2
  store i16 %64, i16* %13, align 2
  %65 = add nuw nsw i64 %8, 1
  %66 = icmp eq i64 %65, 6
  br i1 %66, label %67, label %7

67:                                               ; preds = %58
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %5, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kQArRcCdfPtr, i64 0, i64 0), i32 6) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7
  ret void
}

declare i32 @WebRtcSpl_DivResultInQ31(i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_EncodeGain2(i32* nocapture, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  %5 = load i16, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQGainInitIndex, i64 0, i64 0), align 2
  %6 = zext i16 %5 to i32
  store i32 %6, i32* %3, align 4
  %7 = load i32, i32* %0, align 4
  %8 = zext i16 %5 to i64
  %9 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %7, %10
  br i1 %11, label %12, label %26

12:                                               ; preds = %2
  %13 = add nuw nsw i32 %6, 1
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %7, %16
  br i1 %17, label %18, label %36

18:                                               ; preds = %12
  %19 = add nuw nsw i64 %8, 1
  br label %20

20:                                               ; preds = %18, %20
  %21 = phi i64 [ %19, %18 ], [ %22, %20 ]
  %22 = add i64 %21, 1
  %23 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %7, %24
  br i1 %25, label %20, label %32

26:                                               ; preds = %2, %26
  %27 = phi i64 [ %28, %26 ], [ %8, %2 ]
  %28 = add nsw i64 %27, -1
  %29 = getelementptr inbounds [19 x i32], [19 x i32]* @WebRtcIsac_kQGain2BoundaryLevels, i64 0, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %7, %30
  br i1 %31, label %26, label %34

32:                                               ; preds = %20
  %33 = trunc i64 %21 to i32
  store i32 %33, i32* %3, align 4
  br label %36

34:                                               ; preds = %26
  %35 = trunc i64 %28 to i32
  store i32 %35, i32* %3, align 4
  br label %36

36:                                               ; preds = %12, %32, %34
  %37 = phi i32 [ %6, %12 ], [ %33, %32 ], [ %35, %34 ]
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [18 x i32], [18 x i32]* @WebRtcIsac_kQGain2Levels, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %0, align 4
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %3, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQGainCdf_ptr, i64 0, i64 0), i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 0
}

declare i32 @WebRtcIsac_EncLogisticMulti2(%struct.Bitstreamstruct*, i16*, i16*, i32, i16 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Rc2Poly(double* nocapture readonly, i32, double* nocapture) local_unnamed_addr #0 {
  %4 = alloca [12 x double], align 16
  %5 = bitcast [12 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 96, i1 false)
  store double 1.000000e+00, double* %2, align 8
  %6 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 0
  store double 1.000000e+00, double* %6, align 16
  %7 = icmp slt i32 %1, 1
  br i1 %7, label %118, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %10 = bitcast double* %9 to i8*
  %11 = getelementptr inbounds double, double* %2, i64 1
  %12 = bitcast double* %11 to i8*
  %13 = add nuw i32 %1, 1
  %14 = zext i32 %13 to i64
  %15 = getelementptr double, double* %2, i64 1
  %16 = bitcast double* %15 to i8*
  br label %17

17:                                               ; preds = %114, %8
  %18 = phi i64 [ %117, %114 ], [ 0, %8 ]
  %19 = phi i64 [ %115, %114 ], [ 1, %8 ]
  %20 = add i64 %18, 1
  %21 = getelementptr double, double* %2, i64 %20
  %22 = getelementptr double, double* %0, i64 %18
  %23 = bitcast double* %22 to i8*
  %24 = getelementptr i8, i8* %23, i64 1
  %25 = add nsw i64 %19, -1
  %26 = shl nsw i64 %25, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %26, i1 false)
  %27 = getelementptr inbounds double, double* %0, i64 %25
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds double, double* %2, i64 %19
  %31 = bitcast double* %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = icmp ugt i64 %19, 1
  br i1 %32, label %33, label %114

33:                                               ; preds = %17
  %34 = icmp ult i64 %18, 4
  br i1 %34, label %76, label %35

35:                                               ; preds = %33
  %36 = icmp ugt i8* %24, %16
  %37 = icmp ult double* %27, %21
  %38 = and i1 %36, %37
  br i1 %38, label %76, label %39

39:                                               ; preds = %35
  %40 = and i64 %18, -4
  %41 = or i64 %40, 1
  %42 = load double, double* %27, align 8, !alias.scope !43
  %43 = insertelement <2 x double> undef, double %42, i32 0
  %44 = shufflevector <2 x double> %43, <2 x double> undef, <2 x i32> zeroinitializer
  %45 = insertelement <2 x double> undef, double %42, i32 0
  %46 = shufflevector <2 x double> %45, <2 x double> undef, <2 x i32> zeroinitializer
  br label %47

47:                                               ; preds = %47, %39
  %48 = phi i64 [ 0, %39 ], [ %72, %47 ]
  %49 = or i64 %48, 1
  %50 = sub nsw i64 %19, %49
  %51 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %50
  %52 = getelementptr inbounds double, double* %51, i64 -1
  %53 = bitcast double* %52 to <2 x double>*
  %54 = load <2 x double>, <2 x double>* %53, align 8, !alias.scope !46
  %55 = shufflevector <2 x double> %54, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %56 = getelementptr inbounds double, double* %51, i64 -3
  %57 = bitcast double* %56 to <2 x double>*
  %58 = load <2 x double>, <2 x double>* %57, align 8, !alias.scope !46
  %59 = shufflevector <2 x double> %58, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %60 = fmul <2 x double> %44, %55
  %61 = fmul <2 x double> %46, %59
  %62 = getelementptr inbounds double, double* %2, i64 %49
  %63 = bitcast double* %62 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 8, !alias.scope !48, !noalias !43
  %65 = getelementptr inbounds double, double* %62, i64 2
  %66 = bitcast double* %65 to <2 x double>*
  %67 = load <2 x double>, <2 x double>* %66, align 8, !alias.scope !48, !noalias !43
  %68 = fadd <2 x double> %64, %60
  %69 = fadd <2 x double> %67, %61
  %70 = bitcast double* %62 to <2 x double>*
  store <2 x double> %68, <2 x double>* %70, align 8, !alias.scope !48, !noalias !43
  %71 = bitcast double* %65 to <2 x double>*
  store <2 x double> %69, <2 x double>* %71, align 8, !alias.scope !48, !noalias !43
  %72 = add i64 %48, 4
  %73 = icmp eq i64 %72, %40
  br i1 %73, label %74, label %47, !llvm.loop !50

74:                                               ; preds = %47
  %75 = icmp eq i64 %18, %40
  br i1 %75, label %114, label %76

76:                                               ; preds = %74, %35, %33
  %77 = phi i64 [ 1, %35 ], [ 1, %33 ], [ %41, %74 ]
  %78 = and i64 %18, 1
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %90, label %80

80:                                               ; preds = %76
  %81 = load double, double* %27, align 8
  %82 = sub nsw i64 %19, %77
  %83 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %82
  %84 = load double, double* %83, align 8
  %85 = fmul double %81, %84
  %86 = getelementptr inbounds double, double* %2, i64 %77
  %87 = load double, double* %86, align 8
  %88 = fadd double %87, %85
  store double %88, double* %86, align 8
  %89 = add nuw nsw i64 %77, 1
  br label %90

90:                                               ; preds = %80, %76
  %91 = phi i64 [ %89, %80 ], [ %77, %76 ]
  %92 = icmp eq i64 %18, %77
  br i1 %92, label %114, label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %112, %93 ], [ %91, %90 ]
  %95 = load double, double* %27, align 8
  %96 = sub nsw i64 %19, %94
  %97 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %96
  %98 = load double, double* %97, align 8
  %99 = fmul double %95, %98
  %100 = getelementptr inbounds double, double* %2, i64 %94
  %101 = load double, double* %100, align 8
  %102 = fadd double %101, %99
  store double %102, double* %100, align 8
  %103 = add nuw nsw i64 %94, 1
  %104 = load double, double* %27, align 8
  %105 = sub nsw i64 %19, %103
  %106 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %105
  %107 = load double, double* %106, align 8
  %108 = fmul double %104, %107
  %109 = getelementptr inbounds double, double* %2, i64 %103
  %110 = load double, double* %109, align 8
  %111 = fadd double %110, %108
  store double %111, double* %109, align 8
  %112 = add nuw nsw i64 %94, 2
  %113 = icmp eq i64 %112, %19
  br i1 %113, label %114, label %93, !llvm.loop !51

114:                                              ; preds = %90, %93, %74, %17
  %115 = add nuw nsw i64 %19, 1
  %116 = icmp eq i64 %115, %14
  %117 = add i64 %18, 1
  br i1 %116, label %118, label %17

118:                                              ; preds = %114, %3
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %5) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Poly2Rc(double* nocapture, i32, double* nocapture) local_unnamed_addr #0 {
  %4 = alloca [12 x double], align 16
  %5 = bitcast [12 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 96, i1 false)
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds double, double* %0, i64 %6
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = add i32 %1, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double, double* %2, i64 %11
  %13 = bitcast double* %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = icmp sgt i32 %10, 0
  br i1 %14, label %15, label %154

15:                                               ; preds = %3
  %16 = getelementptr inbounds double, double* %0, i64 1
  %17 = bitcast double* %16 to i8*
  %18 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %19 = bitcast double* %18 to i8*
  br label %20

20:                                               ; preds = %143, %15
  %21 = phi i32 [ %153, %143 ], [ 0, %15 ]
  %22 = phi i64 [ %148, %143 ], [ %9, %15 ]
  %23 = phi i64 [ %144, %143 ], [ %11, %15 ]
  %24 = phi i32 [ %152, %143 ], [ %1, %15 ]
  %25 = sub i32 %1, %21
  %26 = zext i32 %25 to i64
  %27 = sub i32 %1, %21
  %28 = zext i32 %27 to i64
  %29 = add nsw i64 %28, -2
  %30 = sub i32 %10, %21
  %31 = sub i32 %1, %21
  %32 = zext i32 %31 to i64
  %33 = add nsw i64 %32, -1
  %34 = bitcast i64 %22 to double
  %35 = fmul double %34, %34
  %36 = fsub double 1.000000e+00, %35
  %37 = fdiv double 1.000000e+00, %36
  %38 = add i64 %23, 1
  %39 = zext i32 %24 to i64
  %40 = icmp ult i64 %33, 4
  br i1 %40, label %94, label %41

41:                                               ; preds = %20
  %42 = trunc i64 %29 to i32
  %43 = sub i32 %30, %42
  %44 = icmp sgt i32 %43, %30
  %45 = icmp ugt i64 %29, 4294967295
  %46 = or i1 %44, %45
  br i1 %46, label %94, label %47

47:                                               ; preds = %41
  %48 = and i64 %33, -4
  %49 = or i64 %48, 1
  %50 = insertelement <2 x double> undef, double %34, i32 0
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> zeroinitializer
  %52 = insertelement <2 x double> undef, double %34, i32 0
  %53 = shufflevector <2 x double> %52, <2 x double> undef, <2 x i32> zeroinitializer
  %54 = insertelement <2 x double> undef, double %37, i32 0
  %55 = shufflevector <2 x double> %54, <2 x double> undef, <2 x i32> zeroinitializer
  %56 = insertelement <2 x double> undef, double %37, i32 0
  %57 = shufflevector <2 x double> %56, <2 x double> undef, <2 x i32> zeroinitializer
  br label %58

58:                                               ; preds = %58, %47
  %59 = phi i64 [ 0, %47 ], [ %90, %58 ]
  %60 = or i64 %59, 1
  %61 = getelementptr inbounds double, double* %0, i64 %60
  %62 = bitcast double* %61 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 8
  %64 = getelementptr inbounds double, double* %61, i64 2
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 8
  %67 = sub i64 %38, %60
  %68 = shl i64 %67, 32
  %69 = ashr exact i64 %68, 32
  %70 = getelementptr inbounds double, double* %0, i64 %69
  %71 = getelementptr inbounds double, double* %70, i64 -1
  %72 = bitcast double* %71 to <2 x double>*
  %73 = load <2 x double>, <2 x double>* %72, align 8
  %74 = shufflevector <2 x double> %73, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %75 = getelementptr inbounds double, double* %70, i64 -2
  %76 = getelementptr inbounds double, double* %75, i64 -1
  %77 = bitcast double* %76 to <2 x double>*
  %78 = load <2 x double>, <2 x double>* %77, align 8
  %79 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %80 = fmul <2 x double> %74, %51
  %81 = fmul <2 x double> %79, %53
  %82 = fsub <2 x double> %63, %80
  %83 = fsub <2 x double> %66, %81
  %84 = fmul <2 x double> %55, %82
  %85 = fmul <2 x double> %57, %83
  %86 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %60
  %87 = bitcast double* %86 to <2 x double>*
  store <2 x double> %84, <2 x double>* %87, align 8
  %88 = getelementptr inbounds double, double* %86, i64 2
  %89 = bitcast double* %88 to <2 x double>*
  store <2 x double> %85, <2 x double>* %89, align 8
  %90 = add i64 %59, 4
  %91 = icmp eq i64 %90, %48
  br i1 %91, label %92, label %58, !llvm.loop !52

92:                                               ; preds = %58
  %93 = icmp eq i64 %33, %48
  br i1 %93, label %143, label %94

94:                                               ; preds = %92, %41, %20
  %95 = phi i64 [ 1, %41 ], [ 1, %20 ], [ %49, %92 ]
  %96 = xor i64 %95, -1
  %97 = and i64 %26, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %112

99:                                               ; preds = %94
  %100 = getelementptr inbounds double, double* %0, i64 %95
  %101 = load double, double* %100, align 8
  %102 = sub i64 %38, %95
  %103 = shl i64 %102, 32
  %104 = ashr exact i64 %103, 32
  %105 = getelementptr inbounds double, double* %0, i64 %104
  %106 = load double, double* %105, align 8
  %107 = fmul double %106, %34
  %108 = fsub double %101, %107
  %109 = fmul double %37, %108
  %110 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %95
  store double %109, double* %110, align 8
  %111 = add nuw nsw i64 %95, 1
  br label %112

112:                                              ; preds = %99, %94
  %113 = phi i64 [ %111, %99 ], [ %95, %94 ]
  %114 = sub nsw i64 0, %26
  %115 = icmp eq i64 %96, %114
  br i1 %115, label %143, label %116

116:                                              ; preds = %112, %116
  %117 = phi i64 [ %141, %116 ], [ %113, %112 ]
  %118 = getelementptr inbounds double, double* %0, i64 %117
  %119 = load double, double* %118, align 8
  %120 = sub i64 %38, %117
  %121 = shl i64 %120, 32
  %122 = ashr exact i64 %121, 32
  %123 = getelementptr inbounds double, double* %0, i64 %122
  %124 = load double, double* %123, align 8
  %125 = fmul double %124, %34
  %126 = fsub double %119, %125
  %127 = fmul double %37, %126
  %128 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %117
  store double %127, double* %128, align 8
  %129 = add nuw nsw i64 %117, 1
  %130 = getelementptr inbounds double, double* %0, i64 %129
  %131 = load double, double* %130, align 8
  %132 = sub i64 %38, %129
  %133 = shl i64 %132, 32
  %134 = ashr exact i64 %133, 32
  %135 = getelementptr inbounds double, double* %0, i64 %134
  %136 = load double, double* %135, align 8
  %137 = fmul double %136, %34
  %138 = fsub double %131, %137
  %139 = fmul double %37, %138
  %140 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %129
  store double %139, double* %140, align 8
  %141 = add nuw nsw i64 %117, 2
  %142 = icmp eq i64 %141, %39
  br i1 %142, label %143, label %116, !llvm.loop !53

143:                                              ; preds = %112, %116, %92
  %144 = add nsw i64 %23, -1
  %145 = shl nsw i64 %144, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %19, i64 %145, i1 false)
  %146 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %23
  %147 = bitcast double* %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds double, double* %2, i64 %144
  %150 = bitcast double* %149 to i64*
  store i64 %148, i64* %150, align 8
  %151 = icmp sgt i64 %144, 0
  %152 = add i32 %24, -1
  %153 = add i32 %21, 1
  br i1 %151, label %20, label %154

154:                                              ; preds = %143, %3
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %5) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @WebRtcIsac_Rc2Lar(double* nocapture readonly, double* nocapture, i32) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %16, %7 ]
  %9 = getelementptr inbounds double, double* %0, i64 %8
  %10 = load double, double* %9, align 8
  %11 = fadd double %10, 1.000000e+00
  %12 = fsub double 1.000000e+00, %10
  %13 = fdiv double %11, %12
  %14 = tail call double @log(double %13) #7
  %15 = getelementptr inbounds double, double* %1, i64 %8
  store double %14, double* %15, align 8
  %16 = add nuw nsw i64 %8, 1
  %17 = icmp eq i64 %16, %6
  br i1 %17, label %18, label %7

18:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @WebRtcIsac_Lar2Rc(double* nocapture readonly, double* nocapture, i32) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i64 [ 0, %5 ], [ %16, %7 ]
  %9 = getelementptr inbounds double, double* %0, i64 %8
  %10 = load double, double* %9, align 8
  %11 = tail call double @exp(double %10) #7
  %12 = fadd double %11, -1.000000e+00
  %13 = fadd double %11, 1.000000e+00
  %14 = fdiv double %12, %13
  %15 = getelementptr inbounds double, double* %1, i64 %8
  store double %14, double* %15, align 8
  %16 = add nuw nsw i64 %8, 1
  %17 = icmp eq i64 %16, %6
  br i1 %17, label %18, label %7

18:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Poly2Lar(double* nocapture, i32, double* nocapture, i32, i32, double* nocapture) local_unnamed_addr #0 {
  %7 = alloca [12 x double], align 16
  %8 = alloca [100 x double], align 16
  %9 = bitcast [100 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 800, i1 false)
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %410

11:                                               ; preds = %6
  %12 = bitcast [12 x double]* %7 to i8*
  %13 = sext i32 %1 to i64
  %14 = add i32 %1, -1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %15
  %17 = bitcast double* %16 to i64*
  %18 = icmp sgt i32 %14, 0
  %19 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  %20 = bitcast double* %19 to i8*
  %21 = icmp sgt i32 %1, 0
  %22 = zext i32 %1 to i64
  %23 = sext i32 %3 to i64
  %24 = add i32 %3, -1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %25
  %27 = bitcast double* %26 to i64*
  %28 = icmp sgt i32 %24, 0
  %29 = icmp sgt i32 %3, 0
  %30 = zext i32 %3 to i64
  %31 = add nsw i32 %1, 1
  %32 = sext i32 %31 to i64
  %33 = add nsw i32 %3, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  %36 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  br label %37

37:                                               ; preds = %403, %11
  %38 = phi i64 [ %409, %403 ], [ 0, %11 ]
  %39 = phi double* [ %404, %403 ], [ %5, %11 ]
  %40 = phi double* [ %406, %403 ], [ %2, %11 ]
  %41 = phi double* [ %405, %403 ], [ %0, %11 ]
  %42 = phi i32 [ %407, %403 ], [ 0, %11 ]
  %43 = mul i64 %38, %32
  %44 = add i64 %43, 2
  %45 = getelementptr double, double* %0, i64 %44
  %46 = add i64 %43, 1
  %47 = getelementptr double, double* %0, i64 %46
  %48 = getelementptr double, double* %0, i64 %43
  %49 = mul i64 %38, %34
  %50 = add i64 %49, 2
  %51 = getelementptr double, double* %2, i64 %50
  %52 = add i64 %49, 1
  %53 = getelementptr double, double* %2, i64 %52
  %54 = getelementptr double, double* %2, i64 %49
  %55 = bitcast double* %41 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast double* %39 to i64*
  store i64 %56, i64* %57, align 8
  %58 = bitcast double* %40 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds double, double* %39, i64 1
  %61 = bitcast double* %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = getelementptr inbounds double, double* %39, i64 2
  store double 1.000000e+00, double* %41, align 8
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 96, i1 false) #7
  %63 = getelementptr inbounds double, double* %41, i64 %13
  %64 = bitcast double* %63 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %17, align 8
  br i1 %18, label %66, label %220

66:                                               ; preds = %37
  %67 = getelementptr inbounds double, double* %41, i64 1
  %68 = bitcast double* %67 to i8*
  br label %69

69:                                               ; preds = %209, %66
  %70 = phi i32 [ %219, %209 ], [ 0, %66 ]
  %71 = phi i64 [ %214, %209 ], [ %65, %66 ]
  %72 = phi i64 [ %210, %209 ], [ %15, %66 ]
  %73 = phi i32 [ %218, %209 ], [ %1, %66 ]
  %74 = sub i32 %1, %70
  %75 = zext i32 %74 to i64
  %76 = sub i32 %1, %70
  %77 = zext i32 %76 to i64
  %78 = getelementptr [12 x double], [12 x double]* %7, i64 0, i64 %77
  %79 = sub i32 %14, %70
  %80 = sext i32 %79 to i64
  %81 = sub nsw i64 %80, %77
  %82 = getelementptr double, double* %45, i64 %81
  %83 = getelementptr double, double* %47, i64 %80
  %84 = getelementptr double, double* %48, i64 %77
  %85 = sub i32 %1, %70
  %86 = zext i32 %85 to i64
  %87 = add nsw i64 %86, -2
  %88 = sub i32 %14, %70
  %89 = sub i32 %1, %70
  %90 = zext i32 %89 to i64
  %91 = add nsw i64 %90, -1
  %92 = bitcast i64 %71 to double
  %93 = fmul double %92, %92
  %94 = fsub double 1.000000e+00, %93
  %95 = fdiv double 1.000000e+00, %94
  %96 = add nsw i64 %72, 1
  %97 = zext i32 %73 to i64
  %98 = icmp ult i64 %91, 4
  br i1 %98, label %160, label %99

99:                                               ; preds = %69
  %100 = trunc i64 %87 to i32
  %101 = sub i32 %88, %100
  %102 = icmp sgt i32 %101, %88
  %103 = icmp ugt i64 %87, 4294967295
  %104 = or i1 %102, %103
  br i1 %104, label %160, label %105

105:                                              ; preds = %99
  %106 = icmp ult double* %36, %83
  %107 = icmp ult double* %82, %78
  %108 = and i1 %106, %107
  %109 = icmp ult double* %36, %84
  %110 = icmp ult double* %47, %78
  %111 = and i1 %109, %110
  %112 = or i1 %108, %111
  br i1 %112, label %160, label %113

113:                                              ; preds = %105
  %114 = and i64 %91, -4
  %115 = or i64 %114, 1
  %116 = insertelement <2 x double> undef, double %92, i32 0
  %117 = shufflevector <2 x double> %116, <2 x double> undef, <2 x i32> zeroinitializer
  %118 = insertelement <2 x double> undef, double %92, i32 0
  %119 = shufflevector <2 x double> %118, <2 x double> undef, <2 x i32> zeroinitializer
  %120 = insertelement <2 x double> undef, double %95, i32 0
  %121 = shufflevector <2 x double> %120, <2 x double> undef, <2 x i32> zeroinitializer
  %122 = insertelement <2 x double> undef, double %95, i32 0
  %123 = shufflevector <2 x double> %122, <2 x double> undef, <2 x i32> zeroinitializer
  br label %124

124:                                              ; preds = %124, %113
  %125 = phi i64 [ 0, %113 ], [ %156, %124 ]
  %126 = or i64 %125, 1
  %127 = getelementptr inbounds double, double* %41, i64 %126
  %128 = bitcast double* %127 to <2 x double>*
  %129 = load <2 x double>, <2 x double>* %128, align 8, !alias.scope !54
  %130 = getelementptr inbounds double, double* %127, i64 2
  %131 = bitcast double* %130 to <2 x double>*
  %132 = load <2 x double>, <2 x double>* %131, align 8, !alias.scope !54
  %133 = sub i64 %96, %126
  %134 = shl i64 %133, 32
  %135 = ashr exact i64 %134, 32
  %136 = getelementptr inbounds double, double* %41, i64 %135
  %137 = getelementptr inbounds double, double* %136, i64 -1
  %138 = bitcast double* %137 to <2 x double>*
  %139 = load <2 x double>, <2 x double>* %138, align 8, !alias.scope !57
  %140 = shufflevector <2 x double> %139, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %141 = getelementptr inbounds double, double* %136, i64 -2
  %142 = getelementptr inbounds double, double* %141, i64 -1
  %143 = bitcast double* %142 to <2 x double>*
  %144 = load <2 x double>, <2 x double>* %143, align 8, !alias.scope !57
  %145 = shufflevector <2 x double> %144, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %146 = fmul <2 x double> %140, %117
  %147 = fmul <2 x double> %145, %119
  %148 = fsub <2 x double> %129, %146
  %149 = fsub <2 x double> %132, %147
  %150 = fmul <2 x double> %121, %148
  %151 = fmul <2 x double> %123, %149
  %152 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %126
  %153 = bitcast double* %152 to <2 x double>*
  store <2 x double> %150, <2 x double>* %153, align 8, !alias.scope !59, !noalias !61
  %154 = getelementptr inbounds double, double* %152, i64 2
  %155 = bitcast double* %154 to <2 x double>*
  store <2 x double> %151, <2 x double>* %155, align 8, !alias.scope !59, !noalias !61
  %156 = add i64 %125, 4
  %157 = icmp eq i64 %156, %114
  br i1 %157, label %158, label %124, !llvm.loop !62

158:                                              ; preds = %124
  %159 = icmp eq i64 %91, %114
  br i1 %159, label %209, label %160

160:                                              ; preds = %158, %105, %99, %69
  %161 = phi i64 [ 1, %105 ], [ 1, %99 ], [ 1, %69 ], [ %115, %158 ]
  %162 = xor i64 %161, -1
  %163 = and i64 %75, 1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %178

165:                                              ; preds = %160
  %166 = getelementptr inbounds double, double* %41, i64 %161
  %167 = load double, double* %166, align 8
  %168 = sub i64 %96, %161
  %169 = shl i64 %168, 32
  %170 = ashr exact i64 %169, 32
  %171 = getelementptr inbounds double, double* %41, i64 %170
  %172 = load double, double* %171, align 8
  %173 = fmul double %172, %92
  %174 = fsub double %167, %173
  %175 = fmul double %95, %174
  %176 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %161
  store double %175, double* %176, align 8
  %177 = add nuw nsw i64 %161, 1
  br label %178

178:                                              ; preds = %165, %160
  %179 = phi i64 [ %177, %165 ], [ %161, %160 ]
  %180 = sub nsw i64 0, %75
  %181 = icmp eq i64 %162, %180
  br i1 %181, label %209, label %182

182:                                              ; preds = %178, %182
  %183 = phi i64 [ %207, %182 ], [ %179, %178 ]
  %184 = getelementptr inbounds double, double* %41, i64 %183
  %185 = load double, double* %184, align 8
  %186 = sub i64 %96, %183
  %187 = shl i64 %186, 32
  %188 = ashr exact i64 %187, 32
  %189 = getelementptr inbounds double, double* %41, i64 %188
  %190 = load double, double* %189, align 8
  %191 = fmul double %190, %92
  %192 = fsub double %185, %191
  %193 = fmul double %95, %192
  %194 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %183
  store double %193, double* %194, align 8
  %195 = add nuw nsw i64 %183, 1
  %196 = getelementptr inbounds double, double* %41, i64 %195
  %197 = load double, double* %196, align 8
  %198 = sub i64 %96, %195
  %199 = shl i64 %198, 32
  %200 = ashr exact i64 %199, 32
  %201 = getelementptr inbounds double, double* %41, i64 %200
  %202 = load double, double* %201, align 8
  %203 = fmul double %202, %92
  %204 = fsub double %197, %203
  %205 = fmul double %95, %204
  %206 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %195
  store double %205, double* %206, align 8
  %207 = add nuw nsw i64 %183, 2
  %208 = icmp eq i64 %207, %97
  br i1 %208, label %209, label %182, !llvm.loop !63

209:                                              ; preds = %178, %182, %158
  %210 = add nsw i64 %72, -1
  %211 = shl nsw i64 %210, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %20, i64 %211, i1 false) #7
  %212 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %72
  %213 = bitcast double* %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %210
  %216 = bitcast double* %215 to i64*
  store i64 %214, i64* %216, align 8
  %217 = icmp sgt i64 %210, 0
  %218 = add i32 %73, -1
  %219 = add i32 %70, 1
  br i1 %217, label %69, label %220

220:                                              ; preds = %209, %37
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %12) #7
  br i1 %21, label %221, label %232

221:                                              ; preds = %220, %221
  %222 = phi i64 [ %230, %221 ], [ 0, %220 ]
  %223 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %222
  %224 = load double, double* %223, align 8
  %225 = fadd double %224, 1.000000e+00
  %226 = fsub double 1.000000e+00, %224
  %227 = fdiv double %225, %226
  %228 = tail call double @log(double %227) #7
  %229 = getelementptr inbounds double, double* %62, i64 %222
  store double %228, double* %229, align 8
  %230 = add nuw nsw i64 %222, 1
  %231 = icmp eq i64 %230, %22
  br i1 %231, label %232, label %221

232:                                              ; preds = %221, %220
  %233 = getelementptr inbounds double, double* %62, i64 %13
  store double 1.000000e+00, double* %40, align 8
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 96, i1 false) #7
  %234 = getelementptr inbounds double, double* %40, i64 %23
  %235 = bitcast double* %234 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %27, align 8
  br i1 %28, label %237, label %391

237:                                              ; preds = %232
  %238 = getelementptr inbounds double, double* %40, i64 1
  %239 = bitcast double* %238 to i8*
  br label %240

240:                                              ; preds = %380, %237
  %241 = phi i32 [ %390, %380 ], [ 0, %237 ]
  %242 = phi i64 [ %385, %380 ], [ %236, %237 ]
  %243 = phi i64 [ %381, %380 ], [ %25, %237 ]
  %244 = phi i32 [ %389, %380 ], [ %3, %237 ]
  %245 = sub i32 %3, %241
  %246 = zext i32 %245 to i64
  %247 = sub i32 %3, %241
  %248 = zext i32 %247 to i64
  %249 = getelementptr [12 x double], [12 x double]* %7, i64 0, i64 %248
  %250 = sub i32 %24, %241
  %251 = sext i32 %250 to i64
  %252 = sub nsw i64 %251, %248
  %253 = getelementptr double, double* %51, i64 %252
  %254 = getelementptr double, double* %53, i64 %251
  %255 = getelementptr double, double* %54, i64 %248
  %256 = sub i32 %3, %241
  %257 = zext i32 %256 to i64
  %258 = add nsw i64 %257, -2
  %259 = sub i32 %24, %241
  %260 = sub i32 %3, %241
  %261 = zext i32 %260 to i64
  %262 = add nsw i64 %261, -1
  %263 = bitcast i64 %242 to double
  %264 = fmul double %263, %263
  %265 = fsub double 1.000000e+00, %264
  %266 = fdiv double 1.000000e+00, %265
  %267 = add nsw i64 %243, 1
  %268 = zext i32 %244 to i64
  %269 = icmp ult i64 %262, 4
  br i1 %269, label %331, label %270

270:                                              ; preds = %240
  %271 = trunc i64 %258 to i32
  %272 = sub i32 %259, %271
  %273 = icmp sgt i32 %272, %259
  %274 = icmp ugt i64 %258, 4294967295
  %275 = or i1 %273, %274
  br i1 %275, label %331, label %276

276:                                              ; preds = %270
  %277 = icmp ult double* %35, %254
  %278 = icmp ult double* %253, %249
  %279 = and i1 %277, %278
  %280 = icmp ult double* %35, %255
  %281 = icmp ult double* %53, %249
  %282 = and i1 %280, %281
  %283 = or i1 %279, %282
  br i1 %283, label %331, label %284

284:                                              ; preds = %276
  %285 = and i64 %262, -4
  %286 = or i64 %285, 1
  %287 = insertelement <2 x double> undef, double %263, i32 0
  %288 = shufflevector <2 x double> %287, <2 x double> undef, <2 x i32> zeroinitializer
  %289 = insertelement <2 x double> undef, double %263, i32 0
  %290 = shufflevector <2 x double> %289, <2 x double> undef, <2 x i32> zeroinitializer
  %291 = insertelement <2 x double> undef, double %266, i32 0
  %292 = shufflevector <2 x double> %291, <2 x double> undef, <2 x i32> zeroinitializer
  %293 = insertelement <2 x double> undef, double %266, i32 0
  %294 = shufflevector <2 x double> %293, <2 x double> undef, <2 x i32> zeroinitializer
  br label %295

295:                                              ; preds = %295, %284
  %296 = phi i64 [ 0, %284 ], [ %327, %295 ]
  %297 = or i64 %296, 1
  %298 = getelementptr inbounds double, double* %40, i64 %297
  %299 = bitcast double* %298 to <2 x double>*
  %300 = load <2 x double>, <2 x double>* %299, align 8, !alias.scope !64
  %301 = getelementptr inbounds double, double* %298, i64 2
  %302 = bitcast double* %301 to <2 x double>*
  %303 = load <2 x double>, <2 x double>* %302, align 8, !alias.scope !64
  %304 = sub i64 %267, %297
  %305 = shl i64 %304, 32
  %306 = ashr exact i64 %305, 32
  %307 = getelementptr inbounds double, double* %40, i64 %306
  %308 = getelementptr inbounds double, double* %307, i64 -1
  %309 = bitcast double* %308 to <2 x double>*
  %310 = load <2 x double>, <2 x double>* %309, align 8, !alias.scope !67
  %311 = shufflevector <2 x double> %310, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %312 = getelementptr inbounds double, double* %307, i64 -2
  %313 = getelementptr inbounds double, double* %312, i64 -1
  %314 = bitcast double* %313 to <2 x double>*
  %315 = load <2 x double>, <2 x double>* %314, align 8, !alias.scope !67
  %316 = shufflevector <2 x double> %315, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %317 = fmul <2 x double> %311, %288
  %318 = fmul <2 x double> %316, %290
  %319 = fsub <2 x double> %300, %317
  %320 = fsub <2 x double> %303, %318
  %321 = fmul <2 x double> %292, %319
  %322 = fmul <2 x double> %294, %320
  %323 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %297
  %324 = bitcast double* %323 to <2 x double>*
  store <2 x double> %321, <2 x double>* %324, align 8, !alias.scope !69, !noalias !71
  %325 = getelementptr inbounds double, double* %323, i64 2
  %326 = bitcast double* %325 to <2 x double>*
  store <2 x double> %322, <2 x double>* %326, align 8, !alias.scope !69, !noalias !71
  %327 = add i64 %296, 4
  %328 = icmp eq i64 %327, %285
  br i1 %328, label %329, label %295, !llvm.loop !72

329:                                              ; preds = %295
  %330 = icmp eq i64 %262, %285
  br i1 %330, label %380, label %331

331:                                              ; preds = %329, %276, %270, %240
  %332 = phi i64 [ 1, %276 ], [ 1, %270 ], [ 1, %240 ], [ %286, %329 ]
  %333 = xor i64 %332, -1
  %334 = and i64 %246, 1
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %349

336:                                              ; preds = %331
  %337 = getelementptr inbounds double, double* %40, i64 %332
  %338 = load double, double* %337, align 8
  %339 = sub i64 %267, %332
  %340 = shl i64 %339, 32
  %341 = ashr exact i64 %340, 32
  %342 = getelementptr inbounds double, double* %40, i64 %341
  %343 = load double, double* %342, align 8
  %344 = fmul double %343, %263
  %345 = fsub double %338, %344
  %346 = fmul double %266, %345
  %347 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %332
  store double %346, double* %347, align 8
  %348 = add nuw nsw i64 %332, 1
  br label %349

349:                                              ; preds = %336, %331
  %350 = phi i64 [ %348, %336 ], [ %332, %331 ]
  %351 = sub nsw i64 0, %246
  %352 = icmp eq i64 %333, %351
  br i1 %352, label %380, label %353

353:                                              ; preds = %349, %353
  %354 = phi i64 [ %378, %353 ], [ %350, %349 ]
  %355 = getelementptr inbounds double, double* %40, i64 %354
  %356 = load double, double* %355, align 8
  %357 = sub i64 %267, %354
  %358 = shl i64 %357, 32
  %359 = ashr exact i64 %358, 32
  %360 = getelementptr inbounds double, double* %40, i64 %359
  %361 = load double, double* %360, align 8
  %362 = fmul double %361, %263
  %363 = fsub double %356, %362
  %364 = fmul double %266, %363
  %365 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %354
  store double %364, double* %365, align 8
  %366 = add nuw nsw i64 %354, 1
  %367 = getelementptr inbounds double, double* %40, i64 %366
  %368 = load double, double* %367, align 8
  %369 = sub i64 %267, %366
  %370 = shl i64 %369, 32
  %371 = ashr exact i64 %370, 32
  %372 = getelementptr inbounds double, double* %40, i64 %371
  %373 = load double, double* %372, align 8
  %374 = fmul double %373, %263
  %375 = fsub double %368, %374
  %376 = fmul double %266, %375
  %377 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %366
  store double %376, double* %377, align 8
  %378 = add nuw nsw i64 %354, 2
  %379 = icmp eq i64 %378, %268
  br i1 %379, label %380, label %353, !llvm.loop !73

380:                                              ; preds = %349, %353, %329
  %381 = add nsw i64 %243, -1
  %382 = shl nsw i64 %381, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %20, i64 %382, i1 false) #7
  %383 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %243
  %384 = bitcast double* %383 to i64*
  %385 = load i64, i64* %384, align 8
  %386 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %381
  %387 = bitcast double* %386 to i64*
  store i64 %385, i64* %387, align 8
  %388 = icmp sgt i64 %381, 0
  %389 = add i32 %244, -1
  %390 = add i32 %241, 1
  br i1 %388, label %240, label %391

391:                                              ; preds = %380, %232
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %12) #7
  br i1 %29, label %392, label %403

392:                                              ; preds = %391, %392
  %393 = phi i64 [ %401, %392 ], [ 0, %391 ]
  %394 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %393
  %395 = load double, double* %394, align 8
  %396 = fadd double %395, 1.000000e+00
  %397 = fsub double 1.000000e+00, %395
  %398 = fdiv double %396, %397
  %399 = tail call double @log(double %398) #7
  %400 = getelementptr inbounds double, double* %233, i64 %393
  store double %399, double* %400, align 8
  %401 = add nuw nsw i64 %393, 1
  %402 = icmp eq i64 %401, %30
  br i1 %402, label %403, label %392

403:                                              ; preds = %392, %391
  %404 = getelementptr inbounds double, double* %233, i64 %23
  %405 = getelementptr inbounds double, double* %41, i64 %32
  %406 = getelementptr inbounds double, double* %40, i64 %34
  %407 = add nuw nsw i32 %42, 1
  %408 = icmp eq i32 %407, %4
  %409 = add i64 %38, 1
  br i1 %408, label %410, label %37

410:                                              ; preds = %403, %6
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_Poly2LarUB(double* nocapture, i16 signext) local_unnamed_addr #0 {
  %3 = alloca [12 x double], align 16
  %4 = alloca [100 x double], align 16
  %5 = alloca [100 x double], align 16
  %6 = bitcast [100 x double]* %5 to i8*
  %7 = bitcast [100 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -1, i64 800, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 800, i1 false)
  %8 = sext i16 %1 to i32
  switch i32 %8, label %112 [
    i32 12, label %10
    i32 16, label %9
  ]

9:                                                ; preds = %2
  br label %10

10:                                               ; preds = %2, %9
  %11 = phi i32 [ 4, %9 ], [ 2, %2 ]
  %12 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 0
  store double 1.000000e+00, double* %12, align 16
  %13 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 1
  %14 = bitcast double* %13 to i8*
  %15 = bitcast [12 x double]* %3 to i8*
  %16 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 4
  %17 = bitcast double* %16 to i64*
  %18 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 3
  %19 = bitcast double* %18 to i64*
  %20 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 1
  %21 = bitcast double* %20 to i8*
  %22 = bitcast double* %20 to i64*
  %23 = bitcast double* %13 to i64*
  %24 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 2
  %25 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 1
  %26 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 1
  %27 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 1
  %28 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 1
  %29 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 3
  %30 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 1
  %31 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 2
  %32 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 2
  %33 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 3
  %34 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 1
  %35 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 3
  %36 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 2
  %37 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 1
  %38 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 2
  %39 = getelementptr inbounds [100 x double], [100 x double]* %4, i64 0, i64 1
  %40 = getelementptr inbounds [12 x double], [12 x double]* %3, i64 0, i64 2
  br label %41

41:                                               ; preds = %10, %41
  %42 = phi i16 [ 0, %10 ], [ %107, %41 ]
  %43 = phi double* [ %0, %10 ], [ %106, %41 ]
  %44 = bitcast double* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %44, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 96, i1 false) #7
  %45 = load i64, i64* %17, align 16
  store i64 %45, i64* %19, align 8
  %46 = bitcast i64 %45 to double
  %47 = fmul double %46, %46
  %48 = fsub double 1.000000e+00, %47
  %49 = fdiv double 1.000000e+00, %48
  %50 = load double, double* %28, align 8
  %51 = load double, double* %29, align 8
  %52 = fmul double %51, %46
  %53 = fsub double %50, %52
  %54 = fmul double %49, %53
  store double %54, double* %30, align 8
  %55 = load double, double* %31, align 16
  %56 = fmul double %55, %46
  %57 = fsub double %55, %56
  %58 = fmul double %49, %57
  store double %58, double* %32, align 16
  %59 = load double, double* %33, align 8
  %60 = load double, double* %34, align 8
  %61 = fmul double %60, %46
  %62 = fsub double %59, %61
  %63 = fmul double %49, %62
  store double %63, double* %35, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %21, i64 16, i1 false) #7
  store double %63, double* %24, align 16
  %64 = fmul double %63, %63
  %65 = fsub double 1.000000e+00, %64
  %66 = fdiv double 1.000000e+00, %65
  %67 = load double, double* %27, align 8
  %68 = load double, double* %36, align 16
  %69 = fmul double %68, %63
  %70 = fsub double %67, %69
  %71 = fmul double %66, %70
  store double %71, double* %37, align 8
  %72 = load double, double* %38, align 16
  %73 = load double, double* %39, align 8
  %74 = fmul double %73, %63
  %75 = fsub double %72, %74
  %76 = fmul double %66, %75
  store double %76, double* %40, align 16
  %77 = load i64, i64* %22, align 8
  store i64 %77, i64* %23, align 8
  %78 = fmul double %76, %76
  %79 = fsub double 1.000000e+00, %78
  %80 = fdiv double 1.000000e+00, %79
  %81 = bitcast i64 %77 to double
  %82 = fmul double %76, %81
  %83 = fsub double %81, %82
  %84 = fmul double %80, %83
  store double %84, double* %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %15) #7
  %85 = fadd double %84, 1.000000e+00
  %86 = fsub double 1.000000e+00, %84
  %87 = fdiv double %85, %86
  %88 = tail call double @log(double %87) #7
  store double %88, double* %43, align 8
  %89 = fadd double %76, 1.000000e+00
  %90 = fsub double 1.000000e+00, %76
  %91 = fdiv double %89, %90
  %92 = tail call double @log(double %91) #7
  %93 = getelementptr inbounds double, double* %43, i64 1
  store double %92, double* %93, align 8
  %94 = load double, double* %24, align 16
  %95 = fadd double %94, 1.000000e+00
  %96 = fsub double 1.000000e+00, %94
  %97 = fdiv double %95, %96
  %98 = tail call double @log(double %97) #7
  %99 = getelementptr inbounds double, double* %43, i64 2
  store double %98, double* %99, align 8
  %100 = load double, double* %18, align 8
  %101 = fadd double %100, 1.000000e+00
  %102 = fsub double 1.000000e+00, %100
  %103 = fdiv double %101, %102
  %104 = tail call double @log(double %103) #7
  %105 = getelementptr inbounds double, double* %43, i64 3
  store double %104, double* %105, align 8
  %106 = getelementptr inbounds double, double* %43, i64 4
  %107 = add i16 %42, 1
  %108 = sext i16 %107 to i32
  %109 = icmp sgt i32 %11, %108
  br i1 %109, label %41, label %110

110:                                              ; preds = %41
  store double %76, double* %25, align 8
  %111 = getelementptr inbounds [100 x double], [100 x double]* %5, i64 0, i64 0
  store double %84, double* %111, align 16
  br label %112

112:                                              ; preds = %110, %2
  %113 = phi i16 [ -1, %2 ], [ 0, %110 ]
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %7) #7
  ret i16 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Lar2Poly(double* nocapture readonly, double* nocapture, i32, double* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [12 x double], align 16
  %8 = alloca [100 x double], align 16
  %9 = bitcast [100 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 800, i1 false)
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %309

11:                                               ; preds = %6
  %12 = add i32 %2, 2
  %13 = add i32 %12, %4
  %14 = icmp sgt i32 %2, 0
  %15 = zext i32 %2 to i64
  %16 = bitcast [12 x double]* %7 to i8*
  %17 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 0
  %18 = icmp slt i32 %2, 1
  %19 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  %20 = bitcast double* %19 to i8*
  %21 = add i32 %2, 1
  %22 = zext i32 %21 to i64
  %23 = sext i32 %12 to i64
  %24 = icmp sgt i32 %4, 0
  %25 = zext i32 %4 to i64
  %26 = icmp slt i32 %4, 1
  %27 = add i32 %4, 1
  %28 = zext i32 %27 to i64
  %29 = sext i32 %21 to i64
  %30 = sext i32 %27 to i64
  %31 = sext i32 %13 to i64
  %32 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  %33 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 1
  br label %34

34:                                               ; preds = %295, %11
  %35 = phi i64 [ %308, %295 ], [ 0, %11 ]
  %36 = phi double* [ %305, %295 ], [ %0, %11 ]
  %37 = phi double* [ %304, %295 ], [ %3, %11 ]
  %38 = phi double* [ %303, %295 ], [ %1, %11 ]
  %39 = phi i32 [ %306, %295 ], [ 0, %11 ]
  %40 = mul i64 %35, %29
  %41 = add i64 %40, 1
  %42 = getelementptr double, double* %1, i64 %41
  %43 = bitcast double* %42 to i8*
  %44 = mul i64 %35, %30
  %45 = add i64 %44, 1
  %46 = getelementptr double, double* %3, i64 %45
  %47 = bitcast double* %46 to i8*
  %48 = getelementptr inbounds double, double* %36, i64 2
  br i1 %14, label %49, label %60

49:                                               ; preds = %34, %49
  %50 = phi i64 [ %58, %49 ], [ 0, %34 ]
  %51 = getelementptr inbounds double, double* %48, i64 %50
  %52 = load double, double* %51, align 8
  %53 = tail call double @exp(double %52) #7
  %54 = fadd double %53, -1.000000e+00
  %55 = fadd double %53, 1.000000e+00
  %56 = fdiv double %54, %55
  %57 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %50
  store double %56, double* %57, align 8
  %58 = add nuw nsw i64 %50, 1
  %59 = icmp eq i64 %58, %15
  br i1 %59, label %60, label %49

60:                                               ; preds = %49, %34
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -1, i64 96, i1 false) #7
  store double 1.000000e+00, double* %38, align 8
  store double 1.000000e+00, double* %17, align 16
  br i1 %18, label %171, label %61

61:                                               ; preds = %60
  %62 = getelementptr inbounds double, double* %38, i64 1
  %63 = bitcast double* %62 to i8*
  br label %64

64:                                               ; preds = %167, %61
  %65 = phi i64 [ %170, %167 ], [ 0, %61 ]
  %66 = phi i64 [ %168, %167 ], [ 1, %61 ]
  %67 = add i64 %41, %65
  %68 = getelementptr double, double* %1, i64 %67
  %69 = getelementptr [100 x double], [100 x double]* %8, i64 0, i64 %65
  %70 = bitcast double* %69 to i8*
  %71 = getelementptr i8, i8* %70, i64 1
  %72 = add i64 %65, 1
  %73 = getelementptr [12 x double], [12 x double]* %7, i64 0, i64 %72
  %74 = add nsw i64 %66, -1
  %75 = shl nsw i64 %74, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %63, i64 %75, i1 false) #7
  %76 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %74
  %77 = bitcast double* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds double, double* %38, i64 %66
  %80 = bitcast double* %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = icmp ugt i64 %66, 1
  br i1 %81, label %82, label %167

82:                                               ; preds = %64
  %83 = icmp ult i64 %65, 4
  br i1 %83, label %129, label %84

84:                                               ; preds = %82
  %85 = icmp ugt i8* %71, %43
  %86 = icmp ult double* %76, %68
  %87 = and i1 %85, %86
  %88 = icmp ult double* %42, %73
  %89 = icmp ult double* %33, %68
  %90 = and i1 %88, %89
  %91 = or i1 %87, %90
  br i1 %91, label %129, label %92

92:                                               ; preds = %84
  %93 = and i64 %65, -4
  %94 = or i64 %93, 1
  %95 = load double, double* %76, align 8, !alias.scope !74
  %96 = insertelement <2 x double> undef, double %95, i32 0
  %97 = shufflevector <2 x double> %96, <2 x double> undef, <2 x i32> zeroinitializer
  %98 = insertelement <2 x double> undef, double %95, i32 0
  %99 = shufflevector <2 x double> %98, <2 x double> undef, <2 x i32> zeroinitializer
  br label %100

100:                                              ; preds = %100, %92
  %101 = phi i64 [ 0, %92 ], [ %125, %100 ]
  %102 = or i64 %101, 1
  %103 = sub nsw i64 %66, %102
  %104 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %103
  %105 = getelementptr inbounds double, double* %104, i64 -1
  %106 = bitcast double* %105 to <2 x double>*
  %107 = load <2 x double>, <2 x double>* %106, align 8, !alias.scope !77
  %108 = shufflevector <2 x double> %107, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %109 = getelementptr inbounds double, double* %104, i64 -3
  %110 = bitcast double* %109 to <2 x double>*
  %111 = load <2 x double>, <2 x double>* %110, align 8, !alias.scope !77
  %112 = shufflevector <2 x double> %111, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %113 = fmul <2 x double> %97, %108
  %114 = fmul <2 x double> %99, %112
  %115 = getelementptr inbounds double, double* %38, i64 %102
  %116 = bitcast double* %115 to <2 x double>*
  %117 = load <2 x double>, <2 x double>* %116, align 8, !alias.scope !79, !noalias !81
  %118 = getelementptr inbounds double, double* %115, i64 2
  %119 = bitcast double* %118 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 8, !alias.scope !79, !noalias !81
  %121 = fadd <2 x double> %117, %113
  %122 = fadd <2 x double> %120, %114
  %123 = bitcast double* %115 to <2 x double>*
  store <2 x double> %121, <2 x double>* %123, align 8, !alias.scope !79, !noalias !81
  %124 = bitcast double* %118 to <2 x double>*
  store <2 x double> %122, <2 x double>* %124, align 8, !alias.scope !79, !noalias !81
  %125 = add i64 %101, 4
  %126 = icmp eq i64 %125, %93
  br i1 %126, label %127, label %100, !llvm.loop !82

127:                                              ; preds = %100
  %128 = icmp eq i64 %65, %93
  br i1 %128, label %167, label %129

129:                                              ; preds = %127, %84, %82
  %130 = phi i64 [ 1, %84 ], [ 1, %82 ], [ %94, %127 ]
  %131 = and i64 %65, 1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %143, label %133

133:                                              ; preds = %129
  %134 = load double, double* %76, align 8
  %135 = sub nsw i64 %66, %130
  %136 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %135
  %137 = load double, double* %136, align 8
  %138 = fmul double %134, %137
  %139 = getelementptr inbounds double, double* %38, i64 %130
  %140 = load double, double* %139, align 8
  %141 = fadd double %140, %138
  store double %141, double* %139, align 8
  %142 = add nuw nsw i64 %130, 1
  br label %143

143:                                              ; preds = %133, %129
  %144 = phi i64 [ %142, %133 ], [ %130, %129 ]
  %145 = icmp eq i64 %65, %130
  br i1 %145, label %167, label %146

146:                                              ; preds = %143, %146
  %147 = phi i64 [ %165, %146 ], [ %144, %143 ]
  %148 = load double, double* %76, align 8
  %149 = sub nsw i64 %66, %147
  %150 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %149
  %151 = load double, double* %150, align 8
  %152 = fmul double %148, %151
  %153 = getelementptr inbounds double, double* %38, i64 %147
  %154 = load double, double* %153, align 8
  %155 = fadd double %154, %152
  store double %155, double* %153, align 8
  %156 = add nuw nsw i64 %147, 1
  %157 = load double, double* %76, align 8
  %158 = sub nsw i64 %66, %156
  %159 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %158
  %160 = load double, double* %159, align 8
  %161 = fmul double %157, %160
  %162 = getelementptr inbounds double, double* %38, i64 %156
  %163 = load double, double* %162, align 8
  %164 = fadd double %163, %161
  store double %164, double* %162, align 8
  %165 = add nuw nsw i64 %147, 2
  %166 = icmp eq i64 %165, %66
  br i1 %166, label %167, label %146, !llvm.loop !83

167:                                              ; preds = %143, %146, %127, %64
  %168 = add nuw nsw i64 %66, 1
  %169 = icmp eq i64 %168, %22
  %170 = add i64 %65, 1
  br i1 %169, label %171, label %64

171:                                              ; preds = %167, %60
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %16) #7
  %172 = getelementptr inbounds double, double* %36, i64 %23
  br i1 %24, label %173, label %184

173:                                              ; preds = %171, %173
  %174 = phi i64 [ %182, %173 ], [ 0, %171 ]
  %175 = getelementptr inbounds double, double* %172, i64 %174
  %176 = load double, double* %175, align 8
  %177 = tail call double @exp(double %176) #7
  %178 = fadd double %177, -1.000000e+00
  %179 = fadd double %177, 1.000000e+00
  %180 = fdiv double %178, %179
  %181 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %174
  store double %180, double* %181, align 8
  %182 = add nuw nsw i64 %174, 1
  %183 = icmp eq i64 %182, %25
  br i1 %183, label %184, label %173

184:                                              ; preds = %173, %171
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -1, i64 96, i1 false) #7
  store double 1.000000e+00, double* %37, align 8
  store double 1.000000e+00, double* %17, align 16
  br i1 %26, label %295, label %185

185:                                              ; preds = %184
  %186 = getelementptr inbounds double, double* %37, i64 1
  %187 = bitcast double* %186 to i8*
  br label %188

188:                                              ; preds = %291, %185
  %189 = phi i64 [ %294, %291 ], [ 0, %185 ]
  %190 = phi i64 [ %292, %291 ], [ 1, %185 ]
  %191 = add i64 %45, %189
  %192 = getelementptr double, double* %3, i64 %191
  %193 = getelementptr [100 x double], [100 x double]* %8, i64 0, i64 %189
  %194 = bitcast double* %193 to i8*
  %195 = getelementptr i8, i8* %194, i64 1
  %196 = add i64 %189, 1
  %197 = getelementptr [12 x double], [12 x double]* %7, i64 0, i64 %196
  %198 = add nsw i64 %190, -1
  %199 = shl nsw i64 %198, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %187, i64 %199, i1 false) #7
  %200 = getelementptr inbounds [100 x double], [100 x double]* %8, i64 0, i64 %198
  %201 = bitcast double* %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds double, double* %37, i64 %190
  %204 = bitcast double* %203 to i64*
  store i64 %202, i64* %204, align 8
  %205 = icmp ugt i64 %190, 1
  br i1 %205, label %206, label %291

206:                                              ; preds = %188
  %207 = icmp ult i64 %189, 4
  br i1 %207, label %253, label %208

208:                                              ; preds = %206
  %209 = icmp ugt i8* %195, %47
  %210 = icmp ult double* %200, %192
  %211 = and i1 %209, %210
  %212 = icmp ult double* %46, %197
  %213 = icmp ult double* %32, %192
  %214 = and i1 %212, %213
  %215 = or i1 %211, %214
  br i1 %215, label %253, label %216

216:                                              ; preds = %208
  %217 = and i64 %189, -4
  %218 = or i64 %217, 1
  %219 = load double, double* %200, align 8, !alias.scope !84
  %220 = insertelement <2 x double> undef, double %219, i32 0
  %221 = shufflevector <2 x double> %220, <2 x double> undef, <2 x i32> zeroinitializer
  %222 = insertelement <2 x double> undef, double %219, i32 0
  %223 = shufflevector <2 x double> %222, <2 x double> undef, <2 x i32> zeroinitializer
  br label %224

224:                                              ; preds = %224, %216
  %225 = phi i64 [ 0, %216 ], [ %249, %224 ]
  %226 = or i64 %225, 1
  %227 = sub nsw i64 %190, %226
  %228 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %227
  %229 = getelementptr inbounds double, double* %228, i64 -1
  %230 = bitcast double* %229 to <2 x double>*
  %231 = load <2 x double>, <2 x double>* %230, align 8, !alias.scope !87
  %232 = shufflevector <2 x double> %231, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %233 = getelementptr inbounds double, double* %228, i64 -3
  %234 = bitcast double* %233 to <2 x double>*
  %235 = load <2 x double>, <2 x double>* %234, align 8, !alias.scope !87
  %236 = shufflevector <2 x double> %235, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %237 = fmul <2 x double> %221, %232
  %238 = fmul <2 x double> %223, %236
  %239 = getelementptr inbounds double, double* %37, i64 %226
  %240 = bitcast double* %239 to <2 x double>*
  %241 = load <2 x double>, <2 x double>* %240, align 8, !alias.scope !89, !noalias !91
  %242 = getelementptr inbounds double, double* %239, i64 2
  %243 = bitcast double* %242 to <2 x double>*
  %244 = load <2 x double>, <2 x double>* %243, align 8, !alias.scope !89, !noalias !91
  %245 = fadd <2 x double> %241, %237
  %246 = fadd <2 x double> %244, %238
  %247 = bitcast double* %239 to <2 x double>*
  store <2 x double> %245, <2 x double>* %247, align 8, !alias.scope !89, !noalias !91
  %248 = bitcast double* %242 to <2 x double>*
  store <2 x double> %246, <2 x double>* %248, align 8, !alias.scope !89, !noalias !91
  %249 = add i64 %225, 4
  %250 = icmp eq i64 %249, %217
  br i1 %250, label %251, label %224, !llvm.loop !92

251:                                              ; preds = %224
  %252 = icmp eq i64 %189, %217
  br i1 %252, label %291, label %253

253:                                              ; preds = %251, %208, %206
  %254 = phi i64 [ 1, %208 ], [ 1, %206 ], [ %218, %251 ]
  %255 = and i64 %189, 1
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %267, label %257

257:                                              ; preds = %253
  %258 = load double, double* %200, align 8
  %259 = sub nsw i64 %190, %254
  %260 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %259
  %261 = load double, double* %260, align 8
  %262 = fmul double %258, %261
  %263 = getelementptr inbounds double, double* %37, i64 %254
  %264 = load double, double* %263, align 8
  %265 = fadd double %264, %262
  store double %265, double* %263, align 8
  %266 = add nuw nsw i64 %254, 1
  br label %267

267:                                              ; preds = %257, %253
  %268 = phi i64 [ %266, %257 ], [ %254, %253 ]
  %269 = icmp eq i64 %189, %254
  br i1 %269, label %291, label %270

270:                                              ; preds = %267, %270
  %271 = phi i64 [ %289, %270 ], [ %268, %267 ]
  %272 = load double, double* %200, align 8
  %273 = sub nsw i64 %190, %271
  %274 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %273
  %275 = load double, double* %274, align 8
  %276 = fmul double %272, %275
  %277 = getelementptr inbounds double, double* %37, i64 %271
  %278 = load double, double* %277, align 8
  %279 = fadd double %278, %276
  store double %279, double* %277, align 8
  %280 = add nuw nsw i64 %271, 1
  %281 = load double, double* %200, align 8
  %282 = sub nsw i64 %190, %280
  %283 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %282
  %284 = load double, double* %283, align 8
  %285 = fmul double %281, %284
  %286 = getelementptr inbounds double, double* %37, i64 %280
  %287 = load double, double* %286, align 8
  %288 = fadd double %287, %285
  store double %288, double* %286, align 8
  %289 = add nuw nsw i64 %271, 2
  %290 = icmp eq i64 %289, %190
  br i1 %290, label %291, label %270, !llvm.loop !93

291:                                              ; preds = %267, %270, %251, %188
  %292 = add nuw nsw i64 %190, 1
  %293 = icmp eq i64 %292, %28
  %294 = add i64 %189, 1
  br i1 %293, label %295, label %188

295:                                              ; preds = %291, %184
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %16) #7
  %296 = bitcast double* %36 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast double* %38 to i64*
  store i64 %297, i64* %298, align 8
  %299 = getelementptr inbounds double, double* %36, i64 1
  %300 = bitcast double* %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast double* %37 to i64*
  store i64 %301, i64* %302, align 8
  %303 = getelementptr inbounds double, double* %38, i64 %29
  %304 = getelementptr inbounds double, double* %37, i64 %30
  %305 = getelementptr inbounds double, double* %36, i64 %31
  %306 = add nuw nsw i32 %39, 1
  %307 = icmp eq i32 %306, %5
  %308 = add i64 %35, 1
  br i1 %307, label %309, label %34

309:                                              ; preds = %295, %6
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %9) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_Lar2PolyInterpolUB(double* nocapture readonly, double* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [12 x double], align 16
  %5 = alloca [4 x double], align 16
  %6 = alloca [4 x double], align 16
  %7 = bitcast [4 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #7
  %8 = getelementptr inbounds [4 x double], [4 x double]* %5, i64 0, i64 0
  %9 = getelementptr inbounds [4 x double], [4 x double]* %5, i64 0, i64 1
  %10 = getelementptr inbounds [4 x double], [4 x double]* %5, i64 0, i64 2
  %11 = getelementptr inbounds [4 x double], [4 x double]* %5, i64 0, i64 3
  %12 = bitcast [4 x double]* %6 to i8*
  %13 = bitcast [4 x double]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #7
  %14 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 0
  %15 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 1
  %16 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 2
  %17 = getelementptr inbounds [4 x double], [4 x double]* %6, i64 0, i64 3
  %18 = add nsw i32 %2, -1
  %19 = sitofp i32 %18 to double
  %20 = getelementptr inbounds double, double* %0, i64 4
  %21 = bitcast double* %20 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = getelementptr inbounds double, double* %0, i64 1
  %24 = bitcast double* %0 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = fsub <2 x double> %22, %25
  %27 = insertelement <2 x double> undef, double %19, i32 0
  %28 = shufflevector <2 x double> %27, <2 x double> undef, <2 x i32> zeroinitializer
  %29 = fdiv <2 x double> %26, %28
  %30 = bitcast [4 x double]* %6 to <2 x double>*
  store <2 x double> %29, <2 x double>* %30, align 16
  %31 = getelementptr inbounds double, double* %0, i64 6
  %32 = getelementptr inbounds double, double* %0, i64 2
  %33 = bitcast double* %31 to <2 x double>*
  %34 = load <2 x double>, <2 x double>* %33, align 8
  %35 = getelementptr inbounds double, double* %0, i64 3
  %36 = bitcast double* %32 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = fsub <2 x double> %34, %37
  %39 = fdiv <2 x double> %38, %28
  %40 = bitcast double* %16 to <2 x double>*
  store <2 x double> %39, <2 x double>* %40, align 16
  %41 = icmp sgt i32 %2, 0
  br i1 %41, label %42, label %66

42:                                               ; preds = %3
  %43 = bitcast [12 x double]* %4 to i8*
  %44 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 0
  %45 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %46 = bitcast double* %45 to i8*
  %47 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 2
  %48 = bitcast double* %47 to i8*
  %49 = bitcast double* %10 to i64*
  %50 = bitcast double* %11 to i64*
  %51 = extractelement <2 x double> %29, i32 0
  %52 = extractelement <2 x double> %29, i32 1
  %53 = extractelement <2 x double> %25, i32 0
  %54 = extractelement <2 x double> %25, i32 1
  %55 = extractelement <2 x double> %39, i32 0
  %56 = extractelement <2 x double> %39, i32 1
  %57 = extractelement <2 x double> %37, i32 0
  %58 = extractelement <2 x double> %37, i32 1
  %59 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 2
  %60 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %61 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 3
  %62 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 2
  %63 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %64 = load double, double* %14, align 16
  br label %67

65:                                               ; preds = %67
  store double %90, double* %8, align 1
  br label %66

66:                                               ; preds = %65, %3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7
  ret void

67:                                               ; preds = %42, %147
  %68 = phi double [ %56, %42 ], [ %155, %147 ]
  %69 = phi double [ %58, %42 ], [ %154, %147 ]
  %70 = phi double [ %55, %42 ], [ %153, %147 ]
  %71 = phi double [ %57, %42 ], [ %152, %147 ]
  %72 = phi double [ %52, %42 ], [ %151, %147 ]
  %73 = phi double [ %54, %42 ], [ %150, %147 ]
  %74 = phi double [ %51, %42 ], [ %64, %147 ]
  %75 = phi double [ %53, %42 ], [ %149, %147 ]
  %76 = phi i32 [ 0, %42 ], [ %145, %147 ]
  %77 = phi double* [ %1, %42 ], [ %148, %147 ]
  %78 = sitofp i32 %76 to double
  %79 = fmul double %74, %78
  %80 = fadd double %75, %79
  %81 = fmul double %72, %78
  %82 = fadd double %73, %81
  %83 = fmul double %70, %78
  %84 = fadd double %71, %83
  %85 = fmul double %68, %78
  %86 = fadd double %69, %85
  %87 = tail call double @exp(double %80) #7
  %88 = fadd double %87, -1.000000e+00
  %89 = fadd double %87, 1.000000e+00
  %90 = fdiv double %88, %89
  %91 = tail call double @exp(double %82) #7
  %92 = fadd double %91, -1.000000e+00
  %93 = fadd double %91, 1.000000e+00
  %94 = fdiv double %92, %93
  store double %94, double* %9, align 8
  %95 = tail call double @exp(double %84) #7
  %96 = fadd double %95, -1.000000e+00
  %97 = fadd double %95, 1.000000e+00
  %98 = fdiv double %96, %97
  store double %98, double* %10, align 16
  %99 = tail call double @exp(double %86) #7
  %100 = fadd double %99, -1.000000e+00
  %101 = fadd double %99, 1.000000e+00
  %102 = fdiv double %100, %101
  store double %102, double* %11, align 8
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %43) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -1, i64 80, i1 false) #7
  store double 1.000000e+00, double* %77, align 8
  store double 1.000000e+00, double* %44, align 16
  %103 = getelementptr inbounds double, double* %77, i64 1
  %104 = bitcast double* %103 to i8*
  store double %90, double* %103, align 8
  store double %90, double* %45, align 8
  %105 = getelementptr inbounds double, double* %77, i64 2
  store double %94, double* %105, align 8
  %106 = fmul double %94, %90
  %107 = getelementptr inbounds double, double* %77, i64 1
  %108 = fadd double %90, %106
  store double %108, double* %107, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %104, i64 16, i1 false) #7
  %109 = load i64, i64* %49, align 16
  %110 = getelementptr inbounds double, double* %77, i64 3
  %111 = bitcast double* %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = bitcast i64 %109 to double
  %113 = load double, double* %59, align 16
  %114 = fmul double %113, %112
  %115 = getelementptr inbounds double, double* %77, i64 1
  %116 = load double, double* %115, align 8
  %117 = fadd double %116, %114
  store double %117, double* %115, align 8
  %118 = load double, double* %10, align 16
  %119 = load double, double* %60, align 8
  %120 = fmul double %118, %119
  %121 = getelementptr inbounds double, double* %77, i64 2
  %122 = load double, double* %121, align 8
  %123 = fadd double %122, %120
  store double %123, double* %121, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %104, i64 24, i1 false) #7
  %124 = load i64, i64* %50, align 8
  %125 = getelementptr inbounds double, double* %77, i64 4
  %126 = bitcast double* %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = bitcast i64 %124 to double
  %128 = load double, double* %61, align 8
  %129 = fmul double %128, %127
  %130 = getelementptr inbounds double, double* %77, i64 1
  %131 = load double, double* %130, align 8
  %132 = fadd double %131, %129
  store double %132, double* %130, align 8
  %133 = load double, double* %11, align 8
  %134 = load double, double* %62, align 16
  %135 = fmul double %133, %134
  %136 = getelementptr inbounds double, double* %77, i64 2
  %137 = load double, double* %136, align 8
  %138 = fadd double %137, %135
  store double %138, double* %136, align 8
  %139 = load double, double* %11, align 8
  %140 = load double, double* %63, align 8
  %141 = fmul double %139, %140
  %142 = getelementptr inbounds double, double* %77, i64 3
  %143 = load double, double* %142, align 8
  %144 = fadd double %143, %141
  store double %144, double* %142, align 8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %43) #7
  %145 = add nuw nsw i32 %76, 1
  %146 = icmp eq i32 %145, %2
  br i1 %146, label %65, label %147

147:                                              ; preds = %67
  %148 = getelementptr inbounds double, double* %77, i64 5
  %149 = load double, double* %0, align 8
  %150 = load double, double* %23, align 8
  %151 = load double, double* %15, align 8
  %152 = load double, double* %32, align 8
  %153 = load double, double* %16, align 16
  %154 = load double, double* %35, align 8
  %155 = load double, double* %17, align 8
  br label %67
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeLpc(%struct.Bitstreamstruct*, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %4 = alloca [120 x double], align 16
  %5 = bitcast [120 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 960, i1 false)
  %6 = getelementptr inbounds [120 x double], [120 x double]* %4, i64 0, i64 0
  %7 = call i32 @WebRtcIsac_DecodeLpcCoef(%struct.Bitstreamstruct* %0, double* nonnull %6)
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %3
  call void @WebRtcIsac_Lar2Poly(double* nonnull %6, double* %1, i32 12, double* %2, i32 6, i32 6)
  br label %10

10:                                               ; preds = %3, %9
  %11 = phi i32 [ 0, %9 ], [ -6680, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %5) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeLpcCoef(%struct.Bitstreamstruct*, double* nocapture) local_unnamed_addr #0 {
  %3 = alloca [12 x i32], align 16
  %4 = alloca [108 x i32], align 16
  %5 = alloca [12 x double], align 16
  %6 = alloca [108 x double], align 16
  %7 = alloca [12 x double], align 16
  %8 = alloca [108 x double], align 16
  %9 = alloca i32, align 4
  %10 = bitcast [12 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 48, i1 false)
  %11 = bitcast [108 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 432, i1 false)
  %12 = bitcast [12 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 96, i1 false)
  %13 = bitcast [108 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 864, i1 false)
  %14 = bitcast [12 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 96, i1 false)
  %15 = bitcast [108 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %15) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 864, i1 false)
  %16 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
  store i32 1, i32* %9, align 4
  %17 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %9, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQKltModelCdfPtr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQKltModelInitIndex, i64 0, i64 0), i32 1) #7
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %879, label %19

19:                                               ; preds = %2
  %20 = load i32, i32* %9, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %879

22:                                               ; preds = %19
  %23 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 0
  %24 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %23, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([108 x i16*], [108 x i16*]* @WebRtcIsac_kQKltCdfPtrShape, i64 0, i64 0), i16* getelementptr inbounds ([108 x i16], [108 x i16]* @WebRtcIsac_kQKltInitIndexShape, i64 0, i64 0), i32 108) #7
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %879, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 0
  %28 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %27, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([12 x i16*], [12 x i16*]* @WebRtcIsac_kQKltCdfPtrGain, i64 0, i64 0), i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltInitIndexGain, i64 0, i64 0), i32 12) #7
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %879, label %30

30:                                               ; preds = %26, %30
  %31 = phi i64 [ %57, %30 ], [ 0, %26 ]
  %32 = getelementptr inbounds [108 x i16], [108 x i16]* @WebRtcIsac_kQKltOffsetShape, i64 0, i64 %31
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %31
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, %34
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %38
  %40 = bitcast double* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %31
  %43 = bitcast double* %42 to i64*
  store i64 %41, i64* %43, align 16
  %44 = or i64 %31, 1
  %45 = getelementptr inbounds [108 x i16], [108 x i16]* @WebRtcIsac_kQKltOffsetShape, i64 0, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %44
  %49 = load i32, i32* %48, align 4
  %50 = add nsw i32 %49, %47
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %51
  %53 = bitcast double* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %44
  %56 = bitcast double* %55 to i64*
  store i64 %54, i64* %56, align 8
  %57 = add nuw nsw i64 %31, 2
  %58 = icmp eq i64 %57, 108
  br i1 %58, label %59, label %30

59:                                               ; preds = %30
  %60 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 0), align 16
  %61 = zext i16 %60 to i32
  %62 = load i32, i32* %27, align 16
  %63 = add nsw i32 %62, %61
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %64
  %66 = bitcast double* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast [12 x double]* %5 to i64*
  store i64 %67, i64* %68, align 16
  %69 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 1), align 2
  %70 = zext i16 %69 to i32
  %71 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 1
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %72, %70
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %74
  %76 = bitcast double* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 1
  %79 = bitcast double* %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 2), align 4
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 2
  %83 = load i32, i32* %82, align 8
  %84 = add nsw i32 %83, %81
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %85
  %87 = bitcast double* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 2
  %90 = bitcast double* %89 to i64*
  store i64 %88, i64* %90, align 16
  %91 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 3), align 2
  %92 = zext i16 %91 to i32
  %93 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 3
  %94 = load i32, i32* %93, align 4
  %95 = add nsw i32 %94, %92
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %96
  %98 = bitcast double* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 3
  %101 = bitcast double* %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 4), align 8
  %103 = zext i16 %102 to i32
  %104 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 4
  %105 = load i32, i32* %104, align 16
  %106 = add nsw i32 %105, %103
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %107
  %109 = bitcast double* %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 4
  %112 = bitcast double* %111 to i64*
  store i64 %110, i64* %112, align 16
  %113 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 5), align 2
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 5
  %116 = load i32, i32* %115, align 4
  %117 = add nsw i32 %116, %114
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %118
  %120 = bitcast double* %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 5
  %123 = bitcast double* %122 to i64*
  store i64 %121, i64* %123, align 8
  %124 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 6), align 4
  %125 = zext i16 %124 to i32
  %126 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 6
  %127 = load i32, i32* %126, align 8
  %128 = add nsw i32 %127, %125
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %129
  %131 = bitcast double* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 6
  %134 = bitcast double* %133 to i64*
  store i64 %132, i64* %134, align 16
  %135 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 7), align 2
  %136 = zext i16 %135 to i32
  %137 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 7
  %138 = load i32, i32* %137, align 4
  %139 = add nsw i32 %138, %136
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %140
  %142 = bitcast double* %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 7
  %145 = bitcast double* %144 to i64*
  store i64 %143, i64* %145, align 8
  %146 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 8), align 16
  %147 = zext i16 %146 to i32
  %148 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 8
  %149 = load i32, i32* %148, align 16
  %150 = add nsw i32 %149, %147
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %151
  %153 = bitcast double* %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 8
  %156 = bitcast double* %155 to i64*
  store i64 %154, i64* %156, align 16
  %157 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 9), align 2
  %158 = zext i16 %157 to i32
  %159 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 9
  %160 = load i32, i32* %159, align 4
  %161 = add nsw i32 %160, %158
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %162
  %164 = bitcast double* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 9
  %167 = bitcast double* %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 10), align 4
  %169 = zext i16 %168 to i32
  %170 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 10
  %171 = load i32, i32* %170, align 8
  %172 = add nsw i32 %171, %169
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %173
  %175 = bitcast double* %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 10
  %178 = bitcast double* %177 to i64*
  store i64 %176, i64* %178, align 16
  %179 = load i16, i16* getelementptr inbounds ([12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 11), align 2
  %180 = zext i16 %179 to i32
  %181 = getelementptr inbounds [12 x i32], [12 x i32]* %3, i64 0, i64 11
  %182 = load i32, i32* %181, align 4
  %183 = add nsw i32 %182, %180
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %184
  %186 = bitcast double* %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 11
  %189 = bitcast double* %188 to i64*
  store i64 %187, i64* %189, align 8
  %190 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 0), align 16
  %191 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 1), align 8
  %192 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 2), align 16
  %193 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 3), align 8
  %194 = insertelement <2 x double> undef, double %190, i32 0
  %195 = insertelement <2 x double> %194, double %192, i32 1
  %196 = insertelement <2 x double> undef, double %191, i32 0
  %197 = insertelement <2 x double> %196, double %193, i32 1
  br label %198

198:                                              ; preds = %371, %59
  %199 = phi i64 [ 0, %59 ], [ %373, %371 ]
  %200 = phi i64 [ 0, %59 ], [ %205, %371 ]
  %201 = phi i32 [ 0, %59 ], [ %222, %371 ]
  %202 = phi i32 [ 0, %59 ], [ %372, %371 ]
  %203 = or i64 %200, 1
  %204 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %200
  %205 = add nuw nsw i64 %200, 2
  %206 = load double, double* %204, align 16
  %207 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %203
  %208 = load double, double* %207, align 8
  %209 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 %200
  %210 = insertelement <2 x double> undef, double %206, i32 0
  %211 = shufflevector <2 x double> %210, <2 x double> undef, <2 x i32> zeroinitializer
  %212 = fmul <2 x double> %211, %195
  %213 = fadd <2 x double> %212, zeroinitializer
  %214 = insertelement <2 x double> undef, double %208, i32 0
  %215 = shufflevector <2 x double> %214, <2 x double> undef, <2 x i32> zeroinitializer
  %216 = fmul <2 x double> %215, %197
  %217 = fadd <2 x double> %213, %216
  %218 = bitcast double* %209 to <2 x double>*
  store <2 x double> %217, <2 x double>* %218, align 16
  %219 = or i64 %199, 1
  %220 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %199
  %221 = sext i32 %201 to i64
  %222 = add i32 %201, 18
  %223 = load double, double* %220, align 16
  %224 = add nuw nsw i64 %219, 1
  %225 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %219
  %226 = load double, double* %225, align 8
  %227 = add nuw nsw i64 %219, 2
  %228 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %224
  %229 = load double, double* %228, align 16
  %230 = add nuw nsw i64 %219, 3
  %231 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %227
  %232 = load double, double* %231, align 8
  %233 = add nuw nsw i64 %219, 4
  %234 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %230
  %235 = load double, double* %234, align 16
  %236 = add nuw nsw i64 %219, 5
  %237 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %233
  %238 = load double, double* %237, align 8
  %239 = add nuw nsw i64 %219, 6
  %240 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %236
  %241 = load double, double* %240, align 16
  %242 = add nuw nsw i64 %219, 7
  %243 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %239
  %244 = load double, double* %243, align 8
  %245 = add nuw nsw i64 %219, 8
  %246 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %242
  %247 = load double, double* %246, align 16
  %248 = add nuw nsw i64 %219, 9
  %249 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %245
  %250 = load double, double* %249, align 8
  %251 = add nuw nsw i64 %219, 10
  %252 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %248
  %253 = load double, double* %252, align 16
  %254 = add nuw nsw i64 %219, 11
  %255 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %251
  %256 = load double, double* %255, align 8
  %257 = add nuw nsw i64 %219, 12
  %258 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %254
  %259 = load double, double* %258, align 16
  %260 = add nuw nsw i64 %219, 13
  %261 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %257
  %262 = load double, double* %261, align 8
  %263 = add nuw nsw i64 %219, 14
  %264 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %260
  %265 = load double, double* %264, align 16
  %266 = add nuw nsw i64 %219, 15
  %267 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %263
  %268 = load double, double* %267, align 8
  %269 = add nuw nsw i64 %219, 16
  %270 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %266
  %271 = load double, double* %270, align 16
  %272 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %269
  %273 = load double, double* %272, align 8
  br label %274

274:                                              ; preds = %274, %198
  %275 = phi i64 [ %221, %198 ], [ %366, %274 ]
  %276 = phi i64 [ 0, %198 ], [ %368, %274 ]
  %277 = or i64 %276, 1
  %278 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %276
  %279 = load double, double* %278, align 16
  %280 = fmul double %223, %279
  %281 = fadd double %280, 0.000000e+00
  %282 = add nuw nsw i64 %277, 1
  %283 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %277
  %284 = load double, double* %283, align 8
  %285 = fmul double %226, %284
  %286 = fadd double %281, %285
  %287 = add nuw nsw i64 %277, 2
  %288 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %282
  %289 = load double, double* %288, align 16
  %290 = fmul double %229, %289
  %291 = fadd double %286, %290
  %292 = add nuw nsw i64 %277, 3
  %293 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %287
  %294 = load double, double* %293, align 8
  %295 = fmul double %232, %294
  %296 = fadd double %291, %295
  %297 = add nuw nsw i64 %277, 4
  %298 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %292
  %299 = load double, double* %298, align 16
  %300 = fmul double %235, %299
  %301 = fadd double %296, %300
  %302 = add nuw nsw i64 %277, 5
  %303 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %297
  %304 = load double, double* %303, align 8
  %305 = fmul double %238, %304
  %306 = fadd double %301, %305
  %307 = add nuw nsw i64 %277, 6
  %308 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %302
  %309 = load double, double* %308, align 16
  %310 = fmul double %241, %309
  %311 = fadd double %306, %310
  %312 = add nuw nsw i64 %277, 7
  %313 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %307
  %314 = load double, double* %313, align 8
  %315 = fmul double %244, %314
  %316 = fadd double %311, %315
  %317 = add nuw nsw i64 %277, 8
  %318 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %312
  %319 = load double, double* %318, align 16
  %320 = fmul double %247, %319
  %321 = fadd double %316, %320
  %322 = add nuw nsw i64 %277, 9
  %323 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %317
  %324 = load double, double* %323, align 8
  %325 = fmul double %250, %324
  %326 = fadd double %321, %325
  %327 = add nuw nsw i64 %277, 10
  %328 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %322
  %329 = load double, double* %328, align 16
  %330 = fmul double %253, %329
  %331 = fadd double %326, %330
  %332 = add nuw nsw i64 %277, 11
  %333 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %327
  %334 = load double, double* %333, align 8
  %335 = fmul double %256, %334
  %336 = fadd double %331, %335
  %337 = add nuw nsw i64 %277, 12
  %338 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %332
  %339 = load double, double* %338, align 16
  %340 = fmul double %259, %339
  %341 = fadd double %336, %340
  %342 = add nuw nsw i64 %277, 13
  %343 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %337
  %344 = load double, double* %343, align 8
  %345 = fmul double %262, %344
  %346 = fadd double %341, %345
  %347 = add nuw nsw i64 %277, 14
  %348 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %342
  %349 = load double, double* %348, align 16
  %350 = fmul double %265, %349
  %351 = fadd double %346, %350
  %352 = add nuw nsw i64 %277, 15
  %353 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %347
  %354 = load double, double* %353, align 8
  %355 = fmul double %268, %354
  %356 = fadd double %351, %355
  %357 = add nuw nsw i64 %277, 16
  %358 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %352
  %359 = load double, double* %358, align 16
  %360 = fmul double %271, %359
  %361 = fadd double %356, %360
  %362 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %357
  %363 = load double, double* %362, align 8
  %364 = fmul double %273, %363
  %365 = fadd double %361, %364
  %366 = add nsw i64 %275, 1
  %367 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 %275
  store double %365, double* %367, align 8
  %368 = add nuw nsw i64 %276, 18
  %369 = trunc i64 %366 to i32
  %370 = icmp eq i32 %222, %369
  br i1 %370, label %371, label %274

371:                                              ; preds = %274
  %372 = add nuw nsw i32 %202, 1
  %373 = add nuw nsw i64 %199, 18
  %374 = icmp eq i32 %372, 6
  br i1 %374, label %375, label %198

375:                                              ; preds = %371
  %376 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 2
  %377 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 4
  %378 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 6
  %379 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 8
  %380 = getelementptr inbounds [12 x double], [12 x double]* %7, i64 0, i64 10
  %381 = bitcast [12 x double]* %7 to <2 x double>*
  %382 = load <2 x double>, <2 x double>* %381, align 16
  %383 = bitcast double* %376 to <2 x double>*
  %384 = load <2 x double>, <2 x double>* %383, align 16
  %385 = bitcast double* %377 to <2 x double>*
  %386 = load <2 x double>, <2 x double>* %385, align 16
  %387 = bitcast double* %378 to <2 x double>*
  %388 = load <2 x double>, <2 x double>* %387, align 16
  %389 = bitcast double* %379 to <2 x double>*
  %390 = load <2 x double>, <2 x double>* %389, align 16
  %391 = bitcast double* %380 to <2 x double>*
  %392 = load <2 x double>, <2 x double>* %391, align 16
  %393 = bitcast [108 x double]* %8 to <2 x double>*
  %394 = load <2 x double>, <2 x double>* %393, align 16
  %395 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 18
  %396 = bitcast double* %395 to <2 x double>*
  %397 = load <2 x double>, <2 x double>* %396, align 16
  %398 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 36
  %399 = bitcast double* %398 to <2 x double>*
  %400 = load <2 x double>, <2 x double>* %399, align 16
  %401 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 54
  %402 = bitcast double* %401 to <2 x double>*
  %403 = load <2 x double>, <2 x double>* %402, align 16
  %404 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 72
  %405 = bitcast double* %404 to <2 x double>*
  %406 = load <2 x double>, <2 x double>* %405, align 16
  %407 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 90
  %408 = bitcast double* %407 to <2 x double>*
  %409 = load <2 x double>, <2 x double>* %408, align 16
  %410 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 2
  %411 = bitcast double* %410 to <2 x double>*
  %412 = load <2 x double>, <2 x double>* %411, align 16
  %413 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 20
  %414 = bitcast double* %413 to <2 x double>*
  %415 = load <2 x double>, <2 x double>* %414, align 16
  %416 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 38
  %417 = bitcast double* %416 to <2 x double>*
  %418 = load <2 x double>, <2 x double>* %417, align 16
  %419 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 56
  %420 = bitcast double* %419 to <2 x double>*
  %421 = load <2 x double>, <2 x double>* %420, align 16
  %422 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 74
  %423 = bitcast double* %422 to <2 x double>*
  %424 = load <2 x double>, <2 x double>* %423, align 16
  %425 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 92
  %426 = bitcast double* %425 to <2 x double>*
  %427 = load <2 x double>, <2 x double>* %426, align 16
  %428 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 4
  %429 = bitcast double* %428 to <2 x double>*
  %430 = load <2 x double>, <2 x double>* %429, align 16
  %431 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 22
  %432 = bitcast double* %431 to <2 x double>*
  %433 = load <2 x double>, <2 x double>* %432, align 16
  %434 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 40
  %435 = bitcast double* %434 to <2 x double>*
  %436 = load <2 x double>, <2 x double>* %435, align 16
  %437 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 58
  %438 = bitcast double* %437 to <2 x double>*
  %439 = load <2 x double>, <2 x double>* %438, align 16
  %440 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 76
  %441 = bitcast double* %440 to <2 x double>*
  %442 = load <2 x double>, <2 x double>* %441, align 16
  %443 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 94
  %444 = bitcast double* %443 to <2 x double>*
  %445 = load <2 x double>, <2 x double>* %444, align 16
  %446 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 6
  %447 = bitcast double* %446 to <2 x double>*
  %448 = load <2 x double>, <2 x double>* %447, align 16
  %449 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 24
  %450 = bitcast double* %449 to <2 x double>*
  %451 = load <2 x double>, <2 x double>* %450, align 16
  %452 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 42
  %453 = bitcast double* %452 to <2 x double>*
  %454 = load <2 x double>, <2 x double>* %453, align 16
  %455 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 60
  %456 = bitcast double* %455 to <2 x double>*
  %457 = load <2 x double>, <2 x double>* %456, align 16
  %458 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 78
  %459 = bitcast double* %458 to <2 x double>*
  %460 = load <2 x double>, <2 x double>* %459, align 16
  %461 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 96
  %462 = bitcast double* %461 to <2 x double>*
  %463 = load <2 x double>, <2 x double>* %462, align 16
  %464 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 8
  %465 = bitcast double* %464 to <2 x double>*
  %466 = load <2 x double>, <2 x double>* %465, align 16
  %467 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 26
  %468 = bitcast double* %467 to <2 x double>*
  %469 = load <2 x double>, <2 x double>* %468, align 16
  %470 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 44
  %471 = bitcast double* %470 to <2 x double>*
  %472 = load <2 x double>, <2 x double>* %471, align 16
  %473 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 62
  %474 = bitcast double* %473 to <2 x double>*
  %475 = load <2 x double>, <2 x double>* %474, align 16
  %476 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 80
  %477 = bitcast double* %476 to <2 x double>*
  %478 = load <2 x double>, <2 x double>* %477, align 16
  %479 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 98
  %480 = bitcast double* %479 to <2 x double>*
  %481 = load <2 x double>, <2 x double>* %480, align 16
  %482 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 10
  %483 = bitcast double* %482 to <2 x double>*
  %484 = load <2 x double>, <2 x double>* %483, align 16
  %485 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 28
  %486 = bitcast double* %485 to <2 x double>*
  %487 = load <2 x double>, <2 x double>* %486, align 16
  %488 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 46
  %489 = bitcast double* %488 to <2 x double>*
  %490 = load <2 x double>, <2 x double>* %489, align 16
  %491 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 64
  %492 = bitcast double* %491 to <2 x double>*
  %493 = load <2 x double>, <2 x double>* %492, align 16
  %494 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 82
  %495 = bitcast double* %494 to <2 x double>*
  %496 = load <2 x double>, <2 x double>* %495, align 16
  %497 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 100
  %498 = bitcast double* %497 to <2 x double>*
  %499 = load <2 x double>, <2 x double>* %498, align 16
  %500 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 12
  %501 = bitcast double* %500 to <2 x double>*
  %502 = load <2 x double>, <2 x double>* %501, align 16
  %503 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 30
  %504 = bitcast double* %503 to <2 x double>*
  %505 = load <2 x double>, <2 x double>* %504, align 16
  %506 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 48
  %507 = bitcast double* %506 to <2 x double>*
  %508 = load <2 x double>, <2 x double>* %507, align 16
  %509 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 66
  %510 = bitcast double* %509 to <2 x double>*
  %511 = load <2 x double>, <2 x double>* %510, align 16
  %512 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 84
  %513 = bitcast double* %512 to <2 x double>*
  %514 = load <2 x double>, <2 x double>* %513, align 16
  %515 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 102
  %516 = bitcast double* %515 to <2 x double>*
  %517 = load <2 x double>, <2 x double>* %516, align 16
  %518 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 14
  %519 = bitcast double* %518 to <2 x double>*
  %520 = load <2 x double>, <2 x double>* %519, align 16
  %521 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 32
  %522 = bitcast double* %521 to <2 x double>*
  %523 = load <2 x double>, <2 x double>* %522, align 16
  %524 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 50
  %525 = bitcast double* %524 to <2 x double>*
  %526 = load <2 x double>, <2 x double>* %525, align 16
  %527 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 68
  %528 = bitcast double* %527 to <2 x double>*
  %529 = load <2 x double>, <2 x double>* %528, align 16
  %530 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 86
  %531 = bitcast double* %530 to <2 x double>*
  %532 = load <2 x double>, <2 x double>* %531, align 16
  %533 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 104
  %534 = bitcast double* %533 to <2 x double>*
  %535 = load <2 x double>, <2 x double>* %534, align 16
  %536 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 16
  %537 = bitcast double* %536 to <2 x double>*
  %538 = load <2 x double>, <2 x double>* %537, align 16
  %539 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 34
  %540 = bitcast double* %539 to <2 x double>*
  %541 = load <2 x double>, <2 x double>* %540, align 16
  %542 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 52
  %543 = bitcast double* %542 to <2 x double>*
  %544 = load <2 x double>, <2 x double>* %543, align 16
  %545 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 70
  %546 = bitcast double* %545 to <2 x double>*
  %547 = load <2 x double>, <2 x double>* %546, align 16
  %548 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 88
  %549 = bitcast double* %548 to <2 x double>*
  %550 = load <2 x double>, <2 x double>* %549, align 16
  %551 = getelementptr inbounds [108 x double], [108 x double]* %8, i64 0, i64 106
  %552 = bitcast double* %551 to <2 x double>*
  %553 = load <2 x double>, <2 x double>* %552, align 16
  br label %554

554:                                              ; preds = %554, %375
  %555 = phi i64 [ 0, %375 ], [ %761, %554 ]
  %556 = phi i64 [ 0, %375 ], [ %760, %554 ]
  %557 = phi i64 [ 0, %375 ], [ %759, %554 ]
  %558 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %557
  %559 = load double, double* %558, align 8
  %560 = add nuw nsw i64 %557, 6
  %561 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %560
  %562 = load double, double* %561, align 8
  %563 = add nuw nsw i64 %557, 12
  %564 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %563
  %565 = load double, double* %564, align 8
  %566 = add nuw nsw i64 %557, 18
  %567 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %566
  %568 = load double, double* %567, align 8
  %569 = add nuw nsw i64 %557, 24
  %570 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %569
  %571 = load double, double* %570, align 8
  %572 = add nuw nsw i64 %557, 30
  %573 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 %572
  %574 = load double, double* %573, align 8
  %575 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %556
  %576 = insertelement <2 x double> undef, double %559, i32 0
  %577 = shufflevector <2 x double> %576, <2 x double> undef, <2 x i32> zeroinitializer
  %578 = fmul <2 x double> %382, %577
  %579 = fadd <2 x double> %578, zeroinitializer
  %580 = insertelement <2 x double> undef, double %562, i32 0
  %581 = shufflevector <2 x double> %580, <2 x double> undef, <2 x i32> zeroinitializer
  %582 = fmul <2 x double> %384, %581
  %583 = fadd <2 x double> %579, %582
  %584 = insertelement <2 x double> undef, double %565, i32 0
  %585 = shufflevector <2 x double> %584, <2 x double> undef, <2 x i32> zeroinitializer
  %586 = fmul <2 x double> %386, %585
  %587 = fadd <2 x double> %583, %586
  %588 = insertelement <2 x double> undef, double %568, i32 0
  %589 = shufflevector <2 x double> %588, <2 x double> undef, <2 x i32> zeroinitializer
  %590 = fmul <2 x double> %388, %589
  %591 = fadd <2 x double> %587, %590
  %592 = insertelement <2 x double> undef, double %571, i32 0
  %593 = shufflevector <2 x double> %592, <2 x double> undef, <2 x i32> zeroinitializer
  %594 = fmul <2 x double> %390, %593
  %595 = fadd <2 x double> %591, %594
  %596 = insertelement <2 x double> undef, double %574, i32 0
  %597 = shufflevector <2 x double> %596, <2 x double> undef, <2 x i32> zeroinitializer
  %598 = fmul <2 x double> %392, %597
  %599 = fadd <2 x double> %595, %598
  %600 = bitcast double* %575 to <2 x double>*
  store <2 x double> %599, <2 x double>* %600, align 16
  %601 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %572
  %602 = load double, double* %601, align 8
  %603 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %569
  %604 = load double, double* %603, align 8
  %605 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %566
  %606 = load double, double* %605, align 8
  %607 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %563
  %608 = load double, double* %607, align 8
  %609 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %560
  %610 = load double, double* %609, align 8
  %611 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %557
  %612 = load double, double* %611, align 8
  %613 = insertelement <2 x double> undef, double %612, i32 0
  %614 = shufflevector <2 x double> %613, <2 x double> undef, <2 x i32> zeroinitializer
  %615 = insertelement <2 x double> undef, double %610, i32 0
  %616 = shufflevector <2 x double> %615, <2 x double> undef, <2 x i32> zeroinitializer
  %617 = insertelement <2 x double> undef, double %608, i32 0
  %618 = shufflevector <2 x double> %617, <2 x double> undef, <2 x i32> zeroinitializer
  %619 = insertelement <2 x double> undef, double %606, i32 0
  %620 = shufflevector <2 x double> %619, <2 x double> undef, <2 x i32> zeroinitializer
  %621 = insertelement <2 x double> undef, double %604, i32 0
  %622 = shufflevector <2 x double> %621, <2 x double> undef, <2 x i32> zeroinitializer
  %623 = insertelement <2 x double> undef, double %602, i32 0
  %624 = shufflevector <2 x double> %623, <2 x double> undef, <2 x i32> zeroinitializer
  %625 = fmul <2 x double> %394, %614
  %626 = fadd <2 x double> %625, zeroinitializer
  %627 = fmul <2 x double> %397, %616
  %628 = fadd <2 x double> %626, %627
  %629 = fmul <2 x double> %400, %618
  %630 = fadd <2 x double> %628, %629
  %631 = fmul <2 x double> %403, %620
  %632 = fadd <2 x double> %630, %631
  %633 = fmul <2 x double> %406, %622
  %634 = fadd <2 x double> %632, %633
  %635 = fmul <2 x double> %409, %624
  %636 = fadd <2 x double> %634, %635
  %637 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %555
  %638 = bitcast double* %637 to <2 x double>*
  store <2 x double> %636, <2 x double>* %638, align 16
  %639 = add nuw i64 %555, 2
  %640 = fmul <2 x double> %412, %614
  %641 = fadd <2 x double> %640, zeroinitializer
  %642 = fmul <2 x double> %415, %616
  %643 = fadd <2 x double> %641, %642
  %644 = fmul <2 x double> %418, %618
  %645 = fadd <2 x double> %643, %644
  %646 = fmul <2 x double> %421, %620
  %647 = fadd <2 x double> %645, %646
  %648 = fmul <2 x double> %424, %622
  %649 = fadd <2 x double> %647, %648
  %650 = fmul <2 x double> %427, %624
  %651 = fadd <2 x double> %649, %650
  %652 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %639
  %653 = bitcast double* %652 to <2 x double>*
  store <2 x double> %651, <2 x double>* %653, align 16
  %654 = add nuw i64 %555, 4
  %655 = fmul <2 x double> %430, %614
  %656 = fadd <2 x double> %655, zeroinitializer
  %657 = fmul <2 x double> %433, %616
  %658 = fadd <2 x double> %656, %657
  %659 = fmul <2 x double> %436, %618
  %660 = fadd <2 x double> %658, %659
  %661 = fmul <2 x double> %439, %620
  %662 = fadd <2 x double> %660, %661
  %663 = fmul <2 x double> %442, %622
  %664 = fadd <2 x double> %662, %663
  %665 = fmul <2 x double> %445, %624
  %666 = fadd <2 x double> %664, %665
  %667 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %654
  %668 = bitcast double* %667 to <2 x double>*
  store <2 x double> %666, <2 x double>* %668, align 16
  %669 = add nuw i64 %555, 6
  %670 = fmul <2 x double> %448, %614
  %671 = fadd <2 x double> %670, zeroinitializer
  %672 = fmul <2 x double> %451, %616
  %673 = fadd <2 x double> %671, %672
  %674 = fmul <2 x double> %454, %618
  %675 = fadd <2 x double> %673, %674
  %676 = fmul <2 x double> %457, %620
  %677 = fadd <2 x double> %675, %676
  %678 = fmul <2 x double> %460, %622
  %679 = fadd <2 x double> %677, %678
  %680 = fmul <2 x double> %463, %624
  %681 = fadd <2 x double> %679, %680
  %682 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %669
  %683 = bitcast double* %682 to <2 x double>*
  store <2 x double> %681, <2 x double>* %683, align 16
  %684 = add nuw i64 %555, 8
  %685 = fmul <2 x double> %466, %614
  %686 = fadd <2 x double> %685, zeroinitializer
  %687 = fmul <2 x double> %469, %616
  %688 = fadd <2 x double> %686, %687
  %689 = fmul <2 x double> %472, %618
  %690 = fadd <2 x double> %688, %689
  %691 = fmul <2 x double> %475, %620
  %692 = fadd <2 x double> %690, %691
  %693 = fmul <2 x double> %478, %622
  %694 = fadd <2 x double> %692, %693
  %695 = fmul <2 x double> %481, %624
  %696 = fadd <2 x double> %694, %695
  %697 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %684
  %698 = bitcast double* %697 to <2 x double>*
  store <2 x double> %696, <2 x double>* %698, align 16
  %699 = add nuw i64 %555, 10
  %700 = fmul <2 x double> %484, %614
  %701 = fadd <2 x double> %700, zeroinitializer
  %702 = fmul <2 x double> %487, %616
  %703 = fadd <2 x double> %701, %702
  %704 = fmul <2 x double> %490, %618
  %705 = fadd <2 x double> %703, %704
  %706 = fmul <2 x double> %493, %620
  %707 = fadd <2 x double> %705, %706
  %708 = fmul <2 x double> %496, %622
  %709 = fadd <2 x double> %707, %708
  %710 = fmul <2 x double> %499, %624
  %711 = fadd <2 x double> %709, %710
  %712 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %699
  %713 = bitcast double* %712 to <2 x double>*
  store <2 x double> %711, <2 x double>* %713, align 16
  %714 = add nuw i64 %555, 12
  %715 = fmul <2 x double> %502, %614
  %716 = fadd <2 x double> %715, zeroinitializer
  %717 = fmul <2 x double> %505, %616
  %718 = fadd <2 x double> %716, %717
  %719 = fmul <2 x double> %508, %618
  %720 = fadd <2 x double> %718, %719
  %721 = fmul <2 x double> %511, %620
  %722 = fadd <2 x double> %720, %721
  %723 = fmul <2 x double> %514, %622
  %724 = fadd <2 x double> %722, %723
  %725 = fmul <2 x double> %517, %624
  %726 = fadd <2 x double> %724, %725
  %727 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %714
  %728 = bitcast double* %727 to <2 x double>*
  store <2 x double> %726, <2 x double>* %728, align 16
  %729 = add nuw i64 %555, 14
  %730 = fmul <2 x double> %520, %614
  %731 = fadd <2 x double> %730, zeroinitializer
  %732 = fmul <2 x double> %523, %616
  %733 = fadd <2 x double> %731, %732
  %734 = fmul <2 x double> %526, %618
  %735 = fadd <2 x double> %733, %734
  %736 = fmul <2 x double> %529, %620
  %737 = fadd <2 x double> %735, %736
  %738 = fmul <2 x double> %532, %622
  %739 = fadd <2 x double> %737, %738
  %740 = fmul <2 x double> %535, %624
  %741 = fadd <2 x double> %739, %740
  %742 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %729
  %743 = bitcast double* %742 to <2 x double>*
  store <2 x double> %741, <2 x double>* %743, align 16
  %744 = add nuw i64 %555, 16
  %745 = fmul <2 x double> %538, %614
  %746 = fadd <2 x double> %745, zeroinitializer
  %747 = fmul <2 x double> %541, %616
  %748 = fadd <2 x double> %746, %747
  %749 = fmul <2 x double> %544, %618
  %750 = fadd <2 x double> %748, %749
  %751 = fmul <2 x double> %547, %620
  %752 = fadd <2 x double> %750, %751
  %753 = fmul <2 x double> %550, %622
  %754 = fadd <2 x double> %752, %753
  %755 = fmul <2 x double> %553, %624
  %756 = fadd <2 x double> %754, %755
  %757 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %744
  %758 = bitcast double* %757 to <2 x double>*
  store <2 x double> %756, <2 x double>* %758, align 16
  %759 = add nuw nsw i64 %557, 1
  %760 = add nuw nsw i64 %556, 2
  %761 = add nuw nsw i64 %555, 18
  %762 = icmp eq i64 %759, 6
  br i1 %762, label %763, label %554

763:                                              ; preds = %554, %816
  %764 = phi i64 [ %874, %816 ], [ 0, %554 ]
  %765 = phi i64 [ %873, %816 ], [ 0, %554 ]
  %766 = phi i32 [ %876, %816 ], [ 0, %554 ]
  %767 = phi i32 [ %877, %816 ], [ 0, %554 ]
  %768 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %764
  %769 = load double, double* %768, align 16
  %770 = fmul double %769, 2.500000e-01
  %771 = sext i32 %766 to i64
  %772 = getelementptr inbounds double, double* %1, i64 %771
  %773 = getelementptr inbounds [12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 %764
  %774 = load double, double* %773, align 16
  %775 = fadd double %770, %774
  store double %775, double* %772, align 8
  %776 = call double @exp(double %775) #7
  store double %776, double* %772, align 8
  %777 = add nsw i32 %766, 1
  %778 = or i64 %764, 1
  %779 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %778
  %780 = load double, double* %779, align 8
  %781 = fmul double %780, 2.500000e-01
  %782 = sext i32 %777 to i64
  %783 = getelementptr inbounds double, double* %1, i64 %782
  %784 = getelementptr inbounds [12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 %778
  %785 = load double, double* %784, align 8
  %786 = fadd double %781, %785
  store double %786, double* %783, align 8
  %787 = call double @exp(double %786) #7
  store double %787, double* %783, align 8
  %788 = shl i64 %765, 32
  %789 = ashr exact i64 %788, 32
  %790 = add i32 %766, 2
  %791 = sext i32 %790 to i64
  br label %792

792:                                              ; preds = %792, %763
  %793 = phi i64 [ %791, %763 ], [ %813, %792 ]
  %794 = phi i64 [ %789, %763 ], [ %814, %792 ]
  %795 = phi i32 [ 0, %763 ], [ %812, %792 ]
  %796 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %794
  %797 = load double, double* %796, align 8
  %798 = fdiv double %797, 0x4000CCCCC0000000
  %799 = getelementptr inbounds double, double* %1, i64 %793
  %800 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %794
  %801 = load double, double* %800, align 8
  %802 = fadd double %798, %801
  store double %802, double* %799, align 8
  %803 = add nsw i64 %793, 1
  %804 = add nsw i64 %794, 1
  %805 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %804
  %806 = load double, double* %805, align 8
  %807 = fdiv double %806, 0x4000CCCCC0000000
  %808 = getelementptr inbounds double, double* %1, i64 %803
  %809 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %804
  %810 = load double, double* %809, align 8
  %811 = fadd double %807, %810
  store double %811, double* %808, align 8
  %812 = add nuw nsw i32 %795, 2
  %813 = add nsw i64 %793, 2
  %814 = add nsw i64 %794, 2
  %815 = icmp eq i32 %812, 12
  br i1 %815, label %816, label %792

816:                                              ; preds = %792
  %817 = shl i64 %814, 32
  %818 = ashr exact i64 %817, 32
  %819 = shl i64 %813, 32
  %820 = ashr exact i64 %819, 32
  %821 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %818
  %822 = load double, double* %821, align 8
  %823 = fdiv double %822, 0x3FDCCCCCC0000000
  %824 = getelementptr inbounds double, double* %1, i64 %820
  %825 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %818
  %826 = load double, double* %825, align 8
  %827 = fadd double %823, %826
  store double %827, double* %824, align 8
  %828 = add nsw i64 %820, 1
  %829 = add nsw i64 %818, 1
  %830 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %829
  %831 = load double, double* %830, align 8
  %832 = fdiv double %831, 0x3FDCCCCCC0000000
  %833 = getelementptr inbounds double, double* %1, i64 %828
  %834 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %829
  %835 = load double, double* %834, align 8
  %836 = fadd double %832, %835
  store double %836, double* %833, align 8
  %837 = add nsw i64 %820, 2
  %838 = add nsw i64 %818, 2
  %839 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %838
  %840 = load double, double* %839, align 8
  %841 = fdiv double %840, 0x3FDCCCCCC0000000
  %842 = getelementptr inbounds double, double* %1, i64 %837
  %843 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %838
  %844 = load double, double* %843, align 8
  %845 = fadd double %841, %844
  store double %845, double* %842, align 8
  %846 = add nsw i64 %820, 3
  %847 = add nsw i64 %818, 3
  %848 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %847
  %849 = load double, double* %848, align 8
  %850 = fdiv double %849, 0x3FDCCCCCC0000000
  %851 = getelementptr inbounds double, double* %1, i64 %846
  %852 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %847
  %853 = load double, double* %852, align 8
  %854 = fadd double %850, %853
  store double %854, double* %851, align 8
  %855 = add nsw i64 %820, 4
  %856 = add nsw i64 %818, 4
  %857 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %856
  %858 = load double, double* %857, align 8
  %859 = fdiv double %858, 0x3FDCCCCCC0000000
  %860 = getelementptr inbounds double, double* %1, i64 %855
  %861 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %856
  %862 = load double, double* %861, align 8
  %863 = fadd double %859, %862
  store double %863, double* %860, align 8
  %864 = add nsw i64 %820, 5
  %865 = add nsw i64 %818, 5
  %866 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %865
  %867 = load double, double* %866, align 8
  %868 = fdiv double %867, 0x3FDCCCCCC0000000
  %869 = getelementptr inbounds double, double* %1, i64 %864
  %870 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %865
  %871 = load double, double* %870, align 8
  %872 = fadd double %868, %871
  store double %872, double* %869, align 8
  %873 = add nsw i64 %818, 6
  %874 = add nuw nsw i64 %764, 2
  %875 = trunc i64 %820 to i32
  %876 = add i32 %875, 6
  %877 = add nuw nsw i32 %767, 1
  %878 = icmp eq i32 %877, 6
  br i1 %878, label %879, label %763

879:                                              ; preds = %816, %26, %22, %19, %2
  %880 = phi i32 [ %17, %2 ], [ -6760, %19 ], [ %24, %22 ], [ %28, %26 ], [ 0, %816 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %15) #7
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #7
  ret i32 %880
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecodeInterpolLpcUb(%struct.Bitstreamstruct*, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %4 = alloca [16 x double], align 16
  %5 = alloca [12 x double], align 16
  %6 = bitcast [16 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 128, i1 false)
  %7 = bitcast [12 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -1, i64 96, i1 false)
  %8 = getelementptr inbounds [16 x double], [16 x double]* %4, i64 0, i64 0
  %9 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 0
  %10 = call i32 @WebRtcIsac_DecodeLpcCoefUB(%struct.Bitstreamstruct* %0, double* nonnull %8, double* nonnull %9, i16 signext %2)
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %108, label %12

12:                                               ; preds = %3
  %13 = sext i16 %2 to i32
  switch i32 %13, label %108 [
    i32 12, label %15
    i32 16, label %14
  ]

14:                                               ; preds = %12
  br label %15

15:                                               ; preds = %12, %14
  %16 = phi i64 [ 3, %14 ], [ 1, %12 ]
  %17 = phi i32 [ 4, %14 ], [ 5, %12 ]
  %18 = phi i64 [ 12, %14 ], [ 6, %12 ]
  %19 = add nuw nsw i32 %17, 1
  %20 = mul nuw nsw i32 %17, 5
  %21 = zext i32 %20 to i64
  br label %22

22:                                               ; preds = %22, %15
  %23 = phi i64 [ 0, %15 ], [ %28, %22 ]
  %24 = phi double* [ %1, %15 ], [ %27, %22 ]
  %25 = shl nsw i64 %23, 2
  %26 = getelementptr inbounds [16 x double], [16 x double]* %4, i64 0, i64 %25
  call void @WebRtcIsac_Lar2PolyInterpolUB(double* %26, double* %24, i32 %19)
  %27 = getelementptr inbounds double, double* %24, i64 %21
  %28 = add nuw nsw i64 %23, 1
  %29 = icmp eq i64 %28, %16
  br i1 %29, label %30, label %22

30:                                               ; preds = %22
  %31 = icmp eq i16 %2, 16
  %32 = getelementptr inbounds double, double* %1, i64 5
  %33 = select i1 %31, double* %32, double* %1
  %34 = add nsw i64 %18, -1
  %35 = and i64 %18, 6
  %36 = icmp ult i64 %34, 7
  br i1 %36, label %93, label %37

37:                                               ; preds = %30
  %38 = sub nsw i64 %18, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %90, %39 ]
  %41 = phi double* [ %33, %37 ], [ %89, %39 ]
  %42 = phi i64 [ %38, %37 ], [ %91, %39 ]
  %43 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %40
  %44 = bitcast double* %43 to i64*
  %45 = load i64, i64* %44, align 16
  %46 = bitcast double* %41 to i64*
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds double, double* %41, i64 5
  %48 = or i64 %40, 1
  %49 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %48
  %50 = bitcast double* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast double* %47 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds double, double* %41, i64 10
  %54 = or i64 %40, 2
  %55 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %54
  %56 = bitcast double* %55 to i64*
  %57 = load i64, i64* %56, align 16
  %58 = bitcast double* %53 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds double, double* %41, i64 15
  %60 = or i64 %40, 3
  %61 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %60
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast double* %59 to i64*
  store i64 %63, i64* %64, align 8
  %65 = getelementptr inbounds double, double* %41, i64 20
  %66 = or i64 %40, 4
  %67 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %66
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 16
  %70 = bitcast double* %65 to i64*
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds double, double* %41, i64 25
  %72 = or i64 %40, 5
  %73 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %72
  %74 = bitcast double* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast double* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds double, double* %41, i64 30
  %78 = or i64 %40, 6
  %79 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %78
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 16
  %82 = bitcast double* %77 to i64*
  store i64 %81, i64* %82, align 8
  %83 = getelementptr inbounds double, double* %41, i64 35
  %84 = or i64 %40, 7
  %85 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %84
  %86 = bitcast double* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast double* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds double, double* %41, i64 40
  %90 = add nuw nsw i64 %40, 8
  %91 = add i64 %42, -8
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %39

93:                                               ; preds = %30, %39
  %94 = phi i64 [ 0, %30 ], [ %90, %39 ]
  %95 = phi double* [ %33, %30 ], [ %89, %39 ]
  br label %96

96:                                               ; preds = %96, %93
  %97 = phi i64 [ %94, %93 ], [ %105, %96 ]
  %98 = phi double* [ %95, %93 ], [ %104, %96 ]
  %99 = phi i64 [ %35, %93 ], [ %106, %96 ]
  %100 = getelementptr inbounds [12 x double], [12 x double]* %5, i64 0, i64 %97
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast double* %98 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds double, double* %98, i64 5
  %105 = add nuw nsw i64 %97, 1
  %106 = add i64 %99, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %96, !llvm.loop !94

108:                                              ; preds = %96, %12, %3
  %109 = phi i16 [ -6680, %3 ], [ -1, %12 ], [ 0, %96 ]
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #7
  ret i16 %109
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeLpcCoefUB(%struct.Bitstreamstruct*, double*, double*, i16 signext) local_unnamed_addr #0 {
  %5 = alloca [6 x double], align 16
  %6 = alloca [6 x i32], align 16
  %7 = alloca [108 x i32], align 16
  %8 = alloca [16 x double], align 16
  %9 = bitcast [108 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 432, i1 false)
  %10 = bitcast [16 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 128, i1 false)
  %11 = sext i16 %3 to i32
  switch i32 %11, label %49 [
    i32 12, label %12
    i32 16, label %15
  ]

12:                                               ; preds = %4
  %13 = getelementptr inbounds [108 x i32], [108 x i32]* %7, i64 0, i64 0
  %14 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %13, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([8 x i16*], [8 x i16*]* @WebRtcIsac_kLpcShapeCdfMatUb12, i64 0, i64 0), i16* getelementptr inbounds ([8 x i16], [8 x i16]* @WebRtcIsac_kLpcShapeEntropySearchUb12, i64 0, i64 0), i32 8) #7
  br label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds [108 x i32], [108 x i32]* %7, i64 0, i64 0
  %17 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %16, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([16 x i16*], [16 x i16*]* @WebRtcIsac_kLpcShapeCdfMatUb16, i64 0, i64 0), i16* getelementptr inbounds ([16 x i16], [16 x i16]* @WebRtcIsac_kLpcShapeEntropySearchUb16, i64 0, i64 0), i32 16) #7
  br label %18

18:                                               ; preds = %15, %12
  %19 = phi i32 [ %17, %15 ], [ %14, %12 ]
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %49, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds [108 x i32], [108 x i32]* %7, i64 0, i64 0
  %23 = call signext i16 @WebRtcIsac_DequantizeLpcParam(i32* nonnull %22, double* %1, i16 signext %3) #7
  %24 = getelementptr inbounds [16 x double], [16 x double]* %8, i64 0, i64 0
  %25 = call signext i16 @WebRtcIsac_CorrelateInterVec(double* %1, double* nonnull %24, i16 signext %3) #7
  %26 = call signext i16 @WebRtcIsac_CorrelateIntraVec(double* nonnull %24, double* %1, i16 signext %3) #7
  %27 = call signext i16 @WebRtcIsac_AddLarMean(double* %1, i16 signext %3) #7
  %28 = bitcast [6 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %28) #7
  %29 = getelementptr inbounds [6 x double], [6 x double]* %5, i64 0, i64 0
  %30 = bitcast [6 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -1, i64 48, i1 false) #7
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #7
  %31 = getelementptr inbounds [6 x i32], [6 x i32]* %6, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 24, i1 false) #7
  %32 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %31, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kLpcGainCdfMat, i64 0, i64 0), i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kLpcGainEntropySearch, i64 0, i64 0), i32 6) #7
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %21
  %35 = call signext i16 @WebRtcIsac_DequantizeLpcGain(i32* nonnull %31, double* nonnull %29) #7
  %36 = call signext i16 @WebRtcIsac_CorrelateLpcGain(double* nonnull %29, double* %2) #7
  %37 = call signext i16 @WebRtcIsac_AddMeanToLinearDomain(double* %2) #7
  br label %38

38:                                               ; preds = %21, %34
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %28) #7
  %39 = icmp eq i16 %3, 16
  br i1 %39, label %40, label %49

40:                                               ; preds = %38
  %41 = getelementptr inbounds double, double* %2, i64 6
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %28) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -1, i64 48, i1 false) #7
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 24, i1 false) #7
  %42 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %31, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kLpcGainCdfMat, i64 0, i64 0), i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kLpcGainEntropySearch, i64 0, i64 0), i32 6) #7
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %40
  %45 = call signext i16 @WebRtcIsac_DequantizeLpcGain(i32* nonnull %31, double* nonnull %29) #7
  %46 = call signext i16 @WebRtcIsac_CorrelateLpcGain(double* nonnull %29, double* %41) #7
  %47 = call signext i16 @WebRtcIsac_AddMeanToLinearDomain(double* %41) #7
  br label %48

48:                                               ; preds = %40, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %28) #7
  br label %49

49:                                               ; preds = %38, %48, %18, %4
  %50 = phi i32 [ -1, %4 ], [ %19, %18 ], [ 0, %48 ], [ 0, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %9) #7
  ret i32 %50
}

declare i32 @WebRtcIsac_DecHistOneStepMulti(i32*, %struct.Bitstreamstruct*, i16**, i16*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeLar(double* nocapture, %struct.Bitstreamstruct*, %struct.IsacSaveEncoderData* nocapture) local_unnamed_addr #0 {
  %4 = alloca [108 x i32], align 16
  %5 = alloca [108 x i32], align 16
  %6 = alloca [108 x double], align 16
  %7 = alloca [108 x double], align 16
  %8 = alloca i32, align 4
  %9 = bitcast [108 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 432, i1 false)
  %10 = bitcast [108 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 432, i8* nonnull %10) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 432, i1 false)
  %11 = bitcast [108 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 864, i1 false)
  %12 = bitcast [108 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 864, i1 false)
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
  store i32 0, i32* %8, align 4
  br label %14

14:                                               ; preds = %14, %3
  %15 = phi i64 [ 0, %3 ], [ %135, %14 ]
  %16 = phi i64 [ 0, %3 ], [ %134, %14 ]
  %17 = phi i32 [ 0, %3 ], [ %133, %14 ]
  %18 = or i64 %15, 2
  %19 = getelementptr inbounds double, double* %0, i64 %18
  %20 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %16
  %21 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %16
  %22 = or i64 %16, 1
  %23 = or i64 %15, 3
  %24 = bitcast double* %19 to <2 x double>*
  %25 = load <2 x double>, <2 x double>* %24, align 8
  %26 = bitcast double* %20 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 16
  %28 = fsub <2 x double> %25, %27
  %29 = fmul <2 x double> %28, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %30 = bitcast double* %21 to <2 x double>*
  store <2 x double> %29, <2 x double>* %30, align 16
  %31 = add nuw nsw i64 %22, 1
  %32 = add nuw nsw i64 %23, 1
  %33 = getelementptr inbounds double, double* %0, i64 %32
  %34 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %31
  %35 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %31
  %36 = bitcast double* %33 to <2 x double>*
  %37 = load <2 x double>, <2 x double>* %36, align 8
  %38 = bitcast double* %34 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 16
  %40 = fsub <2 x double> %37, %39
  %41 = fmul <2 x double> %40, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %42 = bitcast double* %35 to <2 x double>*
  store <2 x double> %41, <2 x double>* %42, align 16
  %43 = add nuw nsw i64 %22, 3
  %44 = add nuw nsw i64 %23, 3
  %45 = getelementptr inbounds double, double* %0, i64 %44
  %46 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %43
  %47 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %43
  %48 = bitcast double* %45 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = bitcast double* %46 to <2 x double>*
  %51 = load <2 x double>, <2 x double>* %50, align 16
  %52 = fsub <2 x double> %49, %51
  %53 = fmul <2 x double> %52, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %54 = bitcast double* %47 to <2 x double>*
  store <2 x double> %53, <2 x double>* %54, align 16
  %55 = add nuw nsw i64 %22, 5
  %56 = add nuw nsw i64 %23, 5
  %57 = getelementptr inbounds double, double* %0, i64 %56
  %58 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %55
  %59 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %55
  %60 = bitcast double* %57 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 8
  %62 = bitcast double* %58 to <2 x double>*
  %63 = load <2 x double>, <2 x double>* %62, align 16
  %64 = fsub <2 x double> %61, %63
  %65 = fmul <2 x double> %64, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %66 = bitcast double* %59 to <2 x double>*
  store <2 x double> %65, <2 x double>* %66, align 16
  %67 = add nuw nsw i64 %22, 7
  %68 = add nuw nsw i64 %23, 7
  %69 = getelementptr inbounds double, double* %0, i64 %68
  %70 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %67
  %71 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %67
  %72 = bitcast double* %69 to <2 x double>*
  %73 = load <2 x double>, <2 x double>* %72, align 8
  %74 = bitcast double* %70 to <2 x double>*
  %75 = load <2 x double>, <2 x double>* %74, align 16
  %76 = fsub <2 x double> %73, %75
  %77 = fmul <2 x double> %76, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %78 = bitcast double* %71 to <2 x double>*
  store <2 x double> %77, <2 x double>* %78, align 16
  %79 = add nuw nsw i64 %22, 9
  %80 = add nuw nsw i64 %23, 9
  %81 = getelementptr inbounds double, double* %0, i64 %80
  %82 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %79
  %83 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %79
  %84 = bitcast double* %81 to <2 x double>*
  %85 = load <2 x double>, <2 x double>* %84, align 8
  %86 = bitcast double* %82 to <2 x double>*
  %87 = load <2 x double>, <2 x double>* %86, align 16
  %88 = fsub <2 x double> %85, %87
  %89 = fmul <2 x double> %88, <double 0x4000CCCCC0000000, double 0x4000CCCCC0000000>
  %90 = bitcast double* %83 to <2 x double>*
  store <2 x double> %89, <2 x double>* %90, align 16
  %91 = shl i64 %22, 32
  %92 = add i64 %91, 47244640256
  %93 = ashr exact i64 %92, 32
  %94 = shl i64 %23, 32
  %95 = add i64 %94, 47244640256
  %96 = ashr exact i64 %95, 32
  %97 = getelementptr inbounds double, double* %0, i64 %96
  %98 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %93
  %99 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %93
  %100 = or i64 %93, 1
  %101 = or i64 %96, 1
  %102 = bitcast double* %97 to <2 x double>*
  %103 = load <2 x double>, <2 x double>* %102, align 8
  %104 = bitcast double* %98 to <2 x double>*
  %105 = load <2 x double>, <2 x double>* %104, align 16
  %106 = fsub <2 x double> %103, %105
  %107 = fmul <2 x double> %106, <double 0x3FDCCCCCC0000000, double 0x3FDCCCCCC0000000>
  %108 = bitcast double* %99 to <2 x double>*
  store <2 x double> %107, <2 x double>* %108, align 16
  %109 = add nsw i64 %100, 1
  %110 = add nsw i64 %101, 1
  %111 = getelementptr inbounds double, double* %0, i64 %110
  %112 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %109
  %113 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %109
  %114 = bitcast double* %111 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 8
  %116 = bitcast double* %112 to <2 x double>*
  %117 = load <2 x double>, <2 x double>* %116, align 16
  %118 = fsub <2 x double> %115, %117
  %119 = fmul <2 x double> %118, <double 0x3FDCCCCCC0000000, double 0x3FDCCCCCC0000000>
  %120 = bitcast double* %113 to <2 x double>*
  store <2 x double> %119, <2 x double>* %120, align 16
  %121 = add nsw i64 %100, 3
  %122 = add nsw i64 %101, 3
  %123 = getelementptr inbounds double, double* %0, i64 %122
  %124 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %121
  %125 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %121
  %126 = bitcast double* %123 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 8
  %128 = bitcast double* %124 to <2 x double>*
  %129 = load <2 x double>, <2 x double>* %128, align 16
  %130 = fsub <2 x double> %127, %129
  %131 = fmul <2 x double> %130, <double 0x3FDCCCCCC0000000, double 0x3FDCCCCCC0000000>
  %132 = bitcast double* %125 to <2 x double>*
  store <2 x double> %131, <2 x double>* %132, align 16
  %133 = add nuw nsw i32 %17, 1
  %134 = add nuw nsw i64 %16, 18
  %135 = add nuw nsw i64 %15, 20
  %136 = icmp eq i32 %133, 6
  br i1 %136, label %137, label %14

137:                                              ; preds = %14, %343
  %138 = phi i64 [ %345, %343 ], [ 0, %14 ]
  %139 = phi i32 [ %344, %343 ], [ 0, %14 ]
  %140 = or i64 %138, 1
  %141 = add nuw nsw i64 %140, 16
  %142 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %141
  %143 = load double, double* %142, align 8
  %144 = add nuw nsw i64 %140, 15
  %145 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %144
  %146 = load double, double* %145, align 16
  %147 = add nuw nsw i64 %140, 14
  %148 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %147
  %149 = load double, double* %148, align 8
  %150 = add nuw nsw i64 %140, 13
  %151 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %150
  %152 = load double, double* %151, align 16
  %153 = add nuw nsw i64 %140, 12
  %154 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %153
  %155 = load double, double* %154, align 8
  %156 = add nuw nsw i64 %140, 11
  %157 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %156
  %158 = load double, double* %157, align 16
  %159 = add nuw nsw i64 %140, 10
  %160 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %159
  %161 = load double, double* %160, align 8
  %162 = add nuw nsw i64 %140, 9
  %163 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %162
  %164 = load double, double* %163, align 16
  %165 = add nuw nsw i64 %140, 8
  %166 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %165
  %167 = load double, double* %166, align 8
  %168 = add nuw nsw i64 %140, 7
  %169 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %168
  %170 = load double, double* %169, align 16
  %171 = add nuw nsw i64 %140, 6
  %172 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %171
  %173 = load double, double* %172, align 8
  %174 = add nuw nsw i64 %140, 5
  %175 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %174
  %176 = load double, double* %175, align 16
  %177 = add nuw nsw i64 %140, 4
  %178 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %177
  %179 = load double, double* %178, align 8
  %180 = add nuw nsw i64 %140, 3
  %181 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %180
  %182 = load double, double* %181, align 16
  %183 = add nuw nsw i64 %140, 2
  %184 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %183
  %185 = load double, double* %184, align 8
  %186 = add nuw nsw i64 %140, 1
  %187 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %186
  %188 = load double, double* %187, align 16
  %189 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %140
  %190 = load double, double* %189, align 8
  %191 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %138
  %192 = load double, double* %191, align 16
  %193 = insertelement <2 x double> undef, double %192, i32 0
  %194 = shufflevector <2 x double> %193, <2 x double> undef, <2 x i32> zeroinitializer
  %195 = insertelement <2 x double> undef, double %190, i32 0
  %196 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> zeroinitializer
  %197 = insertelement <2 x double> undef, double %188, i32 0
  %198 = shufflevector <2 x double> %197, <2 x double> undef, <2 x i32> zeroinitializer
  %199 = insertelement <2 x double> undef, double %185, i32 0
  %200 = shufflevector <2 x double> %199, <2 x double> undef, <2 x i32> zeroinitializer
  %201 = insertelement <2 x double> undef, double %182, i32 0
  %202 = shufflevector <2 x double> %201, <2 x double> undef, <2 x i32> zeroinitializer
  %203 = insertelement <2 x double> undef, double %179, i32 0
  %204 = shufflevector <2 x double> %203, <2 x double> undef, <2 x i32> zeroinitializer
  %205 = insertelement <2 x double> undef, double %176, i32 0
  %206 = shufflevector <2 x double> %205, <2 x double> undef, <2 x i32> zeroinitializer
  %207 = insertelement <2 x double> undef, double %173, i32 0
  %208 = shufflevector <2 x double> %207, <2 x double> undef, <2 x i32> zeroinitializer
  %209 = insertelement <2 x double> undef, double %170, i32 0
  %210 = shufflevector <2 x double> %209, <2 x double> undef, <2 x i32> zeroinitializer
  %211 = insertelement <2 x double> undef, double %167, i32 0
  %212 = shufflevector <2 x double> %211, <2 x double> undef, <2 x i32> zeroinitializer
  %213 = insertelement <2 x double> undef, double %164, i32 0
  %214 = shufflevector <2 x double> %213, <2 x double> undef, <2 x i32> zeroinitializer
  %215 = insertelement <2 x double> undef, double %161, i32 0
  %216 = shufflevector <2 x double> %215, <2 x double> undef, <2 x i32> zeroinitializer
  %217 = insertelement <2 x double> undef, double %158, i32 0
  %218 = shufflevector <2 x double> %217, <2 x double> undef, <2 x i32> zeroinitializer
  %219 = insertelement <2 x double> undef, double %155, i32 0
  %220 = shufflevector <2 x double> %219, <2 x double> undef, <2 x i32> zeroinitializer
  %221 = insertelement <2 x double> undef, double %152, i32 0
  %222 = shufflevector <2 x double> %221, <2 x double> undef, <2 x i32> zeroinitializer
  %223 = insertelement <2 x double> undef, double %149, i32 0
  %224 = shufflevector <2 x double> %223, <2 x double> undef, <2 x i32> zeroinitializer
  %225 = insertelement <2 x double> undef, double %146, i32 0
  %226 = shufflevector <2 x double> %225, <2 x double> undef, <2 x i32> zeroinitializer
  %227 = insertelement <2 x double> undef, double %143, i32 0
  %228 = shufflevector <2 x double> %227, <2 x double> undef, <2 x i32> zeroinitializer
  br label %229

229:                                              ; preds = %229, %137
  %230 = phi i64 [ 0, %137 ], [ %341, %229 ]
  %231 = add i64 %138, %230
  %232 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %230
  %233 = bitcast double* %232 to <2 x double>*
  %234 = load <2 x double>, <2 x double>* %233, align 16
  %235 = fmul <2 x double> %194, %234
  %236 = fadd <2 x double> %235, zeroinitializer
  %237 = add nuw nsw i64 %230, 18
  %238 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %237
  %239 = bitcast double* %238 to <2 x double>*
  %240 = load <2 x double>, <2 x double>* %239, align 16
  %241 = fmul <2 x double> %196, %240
  %242 = fadd <2 x double> %236, %241
  %243 = add nuw nsw i64 %230, 36
  %244 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %243
  %245 = bitcast double* %244 to <2 x double>*
  %246 = load <2 x double>, <2 x double>* %245, align 16
  %247 = fmul <2 x double> %198, %246
  %248 = fadd <2 x double> %242, %247
  %249 = add nuw nsw i64 %230, 54
  %250 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %249
  %251 = bitcast double* %250 to <2 x double>*
  %252 = load <2 x double>, <2 x double>* %251, align 16
  %253 = fmul <2 x double> %200, %252
  %254 = fadd <2 x double> %248, %253
  %255 = add nuw nsw i64 %230, 72
  %256 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %255
  %257 = bitcast double* %256 to <2 x double>*
  %258 = load <2 x double>, <2 x double>* %257, align 16
  %259 = fmul <2 x double> %202, %258
  %260 = fadd <2 x double> %254, %259
  %261 = add nuw nsw i64 %230, 90
  %262 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %261
  %263 = bitcast double* %262 to <2 x double>*
  %264 = load <2 x double>, <2 x double>* %263, align 16
  %265 = fmul <2 x double> %204, %264
  %266 = fadd <2 x double> %260, %265
  %267 = add nuw nsw i64 %230, 108
  %268 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %267
  %269 = bitcast double* %268 to <2 x double>*
  %270 = load <2 x double>, <2 x double>* %269, align 16
  %271 = fmul <2 x double> %206, %270
  %272 = fadd <2 x double> %266, %271
  %273 = add nuw nsw i64 %230, 126
  %274 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %273
  %275 = bitcast double* %274 to <2 x double>*
  %276 = load <2 x double>, <2 x double>* %275, align 16
  %277 = fmul <2 x double> %208, %276
  %278 = fadd <2 x double> %272, %277
  %279 = add nuw nsw i64 %230, 144
  %280 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %279
  %281 = bitcast double* %280 to <2 x double>*
  %282 = load <2 x double>, <2 x double>* %281, align 16
  %283 = fmul <2 x double> %210, %282
  %284 = fadd <2 x double> %278, %283
  %285 = add nuw nsw i64 %230, 162
  %286 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %285
  %287 = bitcast double* %286 to <2 x double>*
  %288 = load <2 x double>, <2 x double>* %287, align 16
  %289 = fmul <2 x double> %212, %288
  %290 = fadd <2 x double> %284, %289
  %291 = add nuw nsw i64 %230, 180
  %292 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %291
  %293 = bitcast double* %292 to <2 x double>*
  %294 = load <2 x double>, <2 x double>* %293, align 16
  %295 = fmul <2 x double> %214, %294
  %296 = fadd <2 x double> %290, %295
  %297 = add nuw nsw i64 %230, 198
  %298 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %297
  %299 = bitcast double* %298 to <2 x double>*
  %300 = load <2 x double>, <2 x double>* %299, align 16
  %301 = fmul <2 x double> %216, %300
  %302 = fadd <2 x double> %296, %301
  %303 = add nuw nsw i64 %230, 216
  %304 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %303
  %305 = bitcast double* %304 to <2 x double>*
  %306 = load <2 x double>, <2 x double>* %305, align 16
  %307 = fmul <2 x double> %218, %306
  %308 = fadd <2 x double> %302, %307
  %309 = add nuw nsw i64 %230, 234
  %310 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %309
  %311 = bitcast double* %310 to <2 x double>*
  %312 = load <2 x double>, <2 x double>* %311, align 16
  %313 = fmul <2 x double> %220, %312
  %314 = fadd <2 x double> %308, %313
  %315 = add nuw nsw i64 %230, 252
  %316 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %315
  %317 = bitcast double* %316 to <2 x double>*
  %318 = load <2 x double>, <2 x double>* %317, align 16
  %319 = fmul <2 x double> %222, %318
  %320 = fadd <2 x double> %314, %319
  %321 = add nuw nsw i64 %230, 270
  %322 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %321
  %323 = bitcast double* %322 to <2 x double>*
  %324 = load <2 x double>, <2 x double>* %323, align 16
  %325 = fmul <2 x double> %224, %324
  %326 = fadd <2 x double> %320, %325
  %327 = add nuw nsw i64 %230, 288
  %328 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %327
  %329 = bitcast double* %328 to <2 x double>*
  %330 = load <2 x double>, <2 x double>* %329, align 16
  %331 = fmul <2 x double> %226, %330
  %332 = fadd <2 x double> %326, %331
  %333 = add nuw nsw i64 %230, 306
  %334 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %333
  %335 = bitcast double* %334 to <2 x double>*
  %336 = load <2 x double>, <2 x double>* %335, align 16
  %337 = fmul <2 x double> %228, %336
  %338 = fadd <2 x double> %332, %337
  %339 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 %231
  %340 = bitcast double* %339 to <2 x double>*
  store <2 x double> %338, <2 x double>* %340, align 16
  %341 = add i64 %230, 2
  %342 = icmp eq i64 %341, 18
  br i1 %342, label %343, label %229, !llvm.loop !96

343:                                              ; preds = %229
  %344 = add nuw nsw i32 %139, 1
  %345 = add nuw nsw i64 %138, 18
  %346 = icmp eq i32 %344, 6
  br i1 %346, label %347, label %137

347:                                              ; preds = %343
  %348 = bitcast [108 x double]* %7 to <2 x double>*
  %349 = load <2 x double>, <2 x double>* %348, align 16
  %350 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 18
  %351 = bitcast double* %350 to <2 x double>*
  %352 = load <2 x double>, <2 x double>* %351, align 16
  %353 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 36
  %354 = bitcast double* %353 to <2 x double>*
  %355 = load <2 x double>, <2 x double>* %354, align 16
  %356 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 54
  %357 = bitcast double* %356 to <2 x double>*
  %358 = load <2 x double>, <2 x double>* %357, align 16
  %359 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 72
  %360 = bitcast double* %359 to <2 x double>*
  %361 = load <2 x double>, <2 x double>* %360, align 16
  %362 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 90
  %363 = bitcast double* %362 to <2 x double>*
  %364 = load <2 x double>, <2 x double>* %363, align 16
  %365 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 2
  %366 = bitcast double* %365 to <2 x double>*
  %367 = load <2 x double>, <2 x double>* %366, align 16
  %368 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 20
  %369 = bitcast double* %368 to <2 x double>*
  %370 = load <2 x double>, <2 x double>* %369, align 16
  %371 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 38
  %372 = bitcast double* %371 to <2 x double>*
  %373 = load <2 x double>, <2 x double>* %372, align 16
  %374 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 56
  %375 = bitcast double* %374 to <2 x double>*
  %376 = load <2 x double>, <2 x double>* %375, align 16
  %377 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 74
  %378 = bitcast double* %377 to <2 x double>*
  %379 = load <2 x double>, <2 x double>* %378, align 16
  %380 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 92
  %381 = bitcast double* %380 to <2 x double>*
  %382 = load <2 x double>, <2 x double>* %381, align 16
  %383 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 4
  %384 = bitcast double* %383 to <2 x double>*
  %385 = load <2 x double>, <2 x double>* %384, align 16
  %386 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 22
  %387 = bitcast double* %386 to <2 x double>*
  %388 = load <2 x double>, <2 x double>* %387, align 16
  %389 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 40
  %390 = bitcast double* %389 to <2 x double>*
  %391 = load <2 x double>, <2 x double>* %390, align 16
  %392 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 58
  %393 = bitcast double* %392 to <2 x double>*
  %394 = load <2 x double>, <2 x double>* %393, align 16
  %395 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 76
  %396 = bitcast double* %395 to <2 x double>*
  %397 = load <2 x double>, <2 x double>* %396, align 16
  %398 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 94
  %399 = bitcast double* %398 to <2 x double>*
  %400 = load <2 x double>, <2 x double>* %399, align 16
  %401 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 6
  %402 = bitcast double* %401 to <2 x double>*
  %403 = load <2 x double>, <2 x double>* %402, align 16
  %404 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 24
  %405 = bitcast double* %404 to <2 x double>*
  %406 = load <2 x double>, <2 x double>* %405, align 16
  %407 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 42
  %408 = bitcast double* %407 to <2 x double>*
  %409 = load <2 x double>, <2 x double>* %408, align 16
  %410 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 60
  %411 = bitcast double* %410 to <2 x double>*
  %412 = load <2 x double>, <2 x double>* %411, align 16
  %413 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 78
  %414 = bitcast double* %413 to <2 x double>*
  %415 = load <2 x double>, <2 x double>* %414, align 16
  %416 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 96
  %417 = bitcast double* %416 to <2 x double>*
  %418 = load <2 x double>, <2 x double>* %417, align 16
  %419 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 8
  %420 = bitcast double* %419 to <2 x double>*
  %421 = load <2 x double>, <2 x double>* %420, align 16
  %422 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 26
  %423 = bitcast double* %422 to <2 x double>*
  %424 = load <2 x double>, <2 x double>* %423, align 16
  %425 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 44
  %426 = bitcast double* %425 to <2 x double>*
  %427 = load <2 x double>, <2 x double>* %426, align 16
  %428 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 62
  %429 = bitcast double* %428 to <2 x double>*
  %430 = load <2 x double>, <2 x double>* %429, align 16
  %431 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 80
  %432 = bitcast double* %431 to <2 x double>*
  %433 = load <2 x double>, <2 x double>* %432, align 16
  %434 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 98
  %435 = bitcast double* %434 to <2 x double>*
  %436 = load <2 x double>, <2 x double>* %435, align 16
  %437 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 10
  %438 = bitcast double* %437 to <2 x double>*
  %439 = load <2 x double>, <2 x double>* %438, align 16
  %440 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 28
  %441 = bitcast double* %440 to <2 x double>*
  %442 = load <2 x double>, <2 x double>* %441, align 16
  %443 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 46
  %444 = bitcast double* %443 to <2 x double>*
  %445 = load <2 x double>, <2 x double>* %444, align 16
  %446 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 64
  %447 = bitcast double* %446 to <2 x double>*
  %448 = load <2 x double>, <2 x double>* %447, align 16
  %449 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 82
  %450 = bitcast double* %449 to <2 x double>*
  %451 = load <2 x double>, <2 x double>* %450, align 16
  %452 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 100
  %453 = bitcast double* %452 to <2 x double>*
  %454 = load <2 x double>, <2 x double>* %453, align 16
  %455 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 12
  %456 = bitcast double* %455 to <2 x double>*
  %457 = load <2 x double>, <2 x double>* %456, align 16
  %458 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 30
  %459 = bitcast double* %458 to <2 x double>*
  %460 = load <2 x double>, <2 x double>* %459, align 16
  %461 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 48
  %462 = bitcast double* %461 to <2 x double>*
  %463 = load <2 x double>, <2 x double>* %462, align 16
  %464 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 66
  %465 = bitcast double* %464 to <2 x double>*
  %466 = load <2 x double>, <2 x double>* %465, align 16
  %467 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 84
  %468 = bitcast double* %467 to <2 x double>*
  %469 = load <2 x double>, <2 x double>* %468, align 16
  %470 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 102
  %471 = bitcast double* %470 to <2 x double>*
  %472 = load <2 x double>, <2 x double>* %471, align 16
  %473 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 14
  %474 = bitcast double* %473 to <2 x double>*
  %475 = load <2 x double>, <2 x double>* %474, align 16
  %476 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 32
  %477 = bitcast double* %476 to <2 x double>*
  %478 = load <2 x double>, <2 x double>* %477, align 16
  %479 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 50
  %480 = bitcast double* %479 to <2 x double>*
  %481 = load <2 x double>, <2 x double>* %480, align 16
  %482 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 68
  %483 = bitcast double* %482 to <2 x double>*
  %484 = load <2 x double>, <2 x double>* %483, align 16
  %485 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 86
  %486 = bitcast double* %485 to <2 x double>*
  %487 = load <2 x double>, <2 x double>* %486, align 16
  %488 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 104
  %489 = bitcast double* %488 to <2 x double>*
  %490 = load <2 x double>, <2 x double>* %489, align 16
  %491 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 16
  %492 = bitcast double* %491 to <2 x double>*
  %493 = load <2 x double>, <2 x double>* %492, align 16
  %494 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 34
  %495 = bitcast double* %494 to <2 x double>*
  %496 = load <2 x double>, <2 x double>* %495, align 16
  %497 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 52
  %498 = bitcast double* %497 to <2 x double>*
  %499 = load <2 x double>, <2 x double>* %498, align 16
  %500 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 70
  %501 = bitcast double* %500 to <2 x double>*
  %502 = load <2 x double>, <2 x double>* %501, align 16
  %503 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 88
  %504 = bitcast double* %503 to <2 x double>*
  %505 = load <2 x double>, <2 x double>* %504, align 16
  %506 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 106
  %507 = bitcast double* %506 to <2 x double>*
  %508 = load <2 x double>, <2 x double>* %507, align 16
  br label %509

509:                                              ; preds = %347, %509
  %510 = phi i64 [ %678, %509 ], [ 0, %347 ]
  %511 = phi i64 [ %677, %509 ], [ 0, %347 ]
  %512 = phi i32 [ %676, %509 ], [ 0, %347 ]
  %513 = or i64 %511, 1
  %514 = add nuw nsw i64 %513, 4
  %515 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %514
  %516 = load double, double* %515, align 8
  %517 = add nuw nsw i64 %513, 3
  %518 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %517
  %519 = load double, double* %518, align 16
  %520 = add nuw nsw i64 %513, 2
  %521 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %520
  %522 = load double, double* %521, align 8
  %523 = add nuw nsw i64 %513, 1
  %524 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %523
  %525 = load double, double* %524, align 16
  %526 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %513
  %527 = load double, double* %526, align 8
  %528 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %511
  %529 = load double, double* %528, align 16
  %530 = insertelement <2 x double> undef, double %529, i32 0
  %531 = shufflevector <2 x double> %530, <2 x double> undef, <2 x i32> zeroinitializer
  %532 = insertelement <2 x double> undef, double %527, i32 0
  %533 = shufflevector <2 x double> %532, <2 x double> undef, <2 x i32> zeroinitializer
  %534 = insertelement <2 x double> undef, double %525, i32 0
  %535 = shufflevector <2 x double> %534, <2 x double> undef, <2 x i32> zeroinitializer
  %536 = insertelement <2 x double> undef, double %522, i32 0
  %537 = shufflevector <2 x double> %536, <2 x double> undef, <2 x i32> zeroinitializer
  %538 = insertelement <2 x double> undef, double %519, i32 0
  %539 = shufflevector <2 x double> %538, <2 x double> undef, <2 x i32> zeroinitializer
  %540 = insertelement <2 x double> undef, double %516, i32 0
  %541 = shufflevector <2 x double> %540, <2 x double> undef, <2 x i32> zeroinitializer
  %542 = fmul <2 x double> %349, %531
  %543 = fadd <2 x double> %542, zeroinitializer
  %544 = fmul <2 x double> %352, %533
  %545 = fadd <2 x double> %543, %544
  %546 = fmul <2 x double> %355, %535
  %547 = fadd <2 x double> %545, %546
  %548 = fmul <2 x double> %358, %537
  %549 = fadd <2 x double> %547, %548
  %550 = fmul <2 x double> %361, %539
  %551 = fadd <2 x double> %549, %550
  %552 = fmul <2 x double> %364, %541
  %553 = fadd <2 x double> %551, %552
  %554 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %510
  %555 = bitcast double* %554 to <2 x double>*
  store <2 x double> %553, <2 x double>* %555, align 16
  %556 = add nuw i64 %510, 2
  %557 = fmul <2 x double> %367, %531
  %558 = fadd <2 x double> %557, zeroinitializer
  %559 = fmul <2 x double> %370, %533
  %560 = fadd <2 x double> %558, %559
  %561 = fmul <2 x double> %373, %535
  %562 = fadd <2 x double> %560, %561
  %563 = fmul <2 x double> %376, %537
  %564 = fadd <2 x double> %562, %563
  %565 = fmul <2 x double> %379, %539
  %566 = fadd <2 x double> %564, %565
  %567 = fmul <2 x double> %382, %541
  %568 = fadd <2 x double> %566, %567
  %569 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %556
  %570 = bitcast double* %569 to <2 x double>*
  store <2 x double> %568, <2 x double>* %570, align 16
  %571 = add nuw i64 %510, 4
  %572 = fmul <2 x double> %385, %531
  %573 = fadd <2 x double> %572, zeroinitializer
  %574 = fmul <2 x double> %388, %533
  %575 = fadd <2 x double> %573, %574
  %576 = fmul <2 x double> %391, %535
  %577 = fadd <2 x double> %575, %576
  %578 = fmul <2 x double> %394, %537
  %579 = fadd <2 x double> %577, %578
  %580 = fmul <2 x double> %397, %539
  %581 = fadd <2 x double> %579, %580
  %582 = fmul <2 x double> %400, %541
  %583 = fadd <2 x double> %581, %582
  %584 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %571
  %585 = bitcast double* %584 to <2 x double>*
  store <2 x double> %583, <2 x double>* %585, align 16
  %586 = add nuw i64 %510, 6
  %587 = fmul <2 x double> %403, %531
  %588 = fadd <2 x double> %587, zeroinitializer
  %589 = fmul <2 x double> %406, %533
  %590 = fadd <2 x double> %588, %589
  %591 = fmul <2 x double> %409, %535
  %592 = fadd <2 x double> %590, %591
  %593 = fmul <2 x double> %412, %537
  %594 = fadd <2 x double> %592, %593
  %595 = fmul <2 x double> %415, %539
  %596 = fadd <2 x double> %594, %595
  %597 = fmul <2 x double> %418, %541
  %598 = fadd <2 x double> %596, %597
  %599 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %586
  %600 = bitcast double* %599 to <2 x double>*
  store <2 x double> %598, <2 x double>* %600, align 16
  %601 = add nuw i64 %510, 8
  %602 = fmul <2 x double> %421, %531
  %603 = fadd <2 x double> %602, zeroinitializer
  %604 = fmul <2 x double> %424, %533
  %605 = fadd <2 x double> %603, %604
  %606 = fmul <2 x double> %427, %535
  %607 = fadd <2 x double> %605, %606
  %608 = fmul <2 x double> %430, %537
  %609 = fadd <2 x double> %607, %608
  %610 = fmul <2 x double> %433, %539
  %611 = fadd <2 x double> %609, %610
  %612 = fmul <2 x double> %436, %541
  %613 = fadd <2 x double> %611, %612
  %614 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %601
  %615 = bitcast double* %614 to <2 x double>*
  store <2 x double> %613, <2 x double>* %615, align 16
  %616 = add nuw i64 %510, 10
  %617 = fmul <2 x double> %439, %531
  %618 = fadd <2 x double> %617, zeroinitializer
  %619 = fmul <2 x double> %442, %533
  %620 = fadd <2 x double> %618, %619
  %621 = fmul <2 x double> %445, %535
  %622 = fadd <2 x double> %620, %621
  %623 = fmul <2 x double> %448, %537
  %624 = fadd <2 x double> %622, %623
  %625 = fmul <2 x double> %451, %539
  %626 = fadd <2 x double> %624, %625
  %627 = fmul <2 x double> %454, %541
  %628 = fadd <2 x double> %626, %627
  %629 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %616
  %630 = bitcast double* %629 to <2 x double>*
  store <2 x double> %628, <2 x double>* %630, align 16
  %631 = add nuw i64 %510, 12
  %632 = fmul <2 x double> %457, %531
  %633 = fadd <2 x double> %632, zeroinitializer
  %634 = fmul <2 x double> %460, %533
  %635 = fadd <2 x double> %633, %634
  %636 = fmul <2 x double> %463, %535
  %637 = fadd <2 x double> %635, %636
  %638 = fmul <2 x double> %466, %537
  %639 = fadd <2 x double> %637, %638
  %640 = fmul <2 x double> %469, %539
  %641 = fadd <2 x double> %639, %640
  %642 = fmul <2 x double> %472, %541
  %643 = fadd <2 x double> %641, %642
  %644 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %631
  %645 = bitcast double* %644 to <2 x double>*
  store <2 x double> %643, <2 x double>* %645, align 16
  %646 = add nuw i64 %510, 14
  %647 = fmul <2 x double> %475, %531
  %648 = fadd <2 x double> %647, zeroinitializer
  %649 = fmul <2 x double> %478, %533
  %650 = fadd <2 x double> %648, %649
  %651 = fmul <2 x double> %481, %535
  %652 = fadd <2 x double> %650, %651
  %653 = fmul <2 x double> %484, %537
  %654 = fadd <2 x double> %652, %653
  %655 = fmul <2 x double> %487, %539
  %656 = fadd <2 x double> %654, %655
  %657 = fmul <2 x double> %490, %541
  %658 = fadd <2 x double> %656, %657
  %659 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %646
  %660 = bitcast double* %659 to <2 x double>*
  store <2 x double> %658, <2 x double>* %660, align 16
  %661 = add nuw i64 %510, 16
  %662 = fmul <2 x double> %493, %531
  %663 = fadd <2 x double> %662, zeroinitializer
  %664 = fmul <2 x double> %496, %533
  %665 = fadd <2 x double> %663, %664
  %666 = fmul <2 x double> %499, %535
  %667 = fadd <2 x double> %665, %666
  %668 = fmul <2 x double> %502, %537
  %669 = fadd <2 x double> %667, %668
  %670 = fmul <2 x double> %505, %539
  %671 = fadd <2 x double> %669, %670
  %672 = fmul <2 x double> %508, %541
  %673 = fadd <2 x double> %671, %672
  %674 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %661
  %675 = bitcast double* %674 to <2 x double>*
  store <2 x double> %673, <2 x double>* %675, align 16
  %676 = add nuw nsw i32 %512, 1
  %677 = add nuw nsw i64 %511, 6
  %678 = add nuw nsw i64 %510, 18
  %679 = icmp eq i32 %676, 6
  br i1 %679, label %680, label %509

680:                                              ; preds = %509, %699
  %681 = phi i64 [ %706, %699 ], [ 0, %509 ]
  %682 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %681
  %683 = load double, double* %682, align 8
  %684 = tail call i64 @lrint(double %683) #7
  %685 = getelementptr inbounds [108 x i16], [108 x i16]* @WebRtcIsac_kQKltQuantMinShape, i64 0, i64 %681
  %686 = load i16, i16* %685, align 2
  %687 = sext i16 %686 to i64
  %688 = add nsw i64 %684, %687
  %689 = trunc i64 %688 to i32
  %690 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %681
  store i32 %689, i32* %690, align 4
  %691 = icmp slt i32 %689, 0
  br i1 %691, label %697, label %692

692:                                              ; preds = %680
  %693 = getelementptr inbounds [108 x i16], [108 x i16]* @WebRtcIsac_kQKltMaxIndShape, i64 0, i64 %681
  %694 = load i16, i16* %693, align 2
  %695 = zext i16 %694 to i32
  %696 = icmp sgt i32 %689, %695
  br i1 %696, label %697, label %699

697:                                              ; preds = %692, %680
  %698 = phi i32 [ 0, %680 ], [ %695, %692 ]
  store i32 %698, i32* %690, align 4
  br label %699

699:                                              ; preds = %697, %692
  %700 = phi i32 [ %689, %692 ], [ %698, %697 ]
  %701 = getelementptr inbounds [108 x i16], [108 x i16]* @WebRtcIsac_kQKltOffsetShape, i64 0, i64 %681
  %702 = load i16, i16* %701, align 2
  %703 = zext i16 %702 to i32
  %704 = add nuw nsw i32 %700, %703
  %705 = getelementptr inbounds [108 x i32], [108 x i32]* %5, i64 0, i64 %681
  store i32 %704, i32* %705, align 4
  %706 = add nuw nsw i64 %681, 1
  %707 = icmp eq i64 %706, 108
  br i1 %707, label %708, label %680

708:                                              ; preds = %699
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %8, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kQKltModelCdfPtr, i64 0, i64 0), i32 1) #7
  %709 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 0
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %709, i16** getelementptr inbounds ([108 x i16*], [108 x i16*]* @WebRtcIsac_kQKltCdfPtrShape, i64 0, i64 0), i32 108) #7
  %710 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 0
  br label %711

711:                                              ; preds = %711, %708
  %712 = phi i64 [ 0, %708 ], [ %739, %711 ]
  %713 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %712
  %714 = load i32, i32* %713, align 4
  %715 = load i32, i32* %710, align 8
  %716 = mul nsw i32 %715, 108
  %717 = trunc i64 %712 to i32
  %718 = add nsw i32 %716, %717
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 5, i64 %719
  store i32 %714, i32* %720, align 4
  %721 = add nuw nsw i64 %712, 1
  %722 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %721
  %723 = load i32, i32* %722, align 4
  %724 = load i32, i32* %710, align 8
  %725 = mul nsw i32 %724, 108
  %726 = trunc i64 %721 to i32
  %727 = add nsw i32 %725, %726
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 5, i64 %728
  store i32 %723, i32* %729, align 4
  %730 = add nuw nsw i64 %712, 2
  %731 = getelementptr inbounds [108 x i32], [108 x i32]* %4, i64 0, i64 %730
  %732 = load i32, i32* %731, align 4
  %733 = load i32, i32* %710, align 8
  %734 = mul nsw i32 %733, 108
  %735 = trunc i64 %730 to i32
  %736 = add nsw i32 %734, %735
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 5, i64 %737
  store i32 %732, i32* %738, align 4
  %739 = add nuw nsw i64 %712, 3
  %740 = icmp eq i64 %739, 108
  br i1 %740, label %741, label %711

741:                                              ; preds = %711, %741
  %742 = phi i64 [ %778, %741 ], [ 0, %711 ]
  %743 = getelementptr inbounds [108 x i32], [108 x i32]* %5, i64 0, i64 %742
  %744 = load i32, i32* %743, align 16
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %745
  %747 = bitcast double* %746 to i64*
  %748 = load i64, i64* %747, align 8
  %749 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %742
  %750 = bitcast double* %749 to i64*
  store i64 %748, i64* %750, align 16
  %751 = or i64 %742, 1
  %752 = getelementptr inbounds [108 x i32], [108 x i32]* %5, i64 0, i64 %751
  %753 = load i32, i32* %752, align 4
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %754
  %756 = bitcast double* %755 to i64*
  %757 = load i64, i64* %756, align 8
  %758 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %751
  %759 = bitcast double* %758 to i64*
  store i64 %757, i64* %759, align 8
  %760 = or i64 %742, 2
  %761 = getelementptr inbounds [108 x i32], [108 x i32]* %5, i64 0, i64 %760
  %762 = load i32, i32* %761, align 8
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %763
  %765 = bitcast double* %764 to i64*
  %766 = load i64, i64* %765, align 8
  %767 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %760
  %768 = bitcast double* %767 to i64*
  store i64 %766, i64* %768, align 16
  %769 = or i64 %742, 3
  %770 = getelementptr inbounds [108 x i32], [108 x i32]* %5, i64 0, i64 %769
  %771 = load i32, i32* %770, align 4
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds [578 x double], [578 x double]* @WebRtcIsac_kQKltLevelsShape, i64 0, i64 %772
  %774 = bitcast double* %773 to i64*
  %775 = load i64, i64* %774, align 8
  %776 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %769
  %777 = bitcast double* %776 to i64*
  store i64 %775, i64* %777, align 8
  %778 = add nuw nsw i64 %742, 4
  %779 = icmp eq i64 %778, 108
  br i1 %779, label %780, label %741

780:                                              ; preds = %741, %936
  %781 = phi i64 [ %938, %936 ], [ 0, %741 ]
  %782 = phi i32 [ %787, %936 ], [ 0, %741 ]
  %783 = phi i32 [ %937, %936 ], [ 0, %741 ]
  %784 = or i64 %781, 1
  %785 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %781
  %786 = sext i32 %782 to i64
  %787 = add i32 %782, 18
  %788 = load double, double* %785, align 16
  %789 = add nuw nsw i64 %784, 1
  %790 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %784
  %791 = load double, double* %790, align 8
  %792 = add nuw nsw i64 %784, 2
  %793 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %789
  %794 = load double, double* %793, align 16
  %795 = add nuw nsw i64 %784, 3
  %796 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %792
  %797 = load double, double* %796, align 8
  %798 = add nuw nsw i64 %784, 4
  %799 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %795
  %800 = load double, double* %799, align 16
  %801 = add nuw nsw i64 %784, 5
  %802 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %798
  %803 = load double, double* %802, align 8
  %804 = add nuw nsw i64 %784, 6
  %805 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %801
  %806 = load double, double* %805, align 16
  %807 = add nuw nsw i64 %784, 7
  %808 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %804
  %809 = load double, double* %808, align 8
  %810 = add nuw nsw i64 %784, 8
  %811 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %807
  %812 = load double, double* %811, align 16
  %813 = add nuw nsw i64 %784, 9
  %814 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %810
  %815 = load double, double* %814, align 8
  %816 = add nuw nsw i64 %784, 10
  %817 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %813
  %818 = load double, double* %817, align 16
  %819 = add nuw nsw i64 %784, 11
  %820 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %816
  %821 = load double, double* %820, align 8
  %822 = add nuw nsw i64 %784, 12
  %823 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %819
  %824 = load double, double* %823, align 16
  %825 = add nuw nsw i64 %784, 13
  %826 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %822
  %827 = load double, double* %826, align 8
  %828 = add nuw nsw i64 %784, 14
  %829 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %825
  %830 = load double, double* %829, align 16
  %831 = add nuw nsw i64 %784, 15
  %832 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %828
  %833 = load double, double* %832, align 8
  %834 = add nuw nsw i64 %784, 16
  %835 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %831
  %836 = load double, double* %835, align 16
  %837 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %834
  %838 = load double, double* %837, align 8
  br label %839

839:                                              ; preds = %839, %780
  %840 = phi i64 [ %786, %780 ], [ %931, %839 ]
  %841 = phi i64 [ 0, %780 ], [ %933, %839 ]
  %842 = or i64 %841, 1
  %843 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %841
  %844 = load double, double* %843, align 16
  %845 = fmul double %788, %844
  %846 = fadd double %845, 0.000000e+00
  %847 = add nuw nsw i64 %842, 1
  %848 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %842
  %849 = load double, double* %848, align 8
  %850 = fmul double %791, %849
  %851 = fadd double %846, %850
  %852 = add nuw nsw i64 %842, 2
  %853 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %847
  %854 = load double, double* %853, align 16
  %855 = fmul double %794, %854
  %856 = fadd double %851, %855
  %857 = add nuw nsw i64 %842, 3
  %858 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %852
  %859 = load double, double* %858, align 8
  %860 = fmul double %797, %859
  %861 = fadd double %856, %860
  %862 = add nuw nsw i64 %842, 4
  %863 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %857
  %864 = load double, double* %863, align 16
  %865 = fmul double %800, %864
  %866 = fadd double %861, %865
  %867 = add nuw nsw i64 %842, 5
  %868 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %862
  %869 = load double, double* %868, align 8
  %870 = fmul double %803, %869
  %871 = fadd double %866, %870
  %872 = add nuw nsw i64 %842, 6
  %873 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %867
  %874 = load double, double* %873, align 16
  %875 = fmul double %806, %874
  %876 = fadd double %871, %875
  %877 = add nuw nsw i64 %842, 7
  %878 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %872
  %879 = load double, double* %878, align 8
  %880 = fmul double %809, %879
  %881 = fadd double %876, %880
  %882 = add nuw nsw i64 %842, 8
  %883 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %877
  %884 = load double, double* %883, align 16
  %885 = fmul double %812, %884
  %886 = fadd double %881, %885
  %887 = add nuw nsw i64 %842, 9
  %888 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %882
  %889 = load double, double* %888, align 8
  %890 = fmul double %815, %889
  %891 = fadd double %886, %890
  %892 = add nuw nsw i64 %842, 10
  %893 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %887
  %894 = load double, double* %893, align 16
  %895 = fmul double %818, %894
  %896 = fadd double %891, %895
  %897 = add nuw nsw i64 %842, 11
  %898 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %892
  %899 = load double, double* %898, align 8
  %900 = fmul double %821, %899
  %901 = fadd double %896, %900
  %902 = add nuw nsw i64 %842, 12
  %903 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %897
  %904 = load double, double* %903, align 16
  %905 = fmul double %824, %904
  %906 = fadd double %901, %905
  %907 = add nuw nsw i64 %842, 13
  %908 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %902
  %909 = load double, double* %908, align 8
  %910 = fmul double %827, %909
  %911 = fadd double %906, %910
  %912 = add nuw nsw i64 %842, 14
  %913 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %907
  %914 = load double, double* %913, align 16
  %915 = fmul double %830, %914
  %916 = fadd double %911, %915
  %917 = add nuw nsw i64 %842, 15
  %918 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %912
  %919 = load double, double* %918, align 8
  %920 = fmul double %833, %919
  %921 = fadd double %916, %920
  %922 = add nuw nsw i64 %842, 16
  %923 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %917
  %924 = load double, double* %923, align 16
  %925 = fmul double %836, %924
  %926 = fadd double %921, %925
  %927 = getelementptr inbounds [324 x double], [324 x double]* @WebRtcIsac_kKltT1Shape, i64 0, i64 %922
  %928 = load double, double* %927, align 8
  %929 = fmul double %838, %928
  %930 = fadd double %926, %929
  %931 = add nsw i64 %840, 1
  %932 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 %840
  store double %930, double* %932, align 8
  %933 = add nuw nsw i64 %841, 18
  %934 = trunc i64 %931 to i32
  %935 = icmp eq i32 %787, %934
  br i1 %935, label %936, label %839

936:                                              ; preds = %839
  %937 = add nuw nsw i32 %783, 1
  %938 = add nuw nsw i64 %781, 18
  %939 = icmp eq i32 %937, 6
  br i1 %939, label %940, label %780

940:                                              ; preds = %936
  %941 = bitcast [108 x double]* %7 to <2 x double>*
  %942 = load <2 x double>, <2 x double>* %941, align 16
  %943 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 18
  %944 = bitcast double* %943 to <2 x double>*
  %945 = load <2 x double>, <2 x double>* %944, align 16
  %946 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 36
  %947 = bitcast double* %946 to <2 x double>*
  %948 = load <2 x double>, <2 x double>* %947, align 16
  %949 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 54
  %950 = bitcast double* %949 to <2 x double>*
  %951 = load <2 x double>, <2 x double>* %950, align 16
  %952 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 72
  %953 = bitcast double* %952 to <2 x double>*
  %954 = load <2 x double>, <2 x double>* %953, align 16
  %955 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 90
  %956 = bitcast double* %955 to <2 x double>*
  %957 = load <2 x double>, <2 x double>* %956, align 16
  %958 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 2
  %959 = bitcast double* %958 to <2 x double>*
  %960 = load <2 x double>, <2 x double>* %959, align 16
  %961 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 20
  %962 = bitcast double* %961 to <2 x double>*
  %963 = load <2 x double>, <2 x double>* %962, align 16
  %964 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 38
  %965 = bitcast double* %964 to <2 x double>*
  %966 = load <2 x double>, <2 x double>* %965, align 16
  %967 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 56
  %968 = bitcast double* %967 to <2 x double>*
  %969 = load <2 x double>, <2 x double>* %968, align 16
  %970 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 74
  %971 = bitcast double* %970 to <2 x double>*
  %972 = load <2 x double>, <2 x double>* %971, align 16
  %973 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 92
  %974 = bitcast double* %973 to <2 x double>*
  %975 = load <2 x double>, <2 x double>* %974, align 16
  %976 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 4
  %977 = bitcast double* %976 to <2 x double>*
  %978 = load <2 x double>, <2 x double>* %977, align 16
  %979 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 22
  %980 = bitcast double* %979 to <2 x double>*
  %981 = load <2 x double>, <2 x double>* %980, align 16
  %982 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 40
  %983 = bitcast double* %982 to <2 x double>*
  %984 = load <2 x double>, <2 x double>* %983, align 16
  %985 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 58
  %986 = bitcast double* %985 to <2 x double>*
  %987 = load <2 x double>, <2 x double>* %986, align 16
  %988 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 76
  %989 = bitcast double* %988 to <2 x double>*
  %990 = load <2 x double>, <2 x double>* %989, align 16
  %991 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 94
  %992 = bitcast double* %991 to <2 x double>*
  %993 = load <2 x double>, <2 x double>* %992, align 16
  %994 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 6
  %995 = bitcast double* %994 to <2 x double>*
  %996 = load <2 x double>, <2 x double>* %995, align 16
  %997 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 24
  %998 = bitcast double* %997 to <2 x double>*
  %999 = load <2 x double>, <2 x double>* %998, align 16
  %1000 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 42
  %1001 = bitcast double* %1000 to <2 x double>*
  %1002 = load <2 x double>, <2 x double>* %1001, align 16
  %1003 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 60
  %1004 = bitcast double* %1003 to <2 x double>*
  %1005 = load <2 x double>, <2 x double>* %1004, align 16
  %1006 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 78
  %1007 = bitcast double* %1006 to <2 x double>*
  %1008 = load <2 x double>, <2 x double>* %1007, align 16
  %1009 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 96
  %1010 = bitcast double* %1009 to <2 x double>*
  %1011 = load <2 x double>, <2 x double>* %1010, align 16
  %1012 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 8
  %1013 = bitcast double* %1012 to <2 x double>*
  %1014 = load <2 x double>, <2 x double>* %1013, align 16
  %1015 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 26
  %1016 = bitcast double* %1015 to <2 x double>*
  %1017 = load <2 x double>, <2 x double>* %1016, align 16
  %1018 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 44
  %1019 = bitcast double* %1018 to <2 x double>*
  %1020 = load <2 x double>, <2 x double>* %1019, align 16
  %1021 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 62
  %1022 = bitcast double* %1021 to <2 x double>*
  %1023 = load <2 x double>, <2 x double>* %1022, align 16
  %1024 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 80
  %1025 = bitcast double* %1024 to <2 x double>*
  %1026 = load <2 x double>, <2 x double>* %1025, align 16
  %1027 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 98
  %1028 = bitcast double* %1027 to <2 x double>*
  %1029 = load <2 x double>, <2 x double>* %1028, align 16
  %1030 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 10
  %1031 = bitcast double* %1030 to <2 x double>*
  %1032 = load <2 x double>, <2 x double>* %1031, align 16
  %1033 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 28
  %1034 = bitcast double* %1033 to <2 x double>*
  %1035 = load <2 x double>, <2 x double>* %1034, align 16
  %1036 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 46
  %1037 = bitcast double* %1036 to <2 x double>*
  %1038 = load <2 x double>, <2 x double>* %1037, align 16
  %1039 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 64
  %1040 = bitcast double* %1039 to <2 x double>*
  %1041 = load <2 x double>, <2 x double>* %1040, align 16
  %1042 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 82
  %1043 = bitcast double* %1042 to <2 x double>*
  %1044 = load <2 x double>, <2 x double>* %1043, align 16
  %1045 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 100
  %1046 = bitcast double* %1045 to <2 x double>*
  %1047 = load <2 x double>, <2 x double>* %1046, align 16
  %1048 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 12
  %1049 = bitcast double* %1048 to <2 x double>*
  %1050 = load <2 x double>, <2 x double>* %1049, align 16
  %1051 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 30
  %1052 = bitcast double* %1051 to <2 x double>*
  %1053 = load <2 x double>, <2 x double>* %1052, align 16
  %1054 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 48
  %1055 = bitcast double* %1054 to <2 x double>*
  %1056 = load <2 x double>, <2 x double>* %1055, align 16
  %1057 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 66
  %1058 = bitcast double* %1057 to <2 x double>*
  %1059 = load <2 x double>, <2 x double>* %1058, align 16
  %1060 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 84
  %1061 = bitcast double* %1060 to <2 x double>*
  %1062 = load <2 x double>, <2 x double>* %1061, align 16
  %1063 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 102
  %1064 = bitcast double* %1063 to <2 x double>*
  %1065 = load <2 x double>, <2 x double>* %1064, align 16
  %1066 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 14
  %1067 = bitcast double* %1066 to <2 x double>*
  %1068 = load <2 x double>, <2 x double>* %1067, align 16
  %1069 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 32
  %1070 = bitcast double* %1069 to <2 x double>*
  %1071 = load <2 x double>, <2 x double>* %1070, align 16
  %1072 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 50
  %1073 = bitcast double* %1072 to <2 x double>*
  %1074 = load <2 x double>, <2 x double>* %1073, align 16
  %1075 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 68
  %1076 = bitcast double* %1075 to <2 x double>*
  %1077 = load <2 x double>, <2 x double>* %1076, align 16
  %1078 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 86
  %1079 = bitcast double* %1078 to <2 x double>*
  %1080 = load <2 x double>, <2 x double>* %1079, align 16
  %1081 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 104
  %1082 = bitcast double* %1081 to <2 x double>*
  %1083 = load <2 x double>, <2 x double>* %1082, align 16
  %1084 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 16
  %1085 = bitcast double* %1084 to <2 x double>*
  %1086 = load <2 x double>, <2 x double>* %1085, align 16
  %1087 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 34
  %1088 = bitcast double* %1087 to <2 x double>*
  %1089 = load <2 x double>, <2 x double>* %1088, align 16
  %1090 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 52
  %1091 = bitcast double* %1090 to <2 x double>*
  %1092 = load <2 x double>, <2 x double>* %1091, align 16
  %1093 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 70
  %1094 = bitcast double* %1093 to <2 x double>*
  %1095 = load <2 x double>, <2 x double>* %1094, align 16
  %1096 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 88
  %1097 = bitcast double* %1096 to <2 x double>*
  %1098 = load <2 x double>, <2 x double>* %1097, align 16
  %1099 = getelementptr inbounds [108 x double], [108 x double]* %7, i64 0, i64 106
  %1100 = bitcast double* %1099 to <2 x double>*
  %1101 = load <2 x double>, <2 x double>* %1100, align 16
  br label %1102

1102:                                             ; preds = %940, %1102
  %1103 = phi i64 [ %1269, %1102 ], [ 0, %940 ]
  %1104 = phi i64 [ %1268, %1102 ], [ 0, %940 ]
  %1105 = add nuw nsw i64 %1104, 30
  %1106 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1105
  %1107 = load double, double* %1106, align 8
  %1108 = add nuw nsw i64 %1104, 24
  %1109 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1108
  %1110 = load double, double* %1109, align 8
  %1111 = add nuw nsw i64 %1104, 18
  %1112 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1111
  %1113 = load double, double* %1112, align 8
  %1114 = add nuw nsw i64 %1104, 12
  %1115 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1114
  %1116 = load double, double* %1115, align 8
  %1117 = add nuw nsw i64 %1104, 6
  %1118 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1117
  %1119 = load double, double* %1118, align 8
  %1120 = getelementptr inbounds [36 x double], [36 x double]* @WebRtcIsac_kKltT2Shape, i64 0, i64 %1104
  %1121 = load double, double* %1120, align 8
  %1122 = insertelement <2 x double> undef, double %1121, i32 0
  %1123 = shufflevector <2 x double> %1122, <2 x double> undef, <2 x i32> zeroinitializer
  %1124 = insertelement <2 x double> undef, double %1119, i32 0
  %1125 = shufflevector <2 x double> %1124, <2 x double> undef, <2 x i32> zeroinitializer
  %1126 = insertelement <2 x double> undef, double %1116, i32 0
  %1127 = shufflevector <2 x double> %1126, <2 x double> undef, <2 x i32> zeroinitializer
  %1128 = insertelement <2 x double> undef, double %1113, i32 0
  %1129 = shufflevector <2 x double> %1128, <2 x double> undef, <2 x i32> zeroinitializer
  %1130 = insertelement <2 x double> undef, double %1110, i32 0
  %1131 = shufflevector <2 x double> %1130, <2 x double> undef, <2 x i32> zeroinitializer
  %1132 = insertelement <2 x double> undef, double %1107, i32 0
  %1133 = shufflevector <2 x double> %1132, <2 x double> undef, <2 x i32> zeroinitializer
  %1134 = fmul <2 x double> %942, %1123
  %1135 = fadd <2 x double> %1134, zeroinitializer
  %1136 = fmul <2 x double> %945, %1125
  %1137 = fadd <2 x double> %1135, %1136
  %1138 = fmul <2 x double> %948, %1127
  %1139 = fadd <2 x double> %1137, %1138
  %1140 = fmul <2 x double> %951, %1129
  %1141 = fadd <2 x double> %1139, %1140
  %1142 = fmul <2 x double> %954, %1131
  %1143 = fadd <2 x double> %1141, %1142
  %1144 = fmul <2 x double> %957, %1133
  %1145 = fadd <2 x double> %1143, %1144
  %1146 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1103
  %1147 = bitcast double* %1146 to <2 x double>*
  store <2 x double> %1145, <2 x double>* %1147, align 16
  %1148 = add nuw i64 %1103, 2
  %1149 = fmul <2 x double> %960, %1123
  %1150 = fadd <2 x double> %1149, zeroinitializer
  %1151 = fmul <2 x double> %963, %1125
  %1152 = fadd <2 x double> %1150, %1151
  %1153 = fmul <2 x double> %966, %1127
  %1154 = fadd <2 x double> %1152, %1153
  %1155 = fmul <2 x double> %969, %1129
  %1156 = fadd <2 x double> %1154, %1155
  %1157 = fmul <2 x double> %972, %1131
  %1158 = fadd <2 x double> %1156, %1157
  %1159 = fmul <2 x double> %975, %1133
  %1160 = fadd <2 x double> %1158, %1159
  %1161 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1148
  %1162 = bitcast double* %1161 to <2 x double>*
  store <2 x double> %1160, <2 x double>* %1162, align 16
  %1163 = add nuw i64 %1103, 4
  %1164 = fmul <2 x double> %978, %1123
  %1165 = fadd <2 x double> %1164, zeroinitializer
  %1166 = fmul <2 x double> %981, %1125
  %1167 = fadd <2 x double> %1165, %1166
  %1168 = fmul <2 x double> %984, %1127
  %1169 = fadd <2 x double> %1167, %1168
  %1170 = fmul <2 x double> %987, %1129
  %1171 = fadd <2 x double> %1169, %1170
  %1172 = fmul <2 x double> %990, %1131
  %1173 = fadd <2 x double> %1171, %1172
  %1174 = fmul <2 x double> %993, %1133
  %1175 = fadd <2 x double> %1173, %1174
  %1176 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1163
  %1177 = bitcast double* %1176 to <2 x double>*
  store <2 x double> %1175, <2 x double>* %1177, align 16
  %1178 = add nuw i64 %1103, 6
  %1179 = fmul <2 x double> %996, %1123
  %1180 = fadd <2 x double> %1179, zeroinitializer
  %1181 = fmul <2 x double> %999, %1125
  %1182 = fadd <2 x double> %1180, %1181
  %1183 = fmul <2 x double> %1002, %1127
  %1184 = fadd <2 x double> %1182, %1183
  %1185 = fmul <2 x double> %1005, %1129
  %1186 = fadd <2 x double> %1184, %1185
  %1187 = fmul <2 x double> %1008, %1131
  %1188 = fadd <2 x double> %1186, %1187
  %1189 = fmul <2 x double> %1011, %1133
  %1190 = fadd <2 x double> %1188, %1189
  %1191 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1178
  %1192 = bitcast double* %1191 to <2 x double>*
  store <2 x double> %1190, <2 x double>* %1192, align 16
  %1193 = add nuw i64 %1103, 8
  %1194 = fmul <2 x double> %1014, %1123
  %1195 = fadd <2 x double> %1194, zeroinitializer
  %1196 = fmul <2 x double> %1017, %1125
  %1197 = fadd <2 x double> %1195, %1196
  %1198 = fmul <2 x double> %1020, %1127
  %1199 = fadd <2 x double> %1197, %1198
  %1200 = fmul <2 x double> %1023, %1129
  %1201 = fadd <2 x double> %1199, %1200
  %1202 = fmul <2 x double> %1026, %1131
  %1203 = fadd <2 x double> %1201, %1202
  %1204 = fmul <2 x double> %1029, %1133
  %1205 = fadd <2 x double> %1203, %1204
  %1206 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1193
  %1207 = bitcast double* %1206 to <2 x double>*
  store <2 x double> %1205, <2 x double>* %1207, align 16
  %1208 = add nuw i64 %1103, 10
  %1209 = fmul <2 x double> %1032, %1123
  %1210 = fadd <2 x double> %1209, zeroinitializer
  %1211 = fmul <2 x double> %1035, %1125
  %1212 = fadd <2 x double> %1210, %1211
  %1213 = fmul <2 x double> %1038, %1127
  %1214 = fadd <2 x double> %1212, %1213
  %1215 = fmul <2 x double> %1041, %1129
  %1216 = fadd <2 x double> %1214, %1215
  %1217 = fmul <2 x double> %1044, %1131
  %1218 = fadd <2 x double> %1216, %1217
  %1219 = fmul <2 x double> %1047, %1133
  %1220 = fadd <2 x double> %1218, %1219
  %1221 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1208
  %1222 = bitcast double* %1221 to <2 x double>*
  store <2 x double> %1220, <2 x double>* %1222, align 16
  %1223 = add nuw i64 %1103, 12
  %1224 = fmul <2 x double> %1050, %1123
  %1225 = fadd <2 x double> %1224, zeroinitializer
  %1226 = fmul <2 x double> %1053, %1125
  %1227 = fadd <2 x double> %1225, %1226
  %1228 = fmul <2 x double> %1056, %1127
  %1229 = fadd <2 x double> %1227, %1228
  %1230 = fmul <2 x double> %1059, %1129
  %1231 = fadd <2 x double> %1229, %1230
  %1232 = fmul <2 x double> %1062, %1131
  %1233 = fadd <2 x double> %1231, %1232
  %1234 = fmul <2 x double> %1065, %1133
  %1235 = fadd <2 x double> %1233, %1234
  %1236 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1223
  %1237 = bitcast double* %1236 to <2 x double>*
  store <2 x double> %1235, <2 x double>* %1237, align 16
  %1238 = add nuw i64 %1103, 14
  %1239 = fmul <2 x double> %1068, %1123
  %1240 = fadd <2 x double> %1239, zeroinitializer
  %1241 = fmul <2 x double> %1071, %1125
  %1242 = fadd <2 x double> %1240, %1241
  %1243 = fmul <2 x double> %1074, %1127
  %1244 = fadd <2 x double> %1242, %1243
  %1245 = fmul <2 x double> %1077, %1129
  %1246 = fadd <2 x double> %1244, %1245
  %1247 = fmul <2 x double> %1080, %1131
  %1248 = fadd <2 x double> %1246, %1247
  %1249 = fmul <2 x double> %1083, %1133
  %1250 = fadd <2 x double> %1248, %1249
  %1251 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1238
  %1252 = bitcast double* %1251 to <2 x double>*
  store <2 x double> %1250, <2 x double>* %1252, align 16
  %1253 = add nuw i64 %1103, 16
  %1254 = fmul <2 x double> %1086, %1123
  %1255 = fadd <2 x double> %1254, zeroinitializer
  %1256 = fmul <2 x double> %1089, %1125
  %1257 = fadd <2 x double> %1255, %1256
  %1258 = fmul <2 x double> %1092, %1127
  %1259 = fadd <2 x double> %1257, %1258
  %1260 = fmul <2 x double> %1095, %1129
  %1261 = fadd <2 x double> %1259, %1260
  %1262 = fmul <2 x double> %1098, %1131
  %1263 = fadd <2 x double> %1261, %1262
  %1264 = fmul <2 x double> %1101, %1133
  %1265 = fadd <2 x double> %1263, %1264
  %1266 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1253
  %1267 = bitcast double* %1266 to <2 x double>*
  store <2 x double> %1265, <2 x double>* %1267, align 16
  %1268 = add nuw nsw i64 %1104, 1
  %1269 = add nuw nsw i64 %1103, 18
  %1270 = icmp eq i64 %1268, 6
  br i1 %1270, label %1271, label %1102

1271:                                             ; preds = %1102, %1304
  %1272 = phi i64 [ %1362, %1304 ], [ 0, %1102 ]
  %1273 = phi i64 [ %1361, %1304 ], [ 0, %1102 ]
  %1274 = phi i32 [ %1363, %1304 ], [ 0, %1102 ]
  %1275 = shl i64 %1272, 32
  %1276 = ashr exact i64 %1275, 32
  %1277 = shl i64 %1273, 32
  %1278 = add i64 %1277, 8589934592
  %1279 = ashr exact i64 %1278, 32
  br label %1280

1280:                                             ; preds = %1280, %1271
  %1281 = phi i64 [ %1279, %1271 ], [ %1301, %1280 ]
  %1282 = phi i64 [ %1276, %1271 ], [ %1302, %1280 ]
  %1283 = phi i32 [ 0, %1271 ], [ %1300, %1280 ]
  %1284 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1282
  %1285 = load double, double* %1284, align 8
  %1286 = fdiv double %1285, 0x4000CCCCC0000000
  %1287 = getelementptr inbounds double, double* %0, i64 %1281
  %1288 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1282
  %1289 = load double, double* %1288, align 8
  %1290 = fadd double %1286, %1289
  store double %1290, double* %1287, align 8
  %1291 = add nsw i64 %1281, 1
  %1292 = add nsw i64 %1282, 1
  %1293 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1292
  %1294 = load double, double* %1293, align 8
  %1295 = fdiv double %1294, 0x4000CCCCC0000000
  %1296 = getelementptr inbounds double, double* %0, i64 %1291
  %1297 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1292
  %1298 = load double, double* %1297, align 8
  %1299 = fadd double %1295, %1298
  store double %1299, double* %1296, align 8
  %1300 = add nuw nsw i32 %1283, 2
  %1301 = add nsw i64 %1281, 2
  %1302 = add nsw i64 %1282, 2
  %1303 = icmp eq i32 %1300, 12
  br i1 %1303, label %1304, label %1280

1304:                                             ; preds = %1280
  %1305 = shl i64 %1302, 32
  %1306 = ashr exact i64 %1305, 32
  %1307 = shl i64 %1301, 32
  %1308 = ashr exact i64 %1307, 32
  %1309 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1306
  %1310 = load double, double* %1309, align 8
  %1311 = fdiv double %1310, 0x3FDCCCCCC0000000
  %1312 = getelementptr inbounds double, double* %0, i64 %1308
  %1313 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1306
  %1314 = load double, double* %1313, align 8
  %1315 = fadd double %1311, %1314
  store double %1315, double* %1312, align 8
  %1316 = add nsw i64 %1308, 1
  %1317 = add nsw i64 %1306, 1
  %1318 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1317
  %1319 = load double, double* %1318, align 8
  %1320 = fdiv double %1319, 0x3FDCCCCCC0000000
  %1321 = getelementptr inbounds double, double* %0, i64 %1316
  %1322 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1317
  %1323 = load double, double* %1322, align 8
  %1324 = fadd double %1320, %1323
  store double %1324, double* %1321, align 8
  %1325 = add nsw i64 %1308, 2
  %1326 = add nsw i64 %1306, 2
  %1327 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1326
  %1328 = load double, double* %1327, align 8
  %1329 = fdiv double %1328, 0x3FDCCCCCC0000000
  %1330 = getelementptr inbounds double, double* %0, i64 %1325
  %1331 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1326
  %1332 = load double, double* %1331, align 8
  %1333 = fadd double %1329, %1332
  store double %1333, double* %1330, align 8
  %1334 = add nsw i64 %1308, 3
  %1335 = add nsw i64 %1306, 3
  %1336 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1335
  %1337 = load double, double* %1336, align 8
  %1338 = fdiv double %1337, 0x3FDCCCCCC0000000
  %1339 = getelementptr inbounds double, double* %0, i64 %1334
  %1340 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1335
  %1341 = load double, double* %1340, align 8
  %1342 = fadd double %1338, %1341
  store double %1342, double* %1339, align 8
  %1343 = add nsw i64 %1308, 4
  %1344 = add nsw i64 %1306, 4
  %1345 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1344
  %1346 = load double, double* %1345, align 8
  %1347 = fdiv double %1346, 0x3FDCCCCCC0000000
  %1348 = getelementptr inbounds double, double* %0, i64 %1343
  %1349 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1344
  %1350 = load double, double* %1349, align 8
  %1351 = fadd double %1347, %1350
  store double %1351, double* %1348, align 8
  %1352 = add nsw i64 %1308, 5
  %1353 = add nsw i64 %1306, 5
  %1354 = getelementptr inbounds [108 x double], [108 x double]* %6, i64 0, i64 %1353
  %1355 = load double, double* %1354, align 8
  %1356 = fdiv double %1355, 0x3FDCCCCCC0000000
  %1357 = getelementptr inbounds double, double* %0, i64 %1352
  %1358 = getelementptr inbounds [108 x double], [108 x double]* @WebRtcIsac_kLpcMeansShape, i64 0, i64 %1353
  %1359 = load double, double* %1358, align 8
  %1360 = fadd double %1356, %1359
  store double %1360, double* %1357, align 8
  %1361 = add nsw i64 %1308, 6
  %1362 = add nsw i64 %1306, 6
  %1363 = add nuw nsw i32 %1274, 1
  %1364 = icmp eq i32 %1363, 6
  br i1 %1364, label %1365, label %1271

1365:                                             ; preds = %1304
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 432, i8* nonnull %9) #7
  ret void
}

; Function Attrs: nounwind
declare i64 @lrint(double) local_unnamed_addr #5

declare void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct*, i32*, i16**, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeLpcLb(double* nocapture, double* nocapture, %struct.Bitstreamstruct*, %struct.IsacSaveEncoderData* nocapture) local_unnamed_addr #0 {
  %5 = alloca [120 x double], align 16
  %6 = bitcast [120 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %6) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 960, i1 false)
  %7 = getelementptr inbounds [120 x double], [120 x double]* %5, i64 0, i64 0
  call void @WebRtcIsac_Poly2Lar(double* %0, i32 12, double* %1, i32 6, i32 6, double* nonnull %7)
  call void @WebRtcIsac_EncodeLar(double* nonnull %7, %struct.Bitstreamstruct* %2, %struct.IsacSaveEncoderData* %3)
  call void @WebRtcIsac_Lar2Poly(double* nonnull %7, double* %0, i32 12, double* %1, i32 6, i32 6)
  %8 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 0
  br label %9

9:                                                ; preds = %9, %4
  %10 = phi i64 [ 0, %4 ], [ %43, %9 ]
  %11 = getelementptr inbounds double, double* %0, i64 %10
  %12 = bitcast double* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = load i32, i32* %8, align 8
  %15 = mul nsw i32 %14, 78
  %16 = trunc i64 %10 to i32
  %17 = add nsw i32 %15, %16
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 7, i64 %18
  %20 = bitcast double* %19 to i64*
  store i64 %13, i64* %20, align 8
  %21 = add nuw nsw i64 %10, 1
  %22 = getelementptr inbounds double, double* %0, i64 %21
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = load i32, i32* %8, align 8
  %26 = mul nsw i32 %25, 78
  %27 = trunc i64 %21 to i32
  %28 = add nsw i32 %26, %27
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 7, i64 %29
  %31 = bitcast double* %30 to i64*
  store i64 %24, i64* %31, align 8
  %32 = add nuw nsw i64 %10, 2
  %33 = getelementptr inbounds double, double* %0, i64 %32
  %34 = bitcast double* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = load i32, i32* %8, align 8
  %37 = mul nsw i32 %36, 78
  %38 = trunc i64 %32 to i32
  %39 = add nsw i32 %37, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 7, i64 %40
  %42 = bitcast double* %41 to i64*
  store i64 %35, i64* %42, align 8
  %43 = add nuw nsw i64 %10, 3
  %44 = icmp eq i64 %43, 78
  br i1 %44, label %45, label %9

45:                                               ; preds = %9, %45
  %46 = phi i64 [ %79, %45 ], [ 0, %9 ]
  %47 = getelementptr inbounds double, double* %1, i64 %46
  %48 = bitcast double* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = load i32, i32* %8, align 8
  %51 = mul nsw i32 %50, 42
  %52 = trunc i64 %46 to i32
  %53 = add nsw i32 %51, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 8, i64 %54
  %56 = bitcast double* %55 to i64*
  store i64 %49, i64* %56, align 8
  %57 = add nuw nsw i64 %46, 1
  %58 = getelementptr inbounds double, double* %1, i64 %57
  %59 = bitcast double* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = load i32, i32* %8, align 8
  %62 = mul nsw i32 %61, 42
  %63 = trunc i64 %57 to i32
  %64 = add nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 8, i64 %65
  %67 = bitcast double* %66 to i64*
  store i64 %60, i64* %67, align 8
  %68 = add nuw nsw i64 %46, 2
  %69 = getelementptr inbounds double, double* %1, i64 %68
  %70 = bitcast double* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = load i32, i32* %8, align 8
  %73 = mul nsw i32 %72, 42
  %74 = trunc i64 %68 to i32
  %75 = add nsw i32 %73, %74
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 8, i64 %76
  %78 = bitcast double* %77 to i64*
  store i64 %71, i64* %78, align 8
  %79 = add nuw nsw i64 %46, 3
  %80 = icmp eq i64 %79, 42
  br i1 %80, label %81, label %45

81:                                               ; preds = %45
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_EncodeLpcUB(double*, %struct.Bitstreamstruct*, double* nocapture, i16 signext, %struct.ISACUBSaveEncDataStruct* nocapture) local_unnamed_addr #0 {
  %6 = alloca [16 x double], align 16
  %7 = alloca [16 x i32], align 16
  %8 = bitcast [16 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 128, i1 false)
  %9 = bitcast [16 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = tail call signext i16 @WebRtcIsac_Poly2LarUB(double* %0, i16 signext %3)
  %11 = tail call signext i16 @WebRtcIsac_RemoveLarMean(double* %0, i16 signext %3) #7
  %12 = getelementptr inbounds [16 x double], [16 x double]* %6, i64 0, i64 0
  %13 = call signext i16 @WebRtcIsac_DecorrelateIntraVec(double* %0, double* nonnull %12, i16 signext %3) #7
  %14 = call signext i16 @WebRtcIsac_DecorrelateInterVec(double* nonnull %12, double* %0, i16 signext %3) #7
  %15 = getelementptr inbounds [16 x i32], [16 x i32]* %7, i64 0, i64 0
  %16 = call double @WebRtcIsac_QuantizeUncorrLar(double* %0, i32* nonnull %15, i16 signext %3) #7
  %17 = call signext i16 @WebRtcIsac_CorrelateInterVec(double* %0, double* nonnull %12, i16 signext %3) #7
  %18 = call signext i16 @WebRtcIsac_CorrelateIntraVec(double* nonnull %12, double* %0, i16 signext %3) #7
  %19 = call signext i16 @WebRtcIsac_AddLarMean(double* %0, i16 signext %3) #7
  %20 = sext i16 %3 to i32
  switch i32 %20, label %29 [
    i32 12, label %21
    i32 16, label %23
  ]

21:                                               ; preds = %5
  %22 = bitcast %struct.ISACUBSaveEncDataStruct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 16 %9, i64 32, i1 false)
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %15, i16** getelementptr inbounds ([8 x i16*], [8 x i16*]* @WebRtcIsac_kLpcShapeCdfMatUb12, i64 0, i64 0), i32 8) #7
  call void @WebRtcIsac_Lar2PolyInterpolUB(double* %0, double* %2, i32 6)
  br label %29

23:                                               ; preds = %5
  %24 = bitcast %struct.ISACUBSaveEncDataStruct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* nonnull align 16 %9, i64 64, i1 false)
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %15, i16** getelementptr inbounds ([16 x i16*], [16 x i16*]* @WebRtcIsac_kLpcShapeCdfMatUb16, i64 0, i64 0), i32 16) #7
  call void @WebRtcIsac_Lar2PolyInterpolUB(double* %0, double* %2, i32 5)
  %25 = getelementptr inbounds double, double* %0, i64 4
  %26 = getelementptr inbounds double, double* %2, i64 20
  call void @WebRtcIsac_Lar2PolyInterpolUB(double* %25, double* %26, i32 5)
  %27 = getelementptr inbounds double, double* %0, i64 8
  %28 = getelementptr inbounds double, double* %2, i64 40
  call void @WebRtcIsac_Lar2PolyInterpolUB(double* %27, double* %28, i32 5)
  br label %29

29:                                               ; preds = %23, %21, %5
  %30 = phi i16 [ -1, %5 ], [ 0, %21 ], [ 0, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #7
  ret i16 %30
}

declare signext i16 @WebRtcIsac_RemoveLarMean(double*, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_DecorrelateIntraVec(double*, double*, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_DecorrelateInterVec(double*, double*, i16 signext) local_unnamed_addr #2

declare double @WebRtcIsac_QuantizeUncorrLar(double*, i32*, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_CorrelateInterVec(double*, double*, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_CorrelateIntraVec(double*, double*, i16 signext) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_AddLarMean(double*, i16 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeLpcGainLb(double* nocapture, double* nocapture, %struct.Bitstreamstruct*, %struct.IsacSaveEncoderData* nocapture) local_unnamed_addr #0 {
  %5 = alloca [12 x i32], align 16
  %6 = alloca [12 x double], align 16
  %7 = bitcast [12 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 48, i1 false)
  %8 = bitcast [12 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 96, i1 false)
  %9 = load double, double* %0, align 8
  %10 = tail call double @log(double %9) #7
  %11 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 0
  %12 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 0), align 16
  %13 = fsub double %10, %12
  %14 = fmul double %13, 4.000000e+00
  store double %14, double* %11, align 16
  %15 = load double, double* %1, align 8
  %16 = tail call double @log(double %15) #7
  %17 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 1
  %18 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 1), align 8
  %19 = fsub double %16, %18
  %20 = fmul double %19, 4.000000e+00
  store double %20, double* %17, align 8
  %21 = getelementptr inbounds double, double* %0, i64 13
  %22 = load double, double* %21, align 8
  %23 = tail call double @log(double %22) #7
  %24 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 2
  %25 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 2), align 16
  %26 = fsub double %23, %25
  %27 = fmul double %26, 4.000000e+00
  store double %27, double* %24, align 16
  %28 = getelementptr inbounds double, double* %1, i64 7
  %29 = load double, double* %28, align 8
  %30 = tail call double @log(double %29) #7
  %31 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 3
  %32 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 3), align 8
  %33 = fsub double %30, %32
  %34 = fmul double %33, 4.000000e+00
  store double %34, double* %31, align 8
  %35 = getelementptr inbounds double, double* %0, i64 26
  %36 = load double, double* %35, align 8
  %37 = tail call double @log(double %36) #7
  %38 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 4
  %39 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 4), align 16
  %40 = fsub double %37, %39
  %41 = fmul double %40, 4.000000e+00
  store double %41, double* %38, align 16
  %42 = getelementptr inbounds double, double* %1, i64 14
  %43 = load double, double* %42, align 8
  %44 = tail call double @log(double %43) #7
  %45 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 5
  %46 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 5), align 8
  %47 = fsub double %44, %46
  %48 = fmul double %47, 4.000000e+00
  store double %48, double* %45, align 8
  %49 = getelementptr inbounds double, double* %0, i64 39
  %50 = load double, double* %49, align 8
  %51 = tail call double @log(double %50) #7
  %52 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 6
  %53 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 6), align 16
  %54 = fsub double %51, %53
  %55 = fmul double %54, 4.000000e+00
  store double %55, double* %52, align 16
  %56 = getelementptr inbounds double, double* %1, i64 21
  %57 = load double, double* %56, align 8
  %58 = tail call double @log(double %57) #7
  %59 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 7
  %60 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 7), align 8
  %61 = fsub double %58, %60
  %62 = fmul double %61, 4.000000e+00
  store double %62, double* %59, align 8
  %63 = getelementptr inbounds double, double* %0, i64 52
  %64 = load double, double* %63, align 8
  %65 = tail call double @log(double %64) #7
  %66 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 8
  %67 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 8), align 16
  %68 = fsub double %65, %67
  %69 = fmul double %68, 4.000000e+00
  store double %69, double* %66, align 16
  %70 = getelementptr inbounds double, double* %1, i64 28
  %71 = load double, double* %70, align 8
  %72 = tail call double @log(double %71) #7
  %73 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 9
  %74 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 9), align 8
  %75 = fsub double %72, %74
  %76 = fmul double %75, 4.000000e+00
  store double %76, double* %73, align 8
  %77 = getelementptr inbounds double, double* %0, i64 65
  %78 = load double, double* %77, align 8
  %79 = tail call double @log(double %78) #7
  %80 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 10
  %81 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 10), align 16
  %82 = fsub double %79, %81
  %83 = fmul double %82, 4.000000e+00
  store double %83, double* %80, align 16
  %84 = getelementptr inbounds double, double* %1, i64 35
  %85 = load double, double* %84, align 8
  %86 = tail call double @log(double %85) #7
  %87 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 11
  %88 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 11), align 8
  %89 = fsub double %86, %88
  %90 = fmul double %89, 4.000000e+00
  store double %90, double* %87, align 8
  %91 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 0
  %92 = load double, double* %91, align 16
  %93 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 0), align 16
  %94 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 1
  %95 = load double, double* %94, align 8
  %96 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 2), align 16
  %97 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 1), align 8
  %98 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 3), align 8
  %99 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 2
  %100 = load double, double* %99, align 16
  %101 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 3
  %102 = load double, double* %101, align 8
  %103 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 4
  %104 = load double, double* %103, align 16
  %105 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 5
  %106 = load double, double* %105, align 8
  %107 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 6
  %108 = load double, double* %107, align 16
  %109 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 7
  %110 = load double, double* %109, align 8
  %111 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 8
  %112 = load double, double* %111, align 16
  %113 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 9
  %114 = load double, double* %113, align 8
  %115 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 10
  %116 = load double, double* %115, align 16
  %117 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 11
  %118 = load double, double* %117, align 8
  %119 = fmul double %116, %97
  %120 = fadd double %119, 0.000000e+00
  %121 = fmul double %118, %98
  %122 = fadd double %120, %121
  %123 = fmul double %116, %93
  %124 = fadd double %123, 0.000000e+00
  %125 = fmul double %118, %96
  %126 = fadd double %124, %125
  %127 = fmul double %112, %97
  %128 = fadd double %127, 0.000000e+00
  %129 = fmul double %114, %98
  %130 = fadd double %128, %129
  %131 = fmul double %112, %93
  %132 = fadd double %131, 0.000000e+00
  %133 = fmul double %114, %96
  %134 = fadd double %132, %133
  %135 = fmul double %108, %97
  %136 = fadd double %135, 0.000000e+00
  %137 = fmul double %110, %98
  %138 = fadd double %136, %137
  %139 = fmul double %108, %93
  %140 = fadd double %139, 0.000000e+00
  %141 = fmul double %110, %96
  %142 = fadd double %140, %141
  %143 = fmul double %104, %97
  %144 = fadd double %143, 0.000000e+00
  %145 = fmul double %106, %98
  %146 = fadd double %144, %145
  %147 = fmul double %104, %93
  %148 = fadd double %147, 0.000000e+00
  %149 = fmul double %106, %96
  %150 = fadd double %148, %149
  %151 = fmul double %100, %97
  %152 = fadd double %151, 0.000000e+00
  %153 = fmul double %102, %98
  %154 = fadd double %152, %153
  %155 = fmul double %100, %93
  %156 = fadd double %155, 0.000000e+00
  %157 = fmul double %102, %96
  %158 = fadd double %156, %157
  %159 = fmul double %92, %97
  %160 = fadd double %159, 0.000000e+00
  %161 = fmul double %95, %98
  %162 = fadd double %160, %161
  %163 = fmul double %92, %93
  %164 = fadd double %163, 0.000000e+00
  %165 = fmul double %95, %96
  %166 = fadd double %164, %165
  %167 = insertelement <2 x double> undef, double %166, i32 0
  %168 = shufflevector <2 x double> %167, <2 x double> undef, <2 x i32> zeroinitializer
  %169 = insertelement <2 x double> undef, double %158, i32 0
  %170 = shufflevector <2 x double> %169, <2 x double> undef, <2 x i32> zeroinitializer
  %171 = insertelement <2 x double> undef, double %150, i32 0
  %172 = shufflevector <2 x double> %171, <2 x double> undef, <2 x i32> zeroinitializer
  %173 = insertelement <2 x double> undef, double %142, i32 0
  %174 = shufflevector <2 x double> %173, <2 x double> undef, <2 x i32> zeroinitializer
  %175 = insertelement <2 x double> undef, double %134, i32 0
  %176 = shufflevector <2 x double> %175, <2 x double> undef, <2 x i32> zeroinitializer
  %177 = insertelement <2 x double> undef, double %126, i32 0
  %178 = shufflevector <2 x double> %177, <2 x double> undef, <2 x i32> zeroinitializer
  %179 = insertelement <2 x double> undef, double %162, i32 0
  %180 = shufflevector <2 x double> %179, <2 x double> undef, <2 x i32> zeroinitializer
  %181 = insertelement <2 x double> undef, double %154, i32 0
  %182 = shufflevector <2 x double> %181, <2 x double> undef, <2 x i32> zeroinitializer
  %183 = insertelement <2 x double> undef, double %146, i32 0
  %184 = shufflevector <2 x double> %183, <2 x double> undef, <2 x i32> zeroinitializer
  %185 = insertelement <2 x double> undef, double %138, i32 0
  %186 = shufflevector <2 x double> %185, <2 x double> undef, <2 x i32> zeroinitializer
  %187 = insertelement <2 x double> undef, double %130, i32 0
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> zeroinitializer
  %189 = insertelement <2 x double> undef, double %122, i32 0
  %190 = shufflevector <2 x double> %189, <2 x double> undef, <2 x i32> zeroinitializer
  %191 = load <12 x double>, <12 x double>* bitcast ([36 x double]* @WebRtcIsac_kKltT2Gain to <12 x double>*), align 16
  %192 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %193 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %194 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %195 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %196 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %197 = shufflevector <12 x double> %191, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %198 = fmul <2 x double> %168, %192
  %199 = fadd <2 x double> %198, zeroinitializer
  %200 = fmul <2 x double> %170, %193
  %201 = fadd <2 x double> %199, %200
  %202 = fmul <2 x double> %172, %194
  %203 = fadd <2 x double> %201, %202
  %204 = fmul <2 x double> %174, %195
  %205 = fadd <2 x double> %203, %204
  %206 = fmul <2 x double> %176, %196
  %207 = fadd <2 x double> %205, %206
  %208 = fmul <2 x double> %178, %197
  %209 = fadd <2 x double> %207, %208
  %210 = fmul <2 x double> %180, %192
  %211 = fadd <2 x double> %210, zeroinitializer
  %212 = fmul <2 x double> %182, %193
  %213 = fadd <2 x double> %211, %212
  %214 = fmul <2 x double> %184, %194
  %215 = fadd <2 x double> %213, %214
  %216 = fmul <2 x double> %186, %195
  %217 = fadd <2 x double> %215, %216
  %218 = fmul <2 x double> %188, %196
  %219 = fadd <2 x double> %217, %218
  %220 = fmul <2 x double> %190, %197
  %221 = fadd <2 x double> %219, %220
  %222 = bitcast [12 x double]* %6 to <4 x double>*
  %223 = shufflevector <2 x double> %209, <2 x double> %221, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %223, <4 x double>* %222, align 16
  %224 = load <12 x double>, <12 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 12) to <12 x double>*), align 16
  %225 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %226 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %227 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %228 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %229 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %230 = shufflevector <12 x double> %224, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %231 = fmul <2 x double> %168, %225
  %232 = fadd <2 x double> %231, zeroinitializer
  %233 = fmul <2 x double> %170, %226
  %234 = fadd <2 x double> %232, %233
  %235 = fmul <2 x double> %172, %227
  %236 = fadd <2 x double> %234, %235
  %237 = fmul <2 x double> %174, %228
  %238 = fadd <2 x double> %236, %237
  %239 = fmul <2 x double> %176, %229
  %240 = fadd <2 x double> %238, %239
  %241 = fmul <2 x double> %178, %230
  %242 = fadd <2 x double> %240, %241
  %243 = fmul <2 x double> %180, %225
  %244 = fadd <2 x double> %243, zeroinitializer
  %245 = fmul <2 x double> %182, %226
  %246 = fadd <2 x double> %244, %245
  %247 = fmul <2 x double> %184, %227
  %248 = fadd <2 x double> %246, %247
  %249 = fmul <2 x double> %186, %228
  %250 = fadd <2 x double> %248, %249
  %251 = fmul <2 x double> %188, %229
  %252 = fadd <2 x double> %250, %251
  %253 = fmul <2 x double> %190, %230
  %254 = fadd <2 x double> %252, %253
  %255 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 4
  %256 = bitcast double* %255 to <4 x double>*
  %257 = shufflevector <2 x double> %242, <2 x double> %254, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %257, <4 x double>* %256, align 16
  %258 = load <12 x double>, <12 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 24) to <12 x double>*), align 16
  %259 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %260 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %261 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %262 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %263 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %264 = shufflevector <12 x double> %258, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %265 = fmul <2 x double> %168, %259
  %266 = fadd <2 x double> %265, zeroinitializer
  %267 = fmul <2 x double> %170, %260
  %268 = fadd <2 x double> %266, %267
  %269 = fmul <2 x double> %172, %261
  %270 = fadd <2 x double> %268, %269
  %271 = fmul <2 x double> %174, %262
  %272 = fadd <2 x double> %270, %271
  %273 = fmul <2 x double> %176, %263
  %274 = fadd <2 x double> %272, %273
  %275 = fmul <2 x double> %178, %264
  %276 = fadd <2 x double> %274, %275
  %277 = fmul <2 x double> %180, %259
  %278 = fadd <2 x double> %277, zeroinitializer
  %279 = fmul <2 x double> %182, %260
  %280 = fadd <2 x double> %278, %279
  %281 = fmul <2 x double> %184, %261
  %282 = fadd <2 x double> %280, %281
  %283 = fmul <2 x double> %186, %262
  %284 = fadd <2 x double> %282, %283
  %285 = fmul <2 x double> %188, %263
  %286 = fadd <2 x double> %284, %285
  %287 = fmul <2 x double> %190, %264
  %288 = fadd <2 x double> %286, %287
  %289 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 8
  %290 = bitcast double* %289 to <4 x double>*
  %291 = shufflevector <2 x double> %276, <2 x double> %288, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %291, <4 x double>* %290, align 16
  %292 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 0
  br label %293

293:                                              ; preds = %312, %4
  %294 = phi i64 [ 0, %4 ], [ %329, %312 ]
  %295 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 %294
  %296 = load double, double* %295, align 8
  %297 = tail call i64 @lrint(double %296) #7
  %298 = trunc i64 %297 to i32
  %299 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltQuantMinGain, i64 0, i64 %294
  %300 = load i16, i16* %299, align 2
  %301 = sext i16 %300 to i32
  %302 = add nsw i32 %301, %298
  %303 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 %294
  store i32 %302, i32* %303, align 4
  %304 = icmp slt i32 %302, 0
  br i1 %304, label %310, label %305

305:                                              ; preds = %293
  %306 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltMaxIndGain, i64 0, i64 %294
  %307 = load i16, i16* %306, align 2
  %308 = zext i16 %307 to i32
  %309 = icmp sgt i32 %302, %308
  br i1 %309, label %310, label %312

310:                                              ; preds = %305, %293
  %311 = phi i32 [ 0, %293 ], [ %308, %305 ]
  store i32 %311, i32* %303, align 4
  br label %312

312:                                              ; preds = %310, %305
  %313 = phi i32 [ %302, %305 ], [ %311, %310 ]
  %314 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 %294
  %315 = load i16, i16* %314, align 2
  %316 = zext i16 %315 to i32
  %317 = add nuw nsw i32 %313, %316
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %318
  %320 = bitcast double* %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = bitcast double* %295 to i64*
  store i64 %321, i64* %322, align 8
  %323 = load i32, i32* %292, align 8
  %324 = mul nsw i32 %323, 12
  %325 = trunc i64 %294 to i32
  %326 = add nsw i32 %324, %325
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 6, i64 %327
  store i32 %313, i32* %328, align 4
  %329 = add nuw nsw i64 %294, 1
  %330 = icmp eq i64 %329, 12
  br i1 %330, label %331, label %293

331:                                              ; preds = %312
  %332 = getelementptr inbounds [12 x i32], [12 x i32]* %5, i64 0, i64 0
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %2, i32* nonnull %332, i16** getelementptr inbounds ([12 x i16*], [12 x i16*]* @WebRtcIsac_kQKltCdfPtrGain, i64 0, i64 0), i32 12) #7
  %333 = load double, double* %91, align 16
  %334 = load double, double* %94, align 8
  %335 = load double, double* %99, align 16
  %336 = load double, double* %101, align 8
  %337 = load double, double* %103, align 16
  %338 = load double, double* %105, align 8
  %339 = load double, double* %107, align 16
  %340 = load double, double* %109, align 8
  %341 = load double, double* %111, align 16
  %342 = load double, double* %113, align 8
  %343 = load double, double* %115, align 16
  %344 = load double, double* %117, align 8
  %345 = fmul double %343, %96
  %346 = fadd double %345, 0.000000e+00
  %347 = fmul double %344, %98
  %348 = fadd double %346, %347
  %349 = fmul double %343, %93
  %350 = fadd double %349, 0.000000e+00
  %351 = fmul double %344, %97
  %352 = fadd double %350, %351
  %353 = fmul double %341, %96
  %354 = fadd double %353, 0.000000e+00
  %355 = fmul double %342, %98
  %356 = fadd double %354, %355
  %357 = fmul double %341, %93
  %358 = fadd double %357, 0.000000e+00
  %359 = fmul double %342, %97
  %360 = fadd double %358, %359
  %361 = fmul double %339, %96
  %362 = fadd double %361, 0.000000e+00
  %363 = fmul double %340, %98
  %364 = fadd double %362, %363
  %365 = fmul double %339, %93
  %366 = fadd double %365, 0.000000e+00
  %367 = fmul double %340, %97
  %368 = fadd double %366, %367
  %369 = fmul double %337, %96
  %370 = fadd double %369, 0.000000e+00
  %371 = fmul double %338, %98
  %372 = fadd double %370, %371
  %373 = fmul double %337, %93
  %374 = fadd double %373, 0.000000e+00
  %375 = fmul double %338, %97
  %376 = fadd double %374, %375
  %377 = fmul double %335, %96
  %378 = fadd double %377, 0.000000e+00
  %379 = fmul double %336, %98
  %380 = fadd double %378, %379
  %381 = fmul double %335, %93
  %382 = fadd double %381, 0.000000e+00
  %383 = fmul double %336, %97
  %384 = fadd double %382, %383
  %385 = fmul double %333, %96
  %386 = fadd double %385, 0.000000e+00
  %387 = fmul double %334, %98
  %388 = fadd double %386, %387
  %389 = fmul double %333, %93
  %390 = fadd double %389, 0.000000e+00
  %391 = fmul double %334, %97
  %392 = fadd double %390, %391
  %393 = insertelement <2 x double> undef, double %392, i32 0
  %394 = shufflevector <2 x double> %393, <2 x double> undef, <2 x i32> zeroinitializer
  %395 = insertelement <2 x double> undef, double %384, i32 0
  %396 = shufflevector <2 x double> %395, <2 x double> undef, <2 x i32> zeroinitializer
  %397 = insertelement <2 x double> undef, double %376, i32 0
  %398 = shufflevector <2 x double> %397, <2 x double> undef, <2 x i32> zeroinitializer
  %399 = insertelement <2 x double> undef, double %368, i32 0
  %400 = shufflevector <2 x double> %399, <2 x double> undef, <2 x i32> zeroinitializer
  %401 = insertelement <2 x double> undef, double %360, i32 0
  %402 = shufflevector <2 x double> %401, <2 x double> undef, <2 x i32> zeroinitializer
  %403 = insertelement <2 x double> undef, double %352, i32 0
  %404 = shufflevector <2 x double> %403, <2 x double> undef, <2 x i32> zeroinitializer
  %405 = insertelement <2 x double> undef, double %388, i32 0
  %406 = shufflevector <2 x double> %405, <2 x double> undef, <2 x i32> zeroinitializer
  %407 = insertelement <2 x double> undef, double %380, i32 0
  %408 = shufflevector <2 x double> %407, <2 x double> undef, <2 x i32> zeroinitializer
  %409 = insertelement <2 x double> undef, double %372, i32 0
  %410 = shufflevector <2 x double> %409, <2 x double> undef, <2 x i32> zeroinitializer
  %411 = insertelement <2 x double> undef, double %364, i32 0
  %412 = shufflevector <2 x double> %411, <2 x double> undef, <2 x i32> zeroinitializer
  %413 = insertelement <2 x double> undef, double %356, i32 0
  %414 = shufflevector <2 x double> %413, <2 x double> undef, <2 x i32> zeroinitializer
  %415 = insertelement <2 x double> undef, double %348, i32 0
  %416 = shufflevector <2 x double> %415, <2 x double> undef, <2 x i32> zeroinitializer
  %417 = load <2 x double>, <2 x double>* bitcast ([36 x double]* @WebRtcIsac_kKltT2Gain to <2 x double>*), align 16
  %418 = fmul <2 x double> %394, %417
  %419 = fadd <2 x double> %418, zeroinitializer
  %420 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 6) to <2 x double>*), align 16
  %421 = fmul <2 x double> %396, %420
  %422 = fadd <2 x double> %419, %421
  %423 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 12) to <2 x double>*), align 16
  %424 = fmul <2 x double> %398, %423
  %425 = fadd <2 x double> %422, %424
  %426 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 18) to <2 x double>*), align 16
  %427 = fmul <2 x double> %400, %426
  %428 = fadd <2 x double> %425, %427
  %429 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 24) to <2 x double>*), align 16
  %430 = fmul <2 x double> %402, %429
  %431 = fadd <2 x double> %428, %430
  %432 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 30) to <2 x double>*), align 16
  %433 = fmul <2 x double> %404, %432
  %434 = fadd <2 x double> %431, %433
  %435 = fmul <2 x double> %406, %417
  %436 = fadd <2 x double> %435, zeroinitializer
  %437 = fmul <2 x double> %408, %420
  %438 = fadd <2 x double> %436, %437
  %439 = fmul <2 x double> %410, %423
  %440 = fadd <2 x double> %438, %439
  %441 = fmul <2 x double> %412, %426
  %442 = fadd <2 x double> %440, %441
  %443 = fmul <2 x double> %414, %429
  %444 = fadd <2 x double> %442, %443
  %445 = fmul <2 x double> %416, %432
  %446 = fadd <2 x double> %444, %445
  %447 = bitcast [12 x double]* %6 to <4 x double>*
  %448 = shufflevector <2 x double> %434, <2 x double> %446, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %448, <4 x double>* %447, align 16
  %449 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 2) to <2 x double>*), align 16
  %450 = fmul <2 x double> %394, %449
  %451 = fadd <2 x double> %450, zeroinitializer
  %452 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 8) to <2 x double>*), align 16
  %453 = fmul <2 x double> %396, %452
  %454 = fadd <2 x double> %451, %453
  %455 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 14) to <2 x double>*), align 16
  %456 = fmul <2 x double> %398, %455
  %457 = fadd <2 x double> %454, %456
  %458 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 20) to <2 x double>*), align 16
  %459 = fmul <2 x double> %400, %458
  %460 = fadd <2 x double> %457, %459
  %461 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 26) to <2 x double>*), align 16
  %462 = fmul <2 x double> %402, %461
  %463 = fadd <2 x double> %460, %462
  %464 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 32) to <2 x double>*), align 16
  %465 = fmul <2 x double> %404, %464
  %466 = fadd <2 x double> %463, %465
  %467 = fmul <2 x double> %406, %449
  %468 = fadd <2 x double> %467, zeroinitializer
  %469 = fmul <2 x double> %408, %452
  %470 = fadd <2 x double> %468, %469
  %471 = fmul <2 x double> %410, %455
  %472 = fadd <2 x double> %470, %471
  %473 = fmul <2 x double> %412, %458
  %474 = fadd <2 x double> %472, %473
  %475 = fmul <2 x double> %414, %461
  %476 = fadd <2 x double> %474, %475
  %477 = fmul <2 x double> %416, %464
  %478 = fadd <2 x double> %476, %477
  %479 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 4
  %480 = bitcast double* %479 to <4 x double>*
  %481 = shufflevector <2 x double> %466, <2 x double> %478, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %481, <4 x double>* %480, align 16
  %482 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 4) to <2 x double>*), align 16
  %483 = fmul <2 x double> %394, %482
  %484 = fadd <2 x double> %483, zeroinitializer
  %485 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 10) to <2 x double>*), align 16
  %486 = fmul <2 x double> %396, %485
  %487 = fadd <2 x double> %484, %486
  %488 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 16) to <2 x double>*), align 16
  %489 = fmul <2 x double> %398, %488
  %490 = fadd <2 x double> %487, %489
  %491 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 22) to <2 x double>*), align 16
  %492 = fmul <2 x double> %400, %491
  %493 = fadd <2 x double> %490, %492
  %494 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 28) to <2 x double>*), align 16
  %495 = fmul <2 x double> %402, %494
  %496 = fadd <2 x double> %493, %495
  %497 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 34) to <2 x double>*), align 16
  %498 = fmul <2 x double> %404, %497
  %499 = fadd <2 x double> %496, %498
  %500 = fmul <2 x double> %406, %482
  %501 = fadd <2 x double> %500, zeroinitializer
  %502 = fmul <2 x double> %408, %485
  %503 = fadd <2 x double> %501, %502
  %504 = fmul <2 x double> %410, %488
  %505 = fadd <2 x double> %503, %504
  %506 = fmul <2 x double> %412, %491
  %507 = fadd <2 x double> %505, %506
  %508 = fmul <2 x double> %414, %494
  %509 = fadd <2 x double> %507, %508
  %510 = fmul <2 x double> %416, %497
  %511 = fadd <2 x double> %509, %510
  %512 = getelementptr inbounds [12 x double], [12 x double]* %6, i64 0, i64 8
  %513 = bitcast double* %512 to <4 x double>*
  %514 = shufflevector <2 x double> %499, <2 x double> %511, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %514, <4 x double>* %513, align 16
  %515 = load double, double* %91, align 16
  %516 = fmul double %515, 2.500000e-01
  %517 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 0), align 16
  %518 = fadd double %516, %517
  %519 = call double @exp(double %518) #7
  store double %519, double* %0, align 8
  %520 = load double, double* %94, align 8
  %521 = fmul double %520, 2.500000e-01
  %522 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 1), align 8
  %523 = fadd double %521, %522
  %524 = call double @exp(double %523) #7
  store double %524, double* %1, align 8
  %525 = load double, double* %99, align 16
  %526 = fmul double %525, 2.500000e-01
  %527 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 2), align 16
  %528 = fadd double %526, %527
  %529 = call double @exp(double %528) #7
  %530 = getelementptr inbounds double, double* %0, i64 13
  store double %529, double* %530, align 8
  %531 = load double, double* %101, align 8
  %532 = fmul double %531, 2.500000e-01
  %533 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 3), align 8
  %534 = fadd double %532, %533
  %535 = call double @exp(double %534) #7
  %536 = getelementptr inbounds double, double* %1, i64 7
  store double %535, double* %536, align 8
  %537 = load double, double* %103, align 16
  %538 = fmul double %537, 2.500000e-01
  %539 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 4), align 16
  %540 = fadd double %538, %539
  %541 = call double @exp(double %540) #7
  %542 = getelementptr inbounds double, double* %0, i64 26
  store double %541, double* %542, align 8
  %543 = load double, double* %105, align 8
  %544 = fmul double %543, 2.500000e-01
  %545 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 5), align 8
  %546 = fadd double %544, %545
  %547 = call double @exp(double %546) #7
  %548 = getelementptr inbounds double, double* %1, i64 14
  store double %547, double* %548, align 8
  %549 = load double, double* %107, align 16
  %550 = fmul double %549, 2.500000e-01
  %551 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 6), align 16
  %552 = fadd double %550, %551
  %553 = call double @exp(double %552) #7
  %554 = getelementptr inbounds double, double* %0, i64 39
  store double %553, double* %554, align 8
  %555 = load double, double* %109, align 8
  %556 = fmul double %555, 2.500000e-01
  %557 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 7), align 8
  %558 = fadd double %556, %557
  %559 = call double @exp(double %558) #7
  %560 = getelementptr inbounds double, double* %1, i64 21
  store double %559, double* %560, align 8
  %561 = load double, double* %111, align 16
  %562 = fmul double %561, 2.500000e-01
  %563 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 8), align 16
  %564 = fadd double %562, %563
  %565 = call double @exp(double %564) #7
  %566 = getelementptr inbounds double, double* %0, i64 52
  store double %565, double* %566, align 8
  %567 = load double, double* %113, align 8
  %568 = fmul double %567, 2.500000e-01
  %569 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 9), align 8
  %570 = fadd double %568, %569
  %571 = call double @exp(double %570) #7
  %572 = getelementptr inbounds double, double* %1, i64 28
  store double %571, double* %572, align 8
  %573 = load double, double* %115, align 16
  %574 = fmul double %573, 2.500000e-01
  %575 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 10), align 16
  %576 = fadd double %574, %575
  %577 = call double @exp(double %576) #7
  %578 = getelementptr inbounds double, double* %0, i64 65
  store double %577, double* %578, align 8
  %579 = load double, double* %117, align 8
  %580 = fmul double %579, 2.500000e-01
  %581 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 11), align 8
  %582 = fadd double %580, %581
  %583 = call double @exp(double %582) #7
  %584 = getelementptr inbounds double, double* %1, i64 35
  store double %583, double* %584, align 8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeLpcGainUb(double*, %struct.Bitstreamstruct*, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca [6 x double], align 16
  %5 = alloca [6 x i32], align 16
  %6 = bitcast [6 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #7
  %7 = getelementptr inbounds [6 x double], [6 x double]* %4, i64 0, i64 0
  %8 = bitcast [6 x i32]* %5 to i8*
  %9 = bitcast [6 x double]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #7
  %10 = getelementptr inbounds [6 x i32], [6 x i32]* %5, i64 0, i64 0
  %11 = bitcast [6 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 24, i1 false)
  %12 = tail call signext i16 @WebRtcIsac_ToLogDomainRemoveMean(double* %0) #7
  %13 = call signext i16 @WebRtcIsac_DecorrelateLPGain(double* %0, double* nonnull %7) #7
  %14 = call double @WebRtcIsac_QuantizeLpcGain(double* nonnull %7, i32* nonnull %10) #7
  %15 = bitcast i32* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* nonnull align 16 %8, i64 24, i1 false)
  %16 = call signext i16 @WebRtcIsac_CorrelateLpcGain(double* nonnull %7, double* %0) #7
  %17 = call signext i16 @WebRtcIsac_AddMeanToLinearDomain(double* %0) #7
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %10, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kLpcGainCdfMat, i64 0, i64 0), i32 6) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #7
  ret void
}

declare signext i16 @WebRtcIsac_ToLogDomainRemoveMean(double*) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_DecorrelateLPGain(double*, double*) local_unnamed_addr #2

declare double @WebRtcIsac_QuantizeLpcGain(double*, i32*) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_CorrelateLpcGain(double*, double*) local_unnamed_addr #2

declare signext i16 @WebRtcIsac_AddMeanToLinearDomain(double*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_StoreLpcGainUb(double*, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca [6 x double], align 16
  %4 = alloca [6 x i32], align 16
  %5 = bitcast [6 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #7
  %6 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 0
  %7 = bitcast [6 x i32]* %4 to i8*
  %8 = bitcast [6 x double]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  %9 = getelementptr inbounds [6 x i32], [6 x i32]* %4, i64 0, i64 0
  %10 = bitcast [6 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 24, i1 false)
  %11 = tail call signext i16 @WebRtcIsac_ToLogDomainRemoveMean(double* %0) #7
  %12 = call signext i16 @WebRtcIsac_DecorrelateLPGain(double* %0, double* nonnull %6) #7
  %13 = call double @WebRtcIsac_QuantizeLpcGain(double* nonnull %6, i32* nonnull %9) #7
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %9, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kLpcGainCdfMat, i64 0, i64 0), i32 6) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecodeLpcGainUb(double*, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca [6 x double], align 16
  %4 = alloca [6 x i32], align 16
  %5 = bitcast [6 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #7
  %6 = getelementptr inbounds [6 x double], [6 x double]* %3, i64 0, i64 0
  %7 = bitcast [6 x i32]* %4 to i8*
  %8 = bitcast [6 x double]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  %9 = getelementptr inbounds [6 x i32], [6 x i32]* %4, i64 0, i64 0
  %10 = bitcast [6 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 24, i1 false)
  %11 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %9, %struct.Bitstreamstruct* %1, i16** getelementptr inbounds ([6 x i16*], [6 x i16*]* @WebRtcIsac_kLpcGainCdfMat, i64 0, i64 0), i16* getelementptr inbounds ([6 x i16], [6 x i16]* @WebRtcIsac_kLpcGainEntropySearch, i64 0, i64 0), i32 6) #7
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = call signext i16 @WebRtcIsac_DequantizeLpcGain(i32* nonnull %9, double* nonnull %6) #7
  %15 = call signext i16 @WebRtcIsac_CorrelateLpcGain(double* nonnull %6, double* %0) #7
  %16 = call signext i16 @WebRtcIsac_AddMeanToLinearDomain(double* %0) #7
  br label %17

17:                                               ; preds = %2, %13
  %18 = phi i16 [ 0, %13 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #7
  ret i16 %18
}

declare signext i16 @WebRtcIsac_DequantizeLpcGain(i32*, double*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodePitchGain(%struct.Bitstreamstruct*, i16* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca [1 x i16*], align 8
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
  store i32 -1431655766, i32* %3, align 4
  %6 = bitcast [1 x i16*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds [1 x i16*], [1 x i16*]* %4, i64 0, i64 0
  store i16* getelementptr inbounds ([255 x i16], [255 x i16]* @WebRtcIsac_kQPitchGainCdf, i64 0, i64 0), i16** %7, align 8
  %8 = call i32 @WebRtcIsac_DecHistBisectMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** nonnull %7, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQCdfTableSizeGain, i64 0, i64 0), i32 1) #7
  %9 = load i32, i32* %3, align 4
  %10 = or i32 %9, %8
  %11 = icmp slt i32 %10, 0
  %12 = icmp sgt i32 %9, 143
  %13 = or i1 %12, %11
  br i1 %13, label %27, label %14

14:                                               ; preds = %2
  %15 = sext i32 %9 to i64
  %16 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain1Q12, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  store i16 %17, i16* %1, align 2
  %18 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain2Q12, i64 0, i64 %15
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds i16, i16* %1, i64 1
  store i16 %19, i16* %20, align 2
  %21 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain3Q12, i64 0, i64 %15
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds i16, i16* %1, i64 2
  store i16 %22, i16* %23, align 2
  %24 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain4Q12, i64 0, i64 %15
  %25 = load i16, i16* %24, align 2
  %26 = getelementptr inbounds i16, i16* %1, i64 3
  store i16 %25, i16* %26, align 2
  br label %27

27:                                               ; preds = %2, %14
  %28 = phi i32 [ 0, %14 ], [ -6660, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
  ret i32 %28
}

declare i32 @WebRtcIsac_DecHistBisectMulti(i32*, %struct.Bitstreamstruct*, i16**, i16*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodePitchGain(i16* nocapture, %struct.Bitstreamstruct*, %struct.IsacSaveEncoderData* nocapture) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca [1 x i16*], align 8
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7
  store i32 -1431655766, i32* %4, align 4
  %7 = bitcast [1 x i16*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  %8 = getelementptr inbounds [1 x i16*], [1 x i16*]* %5, i64 0, i64 0
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %9 = load i16, i16* %0, align 2
  %10 = sitofp i16 %9 to float
  %11 = fmul float %10, 0x3F30000000000000
  %12 = fpext float %11 to double
  %13 = tail call double @asin(double %12) #7
  %14 = getelementptr inbounds i16, i16* %0, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = sitofp i16 %15 to float
  %17 = fmul float %16, 0x3F30000000000000
  %18 = fpext float %17 to double
  %19 = tail call double @asin(double %18) #7
  %20 = getelementptr inbounds i16, i16* %0, i64 2
  %21 = load i16, i16* %20, align 2
  %22 = sitofp i16 %21 to float
  %23 = fmul float %22, 0x3F30000000000000
  %24 = fpext float %23 to double
  %25 = tail call double @asin(double %24) #7
  %26 = getelementptr inbounds i16, i16* %0, i64 3
  %27 = load i16, i16* %26, align 2
  %28 = sitofp i16 %27 to float
  %29 = fmul float %28, 0x3F30000000000000
  %30 = fpext float %29 to double
  %31 = tail call double @asin(double %30) #7
  %32 = load <2 x double>, <2 x double>* bitcast ([4 x [4 x double]]* @WebRtcIsac_kTransform to <2 x double>*), align 16
  %33 = insertelement <2 x double> undef, double %13, i32 0
  %34 = insertelement <2 x double> %33, double %19, i32 1
  %35 = fmul <2 x double> %32, %34
  %36 = extractelement <2 x double> %35, i32 0
  %37 = fadd double %36, 0.000000e+00
  %38 = extractelement <2 x double> %35, i32 1
  %39 = fadd double %37, %38
  %40 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 0, i64 2) to <2 x double>*), align 16
  %41 = insertelement <2 x double> undef, double %25, i32 0
  %42 = insertelement <2 x double> %41, double %31, i32 1
  %43 = fmul <2 x double> %40, %42
  %44 = extractelement <2 x double> %43, i32 0
  %45 = fadd double %39, %44
  %46 = extractelement <2 x double> %43, i32 1
  %47 = fadd double %45, %46
  %48 = fmul double %47, 8.000000e+00
  %49 = tail call i64 @lrint(double %48) #7
  %50 = trunc i64 %49 to i32
  %51 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexLowerLimitGain, i64 0, i64 0), align 2
  %52 = sext i16 %51 to i32
  %53 = icmp slt i32 %50, %52
  br i1 %53, label %59, label %54

54:                                               ; preds = %3
  %55 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexUpperLimitGain, i64 0, i64 0), align 2
  %56 = sext i16 %55 to i32
  %57 = icmp sgt i32 %50, %56
  %58 = select i1 %57, i32 %56, i32 %50
  br label %59

59:                                               ; preds = %54, %3
  %60 = phi i32 [ %52, %3 ], [ %58, %54 ]
  %61 = sub nsw i32 %60, %52
  %62 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 1, i64 0) to <2 x double>*), align 16
  %63 = fmul <2 x double> %62, %34
  %64 = extractelement <2 x double> %63, i32 0
  %65 = fadd double %64, 0.000000e+00
  %66 = extractelement <2 x double> %63, i32 1
  %67 = fadd double %65, %66
  %68 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 1, i64 2) to <2 x double>*), align 16
  %69 = fmul <2 x double> %68, %42
  %70 = extractelement <2 x double> %69, i32 0
  %71 = fadd double %67, %70
  %72 = extractelement <2 x double> %69, i32 1
  %73 = fadd double %71, %72
  %74 = fmul double %73, 8.000000e+00
  %75 = tail call i64 @lrint(double %74) #7
  %76 = trunc i64 %75 to i32
  %77 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexLowerLimitGain, i64 0, i64 1), align 2
  %78 = sext i16 %77 to i32
  %79 = icmp slt i32 %76, %78
  br i1 %79, label %85, label %80

80:                                               ; preds = %59
  %81 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexUpperLimitGain, i64 0, i64 1), align 2
  %82 = sext i16 %81 to i32
  %83 = icmp sgt i32 %76, %82
  %84 = select i1 %83, i32 %82, i32 %76
  br label %85

85:                                               ; preds = %80, %59
  %86 = phi i32 [ %78, %59 ], [ %84, %80 ]
  %87 = sub nsw i32 %86, %78
  %88 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 2, i64 0) to <2 x double>*), align 16
  %89 = fmul <2 x double> %88, %34
  %90 = extractelement <2 x double> %89, i32 0
  %91 = fadd double %90, 0.000000e+00
  %92 = extractelement <2 x double> %89, i32 1
  %93 = fadd double %91, %92
  %94 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 2, i64 2) to <2 x double>*), align 16
  %95 = fmul <2 x double> %94, %42
  %96 = extractelement <2 x double> %95, i32 0
  %97 = fadd double %93, %96
  %98 = extractelement <2 x double> %95, i32 1
  %99 = fadd double %97, %98
  %100 = fmul double %99, 8.000000e+00
  %101 = tail call i64 @lrint(double %100) #7
  %102 = trunc i64 %101 to i32
  %103 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexLowerLimitGain, i64 0, i64 2), align 2
  %104 = sext i16 %103 to i32
  %105 = icmp slt i32 %102, %104
  br i1 %105, label %111, label %106

106:                                              ; preds = %85
  %107 = load i16, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kIndexUpperLimitGain, i64 0, i64 2), align 2
  %108 = sext i16 %107 to i32
  %109 = icmp sgt i32 %102, %108
  %110 = select i1 %109, i32 %108, i32 %102
  br label %111

111:                                              ; preds = %106, %85
  %112 = phi i32 [ %104, %85 ], [ %110, %106 ]
  %113 = sub nsw i32 %112, %104
  %114 = load i16, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @WebRtcIsac_kIndexMultsGain, i64 0, i64 0), align 2
  %115 = zext i16 %114 to i32
  %116 = mul nsw i32 %61, %115
  %117 = load i16, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @WebRtcIsac_kIndexMultsGain, i64 0, i64 1), align 2
  %118 = zext i16 %117 to i32
  %119 = mul nsw i32 %87, %118
  %120 = add nsw i32 %119, %116
  %121 = add nsw i32 %120, %113
  store i32 %121, i32* %4, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain1Q12, i64 0, i64 %122
  %124 = load i16, i16* %123, align 2
  store i16 %124, i16* %0, align 2
  %125 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain2Q12, i64 0, i64 %122
  %126 = load i16, i16* %125, align 2
  store i16 %126, i16* %14, align 2
  %127 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain3Q12, i64 0, i64 %122
  %128 = load i16, i16* %127, align 2
  store i16 %128, i16* %20, align 2
  %129 = getelementptr inbounds [144 x i16], [144 x i16]* @WebRtcIsac_kQMeanGain4Q12, i64 0, i64 %122
  %130 = load i16, i16* %129, align 2
  store i16 %130, i16* %26, align 2
  store i16* getelementptr inbounds ([255 x i16], [255 x i16]* @WebRtcIsac_kQPitchGainCdf, i64 0, i64 0), i16** %8, align 8
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %4, i16** nonnull %8, i32 1) #7
  %131 = load i32, i32* %4, align 4
  %132 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %2, i64 0, i32 2, i64 %134
  store i32 %131, i32* %135, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nofree nounwind
declare double @asin(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodePitchLag(%struct.Bitstreamstruct*, i16* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %4 = alloca [4 x i32], align 16
  %5 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #7
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %10 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 16, i1 false)
  %11 = load i16, i16* %1, align 2
  %12 = sitofp i16 %11 to float
  %13 = fmul float %12, 0x3F30000000000000
  %14 = fpext float %13 to double
  %15 = fadd double %14, 0.000000e+00
  %16 = getelementptr inbounds i16, i16* %1, i64 1
  %17 = load i16, i16* %16, align 2
  %18 = sitofp i16 %17 to float
  %19 = fmul float %18, 0x3F30000000000000
  %20 = fpext float %19 to double
  %21 = fadd double %15, %20
  %22 = getelementptr inbounds i16, i16* %1, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = sitofp i16 %23 to float
  %25 = fmul float %24, 0x3F30000000000000
  %26 = fpext float %25 to double
  %27 = fadd double %21, %26
  %28 = getelementptr inbounds i16, i16* %1, i64 3
  %29 = load i16, i16* %28, align 2
  %30 = sitofp i16 %29 to float
  %31 = fmul float %30, 0x3F30000000000000
  %32 = fpext float %31 to double
  %33 = fadd double %27, %32
  %34 = fmul double %33, 2.500000e-01
  %35 = fcmp olt double %34, 2.000000e-01
  br i1 %35, label %46, label %36

36:                                               ; preds = %3
  %37 = fcmp olt double %34, 4.000000e-01
  %38 = select i1 %37, double* @WebRtcIsac_kQPitchLagStepsizeMid, double* @WebRtcIsac_kQPitchLagStepsizeHi
  %39 = select i1 %37, double* getelementptr inbounds ([35 x double], [35 x double]* @WebRtcIsac_kQMeanLag2Mid, i64 0, i64 0), double* getelementptr inbounds ([67 x double], [67 x double]* @WebRtcIsac_kQMeanLag2Hi, i64 0, i64 0)
  %40 = select i1 %37, double* getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Mid, i64 0, i64 0), double* getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Hi, i64 0, i64 0)
  %41 = select i1 %37, double* getelementptr inbounds ([19 x double], [19 x double]* @WebRtcIsac_kQMeanLag4Mid, i64 0, i64 0), double* getelementptr inbounds ([34 x double], [34 x double]* @WebRtcIsac_kQMeanLag4Hi, i64 0, i64 0)
  %42 = select i1 %37, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexLowerLimitLagMid, i64 0, i64 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQindexLowerLimitLagHi, i64 0, i64 0)
  %43 = select i1 %37, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kQInitIndexLagMid, i64 0, i64 0), i16* getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kQInitIndexLagHi, i64 0, i64 0)
  %44 = select i1 %37, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQPitchLagCdfSizeMid, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQPitchLagCdfSizeHi, i64 0, i64 0)
  %45 = select i1 %37, i16** getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrMid, i64 0, i64 0), i16** getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrHi, i64 0, i64 0)
  br label %46

46:                                               ; preds = %36, %3
  %47 = phi double* [ @WebRtcIsac_kQPitchLagStepsizeLo, %3 ], [ %38, %36 ]
  %48 = phi double* [ getelementptr inbounds ([19 x double], [19 x double]* @WebRtcIsac_kQMeanLag2Lo, i64 0, i64 0), %3 ], [ %39, %36 ]
  %49 = phi double* [ getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Lo, i64 0, i64 0), %3 ], [ %40, %36 ]
  %50 = phi double* [ getelementptr inbounds ([9 x double], [9 x double]* @WebRtcIsac_kQMeanLag4Lo, i64 0, i64 0), %3 ], [ %41, %36 ]
  %51 = phi i16* [ getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexLowerLimitLagLo, i64 0, i64 0), %3 ], [ %42, %36 ]
  %52 = phi i16* [ getelementptr inbounds ([3 x i16], [3 x i16]* @WebRtcIsac_kQInitIndexLagLo, i64 0, i64 0), %3 ], [ %43, %36 ]
  %53 = phi i16* [ getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kQPitchLagCdfSizeLo, i64 0, i64 0), %3 ], [ %44, %36 ]
  %54 = phi i16** [ getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrLo, i64 0, i64 0), %3 ], [ %45, %36 ]
  %55 = load double, double* %47, align 8
  %56 = call i32 @WebRtcIsac_DecHistBisectMulti(i32* nonnull %6, %struct.Bitstreamstruct* %0, i16** %54, i16* %53, i32 1) #7
  %57 = load i32, i32* %6, align 16
  %58 = or i32 %57, %56
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %130, label %60

60:                                               ; preds = %46
  %61 = getelementptr inbounds i16*, i16** %54, i64 1
  %62 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* %7, %struct.Bitstreamstruct* %0, i16** %61, i16* %52, i32 3) #7
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %130, label %64

64:                                               ; preds = %60
  %65 = load i32, i32* %6, align 16
  %66 = load i16, i16* %51, align 2
  %67 = sext i16 %66 to i32
  %68 = add nsw i32 %65, %67
  %69 = sitofp i32 %68 to double
  %70 = fmul double %55, %69
  %71 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 0), align 16
  %72 = fmul double %70, %71
  %73 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 0), align 16
  %74 = fmul double %70, %73
  %75 = getelementptr inbounds double, double* %2, i64 1
  %76 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 0), align 16
  %77 = fmul double %70, %76
  %78 = getelementptr inbounds double, double* %2, i64 2
  %79 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 0), align 16
  %80 = fmul double %70, %79
  %81 = getelementptr inbounds double, double* %2, i64 3
  %82 = load i32, i32* %7, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %48, i64 %83
  %85 = load double, double* %84, align 8
  %86 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 1), align 8
  %87 = fmul double %85, %86
  %88 = fadd double %72, %87
  %89 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 1), align 8
  %90 = fmul double %85, %89
  %91 = fadd double %74, %90
  %92 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 1), align 8
  %93 = fmul double %85, %92
  %94 = fadd double %77, %93
  %95 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 1), align 8
  %96 = fmul double %85, %95
  %97 = fadd double %80, %96
  %98 = load i32, i32* %8, align 8
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double, double* %49, i64 %99
  %101 = load double, double* %100, align 8
  %102 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 2), align 16
  %103 = fmul double %101, %102
  %104 = fadd double %88, %103
  %105 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 2), align 16
  %106 = fmul double %101, %105
  %107 = fadd double %91, %106
  %108 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 2), align 16
  %109 = fmul double %101, %108
  %110 = fadd double %94, %109
  %111 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 2), align 16
  %112 = fmul double %101, %111
  %113 = fadd double %97, %112
  %114 = load i32, i32* %9, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %50, i64 %115
  %117 = load double, double* %116, align 8
  %118 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 3), align 8
  %119 = fmul double %117, %118
  %120 = fadd double %104, %119
  store double %120, double* %2, align 8
  %121 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 3), align 8
  %122 = fmul double %117, %121
  %123 = fadd double %107, %122
  store double %123, double* %75, align 8
  %124 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 3), align 8
  %125 = fmul double %117, %124
  %126 = fadd double %110, %125
  store double %126, double* %78, align 8
  %127 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 3), align 8
  %128 = fmul double %117, %127
  %129 = fadd double %113, %128
  store double %129, double* %81, align 8
  br label %130

130:                                              ; preds = %64, %60, %46
  %131 = phi i32 [ -6670, %46 ], [ -6670, %60 ], [ 0, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #7
  ret i32 %131
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodePitchLag(double* nocapture, i16* nocapture readonly, %struct.Bitstreamstruct*, %struct.IsacSaveEncoderData* nocapture) local_unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %11 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  %12 = load i16, i16* %1, align 2
  %13 = sitofp i16 %12 to float
  %14 = fmul float %13, 0x3F30000000000000
  %15 = fpext float %14 to double
  %16 = fadd double %15, 0.000000e+00
  %17 = getelementptr inbounds i16, i16* %1, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = sitofp i16 %18 to float
  %20 = fmul float %19, 0x3F30000000000000
  %21 = fpext float %20 to double
  %22 = fadd double %16, %21
  %23 = getelementptr inbounds i16, i16* %1, i64 2
  %24 = load i16, i16* %23, align 2
  %25 = sitofp i16 %24 to float
  %26 = fmul float %25, 0x3F30000000000000
  %27 = fpext float %26 to double
  %28 = fadd double %22, %27
  %29 = getelementptr inbounds i16, i16* %1, i64 3
  %30 = load i16, i16* %29, align 2
  %31 = sitofp i16 %30 to float
  %32 = fmul float %31, 0x3F30000000000000
  %33 = fpext float %32 to double
  %34 = fadd double %28, %33
  %35 = fmul double %34, 2.500000e-01
  %36 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 3, i64 %38
  store double %35, double* %39, align 8
  %40 = fcmp olt double %35, 2.000000e-01
  br i1 %40, label %50, label %41

41:                                               ; preds = %4
  %42 = fcmp olt double %35, 4.000000e-01
  %43 = select i1 %42, double* @WebRtcIsac_kQPitchLagStepsizeMid, double* @WebRtcIsac_kQPitchLagStepsizeHi
  %44 = select i1 %42, double* getelementptr inbounds ([35 x double], [35 x double]* @WebRtcIsac_kQMeanLag2Mid, i64 0, i64 0), double* getelementptr inbounds ([67 x double], [67 x double]* @WebRtcIsac_kQMeanLag2Hi, i64 0, i64 0)
  %45 = select i1 %42, double* getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Mid, i64 0, i64 0), double* getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Hi, i64 0, i64 0)
  %46 = select i1 %42, double* getelementptr inbounds ([19 x double], [19 x double]* @WebRtcIsac_kQMeanLag4Mid, i64 0, i64 0), double* getelementptr inbounds ([34 x double], [34 x double]* @WebRtcIsac_kQMeanLag4Hi, i64 0, i64 0)
  %47 = select i1 %42, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexLowerLimitLagMid, i64 0, i64 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQindexLowerLimitLagHi, i64 0, i64 0)
  %48 = select i1 %42, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexUpperLimitLagMid, i64 0, i64 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQindexUpperLimitLagHi, i64 0, i64 0)
  %49 = select i1 %42, i16** getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrMid, i64 0, i64 0), i16** getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrHi, i64 0, i64 0)
  br label %50

50:                                               ; preds = %41, %4
  %51 = phi double* [ @WebRtcIsac_kQPitchLagStepsizeLo, %4 ], [ %43, %41 ]
  %52 = phi double* [ getelementptr inbounds ([19 x double], [19 x double]* @WebRtcIsac_kQMeanLag2Lo, i64 0, i64 0), %4 ], [ %44, %41 ]
  %53 = phi double* [ getelementptr inbounds ([1 x double], [1 x double]* @WebRtcIsac_kQMeanLag3Lo, i64 0, i64 0), %4 ], [ %45, %41 ]
  %54 = phi double* [ getelementptr inbounds ([9 x double], [9 x double]* @WebRtcIsac_kQMeanLag4Lo, i64 0, i64 0), %4 ], [ %46, %41 ]
  %55 = phi i16* [ getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexLowerLimitLagLo, i64 0, i64 0), %4 ], [ %47, %41 ]
  %56 = phi i16* [ getelementptr inbounds ([4 x i16], [4 x i16]* @WebRtcIsac_kQIndexUpperLimitLagLo, i64 0, i64 0), %4 ], [ %48, %41 ]
  %57 = phi i16** [ getelementptr inbounds ([4 x i16*], [4 x i16*]* @WebRtcIsac_kQPitchLagCdfPtrLo, i64 0, i64 0), %4 ], [ %49, %41 ]
  %58 = load double, double* %51, align 8
  %59 = getelementptr inbounds double, double* %0, i64 2
  %60 = bitcast double* %0 to <2 x double>*
  %61 = bitcast double* %59 to <2 x double>*
  br label %62

62:                                               ; preds = %97, %50
  %63 = phi i64 [ 0, %50 ], [ %106, %97 ]
  %64 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 %63, i64 0
  %65 = bitcast double* %64 to <2 x double>*
  %66 = load <2 x double>, <2 x double>* %65, align 16
  %67 = load <2 x double>, <2 x double>* %60, align 8
  %68 = fmul <2 x double> %66, %67
  %69 = extractelement <2 x double> %68, i32 0
  %70 = fadd double %69, 0.000000e+00
  %71 = extractelement <2 x double> %68, i32 1
  %72 = fadd double %70, %71
  %73 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransform, i64 0, i64 %63, i64 2
  %74 = bitcast double* %73 to <2 x double>*
  %75 = load <2 x double>, <2 x double>* %74, align 16
  %76 = load <2 x double>, <2 x double>* %61, align 8
  %77 = fmul <2 x double> %75, %76
  %78 = extractelement <2 x double> %77, i32 0
  %79 = fadd double %72, %78
  %80 = extractelement <2 x double> %77, i32 1
  %81 = fadd double %79, %80
  %82 = fdiv double %81, %58
  %83 = tail call i64 @lrint(double %82) #7
  %84 = trunc i64 %83 to i32
  %85 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %63
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds i16, i16* %55, i64 %63
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = icmp slt i32 %84, %88
  br i1 %89, label %95, label %90

90:                                               ; preds = %62
  %91 = getelementptr inbounds i16, i16* %56, i64 %63
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = icmp sgt i32 %84, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %90, %62
  %96 = phi i32 [ %88, %62 ], [ %93, %90 ]
  store i32 %96, i32* %85, align 4
  br label %97

97:                                               ; preds = %95, %90
  %98 = phi i32 [ %84, %90 ], [ %96, %95 ]
  %99 = sub nsw i32 %98, %88
  store i32 %99, i32* %85, align 4
  %100 = load i32, i32* %36, align 8
  %101 = shl i32 %100, 2
  %102 = trunc i64 %63 to i32
  %103 = add nsw i32 %101, %102
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds %struct.IsacSaveEncoderData, %struct.IsacSaveEncoderData* %3, i64 0, i32 4, i64 %104
  store i32 %99, i32* %105, align 4
  %106 = add nuw nsw i64 %63, 1
  %107 = icmp eq i64 %106, 4
  br i1 %107, label %108, label %62

108:                                              ; preds = %97
  %109 = getelementptr inbounds double, double* %0, i64 1
  %110 = getelementptr inbounds double, double* %0, i64 2
  %111 = getelementptr inbounds double, double* %0, i64 3
  %112 = load i32, i32* %7, align 16
  %113 = load i16, i16* %55, align 2
  %114 = sext i16 %113 to i32
  %115 = add nsw i32 %112, %114
  %116 = sitofp i32 %115 to double
  %117 = fmul double %58, %116
  %118 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 0), align 16
  %119 = fmul double %117, %118
  %120 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 0), align 16
  %121 = fmul double %117, %120
  %122 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 0), align 16
  %123 = fmul double %117, %122
  %124 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 0), align 16
  %125 = fmul double %117, %124
  %126 = load i32, i32* %8, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds double, double* %52, i64 %127
  %129 = load double, double* %128, align 8
  %130 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 1), align 8
  %131 = fmul double %129, %130
  %132 = fadd double %119, %131
  %133 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 1), align 8
  %134 = fmul double %129, %133
  %135 = fadd double %121, %134
  %136 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 1), align 8
  %137 = fmul double %129, %136
  %138 = fadd double %123, %137
  %139 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 1), align 8
  %140 = fmul double %129, %139
  %141 = fadd double %125, %140
  %142 = load i32, i32* %9, align 8
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double, double* %53, i64 %143
  %145 = load double, double* %144, align 8
  %146 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 2), align 16
  %147 = fmul double %145, %146
  %148 = fadd double %132, %147
  %149 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 2), align 16
  %150 = fmul double %145, %149
  %151 = fadd double %135, %150
  %152 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 2), align 16
  %153 = fmul double %145, %152
  %154 = fadd double %138, %153
  %155 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 2), align 16
  %156 = fmul double %145, %155
  %157 = fadd double %141, %156
  %158 = load i32, i32* %10, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds double, double* %54, i64 %159
  %161 = load double, double* %160, align 8
  %162 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 0, i64 3), align 8
  %163 = fmul double %161, %162
  %164 = fadd double %148, %163
  store double %164, double* %0, align 8
  %165 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 1, i64 3), align 8
  %166 = fmul double %161, %165
  %167 = fadd double %151, %166
  store double %167, double* %109, align 8
  %168 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 2, i64 3), align 8
  %169 = fmul double %161, %168
  %170 = fadd double %154, %169
  store double %170, double* %110, align 8
  %171 = load double, double* getelementptr inbounds ([4 x [4 x double]], [4 x [4 x double]]* @WebRtcIsac_kTransformTranspose, i64 0, i64 3, i64 3), align 8
  %172 = fmul double %161, %171
  %173 = fadd double %157, %172
  store double %173, double* %111, align 8
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %2, i32* nonnull %7, i16** %57, i32 4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeFrameLen(%struct.Bitstreamstruct*, i16* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kFrameLengthCdf_ptr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @WebRtcIsac_kFrameLengthInitIndex, i64 0, i64 0), i32 1) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %3, align 4
  switch i32 %8, label %11 [
    i32 1, label %9
    i32 2, label %10
  ]

9:                                                ; preds = %7
  store i16 480, i16* %1, align 2
  br label %11

10:                                               ; preds = %7
  store i16 960, i16* %1, align 2
  br label %11

11:                                               ; preds = %9, %10, %7, %2
  %12 = phi i32 [ -6640, %2 ], [ %5, %10 ], [ %5, %9 ], [ -6630, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_EncodeFrameLen(i16 signext, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 0, i32* %3, align 4
  %5 = sext i16 %0 to i32
  switch i32 %5, label %9 [
    i32 480, label %7
    i32 960, label %6
  ]

6:                                                ; preds = %2
  br label %7

7:                                                ; preds = %2, %6
  %8 = phi i32 [ 2, %6 ], [ 1, %2 ]
  store i32 %8, i32* %3, align 4
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %3, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @WebRtcIsac_kFrameLengthCdf_ptr, i64 0, i64 0), i32 1) #7
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi i32 [ 0, %7 ], [ -6430, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @WebRtcIsac_DecodeSendBW(%struct.Bitstreamstruct*, i16* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kBwCdfPtr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @kBwInitIndex, i64 0, i64 0), i32 1) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %3, align 4
  %9 = trunc i32 %8 to i16
  store i16 %9, i16* %1, align 2
  br label %10

10:                                               ; preds = %2, %7
  %11 = phi i32 [ %5, %7 ], [ -6650, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_EncodeReceiveBw(i32*, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  tail call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kBwCdfPtr, i64 0, i64 0), i32 1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_TranscodeLPCCoef(double* nocapture readonly, double* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %4 = alloca [12 x double], align 16
  %5 = bitcast [12 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 96, i1 false)
  %6 = load double, double* %0, align 8
  %7 = tail call double @log(double %6) #7
  %8 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 0
  %9 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 0), align 16
  %10 = fsub double %7, %9
  %11 = fmul double %10, 4.000000e+00
  store double %11, double* %8, align 16
  %12 = load double, double* %1, align 8
  %13 = tail call double @log(double %12) #7
  %14 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %15 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 1), align 8
  %16 = fsub double %13, %15
  %17 = fmul double %16, 4.000000e+00
  store double %17, double* %14, align 8
  %18 = getelementptr inbounds double, double* %0, i64 13
  %19 = load double, double* %18, align 8
  %20 = tail call double @log(double %19) #7
  %21 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 2
  %22 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 2), align 16
  %23 = fsub double %20, %22
  %24 = fmul double %23, 4.000000e+00
  store double %24, double* %21, align 16
  %25 = getelementptr inbounds double, double* %1, i64 7
  %26 = load double, double* %25, align 8
  %27 = tail call double @log(double %26) #7
  %28 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 3
  %29 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 3), align 8
  %30 = fsub double %27, %29
  %31 = fmul double %30, 4.000000e+00
  store double %31, double* %28, align 8
  %32 = getelementptr inbounds double, double* %0, i64 26
  %33 = load double, double* %32, align 8
  %34 = tail call double @log(double %33) #7
  %35 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 4
  %36 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 4), align 16
  %37 = fsub double %34, %36
  %38 = fmul double %37, 4.000000e+00
  store double %38, double* %35, align 16
  %39 = getelementptr inbounds double, double* %1, i64 14
  %40 = load double, double* %39, align 8
  %41 = tail call double @log(double %40) #7
  %42 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 5
  %43 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 5), align 8
  %44 = fsub double %41, %43
  %45 = fmul double %44, 4.000000e+00
  store double %45, double* %42, align 8
  %46 = getelementptr inbounds double, double* %0, i64 39
  %47 = load double, double* %46, align 8
  %48 = tail call double @log(double %47) #7
  %49 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 6
  %50 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 6), align 16
  %51 = fsub double %48, %50
  %52 = fmul double %51, 4.000000e+00
  store double %52, double* %49, align 16
  %53 = getelementptr inbounds double, double* %1, i64 21
  %54 = load double, double* %53, align 8
  %55 = tail call double @log(double %54) #7
  %56 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 7
  %57 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 7), align 8
  %58 = fsub double %55, %57
  %59 = fmul double %58, 4.000000e+00
  store double %59, double* %56, align 8
  %60 = getelementptr inbounds double, double* %0, i64 52
  %61 = load double, double* %60, align 8
  %62 = tail call double @log(double %61) #7
  %63 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 8
  %64 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 8), align 16
  %65 = fsub double %62, %64
  %66 = fmul double %65, 4.000000e+00
  store double %66, double* %63, align 16
  %67 = getelementptr inbounds double, double* %1, i64 28
  %68 = load double, double* %67, align 8
  %69 = tail call double @log(double %68) #7
  %70 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 9
  %71 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 9), align 8
  %72 = fsub double %69, %71
  %73 = fmul double %72, 4.000000e+00
  store double %73, double* %70, align 8
  %74 = getelementptr inbounds double, double* %0, i64 65
  %75 = load double, double* %74, align 8
  %76 = tail call double @log(double %75) #7
  %77 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 10
  %78 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 10), align 16
  %79 = fsub double %76, %78
  %80 = fmul double %79, 4.000000e+00
  store double %80, double* %77, align 16
  %81 = getelementptr inbounds double, double* %1, i64 35
  %82 = load double, double* %81, align 8
  %83 = tail call double @log(double %82) #7
  %84 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 11
  %85 = load double, double* getelementptr inbounds ([12 x double], [12 x double]* @WebRtcIsac_kLpcMeansGain, i64 0, i64 11), align 8
  %86 = fsub double %83, %85
  %87 = fmul double %86, 4.000000e+00
  store double %87, double* %84, align 8
  %88 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 0
  %89 = load double, double* %88, align 16
  %90 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 0), align 16
  %91 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 1
  %92 = load double, double* %91, align 8
  %93 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 2), align 16
  %94 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 1), align 8
  %95 = load double, double* getelementptr inbounds ([4 x double], [4 x double]* @WebRtcIsac_kKltT1Gain, i64 0, i64 3), align 8
  %96 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 2
  %97 = load double, double* %96, align 16
  %98 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 3
  %99 = load double, double* %98, align 8
  %100 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 4
  %101 = load double, double* %100, align 16
  %102 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 5
  %103 = load double, double* %102, align 8
  %104 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 6
  %105 = load double, double* %104, align 16
  %106 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 7
  %107 = load double, double* %106, align 8
  %108 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 8
  %109 = load double, double* %108, align 16
  %110 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 9
  %111 = load double, double* %110, align 8
  %112 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 10
  %113 = load double, double* %112, align 16
  %114 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 11
  %115 = load double, double* %114, align 8
  %116 = fmul double %113, %94
  %117 = fadd double %116, 0.000000e+00
  %118 = fmul double %115, %95
  %119 = fadd double %117, %118
  %120 = fmul double %113, %90
  %121 = fadd double %120, 0.000000e+00
  %122 = fmul double %115, %93
  %123 = fadd double %121, %122
  %124 = fmul double %109, %94
  %125 = fadd double %124, 0.000000e+00
  %126 = fmul double %111, %95
  %127 = fadd double %125, %126
  %128 = fmul double %109, %90
  %129 = fadd double %128, 0.000000e+00
  %130 = fmul double %111, %93
  %131 = fadd double %129, %130
  %132 = fmul double %105, %94
  %133 = fadd double %132, 0.000000e+00
  %134 = fmul double %107, %95
  %135 = fadd double %133, %134
  %136 = fmul double %105, %90
  %137 = fadd double %136, 0.000000e+00
  %138 = fmul double %107, %93
  %139 = fadd double %137, %138
  %140 = fmul double %101, %94
  %141 = fadd double %140, 0.000000e+00
  %142 = fmul double %103, %95
  %143 = fadd double %141, %142
  %144 = fmul double %101, %90
  %145 = fadd double %144, 0.000000e+00
  %146 = fmul double %103, %93
  %147 = fadd double %145, %146
  %148 = fmul double %97, %94
  %149 = fadd double %148, 0.000000e+00
  %150 = fmul double %99, %95
  %151 = fadd double %149, %150
  %152 = fmul double %97, %90
  %153 = fadd double %152, 0.000000e+00
  %154 = fmul double %99, %93
  %155 = fadd double %153, %154
  %156 = fmul double %89, %94
  %157 = fadd double %156, 0.000000e+00
  %158 = fmul double %92, %95
  %159 = fadd double %157, %158
  %160 = fmul double %89, %90
  %161 = fadd double %160, 0.000000e+00
  %162 = fmul double %92, %93
  %163 = fadd double %161, %162
  %164 = insertelement <2 x double> undef, double %163, i32 0
  %165 = shufflevector <2 x double> %164, <2 x double> undef, <2 x i32> zeroinitializer
  %166 = insertelement <2 x double> undef, double %155, i32 0
  %167 = shufflevector <2 x double> %166, <2 x double> undef, <2 x i32> zeroinitializer
  %168 = insertelement <2 x double> undef, double %147, i32 0
  %169 = shufflevector <2 x double> %168, <2 x double> undef, <2 x i32> zeroinitializer
  %170 = insertelement <2 x double> undef, double %139, i32 0
  %171 = shufflevector <2 x double> %170, <2 x double> undef, <2 x i32> zeroinitializer
  %172 = insertelement <2 x double> undef, double %131, i32 0
  %173 = shufflevector <2 x double> %172, <2 x double> undef, <2 x i32> zeroinitializer
  %174 = insertelement <2 x double> undef, double %123, i32 0
  %175 = shufflevector <2 x double> %174, <2 x double> undef, <2 x i32> zeroinitializer
  %176 = insertelement <2 x double> undef, double %159, i32 0
  %177 = shufflevector <2 x double> %176, <2 x double> undef, <2 x i32> zeroinitializer
  %178 = insertelement <2 x double> undef, double %151, i32 0
  %179 = shufflevector <2 x double> %178, <2 x double> undef, <2 x i32> zeroinitializer
  %180 = insertelement <2 x double> undef, double %143, i32 0
  %181 = shufflevector <2 x double> %180, <2 x double> undef, <2 x i32> zeroinitializer
  %182 = insertelement <2 x double> undef, double %135, i32 0
  %183 = shufflevector <2 x double> %182, <2 x double> undef, <2 x i32> zeroinitializer
  %184 = insertelement <2 x double> undef, double %127, i32 0
  %185 = shufflevector <2 x double> %184, <2 x double> undef, <2 x i32> zeroinitializer
  %186 = insertelement <2 x double> undef, double %119, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> undef, <2 x i32> zeroinitializer
  %188 = load <12 x double>, <12 x double>* bitcast ([36 x double]* @WebRtcIsac_kKltT2Gain to <12 x double>*), align 16
  %189 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %190 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %191 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %192 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %193 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %194 = shufflevector <12 x double> %188, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %195 = fmul <2 x double> %165, %189
  %196 = fadd <2 x double> %195, zeroinitializer
  %197 = fmul <2 x double> %167, %190
  %198 = fadd <2 x double> %196, %197
  %199 = fmul <2 x double> %169, %191
  %200 = fadd <2 x double> %198, %199
  %201 = fmul <2 x double> %171, %192
  %202 = fadd <2 x double> %200, %201
  %203 = fmul <2 x double> %173, %193
  %204 = fadd <2 x double> %202, %203
  %205 = fmul <2 x double> %175, %194
  %206 = fadd <2 x double> %204, %205
  %207 = fmul <2 x double> %177, %189
  %208 = fadd <2 x double> %207, zeroinitializer
  %209 = fmul <2 x double> %179, %190
  %210 = fadd <2 x double> %208, %209
  %211 = fmul <2 x double> %181, %191
  %212 = fadd <2 x double> %210, %211
  %213 = fmul <2 x double> %183, %192
  %214 = fadd <2 x double> %212, %213
  %215 = fmul <2 x double> %185, %193
  %216 = fadd <2 x double> %214, %215
  %217 = fmul <2 x double> %187, %194
  %218 = fadd <2 x double> %216, %217
  %219 = bitcast [12 x double]* %4 to <4 x double>*
  %220 = shufflevector <2 x double> %206, <2 x double> %218, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %220, <4 x double>* %219, align 16
  %221 = load <12 x double>, <12 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 12) to <12 x double>*), align 16
  %222 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %223 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %224 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %225 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %226 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %227 = shufflevector <12 x double> %221, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %228 = fmul <2 x double> %165, %222
  %229 = fadd <2 x double> %228, zeroinitializer
  %230 = fmul <2 x double> %167, %223
  %231 = fadd <2 x double> %229, %230
  %232 = fmul <2 x double> %169, %224
  %233 = fadd <2 x double> %231, %232
  %234 = fmul <2 x double> %171, %225
  %235 = fadd <2 x double> %233, %234
  %236 = fmul <2 x double> %173, %226
  %237 = fadd <2 x double> %235, %236
  %238 = fmul <2 x double> %175, %227
  %239 = fadd <2 x double> %237, %238
  %240 = fmul <2 x double> %177, %222
  %241 = fadd <2 x double> %240, zeroinitializer
  %242 = fmul <2 x double> %179, %223
  %243 = fadd <2 x double> %241, %242
  %244 = fmul <2 x double> %181, %224
  %245 = fadd <2 x double> %243, %244
  %246 = fmul <2 x double> %183, %225
  %247 = fadd <2 x double> %245, %246
  %248 = fmul <2 x double> %185, %226
  %249 = fadd <2 x double> %247, %248
  %250 = fmul <2 x double> %187, %227
  %251 = fadd <2 x double> %249, %250
  %252 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 4
  %253 = bitcast double* %252 to <4 x double>*
  %254 = shufflevector <2 x double> %239, <2 x double> %251, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %254, <4 x double>* %253, align 16
  %255 = load <12 x double>, <12 x double>* bitcast (double* getelementptr inbounds ([36 x double], [36 x double]* @WebRtcIsac_kKltT2Gain, i64 0, i64 24) to <12 x double>*), align 16
  %256 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 0, i32 6>
  %257 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 1, i32 7>
  %258 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 2, i32 8>
  %259 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 3, i32 9>
  %260 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 4, i32 10>
  %261 = shufflevector <12 x double> %255, <12 x double> undef, <2 x i32> <i32 5, i32 11>
  %262 = fmul <2 x double> %165, %256
  %263 = fadd <2 x double> %262, zeroinitializer
  %264 = fmul <2 x double> %167, %257
  %265 = fadd <2 x double> %263, %264
  %266 = fmul <2 x double> %169, %258
  %267 = fadd <2 x double> %265, %266
  %268 = fmul <2 x double> %171, %259
  %269 = fadd <2 x double> %267, %268
  %270 = fmul <2 x double> %173, %260
  %271 = fadd <2 x double> %269, %270
  %272 = fmul <2 x double> %175, %261
  %273 = fadd <2 x double> %271, %272
  %274 = fmul <2 x double> %177, %256
  %275 = fadd <2 x double> %274, zeroinitializer
  %276 = fmul <2 x double> %179, %257
  %277 = fadd <2 x double> %275, %276
  %278 = fmul <2 x double> %181, %258
  %279 = fadd <2 x double> %277, %278
  %280 = fmul <2 x double> %183, %259
  %281 = fadd <2 x double> %279, %280
  %282 = fmul <2 x double> %185, %260
  %283 = fadd <2 x double> %281, %282
  %284 = fmul <2 x double> %187, %261
  %285 = fadd <2 x double> %283, %284
  %286 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 8
  %287 = bitcast double* %286 to <4 x double>*
  %288 = shufflevector <2 x double> %273, <2 x double> %285, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  store <4 x double> %288, <4 x double>* %287, align 16
  br label %289

289:                                              ; preds = %3, %308
  %290 = phi i64 [ %319, %308 ], [ 0, %3 ]
  %291 = getelementptr inbounds [12 x double], [12 x double]* %4, i64 0, i64 %290
  %292 = load double, double* %291, align 8
  %293 = tail call i64 @lrint(double %292) #7
  %294 = trunc i64 %293 to i32
  %295 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltQuantMinGain, i64 0, i64 %290
  %296 = load i16, i16* %295, align 2
  %297 = sext i16 %296 to i32
  %298 = add nsw i32 %297, %294
  %299 = getelementptr inbounds i32, i32* %2, i64 %290
  store i32 %298, i32* %299, align 4
  %300 = icmp slt i32 %298, 0
  br i1 %300, label %306, label %301

301:                                              ; preds = %289
  %302 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltMaxIndGain, i64 0, i64 %290
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = icmp sgt i32 %298, %304
  br i1 %305, label %306, label %308

306:                                              ; preds = %301, %289
  %307 = phi i32 [ 0, %289 ], [ %304, %301 ]
  store i32 %307, i32* %299, align 4
  br label %308

308:                                              ; preds = %306, %301
  %309 = phi i32 [ %298, %301 ], [ %307, %306 ]
  %310 = getelementptr inbounds [12 x i16], [12 x i16]* @WebRtcIsac_kQKltOffsetGain, i64 0, i64 %290
  %311 = load i16, i16* %310, align 2
  %312 = zext i16 %311 to i32
  %313 = add nuw nsw i32 %309, %312
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds [392 x double], [392 x double]* @WebRtcIsac_kQKltLevelsGain, i64 0, i64 %314
  %316 = bitcast double* %315 to i64*
  %317 = load i64, i64* %316, align 8
  %318 = bitcast double* %291 to i64*
  store i64 %317, i64* %318, align 8
  %319 = add nuw nsw i64 %290, 1
  %320 = icmp eq i64 %319, 12
  br i1 %320, label %321, label %289

321:                                              ; preds = %308
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %5) #7
  ret void
}

declare signext i16 @WebRtcIsac_DequantizeLpcParam(i32*, double*, i16 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_EncodeBandwidth(i32, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  switch i32 %0, label %8 [
    i32 12, label %6
    i32 16, label %5
  ]

5:                                                ; preds = %2
  br label %6

6:                                                ; preds = %2, %5
  %7 = phi i32 [ 1, %5 ], [ 0, %2 ]
  store i32 %7, i32* %3, align 4
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %3, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kOneBitEqualProbCdf_ptr, i64 0, i64 0), i32 1) #7
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i16 [ 0, %6 ], [ -6460, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i16 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecodeBandwidth(%struct.Bitstreamstruct*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kOneBitEqualProbCdf_ptr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @kOneBitEqualProbInitIndex, i64 0, i64 0), i32 1) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %3, align 4
  switch i32 %8, label %12 [
    i32 0, label %10
    i32 1, label %9
  ]

9:                                                ; preds = %7
  br label %10

10:                                               ; preds = %7, %9
  %11 = phi i32 [ 16, %9 ], [ 12, %7 ]
  store i32 %11, i32* %1, align 4
  br label %12

12:                                               ; preds = %7, %2, %10
  %13 = phi i16 [ 0, %10 ], [ -6740, %2 ], [ -6750, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i16 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_EncodeJitterInfo(i32, %struct.Bitstreamstruct*) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = icmp ugt i32 %0, 1
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  store i32 %0, i32* %3, align 4
  call void @WebRtcIsac_EncHistMulti(%struct.Bitstreamstruct* %1, i32* nonnull %3, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kOneBitEqualProbCdf_ptr, i64 0, i64 0), i32 1) #7
  br label %7

7:                                                ; preds = %2, %6
  %8 = phi i16 [ 0, %6 ], [ -1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i16 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i16 @WebRtcIsac_DecodeJitterInfo(%struct.Bitstreamstruct*, i32* nocapture) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7
  store i32 -1431655766, i32* %3, align 4
  %5 = call i32 @WebRtcIsac_DecHistOneStepMulti(i32* nonnull %3, %struct.Bitstreamstruct* %0, i16** getelementptr inbounds ([1 x i16*], [1 x i16*]* @kOneBitEqualProbCdf_ptr, i64 0, i64 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @kOneBitEqualProbInitIndex, i64 0, i64 0), i32 1) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = load i32, i32* %3, align 4
  %9 = shl i32 %8, 16
  %10 = ashr exact i32 %9, 16
  store i32 %10, i32* %1, align 4
  br label %11

11:                                               ; preds = %2, %7
  %12 = phi i16 [ 0, %7 ], [ -6740, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7
  ret i16 %12
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !9}
!17 = distinct !{!17, !9}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !9}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !9}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33, !34, !35}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !31}
!35 = distinct !{!35, !31}
!36 = distinct !{!36, !9}
!37 = distinct !{!37, !9}
!38 = distinct !{!38, !9}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !9}
!41 = distinct !{!41, !42, !9}
!42 = !{!"llvm.loop.unroll.runtime.disable"}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = !{!49}
!49 = distinct !{!49, !45}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !9}
!52 = distinct !{!52, !9}
!53 = distinct !{!53, !9}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = !{!60}
!60 = distinct !{!60, !56}
!61 = !{!58, !55}
!62 = distinct !{!62, !9}
!63 = distinct !{!63, !9}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = !{!70}
!70 = distinct !{!70, !66}
!71 = !{!68, !65}
!72 = distinct !{!72, !9}
!73 = distinct !{!73, !9}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = !{!80}
!80 = distinct !{!80, !76}
!81 = !{!75, !78}
!82 = distinct !{!82, !9}
!83 = distinct !{!83, !9}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = !{!90}
!90 = distinct !{!90, !86}
!91 = !{!85, !88}
!92 = distinct !{!92, !9}
!93 = distinct !{!93, !9}
!94 = distinct !{!94, !95}
!95 = !{!"llvm.loop.unroll.disable"}
!96 = distinct !{!96, !9}
