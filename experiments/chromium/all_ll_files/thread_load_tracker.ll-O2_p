; ModuleID = '../../third_party/blink/renderer/platform/scheduler/common/thread_load_tracker.cc'
source_filename = "../../third_party/blink/renderer/platform/scheduler/common/thread_load_tracker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::scheduler::ThreadLoadTracker" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", i32, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::RepeatingCallback" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK4base9TimeDeltadvES0_ = comdat any

$_ZNK4base9TimeDeltamiES0_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1

@_ZN5blink9scheduler17ThreadLoadTrackerC1EN4base9TimeTicksERKNS2_17RepeatingCallbackIFvS3_dEEENS2_9TimeDeltaE = hidden unnamed_addr alias void (%"class.blink::scheduler::ThreadLoadTracker"*, i64, %"class.base::RepeatingCallback"*, i64), void (%"class.blink::scheduler::ThreadLoadTracker"*, i64, %"class.base::RepeatingCallback"*, i64)* @_ZN5blink9scheduler17ThreadLoadTrackerC2EN4base9TimeTicksERKNS2_17RepeatingCallbackIFvS3_dEEENS2_9TimeDeltaE
@_ZN5blink9scheduler17ThreadLoadTrackerD1Ev = hidden unnamed_addr alias void (%"class.blink::scheduler::ThreadLoadTracker"*), void (%"class.blink::scheduler::ThreadLoadTracker"*)* @_ZN5blink9scheduler17ThreadLoadTrackerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTrackerC2EN4base9TimeTicksERKNS2_17RepeatingCallbackIFvS3_dEEENS2_9TimeDeltaE(%"class.blink::scheduler::ThreadLoadTracker"*, i64, %"class.base::RepeatingCallback"* dereferenceable(8), i64) unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 2
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %1, i64* %9, align 8
  %10 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  store i64 %3, i64* %10, align 8
  %11 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 6, i32 0
  %13 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %12, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %13) #5
  %14 = load i64, i64* %10, align 8
  %15 = add i64 %14, -9223372036854775807
  %16 = icmp ult i64 %15, 2
  br i1 %16, label %24, label %17

17:                                               ; preds = %4
  %18 = icmp slt i64 %14, 0
  %19 = select i1 %18, i64 -9223372036854775808, i64 9223372036854775807
  %20 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %14) #5
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = extractvalue { i64, i1 } %20, 0
  %23 = select i1 %21, i64 %19, i64 %22, !prof !2
  br label %32

24:                                               ; preds = %4
  %25 = add i64 %1, -9223372036854775807
  %26 = icmp ugt i64 %25, 1
  %27 = icmp eq i64 %14, %1
  %28 = or i1 %26, %27
  br i1 %28, label %32, label %29

29:                                               ; preds = %24
  %30 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %31 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #5
  br label %32

32:                                               ; preds = %17, %24, %29
  %33 = phi i64 [ %23, %17 ], [ %14, %24 ], [ %14, %29 ]
  store i64 %33, i64* %7, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTrackerD2Ev(%"class.blink::scheduler::ThreadLoadTracker"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 6, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker5PauseEN4base9TimeTicksE(%"class.blink::scheduler::ThreadLoadTracker"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  tail call void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"* %0, i64 %1, i32 1)
  %4 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 2
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %17, label %10

10:                                               ; preds = %2
  %11 = icmp slt i64 %7, 0
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %7) #5
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  br label %25

17:                                               ; preds = %2
  %18 = add i64 %1, -9223372036854775807
  %19 = icmp ugt i64 %18, 1
  %20 = icmp eq i64 %7, %1
  %21 = or i1 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  br label %25

25:                                               ; preds = %10, %17, %22
  %26 = phi i64 [ %16, %10 ], [ %7, %17 ], [ %7, %22 ]
  %27 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"*, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::TimeTicks", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.base::TimeDelta", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca i64, align 8
  store i64 %1, i64* %9, align 8
  %10 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  %13 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %12, label %35, label %14

14:                                               ; preds = %3
  %15 = load i64, i64* %13, align 8
  %16 = icmp slt i64 %15, %1
  br i1 %16, label %17, label %132

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %18, i64 0, i32 0, i32 0
  %20 = bitcast i64* %9 to %"class.base::TimeTicks"*
  %21 = icmp eq i32 %2, 0
  %22 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  %23 = bitcast %"class.base::TimeDelta"* %7 to i8*
  %24 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %7, i64 0, i32 0
  %25 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1, i32 0, i32 0
  %26 = bitcast %"class.logging::CheckError"* %6 to i8*
  %27 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5, i32 0
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  %29 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5
  %30 = bitcast %"class.base::TimeTicks"* %4 to i8*
  %31 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %4, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %33 = bitcast %"class.logging::CheckError"* %8 to i8*
  %34 = load i64, i64* %19, align 8
  br label %36

35:                                               ; preds = %3
  store i64 %1, i64* %13, align 8
  br label %132

36:                                               ; preds = %17, %128
  %37 = phi i64 [ %34, %17 ], [ %130, %128 ]
  %38 = phi i64 [ %15, %17 ], [ %129, %128 ]
  %39 = icmp sgt i64 %37, %1
  %40 = select i1 %39, %"class.base::TimeTicks"* %20, %"class.base::TimeTicks"* %18
  %41 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %40, i64 0, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = sub nsw i64 %42, %38
  br i1 %21, label %44, label %92

44:                                               ; preds = %36
  %45 = load i64, i64* %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  store i64 %37, i64* %24, align 8
  %46 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %7, i64 %45) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  %47 = load i64, i64* %25, align 8
  %48 = load i64, i64* %13, align 8
  %49 = add i64 %43, -9223372036854775807
  %50 = icmp ult i64 %49, 2
  br i1 %50, label %58, label %51

51:                                               ; preds = %44
  %52 = icmp slt i64 %43, 0
  %53 = select i1 %52, i64 -9223372036854775808, i64 9223372036854775807
  %54 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %48, i64 %43) #5
  %55 = extractvalue { i64, i1 } %54, 1
  %56 = extractvalue { i64, i1 } %54, 0
  %57 = select i1 %55, i64 %53, i64 %56, !prof !2
  br label %65

58:                                               ; preds = %44
  %59 = add i64 %48, -9223372036854775807
  %60 = icmp ugt i64 %59, 1
  %61 = icmp eq i64 %48, %43
  %62 = or i1 %61, %60
  br i1 %62, label %65, label %63

63:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %64 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #5
  br label %65

65:                                               ; preds = %51, %58, %63
  %66 = phi i64 [ %57, %51 ], [ %43, %58 ], [ %43, %63 ]
  %67 = icmp slt i64 %46, %48
  %68 = select i1 %67, i64 %48, i64 %46
  %69 = icmp slt i64 %66, %47
  %70 = select i1 %69, i64 %66, i64 %47
  %71 = icmp slt i64 %70, %68
  %72 = sub nsw i64 %70, %68
  %73 = select i1 %71, i64 0, i64 %72
  %74 = add nsw i64 %73, -9223372036854775807
  %75 = icmp ult i64 %74, 2
  %76 = load i64, i64* %27, align 8
  br i1 %75, label %82, label %77

77:                                               ; preds = %65
  %78 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %76, i64 %73) #5
  %79 = extractvalue { i64, i1 } %78, 1
  %80 = extractvalue { i64, i1 } %78, 0
  %81 = select i1 %79, i64 9223372036854775807, i64 %80, !prof !2
  br label %89

82:                                               ; preds = %65
  %83 = add i64 %76, -9223372036854775807
  %84 = icmp ugt i64 %83, 1
  %85 = icmp eq i64 %76, %73
  %86 = or i1 %84, %85
  br i1 %86, label %89, label %87

87:                                               ; preds = %82
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %88 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #5
  br label %89

89:                                               ; preds = %77, %82, %87
  %90 = phi i64 [ %81, %77 ], [ 9223372036854775807, %82 ], [ 9223372036854775807, %87 ]
  store i64 %90, i64* %27, align 8
  %91 = load i64, i64* %25, align 8
  br label %92

92:                                               ; preds = %89, %36
  %93 = phi i64 [ %91, %89 ], [ %37, %36 ]
  store i64 %42, i64* %13, align 8
  %94 = icmp eq i64 %42, %93
  br i1 %94, label %95, label %128

95:                                               ; preds = %92
  %96 = load i32, i32* %10, align 8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %95
  %99 = load i64, i64* %22, align 8
  %100 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %29, i64 %99) #5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30)
  store i64 %42, i64* %31, align 8
  %101 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %32, align 8
  %102 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %101, i64 0, i32 1
  %103 = bitcast void ()** %102 to void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*, double)**
  %104 = load void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*, double)*, void (%"class.base::internal::BindStateBase"*, %"class.base::TimeTicks"*, double)** %103, align 8
  call void %104(%"class.base::internal::BindStateBase"* %101, %"class.base::TimeTicks"* nonnull dereferenceable(8) %4, double %100) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30)
  %105 = load i64, i64* %19, align 8
  br label %106

106:                                              ; preds = %98, %95
  %107 = phi i64 [ %105, %98 ], [ %42, %95 ]
  %108 = load i64, i64* %22, align 8
  %109 = add i64 %108, -9223372036854775807
  %110 = icmp ult i64 %109, 2
  br i1 %110, label %118, label %111

111:                                              ; preds = %106
  %112 = icmp slt i64 %108, 0
  %113 = select i1 %112, i64 -9223372036854775808, i64 9223372036854775807
  %114 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %107, i64 %108) #5
  %115 = extractvalue { i64, i1 } %114, 1
  %116 = extractvalue { i64, i1 } %114, 0
  %117 = select i1 %115, i64 %113, i64 %116, !prof !2
  br label %125

118:                                              ; preds = %106
  %119 = add i64 %107, -9223372036854775807
  %120 = icmp ugt i64 %119, 1
  %121 = icmp eq i64 %107, %108
  %122 = or i1 %121, %120
  br i1 %122, label %125, label %123

123:                                              ; preds = %118
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %124 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #5
  br label %125

125:                                              ; preds = %111, %118, %123
  %126 = phi i64 [ %117, %111 ], [ %108, %118 ], [ %108, %123 ]
  store i64 %126, i64* %19, align 8
  store i64 0, i64* %27, align 8
  %127 = load i64, i64* %13, align 8
  br label %128

128:                                              ; preds = %125, %92
  %129 = phi i64 [ %127, %125 ], [ %42, %92 ]
  %130 = phi i64 [ %126, %125 ], [ %93, %92 ]
  %131 = icmp slt i64 %129, %1
  br i1 %131, label %36, label %132

132:                                              ; preds = %128, %14, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker5ResetEN4base9TimeTicksE(%"class.blink::scheduler::ThreadLoadTracker"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, -9223372036854775807
  %8 = icmp ult i64 %7, 2
  br i1 %8, label %16, label %9

9:                                                ; preds = %2
  %10 = icmp slt i64 %6, 0
  %11 = select i1 %10, i64 -9223372036854775808, i64 9223372036854775807
  %12 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %6) #5
  %13 = extractvalue { i64, i1 } %12, 1
  %14 = extractvalue { i64, i1 } %12, 0
  %15 = select i1 %13, i64 %11, i64 %14, !prof !2
  br label %24

16:                                               ; preds = %2
  %17 = add i64 %1, -9223372036854775807
  %18 = icmp ugt i64 %17, 1
  %19 = icmp eq i64 %6, %1
  %20 = or i1 %18, %19
  br i1 %20, label %24, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #5
  br label %24

24:                                               ; preds = %9, %16, %21
  %25 = phi i64 [ %15, %9 ], [ %6, %16 ], [ %6, %21 ]
  %26 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %27, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker6ResumeEN4base9TimeTicksE(%"class.blink::scheduler::ThreadLoadTracker"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  tail call void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"* %0, i64 %1, i32 1)
  %4 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 2
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 3, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -9223372036854775807
  %9 = icmp ult i64 %8, 2
  br i1 %9, label %17, label %10

10:                                               ; preds = %2
  %11 = icmp slt i64 %7, 0
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %7) #5
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  br label %25

17:                                               ; preds = %2
  %18 = add i64 %1, -9223372036854775807
  %19 = icmp ugt i64 %18, 1
  %20 = icmp eq i64 %7, %1
  %21 = or i1 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #5
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  br label %25

25:                                               ; preds = %10, %17, %22
  %26 = phi i64 [ %16, %10 ], [ %7, %17 ], [ %7, %22 ]
  %27 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 1, i32 0, i32 0
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5, i32 0
  store i64 0, i64* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker14RecordTaskTimeEN4base9TimeTicksES3_(%"class.blink::scheduler::ThreadLoadTracker"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %6, i64 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp slt i64 %8, %1
  %10 = bitcast i64* %4 to %"class.base::TimeTicks"*
  %11 = select i1 %9, %"class.base::TimeTicks"* %10, %"class.base::TimeTicks"* %6
  %12 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %11, i64 0, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp slt i64 %8, %2
  %15 = bitcast i64* %5 to %"class.base::TimeTicks"*
  %16 = select i1 %14, %"class.base::TimeTicks"* %15, %"class.base::TimeTicks"* %6
  %17 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %16, i64 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  tail call void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"* %0, i64 %13, i32 1)
  tail call void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"* %0, i64 %18, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9scheduler17ThreadLoadTracker10RecordIdleEN4base9TimeTicksE(%"class.blink::scheduler::ThreadLoadTracker"*, i64) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5blink9scheduler17ThreadLoadTracker7AdvanceEN4base9TimeTicksENS1_9TaskStateE(%"class.blink::scheduler::ThreadLoadTracker"* %0, i64 %1, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink9scheduler17ThreadLoadTracker4LoadEv(%"class.blink::scheduler::ThreadLoadTracker"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.blink::scheduler::ThreadLoadTracker", %"class.blink::scheduler::ThreadLoadTracker"* %0, i64 0, i32 4, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = tail call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* %2, i64 %4)
  ret double %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0)) #5
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #5
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #5
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #5
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %26, i8* %27) #5
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #5
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #5
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #4

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
