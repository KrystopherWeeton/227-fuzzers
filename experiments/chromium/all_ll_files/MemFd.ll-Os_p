; ModuleID = '../../third_party/swiftshader/src/System/Linux/MemFd.cpp'
source_filename = "../../third_party/swiftshader/src/System/Linux/MemFd.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.LinuxMemFd = type { i32 }

@.str = private unnamed_addr constant [45 x i8] c"%s:%d TRACE: memfd_create() returned %d: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"../../third_party/swiftshader/src/System/Linux/MemFd.cpp\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"%s:%d TRACE: ftruncate() %lld returned %d: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [50 x i8] c"%s:%d TRACE: LinuxMemFd::close() failed with: %s\0A\00", align 1

@_ZN10LinuxMemFdD1Ev = hidden unnamed_addr alias void (%class.LinuxMemFd*), void (%class.LinuxMemFd*)* @_ZN10LinuxMemFdD2Ev

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN10LinuxMemFdD2Ev(%class.LinuxMemFd* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN10LinuxMemFd5closeEv(%class.LinuxMemFd* %0) #4
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN10LinuxMemFd5closeEv(%class.LinuxMemFd* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.LinuxMemFd, %class.LinuxMemFd* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, -1
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = tail call i32 @close(i32 %3) #5
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = tail call i32* @__errno_location() #6
  %10 = load i32, i32* %9, align 4
  %11 = tail call i8* @strerror(i32 %10) #5
  tail call void (i8*, ...) @_ZN2sw5traceEPKcz(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 98, i8* %11) #5
  br label %12

12:                                               ; preds = %8, %5
  store i32 -1, i32* %2, align 4
  br label %13

13:                                               ; preds = %12, %1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN10LinuxMemFd8importFdEi(%class.LinuxMemFd* nocapture, i32) local_unnamed_addr #0 align 2 {
  tail call void @_ZN10LinuxMemFd5closeEv(%class.LinuxMemFd* %0) #4
  %3 = getelementptr inbounds %class.LinuxMemFd, %class.LinuxMemFd* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZNK10LinuxMemFd8exportFdEv(%class.LinuxMemFd* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.LinuxMemFd, %class.LinuxMemFd* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i32 (i32, i32, ...) @fcntl(i32 %3, i32 1030, i32 0) #5
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ %6, %5 ], [ %3, %1 ]
  ret i32 %8
}

; Function Attrs: optsize
declare i32 @fcntl(i32, i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN10LinuxMemFd8allocateEPKcm(%class.LinuxMemFd* nocapture, i8*, i64) local_unnamed_addr #0 align 2 {
  tail call void @_ZN10LinuxMemFd5closeEv(%class.LinuxMemFd* %0) #4
  %4 = tail call i64 (i64, ...) @syscall(i64 319, i8* %1, i32 1) #5
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %class.LinuxMemFd, %class.LinuxMemFd* %0, i64 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = icmp slt i32 %5, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = tail call i32* @__errno_location() #6
  %10 = load i32, i32* %9, align 4
  %11 = tail call i8* @strerror(i32 %10) #5
  tail call void (i8*, ...) @_ZN2sw5traceEPKcz(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 75, i32 %10, i8* %11) #5
  br label %21

12:                                               ; preds = %3
  %13 = icmp eq i64 %2, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12
  %15 = tail call i32 @ftruncate64(i32 %5, i64 %2) #5
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %14
  %18 = tail call i32* @__errno_location() #6
  %19 = load i32, i32* %18, align 4
  %20 = tail call i8* @strerror(i32 %19) #5
  tail call void (i8*, ...) @_ZN2sw5traceEPKcz(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i32 81, i64 %2, i32 %19, i8* %20) #5
  tail call void @_ZN10LinuxMemFd5closeEv(%class.LinuxMemFd* %0) #4
  br label %21

21:                                               ; preds = %14, %12, %17, %8
  %22 = phi i1 [ false, %8 ], [ false, %17 ], [ true, %12 ], [ true, %14 ]
  ret i1 %22
}

; Function Attrs: nounwind optsize
declare i64 @syscall(i64, ...) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_ZN2sw5traceEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind optsize readnone
declare i32* @__errno_location() local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare i8* @strerror(i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare i32 @ftruncate64(i32, i64) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @close(i32) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZN10LinuxMemFd12mapReadWriteEmm(%class.LinuxMemFd* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.LinuxMemFd, %class.LinuxMemFd* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = tail call i8* @mmap64(i8* null, i64 %2, i32 3, i32 1, i32 %5, i64 %1) #5
  %7 = icmp eq i8* %6, inttoptr (i64 -1 to i8*)
  %8 = select i1 %7, i8* null, i8* %6
  ret i8* %8
}

; Function Attrs: nounwind optsize
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN10LinuxMemFd5unmapEPvm(%class.LinuxMemFd* nocapture readnone, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @munmap(i8* %1, i64 %2) #5
  %5 = icmp eq i32 %4, 0
  ret i1 %5
}

; Function Attrs: nounwind optsize
declare i32 @munmap(i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { optsize }
attributes #5 = { nounwind optsize }
attributes #6 = { nounwind optsize readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
