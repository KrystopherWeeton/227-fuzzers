; ModuleID = '../../third_party/cld_3/src/src/script_span/text_processing.cc'
source_filename = "../../third_party/cld_3/src/src/script_span/text_processing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14chrome_lang_id4CLD219CheapSqueezeInplaceEPcii(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = tail call i8* @_Znam(i64 16384) #4
  %7 = bitcast i8* %6 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 16384, i1 false)
  %8 = icmp eq i32 %2, 0
  %9 = select i1 %8, i32 48, i32 %2
  %10 = mul nsw i32 %9, 30
  %11 = sdiv i32 %10, 100
  %12 = mul nsw i32 %9, 40
  %13 = sdiv i32 %12, 100
  %14 = icmp sgt i32 %1, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %3
  %16 = ptrtoint i8* %0 to i64
  br label %297

17:                                               ; preds = %3
  %18 = ptrtoint i8* %5 to i64
  %19 = ptrtoint i8* %0 to i64
  %20 = getelementptr inbounds i8, i8* %0, i64 1
  br label %21

21:                                               ; preds = %17, %287
  %22 = phi i8* [ %0, %17 ], [ %293, %287 ]
  %23 = phi i8* [ %0, %17 ], [ %290, %287 ]
  %24 = phi i8 [ 0, %17 ], [ %288, %287 ]
  %25 = phi i32 [ 0, %17 ], [ %199, %287 ]
  %26 = ptrtoint i8* %22 to i64
  %27 = sub i64 %18, %26
  %28 = trunc i64 %27 to i32
  %29 = icmp slt i32 %9, %28
  %30 = select i1 %29, i32 %9, i32 %28
  %31 = sext i32 %30 to i64
  br label %32

32:                                               ; preds = %32, %21
  %33 = phi i64 [ %38, %32 ], [ %31, %21 ]
  %34 = getelementptr inbounds i8, i8* %22, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = and i8 %35, -64
  %37 = icmp eq i8 %36, -128
  %38 = add i64 %33, 1
  br i1 %37, label %32, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds i8, i8* %22, i64 %33
  %41 = trunc i64 %33 to i32
  %42 = and i32 %41, -4
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %138

44:                                               ; preds = %39
  %45 = sext i32 %42 to i64
  %46 = add nsw i64 %45, -1
  %47 = lshr i64 %46, 2
  %48 = add nuw nsw i64 %47, 1
  %49 = icmp ult i64 %48, 8
  br i1 %49, label %107, label %50

50:                                               ; preds = %44
  %51 = and i64 %48, 9223372036854775800
  %52 = shl i64 %51, 2
  br label %53

53:                                               ; preds = %53, %50
  %54 = phi i64 [ 0, %50 ], [ %97, %53 ]
  %55 = phi <4 x i32> [ zeroinitializer, %50 ], [ %95, %53 ]
  %56 = phi <4 x i32> [ zeroinitializer, %50 ], [ %96, %53 ]
  %57 = shl i64 %54, 2
  %58 = or i64 %57, 16
  %59 = getelementptr inbounds i8, i8* %22, i64 %57
  %60 = getelementptr inbounds i8, i8* %22, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = bitcast i8* %60 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %61, align 1
  %64 = load <16 x i8>, <16 x i8>* %62, align 1
  %65 = shufflevector <16 x i8> %63, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %67 = shufflevector <16 x i8> %63, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %68 = shufflevector <16 x i8> %64, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %69 = shufflevector <16 x i8> %63, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %70 = shufflevector <16 x i8> %64, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %71 = shufflevector <16 x i8> %63, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %72 = shufflevector <16 x i8> %64, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %73 = icmp eq <4 x i8> %65, <i8 32, i8 32, i8 32, i8 32>
  %74 = icmp eq <4 x i8> %66, <i8 32, i8 32, i8 32, i8 32>
  %75 = zext <4 x i1> %73 to <4 x i32>
  %76 = zext <4 x i1> %74 to <4 x i32>
  %77 = add nsw <4 x i32> %55, %75
  %78 = add nsw <4 x i32> %56, %76
  %79 = icmp eq <4 x i8> %67, <i8 32, i8 32, i8 32, i8 32>
  %80 = icmp eq <4 x i8> %68, <i8 32, i8 32, i8 32, i8 32>
  %81 = zext <4 x i1> %79 to <4 x i32>
  %82 = zext <4 x i1> %80 to <4 x i32>
  %83 = add nsw <4 x i32> %77, %81
  %84 = add nsw <4 x i32> %78, %82
  %85 = icmp eq <4 x i8> %69, <i8 32, i8 32, i8 32, i8 32>
  %86 = icmp eq <4 x i8> %70, <i8 32, i8 32, i8 32, i8 32>
  %87 = zext <4 x i1> %85 to <4 x i32>
  %88 = zext <4 x i1> %86 to <4 x i32>
  %89 = add nsw <4 x i32> %83, %87
  %90 = add nsw <4 x i32> %84, %88
  %91 = icmp eq <4 x i8> %71, <i8 32, i8 32, i8 32, i8 32>
  %92 = icmp eq <4 x i8> %72, <i8 32, i8 32, i8 32, i8 32>
  %93 = zext <4 x i1> %91 to <4 x i32>
  %94 = zext <4 x i1> %92 to <4 x i32>
  %95 = add nsw <4 x i32> %89, %93
  %96 = add nsw <4 x i32> %90, %94
  %97 = add i64 %54, 8
  %98 = icmp eq i64 %97, %51
  br i1 %98, label %99, label %53, !llvm.loop !2

99:                                               ; preds = %53
  %100 = add <4 x i32> %96, %95
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %102 = add <4 x i32> %100, %101
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %104 = add <4 x i32> %102, %103
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = icmp eq i64 %48, %51
  br i1 %106, label %138, label %107

107:                                              ; preds = %99, %44
  %108 = phi i64 [ 0, %44 ], [ %52, %99 ]
  %109 = phi i32 [ 0, %44 ], [ %105, %99 ]
  br label %110

110:                                              ; preds = %107, %110
  %111 = phi i64 [ %136, %110 ], [ %108, %107 ]
  %112 = phi i32 [ %135, %110 ], [ %109, %107 ]
  %113 = getelementptr inbounds i8, i8* %22, i64 %111
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = zext i1 %115 to i32
  %117 = add nsw i32 %112, %116
  %118 = or i64 %111, 1
  %119 = getelementptr inbounds i8, i8* %22, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = icmp eq i8 %120, 32
  %122 = zext i1 %121 to i32
  %123 = add nsw i32 %117, %122
  %124 = or i64 %111, 2
  %125 = getelementptr inbounds i8, i8* %22, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = icmp eq i8 %126, 32
  %128 = zext i1 %127 to i32
  %129 = add nsw i32 %123, %128
  %130 = or i64 %111, 3
  %131 = getelementptr inbounds i8, i8* %22, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 32
  %134 = zext i1 %133 to i32
  %135 = add nsw i32 %129, %134
  %136 = add nuw nsw i64 %111, 4
  %137 = icmp slt i64 %136, %45
  br i1 %137, label %110, label %138, !llvm.loop !4

138:                                              ; preds = %110, %99, %39
  %139 = phi i32 [ 0, %39 ], [ %105, %99 ], [ %135, %110 ]
  %140 = icmp sgt i32 %41, 0
  br i1 %140, label %141, label %198

141:                                              ; preds = %138, %183
  %142 = phi i32 [ %193, %183 ], [ 0, %138 ]
  %143 = phi i32 [ %196, %183 ], [ %25, %138 ]
  %144 = phi i8* [ %187, %183 ], [ %22, %138 ]
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = icmp ult i8 %145, -64
  br i1 %147, label %183, label %148

148:                                              ; preds = %141
  %149 = and i32 %146, 224
  %150 = icmp eq i32 %149, 192
  br i1 %150, label %151, label %153

151:                                              ; preds = %148
  %152 = shl nuw nsw i32 %146, 8
  br label %175

153:                                              ; preds = %148
  %154 = and i32 %146, 240
  %155 = icmp eq i32 %154, 224
  br i1 %155, label %156, label %163

156:                                              ; preds = %153
  %157 = shl nuw nsw i32 %146, 16
  %158 = getelementptr inbounds i8, i8* %144, i64 1
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = shl nuw nsw i32 %160, 8
  %162 = or i32 %161, %157
  br label %175

163:                                              ; preds = %153
  %164 = shl nuw i32 %146, 24
  %165 = getelementptr inbounds i8, i8* %144, i64 1
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = shl nuw nsw i32 %167, 16
  %169 = or i32 %168, %164
  %170 = getelementptr inbounds i8, i8* %144, i64 2
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = shl nuw nsw i32 %172, 8
  %174 = or i32 %169, %173
  br label %175

175:                                              ; preds = %151, %156, %163
  %176 = phi i64 [ 3, %163 ], [ 2, %156 ], [ 1, %151 ]
  %177 = phi i32 [ %174, %163 ], [ %162, %156 ], [ %152, %151 ]
  %178 = phi i32 [ 4, %163 ], [ 3, %156 ], [ 2, %151 ]
  %179 = getelementptr inbounds i8, i8* %144, i64 %176
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = or i32 %177, %181
  br label %183

183:                                              ; preds = %175, %141
  %184 = phi i32 [ %146, %141 ], [ %182, %175 ]
  %185 = phi i32 [ 1, %141 ], [ %178, %175 ]
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %144, i64 %186
  %188 = sext i32 %143 to i64
  %189 = getelementptr inbounds i32, i32* %7, i64 %188
  %190 = load i32, i32* %189, align 4
  store i32 %184, i32* %189, align 4
  %191 = icmp eq i32 %184, %190
  %192 = select i1 %191, i32 %185, i32 0
  %193 = add nuw nsw i32 %192, %142
  %194 = shl i32 %143, 4
  %195 = xor i32 %184, %194
  %196 = and i32 %195, 4095
  %197 = icmp ult i8* %187, %40
  br i1 %197, label %141, label %198

198:                                              ; preds = %183, %138
  %199 = phi i32 [ %25, %138 ], [ %196, %183 ]
  %200 = phi i32 [ 0, %138 ], [ %193, %183 ]
  %201 = icmp slt i32 %139, %11
  %202 = icmp slt i32 %200, %13
  %203 = and i1 %201, %202
  %204 = and i8 %24, 1
  %205 = icmp eq i8 %204, 0
  br i1 %203, label %246, label %206

206:                                              ; preds = %198
  br i1 %205, label %207, label %287

207:                                              ; preds = %206
  %208 = ptrtoint i8* %23 to i64
  %209 = sub i64 %208, %19
  %210 = trunc i64 %209 to i32
  %211 = icmp sgt i32 %210, 0
  br i1 %211, label %212, label %238

212:                                              ; preds = %207
  %213 = icmp slt i32 %210, 32
  %214 = shl i64 %209, 32
  %215 = ashr exact i64 %214, 32
  %216 = select i1 %213, i64 %215, i64 32
  br label %217

217:                                              ; preds = %225, %212
  %218 = phi i64 [ 0, %212 ], [ %226, %225 ]
  %219 = shl i64 %218, 32
  %220 = ashr exact i64 %219, 32
  %221 = xor i64 %220, -1
  %222 = getelementptr inbounds i8, i8* %23, i64 %221
  %223 = load i8, i8* %222, align 1
  %224 = icmp eq i8 %223, 32
  br i1 %224, label %238, label %225

225:                                              ; preds = %217
  %226 = add nuw nsw i64 %218, 1
  %227 = icmp slt i64 %226, %216
  br i1 %227, label %217, label %228

228:                                              ; preds = %225, %235
  %229 = phi i64 [ %236, %235 ], [ 0, %225 ]
  %230 = sub nsw i64 0, %229
  %231 = getelementptr inbounds i8, i8* %23, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = and i8 %232, -64
  %234 = icmp eq i8 %233, -128
  br i1 %234, label %235, label %238

235:                                              ; preds = %228
  %236 = add nuw nsw i64 %229, 1
  %237 = icmp slt i64 %236, %216
  br i1 %237, label %228, label %238

238:                                              ; preds = %217, %228, %235, %207
  %239 = phi i64 [ 0, %207 ], [ %229, %228 ], [ 0, %235 ], [ %218, %217 ]
  %240 = shl i64 %239, 32
  %241 = ashr exact i64 %240, 32
  %242 = sub nsw i64 0, %241
  %243 = getelementptr inbounds i8, i8* %23, i64 %242
  %244 = icmp eq i8* %243, %0
  br i1 %244, label %245, label %287

245:                                              ; preds = %238
  store i8 32, i8* %0, align 1
  br label %287

246:                                              ; preds = %198
  br i1 %205, label %279, label %247

247:                                              ; preds = %246
  %248 = icmp slt i32 %41, 32
  %249 = shl i64 %33, 32
  %250 = ashr exact i64 %249, 32
  %251 = select i1 %248, i64 %250, i64 32
  br label %252

252:                                              ; preds = %256, %247
  %253 = phi i64 [ %260, %256 ], [ 0, %247 ]
  %254 = icmp slt i64 %253, %251
  br i1 %254, label %256, label %255

255:                                              ; preds = %252
  br i1 %140, label %261, label %274

256:                                              ; preds = %252
  %257 = getelementptr inbounds i8, i8* %22, i64 %253
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 32
  %260 = add nuw nsw i64 %253, 1
  br i1 %259, label %270, label %252

261:                                              ; preds = %255, %267
  %262 = phi i64 [ %268, %267 ], [ 0, %255 ]
  %263 = getelementptr inbounds i8, i8* %22, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = and i8 %264, -64
  %266 = icmp eq i8 %265, -128
  br i1 %266, label %267, label %272

267:                                              ; preds = %261
  %268 = add nuw nsw i64 %262, 1
  %269 = icmp slt i64 %268, %251
  br i1 %269, label %261, label %274

270:                                              ; preds = %256
  %271 = trunc i64 %260 to i32
  br label %274

272:                                              ; preds = %261
  %273 = trunc i64 %262 to i32
  br label %274

274:                                              ; preds = %267, %255, %270, %272
  %275 = phi i32 [ 0, %255 ], [ %271, %270 ], [ %273, %272 ], [ 0, %267 ]
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %22, i64 %276
  %278 = sub nsw i32 %41, %275
  br label %279

279:                                              ; preds = %246, %274
  %280 = phi i8 [ 0, %274 ], [ %24, %246 ]
  %281 = phi i32 [ %278, %274 ], [ %41, %246 ]
  %282 = phi i8* [ %277, %274 ], [ %22, %246 ]
  %283 = icmp sgt i32 %281, 0
  br i1 %283, label %284, label %287

284:                                              ; preds = %279
  %285 = sext i32 %281 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %282, i64 %285, i1 false)
  %286 = getelementptr inbounds i8, i8* %23, i64 %285
  br label %287

287:                                              ; preds = %238, %245, %206, %279, %284
  %288 = phi i8 [ %24, %206 ], [ %280, %284 ], [ %280, %279 ], [ 1, %245 ], [ 1, %238 ]
  %289 = phi i32 [ %41, %206 ], [ %281, %284 ], [ %281, %279 ], [ %41, %245 ], [ %41, %238 ]
  %290 = phi i8* [ %23, %206 ], [ %286, %284 ], [ %23, %279 ], [ %20, %245 ], [ %243, %238 ]
  %291 = phi i8* [ %22, %206 ], [ %282, %284 ], [ %282, %279 ], [ %22, %245 ], [ %22, %238 ]
  %292 = sext i32 %289 to i64
  %293 = getelementptr inbounds i8, i8* %291, i64 %292
  %294 = icmp ult i8* %293, %5
  br i1 %294, label %21, label %295

295:                                              ; preds = %287
  %296 = ptrtoint i8* %290 to i64
  br label %297

297:                                              ; preds = %15, %295
  %298 = phi i64 [ %16, %15 ], [ %296, %295 ]
  %299 = phi i64 [ %16, %15 ], [ %19, %295 ]
  %300 = phi i8* [ %0, %15 ], [ %290, %295 ]
  %301 = sub i64 %298, %299
  %302 = add nsw i32 %1, -3
  %303 = sext i32 %302 to i64
  %304 = icmp slt i64 %301, %303
  br i1 %304, label %305, label %309

305:                                              ; preds = %297
  store i8 32, i8* %300, align 1
  %306 = getelementptr inbounds i8, i8* %300, i64 1
  store i8 32, i8* %306, align 1
  %307 = getelementptr inbounds i8, i8* %300, i64 2
  store i8 32, i8* %307, align 1
  %308 = getelementptr inbounds i8, i8* %300, i64 3
  store i8 0, i8* %308, align 1
  br label %312

309:                                              ; preds = %297
  %310 = icmp slt i64 %301, %4
  br i1 %310, label %311, label %312

311:                                              ; preds = %309
  store i8 32, i8* %300, align 1
  br label %312

312:                                              ; preds = %305, %311, %309
  tail call void @_ZdaPv(i8* nonnull %6) #4
  %313 = trunc i64 %301 to i32
  ret i32 %313
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
