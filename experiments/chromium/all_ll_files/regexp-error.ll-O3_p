; ModuleID = '../../v8/src/regexp/regexp-error.cc'
source_filename = "../../v8/src/regexp/regexp-error.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZN2v88internalL19kRegExpErrorStringsE = internal unnamed_addr constant [31 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.30, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Maximum call stack size exceeded\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Stack overflow\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"Regular expression too large\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"Unterminated group\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Unmatched ')'\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"\5C at end of pattern\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"Invalid property name\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Invalid escape\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"Invalid decimal escape\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Invalid Unicode escape\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"Nothing to repeat\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"Lone quantifier brackets\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"numbers out of order in {} quantifier\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"Incomplete quantifier\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"Invalid quantifier\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"Invalid group\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"Multiple dashes in flag group\00", align 1
@.str.18 = private unnamed_addr constant [34 x i8] c"Cannot be executed in linear time\00", align 1
@.str.19 = private unnamed_addr constant [28 x i8] c"Repeated flag in flag group\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"Invalid flag group\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"Too many captures\00", align 1
@.str.22 = private unnamed_addr constant [27 x i8] c"Invalid capture group name\00", align 1
@.str.23 = private unnamed_addr constant [29 x i8] c"Duplicate capture group name\00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"Invalid named reference\00", align 1
@.str.25 = private unnamed_addr constant [33 x i8] c"Invalid named capture referenced\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"Invalid class escape\00", align 1
@.str.27 = private unnamed_addr constant [41 x i8] c"Invalid property name in character class\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"Invalid character class\00", align 1
@.str.29 = private unnamed_addr constant [29 x i8] c"Unterminated character class\00", align 1
@.str.30 = private unnamed_addr constant [38 x i8] c"Range out of order in character class\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZN2v88internal17RegExpErrorStringENS0_11RegExpErrorE(i32) local_unnamed_addr #0 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [31 x i8*], [31 x i8*]* @_ZN2v88internalL19kRegExpErrorStringsE, i64 0, i64 %2
  %4 = load i8*, i8** %3, align 8
  ret i8* %4
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
