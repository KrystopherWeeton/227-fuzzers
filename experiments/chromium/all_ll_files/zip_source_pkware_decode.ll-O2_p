; ModuleID = '../../third_party/libzip/src/lib/zip_source_pkware_decode.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_pkware_decode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct._zip_pkware_keys = type { [3 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @zip_source_pkware_decode(%struct.zip*, %struct.zip_source*, i16 zeroext, i32, i8* readonly) local_unnamed_addr #0 {
  %6 = icmp ne i8* %4, null
  %7 = icmp ne %struct.zip_source* %1, null
  %8 = and i1 %7, %6
  %9 = icmp eq i16 %2, 1
  %10 = and i1 %9, %8
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %12, i32 18, i32 0) #6
  br label %34

13:                                               ; preds = %5
  %14 = and i32 %3, 1
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  br i1 %15, label %18, label %17

17:                                               ; preds = %13
  tail call void @zip_error_set(%struct.zip_error* %16, i32 24, i32 0) #6
  br label %34

18:                                               ; preds = %13
  %19 = tail call noalias i8* @malloc(i64 40) #6
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @zip_error_set(%struct.zip_error* %16, i32 14, i32 0) #6
  br label %34

22:                                               ; preds = %18
  %23 = tail call noalias i8* @strdup(i8* nonnull %4) #6
  %24 = bitcast i8* %19 to i8**
  store i8* %23, i8** %24, align 8
  %25 = icmp eq i8* %23, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void @zip_error_set(%struct.zip_error* %16, i32 14, i32 0) #6
  tail call void @free(i8* nonnull %19) #6
  br label %34

27:                                               ; preds = %22
  %28 = getelementptr inbounds i8, i8* %19, i64 24
  %29 = bitcast i8* %28 to %struct.zip_error*
  tail call void @zip_error_init(%struct.zip_error* %29) #6
  %30 = tail call %struct.zip_source* @zip_source_layered(%struct.zip* %0, %struct.zip_source* nonnull %1, i64 (%struct.zip_source*, i8*, i8*, i64, i32)* nonnull @pkware_decrypt, i8* nonnull %19) #6
  %31 = icmp eq %struct.zip_source* %30, null
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = load i8*, i8** %24, align 8
  tail call void @free(i8* %33) #6
  tail call void @free(i8* nonnull %19) #6
  br label %34

34:                                               ; preds = %26, %21, %27, %32, %17, %11
  %35 = phi %struct.zip_source* [ null, %11 ], [ null, %17 ], [ null, %32 ], [ %30, %27 ], [ null, %21 ], [ null, %26 ]
  ret %struct.zip_source* %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_layered(%struct.zip*, %struct.zip_source*, i64 (%struct.zip_source*, i8*, i8*, i64, i32)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @pkware_decrypt(%struct.zip_source*, i8*, i8*, i64, i32) #0 {
  %6 = alloca [12 x i8], align 1
  %7 = alloca %struct.zip_stat, align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  switch i32 %4, label %108 [
    i32 0, label %10
    i32 1, label %75
    i32 2, label %111
    i32 3, label %84
    i32 14, label %97
    i32 4, label %99
    i32 5, label %103
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds i8, i8* %1, i64 8
  %12 = bitcast i8* %11 to %struct._zip_pkware_keys*
  tail call void @_zip_pkware_keys_reset(%struct._zip_pkware_keys* %12) #6
  %13 = bitcast i8* %1 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i64 @strlen(i8* %14) #7
  tail call void @_zip_pkware_decrypt(%struct._zip_pkware_keys* %12, i8* null, i8* %14, i64 %15) #6
  %16 = getelementptr inbounds [12 x i8], [12 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %16) #6
  %17 = getelementptr inbounds [12 x i8], [12 x i8]* %6, i64 0, i64 11
  %18 = bitcast %struct.zip_stat* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %16, i8 -86, i64 12, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 64, i1 false) #6
  %19 = call i64 @zip_source_read(%struct.zip_source* %0, i8* nonnull %16, i64 12) #6
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %10
  %22 = getelementptr inbounds i8, i8* %1, i64 24
  %23 = bitcast i8* %22 to %struct.zip_error*
  call void @_zip_error_set_from_source(%struct.zip_error* %23, %struct.zip_source* %0) #6
  br label %74

24:                                               ; preds = %10
  %25 = icmp eq i64 %19, 12
  br i1 %25, label %29, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds i8, i8* %1, i64 24
  %28 = bitcast i8* %27 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %28, i32 17, i32 0) #6
  br label %74

29:                                               ; preds = %24
  call void @_zip_pkware_decrypt(%struct._zip_pkware_keys* %12, i8* nonnull %16, i8* nonnull %16, i64 12) #6
  %30 = call i32 @zip_source_stat(%struct.zip_source* %0, %struct.zip_stat* nonnull %7) #6
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %73

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %7, i64 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = and i64 %34, 16
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %32
  %38 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %38) #6
  store i16 -21846, i16* %8, align 2
  %39 = bitcast i16* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %39) #6
  store i16 -21846, i16* %9, align 2
  %40 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %7, i64 0, i32 5
  %41 = load i64, i64* %40, align 8
  call void @_zip_u2d_time(i64 %41, i16* nonnull %8, i16* nonnull %9) #6
  %42 = load i8, i8* %17, align 1
  %43 = zext i8 %42 to i32
  %44 = load i16, i16* %8, align 2
  %45 = lshr i16 %44, 8
  %46 = zext i16 %45 to i32
  %47 = icmp eq i32 %43, %46
  %48 = zext i1 %47 to i8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %39) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %38) #6
  %49 = load i64, i64* %33, align 8
  br label %50

50:                                               ; preds = %37, %32
  %51 = phi i64 [ %49, %37 ], [ %34, %32 ]
  %52 = phi i8 [ %48, %37 ], [ 0, %32 ]
  %53 = and i64 %51, 32
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %63, label %55

55:                                               ; preds = %50
  %56 = load i8, i8* %17, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %7, i64 0, i32 6
  %59 = load i32, i32* %58, align 8
  %60 = lshr i32 %59, 24
  %61 = icmp eq i32 %60, %57
  %62 = select i1 %61, i8 1, i8 %52
  br label %63

63:                                               ; preds = %55, %50
  %64 = phi i8 [ %52, %50 ], [ %62, %55 ]
  %65 = and i8 %64, 1
  %66 = icmp ne i8 %65, 0
  %67 = and i64 %51, 48
  %68 = icmp eq i64 %67, 0
  %69 = or i1 %68, %66
  br i1 %69, label %73, label %70

70:                                               ; preds = %63
  %71 = getelementptr inbounds i8, i8* %1, i64 24
  %72 = bitcast i8* %71 to %struct.zip_error*
  call void @zip_error_set(%struct.zip_error* %72, i32 27, i32 0) #6
  br label %74

73:                                               ; preds = %29, %63
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #6
  br label %111

74:                                               ; preds = %21, %26, %70
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %16) #6
  br label %111

75:                                               ; preds = %5
  %76 = tail call i64 @zip_source_read(%struct.zip_source* %0, i8* %2, i64 %3) #6
  %77 = icmp slt i64 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %75
  %79 = getelementptr inbounds i8, i8* %1, i64 24
  %80 = bitcast i8* %79 to %struct.zip_error*
  tail call void @_zip_error_set_from_source(%struct.zip_error* %80, %struct.zip_source* %0) #6
  br label %111

81:                                               ; preds = %75
  %82 = getelementptr inbounds i8, i8* %1, i64 8
  %83 = bitcast i8* %82 to %struct._zip_pkware_keys*
  tail call void @_zip_pkware_decrypt(%struct._zip_pkware_keys* %83, i8* %2, i8* %2, i64 %76) #6
  br label %111

84:                                               ; preds = %5
  %85 = getelementptr inbounds i8, i8* %2, i64 54
  %86 = bitcast i8* %85 to i16*
  store i16 0, i16* %86, align 2
  %87 = bitcast i8* %2 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = or i64 %88, 128
  store i64 %89, i64* %87, align 8
  %90 = and i64 %88, 8
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %111, label %92

92:                                               ; preds = %84
  %93 = getelementptr inbounds i8, i8* %2, i64 32
  %94 = bitcast i8* %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, -12
  store i64 %96, i64* %94, align 8
  br label %111

97:                                               ; preds = %5
  %98 = tail call i64 (i32, ...) @zip_source_make_command_bitmap(i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 -1) #6
  br label %111

99:                                               ; preds = %5
  %100 = getelementptr inbounds i8, i8* %1, i64 24
  %101 = bitcast i8* %100 to %struct.zip_error*
  %102 = tail call i64 @zip_error_to_data(%struct.zip_error* %101, i8* %2, i64 %3) #6
  br label %111

103:                                              ; preds = %5
  %104 = icmp eq i8* %1, null
  br i1 %104, label %111, label %105

105:                                              ; preds = %103
  %106 = bitcast i8* %1 to i8**
  %107 = load i8*, i8** %106, align 8
  tail call void @free(i8* %107) #6
  tail call void @free(i8* nonnull %1) #6
  br label %111

108:                                              ; preds = %5
  %109 = getelementptr inbounds i8, i8* %1, i64 24
  %110 = bitcast i8* %109 to %struct.zip_error*
  tail call void @zip_error_set(%struct.zip_error* %110, i32 18, i32 0) #6
  br label %111

111:                                              ; preds = %105, %103, %74, %73, %92, %84, %5, %108, %99, %97, %81, %78
  %112 = phi i64 [ -1, %108 ], [ %102, %99 ], [ %98, %97 ], [ -1, %78 ], [ %76, %81 ], [ 0, %5 ], [ 0, %84 ], [ 0, %92 ], [ -1, %74 ], [ 0, %73 ], [ 0, %103 ], [ 0, %105 ]
  ret i64 %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_zip_pkware_keys_reset(%struct._zip_pkware_keys*) local_unnamed_addr #2

declare void @_zip_pkware_decrypt(%struct._zip_pkware_keys*, i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #2

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #2

declare i64 @zip_source_make_command_bitmap(i32, ...) local_unnamed_addr #2

declare i64 @zip_error_to_data(%struct.zip_error*, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #2

declare void @_zip_u2d_time(i64, i16*, i16*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @strdup(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
