; ModuleID = '../../third_party/webrtc/net/dcsctp/packet/sctp_packet.cc'
source_filename = "../../third_party/webrtc/net/dcsctp/packet/sctp_packet.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.dcsctp::SctpPacket::Builder" = type { %"class.dcsctp::StrongAlias", i16, i16, i64, %"class.std::__1::vector" }
%"class.dcsctp::StrongAlias" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.dcsctp::DcSctpOptions" = type <{ i32, i32, i16, i16, [4 x i8], i64, i64, i64, i64, %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", %"class.dcsctp::DurationMs", i8, [3 x i8], i64, i64, i32, i32, i8, i8, i8, i8, [4 x i8] }>
%"class.dcsctp::DurationMs" = type { %"class.dcsctp::StrongAlias.1" }
%"class.dcsctp::StrongAlias.1" = type { i32 }
%"class.dcsctp::Chunk" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.dcsctp::SctpPacket" }
%"class.dcsctp::SctpPacket" = type { %"struct.dcsctp::CommonHeader", %"class.std::__1::vector", %"class.std::__1::vector.4" }
%"struct.dcsctp::CommonHeader" = type { i16, i16, %"class.dcsctp::StrongAlias", i32 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.dcsctp::SctpPacket::ChunkDescriptor"*, %"struct.dcsctp::SctpPacket::ChunkDescriptor"*, %"class.std::__1::__compressed_pair.6" }
%"struct.dcsctp::SctpPacket::ChunkDescriptor" = type { i8, i8, %"class.rtc::ArrayView.2" }
%"class.rtc::ArrayView.2" = type { %"class.rtc::impl::ArrayViewBase.3" }
%"class.rtc::impl::ArrayViewBase.3" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.dcsctp::SctpPacket::ChunkDescriptor"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZN6dcsctp10SctpPacket7BuilderC1ENS_11StrongAliasINS_18VerificationTagTagEjEERKNS_13DcSctpOptionsE = hidden unnamed_addr alias void (%"class.dcsctp::SctpPacket::Builder"*, i32, %"struct.dcsctp::DcSctpOptions"*), void (%"class.dcsctp::SctpPacket::Builder"*, i32, %"struct.dcsctp::DcSctpOptions"*)* @_ZN6dcsctp10SctpPacket7BuilderC2ENS_11StrongAliasINS_18VerificationTagTagEjEERKNS_13DcSctpOptionsE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp10SctpPacket7BuilderC2ENS_11StrongAliasINS_18VerificationTagTagEjEERKNS_13DcSctpOptionsE(%"class.dcsctp::SctpPacket::Builder"* nocapture, i32, %"struct.dcsctp::DcSctpOptions"* nocapture readonly dereferenceable(120)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.dcsctp::DcSctpOptions", %"struct.dcsctp::DcSctpOptions"* %2, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = trunc i32 %7 to i16
  store i16 %8, i16* %5, align 4
  %9 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.dcsctp::DcSctpOptions", %"struct.dcsctp::DcSctpOptions"* %2, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = trunc i32 %11 to i16
  store i16 %12, i16* %9, align 2
  %13 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 3
  %14 = getelementptr inbounds %"struct.dcsctp::DcSctpOptions", %"struct.dcsctp::DcSctpOptions"* %2, i64 0, i32 5
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, -4
  store i64 %16, i64* %13, align 8
  %17 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4
  %18 = bitcast %"class.std::__1::vector"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"class.dcsctp::SctpPacket::Builder"* @_ZN6dcsctp10SctpPacket7Builder3AddERKNS_5ChunkE(%"class.dcsctp::SctpPacket::Builder"* returned, %"class.dcsctp::Chunk"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  %9 = ptrtoint i8* %5 to i64
  %10 = ptrtoint i8* %7 to i64
  br i1 %8, label %14, label %11

11:                                               ; preds = %2
  %12 = bitcast i8** %6 to i64*
  %13 = bitcast %"class.std::__1::vector"* %3 to i64*
  br label %86

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector"* %3 to i64*
  %21 = sub i64 %19, %9
  %22 = icmp ult i64 %21, %16
  %23 = bitcast i8** %6 to i64*
  br i1 %22, label %24, label %40

24:                                               ; preds = %14
  %25 = sub i64 %10, %9
  %26 = tail call i8* @_Znwm(i64 %16) #9
  %27 = getelementptr inbounds i8, i8* %26, i64 %25
  %28 = ptrtoint i8* %27 to i64
  %29 = getelementptr inbounds i8, i8* %26, i64 %16
  %30 = ptrtoint i8* %29 to i64
  %31 = ptrtoint i8* %26 to i64
  %32 = icmp sgt i64 %25, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %26, i8* align 1 %5, i64 %25, i1 false) #8
  br label %34

34:                                               ; preds = %33, %24
  store i64 %31, i64* %20, align 8
  store i64 %28, i64* %23, align 8
  store i64 %30, i64* %18, align 8
  %35 = icmp eq i8* %5, null
  br i1 %35, label %40, label %36

36:                                               ; preds = %34
  tail call void @_ZdlPv(i8* nonnull %5) #9
  %37 = load i64, i64* %23, align 8
  %38 = load i64, i64* %20, align 8
  %39 = inttoptr i64 %38 to i8*
  br label %40

40:                                               ; preds = %14, %34, %36
  %41 = phi i8* [ %26, %34 ], [ %39, %36 ], [ %5, %14 ]
  %42 = phi i64 [ %31, %34 ], [ %38, %36 ], [ %9, %14 ]
  %43 = phi i64 [ %28, %34 ], [ %37, %36 ], [ %10, %14 ]
  %44 = sub i64 %43, %42
  %45 = icmp ult i64 %44, 12
  %46 = inttoptr i64 %42 to i8*
  br i1 %45, label %47, label %50

47:                                               ; preds = %40
  %48 = sub nuw nsw i64 12, %44
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %48) #8
  %49 = load i8*, i8** %4, align 8
  br label %54

50:                                               ; preds = %40
  %51 = icmp eq i64 %44, 12
  br i1 %51, label %54, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds i8, i8* %46, i64 12
  store i8* %53, i8** %6, align 8
  br label %54

54:                                               ; preds = %50, %47, %52
  %55 = phi i8* [ %41, %50 ], [ %49, %47 ], [ %41, %52 ]
  %56 = load i64, i64* %23, align 8
  %57 = ptrtoint i8* %55 to i64
  %58 = icmp eq i64 %56, %57
  %59 = select i1 %58, i8* null, i8* %55
  %60 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 1
  %61 = load i16, i16* %60, align 4
  %62 = lshr i16 %61, 8
  %63 = trunc i16 %62 to i8
  store i8 %63, i8* %59, align 1
  %64 = trunc i16 %61 to i8
  %65 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 2
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i8, i8* %59, i64 2
  %69 = lshr i16 %67, 8
  %70 = trunc i16 %69 to i8
  store i8 %70, i8* %68, align 1
  %71 = trunc i16 %67 to i8
  %72 = getelementptr inbounds i8, i8* %59, i64 3
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds i8, i8* %59, i64 4
  %76 = lshr i32 %74, 24
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %75, align 1
  %78 = lshr i32 %74, 16
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %59, i64 5
  store i8 %79, i8* %80, align 1
  %81 = lshr i32 %74, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds i8, i8* %59, i64 6
  store i8 %82, i8* %83, align 1
  %84 = trunc i32 %74 to i8
  %85 = getelementptr inbounds i8, i8* %59, i64 7
  store i8 %84, i8* %85, align 1
  br label %86

86:                                               ; preds = %11, %54
  %87 = phi i64* [ %13, %11 ], [ %20, %54 ]
  %88 = phi i64* [ %12, %11 ], [ %23, %54 ]
  %89 = bitcast %"class.dcsctp::Chunk"* %1 to void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)***
  %90 = load void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)**, void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)*, void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)** %90, i64 2
  %92 = load void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)*, void (%"class.dcsctp::Chunk"*, %"class.std::__1::vector"*)** %91, align 8
  tail call void %92(%"class.dcsctp::Chunk"* %1, %"class.std::__1::vector"* dereferenceable(24) %3) #8
  %93 = load i64, i64* %88, align 8
  %94 = load i64, i64* %87, align 8
  %95 = sub i64 %93, %94
  %96 = and i64 %95, 3
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %109, label %98

98:                                               ; preds = %86
  %99 = add i64 %95, 3
  %100 = and i64 %99, -4
  %101 = icmp ugt i64 %100, %95
  %102 = inttoptr i64 %94 to i8*
  br i1 %101, label %103, label %105

103:                                              ; preds = %98
  %104 = sub i64 %100, %95
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %104) #8
  br label %109

105:                                              ; preds = %98
  %106 = icmp ult i64 %100, %95
  br i1 %106, label %107, label %109

107:                                              ; preds = %105
  %108 = getelementptr inbounds i8, i8* %102, i64 %100
  store i8* %108, i8** %6, align 8
  br label %109

109:                                              ; preds = %107, %105, %103, %86
  ret %"class.dcsctp::SctpPacket::Builder"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6dcsctp10SctpPacket7Builder15bytes_remainingEv(%"class.dcsctp::SctpPacket::Builder"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %3, %5
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, -12
  ret i64 %10

11:                                               ; preds = %1
  %12 = ptrtoint i8* %3 to i64
  %13 = ptrtoint i8* %5 to i64
  %14 = sub i64 %13, %12
  %15 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %0, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = tail call i64 @llvm.usub.sat.i64(i64 %16, i64 %14)
  ret i64 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp10SctpPacket7Builder5BuildEv(%"class.std::__1::vector"* noalias nocapture sret, %"class.dcsctp::SctpPacket::Builder"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %1, i64 0, i32 4
  %5 = bitcast %"class.std::__1::vector"* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %1, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %4 to <2 x i64>*
  %10 = getelementptr inbounds %"class.dcsctp::SctpPacket::Builder", %"class.dcsctp::SctpPacket::Builder"* %1, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i8** %10 to i64*
  %12 = bitcast i8** %8 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  store <2 x i64> zeroinitializer, <2 x i64>* %9, align 8
  store i64 0, i64* %11, align 8
  %14 = bitcast i8** %3 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 8
  %15 = inttoptr i64 %6 to i8*
  %16 = extractelement <2 x i64> %13, i32 0
  %17 = inttoptr i64 %16 to i8*
  %18 = icmp eq i8* %15, %17
  br i1 %18, label %35, label %19

19:                                               ; preds = %2
  %20 = sub i64 %16, %6
  %21 = icmp eq i64 %20, 0
  %22 = select i1 %21, i8* null, i8* %15
  %23 = tail call i32 @_ZN6dcsctp14GenerateCrc32CEN3rtc9ArrayViewIKhLln4711EEE(i8* %22, i64 %20) #8
  %24 = getelementptr inbounds i8, i8* %22, i64 8
  %25 = lshr i32 %23, 24
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %24, align 1
  %27 = lshr i32 %23, 16
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds i8, i8* %22, i64 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %23, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %22, i64 10
  store i8 %31, i8* %32, align 1
  %33 = trunc i32 %23 to i8
  %34 = getelementptr inbounds i8, i8* %22, i64 11
  store i8 %33, i8* %34, align 1
  br label %35

35:                                               ; preds = %2, %19
  ret void
}

declare i32 @_ZN6dcsctp14GenerateCrc32CEN3rtc9ArrayViewIKhLln4711EEE(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6dcsctp10SctpPacket5ParseEN3rtc9ArrayViewIKhLln4711EEEb(%"class.absl::optional"* noalias nocapture sret, i8*, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector.4", align 8
  %7 = add i64 %2, -16
  %8 = icmp ugt i64 %7, 65519
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %union.anon* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 64, i1 false) #8
  br label %261

13:                                               ; preds = %4
  %14 = load i8, i8* %1, align 1
  %15 = zext i8 %14 to i16
  %16 = shl nuw i16 %15, 8
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = or i16 %16, %19
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  %24 = shl nuw i16 %23, 8
  %25 = getelementptr inbounds i8, i8* %1, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = or i16 %24, %27
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw i32 %31, 24
  %33 = getelementptr inbounds i8, i8* %1, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 16
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds i8, i8* %1, i64 6
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %37, %41
  %43 = getelementptr inbounds i8, i8* %1, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %42, %45
  %47 = getelementptr inbounds i8, i8* %1, i64 8
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl nuw i32 %49, 24
  %51 = getelementptr inbounds i8, i8* %1, i64 9
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 16
  %55 = or i32 %54, %50
  %56 = getelementptr inbounds i8, i8* %1, i64 10
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 8
  %60 = or i32 %55, %59
  %61 = getelementptr inbounds i8, i8* %1, i64 11
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %60, %63
  %65 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #8
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %69 = tail call i8* @_Znwm(i64 %2) #9
  store i8* %69, i8** %66, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %2
  store i8* %70, i8** %68, align 8
  %71 = bitcast i8** %67 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %69, i8* align 1 %1, i64 %2, i1 false) #8
  %72 = ptrtoint i8* %70 to i64
  store i64 %72, i64* %71, align 8
  %73 = ptrtoint i8* %69 to i64
  %74 = icmp eq i64 %2, 0
  %75 = select i1 %74, i8* null, i8* %69
  %76 = getelementptr inbounds i8, i8* %75, i64 8
  %77 = icmp eq i64 %2, 0
  %78 = select i1 %77, i8* null, i8* %69
  %79 = bitcast i8* %76 to i32*
  store i32 0, i32* %79, align 1
  %80 = tail call i32 @_ZN6dcsctp14GenerateCrc32CEN3rtc9ArrayViewIKhLln4711EEE(i8* %78, i64 %2) #8
  %81 = icmp eq i32 %80, %64
  %82 = or i1 %81, %3
  br i1 %82, label %87, label %83

83:                                               ; preds = %13
  %84 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %84, align 8
  %85 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %86 = bitcast %union.anon* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 64, i1 false) #8
  br label %257

87:                                               ; preds = %13
  %88 = getelementptr inbounds i8, i8* %75, i64 11
  %89 = getelementptr inbounds i8, i8* %75, i64 10
  %90 = getelementptr inbounds i8, i8* %75, i64 9
  store i8 %48, i8* %76, align 1
  store i8 %52, i8* %90, align 1
  store i8 %57, i8* %89, align 1
  store i8 %62, i8* %88, align 1
  %91 = bitcast %"class.std::__1::vector.4"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %91) #8
  %92 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 0
  %93 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 1
  %94 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %94 to i64*
  %96 = bitcast %"class.std::__1::vector.4"* %6 to i64*
  %97 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %93 to i64*
  %98 = tail call i8* @_Znwm(i64 96) #9
  %99 = bitcast i8* %98 to %"struct.dcsctp::SctpPacket::ChunkDescriptor"*
  %100 = ptrtoint i8* %98 to i64
  %101 = getelementptr inbounds i8, i8* %98, i64 96
  %102 = ptrtoint i8* %101 to i64
  store i64 %100, i64* %96, align 8
  store i64 %100, i64* %97, align 8
  store i64 %102, i64* %95, align 8
  %103 = icmp ugt i64 %2, 12
  %104 = insertelement <2 x i64> undef, i64 %72, i32 0
  %105 = shufflevector <2 x i64> %104, <2 x i64> undef, <2 x i32> zeroinitializer
  br i1 %103, label %106, label %226

106:                                              ; preds = %87
  %107 = add i64 %2, -12
  %108 = icmp ult i64 %107, %2
  %109 = select i1 %108, i64 %107, i64 %2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %226, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds i8, i8* %69, i64 12
  %113 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %93 to i64*
  br label %114

114:                                              ; preds = %111, %211
  %115 = phi i64 [ %100, %111 ], [ %208, %211 ]
  %116 = phi %"struct.dcsctp::SctpPacket::ChunkDescriptor"* [ %99, %111 ], [ %209, %211 ]
  %117 = phi i64 [ %109, %111 ], [ %215, %211 ]
  %118 = phi i8* [ %112, %111 ], [ %217, %211 ]
  %119 = icmp ult i64 %117, 4
  br i1 %119, label %120, label %124

120:                                              ; preds = %114
  %121 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %121, align 8
  %122 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %123 = bitcast %union.anon* %122 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 64, i1 false) #8
  br label %247

124:                                              ; preds = %114
  %125 = load i8, i8* %118, align 1
  %126 = getelementptr inbounds i8, i8* %118, i64 1
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %118, i64 2
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  %131 = shl nuw i16 %130, 8
  %132 = getelementptr inbounds i8, i8* %118, i64 3
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i16
  %135 = or i16 %131, %134
  %136 = add i16 %135, 3
  %137 = and i16 %136, -4
  %138 = zext i16 %137 to i64
  %139 = icmp ult i64 %117, %138
  br i1 %139, label %140, label %144

140:                                              ; preds = %124
  %141 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %141, align 8
  %142 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %143 = bitcast %union.anon* %142 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 64, i1 false) #8
  br label %247

144:                                              ; preds = %124
  %145 = icmp eq i16 %137, 0
  br i1 %145, label %146, label %150

146:                                              ; preds = %144
  %147 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %147, align 8
  %148 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %149 = bitcast %union.anon* %148 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %149, i8 0, i64 64, i1 false) #8
  br label %247

150:                                              ; preds = %144
  %151 = load %"struct.dcsctp::SctpPacket::ChunkDescriptor"*, %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %94, align 8
  %152 = icmp ult %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, %151
  %153 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %151 to i64
  br i1 %152, label %154, label %161

154:                                              ; preds = %150
  %155 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, i64 0, i32 0
  store i8 %125, i8* %155, align 8
  %156 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, i64 0, i32 1
  store i8 %127, i8* %156, align 1
  %157 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, i64 0, i32 2, i32 0, i32 0
  store i8* %118, i8** %157, align 8
  %158 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, i64 0, i32 2, i32 0, i32 1
  store i64 %138, i64* %158, align 8
  %159 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %116, i64 1
  %160 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %159 to i64
  store i64 %160, i64* %113, align 8
  br label %207

161:                                              ; preds = %150
  %162 = load i64, i64* %96, align 8
  %163 = sub i64 %115, %162
  %164 = sdiv exact i64 %163, 24
  %165 = add nsw i64 %164, 1
  %166 = icmp ugt i64 %165, 768614336404564650
  %167 = inttoptr i64 %162 to %"struct.dcsctp::SctpPacket::ChunkDescriptor"*
  br i1 %166, label %168, label %170

168:                                              ; preds = %161
  %169 = bitcast %"class.std::__1::vector.4"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %169) #10
  unreachable

170:                                              ; preds = %161
  %171 = sub i64 %153, %162
  %172 = sdiv exact i64 %171, 24
  %173 = icmp ult i64 %172, 384307168202282325
  br i1 %173, label %174, label %179

174:                                              ; preds = %170
  %175 = shl nsw i64 %172, 1
  %176 = icmp ult i64 %175, %165
  %177 = select i1 %176, i64 %165, i64 %175
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %184, label %179

179:                                              ; preds = %174, %170
  %180 = phi i64 [ %177, %174 ], [ 768614336404564650, %170 ]
  %181 = mul i64 %180, 24
  %182 = tail call i8* @_Znwm(i64 %181) #9
  %183 = bitcast i8* %182 to %"struct.dcsctp::SctpPacket::ChunkDescriptor"*
  br label %184

184:                                              ; preds = %179, %174
  %185 = phi i64 [ %180, %179 ], [ 0, %174 ]
  %186 = phi %"struct.dcsctp::SctpPacket::ChunkDescriptor"* [ %183, %179 ], [ null, %174 ]
  %187 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %186, i64 %164
  %188 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %186, i64 %185
  %189 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %188 to i64
  %190 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %187, i64 0, i32 0
  store i8 %125, i8* %190, align 8
  %191 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %186, i64 %164, i32 1
  store i8 %127, i8* %191, align 1
  %192 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %186, i64 %164, i32 2, i32 0, i32 0
  store i8* %118, i8** %192, align 8
  %193 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %186, i64 %164, i32 2, i32 0, i32 1
  store i64 %138, i64* %193, align 8
  %194 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %187, i64 1
  %195 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %194 to i64
  %196 = sdiv exact i64 %163, -24
  %197 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %187, i64 %196
  %198 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %197 to i64
  %199 = icmp sgt i64 %163, 0
  br i1 %199, label %200, label %203

200:                                              ; preds = %184
  %201 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %197, i64 0, i32 0
  %202 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %167, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 %163, i1 false) #8
  br label %203

203:                                              ; preds = %200, %184
  store i64 %198, i64* %96, align 8
  store i64 %195, i64* %113, align 8
  store i64 %189, i64* %95, align 8
  %204 = icmp eq i64 %162, 0
  br i1 %204, label %207, label %205

205:                                              ; preds = %203
  %206 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %167, i64 0, i32 0
  tail call void @_ZdlPv(i8* %206) #9
  br label %207

207:                                              ; preds = %205, %203, %154
  %208 = phi i64 [ %195, %205 ], [ %195, %203 ], [ %160, %154 ]
  %209 = phi %"struct.dcsctp::SctpPacket::ChunkDescriptor"* [ %194, %205 ], [ %194, %203 ], [ %159, %154 ]
  %210 = icmp ugt i64 %117, %138
  br i1 %210, label %211, label %219

211:                                              ; preds = %207
  %212 = getelementptr inbounds i8, i8* %118, i64 %138
  %213 = sub i64 %117, %138
  %214 = icmp ult i64 %213, %117
  %215 = select i1 %214, i64 %213, i64 %117
  %216 = icmp eq i64 %215, 0
  %217 = select i1 %216, i8* null, i8* %212
  %218 = icmp eq i64 %215, 0
  br i1 %218, label %219, label %114

219:                                              ; preds = %207, %211
  %220 = bitcast %"class.std::__1::vector"* %5 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast i8** %67 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 8
  %224 = load i64, i64* %96, align 8
  %225 = load i64, i64* %95, align 8
  br label %226

226:                                              ; preds = %87, %106, %219
  %227 = phi i64 [ %225, %219 ], [ %102, %106 ], [ %102, %87 ]
  %228 = phi i64 [ %208, %219 ], [ %100, %106 ], [ %100, %87 ]
  %229 = phi i64 [ %224, %219 ], [ %100, %106 ], [ %100, %87 ]
  %230 = phi i64 [ %221, %219 ], [ %73, %106 ], [ %73, %87 ]
  %231 = phi <2 x i64> [ %223, %219 ], [ %105, %106 ], [ %105, %87 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %91, i8 0, i64 24, i1 false) #8
  %232 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %232, align 8
  %233 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i16 %20, i16* %233, align 8
  %234 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  store i16 %28, i16* %234, align 2
  %235 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0
  store i32 %46, i32* %235, align 4
  %236 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 3
  store i32 %64, i32* %236, align 8
  %237 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %238 = bitcast %"class.std::__1::vector"* %237 to i64*
  store i64 %230, i64* %238, align 8
  %239 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %240 = bitcast i8** %239 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %240, align 8
  %241 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %242 = bitcast %"class.std::__1::vector.4"* %241 to i64*
  store i64 %229, i64* %242, align 8
  %243 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 1
  %244 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %243 to i64*
  store i64 %228, i64* %244, align 8
  %245 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %246 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %245 to i64*
  store i64 %227, i64* %246, align 8
  br label %247

247:                                              ; preds = %146, %140, %226, %120
  %248 = load %"struct.dcsctp::SctpPacket::ChunkDescriptor"*, %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %92, align 8
  %249 = icmp eq %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %248, null
  br i1 %249, label %254, label %250

250:                                              ; preds = %247
  %251 = ptrtoint %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %248 to i64
  %252 = bitcast %"struct.dcsctp::SctpPacket::ChunkDescriptor"** %93 to i64*
  store i64 %251, i64* %252, align 8
  %253 = getelementptr inbounds %"struct.dcsctp::SctpPacket::ChunkDescriptor", %"struct.dcsctp::SctpPacket::ChunkDescriptor"* %248, i64 0, i32 0
  tail call void @_ZdlPv(i8* %253) #9
  br label %254

254:                                              ; preds = %250, %247
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %91) #8
  %255 = load i8*, i8** %66, align 8
  %256 = icmp eq i8* %255, null
  br i1 %256, label %260, label %257

257:                                              ; preds = %83, %254
  %258 = phi i8* [ %69, %83 ], [ %255, %254 ]
  %259 = ptrtoint i8* %258 to i64
  store i64 %259, i64* %71, align 8
  tail call void @_ZdlPv(i8* nonnull %258) #9
  br label %260

260:                                              ; preds = %254, %257
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #8
  br label %261

261:                                              ; preds = %260, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #8
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #10
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #9
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #8
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #8
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #9
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
