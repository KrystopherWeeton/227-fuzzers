; ModuleID = '../../third_party/abseil-cpp/absl/debugging/failure_signal_handler.cc'
source_filename = "../../third_party/abseil-cpp/absl/debugging/failure_signal_handler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.absl::FailureSignalData" = type { i32, i8*, %struct.sigaction }
%struct.sigaction = type { %union.anon, %struct.__sigset_t, i32, void ()* }
%union.anon = type { void (i32)* }
%struct.__sigset_t = type { [16 x i64] }
%"struct.absl::FailureSignalHandlerOptions" = type { i8, i8, i32, i8, void (i8*)* }
%struct.stack_t = type { i8*, i32, i64 }
%struct.siginfo_t = type { i32, i32, i32, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.3, [80 x i8] }
%struct.anon.3 = type { i32, i32, i32, i64, i64 }
%struct.timespec = type { i64, i64 }
%"struct.absl::WriterFnStruct" = type { void (i8*)* }

@_ZN4abslL19failure_signal_dataE = internal global [7 x %"struct.absl::FailureSignalData"] [%"struct.absl::FailureSignalData" { i32 11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), %struct.sigaction zeroinitializer }, %"struct.absl::FailureSignalData" { i32 5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), %struct.sigaction zeroinitializer }], align 16
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN4abslL11fsh_optionsE = internal unnamed_addr global %"struct.absl::FailureSignalHandlerOptions" { i8 1, i8 1, i32 3, i8 0, void (i8*)* null }, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"SIGSEGV\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"SIGILL\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"SIGFPE\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"SIGABRT\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"SIGTERM\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"SIGBUS\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"SIGTRAP\00", align 1
@.str.8 = private unnamed_addr constant [70 x i8] c"../../third_party/abseil-cpp/absl/debugging/failure_signal_handler.cc\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.10 = private unnamed_addr constant [58 x i8] c"sigaction(data->signo, &act, &data->previous_action) == 0\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"sigaction() failed\00", align 1
@_ZZN4abslL24MaybeSetupAlternateStackEvE5kOnce = internal global i8 0, align 1
@_ZGVZN4abslL24MaybeSetupAlternateStackEvE5kOnce = internal global i64 0, align 8
@.str.12 = private unnamed_addr constant [41 x i8] c"mmap() for alternate signal stack failed\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"sigaltstack() failed with errno=%d\00", align 1
@.str.14 = private unnamed_addr constant [70 x i8] c"Signal %d raised at PC=%p while already in AbslFailureSignalHandler()\00", align 1
@_ZN4abslL10failed_tidE = internal global { { i32 } } zeroinitializer, align 4
@.str.16 = private unnamed_addr constant [11 x i8] c" on cpu %d\00", align 1
@.str.17 = private unnamed_addr constant [35 x i8] c"*** %s received at time=%ld%s ***\0A\00", align 1
@.str.18 = private unnamed_addr constant [42 x i8] c"*** Signal %d received at time=%ld%s ***\0A\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZN4absl18debugging_internal21FailureSignalToStringEi(i32) local_unnamed_addr #0 {
  %2 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0, i32 0), align 16
  %3 = icmp eq i32 %2, %0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1, i32 0), align 8
  %6 = icmp eq i32 %5, %0
  br i1 %6, label %7, label %13

7:                                                ; preds = %25, %22, %19, %16, %13, %4, %1
  %8 = phi %"struct.absl::FailureSignalData"* [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0), %1 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1), %4 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2), %13 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3), %16 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4), %19 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5), %22 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6), %25 ]
  %9 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %8, i64 0, i32 1
  %10 = load i8*, i8** %9, align 8
  br label %11

11:                                               ; preds = %25, %7
  %12 = phi i8* [ %10, %7 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %25 ]
  ret i8* %12

13:                                               ; preds = %4
  %14 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2, i32 0), align 16
  %15 = icmp eq i32 %14, %0
  br i1 %15, label %7, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3, i32 0), align 8
  %18 = icmp eq i32 %17, %0
  br i1 %18, label %7, label %19

19:                                               ; preds = %16
  %20 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4, i32 0), align 16
  %21 = icmp eq i32 %20, %0
  br i1 %21, label %7, label %22

22:                                               ; preds = %19
  %23 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5, i32 0), align 8
  %24 = icmp eq i32 %23, %0
  br i1 %24, label %7, label %25

25:                                               ; preds = %22
  %26 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6, i32 0), align 16
  %27 = icmp eq i32 %26, %0
  br i1 %27, label %7, label %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl27InstallFailureSignalHandlerERKNS_27FailureSignalHandlerOptionsE(%"struct.absl::FailureSignalHandlerOptions"* nocapture readonly dereferenceable(24)) local_unnamed_addr #2 {
  %2 = alloca %struct.stack_t, align 8
  %3 = alloca %struct.sigaction, align 8
  %4 = getelementptr inbounds %"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* %0, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 0), i8* align 8 %4, i64 24, i1 false)
  %5 = bitcast %struct.sigaction* %3 to i8*
  %6 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i64 0, i32 1
  %7 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i64 0, i32 2
  %8 = bitcast %struct.stack_t* %2 to i8*
  %9 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 1
  %10 = bitcast i32* %9 to i64*
  %11 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 2
  %12 = getelementptr inbounds %struct.stack_t, %struct.stack_t* %2, i64 0, i32 0
  %13 = bitcast %struct.sigaction* %3 to void (i32, %struct.siginfo_t*, i8*)**
  br label %15

14:                                               ; preds = %54
  ret void

15:                                               ; preds = %1, %54
  %16 = phi %"struct.absl::FailureSignalData"* [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0), %1 ], [ %55, %54 ]
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 152, i1 false) #10
  %17 = call i32 @sigemptyset(%struct.__sigset_t* %6) #10
  %18 = load i32, i32* %7, align 8
  %19 = or i32 %18, 1073741828
  store i32 %19, i32* %7, align 8
  %20 = load i8, i8* getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 1), align 1, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %15
  %23 = load atomic i8, i8* bitcast (i64* @_ZGVZN4abslL24MaybeSetupAlternateStackEvE5kOnce to i8*) acquire, align 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %44, !prof !3

25:                                               ; preds = %22
  %26 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4abslL24MaybeSetupAlternateStackEvE5kOnce) #10
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %44, label %28

28:                                               ; preds = %25
  %29 = call i64 @sysconf(i32 30) #10
  %30 = add i64 %29, 65535
  %31 = sub i64 0, %29
  %32 = and i64 %30, %31
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  store i64 0, i64* %10, align 8
  store i64 %32, i64* %11, align 8
  %33 = call i8* @mmap64(i8* null, i64 %32, i32 3, i32 131106, i32 -1, i64 0) #10
  store i8* %33, i8** %12, align 8
  %34 = icmp eq i8* %33, inttoptr (i64 -1 to i8*)
  br i1 %34, label %35, label %36

35:                                               ; preds = %28
  call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 44), i32 161, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i64 0, i64 0)) #10
  br label %36

36:                                               ; preds = %35, %28
  %37 = call i32 @sigaltstack(%struct.stack_t* nonnull %2, %struct.stack_t* null) #10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %36
  %40 = tail call i32* @__errno_location() #11
  %41 = load i32, i32* %40, align 4
  call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 44), i32 171, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i64 0, i64 0), i32 %41) #10
  br label %42

42:                                               ; preds = %39, %36
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  store i8 1, i8* @_ZZN4abslL24MaybeSetupAlternateStackEvE5kOnce, align 1
  %43 = call {}* @llvm.invariant.start.p0i8(i64 1, i8* nonnull @_ZZN4abslL24MaybeSetupAlternateStackEvE5kOnce) #10
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN4abslL24MaybeSetupAlternateStackEvE5kOnce) #10
  br label %44

44:                                               ; preds = %42, %25, %22
  %45 = load i32, i32* %7, align 8
  %46 = or i32 %45, 134217728
  store i32 %46, i32* %7, align 8
  br label %47

47:                                               ; preds = %44, %15
  store void (i32, %struct.siginfo_t*, i8*)* @_ZN4abslL24AbslFailureSignalHandlerEiP9siginfo_tPv, void (i32, %struct.siginfo_t*, i8*)** %13, align 8
  %48 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %16, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %16, i64 0, i32 2
  %51 = call i32 @sigaction(i32 %49, %struct.sigaction* nonnull %3, %struct.sigaction* %50) #10
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %54, label %53, !prof !4

53:                                               ; preds = %47
  call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 44), i32 206, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)) #10
  br label %54

54:                                               ; preds = %47, %53
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #10
  %55 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %16, i64 1
  %56 = icmp eq %"struct.absl::FailureSignalData"* %55, getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 1, i64 0)
  br i1 %56, label %14, label %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4abslL24AbslFailureSignalHandlerEiP9siginfo_tPv(i32, %struct.siginfo_t* nocapture readnone, i8*) #2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %struct.timespec*
  %6 = tail call i32 @_ZN4absl13base_internal6GetTIDEv() #10
  %7 = cmpxchg i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZN4abslL10failed_tidE, i64 0, i32 0, i32 0), i32 0, i32 %6 acq_rel monotonic
  %8 = extractvalue { i32, i1 } %7, 1
  br i1 %8, label %25, label %9

9:                                                ; preds = %3
  %10 = extractvalue { i32, i1 } %7, 0
  %11 = tail call i8* @_ZN4absl18debugging_internal17GetProgramCounterEPv(i8* %2) #10
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 2, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8, i64 0, i64 44), i32 334, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.14, i64 0, i64 0), i32 %0, i8* %11) #10
  %12 = icmp eq i32 %6, %10
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #10
  store <2 x i64> <i64 3, i64 0>, <2 x i64>* %4, align 16
  br label %15

15:                                               ; preds = %18, %13
  %16 = call i32 @nanosleep(%struct.timespec* nonnull %5, %struct.timespec* nonnull %5) #10
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = tail call i32* @__errno_location() #11
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 4
  br i1 %21, label %15, label %22

22:                                               ; preds = %15, %18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #10
  %23 = call void (i32)* @signal(i32 %0, void (i32)* null) #10
  %24 = call i32 @raise(i32 %0) #10
  br label %74

25:                                               ; preds = %3, %9
  %26 = tail call i32 @sched_getcpu() #10
  %27 = load i32, i32* getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 2), align 4
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = tail call i32 @alarm(i32 0) #10
  %31 = tail call void (i32)* @signal(i32 14, void (i32)* nonnull @_ZN4abslL27ImmediateAbortSignalHandlerEi) #10
  %32 = load i32, i32* getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 2), align 4
  %33 = tail call i32 @alarm(i32 %32) #10
  br label %34

34:                                               ; preds = %29, %25
  tail call fastcc void @_ZN4abslL16WriteFailureInfoEiPviPFvPKcE(i32 %0, i8* %2, i32 %26, void (i8*)* nonnull @_ZN4abslL13WriteToStderrEPKc)
  %35 = load void (i8*)*, void (i8*)** getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 4), align 8
  %36 = icmp eq void (i8*)* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  tail call fastcc void @_ZN4abslL16WriteFailureInfoEiPviPFvPKcE(i32 %0, i8* %2, i32 %26, void (i8*)* nonnull %35)
  %38 = load void (i8*)*, void (i8*)** getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 4), align 8
  tail call void %38(i8* null) #10
  br label %39

39:                                               ; preds = %34, %37
  %40 = load i8, i8* getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 3), align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %71, label %42

42:                                               ; preds = %39
  %43 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0, i32 0), align 16
  %44 = icmp eq i32 %43, %0
  br i1 %44, label %48, label %45

45:                                               ; preds = %42
  %46 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1, i32 0), align 8
  %47 = icmp eq i32 %46, %0
  br i1 %47, label %48, label %53

48:                                               ; preds = %65, %62, %59, %56, %53, %45, %42
  %49 = phi %"struct.absl::FailureSignalData"* [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0), %42 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1), %45 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2), %53 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3), %56 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4), %59 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5), %62 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6), %65 ]
  %50 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %49, i64 0, i32 2
  %51 = tail call i32 @sigaction(i32 %0, %struct.sigaction* %50, %struct.sigaction* null) #10
  %52 = tail call i32 @raise(i32 %0) #10
  br label %74

53:                                               ; preds = %45
  %54 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2, i32 0), align 16
  %55 = icmp eq i32 %54, %0
  br i1 %55, label %48, label %56

56:                                               ; preds = %53
  %57 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3, i32 0), align 8
  %58 = icmp eq i32 %57, %0
  br i1 %58, label %48, label %59

59:                                               ; preds = %56
  %60 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4, i32 0), align 16
  %61 = icmp eq i32 %60, %0
  br i1 %61, label %48, label %62

62:                                               ; preds = %59
  %63 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5, i32 0), align 8
  %64 = icmp eq i32 %63, %0
  br i1 %64, label %48, label %65

65:                                               ; preds = %62
  %66 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6, i32 0), align 16
  %67 = icmp eq i32 %66, %0
  br i1 %67, label %48, label %68

68:                                               ; preds = %65
  %69 = tail call void (i32)* @signal(i32 %0, void (i32)* null) #10
  %70 = tail call i32 @raise(i32 %0) #10
  br label %74

71:                                               ; preds = %39
  %72 = tail call void (i32)* @signal(i32 %0, void (i32)* null) #10
  %73 = tail call i32 @raise(i32 %0) #10
  br label %74

74:                                               ; preds = %68, %48, %71, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i32 @sigemptyset(%struct.__sigset_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) local_unnamed_addr #3

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i64 @sysconf(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @sigaltstack(%struct.stack_t*, %struct.stack_t*) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

declare i32 @_ZN4absl13base_internal6GetTIDEv() local_unnamed_addr #4

declare i8* @_ZN4absl18debugging_internal17GetProgramCounterEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @sched_getcpu() local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @alarm(i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4abslL27ImmediateAbortSignalHandlerEi(i32) #2 {
  %2 = tail call void (i32)* @signal(i32 6, void (i32)* null) #10
  %3 = tail call i32 @raise(i32 6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN4abslL16WriteFailureInfoEiPviPFvPKcE(i32, i8*, i32, void (i8*)*) unnamed_addr #2 {
  %5 = alloca [96 x i8], align 16
  %6 = alloca [32 x i8], align 16
  %7 = alloca %"struct.absl::WriterFnStruct", align 8
  %8 = bitcast %"struct.absl::WriterFnStruct"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"struct.absl::WriterFnStruct", %"struct.absl::WriterFnStruct"* %7, i64 0, i32 0
  store void (i8*)* %3, void (i8*)** %9, align 8
  %10 = getelementptr inbounds [96 x i8], [96 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %10) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 96, i1 false) #10
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 32, i1 false) #10
  %12 = icmp eq i32 %2, -1
  br i1 %12, label %15, label %13

13:                                               ; preds = %4
  %14 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %11, i64 32, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 %2) #10
  br label %15

15:                                               ; preds = %13, %4
  %16 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0, i32 0), align 16
  %17 = icmp eq i32 %16, %0
  br i1 %17, label %36, label %18

18:                                               ; preds = %15
  %19 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1, i32 0), align 8
  %20 = icmp eq i32 %19, %0
  br i1 %20, label %36, label %21

21:                                               ; preds = %18
  %22 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2, i32 0), align 16
  %23 = icmp eq i32 %22, %0
  br i1 %23, label %36, label %24

24:                                               ; preds = %21
  %25 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3, i32 0), align 8
  %26 = icmp eq i32 %25, %0
  br i1 %26, label %36, label %27

27:                                               ; preds = %24
  %28 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4, i32 0), align 16
  %29 = icmp eq i32 %28, %0
  br i1 %29, label %36, label %30

30:                                               ; preds = %27
  %31 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5, i32 0), align 8
  %32 = icmp eq i32 %31, %0
  br i1 %32, label %36, label %33

33:                                               ; preds = %30
  %34 = load i32, i32* getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6, i32 0), align 16
  %35 = icmp eq i32 %34, %0
  br i1 %35, label %36, label %41

36:                                               ; preds = %33, %30, %27, %24, %21, %18, %15
  %37 = phi %"struct.absl::FailureSignalData"* [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 0), %15 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 1), %18 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 2), %21 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 3), %24 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 4), %27 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 5), %30 ], [ getelementptr inbounds ([7 x %"struct.absl::FailureSignalData"], [7 x %"struct.absl::FailureSignalData"]* @_ZN4abslL19failure_signal_dataE, i64 0, i64 6), %33 ]
  %38 = getelementptr inbounds %"struct.absl::FailureSignalData", %"struct.absl::FailureSignalData"* %37, i64 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %48, label %41

41:                                               ; preds = %36, %33
  %42 = phi i8* [ %39, %36 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %33 ]
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = tail call i64 @time(i64* null) #10
  %47 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %10, i64 96, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17, i64 0, i64 0), i8* nonnull %42, i64 %46, i8* nonnull %11) #10
  br label %51

48:                                               ; preds = %41, %36
  %49 = tail call i64 @time(i64* null) #10
  %50 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %10, i64 96, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.18, i64 0, i64 0), i32 %0, i64 %49, i8* nonnull %11) #10
  br label %51

51:                                               ; preds = %45, %48
  call void %3(i8* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %10) #10
  %52 = load i8, i8* getelementptr inbounds (%"struct.absl::FailureSignalHandlerOptions", %"struct.absl::FailureSignalHandlerOptions"* @_ZN4abslL11fsh_optionsE, i64 0, i32 0), align 8, !range !2
  %53 = icmp ne i8 %52, 0
  call fastcc void @_ZN4abslL15WriteStackTraceEPvbPFvPKcS0_ES0_(i8* %1, i1 zeroext %53, i8* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4abslL13WriteToStderrEPKc(i8*) #2 {
  %2 = tail call i32* @__errno_location() #11
  %3 = load i32, i32* %2, align 4
  %4 = tail call i64 @strlen(i8* %0) #12
  tail call void @_ZN4absl20raw_logging_internal17SafeWriteToStderrEPKcm(i8* %0, i64 %4) #10
  store i32 %3, i32* %2, align 4
  ret void
}

declare i32 @nanosleep(%struct.timespec*, %struct.timespec*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @raise(i32) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN4abslL15WriteStackTraceEPvbPFvPKcS0_ES0_(i8*, i1 zeroext, i8*) unnamed_addr #7 {
  %4 = alloca [32 x i8*], align 16
  %5 = alloca [32 x i32], align 16
  %6 = alloca i32, align 4
  %7 = bitcast [32 x i8*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = bitcast [32 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 128, i1 false)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #10
  store i32 -1431655766, i32* %6, align 4
  %10 = getelementptr inbounds [32 x i8*], [32 x i8*]* %4, i64 0, i64 0
  %11 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  %12 = call i32 @_ZN4absl25GetStackFramesWithContextEPPvPiiiPKvS2_(i8** nonnull %10, i32* nonnull %11, i32 32, i32 1, i8* %0, i32* nonnull %6) #10
  %13 = call i8* @_ZN4absl18debugging_internal17GetProgramCounterEPv(i8* %0) #10
  %14 = load i32, i32* %6, align 4
  call void @_ZN4absl18debugging_internal32DumpPCAndFrameSizesAndStackTraceEPvPKS1_PiiibPFvPKcS1_ES1_(i8* %13, i8** nonnull %10, i32* nonnull %11, i32 %12, i32 %14, i1 zeroext %1, void (i8*, i8*)* nonnull @_ZN4abslL15WriterFnWrapperEPKcPv, i8* %2) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4abslL15WriterFnWrapperEPKcPv(i8*, i8* nocapture readonly) #2 {
  %3 = bitcast i8* %1 to void (i8*)**
  %4 = load void (i8*)*, void (i8*)** %3, align 8
  tail call void %4(i8* %0) #10
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #8

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #3

declare i32 @_ZN4absl25GetStackFramesWithContextEPPvPiiiPKvS2_(i8**, i32*, i32, i32, i8*, i32*) local_unnamed_addr #4

declare void @_ZN4absl18debugging_internal32DumpPCAndFrameSizesAndStackTraceEPvPKS1_PiiibPFvPKcS1_ES1_(i8*, i8**, i32*, i32, i32, i1 zeroext, void (i8*, i8*)*, i8*) local_unnamed_addr #4

declare void @_ZN4absl20raw_logging_internal17SafeWriteToStderrEPKcm(i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readnone }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 1048575}
!4 = !{!"branch_weights", i32 2000, i32 1}
