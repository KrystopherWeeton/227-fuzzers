; ModuleID = '../../third_party/blink/renderer/core/animation/animation_clock.cc'
source_filename = "../../third_party/blink/renderer/core/animation/animation_clock.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AnimationClock" = type <{ %"class.base::TimeTicks", i8, [7 x i8], %"class.base::TickClock"*, i32, [4 x i8] }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::TimeDelta" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base9TimeDeltamiES0_ = comdat any

@_ZN5blink14AnimationClock23currently_running_task_E = hidden local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink14AnimationClock10UpdateTimeEN4base9TimeTicksE(%"class.blink::AnimationClock"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = load i32, i32* @_ZN5blink14AnimationClock23currently_running_task_E, align 4
  %4 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 4
  store i32 %3, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp sgt i64 %6, %1
  br i1 %7, label %9, label %8

8:                                                ; preds = %2
  store i64 %1, i64* %5, align 8
  br label %9

9:                                                ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink14AnimationClock11CurrentTimeEv(%"class.blink::AnimationClock"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::TimeDelta", align 8
  %3 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  br label %42

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = load i32, i32* @_ZN5blink14AnimationClock23currently_running_task_E, align 4
  %12 = icmp eq i32 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  br label %42

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 3
  %17 = load %"class.base::TickClock"*, %"class.base::TickClock"** %16, align 8
  %18 = bitcast %"class.base::TickClock"* %17 to i64 (%"class.base::TickClock"*)***
  %19 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %18, align 8
  %20 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %19, i64 2
  %21 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %20, align 8
  %22 = tail call i64 %21(%"class.base::TickClock"* %17) #7
  %23 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp sgt i64 %22, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %15
  %27 = load i32, i32* @_ZN5blink14AnimationClock23currently_running_task_E, align 4
  store i32 %27, i32* %9, align 8
  br label %40

28:                                               ; preds = %15
  %29 = sub nsw i64 %22, %24
  %30 = add i64 %29, -9223372036854775807
  %31 = icmp ult i64 %30, 2
  %32 = srem i64 %29, 16666
  %33 = select i1 %31, i64 %29, i64 %32
  %34 = bitcast %"class.base::TimeDelta"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #7
  %35 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  store i64 %22, i64* %35, align 8
  %36 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %2, i64 %33) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #7
  %37 = load i64, i64* %23, align 8
  %38 = load i32, i32* @_ZN5blink14AnimationClock23currently_running_task_E, align 4
  store i32 %38, i32* %9, align 8
  %39 = icmp sgt i64 %37, %36
  br i1 %39, label %42, label %40

40:                                               ; preds = %26, %28
  %41 = phi i64 [ %24, %26 ], [ %36, %28 ]
  store i64 %41, i64* %23, align 8
  br label %42

42:                                               ; preds = %40, %28, %13, %6
  %43 = phi i64* [ %14, %13 ], [ %7, %6 ], [ %23, %28 ], [ %23, %40 ]
  %44 = load i64, i64* %43, align 8
  ret i64 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN5blink14AnimationClock19ResetTimeForTestingEv(%"class.blink::AnimationClock"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14AnimationClock30OverrideDynamicClockForTestingEPKN4base9TickClockE(%"class.blink::AnimationClock"* nocapture, %"class.base::TickClock"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 3
  store %"class.base::TickClock"* %1, %"class.base::TickClock"** %3, align 8
  %4 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = bitcast %"class.base::TickClock"* %1 to i64 (%"class.base::TickClock"*)***
  %6 = load i64 (%"class.base::TickClock"*)**, i64 (%"class.base::TickClock"*)*** %5, align 8
  %7 = getelementptr inbounds i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %6, i64 2
  %8 = load i64 (%"class.base::TickClock"*)*, i64 (%"class.base::TickClock"*)** %7, align 8
  %9 = tail call i64 %8(%"class.base::TickClock"* %1) #7
  %10 = load i32, i32* @_ZN5blink14AnimationClock23currently_running_task_E, align 4
  %11 = getelementptr inbounds %"class.blink::AnimationClock", %"class.blink::AnimationClock"* %0, i64 0, i32 4
  store i32 %10, i32* %11, align 8
  %12 = load i64, i64* %4, align 8
  %13 = icmp sgt i64 %12, %9
  br i1 %13, label %15, label %14

14:                                               ; preds = %2
  store i64 %9, i64* %4, align 8
  br label %15

15:                                               ; preds = %2, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #7
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !3
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #7
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #7
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #6

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
