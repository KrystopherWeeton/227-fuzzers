; ModuleID = '../../third_party/libjxl/src/lib/jxl/modular/encoding/dec_ma.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/modular/encoding/dec_ma.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::__1::pair" = type { i32, i32 }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i8*, i8*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i8* }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.10", %"class.std::__1::vector.24", %"class.std::__1::vector.31", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.12" }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.14" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::HybridUintConfig"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { i32*, i32*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i32* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.jxl::ANSSymbolReader" = type <{ %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::HuffmanDecodingData"*, i8, [3 x i8], i32, %"struct.jxl::HybridUintConfig"*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", i32*, i32, i32, i32, i32, i32, i32, %"struct.jxl::HybridUintConfig", [120 x i32], i32, [4 x i8] }>
%"struct.jxl::AliasTable::Entry" = type { i8, i8, i16, i16, i16 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE = comdat any

$_ZNSt3__16vectorINS_4pairIiiEENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

@_ZN3jxlL17kSpecialDistancesE = internal unnamed_addr constant [120 x [2 x i8]] [[2 x i8] c"\00\01", [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\FF\01", [2 x i8] c"\00\02", [2 x i8] c"\02\00", [2 x i8] c"\01\02", [2 x i8] c"\FF\02", [2 x i8] c"\02\01", [2 x i8] c"\FE\01", [2 x i8] c"\02\02", [2 x i8] c"\FE\02", [2 x i8] c"\00\03", [2 x i8] c"\03\00", [2 x i8] c"\01\03", [2 x i8] c"\FF\03", [2 x i8] c"\03\01", [2 x i8] c"\FD\01", [2 x i8] c"\02\03", [2 x i8] c"\FE\03", [2 x i8] c"\03\02", [2 x i8] c"\FD\02", [2 x i8] c"\00\04", [2 x i8] c"\04\00", [2 x i8] c"\01\04", [2 x i8] c"\FF\04", [2 x i8] c"\04\01", [2 x i8] c"\FC\01", [2 x i8] c"\03\03", [2 x i8] c"\FD\03", [2 x i8] c"\02\04", [2 x i8] c"\FE\04", [2 x i8] c"\04\02", [2 x i8] c"\FC\02", [2 x i8] c"\00\05", [2 x i8] c"\03\04", [2 x i8] c"\FD\04", [2 x i8] c"\04\03", [2 x i8] c"\FC\03", [2 x i8] c"\05\00", [2 x i8] c"\01\05", [2 x i8] c"\FF\05", [2 x i8] c"\05\01", [2 x i8] c"\FB\01", [2 x i8] c"\02\05", [2 x i8] c"\FE\05", [2 x i8] c"\05\02", [2 x i8] c"\FB\02", [2 x i8] c"\04\04", [2 x i8] c"\FC\04", [2 x i8] c"\03\05", [2 x i8] c"\FD\05", [2 x i8] c"\05\03", [2 x i8] c"\FB\03", [2 x i8] c"\00\06", [2 x i8] c"\06\00", [2 x i8] c"\01\06", [2 x i8] c"\FF\06", [2 x i8] c"\06\01", [2 x i8] c"\FA\01", [2 x i8] c"\02\06", [2 x i8] c"\FE\06", [2 x i8] c"\06\02", [2 x i8] c"\FA\02", [2 x i8] c"\04\05", [2 x i8] c"\FC\05", [2 x i8] c"\05\04", [2 x i8] c"\FB\04", [2 x i8] c"\03\06", [2 x i8] c"\FD\06", [2 x i8] c"\06\03", [2 x i8] c"\FA\03", [2 x i8] c"\00\07", [2 x i8] c"\07\00", [2 x i8] c"\01\07", [2 x i8] c"\FF\07", [2 x i8] c"\05\05", [2 x i8] c"\FB\05", [2 x i8] c"\07\01", [2 x i8] c"\F9\01", [2 x i8] c"\04\06", [2 x i8] c"\FC\06", [2 x i8] c"\06\04", [2 x i8] c"\FA\04", [2 x i8] c"\02\07", [2 x i8] c"\FE\07", [2 x i8] c"\07\02", [2 x i8] c"\F9\02", [2 x i8] c"\03\07", [2 x i8] c"\FD\07", [2 x i8] c"\07\03", [2 x i8] c"\F9\03", [2 x i8] c"\05\06", [2 x i8] c"\FB\06", [2 x i8] c"\06\05", [2 x i8] c"\FA\05", [2 x i8] c"\08\00", [2 x i8] c"\04\07", [2 x i8] c"\FC\07", [2 x i8] c"\07\04", [2 x i8] c"\F9\04", [2 x i8] c"\08\01", [2 x i8] c"\08\02", [2 x i8] c"\06\06", [2 x i8] c"\FA\06", [2 x i8] c"\08\03", [2 x i8] c"\05\07", [2 x i8] c"\FB\07", [2 x i8] c"\07\05", [2 x i8] c"\F9\05", [2 x i8] c"\08\04", [2 x i8] c"\06\07", [2 x i8] c"\FA\07", [2 x i8] c"\07\06", [2 x i8] c"\F9\06", [2 x i8] c"\08\05", [2 x i8] c"\07\07", [2 x i8] c"\F9\07", [2 x i8] c"\08\06", [2 x i8] c"\08\07"], align 16
@.ref.tmp = private constant %"struct.std::__1::pair" { i32 -2147483648, i32 2147483647 }, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10DecodeTreeEPNS_9BitReaderEPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEEm(%"class.jxl::BitReader"*, %"class.std::__1::vector"*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.38", align 8
  %5 = alloca %"class.std::__1::vector.1", align 8
  %6 = alloca %"struct.jxl::ANSCode", align 8
  %7 = alloca %"class.jxl::ANSSymbolReader", align 8
  %8 = bitcast %"class.std::__1::vector.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #9
  %11 = bitcast %"struct.jxl::ANSCode"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 64, i1 false)
  %13 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 80, i1 false) #9
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %13) #9
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 7
  store i64 0, i64* %14, align 8
  %15 = call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %0, i64 6, %"struct.jxl::ANSCode"* nonnull %6, %"class.std::__1::vector.1"* nonnull %5, i1 zeroext false) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %306

17:                                               ; preds = %3
  %18 = load i8*, i8** %9, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 %21
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %306, label %27

27:                                               ; preds = %17
  %28 = bitcast %"class.jxl::ANSSymbolReader"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 592, i8* nonnull %28) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 592, i1 false)
  call void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"* nonnull %7, %"struct.jxl::ANSCode"* nonnull %6, %"class.jxl::BitReader"* %0, i64 0)
  %29 = icmp ult i64 %2, 67108864
  %30 = select i1 %29, i64 %2, i64 67108864
  %31 = bitcast %"class.std::__1::vector"* %1 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %34 = bitcast %"struct.jxl::PropertyDecisionNode"** %33 to i64*
  store i64 %32, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %36 = bitcast i8** %35 to i64*
  %37 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 4
  %38 = bitcast i8** %37 to i64*
  %39 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %41 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 7
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast %"struct.jxl::PropertyDecisionNode"** %43 to i64*
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  br label %46

46:                                               ; preds = %277, %27
  %47 = phi i64 [ 0, %27 ], [ %279, %277 ]
  %48 = phi i64 [ 1, %27 ], [ %278, %277 ]
  %49 = load i64, i64* %36, align 8
  %50 = load i64, i64* %38, align 8
  %51 = sub i64 %49, %50
  %52 = load i64, i64* %39, align 8
  %53 = add i64 %51, %52
  %54 = shl i64 %53, 3
  %55 = load i64, i64* %40, align 8
  %56 = sub i64 %54, %55
  store i64 %56, i64* %41, align 8
  %57 = load i8*, i8** %42, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 8
  %59 = ptrtoint i8* %58 to i64
  %60 = sub i64 %59, %50
  %61 = shl i64 %60, 3
  %62 = icmp ugt i64 %56, %61
  br i1 %62, label %299, label %63

63:                                               ; preds = %46
  %64 = load i64, i64* %34, align 8
  %65 = load i64, i64* %31, align 8
  %66 = sub i64 %64, %65
  %67 = sdiv exact i64 %66, 40
  %68 = icmp ugt i64 %67, %30
  br i1 %68, label %299, label %69

69:                                               ; preds = %63
  %70 = add i64 %48, -1
  %71 = load i8*, i8** %9, align 8, !noalias !2
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  %73 = load i8, i8* %72, align 1, !noalias !2
  %74 = zext i8 %73 to i64
  %75 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %74, %"class.jxl::BitReader"* %0) #9
  %76 = trunc i64 %75 to i32
  %77 = add i32 %76, -1
  %78 = icmp ugt i32 %76, 256
  br i1 %78, label %299, label %79

79:                                               ; preds = %69
  %80 = icmp eq i32 %76, 0
  %81 = load i8*, i8** %9, align 8
  br i1 %80, label %82, label %190

82:                                               ; preds = %79
  %83 = getelementptr inbounds i8, i8* %81, i64 2
  %84 = load i8, i8* %83, align 1, !noalias !5
  %85 = zext i8 %84 to i64
  %86 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %85, %"class.jxl::BitReader"* %0) #9
  %87 = icmp ugt i64 %86, 13
  br i1 %87, label %299, label %88

88:                                               ; preds = %82
  %89 = load i8*, i8** %9, align 8, !noalias !8
  %90 = getelementptr inbounds i8, i8* %89, i64 3
  %91 = load i8, i8* %90, align 1, !noalias !8
  %92 = zext i8 %91 to i64
  %93 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %92, %"class.jxl::BitReader"* %0) #9
  %94 = lshr i64 %93, 1
  %95 = shl i64 %93, 63
  %96 = ashr exact i64 %95, 63
  %97 = xor i64 %96, %94
  %98 = load i8*, i8** %9, align 8, !noalias !11
  %99 = getelementptr inbounds i8, i8* %98, i64 4
  %100 = load i8, i8* %99, align 1, !noalias !11
  %101 = zext i8 %100 to i64
  %102 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %101, %"class.jxl::BitReader"* %0) #9
  %103 = trunc i64 %102 to i32
  %104 = icmp ugt i32 %103, 30
  br i1 %104, label %299, label %105

105:                                              ; preds = %88
  %106 = load i8*, i8** %9, align 8, !noalias !14
  %107 = getelementptr inbounds i8, i8* %106, i64 5
  %108 = load i8, i8* %107, align 1, !noalias !14
  %109 = zext i8 %108 to i64
  %110 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %109, %"class.jxl::BitReader"* %0) #9
  %111 = trunc i64 %110 to i32
  %112 = add i32 %111, 1
  %113 = lshr i32 -2147483648, %103
  %114 = icmp ult i32 %112, %113
  br i1 %114, label %115, label %299

115:                                              ; preds = %105
  %116 = shl i32 %112, %103
  %117 = add i64 %47, 1
  %118 = trunc i64 %86 to i32
  %119 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %33, align 8
  %120 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %43, align 8
  %121 = icmp ult %"struct.jxl::PropertyDecisionNode"* %119, %120
  %122 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %120 to i64
  br i1 %121, label %123, label %134

123:                                              ; preds = %115
  %124 = trunc i64 %47 to i32
  %125 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 0
  store i32 0, i32* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 1
  store i16 -1, i16* %126, align 4
  %127 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 3
  store i32 %124, i32* %127, align 8
  %128 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 4
  store i32 0, i32* %128, align 4
  %129 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 5
  store i32 %118, i32* %129, align 8
  %130 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 7
  store i64 %97, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 0, i32 8
  store i32 %116, i32* %131, align 8
  %132 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %119, i64 1
  %133 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %132 to i64
  store i64 %133, i64* %34, align 8
  br label %277

134:                                              ; preds = %115
  %135 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %119 to i64
  %136 = load i64, i64* %31, align 8
  %137 = sub i64 %135, %136
  %138 = sdiv exact i64 %137, 40
  %139 = add nsw i64 %138, 1
  %140 = icmp ugt i64 %139, 461168601842738790
  br i1 %140, label %141, label %143

141:                                              ; preds = %134
  %142 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %142) #10
  unreachable

143:                                              ; preds = %134
  %144 = sub i64 %122, %136
  %145 = sdiv exact i64 %144, 40
  %146 = icmp ult i64 %145, 230584300921369395
  br i1 %146, label %147, label %152

147:                                              ; preds = %143
  %148 = shl nsw i64 %145, 1
  %149 = icmp ult i64 %148, %139
  %150 = select i1 %149, i64 %139, i64 %148
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %157, label %152

152:                                              ; preds = %147, %143
  %153 = phi i64 [ %150, %147 ], [ 461168601842738790, %143 ]
  %154 = mul i64 %153, 40
  %155 = call i8* @_Znwm(i64 %154) #11
  %156 = bitcast i8* %155 to %"struct.jxl::PropertyDecisionNode"*
  br label %157

157:                                              ; preds = %152, %147
  %158 = phi i64 [ %153, %152 ], [ 0, %147 ]
  %159 = phi %"struct.jxl::PropertyDecisionNode"* [ %156, %152 ], [ null, %147 ]
  %160 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138
  %161 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %158
  %162 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %161 to i64
  %163 = trunc i64 %47 to i32
  %164 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %160, i64 0, i32 0
  store i32 0, i32* %164, align 8
  %165 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 1
  store i16 -1, i16* %165, align 4
  %166 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 3
  store i32 %163, i32* %166, align 8
  %167 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 4
  store i32 0, i32* %167, align 4
  %168 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 5
  store i32 %118, i32* %168, align 8
  %169 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 7
  store i64 %97, i64* %169, align 8
  %170 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %159, i64 %138, i32 8
  store i32 %116, i32* %170, align 8
  %171 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %160, i64 1
  %172 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %171 to i64
  %173 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %45, align 8
  %174 = load i64, i64* %34, align 8
  %175 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %173 to i64
  %176 = sub i64 %174, %175
  %177 = sdiv exact i64 %176, -40
  %178 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %160, i64 %177
  %179 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %178 to i64
  %180 = icmp sgt i64 %176, 0
  br i1 %180, label %181, label %185

181:                                              ; preds = %157
  %182 = bitcast %"struct.jxl::PropertyDecisionNode"* %178 to i8*
  %183 = bitcast %"struct.jxl::PropertyDecisionNode"* %173 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* align 8 %183, i64 %176, i1 false) #9
  %184 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %45, align 8
  br label %185

185:                                              ; preds = %181, %157
  %186 = phi %"struct.jxl::PropertyDecisionNode"* [ %173, %157 ], [ %184, %181 ]
  store i64 %179, i64* %31, align 8
  store i64 %172, i64* %34, align 8
  store i64 %162, i64* %44, align 8
  %187 = icmp eq %"struct.jxl::PropertyDecisionNode"* %186, null
  br i1 %187, label %277, label %188

188:                                              ; preds = %185
  %189 = bitcast %"struct.jxl::PropertyDecisionNode"* %186 to i8*
  call void @_ZdlPv(i8* %189) #11
  br label %277

190:                                              ; preds = %79
  %191 = load i8, i8* %81, align 1, !noalias !17
  %192 = zext i8 %191 to i64
  %193 = call i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"* nonnull %7, i64 %192, %"class.jxl::BitReader"* %0) #9
  %194 = lshr i64 %193, 1
  %195 = shl i64 %193, 63
  %196 = ashr exact i64 %195, 63
  %197 = xor i64 %196, %194
  %198 = trunc i64 %197 to i32
  %199 = load i64, i64* %34, align 8
  %200 = load i64, i64* %31, align 8
  %201 = sub i64 %199, %200
  %202 = sdiv exact i64 %201, 40
  %203 = add i64 %202, %48
  %204 = add i64 %48, 1
  %205 = add i64 %202, %204
  %206 = inttoptr i64 %199 to %"struct.jxl::PropertyDecisionNode"*
  %207 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %43, align 8
  %208 = icmp ugt %"struct.jxl::PropertyDecisionNode"* %207, %206
  %209 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %207 to i64
  br i1 %208, label %210, label %223

210:                                              ; preds = %190
  %211 = trunc i64 %203 to i32
  %212 = trunc i64 %205 to i32
  %213 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 0
  store i32 %198, i32* %213, align 8
  %214 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 1
  %215 = trunc i32 %77 to i16
  store i16 %215, i16* %214, align 4
  %216 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 3
  store i32 %211, i32* %216, align 8
  %217 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 4
  store i32 %212, i32* %217, align 4
  %218 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 5
  store i32 0, i32* %218, align 8
  %219 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 7
  store i64 0, i64* %219, align 8
  %220 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 0, i32 8
  store i32 1, i32* %220, align 8
  %221 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %206, i64 1
  %222 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %221 to i64
  store i64 %222, i64* %34, align 8
  br label %277

223:                                              ; preds = %190
  %224 = add nsw i64 %202, 1
  %225 = icmp ugt i64 %224, 461168601842738790
  br i1 %225, label %226, label %228

226:                                              ; preds = %223
  %227 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %227) #10
  unreachable

228:                                              ; preds = %223
  %229 = sub i64 %209, %200
  %230 = sdiv exact i64 %229, 40
  %231 = icmp ult i64 %230, 230584300921369395
  br i1 %231, label %232, label %237

232:                                              ; preds = %228
  %233 = shl nsw i64 %230, 1
  %234 = icmp ult i64 %233, %224
  %235 = select i1 %234, i64 %224, i64 %233
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %237

237:                                              ; preds = %232, %228
  %238 = phi i64 [ %235, %232 ], [ 461168601842738790, %228 ]
  %239 = mul i64 %238, 40
  %240 = call i8* @_Znwm(i64 %239) #11
  %241 = bitcast i8* %240 to %"struct.jxl::PropertyDecisionNode"*
  br label %242

242:                                              ; preds = %237, %232
  %243 = phi i64 [ %238, %237 ], [ 0, %232 ]
  %244 = phi %"struct.jxl::PropertyDecisionNode"* [ %241, %237 ], [ null, %232 ]
  %245 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202
  %246 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %243
  %247 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %246 to i64
  %248 = trunc i64 %203 to i32
  %249 = trunc i64 %205 to i32
  %250 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %245, i64 0, i32 0
  store i32 %198, i32* %250, align 8
  %251 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 1
  %252 = trunc i32 %77 to i16
  store i16 %252, i16* %251, align 4
  %253 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 3
  store i32 %248, i32* %253, align 8
  %254 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 4
  store i32 %249, i32* %254, align 4
  %255 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 5
  store i32 0, i32* %255, align 8
  %256 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 7
  store i64 0, i64* %256, align 8
  %257 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %244, i64 %202, i32 8
  store i32 1, i32* %257, align 8
  %258 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %245, i64 1
  %259 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %258 to i64
  %260 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %45, align 8
  %261 = load i64, i64* %34, align 8
  %262 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %260 to i64
  %263 = sub i64 %261, %262
  %264 = sdiv exact i64 %263, -40
  %265 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %245, i64 %264
  %266 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %265 to i64
  %267 = icmp sgt i64 %263, 0
  br i1 %267, label %268, label %272

268:                                              ; preds = %242
  %269 = bitcast %"struct.jxl::PropertyDecisionNode"* %265 to i8*
  %270 = bitcast %"struct.jxl::PropertyDecisionNode"* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %269, i8* align 8 %270, i64 %263, i1 false) #9
  %271 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %45, align 8
  br label %272

272:                                              ; preds = %268, %242
  %273 = phi %"struct.jxl::PropertyDecisionNode"* [ %260, %242 ], [ %271, %268 ]
  store i64 %266, i64* %31, align 8
  store i64 %259, i64* %34, align 8
  store i64 %247, i64* %44, align 8
  %274 = icmp eq %"struct.jxl::PropertyDecisionNode"* %273, null
  br i1 %274, label %277, label %275

275:                                              ; preds = %272
  %276 = bitcast %"struct.jxl::PropertyDecisionNode"* %273 to i8*
  call void @_ZdlPv(i8* %276) #11
  br label %277

277:                                              ; preds = %275, %272, %210, %188, %185, %123
  %278 = phi i64 [ %70, %188 ], [ %70, %185 ], [ %70, %123 ], [ %204, %210 ], [ %204, %272 ], [ %204, %275 ]
  %279 = phi i64 [ %117, %188 ], [ %117, %185 ], [ %117, %123 ], [ %47, %210 ], [ %47, %272 ], [ %47, %275 ]
  %280 = icmp eq i64 %278, 0
  br i1 %280, label %281, label %46

281:                                              ; preds = %277
  %282 = bitcast %"class.std::__1::vector.38"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %282) #9
  %283 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %4, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %282, i8 0, i64 24, i1 false) #9
  call void @_ZNSt3__16vectorINS_4pairIiiEENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.38"* nonnull %4, i64 256, %"struct.std::__1::pair"* nonnull dereferenceable(8) @.ref.tmp) #9
  %284 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_112ValidateTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEERKNS2_INS1_4pairIiiEENS4_ISA_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %1, %"class.std::__1::vector.38"* nonnull dereferenceable(24) %4, i64 0) #9
  %285 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %283, align 8
  %286 = icmp eq %"struct.std::__1::pair"* %285, null
  br i1 %286, label %292, label %287

287:                                              ; preds = %281
  %288 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %4, i64 0, i32 0, i32 1
  %289 = bitcast %"struct.std::__1::pair"** %288 to i64*
  %290 = ptrtoint %"struct.std::__1::pair"* %285 to i64
  store i64 %290, i64* %289, align 8
  %291 = bitcast %"struct.std::__1::pair"* %285 to i8*
  call void @_ZdlPv(i8* %291) #11
  br label %292

292:                                              ; preds = %281, %287
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %282) #9
  %293 = icmp eq i32 %284, 0
  br i1 %293, label %294, label %299

294:                                              ; preds = %292
  %295 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 4
  %296 = load i32, i32* %295, align 4
  %297 = icmp ne i32 %296, 1245184
  %298 = zext i1 %297 to i32
  br label %299

299:                                              ; preds = %46, %105, %88, %82, %69, %63, %294, %292
  %300 = phi i32 [ %284, %292 ], [ %298, %294 ], [ 1, %63 ], [ 1, %69 ], [ 1, %82 ], [ 1, %88 ], [ 1, %105 ], [ 1, %46 ]
  %301 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %7, i64 0, i32 10, i32 0, i32 0, i32 0
  %302 = load i8*, i8** %301, align 8
  store i8* null, i8** %301, align 8
  %303 = icmp eq i8* %302, null
  br i1 %303, label %305, label %304

304:                                              ; preds = %299
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %302) #9
  br label %305

305:                                              ; preds = %299, %304
  call void @llvm.lifetime.end.p0i8(i64 592, i8* nonnull %28) #9
  br label %306

306:                                              ; preds = %17, %3, %305
  %307 = phi i32 [ %300, %305 ], [ %15, %3 ], [ 1, %17 ]
  %308 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 0
  %309 = load i32*, i32** %308, align 8
  %310 = icmp eq i32* %309, null
  br i1 %310, label %316, label %311

311:                                              ; preds = %306
  %312 = ptrtoint i32* %309 to i64
  %313 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 3, i32 0, i32 1
  %314 = bitcast i32** %313 to i64*
  store i64 %312, i64* %314, align 8
  %315 = bitcast i32* %309 to i8*
  call void @_ZdlPv(i8* %315) #11
  br label %316

316:                                              ; preds = %311, %306
  %317 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 0
  %318 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %317, align 8
  %319 = icmp eq %"struct.jxl::HybridUintConfig"* %318, null
  br i1 %319, label %325, label %320

320:                                              ; preds = %316
  %321 = ptrtoint %"struct.jxl::HybridUintConfig"* %318 to i64
  %322 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 2, i32 0, i32 1
  %323 = bitcast %"struct.jxl::HybridUintConfig"** %322 to i64*
  store i64 %321, i64* %323, align 8
  %324 = bitcast %"struct.jxl::HybridUintConfig"* %318 to i8*
  call void @_ZdlPv(i8* %324) #11
  br label %325

325:                                              ; preds = %320, %316
  %326 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1
  %327 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %326, i64 0, i32 0, i32 0
  %328 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %327, align 8
  %329 = icmp eq %"struct.jxl::HuffmanDecodingData"* %328, null
  br i1 %329, label %353, label %330

330:                                              ; preds = %325
  %331 = bitcast %"struct.jxl::HuffmanDecodingData"* %328 to i8*
  %332 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 1, i32 0, i32 1
  %333 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %332, align 8
  %334 = icmp eq %"struct.jxl::HuffmanDecodingData"* %333, %328
  br i1 %334, label %351, label %335

335:                                              ; preds = %330, %346
  %336 = phi %"struct.jxl::HuffmanDecodingData"* [ %337, %346 ], [ %333, %330 ]
  %337 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %336, i64 -1
  %338 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %337, i64 0, i32 0, i32 0, i32 0
  %339 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %338, align 8
  %340 = icmp eq %"struct.jxl::HuffmanCode"* %339, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %335
  %342 = ptrtoint %"struct.jxl::HuffmanCode"* %339 to i64
  %343 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %336, i64 -1, i32 0, i32 0, i32 1
  %344 = bitcast %"struct.jxl::HuffmanCode"** %343 to i64*
  store i64 %342, i64* %344, align 8
  %345 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %339, i64 0, i32 0
  call void @_ZdlPv(i8* %345) #11
  br label %346

346:                                              ; preds = %341, %335
  %347 = icmp eq %"struct.jxl::HuffmanDecodingData"* %337, %328
  br i1 %347, label %348, label %335

348:                                              ; preds = %346
  %349 = bitcast %"class.std::__1::vector.10"* %326 to i8**
  %350 = load i8*, i8** %349, align 8
  br label %351

351:                                              ; preds = %348, %330
  %352 = phi i8* [ %350, %348 ], [ %331, %330 ]
  store %"struct.jxl::HuffmanDecodingData"* %328, %"struct.jxl::HuffmanDecodingData"** %332, align 8
  call void @_ZdlPv(i8* %352) #11
  br label %353

353:                                              ; preds = %351, %325
  %354 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %355 = load i8*, i8** %354, align 8
  store i8* null, i8** %354, align 8
  %356 = icmp eq i8* %355, null
  br i1 %356, label %358, label %357

357:                                              ; preds = %353
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %355) #9
  br label %358

358:                                              ; preds = %353, %357
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %11) #9
  %359 = load i8*, i8** %9, align 8
  %360 = icmp eq i8* %359, null
  br i1 %360, label %364, label %361

361:                                              ; preds = %358
  %362 = ptrtoint i8* %359 to i64
  %363 = bitcast i8** %10 to i64*
  store i64 %362, i64* %363, align 8
  call void @_ZdlPv(i8* nonnull %359) #11
  br label %364

364:                                              ; preds = %358, %361
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret i32 %307
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.1"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ANSSymbolReaderC2EPKNS_7ANSCodeEPNS_9BitReaderEm(%"class.jxl::ANSSymbolReader"*, %"struct.jxl::ANSCode"*, %"class.jxl::BitReader"* noalias, i64) unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"struct.jxl::ANSCode"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.jxl::ANSSymbolReader"* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast %"struct.jxl::HuffmanDecodingData"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::HuffmanDecodingData"** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 4
  %15 = load i8, i8* %14, align 8, !range !20
  store i8 %15, i8* %13, align 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  store i32 1245184, i32* %16, align 4
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.jxl::HybridUintConfig"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 10
  %23 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %28 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 36, i1 false)
  %29 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18
  %30 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 1048576, i32 4, i32 16, i32 2>, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  store i32 0, i32* %31, align 4
  %32 = icmp eq i8 %15, 0
  br i1 %32, label %33, label %76

33:                                               ; preds = %4
  %34 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = icmp ugt i8* %35, %37
  br i1 %38, label %39, label %44, !prof !21

39:                                               ; preds = %33
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #9
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %57

44:                                               ; preds = %33
  %45 = bitcast i8* %35 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %46, %48
  %50 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = or i64 %51, %49
  store i64 %52, i64* %50, align 8
  %53 = sub i64 63, %48
  %54 = lshr i64 %53, 3
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  store i8* %55, i8** %34, align 8
  %56 = or i64 %48, 56
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %39, %44
  %58 = phi i64 [ %43, %39 ], [ %56, %44 ]
  %59 = phi i64 [ %41, %39 ], [ %52, %44 ]
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %62 = add i64 %58, -32
  store i64 %62, i64* %61, align 8
  %63 = lshr i64 %59, 32
  store i64 %63, i64* %60, align 8
  %64 = trunc i64 %59 to i32
  store i32 %64, i32* %16, align 4
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  store i32 %67, i32* %68, align 8
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 12, %70
  %72 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  store i32 %71, i32* %72, align 4
  %73 = shl nsw i32 -1, %71
  %74 = xor i32 %73, -1
  %75 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  store i32 %74, i32* %75, align 8
  br label %77

76:                                               ; preds = %4
  store i32 1245184, i32* %16, align 4
  br label %77

77:                                               ; preds = %76, %57
  %78 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 1
  %79 = load i8, i8* %78, align 8, !range !20
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %125, label %81

81:                                               ; preds = %77
  %82 = tail call i64 @_ZN3jxl12CacheAligned10NextOffsetEv() #9
  %83 = tail call i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64 4194304, i64 %82) #9
  %84 = ptrtoint i8* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i64 %84, i64* %23, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #9
  %89 = load i64, i64* %23, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i64 [ %89, %88 ], [ %84, %81 ]
  %92 = bitcast i32** %24 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 5
  %94 = load i64, i64* %93, align 8
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %25, align 4
  %96 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 4
  %97 = bitcast %"struct.jxl::HybridUintConfig"* %29 to i8*
  %98 = bitcast %"struct.jxl::HybridUintConfig"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 4 %98, i64 16, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 2
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %27, align 4
  %101 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 6, i32 3
  %102 = load i32, i32* %101, align 8
  store i32 %102, i32* %26, align 8
  %103 = icmp eq i64 %3, 0
  %104 = select i1 %103, i32 0, i32 120
  %105 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  store i32 %104, i32* %105, align 8
  br i1 %103, label %125, label %106

106:                                              ; preds = %90
  %107 = trunc i64 %3 to i32
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ 0, %106 ], [ %121, %108 ]
  %110 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 0
  %111 = load i8, i8* %110, align 2
  %112 = sext i8 %111 to i32
  %113 = getelementptr inbounds [120 x [2 x i8]], [120 x [2 x i8]]* @_ZN3jxlL17kSpecialDistancesE, i64 0, i64 %109, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = mul nsw i32 %115, %107
  %117 = add nsw i32 %116, %112
  %118 = icmp sgt i32 %117, 1
  %119 = select i1 %118, i32 %117, i32 1
  %120 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %109
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %109, 1
  %122 = load i32, i32* %105, align 8
  %123 = zext i32 %122 to i64
  %124 = icmp ult i64 %121, %123
  br i1 %124, label %108, label %125

125:                                              ; preds = %108, %90, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

declare i8* @_ZN3jxl12CacheAligned8AllocateEmm(i64, i64) local_unnamed_addr #2

declare i64 @_ZN3jxl12CacheAligned10NextOffsetEv() local_unnamed_addr #2

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl12_GLOBAL__N_112ValidateTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEERKNS2_INS1_4pairIiiEENS4_ISA_EEEEm(%"class.std::__1::vector"* dereferenceable(24), %"class.std::__1::vector.38"* nocapture readonly dereferenceable(24), i64) unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.38", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %5, align 8
  %7 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %6, i64 %2, i32 1
  %8 = load i16, i16* %7, align 4
  %9 = icmp eq i16 %8, -1
  br i1 %9, label %90, label %10

10:                                               ; preds = %3
  %11 = sext i16 %8 to i64
  %12 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %6, i64 %2, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %1, i64 0, i32 0, i32 0
  %15 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %14, align 8
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 %11, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, %13
  %19 = ptrtoint %"struct.std::__1::pair"* %15 to i64
  br i1 %18, label %90, label %20

20:                                               ; preds = %10
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %15, i64 %11, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, %13
  br i1 %23, label %24, label %90

24:                                               ; preds = %20
  %25 = bitcast %"class.std::__1::vector.38"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #9
  %26 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %4, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %4, i64 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #9
  %29 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %1, i64 0, i32 0, i32 1
  %30 = bitcast %"struct.std::__1::pair"** %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %31, %19
  %33 = ashr exact i64 %32, 3
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %55, label %35

35:                                               ; preds = %24
  %36 = icmp ugt i64 %33, 2305843009213693951
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.38"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %38) #10
  unreachable

39:                                               ; preds = %35
  %40 = tail call i8* @_Znwm(i64 %32) #11
  %41 = bitcast i8* %40 to %"struct.std::__1::pair"*
  %42 = bitcast %"struct.std::__1::pair"** %27 to i8**
  store i8* %40, i8** %42, align 8
  %43 = bitcast %"class.std::__1::vector.38"* %4 to i8**
  store i8* %40, i8** %43, align 8
  %44 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 %33
  store %"struct.std::__1::pair"* %44, %"struct.std::__1::pair"** %28, align 8
  %45 = bitcast %"struct.std::__1::pair"** %27 to i64*
  %46 = ptrtoint i8* %40 to i64
  %47 = icmp sgt i64 %32, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %39
  %49 = lshr exact i64 %32, 3
  %50 = bitcast %"struct.std::__1::pair"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 %50, i64 %32, i1 false) #9
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %41, i64 %49
  %52 = ptrtoint %"struct.std::__1::pair"* %51 to i64
  br label %53

53:                                               ; preds = %48, %39
  %54 = phi i64 [ %52, %48 ], [ %46, %39 ]
  store i64 %54, i64* %45, align 8
  br label %55

55:                                               ; preds = %24, %53
  %56 = phi %"struct.std::__1::pair"* [ null, %24 ], [ %41, %53 ]
  %57 = add nsw i32 %13, 1
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 %11, i32 0
  store i32 %57, i32* %58, align 4
  %59 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %5, align 8
  %60 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %59, i64 %2, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = zext i32 %61 to i64
  %63 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_112ValidateTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEERKNS2_INS1_4pairIiiEENS4_ISA_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::vector.38"* nonnull dereferenceable(24) %4, i64 %62)
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %81

65:                                               ; preds = %55
  %66 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %14, align 8
  %67 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %66, i64 %11, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %67, i64 %11, i32 0
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %66, i64 %11, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %67, i64 %11, i32 1
  store i32 %72, i32* %73, align 4
  %74 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %74, i64 %11, i32 1
  store i32 %13, i32* %75, align 4
  %76 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %5, align 8
  %77 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %76, i64 %2, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i64
  %80 = call fastcc i32 @_ZN3jxl12_GLOBAL__N_112ValidateTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS1_9allocatorIS3_EEEERKNS2_INS1_4pairIiiEENS4_ISA_EEEEm(%"class.std::__1::vector"* dereferenceable(24) %0, %"class.std::__1::vector.38"* nonnull dereferenceable(24) %4, i64 %79)
  br label %81

81:                                               ; preds = %55, %65
  %82 = phi i32 [ %80, %65 ], [ %63, %55 ]
  %83 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %26, align 8
  %84 = icmp eq %"struct.std::__1::pair"* %83, null
  br i1 %84, label %89, label %85

85:                                               ; preds = %81
  %86 = ptrtoint %"struct.std::__1::pair"* %83 to i64
  %87 = bitcast %"struct.std::__1::pair"** %27 to i64*
  store i64 %86, i64* %87, align 8
  %88 = bitcast %"struct.std::__1::pair"* %83 to i8*
  tail call void @_ZdlPv(i8* %88) #11
  br label %89

89:                                               ; preds = %81, %85
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #9
  br label %90

90:                                               ; preds = %20, %10, %3, %89
  %91 = phi i32 [ %82, %89 ], [ 0, %3 ], [ 1, %10 ], [ 1, %20 ]
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3jxl15ANSSymbolReader23ReadHybridUintClusteredEmPNS_9BitReaderE(%"class.jxl::ANSSymbolReader"*, i64, %"class.jxl::BitReader"* noalias) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 13
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 4
  %12 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 6
  %14 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 8
  %16 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 17
  %17 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 1
  %18 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 2
  %19 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 3
  %20 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 18, i32 0
  %21 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 16
  %22 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 5
  %24 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 20
  %25 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 12
  %26 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 14
  %27 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 11
  %28 = bitcast i32** %27 to i8**
  %29 = load i32, i32* %4, align 4
  br label %30

30:                                               ; preds = %333, %3
  %31 = phi i32 [ %334, %333 ], [ %29, %3 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !22

33:                                               ; preds = %30
  %34 = load i32*, i32** %27, align 8
  %35 = load i32, i32* %26, align 8
  %36 = add i32 %35, 1
  store i32 %36, i32* %26, align 8
  %37 = and i32 %35, 1048575
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %34, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  %42 = add i32 %31, -1
  store i32 %42, i32* %4, align 4
  %43 = load i32, i32* %25, align 8
  %44 = add i32 %43, 1
  store i32 %44, i32* %25, align 8
  %45 = and i32 %43, 1048575
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %34, i64 %46
  store i32 %40, i32* %47, align 4
  br label %395

48:                                               ; preds = %30
  %49 = load i8*, i8** %5, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = icmp ugt i8* %49, %50
  br i1 %51, label %52, label %53, !prof !21

52:                                               ; preds = %48
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #9
  br label %64

53:                                               ; preds = %48
  %54 = bitcast i8* %49 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = load i64, i64* %7, align 8
  %57 = shl i64 %55, %56
  %58 = load i64, i64* %8, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %8, align 8
  %60 = sub i64 63, %56
  %61 = lshr i64 %60, 3
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  store i8* %62, i8** %5, align 8
  %63 = or i64 %56, 56
  store i64 %63, i64* %7, align 8
  br label %64

64:                                               ; preds = %52, %53
  %65 = load i8, i8* %9, align 8, !range !20, !noalias !23
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %72, label %67, !prof !22

67:                                               ; preds = %64
  %68 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !26
  %69 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %68, i64 %1
  %70 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %69, %"class.jxl::BitReader"* %2) #9
  %71 = zext i16 %70 to i64
  br label %123

72:                                               ; preds = %64
  %73 = load i32, i32* %11, align 4, !noalias !29
  %74 = and i32 %73, 4095
  %75 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !29
  %76 = load i32, i32* %13, align 8, !noalias !29
  %77 = zext i32 %76 to i64
  %78 = shl i64 %1, %77
  %79 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %75, i64 %78
  %80 = zext i32 %74 to i64
  %81 = load i32, i32* %14, align 4, !noalias !29
  %82 = zext i32 %81 to i64
  %83 = load i32, i32* %15, align 8, !noalias !29
  %84 = lshr i64 %80, %82
  %85 = and i32 %83, %74
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %84
  %88 = bitcast %"struct.jxl::AliasTable::Entry"* %87 to i64*
  %89 = load i64, i64* %88, align 1, !alias.scope !32, !noalias !35
  %90 = and i64 %89, 255
  %91 = lshr i64 %89, 8
  %92 = and i64 %91, 255
  %93 = lshr i64 %89, 16
  %94 = and i64 %93, 65535
  %95 = icmp ule i64 %90, %86
  %96 = select i1 %95, i64 %89, i64 0
  %97 = lshr i64 %96, 32
  %98 = and i64 %97, 65535
  %99 = lshr i64 %96, 48
  %100 = select i1 %95, i64 %92, i64 %84
  %101 = add nuw nsw i64 %98, %86
  %102 = xor i64 %99, %94
  %103 = lshr i32 %73, 12
  %104 = zext i32 %103 to i64
  %105 = mul nuw nsw i64 %102, %104
  %106 = add nuw nsw i64 %101, %105
  %107 = trunc i64 %106 to i32
  %108 = load i64, i64* %8, align 8, !alias.scope !29
  %109 = icmp ult i32 %107, 65536
  %110 = shl i32 %107, 16
  %111 = trunc i64 %108 to i32
  %112 = and i32 %111, 65535
  %113 = or i32 %110, %112
  %114 = select i1 %109, i32 %113, i32 %107
  store i32 %114, i32* %11, align 4, !noalias !29
  %115 = select i1 %109, i64 16, i64 0
  %116 = load i64, i64* %7, align 8, !alias.scope !29
  %117 = sub i64 %116, %115
  store i64 %117, i64* %7, align 8, !alias.scope !29
  %118 = lshr i64 %108, %115
  store i64 %118, i64* %8, align 8, !alias.scope !29
  %119 = and i32 %114, 4095
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %120, %82
  %122 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %79, i64 %121, i32 0
  tail call void @llvm.prefetch(i8* %122, i32 0, i32 3, i32 1) #9, !noalias !37
  br label %123

123:                                              ; preds = %67, %72
  %124 = phi i64 [ %71, %67 ], [ %100, %72 ]
  %125 = load i32, i32* %16, align 4
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %337, label %128, !prof !22

128:                                              ; preds = %123
  %129 = sub nsw i64 %124, %126
  %130 = load i32, i32* %17, align 4
  %131 = zext i32 %130 to i64
  %132 = load i32, i32* %18, align 4
  %133 = load i32, i32* %19, align 4
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %129, %131
  br i1 %135, label %136, label %138

136:                                              ; preds = %128
  %137 = trunc i64 %129 to i32
  br label %171

138:                                              ; preds = %128
  %139 = load i32, i32* %20, align 4
  %140 = zext i32 %139 to i64
  %141 = zext i32 %132 to i64
  %142 = add nuw nsw i64 %134, %141
  %143 = sub nsw i64 %129, %131
  %144 = lshr i64 %143, %142
  %145 = sub i64 %144, %142
  %146 = add i64 %145, %140
  %147 = and i64 %146, 31
  %148 = shl nsw i32 -1, %133
  %149 = xor i32 %148, -1
  %150 = trunc i64 %129 to i32
  %151 = and i32 %149, %150
  %152 = lshr i64 %129, %134
  %153 = shl nsw i64 -1, %147
  %154 = xor i64 %153, -1
  %155 = load i64, i64* %8, align 8
  %156 = and i64 %155, %154
  %157 = load i64, i64* %7, align 8
  %158 = sub i64 %157, %147
  store i64 %158, i64* %7, align 8
  %159 = lshr i64 %155, %147
  store i64 %159, i64* %8, align 8
  %160 = shl i32 1, %132
  %161 = sext i32 %160 to i64
  %162 = add nsw i32 %160, -1
  %163 = sext i32 %162 to i64
  %164 = and i64 %152, %163
  %165 = or i64 %164, %161
  %166 = shl i64 %165, %147
  %167 = or i64 %156, %166
  %168 = shl i64 %167, %134
  %169 = trunc i64 %168 to i32
  %170 = or i32 %151, %169
  br label %171

171:                                              ; preds = %136, %138
  %172 = phi i32 [ %137, %136 ], [ %170, %138 ]
  %173 = load i32, i32* %21, align 8
  %174 = add i32 %173, %172
  store i32 %174, i32* %4, align 4
  %175 = load i8*, i8** %5, align 8
  %176 = load i8*, i8** %6, align 8
  %177 = icmp ugt i8* %175, %176
  br i1 %177, label %178, label %179, !prof !21

178:                                              ; preds = %171
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #9
  br label %190

179:                                              ; preds = %171
  %180 = bitcast i8* %175 to i64*
  %181 = load i64, i64* %180, align 1
  %182 = load i64, i64* %7, align 8
  %183 = shl i64 %181, %182
  %184 = load i64, i64* %8, align 8
  %185 = or i64 %184, %183
  store i64 %185, i64* %8, align 8
  %186 = sub i64 63, %182
  %187 = lshr i64 %186, 3
  %188 = getelementptr inbounds i8, i8* %175, i64 %187
  store i8* %188, i8** %5, align 8
  %189 = or i64 %182, 56
  store i64 %189, i64* %7, align 8
  br label %190

190:                                              ; preds = %178, %179
  %191 = load i32, i32* %22, align 4
  %192 = zext i32 %191 to i64
  %193 = load i8, i8* %9, align 8, !range !20, !noalias !38
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %202, label %195, !prof !22

195:                                              ; preds = %190
  %196 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %10, align 8, !noalias !41
  %197 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %196, i64 %192
  %198 = tail call zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"* %197, %"class.jxl::BitReader"* %2) #9
  %199 = zext i16 %198 to i64
  %200 = load i32, i32* %22, align 4
  %201 = zext i32 %200 to i64
  br label %253

202:                                              ; preds = %190
  %203 = load i32, i32* %11, align 4, !noalias !44
  %204 = and i32 %203, 4095
  %205 = load %"struct.jxl::AliasTable::Entry"*, %"struct.jxl::AliasTable::Entry"** %12, align 8, !noalias !44
  %206 = load i32, i32* %13, align 8, !noalias !44
  %207 = zext i32 %206 to i64
  %208 = shl i64 %192, %207
  %209 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %205, i64 %208
  %210 = zext i32 %204 to i64
  %211 = load i32, i32* %14, align 4, !noalias !44
  %212 = zext i32 %211 to i64
  %213 = load i32, i32* %15, align 8, !noalias !44
  %214 = lshr i64 %210, %212
  %215 = and i32 %213, %204
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %214
  %218 = bitcast %"struct.jxl::AliasTable::Entry"* %217 to i64*
  %219 = load i64, i64* %218, align 1, !alias.scope !47, !noalias !50
  %220 = and i64 %219, 255
  %221 = lshr i64 %219, 8
  %222 = and i64 %221, 255
  %223 = lshr i64 %219, 16
  %224 = and i64 %223, 65535
  %225 = icmp ule i64 %220, %216
  %226 = select i1 %225, i64 %219, i64 0
  %227 = lshr i64 %226, 32
  %228 = and i64 %227, 65535
  %229 = lshr i64 %226, 48
  %230 = select i1 %225, i64 %222, i64 %214
  %231 = add nuw nsw i64 %228, %216
  %232 = xor i64 %229, %224
  %233 = lshr i32 %203, 12
  %234 = zext i32 %233 to i64
  %235 = mul nuw nsw i64 %232, %234
  %236 = add nuw nsw i64 %231, %235
  %237 = trunc i64 %236 to i32
  %238 = load i64, i64* %8, align 8, !alias.scope !44
  %239 = icmp ult i32 %237, 65536
  %240 = shl i32 %237, 16
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 65535
  %243 = or i32 %240, %242
  %244 = select i1 %239, i32 %243, i32 %237
  store i32 %244, i32* %11, align 4, !noalias !44
  %245 = select i1 %239, i64 16, i64 0
  %246 = load i64, i64* %7, align 8, !alias.scope !44
  %247 = sub i64 %246, %245
  store i64 %247, i64* %7, align 8, !alias.scope !44
  %248 = lshr i64 %238, %245
  store i64 %248, i64* %8, align 8, !alias.scope !44
  %249 = and i32 %244, 4095
  %250 = zext i32 %249 to i64
  %251 = lshr i64 %250, %212
  %252 = getelementptr inbounds %"struct.jxl::AliasTable::Entry", %"struct.jxl::AliasTable::Entry"* %209, i64 %251, i32 0
  tail call void @llvm.prefetch(i8* %252, i32 0, i32 3, i32 1) #9, !noalias !52
  br label %253

253:                                              ; preds = %195, %202
  %254 = phi i64 [ %201, %195 ], [ %192, %202 ]
  %255 = phi i64 [ %199, %195 ], [ %230, %202 ]
  %256 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %257 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 2
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i64
  %265 = icmp ult i64 %255, %259
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = trunc i64 %255 to i32
  br label %302

268:                                              ; preds = %253
  %269 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %256, i64 %254, i32 0
  %270 = load i32, i32* %269, align 4
  %271 = zext i32 %270 to i64
  %272 = zext i32 %261 to i64
  %273 = add nuw nsw i64 %264, %272
  %274 = sub nsw i64 %255, %259
  %275 = lshr i64 %274, %273
  %276 = sub i64 %275, %273
  %277 = add i64 %276, %271
  %278 = and i64 %277, 31
  %279 = shl nsw i32 -1, %263
  %280 = xor i32 %279, -1
  %281 = trunc i64 %255 to i32
  %282 = and i32 %280, %281
  %283 = lshr i64 %255, %264
  %284 = shl nsw i64 -1, %278
  %285 = xor i64 %284, -1
  %286 = load i64, i64* %8, align 8
  %287 = and i64 %286, %285
  %288 = load i64, i64* %7, align 8
  %289 = sub i64 %288, %278
  store i64 %289, i64* %7, align 8
  %290 = lshr i64 %286, %278
  store i64 %290, i64* %8, align 8
  %291 = shl i32 1, %261
  %292 = sext i32 %291 to i64
  %293 = add nsw i32 %291, -1
  %294 = sext i32 %293 to i64
  %295 = and i64 %283, %294
  %296 = or i64 %295, %292
  %297 = shl i64 %296, %278
  %298 = or i64 %287, %297
  %299 = shl i64 %298, %264
  %300 = trunc i64 %299 to i32
  %301 = or i32 %282, %300
  br label %302

302:                                              ; preds = %266, %268
  %303 = phi i32 [ %267, %266 ], [ %301, %268 ]
  %304 = zext i32 %303 to i64
  %305 = load i32, i32* %24, align 8
  %306 = icmp ult i32 %303, %305
  br i1 %306, label %307, label %311, !prof !22

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.jxl::ANSSymbolReader", %"class.jxl::ANSSymbolReader"* %0, i64 0, i32 19, i64 %304
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i64
  br label %315

311:                                              ; preds = %302
  %312 = zext i32 %305 to i64
  %313 = add nuw nsw i64 %304, 1
  %314 = sub nsw i64 %313, %312
  br label %315

315:                                              ; preds = %311, %307
  %316 = phi i64 [ %310, %307 ], [ %314, %311 ]
  %317 = load i32, i32* %25, align 8
  %318 = zext i32 %317 to i64
  %319 = icmp ugt i64 %316, %318
  %320 = select i1 %319, i64 %318, i64 %316, !prof !21
  %321 = icmp ult i64 %320, 1048576
  %322 = select i1 %321, i64 %320, i64 1048576, !prof !22
  %323 = trunc i64 %322 to i32
  %324 = sub i32 %317, %323
  store i32 %324, i32* %26, align 8
  %325 = icmp eq i64 %322, 0
  br i1 %325, label %326, label %333, !prof !21

326:                                              ; preds = %315
  %327 = load i32, i32* %4, align 4
  %328 = zext i32 %327 to i64
  %329 = icmp ult i64 %328, 1048576
  %330 = select i1 %329, i64 %328, i64 1048576
  %331 = load i8*, i8** %28, align 8
  %332 = shl nuw nsw i64 %330, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %331, i8 0, i64 %332, i1 false)
  br label %333

333:                                              ; preds = %326, %315
  %334 = load i32, i32* %4, align 4
  %335 = load i32, i32* %21, align 8
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %395, label %30

337:                                              ; preds = %123
  %338 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %23, align 8
  %339 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 2
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = icmp ult i64 %124, %341
  br i1 %347, label %348, label %350

348:                                              ; preds = %337
  %349 = trunc i64 %124 to i32
  br label %384

350:                                              ; preds = %337
  %351 = getelementptr inbounds %"struct.jxl::HybridUintConfig", %"struct.jxl::HybridUintConfig"* %338, i64 %1, i32 0
  %352 = load i32, i32* %351, align 4
  %353 = zext i32 %352 to i64
  %354 = zext i32 %343 to i64
  %355 = add nuw nsw i64 %346, %354
  %356 = sub nsw i64 %124, %341
  %357 = lshr i64 %356, %355
  %358 = sub i64 %357, %355
  %359 = add i64 %358, %353
  %360 = and i64 %359, 31
  %361 = shl nsw i32 -1, %345
  %362 = xor i32 %361, -1
  %363 = trunc i64 %124 to i32
  %364 = and i32 %362, %363
  %365 = lshr i64 %124, %346
  %366 = shl nsw i64 -1, %360
  %367 = xor i64 %366, -1
  %368 = load i64, i64* %8, align 8
  %369 = and i64 %368, %367
  %370 = load i64, i64* %7, align 8
  %371 = sub i64 %370, %360
  store i64 %371, i64* %7, align 8
  %372 = lshr i64 %368, %360
  store i64 %372, i64* %8, align 8
  %373 = shl i32 1, %343
  %374 = sext i32 %373 to i64
  %375 = add nsw i32 %373, -1
  %376 = sext i32 %375 to i64
  %377 = and i64 %365, %376
  %378 = or i64 %377, %374
  %379 = shl i64 %378, %360
  %380 = or i64 %369, %379
  %381 = shl i64 %380, %346
  %382 = trunc i64 %381 to i32
  %383 = or i32 %364, %382
  br label %384

384:                                              ; preds = %348, %350
  %385 = phi i32 [ %349, %348 ], [ %383, %350 ]
  %386 = zext i32 %385 to i64
  %387 = load i32*, i32** %27, align 8
  %388 = icmp eq i32* %387, null
  br i1 %388, label %395, label %389

389:                                              ; preds = %384
  %390 = load i32, i32* %25, align 8
  %391 = add i32 %390, 1
  store i32 %391, i32* %25, align 8
  %392 = and i32 %390, 1048575
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %387, i64 %393
  store i32 %385, i32* %394, align 4
  br label %395

395:                                              ; preds = %333, %384, %389, %33
  %396 = phi i64 [ %41, %33 ], [ %386, %384 ], [ %386, %389 ], [ 0, %333 ]
  ret i64 %396
}

declare zeroext i16 @_ZNK3jxl19HuffmanDecodingData10ReadSymbolEPNS_9BitReaderE(%"struct.jxl::HuffmanDecodingData"*, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIiiEENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.38"*, i64, %"struct.std::__1::pair"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.std::__1::pair"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.std::__1::pair"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %139, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.std::__1::pair"*
  %15 = inttoptr i64 %9 to i8*
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %1
  %17 = icmp eq i64 %1, 0
  br i1 %17, label %137, label %18

18:                                               ; preds = %13
  %19 = bitcast %"struct.std::__1::pair"* %2 to i64*
  %20 = shl nsw i64 %1, 3
  %21 = add i64 %20, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %23, 4
  br i1 %24, label %25, label %47

25:                                               ; preds = %106, %47, %18
  %26 = phi %"struct.std::__1::pair"* [ %14, %47 ], [ %14, %18 ], [ %60, %106 ]
  %27 = ptrtoint %"struct.std::__1::pair"* %26 to i64
  %28 = add i64 %1, -1
  %29 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %28, i32 0
  %30 = ptrtoint i32* %29 to i64
  %31 = sub i64 %30, %27
  %32 = lshr i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %25, %36
  %37 = phi %"struct.std::__1::pair"* [ %41, %36 ], [ %26, %25 ]
  %38 = phi i64 [ %42, %36 ], [ %34, %25 ]
  %39 = bitcast %"struct.std::__1::pair"* %37 to i64*
  %40 = load i64, i64* %19, align 4
  store i64 %40, i64* %39, align 4
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %37, i64 1
  %42 = add i64 %38, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %36, !llvm.loop !53

44:                                               ; preds = %36, %25
  %45 = phi %"struct.std::__1::pair"* [ %26, %25 ], [ %41, %36 ]
  %46 = icmp ult i64 %31, 56
  br i1 %46, label %108, label %110

47:                                               ; preds = %18
  %48 = shl nsw i64 %1, 3
  %49 = add i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %51
  %53 = bitcast %"struct.std::__1::pair"* %2 to i8*
  %54 = getelementptr i8, i8* %53, i64 1
  %55 = icmp ugt i8* %54, %15
  %56 = icmp ugt %"struct.std::__1::pair"* %52, %2
  %57 = and i1 %55, %56
  br i1 %57, label %25, label %58

58:                                               ; preds = %47
  %59 = and i64 %23, 4611686018427387900
  %60 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %59
  %61 = add nsw i64 %59, -4
  %62 = lshr exact i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i64, i64* %19, align 4, !alias.scope !55
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = shufflevector <2 x i64> %69, <2 x i64> undef, <2 x i32> zeroinitializer
  %71 = insertelement <2 x i64> undef, i64 %68, i32 0
  %72 = shufflevector <2 x i64> %71, <2 x i64> undef, <2 x i32> zeroinitializer
  %73 = load i64, i64* %19, align 4, !alias.scope !55
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = shufflevector <2 x i64> %74, <2 x i64> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x i64> undef, i64 %73, i32 0
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %79
  %82 = bitcast %"struct.std::__1::pair"* %81 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %82, align 4, !alias.scope !58, !noalias !55
  %83 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %81, i64 2
  %84 = bitcast %"struct.std::__1::pair"* %83 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %84, align 4, !alias.scope !58, !noalias !55
  %85 = or i64 %79, 4
  %86 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %85
  %87 = bitcast %"struct.std::__1::pair"* %86 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %87, align 4, !alias.scope !58, !noalias !55
  %88 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %86, i64 2
  %89 = bitcast %"struct.std::__1::pair"* %88 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %89, align 4, !alias.scope !58, !noalias !55
  %90 = add i64 %79, 8
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !60

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %14, i64 %94
  %98 = load i64, i64* %19, align 4, !alias.scope !55
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = shufflevector <2 x i64> %99, <2 x i64> undef, <2 x i32> zeroinitializer
  %101 = insertelement <2 x i64> undef, i64 %98, i32 0
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %103 = bitcast %"struct.std::__1::pair"* %97 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %103, align 4, !alias.scope !58, !noalias !55
  %104 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %97, i64 2
  %105 = bitcast %"struct.std::__1::pair"* %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 4, !alias.scope !58, !noalias !55
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %23, %59
  br i1 %107, label %108, label %25

108:                                              ; preds = %44, %110, %106
  %109 = ptrtoint %"struct.std::__1::pair"* %16 to i64
  br label %137

110:                                              ; preds = %44, %110
  %111 = phi %"struct.std::__1::pair"* [ %135, %110 ], [ %45, %44 ]
  %112 = bitcast %"struct.std::__1::pair"* %111 to i64*
  %113 = load i64, i64* %19, align 4
  store i64 %113, i64* %112, align 4
  %114 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 1
  %115 = bitcast %"struct.std::__1::pair"* %114 to i64*
  %116 = load i64, i64* %19, align 4
  store i64 %116, i64* %115, align 4
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 2
  %118 = bitcast %"struct.std::__1::pair"* %117 to i64*
  %119 = load i64, i64* %19, align 4
  store i64 %119, i64* %118, align 4
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 3
  %121 = bitcast %"struct.std::__1::pair"* %120 to i64*
  %122 = load i64, i64* %19, align 4
  store i64 %122, i64* %121, align 4
  %123 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 4
  %124 = bitcast %"struct.std::__1::pair"* %123 to i64*
  %125 = load i64, i64* %19, align 4
  store i64 %125, i64* %124, align 4
  %126 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 5
  %127 = bitcast %"struct.std::__1::pair"* %126 to i64*
  %128 = load i64, i64* %19, align 4
  store i64 %128, i64* %127, align 4
  %129 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 6
  %130 = bitcast %"struct.std::__1::pair"* %129 to i64*
  %131 = load i64, i64* %19, align 4
  store i64 %131, i64* %130, align 4
  %132 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 7
  %133 = bitcast %"struct.std::__1::pair"* %132 to i64*
  %134 = load i64, i64* %19, align 4
  store i64 %134, i64* %133, align 4
  %135 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %111, i64 8
  %136 = icmp eq %"struct.std::__1::pair"* %135, %16
  br i1 %136, label %108, label %110, !llvm.loop !62

137:                                              ; preds = %13, %108
  %138 = phi i64 [ %109, %108 ], [ %9, %13 ]
  store i64 %138, i64* %8, align 8
  br label %312

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.38"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %9, %141
  %143 = ashr exact i64 %142, 3
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 2305843009213693951
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.38"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #10
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %6, %141
  %150 = ashr exact i64 %149, 3
  %151 = icmp ult i64 %150, 1152921504606846975
  br i1 %151, label %152, label %160

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 2
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = icmp ugt i64 %155, 2305843009213693951
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  tail call void @abort() #10
  unreachable

160:                                              ; preds = %148, %157
  %161 = phi i64 [ %155, %157 ], [ 2305843009213693951, %148 ]
  %162 = shl i64 %161, 3
  %163 = tail call i8* @_Znwm(i64 %162) #11
  %164 = bitcast i8* %163 to %"struct.std::__1::pair"*
  br label %165

165:                                              ; preds = %160, %152
  %166 = phi i64 [ %161, %160 ], [ 0, %152 ]
  %167 = phi %"struct.std::__1::pair"* [ %164, %160 ], [ null, %152 ]
  %168 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 %143
  %169 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 %166
  %170 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %1
  %171 = bitcast %"struct.std::__1::pair"* %2 to i64*
  %172 = shl nsw i64 %1, 3
  %173 = add i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i64 %175, 4
  br i1 %176, label %240, label %177

177:                                              ; preds = %165
  %178 = bitcast %"struct.std::__1::pair"* %168 to i8*
  %179 = shl nsw i64 %1, 3
  %180 = add i64 %179, -8
  %181 = lshr exact i64 %180, 3
  %182 = add nsw i64 %143, %181
  %183 = add nsw i64 %182, 1
  %184 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 %183
  %185 = bitcast %"struct.std::__1::pair"* %2 to i8*
  %186 = getelementptr i8, i8* %185, i64 1
  %187 = icmp ugt i8* %186, %178
  %188 = icmp ugt %"struct.std::__1::pair"* %184, %2
  %189 = and i1 %187, %188
  br i1 %189, label %240, label %190

190:                                              ; preds = %177
  %191 = and i64 %175, 4611686018427387900
  %192 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %191
  %193 = add nsw i64 %191, -4
  %194 = lshr exact i64 %193, 2
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 1
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %225, label %198

198:                                              ; preds = %190
  %199 = sub nuw nsw i64 %195, %196
  %200 = load i64, i64* %171, align 4, !alias.scope !63
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = shufflevector <2 x i64> %201, <2 x i64> undef, <2 x i32> zeroinitializer
  %203 = insertelement <2 x i64> undef, i64 %200, i32 0
  %204 = shufflevector <2 x i64> %203, <2 x i64> undef, <2 x i32> zeroinitializer
  %205 = load i64, i64* %171, align 4, !alias.scope !63
  %206 = insertelement <2 x i64> undef, i64 %205, i32 0
  %207 = shufflevector <2 x i64> %206, <2 x i64> undef, <2 x i32> zeroinitializer
  %208 = insertelement <2 x i64> undef, i64 %205, i32 0
  %209 = shufflevector <2 x i64> %208, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %210

210:                                              ; preds = %210, %198
  %211 = phi i64 [ 0, %198 ], [ %222, %210 ]
  %212 = phi i64 [ %199, %198 ], [ %223, %210 ]
  %213 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %211
  %214 = bitcast %"struct.std::__1::pair"* %213 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %214, align 4, !alias.scope !66, !noalias !63
  %215 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %213, i64 2
  %216 = bitcast %"struct.std::__1::pair"* %215 to <2 x i64>*
  store <2 x i64> %204, <2 x i64>* %216, align 4, !alias.scope !66, !noalias !63
  %217 = or i64 %211, 4
  %218 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %217
  %219 = bitcast %"struct.std::__1::pair"* %218 to <2 x i64>*
  store <2 x i64> %207, <2 x i64>* %219, align 4, !alias.scope !66, !noalias !63
  %220 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %218, i64 2
  %221 = bitcast %"struct.std::__1::pair"* %220 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %221, align 4, !alias.scope !66, !noalias !63
  %222 = add i64 %211, 8
  %223 = add i64 %212, -2
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %210, !llvm.loop !68

225:                                              ; preds = %210, %190
  %226 = phi i64 [ 0, %190 ], [ %222, %210 ]
  %227 = icmp eq i64 %196, 0
  br i1 %227, label %238, label %228

228:                                              ; preds = %225
  %229 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %226
  %230 = load i64, i64* %171, align 4, !alias.scope !63
  %231 = insertelement <2 x i64> undef, i64 %230, i32 0
  %232 = shufflevector <2 x i64> %231, <2 x i64> undef, <2 x i32> zeroinitializer
  %233 = insertelement <2 x i64> undef, i64 %230, i32 0
  %234 = shufflevector <2 x i64> %233, <2 x i64> undef, <2 x i32> zeroinitializer
  %235 = bitcast %"struct.std::__1::pair"* %229 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %235, align 4, !alias.scope !66, !noalias !63
  %236 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %229, i64 2
  %237 = bitcast %"struct.std::__1::pair"* %236 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %237, align 4, !alias.scope !66, !noalias !63
  br label %238

238:                                              ; preds = %225, %228
  %239 = icmp eq i64 %175, %191
  br i1 %239, label %290, label %240

240:                                              ; preds = %238, %177, %165
  %241 = phi %"struct.std::__1::pair"* [ %168, %177 ], [ %168, %165 ], [ %192, %238 ]
  %242 = ptrtoint %"struct.std::__1::pair"* %241 to i64
  %243 = add i64 %143, %1
  %244 = add i64 %243, -1
  %245 = getelementptr %"struct.std::__1::pair", %"struct.std::__1::pair"* %167, i64 %244, i32 0
  %246 = ptrtoint i32* %245 to i64
  %247 = sub i64 %246, %242
  %248 = lshr i64 %247, 3
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %240, %252
  %253 = phi %"struct.std::__1::pair"* [ %257, %252 ], [ %241, %240 ]
  %254 = phi i64 [ %258, %252 ], [ %250, %240 ]
  %255 = bitcast %"struct.std::__1::pair"* %253 to i64*
  %256 = load i64, i64* %171, align 4
  store i64 %256, i64* %255, align 4
  %257 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %253, i64 1
  %258 = add i64 %254, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %252, !llvm.loop !69

260:                                              ; preds = %252, %240
  %261 = phi %"struct.std::__1::pair"* [ %241, %240 ], [ %257, %252 ]
  %262 = icmp ult i64 %247, 56
  br i1 %262, label %290, label %263

263:                                              ; preds = %260, %263
  %264 = phi %"struct.std::__1::pair"* [ %288, %263 ], [ %261, %260 ]
  %265 = bitcast %"struct.std::__1::pair"* %264 to i64*
  %266 = load i64, i64* %171, align 4
  store i64 %266, i64* %265, align 4
  %267 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 1
  %268 = bitcast %"struct.std::__1::pair"* %267 to i64*
  %269 = load i64, i64* %171, align 4
  store i64 %269, i64* %268, align 4
  %270 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 2
  %271 = bitcast %"struct.std::__1::pair"* %270 to i64*
  %272 = load i64, i64* %171, align 4
  store i64 %272, i64* %271, align 4
  %273 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 3
  %274 = bitcast %"struct.std::__1::pair"* %273 to i64*
  %275 = load i64, i64* %171, align 4
  store i64 %275, i64* %274, align 4
  %276 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 4
  %277 = bitcast %"struct.std::__1::pair"* %276 to i64*
  %278 = load i64, i64* %171, align 4
  store i64 %278, i64* %277, align 4
  %279 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 5
  %280 = bitcast %"struct.std::__1::pair"* %279 to i64*
  %281 = load i64, i64* %171, align 4
  store i64 %281, i64* %280, align 4
  %282 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 6
  %283 = bitcast %"struct.std::__1::pair"* %282 to i64*
  %284 = load i64, i64* %171, align 4
  store i64 %284, i64* %283, align 4
  %285 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 7
  %286 = bitcast %"struct.std::__1::pair"* %285 to i64*
  %287 = load i64, i64* %171, align 4
  store i64 %287, i64* %286, align 4
  %288 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %264, i64 8
  %289 = icmp eq %"struct.std::__1::pair"* %170, %288
  br i1 %289, label %290, label %263, !llvm.loop !70

290:                                              ; preds = %260, %263, %238
  %291 = ptrtoint %"struct.std::__1::pair"* %169 to i64
  %292 = ptrtoint %"struct.std::__1::pair"* %170 to i64
  %293 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 0
  %294 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %293, align 8
  %295 = load i64, i64* %8, align 8
  %296 = ptrtoint %"struct.std::__1::pair"* %294 to i64
  %297 = sub i64 %295, %296
  %298 = ashr exact i64 %297, 3
  %299 = sub nsw i64 0, %298
  %300 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %168, i64 %299
  %301 = ptrtoint %"struct.std::__1::pair"* %300 to i64
  %302 = icmp sgt i64 %297, 0
  br i1 %302, label %303, label %307

303:                                              ; preds = %290
  %304 = bitcast %"struct.std::__1::pair"* %300 to i8*
  %305 = bitcast %"struct.std::__1::pair"* %294 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %304, i8* align 4 %305, i64 %297, i1 false) #9
  %306 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %293, align 8
  br label %307

307:                                              ; preds = %290, %303
  %308 = phi %"struct.std::__1::pair"* [ %294, %290 ], [ %306, %303 ]
  store i64 %301, i64* %140, align 8
  store i64 %292, i64* %8, align 8
  store i64 %291, i64* %5, align 8
  %309 = icmp eq %"struct.std::__1::pair"* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %307
  %311 = bitcast %"struct.std::__1::pair"* %308 to i8*
  tail call void @_ZdlPv(i8* %311) #11
  br label %312

312:                                              ; preds = %310, %307, %137
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inaccessiblemem_or_argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!10 = distinct !{!10, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!13 = distinct !{!13, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!16 = distinct !{!16, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE: argument 0"}
!19 = distinct !{!19, !"_ZN3jxl15ANSSymbolReader14ReadHybridUintEmPNS_9BitReaderERKNSt3__16vectorIhNS3_9allocatorIhEEEE"}
!20 = !{i8 0, i8 2}
!21 = !{!"branch_weights", i32 1, i32 2000}
!22 = !{!"branch_weights", i32 2000, i32 1}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!25 = distinct !{!25, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!26 = !{!27, !24}
!27 = distinct !{!27, !28, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!28 = distinct !{!28, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!29 = !{!30, !24}
!30 = distinct !{!30, !31, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!31 = distinct !{!31, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!34 = distinct !{!34, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!35 = !{!36, !30}
!36 = distinct !{!36, !34, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!37 = !{!30}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE: argument 0"}
!40 = distinct !{!40, !"_ZN3jxl15ANSSymbolReader23ReadSymbolWithoutRefillEmPNS_9BitReaderE"}
!41 = !{!42, !39}
!42 = distinct !{!42, !43, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE: argument 0"}
!43 = distinct !{!43, !"_ZN3jxl15ANSSymbolReader27ReadSymbolHuffWithoutRefillEmPNS_9BitReaderE"}
!44 = !{!45, !39}
!45 = distinct !{!45, !46, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE: argument 0"}
!46 = distinct !{!46, !"_ZN3jxl15ANSSymbolReader26ReadSymbolANSWithoutRefillEmPNS_9BitReaderE"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 1"}
!49 = distinct !{!49, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm"}
!50 = !{!51, !45}
!51 = distinct !{!51, !49, !"_ZN3jxl10AliasTable6LookupEPKNS0_5EntryEmmm: argument 0"}
!52 = !{!45}
!53 = distinct !{!53, !54}
!54 = !{!"llvm.loop.unroll.disable"}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.isvectorized", i32 1}
!62 = distinct !{!62, !61}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !61}
!69 = distinct !{!69, !54}
!70 = distinct !{!70, !61}
