; ModuleID = '../../third_party/pdfium/fxbarcode/common/reedsolomon/BC_ReedSolomonGF256Poly.cpp'
source_filename = "../../third_party/pdfium/fxbarcode/common/reedsolomon/BC_ReedSolomonGF256Poly.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CBC_ReedSolomonGF256Poly = type { %"class.fxcrt::UnownedPtr", %"class.std::__1::vector" }
%"class.fxcrt::UnownedPtr" = type { %class.CBC_ReedSolomonGF256* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%class.CBC_ReedSolomonGF256 = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", [256 x i32], [256 x i32] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CBC_ReedSolomonGF256Poly* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

@_ZN24CBC_ReedSolomonGF256PolyC1EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE = hidden unnamed_addr alias void (%class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256*, %"class.std::__1::vector"*), void (%class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256*, %"class.std::__1::vector"*)* @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE
@_ZN24CBC_ReedSolomonGF256PolyD1Ev = hidden unnamed_addr alias void (%class.CBC_ReedSolomonGF256Poly*), void (%class.CBC_ReedSolomonGF256Poly*)* @_ZN24CBC_ReedSolomonGF256PolyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256*, %"class.std::__1::vector"* readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  store %class.CBC_ReedSolomonGF256* %1, %class.CBC_ReedSolomonGF256** %4, align 8
  %5 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #10
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp eq i64 %12, 4
  %15 = inttoptr i64 %11 to i32*
  %16 = inttoptr i64 %9 to i32*
  br i1 %14, label %22, label %17

17:                                               ; preds = %3
  %18 = load i32, i32* %15, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = icmp ugt i64 %13, 1
  br i1 %21, label %25, label %33

22:                                               ; preds = %17, %3
  %23 = icmp eq %"class.std::__1::vector"* %5, %2
  br i1 %23, label %77, label %24

24:                                               ; preds = %22
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %5, i32* %15, i32* %16) #10
  br label %77

25:                                               ; preds = %20, %30
  %26 = phi i64 [ %31, %30 ], [ 1, %20 ]
  %27 = getelementptr inbounds i32, i32* %15, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = add nuw i64 %26, 1
  %32 = icmp eq i64 %31, %13
  br i1 %32, label %36, label %25

33:                                               ; preds = %25, %20
  %34 = phi i64 [ 1, %20 ], [ %26, %25 ]
  %35 = icmp eq i64 %13, %34
  br i1 %35, label %36, label %45

36:                                               ; preds = %30, %33
  %37 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %38 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %37, align 8
  %39 = icmp eq %class.CBC_ReedSolomonGF256Poly* %38, %0
  br i1 %39, label %77, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %38, i64 0, i32 1, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8
  %43 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %38, i64 0, i32 1, i32 0, i32 1
  %44 = load i32*, i32** %43, align 8
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %5, i32* %42, i32* %44) #10
  br label %77

45:                                               ; preds = %33
  %46 = sub i64 %13, %34
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %45
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %5, i64 %46) #10
  %49 = load i64, i64* %8, align 8
  %50 = load i64, i64* %10, align 8
  %51 = inttoptr i64 %50 to i32*
  br label %52

52:                                               ; preds = %45, %48
  %53 = phi i32* [ %51, %48 ], [ %15, %45 ]
  %54 = phi i64 [ %50, %48 ], [ %11, %45 ]
  %55 = phi i64 [ %49, %48 ], [ %9, %45 ]
  %56 = sub i64 %55, %54
  %57 = ashr exact i64 %56, 2
  %58 = icmp ult i64 %34, %57
  br i1 %58, label %59, label %77

59:                                               ; preds = %52
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  br label %61

61:                                               ; preds = %59, %61
  %62 = phi i32* [ %53, %59 ], [ %76, %61 ]
  %63 = phi i64 [ 0, %59 ], [ %70, %61 ]
  %64 = phi i64 [ %34, %59 ], [ %69, %61 ]
  %65 = getelementptr inbounds i32, i32* %62, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = load i32*, i32** %60, align 8
  %68 = getelementptr inbounds i32, i32* %67, i64 %63
  store i32 %66, i32* %68, align 4
  %69 = add nuw i64 %64, 1
  %70 = add i64 %63, 1
  %71 = load i64, i64* %8, align 8
  %72 = load i64, i64* %10, align 8
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 2
  %75 = icmp ult i64 %69, %74
  %76 = inttoptr i64 %72 to i32*
  br i1 %75, label %61, label %77

77:                                               ; preds = %61, %52, %40, %36, %24, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector"* @_ZNK24CBC_ReedSolomonGF256Poly15GetCoefficientsEv(%class.CBC_ReedSolomonGF256Poly* readnone) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  ret %"class.std::__1::vector"* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CBC_ReedSolomonGF256PolyD2Ev(%class.CBC_ReedSolomonGF256Poly* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK24CBC_ReedSolomonGF256Poly9GetDegreeEv(%class.CBC_ReedSolomonGF256Poly* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %3 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp ult i64 %9, 2147483648
  br i1 %10, label %12, label %11, !prof !2

11:                                               ; preds = %1
  tail call void @llvm.trap() #10
  unreachable

12:                                               ; preds = %1
  %13 = trunc i64 %9 to i32
  %14 = add nsw i32 %13, -1
  ret i32 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK24CBC_ReedSolomonGF256Poly6IsZeroEv(%class.CBC_ReedSolomonGF256Poly* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK24CBC_ReedSolomonGF256Poly15GetCoefficientsEi(%class.CBC_ReedSolomonGF256Poly* nocapture readonly, i32) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = xor i32 %1, -1
  %12 = sext i32 %11 to i64
  %13 = add nsw i64 %10, %12
  %14 = inttoptr i64 %8 to i32*
  %15 = getelementptr inbounds i32, i32* %14, i64 %13
  %16 = load i32, i32* %15, align 4
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.CBC_ReedSolomonGF256Poly* @_ZNK24CBC_ReedSolomonGF256Poly5CloneEv(%class.CBC_ReedSolomonGF256Poly* readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %3 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %2, align 8
  %4 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %5 = tail call i8* @_Znwm(i64 32) #11
  %6 = bitcast i8* %5 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %6, %class.CBC_ReedSolomonGF256* %3, %"class.std::__1::vector"* dereferenceable(24) %4) #10
  ret %class.CBC_ReedSolomonGF256Poly* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.CBC_ReedSolomonGF256Poly* @_ZN24CBC_ReedSolomonGF256Poly13AddOrSubtractEPKS_(%class.CBC_ReedSolomonGF256Poly* readonly, %class.CBC_ReedSolomonGF256Poly* readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  %10 = ptrtoint i32* %7 to i64
  br i1 %9, label %11, label %17

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 0, i32 0
  %13 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %12, align 8
  %14 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1
  %15 = tail call i8* @_Znwm(i64 32) #11
  %16 = bitcast i8* %15 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %16, %class.CBC_ReedSolomonGF256* %13, %"class.std::__1::vector"* dereferenceable(24) %14) #10
  br label %262

17:                                               ; preds = %2
  %18 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  %22 = ptrtoint i32* %19 to i64
  br i1 %21, label %23, label %29

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %25 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %24, align 8
  %26 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %27 = tail call i8* @_Znwm(i64 32) #11
  %28 = bitcast i8* %27 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %28, %class.CBC_ReedSolomonGF256* %25, %"class.std::__1::vector"* dereferenceable(24) %26) #10
  br label %262

29:                                               ; preds = %17
  %30 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #10
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #10
  %34 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %36, %10
  %38 = ashr exact i64 %37, 2
  %39 = icmp eq i64 %37, 0
  br i1 %39, label %61, label %40

40:                                               ; preds = %29
  %41 = icmp ugt i64 %38, 4611686018427387903
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %43) #12
  unreachable

44:                                               ; preds = %40
  %45 = tail call i8* @_Znwm(i64 %37) #11
  %46 = bitcast i8* %45 to i32*
  %47 = bitcast i32** %32 to i8**
  store i8* %45, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %45, i8** %48, align 8
  %49 = getelementptr inbounds i32, i32* %46, i64 %38
  store i32* %49, i32** %33, align 8
  %50 = bitcast i32** %32 to i64*
  %51 = ptrtoint i8* %45 to i64
  %52 = icmp sgt i64 %37, 0
  %53 = ptrtoint i32* %49 to i64
  br i1 %52, label %54, label %59

54:                                               ; preds = %44
  %55 = lshr exact i64 %37, 2
  %56 = bitcast i32* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %45, i8* align 4 %56, i64 %37, i1 false) #10
  %57 = getelementptr inbounds i32, i32* %46, i64 %55
  %58 = ptrtoint i32* %57 to i64
  br label %59

59:                                               ; preds = %54, %44
  %60 = phi i64 [ %58, %54 ], [ %51, %44 ]
  store i64 %60, i64* %50, align 8
  br label %61

61:                                               ; preds = %29, %59
  %62 = phi i64 [ 0, %29 ], [ %51, %59 ]
  %63 = phi i64 [ 0, %29 ], [ %53, %59 ]
  %64 = phi i64 [ 0, %29 ], [ %60, %59 ]
  %65 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #10
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #10
  %69 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 1
  %70 = bitcast i32** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %71, %22
  %73 = ashr exact i64 %72, 2
  %74 = icmp eq i64 %72, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %61
  %76 = bitcast i32** %67 to i64*
  br label %98

77:                                               ; preds = %61
  %78 = icmp ugt i64 %73, 4611686018427387903
  br i1 %78, label %79, label %81

79:                                               ; preds = %77
  %80 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %80) #12
  unreachable

81:                                               ; preds = %77
  %82 = tail call i8* @_Znwm(i64 %72) #11
  %83 = bitcast i8* %82 to i32*
  %84 = bitcast i32** %67 to i8**
  store i8* %82, i8** %84, align 8
  %85 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %82, i8** %85, align 8
  %86 = getelementptr inbounds i32, i32* %83, i64 %73
  store i32* %86, i32** %68, align 8
  %87 = bitcast i32** %67 to i64*
  %88 = ptrtoint i8* %82 to i64
  %89 = icmp sgt i64 %72, 0
  %90 = ptrtoint i32* %86 to i64
  br i1 %89, label %91, label %96

91:                                               ; preds = %81
  %92 = lshr exact i64 %72, 2
  %93 = bitcast i32* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %82, i8* align 4 %93, i64 %72, i1 false) #10
  %94 = getelementptr inbounds i32, i32* %83, i64 %92
  %95 = ptrtoint i32* %94 to i64
  br label %96

96:                                               ; preds = %91, %81
  %97 = phi i64 [ %95, %91 ], [ %88, %81 ]
  store i64 %97, i64* %87, align 8
  br label %98

98:                                               ; preds = %75, %96
  %99 = phi i64* [ %76, %75 ], [ %87, %96 ]
  %100 = phi i32* [ null, %75 ], [ %83, %96 ]
  %101 = phi i64 [ 0, %75 ], [ %88, %96 ]
  %102 = phi i64 [ 0, %75 ], [ %90, %96 ]
  %103 = phi i64 [ 0, %75 ], [ %97, %96 ]
  %104 = bitcast i32** %32 to i64*
  %105 = sub i64 %64, %62
  %106 = bitcast %"class.std::__1::vector"* %4 to i64*
  %107 = sub i64 %103, %101
  %108 = icmp ugt i64 %105, %107
  br i1 %108, label %111, label %109

109:                                              ; preds = %98
  %110 = sub i64 %103, %101
  br label %116

111:                                              ; preds = %98
  %112 = bitcast %"class.std::__1::vector"* %3 to i64*
  store i64 %101, i64* %112, align 8
  store i64 %62, i64* %106, align 8
  store i64 %103, i64* %104, align 8
  store i64 %64, i64* %99, align 8
  %113 = bitcast i32** %33 to i64*
  %114 = bitcast i32** %68 to i64*
  store i64 %102, i64* %113, align 8
  store i64 %63, i64* %114, align 8
  %115 = inttoptr i64 %62 to i32*
  br label %116

116:                                              ; preds = %109, %111
  %117 = phi i64 [ %110, %109 ], [ %105, %111 ]
  %118 = phi i32* [ %100, %109 ], [ %115, %111 ]
  %119 = phi i64 [ %101, %109 ], [ %62, %111 ]
  %120 = phi i64 [ %62, %109 ], [ %101, %111 ]
  %121 = phi i64 [ %64, %109 ], [ %103, %111 ]
  %122 = phi i64 [ %103, %109 ], [ %64, %111 ]
  %123 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %123) #10
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %125 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %126 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %127 = ashr exact i64 %117, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 0, i64 24, i1 false) #10
  %128 = icmp eq i64 %117, 0
  br i1 %128, label %147, label %129

129:                                              ; preds = %116
  %130 = icmp ugt i64 %127, 4611686018427387903
  br i1 %130, label %131, label %133

131:                                              ; preds = %129
  %132 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %132) #12
  unreachable

133:                                              ; preds = %129
  %134 = tail call i8* @_Znwm(i64 %117) #11
  %135 = bitcast i8* %134 to i32*
  %136 = bitcast %"class.std::__1::vector"* %5 to i8**
  store i8* %134, i8** %136, align 8
  %137 = getelementptr inbounds i32, i32* %135, i64 %127
  store i32* %137, i32** %126, align 8
  %138 = bitcast i32** %125 to i64*
  %139 = ptrtoint i8* %134 to i64
  %140 = add nsw i64 %127, -1
  %141 = getelementptr i32, i32* %135, i64 %140
  %142 = ptrtoint i32* %141 to i64
  %143 = sub i64 4, %139
  %144 = add i64 %143, %142
  %145 = and i64 %144, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %134, i8 0, i64 %145, i1 false) #10
  %146 = ptrtoint i32* %137 to i64
  store i64 %146, i64* %138, align 8
  br label %147

147:                                              ; preds = %116, %133
  %148 = phi i32* [ null, %116 ], [ %135, %133 ]
  %149 = sub i64 %121, %120
  %150 = ashr exact i64 %149, 2
  %151 = sub nsw i64 %127, %150
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %183, label %153

153:                                              ; preds = %147
  %154 = load i32, i32* %118, align 4
  store i32 %154, i32* %148, align 4
  %155 = icmp eq i64 %151, 1
  br i1 %155, label %179, label %156

156:                                              ; preds = %153
  %157 = xor i64 %150, -1
  %158 = add nsw i64 %127, %157
  %159 = add nsw i64 %127, -2
  %160 = sub nsw i64 %159, %150
  %161 = and i64 %158, 3
  %162 = icmp ult i64 %160, 3
  br i1 %162, label %165, label %163

163:                                              ; preds = %156
  %164 = sub nsw i64 %158, %161
  br label %190

165:                                              ; preds = %190, %156
  %166 = phi i64 [ 1, %156 ], [ %216, %190 ]
  %167 = icmp eq i64 %161, 0
  br i1 %167, label %179, label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %176, %168 ], [ %166, %165 ]
  %170 = phi i64 [ %177, %168 ], [ %161, %165 ]
  %171 = load i32*, i32** %66, align 8
  %172 = load i32*, i32** %124, align 8
  %173 = getelementptr inbounds i32, i32* %171, i64 %169
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds i32, i32* %172, i64 %169
  store i32 %174, i32* %175, align 4
  %176 = add nuw i64 %169, 1
  %177 = add i64 %170, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %168, !llvm.loop !3

179:                                              ; preds = %165, %168, %153
  %180 = load i64, i64* %99, align 8
  %181 = load i64, i64* %106, align 8
  %182 = inttoptr i64 %181 to i32*
  br label %183

183:                                              ; preds = %179, %147
  %184 = phi i32* [ %182, %179 ], [ %118, %147 ]
  %185 = phi i64 [ %181, %179 ], [ %119, %147 ]
  %186 = phi i64 [ %180, %179 ], [ %122, %147 ]
  %187 = sub i64 %186, %185
  %188 = ashr exact i64 %187, 2
  %189 = icmp ult i64 %151, %188
  br i1 %189, label %243, label %219

190:                                              ; preds = %190, %163
  %191 = phi i64 [ 1, %163 ], [ %216, %190 ]
  %192 = phi i64 [ %164, %163 ], [ %217, %190 ]
  %193 = load i32*, i32** %66, align 8
  %194 = load i32*, i32** %124, align 8
  %195 = getelementptr inbounds i32, i32* %193, i64 %191
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds i32, i32* %194, i64 %191
  store i32 %196, i32* %197, align 4
  %198 = add nuw nsw i64 %191, 1
  %199 = load i32*, i32** %66, align 8
  %200 = load i32*, i32** %124, align 8
  %201 = getelementptr inbounds i32, i32* %199, i64 %198
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds i32, i32* %200, i64 %198
  store i32 %202, i32* %203, align 4
  %204 = add nuw nsw i64 %191, 2
  %205 = load i32*, i32** %66, align 8
  %206 = load i32*, i32** %124, align 8
  %207 = getelementptr inbounds i32, i32* %205, i64 %204
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds i32, i32* %206, i64 %204
  store i32 %208, i32* %209, align 4
  %210 = add nuw i64 %191, 3
  %211 = load i32*, i32** %66, align 8
  %212 = load i32*, i32** %124, align 8
  %213 = getelementptr inbounds i32, i32* %211, i64 %210
  %214 = load i32, i32* %213, align 4
  %215 = getelementptr inbounds i32, i32* %212, i64 %210
  store i32 %214, i32* %215, align 4
  %216 = add nuw i64 %191, 4
  %217 = add i64 %192, -4
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %165, label %190

219:                                              ; preds = %243, %183
  %220 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %221 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %220, align 8
  %222 = tail call i8* @_Znwm(i64 32) #11
  %223 = bitcast i8* %222 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %223, %class.CBC_ReedSolomonGF256* %221, %"class.std::__1::vector"* nonnull dereferenceable(24) %5) #10
  %224 = load i32*, i32** %124, align 8
  %225 = icmp eq i32* %224, null
  br i1 %225, label %230, label %226

226:                                              ; preds = %219
  %227 = ptrtoint i32* %224 to i64
  %228 = bitcast i32** %125 to i64*
  store i64 %227, i64* %228, align 8
  %229 = bitcast i32* %224 to i8*
  call void @_ZdlPv(i8* %229) #11
  br label %230

230:                                              ; preds = %219, %226
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %123) #10
  %231 = load i32*, i32** %66, align 8
  %232 = icmp eq i32* %231, null
  br i1 %232, label %236, label %233

233:                                              ; preds = %230
  %234 = ptrtoint i32* %231 to i64
  store i64 %234, i64* %99, align 8
  %235 = bitcast i32* %231 to i8*
  call void @_ZdlPv(i8* %235) #11
  br label %236

236:                                              ; preds = %230, %233
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #10
  %237 = load i32*, i32** %31, align 8
  %238 = icmp eq i32* %237, null
  br i1 %238, label %242, label %239

239:                                              ; preds = %236
  %240 = ptrtoint i32* %237 to i64
  store i64 %240, i64* %104, align 8
  %241 = bitcast i32* %237 to i8*
  call void @_ZdlPv(i8* %241) #11
  br label %242

242:                                              ; preds = %236, %239
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #10
  br label %262

243:                                              ; preds = %183, %243
  %244 = phi i32* [ %261, %243 ], [ %184, %183 ]
  %245 = phi i64 [ %255, %243 ], [ %151, %183 ]
  %246 = sub nuw i64 %245, %151
  %247 = load i32*, i32** %31, align 8
  %248 = getelementptr inbounds i32, i32* %247, i64 %246
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds i32, i32* %244, i64 %245
  %251 = load i32, i32* %250, align 4
  %252 = tail call i32 @_ZN20CBC_ReedSolomonGF25613AddOrSubtractEii(i32 %249, i32 %251) #10
  %253 = load i32*, i32** %124, align 8
  %254 = getelementptr inbounds i32, i32* %253, i64 %245
  store i32 %252, i32* %254, align 4
  %255 = add nuw i64 %245, 1
  %256 = load i64, i64* %99, align 8
  %257 = load i64, i64* %106, align 8
  %258 = sub i64 %256, %257
  %259 = ashr exact i64 %258, 2
  %260 = icmp ult i64 %255, %259
  %261 = inttoptr i64 %257 to i32*
  br i1 %260, label %243, label %219

262:                                              ; preds = %242, %23, %11
  %263 = phi %class.CBC_ReedSolomonGF256Poly* [ %16, %11 ], [ %28, %23 ], [ %223, %242 ]
  ret %class.CBC_ReedSolomonGF256Poly* %263
}

declare i32 @_ZN20CBC_ReedSolomonGF25613AddOrSubtractEii(i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.CBC_ReedSolomonGF256Poly* @_ZN24CBC_ReedSolomonGF256Poly8MultiplyEPKS_(%class.CBC_ReedSolomonGF256Poly* nocapture readonly, %class.CBC_ReedSolomonGF256Poly* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  %8 = ptrtoint i32* %5 to i64
  br i1 %7, label %14, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %24

14:                                               ; preds = %9, %2
  %15 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %16 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %15, align 8
  %17 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %17, align 8
  %19 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %18, i64 0, i32 0, i32 0
  %20 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %19, align 8
  %21 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %18, i64 0, i32 1
  %22 = tail call i8* @_Znwm(i64 32) #11
  %23 = bitcast i8* %22 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %23, %class.CBC_ReedSolomonGF256* %20, %"class.std::__1::vector"* dereferenceable(24) %21) #10
  br label %105

24:                                               ; preds = %9
  %25 = ptrtoint i32* %11 to i64
  %26 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %28, %8
  %30 = ashr exact i64 %29, 2
  %31 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 1
  %32 = bitcast i32** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %33, %25
  %35 = ashr exact i64 %34, 2
  %36 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #10
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %40 = add nsw i64 %35, %30
  %41 = add nsw i64 %40, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false) #10
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %62, label %43

43:                                               ; preds = %24
  %44 = icmp ugt i64 %41, 4611686018427387903
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %46) #12
  unreachable

47:                                               ; preds = %43
  %48 = shl i64 %41, 2
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to i32*
  %51 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %49, i8** %51, align 8
  %52 = getelementptr inbounds i32, i32* %50, i64 %41
  store i32* %52, i32** %39, align 8
  %53 = bitcast i32** %38 to i64*
  %54 = ptrtoint i8* %49 to i64
  %55 = add nsw i64 %40, -2
  %56 = getelementptr i32, i32* %50, i64 %55
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 4, %54
  %59 = add i64 %58, %57
  %60 = and i64 %59, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 %60, i1 false) #10
  %61 = ptrtoint i32* %52 to i64
  store i64 %61, i64* %53, align 8
  br label %62

62:                                               ; preds = %24, %47
  %63 = icmp eq i64 %29, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %62
  %65 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 0
  %66 = icmp eq i64 %34, 0
  %67 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %68 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 0
  br label %81

69:                                               ; preds = %86, %62
  %70 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %71 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %70, align 8
  %72 = tail call i8* @_Znwm(i64 32) #11
  %73 = bitcast i8* %72 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %73, %class.CBC_ReedSolomonGF256* %71, %"class.std::__1::vector"* nonnull dereferenceable(24) %3) #10
  %74 = load i32*, i32** %37, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %69
  %77 = ptrtoint i32* %74 to i64
  %78 = bitcast i32** %38 to i64*
  store i64 %77, i64* %78, align 8
  %79 = bitcast i32* %74 to i8*
  call void @_ZdlPv(i8* %79) #11
  br label %80

80:                                               ; preds = %69, %76
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  br label %105

81:                                               ; preds = %89, %64
  %82 = phi i32* [ %5, %64 ], [ %90, %89 ]
  %83 = phi i64 [ 0, %64 ], [ %87, %89 ]
  %84 = getelementptr inbounds i32, i32* %82, i64 %83
  %85 = load i32, i32* %84, align 4
  br i1 %66, label %86, label %91

86:                                               ; preds = %91, %81
  %87 = add nuw i64 %83, 1
  %88 = icmp ult i64 %87, %30
  br i1 %88, label %89, label %69

89:                                               ; preds = %86
  %90 = load i32*, i32** %65, align 8
  br label %81

91:                                               ; preds = %81, %91
  %92 = phi i64 [ %103, %91 ], [ 0, %81 ]
  %93 = add i64 %92, %83
  %94 = load i32*, i32** %37, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 %93
  %96 = load i32, i32* %95, align 4
  %97 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %67, align 8
  %98 = load i32*, i32** %68, align 8
  %99 = getelementptr inbounds i32, i32* %98, i64 %92
  %100 = load i32, i32* %99, align 4
  %101 = tail call i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256* %97, i32 %85, i32 %100) #10
  %102 = tail call i32 @_ZN20CBC_ReedSolomonGF25613AddOrSubtractEii(i32 %96, i32 %101) #10
  store i32 %102, i32* %95, align 4
  %103 = add nuw i64 %92, 1
  %104 = icmp ult i64 %103, %35
  br i1 %104, label %91, label %86

105:                                              ; preds = %80, %14
  %106 = phi %class.CBC_ReedSolomonGF256Poly* [ %23, %14 ], [ %73, %80 ]
  ret %class.CBC_ReedSolomonGF256Poly* %106
}

declare i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %class.CBC_ReedSolomonGF256Poly* @_ZNK24CBC_ReedSolomonGF256Poly18MultiplyByMonomialEii(%class.CBC_ReedSolomonGF256Poly* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp slt i32 %1, 0
  br i1 %5, label %90, label %6

6:                                                ; preds = %3
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %10 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %9, align 8
  %11 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %11, align 8
  %13 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %12, i64 0, i32 0, i32 0
  %14 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %13, align 8
  %15 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %12, i64 0, i32 1
  %16 = tail call i8* @_Znwm(i64 32) #11
  %17 = bitcast i8* %16 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %17, %class.CBC_ReedSolomonGF256* %14, %"class.std::__1::vector"* dereferenceable(24) %15) #10
  %18 = ptrtoint i8* %16 to i64
  br label %90

19:                                               ; preds = %6
  %20 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %21 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = ashr exact i64 %26, 2
  %28 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #10
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %32 = sext i32 %1 to i64
  %33 = add nsw i64 %27, %32
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 24, i1 false) #10
  %34 = icmp eq i64 %33, 0
  %35 = inttoptr i64 %25 to i32*
  br i1 %34, label %55, label %36

36:                                               ; preds = %19
  %37 = icmp ugt i64 %33, 4611686018427387903
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %39) #12
  unreachable

40:                                               ; preds = %36
  %41 = shl i64 %33, 2
  %42 = tail call i8* @_Znwm(i64 %41) #11
  %43 = bitcast i8* %42 to i32*
  %44 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %42, i8** %44, align 8
  %45 = getelementptr inbounds i32, i32* %43, i64 %33
  store i32* %45, i32** %31, align 8
  %46 = bitcast i32** %30 to i64*
  %47 = ptrtoint i8* %42 to i64
  %48 = add nsw i64 %33, -1
  %49 = getelementptr i32, i32* %43, i64 %48
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 4, %47
  %52 = add i64 %51, %50
  %53 = and i64 %52, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %42, i8 0, i64 %53, i1 false) #10
  %54 = ptrtoint i32* %45 to i64
  store i64 %54, i64* %46, align 8
  br label %55

55:                                               ; preds = %19, %40
  %56 = phi i32* [ null, %19 ], [ %43, %40 ]
  %57 = icmp eq i64 %26, 0
  %58 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %59 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %58, align 8
  br i1 %57, label %66, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %20, i64 0, i32 0, i32 0
  %62 = load i32, i32* %35, align 4
  %63 = tail call i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256* %59, i32 %62, i32 %2) #10
  store i32 %63, i32* %56, align 4
  %64 = icmp ugt i64 %27, 1
  %65 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %58, align 8
  br i1 %64, label %78, label %66

66:                                               ; preds = %78, %60, %55
  %67 = phi %class.CBC_ReedSolomonGF256* [ %59, %55 ], [ %65, %60 ], [ %89, %78 ]
  %68 = tail call i8* @_Znwm(i64 32) #11
  %69 = bitcast i8* %68 to %class.CBC_ReedSolomonGF256Poly*
  call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %69, %class.CBC_ReedSolomonGF256* %67, %"class.std::__1::vector"* nonnull dereferenceable(24) %4) #10
  %70 = ptrtoint i8* %68 to i64
  %71 = load i32*, i32** %29, align 8
  %72 = icmp eq i32* %71, null
  br i1 %72, label %77, label %73

73:                                               ; preds = %66
  %74 = ptrtoint i32* %71 to i64
  %75 = bitcast i32** %30 to i64*
  store i64 %74, i64* %75, align 8
  %76 = bitcast i32* %71 to i8*
  call void @_ZdlPv(i8* %76) #11
  br label %77

77:                                               ; preds = %66, %73
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #10
  br label %90

78:                                               ; preds = %60, %78
  %79 = phi %class.CBC_ReedSolomonGF256* [ %89, %78 ], [ %65, %60 ]
  %80 = phi i64 [ %87, %78 ], [ 1, %60 ]
  %81 = load i32*, i32** %61, align 8
  %82 = load i32*, i32** %29, align 8
  %83 = getelementptr inbounds i32, i32* %81, i64 %80
  %84 = load i32, i32* %83, align 4
  %85 = tail call i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256* %79, i32 %84, i32 %2) #10
  %86 = getelementptr inbounds i32, i32* %82, i64 %80
  store i32 %85, i32* %86, align 4
  %87 = add nuw i64 %80, 1
  %88 = icmp ult i64 %87, %27
  %89 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %58, align 8
  br i1 %88, label %78, label %66

90:                                               ; preds = %3, %77, %8
  %91 = phi i64 [ %18, %8 ], [ %70, %77 ], [ 0, %3 ]
  %92 = inttoptr i64 %91 to %class.CBC_ReedSolomonGF256Poly*
  ret %class.CBC_ReedSolomonGF256Poly* %92
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CBC_ReedSolomonGF256Poly* @_ZN24CBC_ReedSolomonGF256Poly6DivideEPKS_(%class.CBC_ReedSolomonGF256Poly* readonly, %class.CBC_ReedSolomonGF256Poly* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %185, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 0, i32 0
  %9 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %8, align 8
  %10 = getelementptr inbounds %class.CBC_ReedSolomonGF256, %class.CBC_ReedSolomonGF256* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CBC_ReedSolomonGF256Poly*, %class.CBC_ReedSolomonGF256Poly** %10, align 8
  %12 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %11, i64 0, i32 0, i32 0
  %13 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %12, align 8
  %14 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %11, i64 0, i32 1
  %15 = tail call i8* @_Znwm(i64 32) #11
  %16 = bitcast i8* %15 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %16, %class.CBC_ReedSolomonGF256* %13, %"class.std::__1::vector"* dereferenceable(24) %14) #10
  %17 = ptrtoint i8* %15 to i64
  %18 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %8, align 8
  %19 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %0, i64 0, i32 1
  %20 = tail call i8* @_Znwm(i64 32) #11
  %21 = bitcast i8* %20 to %class.CBC_ReedSolomonGF256Poly*
  tail call void @_ZN24CBC_ReedSolomonGF256PolyC2EP20CBC_ReedSolomonGF256RKNSt3__16vectorIiNS2_9allocatorIiEEEE(%class.CBC_ReedSolomonGF256Poly* nonnull %21, %class.CBC_ReedSolomonGF256* %18, %"class.std::__1::vector"* dereferenceable(24) %19) #10
  %22 = ptrtoint i8* %20 to i64
  %23 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1
  %24 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %1, i64 0, i32 1, i32 0, i32 1
  %25 = bitcast i32** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::vector"* %23 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %26, %28
  %30 = ashr exact i64 %29, 2
  %31 = icmp ult i64 %30, 2147483648
  br i1 %31, label %33, label %32, !prof !2

32:                                               ; preds = %7
  tail call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %7
  %34 = shl i64 %29, 30
  %35 = sub i64 0, %34
  %36 = ashr exact i64 %35, 32
  %37 = add nsw i64 %36, %30
  %38 = inttoptr i64 %28 to i32*
  %39 = getelementptr inbounds i32, i32* %38, i64 %37
  %40 = load i32, i32* %39, align 4
  %41 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %8, align 8
  %42 = tail call i64 @_ZN20CBC_ReedSolomonGF2567InverseEi(%class.CBC_ReedSolomonGF256* %41, i32 %40) #10
  %43 = trunc i64 %42 to i8
  %44 = lshr i64 %42, 32
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i8 %43, 0
  br i1 %46, label %155, label %47

47:                                               ; preds = %33
  %48 = icmp eq i8 %43, 1
  br label %49

49:                                               ; preds = %47, %148
  %50 = phi i64 [ %137, %148 ], [ %17, %47 ]
  %51 = phi i64 [ %138, %148 ], [ %22, %47 ]
  %52 = inttoptr i64 %51 to %class.CBC_ReedSolomonGF256Poly*
  %53 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %52, i64 0, i32 1
  %54 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %52, i64 0, i32 1, i32 0, i32 1
  %55 = bitcast i32** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector"* %53 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = ashr exact i64 %59, 2
  %61 = icmp ult i64 %60, 2147483648
  %62 = inttoptr i64 %58 to i32*
  br i1 %61, label %64, label %63, !prof !2

63:                                               ; preds = %49
  tail call void @llvm.trap() #10
  unreachable

64:                                               ; preds = %49
  %65 = trunc i64 %60 to i32
  %66 = load i64, i64* %25, align 8
  %67 = load i64, i64* %27, align 8
  %68 = sub i64 %66, %67
  %69 = ashr exact i64 %68, 2
  %70 = icmp ult i64 %69, 2147483648
  br i1 %70, label %72, label %71, !prof !2

71:                                               ; preds = %64
  tail call void @llvm.trap() #10
  unreachable

72:                                               ; preds = %64
  %73 = trunc i64 %69 to i32
  %74 = icmp slt i32 %65, %73
  br i1 %74, label %169, label %75

75:                                               ; preds = %72
  %76 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %52, i64 0, i32 1, i32 0, i32 0
  %77 = load i32, i32* %62, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %169, label %79

79:                                               ; preds = %75
  %80 = sub nsw i32 %65, %73
  br i1 %48, label %82, label %81, !prof !2

81:                                               ; preds = %79
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !5
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !srcloc !6
  unreachable

82:                                               ; preds = %79
  %83 = shl i64 %59, 30
  %84 = sub i64 0, %83
  %85 = ashr exact i64 %84, 32
  %86 = add nsw i64 %85, %60
  %87 = getelementptr inbounds i32, i32* %62, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %8, align 8
  %90 = tail call i32 @_ZN20CBC_ReedSolomonGF2568MultiplyEii(%class.CBC_ReedSolomonGF256* %89, i32 %88, i32 %45) #10
  %91 = tail call %class.CBC_ReedSolomonGF256Poly* @_ZNK24CBC_ReedSolomonGF256Poly18MultiplyByMonomialEii(%class.CBC_ReedSolomonGF256Poly* %1, i32 %80, i32 %90)
  %92 = icmp eq %class.CBC_ReedSolomonGF256Poly* %91, null
  br i1 %92, label %151, label %93

93:                                               ; preds = %82
  %94 = load %class.CBC_ReedSolomonGF256*, %class.CBC_ReedSolomonGF256** %8, align 8
  %95 = tail call %class.CBC_ReedSolomonGF256Poly* @_ZN20CBC_ReedSolomonGF25613BuildMonomialEii(%class.CBC_ReedSolomonGF256* %94, i32 %80, i32 %90) #10
  %96 = icmp eq %class.CBC_ReedSolomonGF256Poly* %95, null
  br i1 %96, label %136, label %97

97:                                               ; preds = %93
  %98 = inttoptr i64 %50 to %class.CBC_ReedSolomonGF256Poly*
  %99 = tail call %class.CBC_ReedSolomonGF256Poly* @_ZN24CBC_ReedSolomonGF256Poly13AddOrSubtractEPKS_(%class.CBC_ReedSolomonGF256Poly* %98, %class.CBC_ReedSolomonGF256Poly* nonnull %95)
  %100 = ptrtoint %class.CBC_ReedSolomonGF256Poly* %99 to i64
  %101 = icmp eq i64 %50, 0
  br i1 %101, label %113, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %98, i64 0, i32 1, i32 0, i32 0
  %104 = load i32*, i32** %103, align 8
  %105 = icmp eq i32* %104, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %102
  %107 = ptrtoint i32* %104 to i64
  %108 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %98, i64 0, i32 1, i32 0, i32 1
  %109 = bitcast i32** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast i32* %104 to i8*
  tail call void @_ZdlPv(i8* %110) #11
  br label %111

111:                                              ; preds = %106, %102
  %112 = inttoptr i64 %50 to i8*
  tail call void @_ZdlPv(i8* %112) #11
  br label %113

113:                                              ; preds = %97, %111
  %114 = tail call %class.CBC_ReedSolomonGF256Poly* @_ZN24CBC_ReedSolomonGF256Poly13AddOrSubtractEPKS_(%class.CBC_ReedSolomonGF256Poly* %52, %class.CBC_ReedSolomonGF256Poly* nonnull %91)
  %115 = ptrtoint %class.CBC_ReedSolomonGF256Poly* %114 to i64
  %116 = icmp eq i64 %51, 0
  br i1 %116, label %125, label %117

117:                                              ; preds = %113
  %118 = load i32*, i32** %76, align 8
  %119 = icmp eq i32* %118, null
  br i1 %119, label %123, label %120

120:                                              ; preds = %117
  %121 = ptrtoint i32* %118 to i64
  store i64 %121, i64* %55, align 8
  %122 = bitcast i32* %118 to i8*
  tail call void @_ZdlPv(i8* %122) #11
  br label %123

123:                                              ; preds = %120, %117
  %124 = inttoptr i64 %51 to i8*
  tail call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %113, %123
  %126 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %95, i64 0, i32 1, i32 0, i32 0
  %127 = load i32*, i32** %126, align 8
  %128 = icmp eq i32* %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %125
  %130 = ptrtoint i32* %127 to i64
  %131 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %95, i64 0, i32 1, i32 0, i32 1
  %132 = bitcast i32** %131 to i64*
  store i64 %130, i64* %132, align 8
  %133 = bitcast i32* %127 to i8*
  tail call void @_ZdlPv(i8* %133) #11
  br label %134

134:                                              ; preds = %129, %125
  %135 = bitcast %class.CBC_ReedSolomonGF256Poly* %95 to i8*
  tail call void @_ZdlPv(i8* %135) #11
  br label %136

136:                                              ; preds = %93, %134
  %137 = phi i64 [ %50, %93 ], [ %100, %134 ]
  %138 = phi i64 [ %51, %93 ], [ %115, %134 ]
  %139 = phi i32 [ 1, %93 ], [ 0, %134 ]
  %140 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %91, i64 0, i32 1, i32 0, i32 0
  %141 = load i32*, i32** %140, align 8
  %142 = icmp eq i32* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %136
  %144 = ptrtoint i32* %141 to i64
  %145 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %91, i64 0, i32 1, i32 0, i32 1
  %146 = bitcast i32** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i32* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #11
  br label %148

148:                                              ; preds = %136, %143
  %149 = bitcast %class.CBC_ReedSolomonGF256Poly* %91 to i8*
  tail call void @_ZdlPv(i8* %149) #11
  %150 = icmp eq i32 %139, 0
  br i1 %150, label %49, label %151

151:                                              ; preds = %82, %148
  %152 = phi i64 [ %137, %148 ], [ %50, %82 ]
  %153 = phi i64 [ %138, %148 ], [ %51, %82 ]
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %169, label %155

155:                                              ; preds = %33, %151
  %156 = phi i64 [ %153, %151 ], [ %22, %33 ]
  %157 = phi i64 [ %152, %151 ], [ %17, %33 ]
  %158 = inttoptr i64 %156 to %class.CBC_ReedSolomonGF256Poly*
  %159 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %158, i64 0, i32 1, i32 0, i32 0
  %160 = load i32*, i32** %159, align 8
  %161 = icmp eq i32* %160, null
  br i1 %161, label %167, label %162

162:                                              ; preds = %155
  %163 = ptrtoint i32* %160 to i64
  %164 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %158, i64 0, i32 1, i32 0, i32 1
  %165 = bitcast i32** %164 to i64*
  store i64 %163, i64* %165, align 8
  %166 = bitcast i32* %160 to i8*
  tail call void @_ZdlPv(i8* %166) #11
  br label %167

167:                                              ; preds = %162, %155
  %168 = inttoptr i64 %156 to i8*
  tail call void @_ZdlPv(i8* %168) #11
  br label %169

169:                                              ; preds = %72, %75, %167, %151
  %170 = phi i64 [ 0, %151 ], [ 0, %167 ], [ %51, %75 ], [ %51, %72 ]
  %171 = phi i64 [ %152, %151 ], [ %157, %167 ], [ %50, %75 ], [ %50, %72 ]
  %172 = inttoptr i64 %171 to %class.CBC_ReedSolomonGF256Poly*
  %173 = icmp eq i64 %171, 0
  br i1 %173, label %185, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %172, i64 0, i32 1, i32 0, i32 0
  %176 = load i32*, i32** %175, align 8
  %177 = icmp eq i32* %176, null
  br i1 %177, label %183, label %178

178:                                              ; preds = %174
  %179 = ptrtoint i32* %176 to i64
  %180 = getelementptr inbounds %class.CBC_ReedSolomonGF256Poly, %class.CBC_ReedSolomonGF256Poly* %172, i64 0, i32 1, i32 0, i32 1
  %181 = bitcast i32** %180 to i64*
  store i64 %179, i64* %181, align 8
  %182 = bitcast i32* %176 to i8*
  tail call void @_ZdlPv(i8* %182) #11
  br label %183

183:                                              ; preds = %178, %174
  %184 = inttoptr i64 %171 to i8*
  tail call void @_ZdlPv(i8* %184) #11
  br label %185

185:                                              ; preds = %183, %169, %2
  %186 = phi i64 [ 0, %2 ], [ %170, %169 ], [ %170, %183 ]
  %187 = inttoptr i64 %186 to %class.CBC_ReedSolomonGF256Poly*
  ret %class.CBC_ReedSolomonGF256Poly* %187
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZN20CBC_ReedSolomonGF2567InverseEi(%class.CBC_ReedSolomonGF256*, i32) local_unnamed_addr #4

declare %class.CBC_ReedSolomonGF256Poly* @_ZN20CBC_ReedSolomonGF25613BuildMonomialEii(%class.CBC_ReedSolomonGF256*, i32, i32) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #10
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #10
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #11
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #10
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #12
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #12
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #11
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #10
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{i32 -2143941188}
!6 = !{i32 -2143941167}
