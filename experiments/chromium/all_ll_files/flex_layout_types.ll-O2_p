; ModuleID = '../../ui/views/layout/flex_layout_types.cc'
source_filename = "../../ui/views/layout/flex_layout_types.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.views::FlexSpecification" = type <{ %"class.base::RepeatingCallback", i32, i32, i32, [4 x i8] }>
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.36", i8, [3 x i8], %"class.absl::optional", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.43", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.61", %"class.absl::optional.67", i8, [7 x i8], %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.78", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.89", i8, i8, [3 x i8], %"class.std::__1::vector.94", %"class.std::__1::unique_ptr.101", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.107", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.120", %"class.base::ObserverList.126", i32, [4 x i8] }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.2" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.5", %"class.std::__1::vector.12", %"class.ui::EventHandler"* }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.7" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.19", %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.27" }
%"class.std::__1::map.27" = type { %"class.std::__1::__tree.28" }
%"class.std::__1::__tree.28" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.views::View"** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.std::__1::vector.36"* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.51", %"struct.std::__1::atomic.51", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.49, %class.SkTDArray.50, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.49 = type { i8*, i32, i32 }
%class.SkTDArray.50 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.56 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.51" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.56 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.57", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.57" = type { %"struct.std::__1::__atomic_base.58" }
%"struct.std::__1::__atomic_base.58" = type { %"struct.std::__1::__cxx_atomic_impl.59" }
%"struct.std::__1::__cxx_atomic_impl.59" = type { %"struct.std::__1::__cxx_atomic_base_impl.60" }
%"struct.std::__1::__cxx_atomic_base_impl.60" = type { i8 }
%"struct.std::__1::atomic.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__cxx_atomic_impl.54" }
%"struct.std::__1::__cxx_atomic_impl.54" = type { %"struct.std::__1::__cxx_atomic_base_impl.55" }
%"struct.std::__1::__cxx_atomic_base_impl.55" = type { i8 }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.67" = type { %"class.absl::optional_internal::optional_data.68" }
%"class.absl::optional_internal::optional_data.68" = type { %"class.absl::optional_internal::optional_data_base.69" }
%"class.absl::optional_internal::optional_data_base.69" = type { %"class.absl::optional_internal::optional_data_dtor_base.70" }
%"class.absl::optional_internal::optional_data_dtor_base.70" = type { i8, %union.anon.71 }
%union.anon.71 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.views::Border"* }
%"class.views::Border" = type opaque
%"class.ui::PaintCache" = type <{ %class.sk_sp.84, float, [4 x i8] }>
%class.sk_sp.84 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.85", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { i8* }
%"class.ui::NativeTheme" = type opaque
%"class.absl::optional.89" = type { %"class.absl::optional_internal::optional_data.90" }
%"class.absl::optional_internal::optional_data.90" = type { %"class.absl::optional_internal::optional_data_base.91" }
%"class.absl::optional_internal::optional_data_base.91" = type { %"class.absl::optional_internal::optional_data_dtor_base.92" }
%"class.absl::optional_internal::optional_data_dtor_base.92" = type { i8, %union.anon.93 }
%union.anon.93 = type { i8 }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.std::__1::vector.110"* }
%"class.std::__1::vector.110" = type opaque
%"class.views::ContextMenuController" = type opaque
%"class.views::DragController" = type opaque
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.126" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.127", i64, i32, [4 x i8] }>
%"class.base::LinkedList.127" = type { %"class.base::LinkNode.128" }
%"class.base::LinkNode.128" = type { %"class.base::internal::LinkNodeBase" }
%"class.views::SizeBounds" = type { %"class.views::SizeBound", %"class.views::SizeBound" }
%"class.views::SizeBound" = type { %"class.absl::optional.130" }
%"class.absl::optional.130" = type { %"class.absl::optional_internal::optional_data.131" }
%"class.absl::optional_internal::optional_data.131" = type { %"class.absl::optional_internal::optional_data_base.132" }
%"class.absl::optional_internal::optional_data_base.132" = type { %"class.absl::optional_internal::optional_data_dtor_base.133" }
%"class.absl::optional_internal::optional_data_dtor_base.133" = type { i8, %union.anon.134 }
%union.anon.134 = type { i32 }
%"class.views::Inset1D" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.138 }
%union.anon.138 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.views::Span" = type { i32, i32 }
%"class.std::__1::tuple.148" = type { %"struct.std::__1::__tuple_impl.149" }
%"struct.std::__1::__tuple_impl.149" = type <{ %"class.std::__1::__tuple_leaf.150", %"class.std::__1::__tuple_leaf.151", %"class.std::__1::__tuple_leaf.152", %"class.std::__1::__tuple_leaf.153", %"class.std::__1::__tuple_leaf.154", [3 x i8] }>
%"class.std::__1::__tuple_leaf.150" = type { i32 }
%"class.std::__1::__tuple_leaf.151" = type { i32 }
%"class.std::__1::__tuple_leaf.152" = type { i32 }
%"class.std::__1::__tuple_leaf.153" = type { i32 }
%"class.std::__1::__tuple_leaf.154" = type { i8 }

$_ZN4base8internal7InvokerINS0_9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEFS4_SA_SD_EE3RunEPNS0_13BindStateBaseESA_SD_ = comdat any

$_ZN4base8internal9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS4_19MaximumFlexSizeRuleES5_S6_bPKNS4_4ViewERKNS4_10SizeBoundsEEJS5_S6_S5_S6_bEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@.str = private unnamed_addr constant [7 x i8] c"%d, %d\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"%d [%d]\00", align 1

@_ZN5views17FlexSpecificationC1Ev = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*), void (%"class.views::FlexSpecification"*)* @_ZN5views17FlexSpecificationC2Ev
@_ZN5views17FlexSpecificationC1EN4base17RepeatingCallbackIFN3gfx4SizeEPKNS_4ViewERKNS_10SizeBoundsEEEE = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*, %"class.base::RepeatingCallback"*), void (%"class.views::FlexSpecification"*, %"class.base::RepeatingCallback"*)* @_ZN5views17FlexSpecificationC2EN4base17RepeatingCallbackIFN3gfx4SizeEPKNS_4ViewERKNS_10SizeBoundsEEEE
@_ZN5views17FlexSpecificationC1ENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEb = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*, i32, i32, i1), void (%"class.views::FlexSpecification"*, i32, i32, i1)* @_ZN5views17FlexSpecificationC2ENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEb
@_ZN5views17FlexSpecificationC1ENS_17LayoutOrientationENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEbS2_ = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*, i32, i32, i32, i1, i32), void (%"class.views::FlexSpecification"*, i32, i32, i32, i1, i32)* @_ZN5views17FlexSpecificationC2ENS_17LayoutOrientationENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEbS2_
@_ZN5views17FlexSpecificationC1ERKS0_ = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*, %"class.views::FlexSpecification"*), void (%"class.views::FlexSpecification"*, %"class.views::FlexSpecification"*)* @_ZN5views17FlexSpecificationC2ERKS0_
@_ZN5views17FlexSpecificationD1Ev = hidden unnamed_addr alias void (%"class.views::FlexSpecification"*), void (%"class.views::FlexSpecification"*)* @_ZN5views17FlexSpecificationD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationC2Ev(%"class.views::FlexSpecification"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 64) #14, !noalias !2
  %3 = bitcast i8* %2 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %3, void ()* bitcast (i64 (%"class.base::internal::BindStateBase"*, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN4base8internal7InvokerINS0_9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEFS4_SA_SD_EE3RunEPNS0_13BindStateBaseESA_SD_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS4_19MaximumFlexSizeRuleES5_S6_bPKNS4_4ViewERKNS4_10SizeBoundsEEJS5_S6_S5_S6_bEE7DestroyEPKNS0_13BindStateBaseE) #15, !noalias !2
  %4 = getelementptr inbounds i8, i8* %2, i64 32
  %5 = bitcast i8* %4 to i64*
  store i64 ptrtoint (i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN5views12_GLOBAL__N_116GetPreferredSizeENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleES1_S2_bPKNS_4ViewERKNS_10SizeBoundsE to i64), i64* %5, align 8, !noalias !2
  %6 = getelementptr inbounds i8, i8* %2, i64 40
  %7 = bitcast i8* %6 to <4 x i32>*
  store <4 x i32> <i32 5, i32 0, i32 5, i32 0>, <4 x i32>* %7, align 4, !noalias !2
  %8 = getelementptr inbounds i8, i8* %2, i64 56
  store i8 0, i8* %8, align 1, !noalias !2
  %9 = bitcast %"class.views::FlexSpecification"* %0 to i8**
  store i8* %2, i8** %9, align 8, !alias.scope !2
  %10 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  store i32 1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 2
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 3
  store i32 3, i32* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZN5views12_GLOBAL__N_116GetPreferredSizeENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleES1_S2_bPKNS_4ViewERKNS_10SizeBoundsE(i32, i32, i32, i32, i1 zeroext, %"class.views::View"*, %"class.views::SizeBounds"* nocapture readonly dereferenceable(16)) #0 {
  %8 = tail call i64 @_ZNK5views4View16GetPreferredSizeEv(%"class.views::View"* %5) #15
  %9 = trunc i64 %8 to i32
  %10 = lshr i64 %8, 32
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 4, !range !7
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %46, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.views::View"* %5 to i64 (%"class.views::View"*)***
  %17 = load i64 (%"class.views::View"*)**, i64 (%"class.views::View"*)*** %16, align 8
  %18 = getelementptr inbounds i64 (%"class.views::View"*)*, i64 (%"class.views::View"*)** %17, i64 17
  %19 = load i64 (%"class.views::View"*)*, i64 (%"class.views::View"*)** %18, align 8
  %20 = tail call i64 %19(%"class.views::View"* %5) #15
  %21 = trunc i64 %20 to i32
  %22 = lshr i64 %20, 32
  %23 = trunc i64 %22 to i32
  %24 = load i8, i8* %12, align 4, !range !7
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %27, !prof !8

26:                                               ; preds = %15
  tail call void @llvm.trap() #15
  unreachable

27:                                               ; preds = %15
  %28 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %9, %21
  %31 = select i1 %30, i32 %9, i32 %21
  %32 = icmp sgt i32 %31, %29
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  switch i32 %0, label %37 [
    i32 0, label %46
    i32 5, label %34
    i32 3, label %35
    i32 4, label %35
    i32 1, label %36
    i32 2, label %36
  ]

34:                                               ; preds = %33
  br label %46

35:                                               ; preds = %33, %33
  br label %46

36:                                               ; preds = %33, %33
  br label %46

37:                                               ; preds = %33, %27
  %38 = icmp slt i32 %29, %9
  br i1 %38, label %39, label %43

39:                                               ; preds = %37
  switch i32 %0, label %43 [
    i32 5, label %46
    i32 0, label %40
    i32 3, label %40
    i32 1, label %40
    i32 4, label %41
    i32 2, label %42
  ]

40:                                               ; preds = %39, %39, %39
  br label %46

41:                                               ; preds = %39
  br label %46

42:                                               ; preds = %39
  br label %46

43:                                               ; preds = %39, %37
  %44 = icmp eq i32 %1, 0
  %45 = select i1 %44, i32 %9, i32 %29
  br label %46

46:                                               ; preds = %7, %43, %42, %41, %40, %39, %36, %35, %34, %33
  %47 = phi i8 [ 0, %7 ], [ 1, %33 ], [ 1, %34 ], [ 1, %35 ], [ 1, %36 ], [ 1, %39 ], [ 1, %40 ], [ 1, %41 ], [ 1, %42 ], [ 1, %43 ]
  %48 = phi i32 [ -1431655766, %7 ], [ %23, %33 ], [ %23, %34 ], [ %23, %35 ], [ %23, %36 ], [ %23, %39 ], [ %23, %40 ], [ %23, %41 ], [ %23, %42 ], [ %23, %43 ]
  %49 = phi i32 [ %9, %7 ], [ %29, %33 ], [ %9, %34 ], [ %31, %35 ], [ 0, %36 ], [ %9, %39 ], [ %29, %40 ], [ %31, %41 ], [ 0, %42 ], [ %45, %43 ]
  br i1 %4, label %50, label %70

50:                                               ; preds = %46
  %51 = icmp eq i8 %47, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = icmp sgt i32 %54, %49
  %58 = select i1 %57, i32 %49, i32 %54
  br label %59

59:                                               ; preds = %50, %56, %52
  %60 = phi i32 [ %49, %52 ], [ %58, %56 ], [ %49, %50 ]
  %61 = icmp slt i32 %60, %9
  br i1 %61, label %62, label %70

62:                                               ; preds = %59
  %63 = bitcast %"class.views::View"* %5 to i32 (%"class.views::View"*, i32)***
  %64 = load i32 (%"class.views::View"*, i32)**, i32 (%"class.views::View"*, i32)*** %63, align 8
  %65 = getelementptr inbounds i32 (%"class.views::View"*, i32)*, i32 (%"class.views::View"*, i32)** %64, i64 19
  %66 = load i32 (%"class.views::View"*, i32)*, i32 (%"class.views::View"*, i32)** %65, align 8
  %67 = tail call i32 %66(%"class.views::View"* %5, i32 %60) #15
  %68 = icmp sgt i32 %67, %11
  %69 = select i1 %68, i32 %67, i32 %11
  br label %70

70:                                               ; preds = %59, %62, %46
  %71 = phi i32 [ %69, %62 ], [ %11, %59 ], [ %11, %46 ]
  %72 = phi i32 [ %60, %62 ], [ %60, %59 ], [ %49, %46 ]
  %73 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8, i8* %73, align 4, !range !7
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %110, label %76

76:                                               ; preds = %70
  %77 = icmp eq i8 %47, 0
  br i1 %77, label %78, label %89

78:                                               ; preds = %76
  %79 = bitcast %"class.views::View"* %5 to i64 (%"class.views::View"*)***
  %80 = load i64 (%"class.views::View"*)**, i64 (%"class.views::View"*)*** %79, align 8
  %81 = getelementptr inbounds i64 (%"class.views::View"*)*, i64 (%"class.views::View"*)** %80, i64 17
  %82 = load i64 (%"class.views::View"*)*, i64 (%"class.views::View"*)** %81, align 8
  %83 = tail call i64 %82(%"class.views::View"* %5) #15
  %84 = lshr i64 %83, 32
  %85 = trunc i64 %84 to i32
  %86 = load i8, i8* %73, align 4
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %89, !prof !8

88:                                               ; preds = %78
  tail call void @llvm.trap() #15
  unreachable

89:                                               ; preds = %76, %78
  %90 = phi i32 [ %85, %78 ], [ %48, %76 ]
  %91 = getelementptr inbounds %"class.views::SizeBounds", %"class.views::SizeBounds"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = icmp slt i32 %71, %90
  %94 = select i1 %93, i32 %71, i32 %90
  %95 = icmp sgt i32 %94, %92
  br i1 %95, label %96, label %99

96:                                               ; preds = %89
  switch i32 %2, label %99 [
    i32 0, label %110
    i32 5, label %97
    i32 3, label %98
    i32 4, label %98
    i32 1, label %107
    i32 2, label %107
  ]

97:                                               ; preds = %96
  br label %110

98:                                               ; preds = %96, %96
  br label %110

99:                                               ; preds = %96, %89
  %100 = icmp sgt i32 %71, %92
  br i1 %100, label %101, label %104

101:                                              ; preds = %99
  switch i32 %2, label %104 [
    i32 5, label %110
    i32 0, label %102
    i32 3, label %102
    i32 1, label %102
    i32 4, label %103
    i32 2, label %107
  ]

102:                                              ; preds = %101, %101, %101
  br label %110

103:                                              ; preds = %101
  br label %110

104:                                              ; preds = %101, %99
  %105 = icmp eq i32 %3, 0
  %106 = select i1 %105, i32 %71, i32 %92
  br label %110

107:                                              ; preds = %96, %96, %101
  %108 = icmp sgt i32 %72, 0
  %109 = select i1 %108, i32 %72, i32 0
  br label %118

110:                                              ; preds = %70, %104, %103, %102, %101, %98, %97, %96
  %111 = phi i32 [ %71, %70 ], [ %106, %104 ], [ %94, %103 ], [ %92, %102 ], [ %94, %98 ], [ %71, %97 ], [ %92, %96 ], [ %71, %101 ]
  %112 = icmp sgt i32 %72, 0
  %113 = select i1 %112, i32 %72, i32 0
  %114 = icmp sgt i32 %111, 0
  %115 = select i1 %114, i32 %111, i32 0
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 32
  br label %118

118:                                              ; preds = %110, %107
  %119 = phi i32 [ %109, %107 ], [ %113, %110 ]
  %120 = phi i64 [ 0, %107 ], [ %117, %110 ]
  %121 = zext i32 %119 to i64
  %122 = or i64 %120, %121
  ret i64 %122
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationC2EN4base17RepeatingCallbackIFN3gfx4SizeEPKNS_4ViewERKNS_10SizeBoundsEEEE(%"class.views::FlexSpecification"* nocapture, %"class.base::RepeatingCallback"* nocapture) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.base::RepeatingCallback"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.views::FlexSpecification"* %0 to i64*
  store i64 %5, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %3, align 8
  %7 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 2
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 3
  store i32 3, i32* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationC2ENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEb(%"class.views::FlexSpecification"* nocapture, i32, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::RepeatingCallback", align 8
  %6 = zext i1 %3 to i8
  %7 = tail call i8* @_Znwm(i64 64) #14, !noalias !9
  %8 = bitcast i8* %7 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %8, void ()* bitcast (i64 (%"class.base::internal::BindStateBase"*, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN4base8internal7InvokerINS0_9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEFS4_SA_SD_EE3RunEPNS0_13BindStateBaseESA_SD_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS4_19MaximumFlexSizeRuleES5_S6_bPKNS4_4ViewERKNS4_10SizeBoundsEEJS5_S6_S5_S6_bEE7DestroyEPKNS0_13BindStateBaseE) #15, !noalias !9
  %9 = getelementptr inbounds i8, i8* %7, i64 32
  %10 = bitcast i8* %9 to i64*
  store i64 ptrtoint (i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN5views12_GLOBAL__N_116GetPreferredSizeENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleES1_S2_bPKNS_4ViewERKNS_10SizeBoundsE to i64), i64* %10, align 8, !noalias !9
  %11 = getelementptr inbounds i8, i8* %7, i64 40
  %12 = bitcast i8* %11 to i32*
  store i32 %1, i32* %12, align 4, !noalias !9
  %13 = getelementptr inbounds i8, i8* %7, i64 44
  %14 = bitcast i8* %13 to i32*
  store i32 %2, i32* %14, align 4, !noalias !9
  %15 = getelementptr inbounds i8, i8* %7, i64 48
  %16 = bitcast i8* %15 to i32*
  store i32 %1, i32* %16, align 4, !noalias !9
  %17 = getelementptr inbounds i8, i8* %7, i64 52
  %18 = bitcast i8* %17 to i32*
  store i32 %2, i32* %18, align 4, !noalias !9
  %19 = getelementptr inbounds i8, i8* %7, i64 56
  store i8 %6, i8* %19, align 1, !noalias !9
  %20 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = ptrtoint i8* %7 to i64
  %22 = bitcast %"class.views::FlexSpecification"* %0 to i64*
  store i64 %21, i64* %22, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %20, align 8
  %23 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  store i32 1, i32* %23, align 8
  %24 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 2
  store i32 1, i32* %24, align 4
  %25 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 3
  store i32 3, i32* %25, align 8
  %26 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %5, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %26) #15
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationC2ENS_17LayoutOrientationENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleEbS2_(%"class.views::FlexSpecification"* nocapture, i32, i32, i32, i1 zeroext, i32) unnamed_addr #0 align 2 {
  %7 = alloca %"class.base::RepeatingCallback", align 8
  %8 = zext i1 %4 to i8
  %9 = icmp eq i32 %1, 0
  %10 = icmp eq i32 %1, 1
  %11 = tail call i8* @_Znwm(i64 64) #14, !noalias !14
  %12 = bitcast i8* %11 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %12, void ()* bitcast (i64 (%"class.base::internal::BindStateBase"*, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN4base8internal7InvokerINS0_9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEFS4_SA_SD_EE3RunEPNS0_13BindStateBaseESA_SD_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS4_19MaximumFlexSizeRuleES5_S6_bPKNS4_4ViewERKNS4_10SizeBoundsEEJS5_S6_S5_S6_bEE7DestroyEPKNS0_13BindStateBaseE) #15, !noalias !14
  %13 = getelementptr inbounds i8, i8* %11, i64 32
  %14 = bitcast i8* %13 to i64*
  store i64 ptrtoint (i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)* @_ZN5views12_GLOBAL__N_116GetPreferredSizeENS_19MinimumFlexSizeRuleENS_19MaximumFlexSizeRuleES1_S2_bPKNS_4ViewERKNS_10SizeBoundsE to i64), i64* %14, align 8, !noalias !14
  %15 = getelementptr inbounds i8, i8* %11, i64 40
  %16 = bitcast i8* %15 to i32*
  %17 = select i1 %9, i32 %2, i32 %5
  store i32 %17, i32* %16, align 4, !noalias !14
  %18 = getelementptr inbounds i8, i8* %11, i64 44
  %19 = bitcast i8* %18 to i32*
  %20 = select i1 %9, i32 %3, i32 0
  store i32 %20, i32* %19, align 4, !noalias !14
  %21 = getelementptr inbounds i8, i8* %11, i64 48
  %22 = bitcast i8* %21 to i32*
  %23 = select i1 %10, i32 %2, i32 %5
  store i32 %23, i32* %22, align 4, !noalias !14
  %24 = getelementptr inbounds i8, i8* %11, i64 52
  %25 = bitcast i8* %24 to i32*
  %26 = select i1 %10, i32 %3, i32 0
  store i32 %26, i32* %25, align 4, !noalias !14
  %27 = getelementptr inbounds i8, i8* %11, i64 56
  store i8 %8, i8* %27, align 1, !noalias !14
  %28 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = ptrtoint i8* %11 to i64
  %30 = bitcast %"class.views::FlexSpecification"* %0 to i64*
  store i64 %29, i64* %30, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %28, align 8
  %31 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  store i32 1, i32* %31, align 8
  %32 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 2
  store i32 1, i32* %32, align 4
  %33 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 3
  store i32 3, i32* %33, align 8
  %34 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %7, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %34) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationC2ERKS0_(%"class.views::FlexSpecification"*, %"class.views::FlexSpecification"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %3, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %4) #15
  %5 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 1
  %7 = bitcast i32* %5 to i8*
  %8 = bitcast i32* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 12, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.views::FlexSpecification"* @_ZN5views17FlexSpecificationaSERKS0_(%"class.views::FlexSpecification"* returned, %"class.views::FlexSpecification"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 0, i32 0
  %5 = tail call dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSERKS1_(%"class.base::internal::CallbackBaseCopyable"* %3, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %4) #15
  %6 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 1
  %8 = bitcast i32* %6 to i8*
  %9 = bitcast i32* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 12, i1 false)
  ret %"class.views::FlexSpecification"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views17FlexSpecificationD2Ev(%"class.views::FlexSpecification"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views17FlexSpecification10WithWeightEi(%"class.views::FlexSpecification"* noalias sret, %"class.views::FlexSpecification"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 0, i32 0
  %8 = bitcast %"class.views::FlexSpecification"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 -86, i64 24, i1 false)
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %6, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %7) #15
  %9 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 1
  %10 = bitcast i32* %4 to i8*
  %11 = bitcast i32* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 12, i1 false) #15
  store i32 %2, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views17FlexSpecification9WithOrderEi(%"class.views::FlexSpecification"* noalias sret, %"class.views::FlexSpecification"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.views::FlexSpecification"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 24, i1 false)
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %5, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %6) #15
  %8 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 1
  %9 = bitcast i32* %4 to i8*
  %10 = bitcast i32* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 12, i1 false) #15
  store i32 %2, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views17FlexSpecification13WithAlignmentENS_15LayoutAlignmentE(%"class.views::FlexSpecification"* noalias sret, %"class.views::FlexSpecification"*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 0, i32 0
  %8 = bitcast %"class.views::FlexSpecification"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 -86, i64 24, i1 false)
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %6, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %7) #15
  %9 = getelementptr inbounds %"class.views::FlexSpecification", %"class.views::FlexSpecification"* %1, i64 0, i32 1
  %10 = bitcast i32* %9 to i64*
  %11 = bitcast i32* %4 to i64*
  %12 = load i64, i64* %10, align 8
  store i64 %12, i64* %11, align 8
  store i32 %2, i32* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5views7Inset1D9SetInsetsEii(%"class.views::Inset1D"* nocapture, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 1
  store i32 %2, i32* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views7Inset1D6ExpandEii(%"class.views::Inset1D"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %1
  store i32 %6, i32* %4, align 4
  %7 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, %2
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views7Inset1DeqERKS0_(%"class.views::Inset1D"*, %"class.views::Inset1D"* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp eq i32 %11, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views7Inset1DneERKS0_(%"class.views::Inset1D"* nocapture readonly, %"class.views::Inset1D"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp ne i32 %11, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ true, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views7Inset1DltERKS0_(%"class.views::Inset1D"*, %"class.views::Inset1D"* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 1
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = icmp slt i32 %8, %7
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br label %16

16:                                               ; preds = %2, %10, %12
  %17 = phi i1 [ %15, %12 ], [ true, %2 ], [ false, %10 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views7Inset1D8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.views::Inset1D"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6) #15
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN5views4Span7SetSpanEii(%"class.views::Span"* nocapture, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 4
  %5 = icmp sgt i32 %2, 0
  %6 = select i1 %5, i32 %2, i32 0
  %7 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  store i32 %6, i32* %7, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views4Span6ExpandEii(%"class.views::Span"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %1
  store i32 %8, i32* %4, align 4
  %9 = add i32 %5, %2
  %10 = add i32 %9, %7
  %11 = sub i32 %10, %8
  %12 = icmp sgt i32 %11, 0
  %13 = select i1 %12, i32 %11, i32 0
  store i32 %13, i32* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views4Span5InsetEii(%"class.views::Span"* nocapture, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %5, %1
  store i32 %8, i32* %4, align 4
  %9 = sub i32 %5, %2
  %10 = add i32 %9, %7
  %11 = sub i32 %10, %8
  %12 = icmp sgt i32 %11, 0
  %13 = select i1 %12, i32 %11, i32 0
  store i32 %13, i32* %6, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5views4Span5InsetERKNS_7Inset1DE(%"class.views::Span"* nocapture, %"class.views::Inset1D"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %8, %4
  store i32 %11, i32* %7, align 4
  %12 = sub i32 %8, %6
  %13 = add i32 %12, %10
  %14 = sub i32 %13, %11
  %15 = icmp sgt i32 %14, 0
  %16 = select i1 %15, i32 %14, i32 0
  store i32 %16, i32* %9, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5views4Span6CenterERKS0_RKNS_7Inset1DE(%"class.views::Span"* nocapture, %"class.views::Span"* nocapture readonly dereferenceable(8), %"class.views::Inset1D"* nocapture readonly dereferenceable(8)) local_unnamed_addr #9 align 2 {
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %19

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  %14 = sitofp i32 %8 to float
  %15 = fmul float %14, 5.000000e-01
  %16 = tail call float @llvm.ceil.f32(float %15) #15
  %17 = fadd float %16, %13
  %18 = fptosi float %17 to i32
  br label %45

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %2, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %2, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, %21
  %25 = icmp slt i32 %8, %24
  br i1 %25, label %26, label %38

26:                                               ; preds = %19
  %27 = sitofp i32 %8 to float
  %28 = sitofp i32 %24 to float
  %29 = fdiv float %27, %28
  %30 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = sitofp i32 %31 to float
  %33 = sitofp i32 %21 to float
  %34 = fmul float %29, %33
  %35 = tail call float @llvm.round.f32(float %34)
  %36 = fadd float %35, %32
  %37 = fptosi float %36 to i32
  br label %45

38:                                               ; preds = %19
  %39 = sub nsw i32 %8, %24
  %40 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = sdiv i32 %39, 2
  %43 = add i32 %42, %21
  %44 = add i32 %43, %41
  br label %45

45:                                               ; preds = %38, %26, %10
  %46 = phi i32 [ %44, %38 ], [ %37, %26 ], [ %18, %10 ]
  %47 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %46, i32* %47, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #10

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views4Span5AlignERKS0_NS_15LayoutAlignmentERKNS_7Inset1DE(%"class.views::Span"* nocapture, %"class.views::Span"* nocapture readonly dereferenceable(8), i32, %"class.views::Inset1D"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  switch i32 %2, label %86 [
    i32 0, label %5
    i32 2, label %12
    i32 1, label %25
    i32 3, label %70
  ]

5:                                                ; preds = %4
  %6 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, %7
  %11 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %10, i32* %11, align 4
  br label %86

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %16, %14
  %22 = sub i32 %21, %18
  %23 = sub i32 %22, %20
  %24 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %23, i32* %24, align 4
  br label %86

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sub nsw i32 %27, %29
  %31 = icmp slt i32 %30, 1
  br i1 %31, label %32, label %42

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = sitofp i32 %34 to float
  %36 = sitofp i32 %30 to float
  %37 = fmul float %36, 5.000000e-01
  %38 = tail call float @llvm.ceil.f32(float %37) #15
  %39 = fadd float %38, %35
  %40 = fptosi float %39 to i32
  %41 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %40, i32* %41, align 4
  br label %86

42:                                               ; preds = %25
  %43 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %44
  %48 = icmp slt i32 %30, %47
  br i1 %48, label %49, label %62

49:                                               ; preds = %42
  %50 = sitofp i32 %30 to float
  %51 = sitofp i32 %47 to float
  %52 = fdiv float %50, %51
  %53 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = sitofp i32 %54 to float
  %56 = sitofp i32 %44 to float
  %57 = fmul float %52, %56
  %58 = tail call float @llvm.round.f32(float %57) #15
  %59 = fadd float %58, %55
  %60 = fptosi float %59 to i32
  %61 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %60, i32* %61, align 4
  br label %86

62:                                               ; preds = %42
  %63 = sub nsw i32 %30, %47
  %64 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = sdiv i32 %63, 2
  %67 = add i32 %66, %44
  %68 = add i32 %67, %65
  %69 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %68, i32* %69, align 4
  br label %86

70:                                               ; preds = %4
  %71 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = add nsw i32 %74, %72
  %76 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.views::Inset1D", %"class.views::Inset1D"* %3, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = sub i32 %77, %74
  %81 = sub i32 %80, %79
  %82 = icmp sgt i32 %81, 0
  %83 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  store i32 %75, i32* %83, align 4
  %84 = select i1 %82, i32 %81, i32 0
  %85 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  store i32 %84, i32* %85, align 4
  br label %86

86:                                               ; preds = %62, %49, %32, %4, %70, %12, %5
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views4SpaneqERKS0_(%"class.views::Span"*, %"class.views::Span"* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp eq i32 %11, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views4SpanneERKS0_(%"class.views::Span"* nocapture readonly, %"class.views::Span"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp ne i32 %11, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ true, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5views4SpanltERKS0_(%"class.views::Span"*, %"class.views::Span"* dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %7, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = icmp slt i32 %8, %7
  br i1 %11, label %16, label %12

12:                                               ; preds = %10
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %13, %14
  br label %16

16:                                               ; preds = %2, %10, %12
  %17 = phi i1 [ %15, %12 ], [ true, %2 ], [ false, %10 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5views4Span8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.views::Span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.views::Span", %"class.views::Span"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %4, i32 %6) #15
  ret void
}

declare i64 @_ZNK5views4View16GetPreferredSizeEv(%"class.views::View"*) local_unnamed_addr #7

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #7

declare dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4base8internal7InvokerINS0_9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEFS4_SA_SD_EE3RunEPNS0_13BindStateBaseESA_SD_(%"class.base::internal::BindStateBase"*, %"class.views::View"*, %"class.views::SizeBounds"* dereferenceable(16)) #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = bitcast %"class.base::internal::BindStateBase"* %4 to i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)**
  %6 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %7 = bitcast void ()** %6 to %"class.std::__1::tuple.148"*
  %8 = bitcast void ()** %6 to i32*
  %9 = getelementptr inbounds %"class.std::__1::tuple.148", %"class.std::__1::tuple.148"* %7, i64 0, i32 0, i32 1, i32 0
  %10 = getelementptr inbounds void ()*, void ()** %6, i64 1
  %11 = bitcast void ()** %10 to i32*
  %12 = getelementptr inbounds %"class.std::__1::tuple.148", %"class.std::__1::tuple.148"* %7, i64 0, i32 0, i32 3, i32 0
  %13 = getelementptr inbounds void ()*, void ()** %6, i64 2
  %14 = bitcast void ()** %13 to i8*
  %15 = load i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)*, i64 (i32, i32, i32, i32, i1, %"class.views::View"*, %"class.views::SizeBounds"*)** %5, align 8
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load i32, i32* %11, align 4
  %19 = load i32, i32* %12, align 4
  %20 = load i8, i8* %14, align 1, !range !7
  %21 = icmp ne i8 %20, 0
  %22 = tail call i64 %15(i32 %16, i32 %17, i32 %18, i32 %19, i1 zeroext %21, %"class.views::View"* %1, %"class.views::SizeBounds"* dereferenceable(16) %2) #15
  ret i64 %22
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS4_19MaximumFlexSizeRuleES5_S6_bPKNS4_4ViewERKNS4_10SizeBoundsEEJS5_S6_S5_S6_bEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #14
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { builtin nounwind }
attributes #15 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJS6_S7_S6_S7_bEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJS4_S5_S4_S5_bEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSH_DpOSI_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJS4_S5_S4_S5_bEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSH_DpOSI_"}
!7 = !{i8 0, i8 2}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJRS6_RS7_SG_SH_RbEEEDcOT0_DpOT1_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJRS6_RS7_SG_SH_RbEEEDcOT0_DpOT1_"}
!12 = distinct !{!12, !13, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJRS4_RS5_SE_SF_RbEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_: argument 0"}
!13 = distinct !{!13, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJRS4_RS5_SE_SF_RbEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSK_DpOSL_"}
!14 = !{!15, !17}
!15 = distinct !{!15, !16, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJRS6_RKS7_SG_SI_RbEEEDcOT0_DpOT1_: argument 0"}
!16 = distinct !{!16, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS5_19MaximumFlexSizeRuleES6_S7_bPKNS5_4ViewERKNS5_10SizeBoundsEEJRS6_RKS7_SG_SI_RbEEEDcOT0_DpOT1_"}
!17 = distinct !{!17, !18, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJRS4_RKS5_SE_SG_RbEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSL_DpOSM_: argument 0"}
!18 = distinct !{!18, !"_ZN4base13BindRepeatingIPFN3gfx4SizeEN5views19MinimumFlexSizeRuleENS3_19MaximumFlexSizeRuleES4_S5_bPKNS3_4ViewERKNS3_10SizeBoundsEEJRS4_RKS5_SE_SG_RbEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSL_DpOSM_"}
