; ModuleID = '../../third_party/pdfium/core/fpdfapi/render/charposlist.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/render/charposlist.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %class.TextCharPos*, %class.TextCharPos*, %"class.std::__1::__compressed_pair.107" }
%class.TextCharPos = type { %class.CFX_PTemplate, i32, i32, i32, i32, i8, i8, [4 x float] }
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %class.TextCharPos* }
%"class.pdfium::span.112" = type { %"class.fxcrt::UnownedPtr.113", i64 }
%"class.fxcrt::UnownedPtr.113" = type { i32* }
%"class.pdfium::span.114" = type { %"class.fxcrt::UnownedPtr.115", i64 }
%"class.fxcrt::UnownedPtr.115" = type { float* }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.52", %"class.fxcrt::RetainPtr.60", %"class.fxcrt::RetainPtr.93", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.99", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.7", %"class.fxcrt::RetainPtr.11", %"class.fxcrt::RetainPtr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.45", %"class.std::__1::vector", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.11" = type { %"class.std::__1::unique_ptr.12" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.15", %"class.fxcrt::RetainPtr.19" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.19" = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.27" = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type <{ %"class.fxcrt::ByteString", i32, i32, i32, i32, i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.51", i64 }
%"class.fxcrt::UnownedPtr.51" = type { i8* }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"class.std::__1::unique_ptr.54"*, %"class.std::__1::unique_ptr.54"*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::unique_ptr.54" = type opaque
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.std::__1::unique_ptr.54"* }
%"class.fxcrt::RetainPtr.60" = type { %"class.std::__1::unique_ptr.61" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.64", %"class.fxcrt::RetainPtr.85" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.45", %"class.fxcrt::UnownedPtr.51" }
%"class.fxcrt::RetainPtr.64" = type { %"class.std::__1::unique_ptr.65" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.68" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.145" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.148", %"class.std::__1::__compressed_pair.156", %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.163", [4 x i8] }>
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150", %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.74" }
%"class.std::__1::__tree.74" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.fxcrt::RetainPtr.85" = type { %"class.std::__1::unique_ptr.86" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type opaque
%"class.fxcrt::RetainPtr.93" = type { %"class.std::__1::unique_ptr.94" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.36" }
%"class.fxcrt::RetainPtr.36" = type { %"class.std::__1::unique_ptr.37" }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.136" }
%"class.fxcrt::RetainPtr.136" = type { %"class.std::__1::unique_ptr.137" }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.fxcrt::StringDataTemplate.140"* }
%"class.fxcrt::StringDataTemplate.140" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CFX_PTemplate.144 = type { i16, i16 }
%class.CPDF_CIDFont = type { %class.CPDF_Font, %"class.fxcrt::RetainPtr.116", %"class.fxcrt::UnownedPtr.122", %"class.fxcrt::RetainPtr.60", %"class.std::__1::unique_ptr.123", i8, i8, i8, i8, i8, i16, i16, i16, %"class.std::__1::vector.129", %"class.std::__1::vector.129", [256 x %struct.FX_RECT] }
%"class.fxcrt::RetainPtr.116" = type { %"class.std::__1::unique_ptr.117" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %class.CPDF_CMap* }
%class.CPDF_CMap = type opaque
%"class.fxcrt::UnownedPtr.122" = type { %class.CPDF_CID2UnicodeMap* }
%class.CPDF_CID2UnicodeMap = type opaque
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %class.CFX_CTTGSUBTable* }
%class.CFX_CTTGSUBTable = type opaque
%"class.std::__1::vector.129" = type { %"class.std::__1::__vector_base.130" }
%"class.std::__1::__vector_base.130" = type { i32*, i32*, %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE7reserveEm = comdat any

$_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = comdat any

@.str = private unnamed_addr constant [10 x i8] c"ToUnicode\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14GetCharPosListN6pdfium4spanIKjEENS0_IKfEEP9CPDF_Fontf(%"class.std::__1::vector.105"* noalias sret, %"class.pdfium::span.112"* nocapture readonly, %"class.pdfium::span.114"* nocapture readonly, %class.CPDF_Font*, float) local_unnamed_addr #0 {
  %6 = alloca %"class.fxcrt::ByteString", align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.fxcrt::WideString", align 8
  %9 = alloca %class.CFX_PTemplate.144, align 2
  %10 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast %"class.std::__1::vector.105"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = getelementptr inbounds %"class.pdfium::span.112", %"class.pdfium::span.112"* %1, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  tail call void @_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE7reserveEm(%"class.std::__1::vector.105"* %0, i64 %14)
  %15 = bitcast %class.CPDF_Font* %3 to %class.CPDF_CIDFont* (%class.CPDF_Font*)***
  %16 = load %class.CPDF_CIDFont* (%class.CPDF_Font*)**, %class.CPDF_CIDFont* (%class.CPDF_Font*)*** %15, align 8
  %17 = getelementptr inbounds %class.CPDF_CIDFont* (%class.CPDF_Font*)*, %class.CPDF_CIDFont* (%class.CPDF_Font*)** %16, i64 13
  %18 = load %class.CPDF_CIDFont* (%class.CPDF_Font*)*, %class.CPDF_CIDFont* (%class.CPDF_Font*)** %17, align 8
  %19 = tail call %class.CPDF_CIDFont* %18(%class.CPDF_Font* %3) #9
  %20 = icmp ne %class.CPDF_CIDFont* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %5
  %22 = tail call zeroext i1 @_ZNK12CPDF_CIDFont13IsVertWritingEv(%class.CPDF_CIDFont* nonnull %19) #9
  br label %23

23:                                               ; preds = %21, %5
  %24 = phi i1 [ false, %5 ], [ %22, %21 ]
  %25 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %3, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %26 = load %class.CPDF_Dictionary*, %class.CPDF_Dictionary** %25, align 8
  %27 = bitcast %"class.fxcrt::ByteString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #9
  %28 = call %class.CPDF_Stream* @_ZN15CPDF_Dictionary12GetStreamForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %26, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %6) #9
  %29 = icmp eq %class.CPDF_Stream* %28, null
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  %30 = load i64, i64* %13, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %265, label %32

32:                                               ; preds = %23
  %33 = getelementptr inbounds %"class.pdfium::span.112", %"class.pdfium::span.112"* %1, i64 0, i32 0, i32 0
  %34 = bitcast %class.TextCharPos** %10 to i64*
  %35 = bitcast %"class.fxcrt::WideString"* %8 to i8*
  %36 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = bitcast %class.CPDF_Font* %3 to void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)***
  %38 = bitcast %class.CPDF_Font* %3 to i32 (%class.CPDF_Font*, i32, i8*)***
  %39 = bitcast %class.CPDF_Font* %3 to i1 (%class.CPDF_Font*)***
  %40 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %3, i64 0, i32 3
  %41 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %3, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %42 = bitcast %class.CPDF_Font* %3 to i32 (%class.CPDF_Font*, i32)***
  %43 = getelementptr inbounds %"class.pdfium::span.114", %"class.pdfium::span.114"* %2, i64 0, i32 1
  %44 = getelementptr inbounds %"class.pdfium::span.114", %"class.pdfium::span.114"* %2, i64 0, i32 0, i32 0
  %45 = bitcast %class.CFX_PTemplate.144* %9 to i8*
  %46 = getelementptr inbounds %class.CFX_PTemplate.144, %class.CFX_PTemplate.144* %9, i64 0, i32 0
  %47 = getelementptr inbounds %class.CFX_PTemplate.144, %class.CFX_PTemplate.144* %9, i64 0, i32 1
  br label %48

48:                                               ; preds = %32, %261
  %49 = phi i64 [ %30, %32 ], [ %262, %261 ]
  %50 = phi i64 [ 0, %32 ], [ %263, %261 ]
  %51 = load i32*, i32** %33, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 %50
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, -1
  br i1 %54, label %261, label %55

55:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 0, i8* %7, align 1
  %56 = load %class.TextCharPos*, %class.TextCharPos** %10, align 8
  %57 = load %class.TextCharPos*, %class.TextCharPos** %11, align 8
  %58 = icmp ult %class.TextCharPos* %56, %57
  br i1 %58, label %59, label %62

59:                                               ; preds = %55
  call void @_ZN11TextCharPosC1Ev(%class.TextCharPos* %56) #9
  %60 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %56, i64 1
  %61 = ptrtoint %class.TextCharPos* %60 to i64
  store i64 %61, i64* %34, align 8
  br label %64

62:                                               ; preds = %55
  call void @_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.105"* %0) #9
  %63 = load %class.TextCharPos*, %class.TextCharPos** %10, align 8
  br label %64

64:                                               ; preds = %59, %62
  %65 = phi %class.TextCharPos* [ %60, %59 ], [ %63, %62 ]
  %66 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1
  br i1 %20, label %67, label %69

67:                                               ; preds = %64
  %68 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 6
  store i8 1, i8* %68, align 1
  br label %69

69:                                               ; preds = %67, %64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #9
  store %"class.fxcrt::StringDataTemplate.140"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate.140"*), %"class.fxcrt::StringDataTemplate.140"** %36, align 8
  %70 = load void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)**, void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)*** %37, align 8
  %71 = getelementptr inbounds void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)*, void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)** %70, i64 21
  %72 = load void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)*, void (%"class.fxcrt::WideString"*, %class.CPDF_Font*, i32)** %71, align 8
  call void %72(%"class.fxcrt::WideString"* nonnull sret %8, %class.CPDF_Font* %3, i32 %53) #9
  %73 = load %"class.fxcrt::StringDataTemplate.140"*, %"class.fxcrt::StringDataTemplate.140"** %36, align 8
  %74 = icmp eq %"class.fxcrt::StringDataTemplate.140"* %73, null
  br i1 %74, label %82, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.140", %"class.fxcrt::StringDataTemplate.140"* %73, i64 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.fxcrt::StringDataTemplate.140", %"class.fxcrt::StringDataTemplate.140"* %73, i64 0, i32 3, i64 0
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %69, %75, %79
  %83 = phi i32 [ %81, %79 ], [ %53, %75 ], [ %53, %69 ]
  %84 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 1
  store i32 %83, i32* %84, align 4
  %85 = load i32 (%class.CPDF_Font*, i32, i8*)**, i32 (%class.CPDF_Font*, i32, i8*)*** %38, align 8
  %86 = getelementptr inbounds i32 (%class.CPDF_Font*, i32, i8*)*, i32 (%class.CPDF_Font*, i32, i8*)** %85, i64 20
  %87 = load i32 (%class.CPDF_Font*, i32, i8*)*, i32 (%class.CPDF_Font*, i32, i8*)** %86, align 8
  %88 = call i32 %87(%class.CPDF_Font* %3, i32 %53, i8* nonnull %7) #9
  %89 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 2
  store i32 %88, i32* %89, align 4
  %90 = icmp eq i32 %88, -1
  %91 = icmp eq i32 %88, 0
  br i1 %91, label %92, label %97

92:                                               ; preds = %82
  %93 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %39, align 8
  %94 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %93, i64 3
  %95 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %94, align 8
  %96 = call zeroext i1 %95(%class.CPDF_Font* %3) #9
  br label %97

97:                                               ; preds = %92, %82
  %98 = phi i1 [ false, %82 ], [ %96, %92 ]
  %99 = or i1 %90, %98
  br i1 %99, label %100, label %111

100:                                              ; preds = %97
  %101 = call i32 @_ZN9CPDF_Font24FallbackFontFromCharcodeEj(%class.CPDF_Font* %3, i32 %53) #9
  %102 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 4
  store i32 %101, i32* %102, align 4
  %103 = call i32 @_ZN9CPDF_Font25FallbackGlyphFromCharcodeEij(%class.CPDF_Font* %3, i32 %101, i32 %53) #9
  store i32 %103, i32* %89, align 4
  %104 = icmp eq i32 %103, -1
  %105 = and i1 %98, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %100
  br i1 %29, label %111, label %107

107:                                              ; preds = %106
  store i32 0, i32* %89, align 4
  br label %111

108:                                              ; preds = %100
  %109 = load i32, i32* %102, align 4
  %110 = call %class.CFX_Font* @_ZN9CPDF_Font15GetFontFallbackEi(%class.CPDF_Font* %3, i32 %109) #9
  br label %113

111:                                              ; preds = %97, %106, %107
  %112 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 4
  store i32 -1, i32* %112, align 4
  br label %113

113:                                              ; preds = %111, %108
  %114 = phi %class.CFX_Font* [ %110, %108 ], [ %40, %111 ]
  %115 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %39, align 8
  %116 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %115, i64 4
  %117 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %116, align 8
  %118 = call zeroext i1 %117(%class.CPDF_Font* %3) #9
  br i1 %118, label %132, label %119

119:                                              ; preds = %113
  %120 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %41, align 8
  %121 = icmp eq %class.CPDF_StreamAcc* %120, null
  br i1 %121, label %122, label %132

122:                                              ; preds = %119
  %123 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %39, align 8
  %124 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %123, i64 5
  %125 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %124, align 8
  %126 = call zeroext i1 %125(%class.CPDF_Font* %3) #9
  br i1 %126, label %132, label %127

127:                                              ; preds = %122
  %128 = load i32 (%class.CPDF_Font*, i32)**, i32 (%class.CPDF_Font*, i32)*** %42, align 8
  %129 = getelementptr inbounds i32 (%class.CPDF_Font*, i32)*, i32 (%class.CPDF_Font*, i32)** %128, i64 24
  %130 = load i32 (%class.CPDF_Font*, i32)*, i32 (%class.CPDF_Font*, i32)** %129, align 8
  %131 = call i32 %130(%class.CPDF_Font* %3, i32 %53) #9
  br label %132

132:                                              ; preds = %122, %113, %119, %127
  %133 = phi i32 [ %131, %127 ], [ 0, %119 ], [ 0, %113 ], [ 0, %122 ]
  %134 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 3
  store i32 %133, i32* %134, align 4
  %135 = icmp eq i64 %50, 0
  br i1 %135, label %145, label %136

136:                                              ; preds = %132
  %137 = add i64 %50, -1
  %138 = load i64, i64* %43, align 8
  %139 = icmp ugt i64 %138, %137
  br i1 %139, label %141, label %140, !prof !2

140:                                              ; preds = %136
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !3
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #9, !srcloc !4
  unreachable

141:                                              ; preds = %136
  %142 = load float*, float** %44, align 8
  %143 = getelementptr inbounds float, float* %142, i64 %137
  %144 = load float, float* %143, align 4
  br label %145

145:                                              ; preds = %132, %141
  %146 = phi float [ %144, %141 ], [ 0.000000e+00, %132 ]
  %147 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %66, i64 0, i32 0, i32 0
  store float %146, float* %147, align 4
  %148 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 0, i32 1
  %149 = bitcast float* %148 to i32*
  store i32 0, i32* %149, align 4
  %150 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 5
  store i8 0, i8* %150, align 4
  %151 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %39, align 8
  %152 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %151, i64 4
  %153 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %152, align 8
  %154 = call zeroext i1 %153(%class.CPDF_Font* %3) #9
  br i1 %154, label %204, label %155

155:                                              ; preds = %145
  %156 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %41, align 8
  %157 = icmp eq %class.CPDF_StreamAcc* %156, null
  br i1 %157, label %158, label %204

158:                                              ; preds = %155
  %159 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %39, align 8
  %160 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %159, i64 23
  %161 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %160, align 8
  %162 = call zeroext i1 %161(%class.CPDF_Font* %3) #9
  %163 = xor i1 %162, true
  %164 = or i1 %24, %163
  br i1 %164, label %204, label %165

165:                                              ; preds = %158
  %166 = getelementptr inbounds %class.CFX_Font, %class.CFX_Font* %114, i64 0, i32 4, i32 0, i32 0, i32 0
  %167 = load %class.CFX_SubstFont*, %class.CFX_SubstFont** %166, align 8
  %168 = getelementptr inbounds %class.CFX_SubstFont, %class.CFX_SubstFont* %167, i64 0, i32 7
  %169 = load i8, i8* %168, align 2, !range !5
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %171, label %204

171:                                              ; preds = %165
  %172 = load i32 (%class.CPDF_Font*, i32)**, i32 (%class.CPDF_Font*, i32)*** %42, align 8
  %173 = getelementptr inbounds i32 (%class.CPDF_Font*, i32)*, i32 (%class.CPDF_Font*, i32)** %172, i64 24
  %174 = load i32 (%class.CPDF_Font*, i32)*, i32 (%class.CPDF_Font*, i32)** %173, align 8
  %175 = call i32 %174(%class.CPDF_Font* %3, i32 %53) #9
  %176 = icmp eq %class.CFX_Font* %114, null
  br i1 %176, label %204, label %177

177:                                              ; preds = %171
  %178 = load i32, i32* %89, align 4
  %179 = call i32 @_ZN8CFX_Font13GetGlyphWidthEj(%class.CFX_Font* nonnull %114, i32 %178) #9
  %180 = icmp ne i32 %179, 0
  %181 = add nsw i32 %179, 1
  %182 = icmp sgt i32 %175, %181
  %183 = and i1 %180, %182
  br i1 %183, label %184, label %191

184:                                              ; preds = %177
  %185 = sub nsw i32 %175, %179
  %186 = sitofp i32 %185 to float
  %187 = fmul float %186, %4
  %188 = fdiv float %187, 2.000000e+03
  %189 = load float, float* %147, align 4
  %190 = fadd float %188, %189
  store float %190, float* %147, align 4
  br label %204

191:                                              ; preds = %177
  %192 = icmp ne i32 %175, 0
  %193 = and i1 %192, %180
  %194 = icmp slt i32 %175, %179
  %195 = and i1 %194, %193
  br i1 %195, label %196, label %204

196:                                              ; preds = %191
  %197 = sitofp i32 %175 to float
  %198 = sitofp i32 %179 to float
  %199 = fdiv float %197, %198
  %200 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 0
  store float %199, float* %200, align 4
  %201 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 1
  store float 0.000000e+00, float* %201, align 4
  %202 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 2
  store float 0.000000e+00, float* %202, align 4
  %203 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 3
  store float 1.000000e+00, float* %203, align 4
  store i8 1, i8* %150, align 4
  br label %204

204:                                              ; preds = %155, %171, %145, %184, %196, %191, %158, %165
  %205 = phi float [ 1.000000e+00, %155 ], [ 1.000000e+00, %165 ], [ 1.000000e+00, %158 ], [ 1.000000e+00, %184 ], [ %199, %196 ], [ 1.000000e+00, %191 ], [ 1.000000e+00, %145 ], [ 1.000000e+00, %171 ]
  br i1 %20, label %206, label %259

206:                                              ; preds = %204
  %207 = call zeroext i16 @_ZNK12CPDF_CIDFont15CIDFromCharCodeEj(%class.CPDF_CIDFont* nonnull %19, i32 %53) #9
  br i1 %24, label %208, label %223

208:                                              ; preds = %206
  %209 = bitcast %class.TextCharPos* %66 to i32*
  %210 = load i32, i32* %209, align 4
  store i32 0, i32* %209, align 4
  store i32 %210, i32* %149, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #9
  store i16 -21846, i16* %46, align 2
  store i16 -21846, i16* %47, align 2
  call void @_ZNK12CPDF_CIDFont13GetVertOriginEt(%class.CFX_PTemplate.144* nonnull sret %9, %class.CPDF_CIDFont* nonnull %19, i16 zeroext %207) #9
  %211 = load i16, i16* %46, align 2
  %212 = sitofp i16 %211 to float
  %213 = fmul float %212, %4
  %214 = fdiv float %213, 1.000000e+03
  %215 = load float, float* %147, align 4
  %216 = fsub float %215, %214
  store float %216, float* %147, align 4
  %217 = load i16, i16* %47, align 2
  %218 = sitofp i16 %217 to float
  %219 = fmul float %218, %4
  %220 = fdiv float %219, 1.000000e+03
  %221 = load float, float* %148, align 4
  %222 = fsub float %221, %220
  store float %222, float* %148, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #9
  br label %223

223:                                              ; preds = %208, %206
  %224 = call i8* @_ZNK12CPDF_CIDFont15GetCIDTransformEt(%class.CPDF_CIDFont* nonnull %19, i16 zeroext %207) #9
  %225 = icmp ne i8* %224, null
  %226 = load i8, i8* %7, align 1
  %227 = icmp eq i8 %226, 0
  %228 = and i1 %225, %227
  br i1 %228, label %229, label %259

229:                                              ; preds = %223
  %230 = load i8, i8* %224, align 1
  %231 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %230) #9
  %232 = fmul float %205, %231
  %233 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 0
  store float %232, float* %233, align 4
  %234 = getelementptr inbounds i8, i8* %224, i64 1
  %235 = load i8, i8* %234, align 1
  %236 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %235) #9
  %237 = fmul float %205, %236
  %238 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 1
  store float %237, float* %238, align 4
  %239 = getelementptr inbounds i8, i8* %224, i64 2
  %240 = load i8, i8* %239, align 1
  %241 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %240) #9
  %242 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 2
  store float %241, float* %242, align 4
  %243 = getelementptr inbounds i8, i8* %224, i64 3
  %244 = load i8, i8* %243, align 1
  %245 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %244) #9
  %246 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %65, i64 -1, i32 7, i64 3
  store float %245, float* %246, align 4
  %247 = getelementptr inbounds i8, i8* %224, i64 4
  %248 = load i8, i8* %247, align 1
  %249 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %248) #9
  %250 = fmul float %249, %4
  %251 = load float, float* %147, align 4
  %252 = fadd float %251, %250
  store float %252, float* %147, align 4
  %253 = getelementptr inbounds i8, i8* %224, i64 5
  %254 = load i8, i8* %253, align 1
  %255 = call float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext %254) #9
  %256 = fmul float %255, %4
  %257 = load float, float* %148, align 4
  %258 = fadd float %257, %256
  store float %258, float* %148, align 4
  store i8 1, i8* %150, align 4
  br label %259

259:                                              ; preds = %229, %223, %204
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %8) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  %260 = load i64, i64* %13, align 8
  br label %261

261:                                              ; preds = %48, %259
  %262 = phi i64 [ %49, %48 ], [ %260, %259 ]
  %263 = add nuw i64 %50, 1
  %264 = icmp ult i64 %263, %262
  br i1 %264, label %48, label %265

265:                                              ; preds = %261, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE7reserveEm(%"class.std::__1::vector.105"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %class.TextCharPos** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.105"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 44
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %class.TextCharPos*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %class.TextCharPos** %13 to i64*
  %15 = icmp ugt i64 %1, 419244183493398900
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #10
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 44
  %21 = mul i64 %1, 44
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast i8* %22 to %class.TextCharPos*
  %24 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %23, i64 %20
  %25 = ptrtoint %class.TextCharPos* %24 to i64
  %26 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %23, i64 %1
  %27 = ptrtoint %class.TextCharPos* %26 to i64
  %28 = inttoptr i64 %18 to %class.TextCharPos*
  %29 = icmp eq %class.TextCharPos* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %class.TextCharPos* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %class.TextCharPos* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %31, i64 -1
  %34 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %32, i64 -1
  tail call void @_ZN11TextCharPosC1ERKS_(%class.TextCharPos* %33, %class.TextCharPos* dereferenceable(44) %34) #9
  %35 = icmp eq %class.TextCharPos* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %class.TextCharPos* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %class.TextCharPos*, %class.TextCharPos** %13, align 8
  %40 = inttoptr i64 %38 to %class.TextCharPos*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %class.TextCharPos* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %class.TextCharPos* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %class.TextCharPos* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %class.TextCharPos* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %48, i64 -1
  tail call void @_ZN11TextCharPosD1Ev(%class.TextCharPos* %49) #9
  %50 = icmp eq %class.TextCharPos* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK12CPDF_CIDFont13IsVertWritingEv(%class.CPDF_CIDFont*) unnamed_addr #2

declare %class.CPDF_Stream* @_ZN15CPDF_Dictionary12GetStreamForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN9CPDF_Font24FallbackFontFromCharcodeEj(%class.CPDF_Font*, i32) local_unnamed_addr #2

declare i32 @_ZN9CPDF_Font25FallbackGlyphFromCharcodeEij(%class.CPDF_Font*, i32, i32) local_unnamed_addr #2

declare %class.CFX_Font* @_ZN9CPDF_Font15GetFontFallbackEi(%class.CPDF_Font*, i32) local_unnamed_addr #2

declare i32 @_ZN8CFX_Font13GetGlyphWidthEj(%class.CFX_Font*, i32) local_unnamed_addr #2

declare zeroext i16 @_ZNK12CPDF_CIDFont15CIDFromCharCodeEj(%class.CPDF_CIDFont*, i32) local_unnamed_addr #2

declare void @_ZNK12CPDF_CIDFont13GetVertOriginEt(%class.CFX_PTemplate.144* sret, %class.CPDF_CIDFont*, i16 zeroext) local_unnamed_addr #2

declare i8* @_ZNK12CPDF_CIDFont15GetCIDTransformEt(%class.CPDF_CIDFont*, i16 zeroext) local_unnamed_addr #2

declare float @_ZN12CPDF_CIDFont19CIDTransformToFloatEh(i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN11TextCharPosD1Ev(%class.TextCharPos*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN11TextCharPosC1ERKS_(%class.TextCharPos*, %class.TextCharPos* dereferenceable(44)) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI11TextCharPosNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector.105"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %class.TextCharPos** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector.105"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 44
  %9 = add nsw i64 %8, 1
  %10 = icmp ugt i64 %9, 419244183493398900
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::vector.105"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #10
  unreachable

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %class.TextCharPos** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %6
  %18 = sdiv exact i64 %17, 44
  %19 = icmp ult i64 %18, 209622091746699450
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = shl nsw i64 %18, 1
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %20
  %26 = phi i64 [ %23, %20 ], [ 419244183493398900, %13 ]
  %27 = mul i64 %26, 44
  %28 = tail call i8* @_Znwm(i64 %27) #11
  %29 = bitcast i8* %28 to %class.TextCharPos*
  br label %30

30:                                               ; preds = %20, %25
  %31 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %32 = phi %class.TextCharPos* [ %29, %25 ], [ null, %20 ]
  %33 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %32, i64 %8
  %34 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %32, i64 %31
  %35 = ptrtoint %class.TextCharPos* %34 to i64
  tail call void @_ZN11TextCharPosC1Ev(%class.TextCharPos* %33) #9
  %36 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %33, i64 1
  %37 = ptrtoint %class.TextCharPos* %36 to i64
  %38 = getelementptr inbounds %"class.std::__1::vector.105", %"class.std::__1::vector.105"* %0, i64 0, i32 0, i32 0
  %39 = load %class.TextCharPos*, %class.TextCharPos** %38, align 8
  %40 = load %class.TextCharPos*, %class.TextCharPos** %2, align 8
  %41 = icmp eq %class.TextCharPos* %40, %39
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = ptrtoint %class.TextCharPos* %39 to i64
  br label %53

44:                                               ; preds = %30, %44
  %45 = phi %class.TextCharPos* [ %47, %44 ], [ %33, %30 ]
  %46 = phi %class.TextCharPos* [ %48, %44 ], [ %40, %30 ]
  %47 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %45, i64 -1
  %48 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %46, i64 -1
  tail call void @_ZN11TextCharPosC1ERKS_(%class.TextCharPos* %47, %class.TextCharPos* dereferenceable(44) %48) #9
  %49 = icmp eq %class.TextCharPos* %48, %39
  br i1 %49, label %50, label %44

50:                                               ; preds = %44
  %51 = load i64, i64* %5, align 8
  %52 = load %class.TextCharPos*, %class.TextCharPos** %2, align 8
  br label %53

53:                                               ; preds = %42, %50
  %54 = phi %class.TextCharPos* [ %39, %42 ], [ %52, %50 ]
  %55 = phi %class.TextCharPos* [ %33, %42 ], [ %47, %50 ]
  %56 = phi i64 [ %43, %42 ], [ %51, %50 ]
  %57 = ptrtoint %class.TextCharPos* %55 to i64
  store i64 %57, i64* %5, align 8
  store i64 %37, i64* %3, align 8
  store i64 %35, i64* %15, align 8
  %58 = inttoptr i64 %56 to %class.TextCharPos*
  %59 = icmp eq %class.TextCharPos* %54, %58
  br i1 %59, label %64, label %60

60:                                               ; preds = %53, %60
  %61 = phi %class.TextCharPos* [ %62, %60 ], [ %54, %53 ]
  %62 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %61, i64 -1
  tail call void @_ZN11TextCharPosD1Ev(%class.TextCharPos* %62) #9
  %63 = icmp eq %class.TextCharPos* %62, %58
  br i1 %63, label %64, label %60

64:                                               ; preds = %60, %53
  %65 = icmp eq i64 %56, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %64
  %67 = inttoptr i64 %56 to i8*
  tail call void @_ZdlPv(i8* %67) #11
  br label %68

68:                                               ; preds = %64, %66
  ret void
}

declare void @_ZN11TextCharPosC1Ev(%class.TextCharPos*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 -2143939427}
!4 = !{i32 -2143939406}
!5 = !{i8 0, i8 2}
