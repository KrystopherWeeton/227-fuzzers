; ModuleID = '../../extensions/common/value_builder.cc'
source_filename = "../../extensions/common/value_builder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::DictionaryBuilder" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::DictionaryValue"* }
%"class.base::DictionaryValue" = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.extensions::ListBuilder" = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.base::ListValue"* }
%"class.base::ListValue" = type { %"class.base::Value" }

@_ZN10extensions17DictionaryBuilderC1Ev = hidden unnamed_addr alias void (%"class.extensions::DictionaryBuilder"*), void (%"class.extensions::DictionaryBuilder"*)* @_ZN10extensions17DictionaryBuilderC2Ev
@_ZN10extensions17DictionaryBuilderC1ERKN4base15DictionaryValueE = hidden unnamed_addr alias void (%"class.extensions::DictionaryBuilder"*, %"class.base::DictionaryValue"*), void (%"class.extensions::DictionaryBuilder"*, %"class.base::DictionaryValue"*)* @_ZN10extensions17DictionaryBuilderC2ERKN4base15DictionaryValueE
@_ZN10extensions17DictionaryBuilderD1Ev = hidden unnamed_addr alias void (%"class.extensions::DictionaryBuilder"*), void (%"class.extensions::DictionaryBuilder"*)* @_ZN10extensions17DictionaryBuilderD2Ev
@_ZN10extensions11ListBuilderC1Ev = hidden unnamed_addr alias void (%"class.extensions::ListBuilder"*), void (%"class.extensions::ListBuilder"*)* @_ZN10extensions11ListBuilderC2Ev
@_ZN10extensions11ListBuilderD1Ev = hidden unnamed_addr alias void (%"class.extensions::ListBuilder"*), void (%"class.extensions::ListBuilder"*)* @_ZN10extensions11ListBuilderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17DictionaryBuilderC2Ev(%"class.extensions::DictionaryBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #6
  %3 = bitcast i8* %2 to %"class.base::DictionaryValue"*
  tail call void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"* nonnull %3) #7
  %4 = ptrtoint i8* %2 to i64
  %5 = bitcast %"class.extensions::DictionaryBuilder"* %0 to i64*
  store i64 %4, i64* %5, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare void @_ZN4base15DictionaryValueC1Ev(%"class.base::DictionaryValue"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17DictionaryBuilderC2ERKN4base15DictionaryValueE(%"class.extensions::DictionaryBuilder"* nocapture, %"class.base::DictionaryValue"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = tail call %"class.base::DictionaryValue"* @_ZNK4base15DictionaryValue14CreateDeepCopyEv(%"class.base::DictionaryValue"* %1) #7
  %4 = getelementptr inbounds %"class.extensions::DictionaryBuilder", %"class.extensions::DictionaryBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::DictionaryValue"* %3, %"class.base::DictionaryValue"** %4, align 8
  ret void
}

declare %"class.base::DictionaryValue"* @_ZNK4base15DictionaryValue14CreateDeepCopyEv(%"class.base::DictionaryValue"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions17DictionaryBuilderD2Ev(%"class.extensions::DictionaryBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::DictionaryBuilder", %"class.extensions::DictionaryBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %2, align 8
  store %"class.base::DictionaryValue"* null, %"class.base::DictionaryValue"** %2, align 8
  %4 = icmp eq %"class.base::DictionaryValue"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::DictionaryValue", %"class.base::DictionaryValue"* %3, i64 0, i32 0
  tail call void @_ZN4base5ValueD2Ev(%"class.base::Value"* nonnull %6) #7
  %7 = bitcast %"class.base::DictionaryValue"* %3 to i8*
  tail call void @_ZdlPv(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions17DictionaryBuilder6ToJSONEv(%"class.std::__1::basic_string"* noalias sret, %"class.extensions::DictionaryBuilder"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #7
  %4 = getelementptr inbounds %"class.extensions::DictionaryBuilder", %"class.extensions::DictionaryBuilder"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.base::DictionaryValue"*, %"class.base::DictionaryValue"** %4, align 8
  %6 = getelementptr inbounds %"class.base::DictionaryValue", %"class.base::DictionaryValue"* %5, i64 0, i32 0
  %7 = tail call zeroext i1 @_ZN4base10JSONWriter16WriteWithOptionsERKNS_5ValueEiPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* dereferenceable(32) %6, i32 4, %"class.std::__1::basic_string"* %0, i64 200) #7
  ret void
}

declare zeroext i1 @_ZN4base10JSONWriter16WriteWithOptionsERKNS_5ValueEiPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* dereferenceable(32), i32, %"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions11ListBuilderC2Ev(%"class.extensions::ListBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #6
  %3 = bitcast i8* %2 to %"class.base::ListValue"*
  tail call void @_ZN4base9ListValueC1Ev(%"class.base::ListValue"* nonnull %3) #7
  %4 = ptrtoint i8* %2 to i64
  %5 = bitcast %"class.extensions::ListBuilder"* %0 to i64*
  store i64 %4, i64* %5, align 8
  ret void
}

declare void @_ZN4base9ListValueC1Ev(%"class.base::ListValue"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions11ListBuilderD2Ev(%"class.extensions::ListBuilder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ListBuilder", %"class.extensions::ListBuilder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.base::ListValue"*, %"class.base::ListValue"** %2, align 8
  store %"class.base::ListValue"* null, %"class.base::ListValue"** %2, align 8
  %4 = icmp eq %"class.base::ListValue"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::ListValue", %"class.base::ListValue"* %3, i64 0, i32 0
  tail call void @_ZN4base5ValueD2Ev(%"class.base::Value"* nonnull %6) #7
  %7 = bitcast %"class.base::ListValue"* %3 to i8*
  tail call void @_ZdlPv(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base5ValueD2Ev(%"class.base::Value"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
