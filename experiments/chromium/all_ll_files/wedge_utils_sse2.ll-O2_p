; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/wedge_utils_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/wedge_utils_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @av1_wedge_sse_from_residuals_sse2(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = sub i32 8, %3
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = getelementptr inbounds i16, i16* %1, i64 %6
  %9 = getelementptr inbounds i8, i8* %2, i64 %6
  %10 = sext i32 %5 to i64
  %11 = sub i32 0, %3
  %12 = sext i32 %11 to i64
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i64 [ %63, %13 ], [ %12, %4 ]
  %15 = phi i64 [ %62, %13 ], [ %10, %4 ]
  %16 = phi <2 x i64> [ %61, %13 ], [ zeroinitializer, %4 ]
  %17 = getelementptr inbounds i16, i16* %7, i64 %14
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 16
  %20 = getelementptr inbounds i16, i16* %7, i64 %15
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 16
  %23 = getelementptr inbounds i16, i16* %8, i64 %14
  %24 = bitcast i16* %23 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 16
  %26 = getelementptr inbounds i16, i16* %8, i64 %15
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = getelementptr inbounds i8, i8* %9, i64 %14
  %30 = bitcast i8* %29 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 16
  %32 = shufflevector <8 x i16> %25, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = shufflevector <8 x i16> %25, <8 x i16> %19, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = shufflevector <8 x i16> %28, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %28, <8 x i16> %22, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = shufflevector <8 x i16> %38, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %40 = shufflevector <8 x i16> %38, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 64, i16 64, i16 64, i16 64>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %41 = bitcast <16 x i8> %37 to <8 x i16>
  %42 = shufflevector <8 x i16> %41, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %43 = shufflevector <8 x i16> %41, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 64, i16 64, i16 64, i16 64>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %44 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %39) #3
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> %40) #3
  %46 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %42) #3
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %43) #3
  %48 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %44, <4 x i32> %45) #3
  %49 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> %47) #3
  %50 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %48) #3
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %49, <8 x i16> %49) #3
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = and <2 x i64> %51, <i64 4294967295, i64 4294967295>
  %55 = lshr <2 x i64> %51, <i64 32, i64 32>
  %56 = and <2 x i64> %53, <i64 4294967295, i64 4294967295>
  %57 = lshr <2 x i64> %53, <i64 32, i64 32>
  %58 = add <2 x i64> %54, %16
  %59 = add <2 x i64> %58, %55
  %60 = add <2 x i64> %59, %56
  %61 = add <2 x i64> %60, %57
  %62 = add nsw i64 %15, 16
  %63 = add nsw i64 %14, 16
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %13

65:                                               ; preds = %13
  %66 = bitcast <2 x i64> %61 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = bitcast <16 x i8> %67 to <2 x i64>
  %69 = add <2 x i64> %61, %68
  %70 = extractelement <2 x i64> %69, i32 0
  %71 = add i64 %70, 2048
  %72 = lshr i64 %71, 12
  ret i64 %72
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden signext i8 @av1_wedge_sign_from_residuals_sse2(i16* nocapture readonly, i8* nocapture readonly, i32, i64) local_unnamed_addr #0 {
  br label %5

5:                                                ; preds = %5, %4
  %6 = phi <4 x i32> [ zeroinitializer, %4 ], [ %76, %5 ]
  %7 = phi <4 x i32> [ zeroinitializer, %4 ], [ %72, %5 ]
  %8 = phi i32 [ %2, %4 ], [ %79, %5 ]
  %9 = phi i8* [ %1, %4 ], [ %78, %5 ]
  %10 = phi i16* [ %0, %4 ], [ %77, %5 ]
  %11 = bitcast i8* %9 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 16
  %13 = getelementptr inbounds i8, i8* %9, i64 16
  %14 = bitcast i8* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 16
  %16 = getelementptr inbounds i8, i8* %9, i64 32
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16
  %19 = getelementptr inbounds i8, i8* %9, i64 48
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 16
  %22 = bitcast i16* %10 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 16
  %24 = getelementptr inbounds i16, i16* %10, i64 8
  %25 = bitcast i16* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 16
  %27 = getelementptr inbounds i16, i16* %10, i64 16
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 16
  %30 = getelementptr inbounds i16, i16* %10, i64 24
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 16
  %33 = getelementptr inbounds i16, i16* %10, i64 32
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 16
  %36 = getelementptr inbounds i16, i16* %10, i64 40
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 16
  %39 = getelementptr inbounds i16, i16* %10, i64 48
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 16
  %42 = getelementptr inbounds i16, i16* %10, i64 56
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 16
  %45 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %21, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %45 to <8 x i16>
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> %53) #3
  %55 = bitcast <16 x i8> %46 to <8 x i16>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %26, <8 x i16> %55) #3
  %57 = bitcast <16 x i8> %47 to <8 x i16>
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> %57) #3
  %59 = bitcast <16 x i8> %48 to <8 x i16>
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %59) #3
  %61 = bitcast <16 x i8> %49 to <8 x i16>
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %61) #3
  %63 = bitcast <16 x i8> %50 to <8 x i16>
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %63) #3
  %65 = bitcast <16 x i8> %51 to <8 x i16>
  %66 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %41, <8 x i16> %65) #3
  %67 = bitcast <16 x i8> %52 to <8 x i16>
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %44, <8 x i16> %67) #3
  %69 = add <4 x i32> %54, %7
  %70 = add <4 x i32> %69, %56
  %71 = add <4 x i32> %70, %58
  %72 = add <4 x i32> %71, %60
  %73 = add <4 x i32> %62, %6
  %74 = add <4 x i32> %73, %64
  %75 = add <4 x i32> %74, %66
  %76 = add <4 x i32> %75, %68
  %77 = getelementptr inbounds i16, i16* %10, i64 64
  %78 = getelementptr inbounds i8, i8* %9, i64 64
  %79 = add nsw i32 %8, -64
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %5

81:                                               ; preds = %5
  %82 = ashr <4 x i32> %72, <i32 31, i32 31, i32 31, i32 31>
  %83 = shufflevector <4 x i32> %72, <4 x i32> %82, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %84 = bitcast <4 x i32> %83 to <2 x i64>
  %85 = shufflevector <4 x i32> %72, <4 x i32> %82, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = ashr <4 x i32> %76, <i32 31, i32 31, i32 31, i32 31>
  %88 = shufflevector <4 x i32> %76, <4 x i32> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = bitcast <4 x i32> %88 to <2 x i64>
  %90 = shufflevector <4 x i32> %76, <4 x i32> %87, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = add <2 x i64> %86, %84
  %93 = add <2 x i64> %92, %89
  %94 = add <2 x i64> %93, %91
  %95 = bitcast <2 x i64> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = add <2 x i64> %94, %97
  %99 = extractelement <2 x i64> %98, i32 0
  %100 = icmp sgt i64 %99, %3
  %101 = zext i1 %100 to i8
  ret i8 %101
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_wedge_compute_delta_squares_sse2(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i32) local_unnamed_addr #1 {
  br label %5

5:                                                ; preds = %5, %4
  %6 = phi i32 [ %3, %4 ], [ %78, %5 ]
  %7 = phi i16* [ %2, %4 ], [ %76, %5 ]
  %8 = phi i16* [ %1, %4 ], [ %75, %5 ]
  %9 = phi i16* [ %0, %4 ], [ %77, %5 ]
  %10 = bitcast i16* %8 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 16
  %12 = bitcast i16* %7 to <8 x i16>*
  %13 = load <8 x i16>, <8 x i16>* %12, align 16
  %14 = getelementptr inbounds i16, i16* %8, i64 8
  %15 = bitcast i16* %14 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = getelementptr inbounds i16, i16* %7, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 16
  %20 = getelementptr inbounds i16, i16* %8, i64 16
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 16
  %23 = getelementptr inbounds i16, i16* %7, i64 16
  %24 = bitcast i16* %23 to <8 x i16>*
  %25 = load <8 x i16>, <8 x i16>* %24, align 16
  %26 = getelementptr inbounds i16, i16* %8, i64 24
  %27 = bitcast i16* %26 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = getelementptr inbounds i16, i16* %7, i64 24
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = shufflevector <8 x i16> %11, <8 x i16> %13, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = shufflevector <8 x i16> %11, <8 x i16> %13, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = shufflevector <8 x i16> %16, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = shufflevector <8 x i16> %16, <8 x i16> %19, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = shufflevector <8 x i16> %22, <8 x i16> %25, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %37 = shufflevector <8 x i16> %22, <8 x i16> %25, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %38 = shufflevector <8 x i16> %28, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = shufflevector <8 x i16> %28, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %40 = xor <8 x i16> %32, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %41 = add <8 x i16> %40, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %42 = xor <8 x i16> %33, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %43 = add <8 x i16> %42, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %44 = xor <8 x i16> %34, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %45 = add <8 x i16> %44, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %46 = xor <8 x i16> %35, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %47 = add <8 x i16> %46, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %48 = xor <8 x i16> %36, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %49 = add <8 x i16> %48, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %50 = xor <8 x i16> %37, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %51 = add <8 x i16> %50, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %52 = xor <8 x i16> %38, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %53 = add <8 x i16> %52, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %54 = xor <8 x i16> %39, <i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1, i16 0, i16 -1>
  %55 = add <8 x i16> %54, <i16 0, i16 1, i16 0, i16 1, i16 0, i16 1, i16 0, i16 1>
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %41) #3
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> %43) #3
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %45) #3
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %35, <8 x i16> %47) #3
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %36, <8 x i16> %49) #3
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %37, <8 x i16> %51) #3
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %53) #3
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %55) #3
  %64 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> %57) #3
  %65 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> %59) #3
  %66 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %60, <4 x i32> %61) #3
  %67 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %62, <4 x i32> %63) #3
  %68 = bitcast i16* %9 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %68, align 16
  %69 = getelementptr inbounds i16, i16* %9, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %70, align 16
  %71 = getelementptr inbounds i16, i16* %9, i64 16
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %72, align 16
  %73 = getelementptr inbounds i16, i16* %9, i64 24
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %74, align 16
  %75 = getelementptr inbounds i16, i16* %8, i64 32
  %76 = getelementptr inbounds i16, i16* %7, i64 32
  %77 = getelementptr inbounds i16, i16* %9, i64 32
  %78 = add nsw i32 %6, -32
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %5

80:                                               ; preds = %5
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
