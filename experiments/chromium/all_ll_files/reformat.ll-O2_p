; ModuleID = '../../third_party/libavif/src/src/reformat.c'
source_filename = "../../third_party/libavif/src/src/reformat.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.avifReformatState = type { float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, %struct.avifPixelFormatInfo, [4096 x float], [4096 x float], i32, i32 }
%struct.avifPixelFormatInfo = type { i32, i32, i32 }
%struct.avifImage = type { i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i32], i32, i32, i8*, i32, i32, i32, %struct.avifRWData, i16, i16, i16, i32, %struct.avifPixelAspectRatioBox, %struct.avifCleanApertureBox, %struct.avifImageRotation, %struct.avifImageMirror, %struct.avifRWData, %struct.avifRWData }
%struct.avifPixelAspectRatioBox = type { i32, i32 }
%struct.avifCleanApertureBox = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.avifImageRotation = type { i8 }
%struct.avifImageMirror = type { i8 }
%struct.avifRWData = type { i8*, i64 }
%struct.avifRGBImage = type { i32, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.YUVBlock = type { float, float, float }
%struct.avifAlphaParams = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i8*, i32, i32, i32 }

@__const.avifImageYUVToRGB.state = private unnamed_addr constant %struct.avifReformatState { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %struct.avifPixelFormatInfo { i32 -1431655766, i32 -1431655766, i32 -1431655766 }, [4096 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4096 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i32 -1431655766 }, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avifImageRGBToYUV(%struct.avifImage*, %struct.avifRGBImage* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.avifReformatState, align 4
  %4 = alloca [2 x [2 x %struct.YUVBlock]], align 16
  %5 = alloca %struct.avifAlphaParams, align 8
  %6 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %730, label %9

9:                                                ; preds = %2
  %10 = bitcast %struct.avifReformatState* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32876, i8* nonnull %10) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* align 4 bitcast (%struct.avifReformatState* @__const.avifImageYUVToRGB.state to i8*), i64 32876, i1 false)
  %11 = call fastcc i32 @avifPrepareReformatState(%struct.avifImage* %0, %struct.avifRGBImage* %1, %struct.avifReformatState* nonnull %3)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %728, label %13

13:                                               ; preds = %9
  call void @avifImageAllocatePlanes(%struct.avifImage* %0, i32 1) #4
  %14 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = call i32 @avifRGBFormatHasAlpha(i32 %15) #4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %34, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %18
  call void @avifImageAllocatePlanes(%struct.avifImage* %0, i32 2) #4
  %23 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 13
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %25, label %29, label %32

29:                                               ; preds = %22
  %30 = xor i1 %28, true
  %31 = zext i1 %30 to i32
  br label %34

32:                                               ; preds = %22
  %33 = select i1 %28, i32 2, i32 0
  br label %34

34:                                               ; preds = %29, %32, %18, %13
  %35 = phi i32 [ 0, %18 ], [ 0, %13 ], [ %33, %32 ], [ %31, %29 ]
  %36 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %41 = load float, float* %40, align 4
  %42 = bitcast [2 x [2 x %struct.YUVBlock]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %42) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 -1, i64 48, i1 false)
  %43 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %46 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %47 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %94, label %50

50:                                               ; preds = %34
  %51 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %52 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 4
  %53 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %54 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %55 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %56 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %57 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %58 = icmp eq i32 %35, 0
  %59 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 10
  %60 = icmp eq i32 %35, 1
  %61 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 25
  %62 = fsub float 1.000000e+00, %41
  %63 = fmul float %62, 2.000000e+00
  %64 = fsub float 1.000000e+00, %37
  %65 = fmul float %64, 2.000000e+00
  %66 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 3
  %67 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 19
  %68 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 16
  %69 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %70 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %71 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 20
  %72 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 17
  %73 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %74 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  %75 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %76 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %77 = load i32, i32* %51, align 8
  %78 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 0, i64 0, i32 1
  %79 = bitcast float* %78 to <2 x float>*
  %80 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 1, i64 0, i32 1
  %81 = bitcast float* %80 to <2 x float>*
  %82 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 0, i64 1, i32 1
  %83 = bitcast float* %82 to <2 x float>*
  %84 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 1, i64 1, i32 1
  %85 = bitcast float* %84 to <2 x float>*
  br label %86

86:                                               ; preds = %50, %100
  %87 = phi i32 [ %48, %50 ], [ %101, %100 ]
  %88 = phi i32 [ %77, %50 ], [ %102, %100 ]
  %89 = phi i32 [ 0, %50 ], [ %103, %100 ]
  %90 = icmp eq i32 %88, 0
  br i1 %90, label %100, label %91

91:                                               ; preds = %86
  %92 = or i32 %89, 1
  %93 = lshr exact i32 %89, 1
  br label %105

94:                                               ; preds = %100, %34
  %95 = phi i32 [ 0, %34 ], [ %101, %100 ]
  %96 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  %99 = ptrtoint i8* %97 to i64
  br i1 %98, label %727, label %673

100:                                              ; preds = %668, %86
  %101 = phi i32 [ %87, %86 ], [ %672, %668 ]
  %102 = phi i32 [ 0, %86 ], [ %670, %668 ]
  %103 = add i32 %89, 2
  %104 = icmp ult i32 %103, %101
  br i1 %104, label %86, label %94

105:                                              ; preds = %668, %91
  %106 = phi i32 [ %87, %91 ], [ %672, %668 ]
  %107 = phi i32 [ %88, %91 ], [ %670, %668 ]
  %108 = phi i32 [ 0, %91 ], [ %669, %668 ]
  %109 = or i32 %108, 1
  %110 = icmp ult i32 %109, %107
  %111 = select i1 %110, i32 2, i32 1
  %112 = icmp ult i32 %92, %106
  %113 = select i1 %112, i32 2, i32 1
  %114 = zext i32 %111 to i64
  %115 = zext i32 %113 to i64
  br label %116

116:                                              ; preds = %105, %125
  %117 = phi i64 [ 0, %105 ], [ %126, %125 ]
  %118 = trunc i64 %117 to i32
  %119 = add i32 %89, %118
  br label %128

120:                                              ; preds = %125
  %121 = load i32, i32* %70, align 4
  switch i32 %121, label %668 [
    i32 3, label %427
    i32 2, label %122
  ]

122:                                              ; preds = %120
  %123 = sitofp i32 %111 to float
  %124 = lshr exact i32 %108, 1
  br label %541

125:                                              ; preds = %413
  %126 = add nuw nsw i64 %117, 1
  %127 = icmp ult i64 %126, %115
  br i1 %127, label %116, label %120

128:                                              ; preds = %116, %413
  %129 = phi i64 [ 0, %116 ], [ %414, %413 ]
  %130 = trunc i64 %129 to i32
  %131 = add i32 %108, %130
  %132 = load i32, i32* %52, align 4
  %133 = icmp ugt i32 %132, 1
  %134 = load i8*, i8** %6, align 8
  %135 = load i32, i32* %53, align 4
  %136 = load i32, i32* %54, align 4
  %137 = mul i32 %136, %131
  %138 = load i32, i32* %55, align 8
  %139 = mul i32 %138, %119
  %140 = add i32 %139, %137
  %141 = add i32 %140, %135
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %134, i64 %142
  br i1 %133, label %144, label %162

144:                                              ; preds = %128
  %145 = bitcast i8* %143 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = uitofp i16 %146 to float
  %148 = load i32, i32* %56, align 4
  %149 = add i32 %140, %148
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %134, i64 %150
  %152 = bitcast i8* %151 to i16*
  %153 = load i16, i16* %152, align 2
  %154 = uitofp i16 %153 to float
  %155 = load i32, i32* %57, align 4
  %156 = add i32 %140, %155
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %134, i64 %157
  %159 = bitcast i8* %158 to i16*
  %160 = load i16, i16* %159, align 2
  %161 = uitofp i16 %160 to float
  br label %177

162:                                              ; preds = %128
  %163 = load i8, i8* %143, align 1
  %164 = uitofp i8 %163 to float
  %165 = load i32, i32* %56, align 4
  %166 = add i32 %140, %165
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %134, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = uitofp i8 %169 to float
  %171 = load i32, i32* %57, align 4
  %172 = add i32 %140, %171
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %134, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = uitofp i8 %175 to float
  br label %177

177:                                              ; preds = %162, %144
  %178 = phi float [ %147, %144 ], [ %164, %162 ]
  %179 = phi float [ %154, %144 ], [ %170, %162 ]
  %180 = phi float [ %161, %144 ], [ %176, %162 ]
  %181 = fdiv float %180, %44
  %182 = fdiv float %179, %44
  %183 = fdiv float %178, %44
  br i1 %58, label %220, label %184

184:                                              ; preds = %177
  %185 = load i32, i32* %59, align 4
  %186 = add i32 %140, %185
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %134, i64 %187
  br i1 %133, label %189, label %193

189:                                              ; preds = %184
  %190 = bitcast i8* %188 to i16*
  %191 = load i16, i16* %190, align 2
  %192 = uitofp i16 %191 to float
  br label %196

193:                                              ; preds = %184
  %194 = load i8, i8* %188, align 1
  %195 = uitofp i8 %194 to float
  br label %196

196:                                              ; preds = %193, %189
  %197 = phi float [ %192, %189 ], [ %195, %193 ]
  %198 = fdiv float %197, %44
  %199 = fcmp oeq float %198, 0.000000e+00
  br i1 %60, label %200, label %207

200:                                              ; preds = %196
  br i1 %199, label %220, label %201

201:                                              ; preds = %200
  %202 = fcmp olt float %198, 1.000000e+00
  br i1 %202, label %203, label %220

203:                                              ; preds = %201
  %204 = fmul float %183, %198
  %205 = fmul float %182, %198
  %206 = fmul float %181, %198
  br label %220

207:                                              ; preds = %196
  br i1 %199, label %220, label %208

208:                                              ; preds = %207
  %209 = fcmp olt float %198, 1.000000e+00
  br i1 %209, label %210, label %220

210:                                              ; preds = %208
  %211 = fdiv float %183, %198
  %212 = fdiv float %182, %198
  %213 = fdiv float %181, %198
  %214 = fcmp olt float %211, 1.000000e+00
  %215 = select i1 %214, float %211, float 1.000000e+00
  %216 = fcmp olt float %212, 1.000000e+00
  %217 = select i1 %216, float %212, float 1.000000e+00
  %218 = fcmp olt float %213, 1.000000e+00
  %219 = select i1 %218, float %213, float 1.000000e+00
  br label %220

220:                                              ; preds = %201, %203, %208, %210, %200, %207, %177
  %221 = phi float [ %183, %177 ], [ %204, %203 ], [ %183, %201 ], [ %215, %210 ], [ %183, %208 ], [ 0.000000e+00, %200 ], [ 0.000000e+00, %207 ]
  %222 = phi float [ %182, %177 ], [ %205, %203 ], [ %182, %201 ], [ %217, %210 ], [ %182, %208 ], [ 0.000000e+00, %200 ], [ 0.000000e+00, %207 ]
  %223 = phi float [ %181, %177 ], [ %206, %203 ], [ %181, %201 ], [ %219, %210 ], [ %181, %208 ], [ 0.000000e+00, %200 ], [ 0.000000e+00, %207 ]
  %224 = load i32, i32* %61, align 4
  switch i32 %224, label %238 [
    i32 1, label %225
    i32 2, label %228
  ]

225:                                              ; preds = %220
  %226 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 0
  store float %222, float* %226, align 4
  %227 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 1
  store float %223, float* %227, align 4
  br label %250

228:                                              ; preds = %220
  %229 = fmul float %222, 5.000000e-01
  %230 = fadd float %221, %223
  %231 = fmul float %230, 2.500000e-01
  %232 = fadd float %229, %231
  %233 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 0
  store float %232, float* %233, align 4
  %234 = fsub float %229, %231
  %235 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 1
  store float %234, float* %235, align 4
  %236 = fsub float %221, %223
  %237 = fmul float %236, 5.000000e-01
  br label %250

238:                                              ; preds = %220
  %239 = fmul float %37, %221
  %240 = fmul float %39, %222
  %241 = fadd float %239, %240
  %242 = fmul float %41, %223
  %243 = fadd float %241, %242
  %244 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 0
  store float %243, float* %244, align 4
  %245 = fsub float %223, %243
  %246 = fdiv float %245, %63
  %247 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 1
  store float %246, float* %247, align 4
  %248 = fsub float %221, %243
  %249 = fdiv float %248, %65
  br label %250

250:                                              ; preds = %228, %238, %225
  %251 = phi float [ %237, %228 ], [ %249, %238 ], [ %221, %225 ]
  %252 = phi float [ %234, %228 ], [ %246, %238 ], [ %223, %225 ]
  %253 = phi float [ %232, %228 ], [ %243, %238 ], [ %222, %225 ]
  %254 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 %129, i64 %117, i32 2
  store float %251, float* %254, align 4
  %255 = load i32, i32* %66, align 4
  %256 = icmp ugt i32 %255, 1
  br i1 %256, label %257, label %337

257:                                              ; preds = %250
  %258 = load i8*, i8** %45, align 8
  %259 = shl nsw i32 %131, 1
  %260 = load i32, i32* %46, align 4
  %261 = mul i32 %260, %119
  %262 = add i32 %261, %259
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %258, i64 %263
  %265 = bitcast i8* %264 to i16*
  %266 = load float, float* %67, align 4
  %267 = fmul float %253, %266
  %268 = load float, float* %68, align 4
  %269 = fadd float %267, %268
  %270 = call float @avifRoundf(float %269) #4
  %271 = fptosi float %270 to i32
  %272 = icmp slt i32 %271, 0
  br i1 %272, label %277, label %273

273:                                              ; preds = %257
  %274 = load i32, i32* %69, align 4
  %275 = icmp slt i32 %274, %271
  %276 = select i1 %275, i32 %274, i32 %271
  br label %277

277:                                              ; preds = %257, %273
  %278 = phi i32 [ 0, %257 ], [ %276, %273 ]
  %279 = trunc i32 %278 to i16
  store i16 %279, i16* %265, align 2
  %280 = load i32, i32* %70, align 4
  %281 = icmp eq i32 %280, 1
  br i1 %281, label %282, label %413

282:                                              ; preds = %277
  %283 = load i8*, i8** %73, align 8
  %284 = load i32, i32* %74, align 4
  %285 = mul i32 %284, %119
  %286 = add i32 %285, %259
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %283, i64 %287
  %289 = bitcast i8* %288 to i16*
  %290 = load i32, i32* %61, align 4
  %291 = icmp eq i32 %290, 1
  %292 = load float, float* %67, align 4
  %293 = load float, float* %71, align 4
  %294 = select i1 %291, float %292, float %293
  %295 = fmul float %252, %294
  %296 = load float, float* %68, align 4
  %297 = load float, float* %72, align 4
  %298 = select i1 %291, float %296, float %297
  %299 = fadd float %295, %298
  %300 = call float @avifRoundf(float %299) #4
  %301 = fptosi float %300 to i32
  %302 = icmp slt i32 %301, 0
  br i1 %302, label %307, label %303

303:                                              ; preds = %282
  %304 = load i32, i32* %69, align 4
  %305 = icmp slt i32 %304, %301
  %306 = select i1 %305, i32 %304, i32 %301
  br label %307

307:                                              ; preds = %282, %303
  %308 = phi i32 [ 0, %282 ], [ %306, %303 ]
  %309 = trunc i32 %308 to i16
  store i16 %309, i16* %289, align 2
  %310 = load i8*, i8** %75, align 8
  %311 = load i32, i32* %76, align 4
  %312 = mul i32 %311, %119
  %313 = add i32 %312, %259
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i8, i8* %310, i64 %314
  %316 = bitcast i8* %315 to i16*
  %317 = load i32, i32* %61, align 4
  %318 = icmp eq i32 %317, 1
  %319 = load float, float* %67, align 4
  %320 = load float, float* %71, align 4
  %321 = select i1 %318, float %319, float %320
  %322 = fmul float %251, %321
  %323 = load float, float* %68, align 4
  %324 = load float, float* %72, align 4
  %325 = select i1 %318, float %323, float %324
  %326 = fadd float %322, %325
  %327 = call float @avifRoundf(float %326) #4
  %328 = fptosi float %327 to i32
  %329 = icmp slt i32 %328, 0
  br i1 %329, label %334, label %330

330:                                              ; preds = %307
  %331 = load i32, i32* %69, align 4
  %332 = icmp slt i32 %331, %328
  %333 = select i1 %332, i32 %331, i32 %328
  br label %334

334:                                              ; preds = %307, %330
  %335 = phi i32 [ 0, %307 ], [ %333, %330 ]
  %336 = trunc i32 %335 to i16
  store i16 %336, i16* %316, align 2
  br label %413

337:                                              ; preds = %250
  %338 = load float, float* %67, align 4
  %339 = fmul float %253, %338
  %340 = load float, float* %68, align 4
  %341 = fadd float %339, %340
  %342 = call float @avifRoundf(float %341) #4
  %343 = fptosi float %342 to i32
  %344 = icmp slt i32 %343, 0
  br i1 %344, label %349, label %345

345:                                              ; preds = %337
  %346 = load i32, i32* %69, align 4
  %347 = icmp slt i32 %346, %343
  %348 = select i1 %347, i32 %346, i32 %343
  br label %349

349:                                              ; preds = %337, %345
  %350 = phi i32 [ 0, %337 ], [ %348, %345 ]
  %351 = trunc i32 %350 to i8
  %352 = load i8*, i8** %45, align 8
  %353 = load i32, i32* %46, align 4
  %354 = mul i32 %353, %119
  %355 = add i32 %354, %131
  %356 = zext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %352, i64 %356
  store i8 %351, i8* %357, align 1
  %358 = load i32, i32* %70, align 4
  %359 = icmp eq i32 %358, 1
  br i1 %359, label %360, label %413

360:                                              ; preds = %349
  %361 = load i32, i32* %61, align 4
  %362 = icmp eq i32 %361, 1
  %363 = load float, float* %67, align 4
  %364 = load float, float* %71, align 4
  %365 = select i1 %362, float %363, float %364
  %366 = fmul float %252, %365
  %367 = load float, float* %68, align 4
  %368 = load float, float* %72, align 4
  %369 = select i1 %362, float %367, float %368
  %370 = fadd float %366, %369
  %371 = call float @avifRoundf(float %370) #4
  %372 = fptosi float %371 to i32
  %373 = icmp slt i32 %372, 0
  br i1 %373, label %378, label %374

374:                                              ; preds = %360
  %375 = load i32, i32* %69, align 4
  %376 = icmp slt i32 %375, %372
  %377 = select i1 %376, i32 %375, i32 %372
  br label %378

378:                                              ; preds = %360, %374
  %379 = phi i32 [ 0, %360 ], [ %377, %374 ]
  %380 = trunc i32 %379 to i8
  %381 = load i8*, i8** %73, align 8
  %382 = load i32, i32* %74, align 4
  %383 = mul i32 %382, %119
  %384 = add i32 %383, %131
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds i8, i8* %381, i64 %385
  store i8 %380, i8* %386, align 1
  %387 = load i32, i32* %61, align 4
  %388 = icmp eq i32 %387, 1
  %389 = load float, float* %67, align 4
  %390 = load float, float* %71, align 4
  %391 = select i1 %388, float %389, float %390
  %392 = fmul float %251, %391
  %393 = load float, float* %68, align 4
  %394 = load float, float* %72, align 4
  %395 = select i1 %388, float %393, float %394
  %396 = fadd float %392, %395
  %397 = call float @avifRoundf(float %396) #4
  %398 = fptosi float %397 to i32
  %399 = icmp slt i32 %398, 0
  br i1 %399, label %404, label %400

400:                                              ; preds = %378
  %401 = load i32, i32* %69, align 4
  %402 = icmp slt i32 %401, %398
  %403 = select i1 %402, i32 %401, i32 %398
  br label %404

404:                                              ; preds = %378, %400
  %405 = phi i32 [ 0, %378 ], [ %403, %400 ]
  %406 = trunc i32 %405 to i8
  %407 = load i8*, i8** %75, align 8
  %408 = load i32, i32* %76, align 4
  %409 = mul i32 %408, %119
  %410 = add i32 %409, %131
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds i8, i8* %407, i64 %411
  store i8 %406, i8* %412, align 1
  br label %413

413:                                              ; preds = %277, %334, %349, %404
  %414 = add nuw nsw i64 %129, 1
  %415 = icmp ult i64 %414, %114
  br i1 %415, label %128, label %125

416:                                              ; preds = %737, %427
  %417 = phi <2 x float> [ %432, %427 ], [ %742, %737 ]
  %418 = mul nuw nsw i32 %113, %111
  %419 = sitofp i32 %418 to float
  %420 = extractelement <2 x float> %417, i32 0
  %421 = fdiv float %420, %419
  %422 = extractelement <2 x float> %417, i32 1
  %423 = fdiv float %422, %419
  %424 = lshr exact i32 %108, 1
  %425 = load i32, i32* %66, align 4
  %426 = icmp ugt i32 %425, 1
  br i1 %426, label %433, label %488

427:                                              ; preds = %120
  %428 = load <2 x float>, <2 x float>* %79, align 4
  %429 = fadd <2 x float> %428, zeroinitializer
  %430 = load <2 x float>, <2 x float>* %81, align 4
  %431 = fadd <2 x float> %429, %430
  %432 = select i1 %110, <2 x float> %431, <2 x float> %429
  br i1 %112, label %737, label %416

433:                                              ; preds = %416
  %434 = load i8*, i8** %73, align 8
  %435 = load i32, i32* %74, align 4
  %436 = mul i32 %435, %93
  %437 = add i32 %436, %108
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds i8, i8* %434, i64 %438
  %440 = bitcast i8* %439 to i16*
  %441 = load i32, i32* %61, align 4
  %442 = icmp eq i32 %441, 1
  %443 = load float, float* %67, align 4
  %444 = load float, float* %71, align 4
  %445 = select i1 %442, float %443, float %444
  %446 = fmul float %421, %445
  %447 = load float, float* %68, align 4
  %448 = load float, float* %72, align 4
  %449 = select i1 %442, float %447, float %448
  %450 = fadd float %446, %449
  %451 = call float @avifRoundf(float %450) #4
  %452 = fptosi float %451 to i32
  %453 = icmp slt i32 %452, 0
  br i1 %453, label %458, label %454

454:                                              ; preds = %433
  %455 = load i32, i32* %69, align 4
  %456 = icmp slt i32 %455, %452
  %457 = select i1 %456, i32 %455, i32 %452
  br label %458

458:                                              ; preds = %433, %454
  %459 = phi i32 [ 0, %433 ], [ %457, %454 ]
  %460 = trunc i32 %459 to i16
  store i16 %460, i16* %440, align 2
  %461 = load i8*, i8** %75, align 8
  %462 = load i32, i32* %76, align 4
  %463 = mul i32 %462, %93
  %464 = add i32 %463, %108
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds i8, i8* %461, i64 %465
  %467 = bitcast i8* %466 to i16*
  %468 = load i32, i32* %61, align 4
  %469 = icmp eq i32 %468, 1
  %470 = load float, float* %67, align 4
  %471 = load float, float* %71, align 4
  %472 = select i1 %469, float %470, float %471
  %473 = fmul float %423, %472
  %474 = load float, float* %68, align 4
  %475 = load float, float* %72, align 4
  %476 = select i1 %469, float %474, float %475
  %477 = fadd float %473, %476
  %478 = call float @avifRoundf(float %477) #4
  %479 = fptosi float %478 to i32
  %480 = icmp slt i32 %479, 0
  br i1 %480, label %485, label %481

481:                                              ; preds = %458
  %482 = load i32, i32* %69, align 4
  %483 = icmp slt i32 %482, %479
  %484 = select i1 %483, i32 %482, i32 %479
  br label %485

485:                                              ; preds = %458, %481
  %486 = phi i32 [ 0, %458 ], [ %484, %481 ]
  %487 = trunc i32 %486 to i16
  store i16 %487, i16* %467, align 2
  br label %668

488:                                              ; preds = %416
  %489 = load i32, i32* %61, align 4
  %490 = icmp eq i32 %489, 1
  %491 = load float, float* %67, align 4
  %492 = load float, float* %71, align 4
  %493 = select i1 %490, float %491, float %492
  %494 = fmul float %421, %493
  %495 = load float, float* %68, align 4
  %496 = load float, float* %72, align 4
  %497 = select i1 %490, float %495, float %496
  %498 = fadd float %494, %497
  %499 = call float @avifRoundf(float %498) #4
  %500 = fptosi float %499 to i32
  %501 = icmp slt i32 %500, 0
  br i1 %501, label %506, label %502

502:                                              ; preds = %488
  %503 = load i32, i32* %69, align 4
  %504 = icmp slt i32 %503, %500
  %505 = select i1 %504, i32 %503, i32 %500
  br label %506

506:                                              ; preds = %488, %502
  %507 = phi i32 [ 0, %488 ], [ %505, %502 ]
  %508 = trunc i32 %507 to i8
  %509 = load i8*, i8** %73, align 8
  %510 = load i32, i32* %74, align 4
  %511 = mul i32 %510, %93
  %512 = add i32 %511, %424
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds i8, i8* %509, i64 %513
  store i8 %508, i8* %514, align 1
  %515 = load i32, i32* %61, align 4
  %516 = icmp eq i32 %515, 1
  %517 = load float, float* %67, align 4
  %518 = load float, float* %71, align 4
  %519 = select i1 %516, float %517, float %518
  %520 = fmul float %423, %519
  %521 = load float, float* %68, align 4
  %522 = load float, float* %72, align 4
  %523 = select i1 %516, float %521, float %522
  %524 = fadd float %520, %523
  %525 = call float @avifRoundf(float %524) #4
  %526 = fptosi float %525 to i32
  %527 = icmp slt i32 %526, 0
  br i1 %527, label %532, label %528

528:                                              ; preds = %506
  %529 = load i32, i32* %69, align 4
  %530 = icmp slt i32 %529, %526
  %531 = select i1 %530, i32 %529, i32 %526
  br label %532

532:                                              ; preds = %506, %528
  %533 = phi i32 [ 0, %506 ], [ %531, %528 ]
  %534 = trunc i32 %533 to i8
  %535 = load i8*, i8** %75, align 8
  %536 = load i32, i32* %76, align 4
  %537 = mul i32 %536, %93
  %538 = add i32 %537, %424
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %535, i64 %539
  store i8 %534, i8* %540, align 1
  br label %668

541:                                              ; preds = %122, %665
  %542 = phi i64 [ 0, %122 ], [ %666, %665 ]
  %543 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 0, i64 %542, i32 1
  %544 = bitcast float* %543 to <2 x float>*
  %545 = load <2 x float>, <2 x float>* %544, align 4
  %546 = fadd <2 x float> %545, zeroinitializer
  br i1 %110, label %732, label %547

547:                                              ; preds = %732, %541
  %548 = phi <2 x float> [ %546, %541 ], [ %736, %732 ]
  %549 = extractelement <2 x float> %548, i32 0
  %550 = fdiv float %549, %123
  %551 = extractelement <2 x float> %548, i32 1
  %552 = fdiv float %551, %123
  %553 = trunc i64 %542 to i32
  %554 = add i32 %89, %553
  %555 = load i32, i32* %66, align 4
  %556 = icmp ugt i32 %555, 1
  br i1 %556, label %557, label %612

557:                                              ; preds = %547
  %558 = load i8*, i8** %73, align 8
  %559 = load i32, i32* %74, align 4
  %560 = mul i32 %559, %554
  %561 = add i32 %560, %108
  %562 = zext i32 %561 to i64
  %563 = getelementptr inbounds i8, i8* %558, i64 %562
  %564 = bitcast i8* %563 to i16*
  %565 = load i32, i32* %61, align 4
  %566 = icmp eq i32 %565, 1
  %567 = load float, float* %67, align 4
  %568 = load float, float* %71, align 4
  %569 = select i1 %566, float %567, float %568
  %570 = fmul float %550, %569
  %571 = load float, float* %68, align 4
  %572 = load float, float* %72, align 4
  %573 = select i1 %566, float %571, float %572
  %574 = fadd float %570, %573
  %575 = call float @avifRoundf(float %574) #4
  %576 = fptosi float %575 to i32
  %577 = icmp slt i32 %576, 0
  br i1 %577, label %582, label %578

578:                                              ; preds = %557
  %579 = load i32, i32* %69, align 4
  %580 = icmp slt i32 %579, %576
  %581 = select i1 %580, i32 %579, i32 %576
  br label %582

582:                                              ; preds = %557, %578
  %583 = phi i32 [ 0, %557 ], [ %581, %578 ]
  %584 = trunc i32 %583 to i16
  store i16 %584, i16* %564, align 2
  %585 = load i8*, i8** %75, align 8
  %586 = load i32, i32* %76, align 4
  %587 = mul i32 %586, %554
  %588 = add i32 %587, %108
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds i8, i8* %585, i64 %589
  %591 = bitcast i8* %590 to i16*
  %592 = load i32, i32* %61, align 4
  %593 = icmp eq i32 %592, 1
  %594 = load float, float* %67, align 4
  %595 = load float, float* %71, align 4
  %596 = select i1 %593, float %594, float %595
  %597 = fmul float %552, %596
  %598 = load float, float* %68, align 4
  %599 = load float, float* %72, align 4
  %600 = select i1 %593, float %598, float %599
  %601 = fadd float %597, %600
  %602 = call float @avifRoundf(float %601) #4
  %603 = fptosi float %602 to i32
  %604 = icmp slt i32 %603, 0
  br i1 %604, label %609, label %605

605:                                              ; preds = %582
  %606 = load i32, i32* %69, align 4
  %607 = icmp slt i32 %606, %603
  %608 = select i1 %607, i32 %606, i32 %603
  br label %609

609:                                              ; preds = %582, %605
  %610 = phi i32 [ 0, %582 ], [ %608, %605 ]
  %611 = trunc i32 %610 to i16
  store i16 %611, i16* %591, align 2
  br label %665

612:                                              ; preds = %547
  %613 = load i32, i32* %61, align 4
  %614 = icmp eq i32 %613, 1
  %615 = load float, float* %67, align 4
  %616 = load float, float* %71, align 4
  %617 = select i1 %614, float %615, float %616
  %618 = fmul float %550, %617
  %619 = load float, float* %68, align 4
  %620 = load float, float* %72, align 4
  %621 = select i1 %614, float %619, float %620
  %622 = fadd float %618, %621
  %623 = call float @avifRoundf(float %622) #4
  %624 = fptosi float %623 to i32
  %625 = icmp slt i32 %624, 0
  br i1 %625, label %630, label %626

626:                                              ; preds = %612
  %627 = load i32, i32* %69, align 4
  %628 = icmp slt i32 %627, %624
  %629 = select i1 %628, i32 %627, i32 %624
  br label %630

630:                                              ; preds = %612, %626
  %631 = phi i32 [ 0, %612 ], [ %629, %626 ]
  %632 = trunc i32 %631 to i8
  %633 = load i8*, i8** %73, align 8
  %634 = load i32, i32* %74, align 4
  %635 = mul i32 %634, %554
  %636 = add i32 %635, %124
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds i8, i8* %633, i64 %637
  store i8 %632, i8* %638, align 1
  %639 = load i32, i32* %61, align 4
  %640 = icmp eq i32 %639, 1
  %641 = load float, float* %67, align 4
  %642 = load float, float* %71, align 4
  %643 = select i1 %640, float %641, float %642
  %644 = fmul float %552, %643
  %645 = load float, float* %68, align 4
  %646 = load float, float* %72, align 4
  %647 = select i1 %640, float %645, float %646
  %648 = fadd float %644, %647
  %649 = call float @avifRoundf(float %648) #4
  %650 = fptosi float %649 to i32
  %651 = icmp slt i32 %650, 0
  br i1 %651, label %656, label %652

652:                                              ; preds = %630
  %653 = load i32, i32* %69, align 4
  %654 = icmp slt i32 %653, %650
  %655 = select i1 %654, i32 %653, i32 %650
  br label %656

656:                                              ; preds = %630, %652
  %657 = phi i32 [ 0, %630 ], [ %655, %652 ]
  %658 = trunc i32 %657 to i8
  %659 = load i8*, i8** %75, align 8
  %660 = load i32, i32* %76, align 4
  %661 = mul i32 %660, %554
  %662 = add i32 %661, %124
  %663 = zext i32 %662 to i64
  %664 = getelementptr inbounds i8, i8* %659, i64 %663
  store i8 %658, i8* %664, align 1
  br label %665

665:                                              ; preds = %656, %609
  %666 = add nuw nsw i64 %542, 1
  %667 = icmp ult i64 %666, %115
  br i1 %667, label %541, label %668

668:                                              ; preds = %665, %120, %485, %532
  %669 = add i32 %108, 2
  %670 = load i32, i32* %51, align 8
  %671 = icmp ult i32 %669, %670
  %672 = load i32, i32* %47, align 4
  br i1 %671, label %105, label %100

673:                                              ; preds = %94
  %674 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  %675 = load i32, i32* %674, align 8
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %727, label %677

677:                                              ; preds = %673
  %678 = bitcast %struct.avifAlphaParams* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %678) #4
  %679 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 2
  %680 = bitcast i32* %679 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %680, i8 -86, i64 64, i1 false)
  %681 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %682 = load i32, i32* %681, align 8
  %683 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 0
  store i32 %682, i32* %683, align 8
  %684 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 1
  store i32 %95, i32* %684, align 4
  %685 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %686 = load i32, i32* %685, align 8
  %687 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 8
  store i32 %686, i32* %687, align 4
  %688 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 9
  %689 = load i32, i32* %688, align 8
  %690 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 9
  store i32 %689, i32* %690, align 8
  %691 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 10
  %692 = bitcast i8** %691 to i64*
  store i64 %99, i64* %692, align 8
  %693 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 11
  store i32 %675, i32* %693, align 8
  %694 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 12
  store i32 0, i32* %694, align 4
  %695 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 3
  %696 = load i32, i32* %695, align 4
  %697 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 13
  store i32 %696, i32* %697, align 8
  %698 = load i32, i32* %14, align 4
  %699 = call i32 @avifRGBFormatHasAlpha(i32 %698) #4
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %724, label %701

701:                                              ; preds = %677
  %702 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 5
  %703 = load i32, i32* %702, align 4
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %705, label %724

705:                                              ; preds = %701
  %706 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %707 = load i32, i32* %706, align 8
  %708 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 2
  store i32 %707, i32* %708, align 8
  %709 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 3
  store i32 1, i32* %709, align 4
  %710 = bitcast i8** %6 to i64*
  %711 = load i64, i64* %710, align 8
  %712 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 4
  %713 = bitcast i8** %712 to i64*
  store i64 %711, i64* %713, align 8
  %714 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %715 = load i32, i32* %714, align 8
  %716 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 5
  store i32 %715, i32* %716, align 8
  %717 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 10
  %718 = load i32, i32* %717, align 4
  %719 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 6
  store i32 %718, i32* %719, align 4
  %720 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %721 = load i32, i32* %720, align 4
  %722 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %5, i64 0, i32 7
  store i32 %721, i32* %722, align 8
  %723 = call i32 @avifReformatAlpha(%struct.avifAlphaParams* nonnull %5) #4
  br label %726

724:                                              ; preds = %701, %677
  %725 = call i32 @avifFillAlpha(%struct.avifAlphaParams* nonnull %5) #4
  br label %726

726:                                              ; preds = %724, %705
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %678) #4
  br label %727

727:                                              ; preds = %673, %94, %726
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %42) #4
  br label %728

728:                                              ; preds = %9, %727
  %729 = phi i32 [ 0, %727 ], [ 5, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 32876, i8* nonnull %10) #4
  br label %730

730:                                              ; preds = %2, %728
  %731 = phi i32 [ %729, %728 ], [ 5, %2 ]
  ret i32 %731

732:                                              ; preds = %541
  %733 = getelementptr inbounds [2 x [2 x %struct.YUVBlock]], [2 x [2 x %struct.YUVBlock]]* %4, i64 0, i64 1, i64 %542, i32 1
  %734 = bitcast float* %733 to <2 x float>*
  %735 = load <2 x float>, <2 x float>* %734, align 4
  %736 = fadd <2 x float> %546, %735
  br label %547

737:                                              ; preds = %427
  %738 = load <2 x float>, <2 x float>* %83, align 4
  %739 = fadd <2 x float> %432, %738
  %740 = load <2 x float>, <2 x float>* %85, align 4
  %741 = fadd <2 x float> %739, %740
  %742 = select i1 %110, <2 x float> %741, <2 x float> %739
  br label %416
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @avifPrepareReformatState(%struct.avifImage*, %struct.avifRGBImage* nocapture readonly, %struct.avifReformatState*) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %298 [
    i32 8, label %6
    i32 10, label %6
    i32 12, label %6
  ]

6:                                                ; preds = %3, %3, %3
  %7 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %298 [
    i32 8, label %9
    i32 10, label %9
    i32 12, label %9
    i32 16, label %9
  ]

9:                                                ; preds = %6, %6, %6, %6
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 17
  %11 = load i16, i16* %10, align 4
  switch i16 %11, label %16 [
    i16 3, label %298
    i16 8, label %12
    i16 10, label %298
    i16 11, label %298
    i16 13, label %298
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %298, label %24

16:                                               ; preds = %9
  %17 = icmp ugt i16 %11, 13
  br i1 %17, label %298, label %18

18:                                               ; preds = %16
  %19 = icmp eq i16 %11, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %298

24:                                               ; preds = %12, %20, %18
  %25 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %298, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 22
  tail call void @avifGetPixelFormatInfo(i32 %26, %struct.avifPixelFormatInfo* %29) #4
  %30 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 0
  %31 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 1
  %32 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 2
  tail call void @avifCalcYUVCoefficients(%struct.avifImage* %0, float* %30, float* %31, float* %32) #4
  %33 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 25
  store i32 0, i32* %33, align 4
  %34 = load i16, i16* %10, align 4
  switch i16 %34, label %38 [
    i16 0, label %36
    i16 8, label %35
  ]

35:                                               ; preds = %28
  br label %36

36:                                               ; preds = %28, %35
  %37 = phi i32 [ 2, %35 ], [ 1, %28 ]
  store i32 %37, i32* %33, align 4
  store float 0.000000e+00, float* %30, align 4
  store float 0.000000e+00, float* %31, align 4
  store float 0.000000e+00, float* %32, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = load i32, i32* %4, align 8
  %40 = icmp ugt i32 %39, 8
  %41 = select i1 %40, i32 2, i32 1
  %42 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 3
  store i32 %41, i32* %42, align 4
  %43 = load i32, i32* %7, align 8
  %44 = icmp ugt i32 %43, 8
  %45 = select i1 %44, i32 2, i32 1
  %46 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 4
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = tail call i32 @avifRGBFormatChannelCount(i32 %48) #4
  %50 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 5
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* %46, align 4
  %52 = mul i32 %51, %49
  %53 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 6
  store i32 %52, i32* %53, align 4
  %54 = load i32, i32* %47, align 4
  switch i32 %54, label %298 [
    i32 0, label %55
    i32 1, label %61
    i32 2, label %68
    i32 3, label %75
    i32 4, label %81
    i32 5, label %88
  ]

55:                                               ; preds = %38
  %56 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 0, i32* %56, align 4
  %57 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %51, i32* %57, align 4
  %58 = shl i32 %51, 1
  %59 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 0, i32* %60, align 4
  br label %95

61:                                               ; preds = %38
  %62 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 0, i32* %62, align 4
  %63 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %51, i32* %63, align 4
  %64 = shl i32 %51, 1
  %65 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 %64, i32* %65, align 4
  %66 = mul i32 %51, 3
  %67 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 %66, i32* %67, align 4
  br label %95

68:                                               ; preds = %38
  %69 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 %51, i32* %70, align 4
  %71 = shl i32 %51, 1
  %72 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %71, i32* %72, align 4
  %73 = mul i32 %51, 3
  %74 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 %73, i32* %74, align 4
  br label %95

75:                                               ; preds = %38
  %76 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 0, i32* %76, align 4
  %77 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %51, i32* %77, align 4
  %78 = shl i32 %51, 1
  %79 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 %78, i32* %79, align 4
  %80 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 0, i32* %80, align 4
  br label %95

81:                                               ; preds = %38
  %82 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %51, i32* %83, align 4
  %84 = shl i32 %51, 1
  %85 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 %84, i32* %85, align 4
  %86 = mul i32 %51, 3
  %87 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 %86, i32* %87, align 4
  br label %95

88:                                               ; preds = %38
  %89 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 10
  store i32 0, i32* %89, align 4
  %90 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 9
  store i32 %51, i32* %90, align 4
  %91 = shl i32 %51, 1
  %92 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 8
  store i32 %91, i32* %92, align 4
  %93 = mul i32 %51, 3
  %94 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 7
  store i32 %93, i32* %94, align 4
  br label %95

95:                                               ; preds = %88, %81, %75, %68, %61, %55
  %96 = load i32, i32* %4, align 8
  %97 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 11
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 4
  %99 = load i32, i32* %98, align 8
  %100 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 12
  store i32 %99, i32* %100, align 4
  %101 = load i32, i32* %4, align 8
  %102 = shl nsw i32 -1, %101
  %103 = xor i32 %102, -1
  %104 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 13
  store i32 %103, i32* %104, align 4
  %105 = load i32, i32* %7, align 8
  %106 = shl nsw i32 -1, %105
  %107 = xor i32 %106, -1
  %108 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 14
  store i32 %107, i32* %108, align 4
  %109 = sitofp i32 %107 to float
  %110 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 15
  store float %109, float* %110, align 4
  %111 = icmp eq i32 %99, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %95
  %113 = add i32 %96, -8
  %114 = shl i32 16, %113
  %115 = sitofp i32 %114 to float
  br label %116

116:                                              ; preds = %95, %112
  %117 = phi float [ %115, %112 ], [ 0.000000e+00, %95 ]
  %118 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 16
  store float %117, float* %118, align 4
  %119 = add i32 %96, -1
  %120 = shl i32 1, %119
  %121 = sitofp i32 %120 to float
  %122 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 17
  store float %121, float* %122, align 4
  %123 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 9
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %116
  %127 = add i32 %96, -8
  %128 = shl i32 16, %127
  %129 = sitofp i32 %128 to float
  br label %130

130:                                              ; preds = %116, %126
  %131 = phi float [ %129, %126 ], [ 0.000000e+00, %116 ]
  %132 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 18
  store float %131, float* %132, align 4
  br i1 %111, label %133, label %139

133:                                              ; preds = %130
  %134 = add i32 %96, -8
  %135 = shl i32 219, %134
  %136 = sitofp i32 %135 to float
  %137 = shl i32 224, %134
  %138 = sitofp i32 %137 to float
  br label %143

139:                                              ; preds = %130
  %140 = sitofp i32 %103 to float
  %141 = add i32 %96, -8
  %142 = shl i32 219, %141
  br label %143

143:                                              ; preds = %139, %133
  %144 = phi i32 [ %142, %139 ], [ %135, %133 ]
  %145 = phi float [ %140, %139 ], [ %138, %133 ]
  %146 = phi float [ %140, %139 ], [ %136, %133 ]
  %147 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 19
  store float %146, float* %147, align 4
  %148 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 20
  store float %145, float* %148, align 4
  %149 = load i32, i32* %123, align 8
  %150 = icmp eq i32 %149, 0
  %151 = select i1 %150, i32 %144, i32 %103
  %152 = sitofp i32 %151 to float
  %153 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 21
  store float %152, float* %153, align 4
  %154 = load i32, i32* %4, align 8
  %155 = shl i32 1, %154
  %156 = load i32, i32* %33, align 4
  %157 = icmp eq i32 %156, 1
  %158 = zext i32 %155 to i64
  %159 = icmp ugt i64 %158, 1
  %160 = select i1 %159, i64 %158, i64 1
  %161 = icmp ult i64 %160, 4
  br i1 %157, label %192, label %162

162:                                              ; preds = %143
  br i1 %161, label %163, label %165

163:                                              ; preds = %190, %162
  %164 = phi i64 [ 0, %162 ], [ %166, %190 ]
  br label %257

165:                                              ; preds = %162
  %166 = and i64 %160, 4294967292
  %167 = insertelement <4 x float> undef, float %117, i32 0
  %168 = shufflevector <4 x float> %167, <4 x float> undef, <4 x i32> zeroinitializer
  %169 = insertelement <4 x float> undef, float %146, i32 0
  %170 = shufflevector <4 x float> %169, <4 x float> undef, <4 x i32> zeroinitializer
  %171 = insertelement <4 x float> undef, float %121, i32 0
  %172 = shufflevector <4 x float> %171, <4 x float> undef, <4 x i32> zeroinitializer
  %173 = insertelement <4 x float> undef, float %145, i32 0
  %174 = shufflevector <4 x float> %173, <4 x float> undef, <4 x i32> zeroinitializer
  br label %175

175:                                              ; preds = %175, %165
  %176 = phi i64 [ 0, %165 ], [ %187, %175 ]
  %177 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %165 ], [ %188, %175 ]
  %178 = uitofp <4 x i32> %177 to <4 x float>
  %179 = fsub <4 x float> %178, %168
  %180 = fdiv <4 x float> %179, %170
  %181 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %176
  %182 = bitcast float* %181 to <4 x float>*
  store <4 x float> %180, <4 x float>* %182, align 4
  %183 = fsub <4 x float> %178, %172
  %184 = fdiv <4 x float> %183, %174
  %185 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %176
  %186 = bitcast float* %185 to <4 x float>*
  store <4 x float> %184, <4 x float>* %186, align 4
  %187 = add i64 %176, 4
  %188 = add <4 x i32> %177, <i32 4, i32 4, i32 4, i32 4>
  %189 = icmp eq i64 %187, %166
  br i1 %189, label %190, label %175, !llvm.loop !2

190:                                              ; preds = %175
  %191 = icmp eq i64 %160, %166
  br i1 %191, label %269, label %163

192:                                              ; preds = %143
  br i1 %161, label %245, label %193

193:                                              ; preds = %192
  %194 = and i64 %160, 4294967292
  %195 = insertelement <4 x float> undef, float %117, i32 0
  %196 = shufflevector <4 x float> %195, <4 x float> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x float> undef, float %146, i32 0
  %198 = shufflevector <4 x float> %197, <4 x float> undef, <4 x i32> zeroinitializer
  %199 = add nsw i64 %194, -4
  %200 = lshr exact i64 %199, 2
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 1
  %203 = icmp eq i64 %199, 0
  br i1 %203, label %232, label %204

204:                                              ; preds = %193
  %205 = sub nuw nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %226, %206 ]
  %208 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %204 ], [ %227, %206 ]
  %209 = phi i64 [ %205, %204 ], [ %228, %206 ]
  %210 = uitofp <4 x i32> %208 to <4 x float>
  %211 = fsub <4 x float> %210, %196
  %212 = fdiv <4 x float> %211, %198
  %213 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %207
  %214 = bitcast float* %213 to <4 x float>*
  store <4 x float> %212, <4 x float>* %214, align 4
  %215 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %207
  %216 = bitcast float* %215 to <4 x float>*
  store <4 x float> %212, <4 x float>* %216, align 4
  %217 = or i64 %207, 4
  %218 = add <4 x i32> %208, <i32 4, i32 4, i32 4, i32 4>
  %219 = uitofp <4 x i32> %218 to <4 x float>
  %220 = fsub <4 x float> %219, %196
  %221 = fdiv <4 x float> %220, %198
  %222 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %217
  %223 = bitcast float* %222 to <4 x float>*
  store <4 x float> %221, <4 x float>* %223, align 4
  %224 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %217
  %225 = bitcast float* %224 to <4 x float>*
  store <4 x float> %221, <4 x float>* %225, align 4
  %226 = add i64 %207, 8
  %227 = add <4 x i32> %208, <i32 8, i32 8, i32 8, i32 8>
  %228 = add i64 %209, -2
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %230, label %206, !llvm.loop !4

230:                                              ; preds = %206
  %231 = uitofp <4 x i32> %227 to <4 x float>
  br label %232

232:                                              ; preds = %230, %193
  %233 = phi i64 [ 0, %193 ], [ %226, %230 ]
  %234 = phi <4 x float> [ <float 0.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00>, %193 ], [ %231, %230 ]
  %235 = icmp eq i64 %202, 0
  br i1 %235, label %243, label %236

236:                                              ; preds = %232
  %237 = fsub <4 x float> %234, %196
  %238 = fdiv <4 x float> %237, %198
  %239 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %233
  %240 = bitcast float* %239 to <4 x float>*
  store <4 x float> %238, <4 x float>* %240, align 4
  %241 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %233
  %242 = bitcast float* %241 to <4 x float>*
  store <4 x float> %238, <4 x float>* %242, align 4
  br label %243

243:                                              ; preds = %232, %236
  %244 = icmp eq i64 %160, %194
  br i1 %244, label %269, label %245

245:                                              ; preds = %243, %192
  %246 = phi i64 [ 0, %192 ], [ %194, %243 ]
  br label %247

247:                                              ; preds = %245, %247
  %248 = phi i64 [ %255, %247 ], [ %246, %245 ]
  %249 = trunc i64 %248 to i32
  %250 = uitofp i32 %249 to float
  %251 = fsub float %250, %117
  %252 = fdiv float %251, %146
  %253 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %248
  store float %252, float* %253, align 4
  %254 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %248
  store float %252, float* %254, align 4
  %255 = add nuw nsw i64 %248, 1
  %256 = icmp ult i64 %255, %158
  br i1 %256, label %247, label %269, !llvm.loop !5

257:                                              ; preds = %163, %257
  %258 = phi i64 [ %267, %257 ], [ %164, %163 ]
  %259 = trunc i64 %258 to i32
  %260 = uitofp i32 %259 to float
  %261 = fsub float %260, %117
  %262 = fdiv float %261, %146
  %263 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 23, i64 %258
  store float %262, float* %263, align 4
  %264 = fsub float %260, %121
  %265 = fdiv float %264, %145
  %266 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 24, i64 %258
  store float %265, float* %266, align 4
  %267 = add nuw nsw i64 %258, 1
  %268 = icmp ult i64 %267, %158
  br i1 %268, label %257, label %269, !llvm.loop !7

269:                                              ; preds = %257, %247, %190, %243
  %270 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %2, i64 0, i32 26
  store i32 0, i32* %270, align 4
  %271 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %272 = load i8*, i8** %271, align 8
  %273 = icmp eq i8* %272, null
  br i1 %273, label %298, label %274

274:                                              ; preds = %269
  %275 = load i32, i32* %47, align 4
  %276 = tail call i32 @avifRGBFormatHasAlpha(i32 %275) #4
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %282, label %278

278:                                              ; preds = %274
  %279 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 5
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %287, label %282

282:                                              ; preds = %278, %274
  %283 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 13
  %284 = load i32, i32* %283, align 8
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %298

286:                                              ; preds = %282
  store i32 1, i32* %270, align 4
  br label %298

287:                                              ; preds = %278
  %288 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 13
  %289 = load i32, i32* %288, align 8
  %290 = icmp eq i32 %289, 0
  %291 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 6
  %292 = load i32, i32* %291, align 8
  %293 = icmp eq i32 %292, 0
  br i1 %290, label %294, label %296

294:                                              ; preds = %287
  br i1 %293, label %298, label %295

295:                                              ; preds = %294
  store i32 1, i32* %270, align 4
  br label %298

296:                                              ; preds = %287
  br i1 %293, label %297, label %298

297:                                              ; preds = %296
  store i32 2, i32* %270, align 4
  br label %298

298:                                              ; preds = %9, %9, %9, %9, %294, %295, %297, %286, %269, %282, %296, %38, %24, %20, %12, %16, %6, %3
  %299 = phi i32 [ 0, %3 ], [ 0, %6 ], [ 0, %9 ], [ 0, %16 ], [ 0, %12 ], [ 0, %20 ], [ 0, %24 ], [ 0, %38 ], [ 1, %296 ], [ 1, %282 ], [ 1, %269 ], [ 1, %286 ], [ 1, %297 ], [ 1, %295 ], [ 1, %294 ], [ 0, %9 ], [ 0, %9 ], [ 0, %9 ]
  ret i32 %299
}

declare void @avifImageAllocatePlanes(%struct.avifImage*, i32) local_unnamed_addr #2

declare i32 @avifRGBFormatHasAlpha(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @avifReformatAlpha(%struct.avifAlphaParams*) local_unnamed_addr #2

declare i32 @avifFillAlpha(%struct.avifAlphaParams*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avifImageYUVToRGB(%struct.avifImage*, %struct.avifRGBImage*) local_unnamed_addr #0 {
  %3 = alloca %struct.avifReformatState, align 4
  %4 = alloca %struct.avifAlphaParams, align 8
  %5 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %1818, label %8

8:                                                ; preds = %2
  %9 = bitcast %struct.avifReformatState* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32876, i8* nonnull %9) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 bitcast (%struct.avifReformatState* @__const.avifImageYUVToRGB.state to i8*), i64 32876, i1 false)
  %10 = call fastcc i32 @avifPrepareReformatState(%struct.avifImage* %0, %struct.avifRGBImage* %1, %struct.avifReformatState* nonnull %3)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %1816, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 26
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = call i32 @avifRGBFormatHasAlpha(i32 %18) #4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %16, %12
  %22 = call i32 @avifImageYUVToRGBLibYUV(%struct.avifImage* %0, %struct.avifRGBImage* %1) #4
  switch i32 %22, label %1816 [
    i32 0, label %24
    i32 25, label %23
  ]

23:                                               ; preds = %21
  br label %24

24:                                               ; preds = %21, %23, %16
  %25 = phi i32 [ 0, %16 ], [ 1, %21 ], [ 0, %23 ]
  %26 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @avifRGBFormatHasAlpha(i32 %27) #4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %92, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  %34 = icmp ne i32 %14, 0
  %35 = or i1 %34, %33
  br i1 %35, label %36, label %92

36:                                               ; preds = %30
  %37 = bitcast %struct.avifAlphaParams* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %37) #4
  %38 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 2
  %39 = bitcast i32* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -86, i64 64, i1 false)
  %40 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 0
  store i32 %41, i32* %42, align 8
  %43 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 1
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 8
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 9
  store i32 1, i32* %49, align 8
  %50 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 10
  %54 = bitcast i8** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 11
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 10
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 12
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 13
  store i32 %62, i32* %63, align 8
  %64 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %65 = load i8*, i8** %64, align 8
  %66 = icmp eq i8* %65, null
  %67 = ptrtoint i8* %65 to i64
  br i1 %66, label %87, label %68

68:                                               ; preds = %36
  %69 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %87, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 2
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 9
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 3
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 4
  %80 = bitcast i8** %79 to i64*
  store i64 %67, i64* %80, align 8
  %81 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 5
  store i32 %70, i32* %81, align 8
  %82 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 6
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.avifAlphaParams, %struct.avifAlphaParams* %4, i64 0, i32 7
  store i32 %84, i32* %85, align 8
  %86 = call i32 @avifReformatAlpha(%struct.avifAlphaParams* nonnull %4) #4
  br label %91

87:                                               ; preds = %68, %36
  %88 = icmp eq i32 %25, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = call i32 @avifFillAlpha(%struct.avifAlphaParams* nonnull %4) #4
  br label %91

91:                                               ; preds = %87, %89, %72
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %37) #4
  br label %92

92:                                               ; preds = %24, %30, %91
  %93 = icmp eq i32 %25, 0
  br i1 %93, label %94, label %1811

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 4
  %96 = load i32, i32* %95, align 8
  switch i32 %96, label %98 [
    i32 3, label %97
    i32 1, label %97
  ]

97:                                               ; preds = %94, %94
  br label %98

98:                                               ; preds = %94, %97
  %99 = phi i32 [ 3, %97 ], [ 4, %94 ]
  %100 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 4
  br i1 %110, label %115, label %111

111:                                              ; preds = %107
  %112 = icmp eq i32 %109, 1
  %113 = icmp eq i32 %99, 3
  %114 = or i1 %113, %112
  br i1 %114, label %115, label %1307

115:                                              ; preds = %107, %98, %103, %111
  %116 = phi i1 [ true, %111 ], [ false, %107 ], [ false, %103 ], [ false, %98 ]
  br i1 %15, label %121, label %117

117:                                              ; preds = %115
  %118 = load i32, i32* %26, align 4
  %119 = call i32 @avifRGBFormatHasAlpha(i32 %118) #4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %1307, label %121

121:                                              ; preds = %117, %115
  %122 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 25
  %123 = load i32, i32* %122, align 4
  switch i32 %123, label %1307 [
    i32 1, label %124
    i32 0, label %220
  ]

124:                                              ; preds = %121
  %125 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 8
  br i1 %127, label %128, label %1307

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 8
  br i1 %131, label %132, label %1307

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 1
  br i1 %135, label %136, label %1307

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 4
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %140, label %1307

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %1811, label %144

144:                                              ; preds = %140
  %145 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %148 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %149 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %150 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %151 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %152 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %153 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %154 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %155 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %156 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %157 = zext i32 %146 to i64
  %158 = load i32, i32* %156, align 8
  br label %159

159:                                              ; preds = %197, %144
  %160 = phi i32 [ %142, %144 ], [ %198, %197 ]
  %161 = phi i32 [ %158, %144 ], [ %199, %197 ]
  %162 = phi i32 [ 0, %144 ], [ %200, %197 ]
  %163 = load i8*, i8** %5, align 8
  %164 = load i32, i32* %147, align 8
  %165 = mul i32 %164, %162
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %163, i64 %166
  %168 = load i8*, i8** %148, align 8
  %169 = load i32, i32* %100, align 4
  %170 = mul i32 %169, %162
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %168, i64 %171
  %173 = load i8*, i8** %149, align 8
  %174 = load i32, i32* %150, align 8
  %175 = mul i32 %174, %162
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %173, i64 %176
  %178 = load i8*, i8** %151, align 8
  %179 = load i32, i32* %153, align 8
  %180 = mul i32 %179, %162
  %181 = icmp eq i32 %161, 0
  br i1 %181, label %197, label %182

182:                                              ; preds = %159
  %183 = load i32, i32* %155, align 4
  %184 = add i32 %183, %180
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %178, i64 %185
  %187 = load i32, i32* %154, align 4
  %188 = add i32 %187, %180
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %178, i64 %189
  %191 = load i32, i32* %152, align 4
  %192 = add i32 %191, %180
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %178, i64 %193
  br label %202

195:                                              ; preds = %202
  %196 = load i32, i32* %141, align 4
  br label %197

197:                                              ; preds = %195, %159
  %198 = phi i32 [ %196, %195 ], [ %160, %159 ]
  %199 = phi i32 [ %217, %195 ], [ 0, %159 ]
  %200 = add nuw i32 %162, 1
  %201 = icmp ult i32 %200, %198
  br i1 %201, label %159, label %1811

202:                                              ; preds = %202, %182
  %203 = phi i64 [ 0, %182 ], [ %216, %202 ]
  %204 = phi i8* [ %186, %182 ], [ %215, %202 ]
  %205 = phi i8* [ %190, %182 ], [ %214, %202 ]
  %206 = phi i8* [ %194, %182 ], [ %213, %202 ]
  %207 = getelementptr inbounds i8, i8* %177, i64 %203
  %208 = load i8, i8* %207, align 1
  store i8 %208, i8* %206, align 1
  %209 = getelementptr inbounds i8, i8* %167, i64 %203
  %210 = load i8, i8* %209, align 1
  store i8 %210, i8* %205, align 1
  %211 = getelementptr inbounds i8, i8* %172, i64 %203
  %212 = load i8, i8* %211, align 1
  store i8 %212, i8* %204, align 1
  %213 = getelementptr inbounds i8, i8* %206, i64 %157
  %214 = getelementptr inbounds i8, i8* %205, i64 %157
  %215 = getelementptr inbounds i8, i8* %204, i64 %157
  %216 = add nuw nsw i64 %203, 1
  %217 = load i32, i32* %156, align 8
  %218 = zext i32 %217 to i64
  %219 = icmp ult i64 %216, %218
  br i1 %219, label %202, label %195

220:                                              ; preds = %121
  %221 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %222 = load i32, i32* %221, align 8
  %223 = icmp ugt i32 %222, 8
  %224 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %225 = load i32, i32* %224, align 8
  %226 = icmp ugt i32 %225, 8
  %227 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 0
  %228 = load float, float* %227, align 4
  br i1 %223, label %229, label %790

229:                                              ; preds = %220
  br i1 %226, label %230, label %513

230:                                              ; preds = %229
  br i1 %116, label %231, label %394

231:                                              ; preds = %230
  %232 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %233 = load float, float* %232, align 4
  %234 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %235 = load float, float* %234, align 4
  %236 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %1811, label %239

239:                                              ; preds = %231
  %240 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %241 = load float, float* %240, align 4
  %242 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %243 = load i32, i32* %242, align 4
  %244 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 2
  %247 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %248 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %249 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %250 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %251 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %252 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %253 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %254 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %255 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %256 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %257 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 1
  %258 = and i32 %243, 65535
  %259 = insertelement <2 x float> undef, float %241, i32 0
  %260 = insertelement <2 x float> %259, float %228, i32 1
  %261 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %260
  %262 = extractelement <2 x float> %261, i32 1
  %263 = fmul float %262, 2.000000e+00
  %264 = extractelement <2 x float> %261, i32 0
  %265 = fmul float %264, 2.000000e+00
  %266 = fmul <2 x float> %260, %261
  %267 = zext i32 %245 to i64
  %268 = load i32, i32* %256, align 8
  br label %269

269:                                              ; preds = %312, %239
  %270 = phi i32 [ %237, %239 ], [ %313, %312 ]
  %271 = phi i32 [ %268, %239 ], [ %314, %312 ]
  %272 = phi i32 [ 0, %239 ], [ %315, %312 ]
  %273 = load i32, i32* %246, align 4
  %274 = lshr i32 %272, %273
  %275 = load i8*, i8** %5, align 8
  %276 = load i32, i32* %247, align 8
  %277 = mul i32 %276, %272
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %275, i64 %278
  %280 = bitcast i8* %279 to i16*
  %281 = load i8*, i8** %248, align 8
  %282 = load i32, i32* %100, align 4
  %283 = mul i32 %282, %274
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i8, i8* %281, i64 %284
  %286 = bitcast i8* %285 to i16*
  %287 = load i8*, i8** %249, align 8
  %288 = load i32, i32* %250, align 8
  %289 = mul i32 %288, %274
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %287, i64 %290
  %292 = bitcast i8* %291 to i16*
  %293 = load i8*, i8** %251, align 8
  %294 = load i32, i32* %253, align 8
  %295 = mul i32 %294, %272
  %296 = icmp eq i32 %271, 0
  br i1 %296, label %312, label %297

297:                                              ; preds = %269
  %298 = load i32, i32* %255, align 4
  %299 = add i32 %298, %295
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds i8, i8* %293, i64 %300
  %302 = load i32, i32* %254, align 4
  %303 = add i32 %302, %295
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %293, i64 %304
  %306 = load i32, i32* %252, align 4
  %307 = add i32 %306, %295
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %293, i64 %308
  br label %317

310:                                              ; preds = %317
  %311 = load i32, i32* %236, align 4
  br label %312

312:                                              ; preds = %310, %269
  %313 = phi i32 [ %311, %310 ], [ %270, %269 ]
  %314 = phi i32 [ %391, %310 ], [ 0, %269 ]
  %315 = add nuw i32 %272, 1
  %316 = icmp ult i32 %315, %313
  br i1 %316, label %269, label %1811

317:                                              ; preds = %317, %297
  %318 = phi i64 [ 0, %297 ], [ %390, %317 ]
  %319 = phi i8* [ %301, %297 ], [ %389, %317 ]
  %320 = phi i8* [ %305, %297 ], [ %388, %317 ]
  %321 = phi i8* [ %309, %297 ], [ %387, %317 ]
  %322 = load i32, i32* %257, align 4
  %323 = trunc i64 %318 to i32
  %324 = lshr i32 %323, %322
  %325 = getelementptr inbounds i16, i16* %280, i64 %318
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i32
  %328 = icmp ugt i32 %258, %327
  %329 = select i1 %328, i32 %327, i32 %258
  %330 = zext i32 %329 to i64
  %331 = zext i32 %324 to i64
  %332 = getelementptr inbounds i16, i16* %286, i64 %331
  %333 = load i16, i16* %332, align 2
  %334 = zext i16 %333 to i32
  %335 = icmp ugt i32 %258, %334
  %336 = select i1 %335, i32 %334, i32 %258
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i16, i16* %292, i64 %331
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = icmp ugt i32 %258, %340
  %342 = select i1 %341, i32 %340, i32 %258
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %330
  %345 = load float, float* %344, align 4
  %346 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %337
  %347 = load float, float* %346, align 4
  %348 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %343
  %349 = load float, float* %348, align 4
  %350 = fmul float %263, %349
  %351 = fadd float %345, %350
  %352 = fmul float %265, %347
  %353 = fadd float %345, %352
  %354 = insertelement <2 x float> undef, float %347, i32 0
  %355 = insertelement <2 x float> %354, float %349, i32 1
  %356 = fmul <2 x float> %266, %355
  %357 = extractelement <2 x float> %356, i32 0
  %358 = extractelement <2 x float> %356, i32 1
  %359 = fadd float %357, %358
  %360 = fmul float %359, 2.000000e+00
  %361 = fdiv float %360, %233
  %362 = fsub float %345, %361
  %363 = fcmp olt float %351, 0.000000e+00
  %364 = fcmp ogt float %351, 1.000000e+00
  %365 = select i1 %364, float 1.000000e+00, float %351
  %366 = select i1 %363, float 0.000000e+00, float %365
  %367 = fcmp olt float %362, 0.000000e+00
  %368 = fcmp ogt float %362, 1.000000e+00
  %369 = select i1 %368, float 1.000000e+00, float %362
  %370 = select i1 %367, float 0.000000e+00, float %369
  %371 = fcmp olt float %353, 0.000000e+00
  %372 = fcmp ogt float %353, 1.000000e+00
  %373 = select i1 %372, float 1.000000e+00, float %353
  %374 = select i1 %371, float 0.000000e+00, float %373
  %375 = fmul float %235, %366
  %376 = fadd float %375, 5.000000e-01
  %377 = fptoui float %376 to i16
  %378 = bitcast i8* %321 to i16*
  store i16 %377, i16* %378, align 2
  %379 = fmul float %235, %370
  %380 = fadd float %379, 5.000000e-01
  %381 = fptoui float %380 to i16
  %382 = bitcast i8* %320 to i16*
  store i16 %381, i16* %382, align 2
  %383 = fmul float %235, %374
  %384 = fadd float %383, 5.000000e-01
  %385 = fptoui float %384 to i16
  %386 = bitcast i8* %319 to i16*
  store i16 %385, i16* %386, align 2
  %387 = getelementptr inbounds i8, i8* %321, i64 %267
  %388 = getelementptr inbounds i8, i8* %320, i64 %267
  %389 = getelementptr inbounds i8, i8* %319, i64 %267
  %390 = add nuw nsw i64 %318, 1
  %391 = load i32, i32* %256, align 8
  %392 = zext i32 %391 to i64
  %393 = icmp ult i64 %390, %392
  br i1 %393, label %317, label %310

394:                                              ; preds = %230
  %395 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %396 = load float, float* %395, align 4
  %397 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %398 = load float, float* %397, align 4
  %399 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %400 = load i32, i32* %399, align 4
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %1811, label %402

402:                                              ; preds = %394
  %403 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %404 = load i32, i32* %403, align 4
  %405 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %406 = load i32, i32* %405, align 4
  %407 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %408 = load float, float* %407, align 4
  %409 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %410 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %411 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %412 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %413 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %414 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %415 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %416 = and i32 %404, 65535
  %417 = fsub float 1.000000e+00, %228
  %418 = fmul float %417, 2.000000e+00
  %419 = fmul float %418, 0.000000e+00
  %420 = fsub float 1.000000e+00, %396
  %421 = fmul float %420, 2.000000e+00
  %422 = fmul float %421, 0.000000e+00
  %423 = fmul float %228, %417
  %424 = fmul float %423, 0.000000e+00
  %425 = fmul float %396, %420
  %426 = fmul float %425, 0.000000e+00
  %427 = fadd float %424, %426
  %428 = fmul float %427, 2.000000e+00
  %429 = fdiv float %428, %408
  %430 = zext i32 %406 to i64
  %431 = load i32, i32* %415, align 8
  br label %432

432:                                              ; preds = %461, %402
  %433 = phi i32 [ %400, %402 ], [ %462, %461 ]
  %434 = phi i32 [ %431, %402 ], [ %463, %461 ]
  %435 = phi i32 [ 0, %402 ], [ %464, %461 ]
  %436 = load i8*, i8** %5, align 8
  %437 = load i32, i32* %409, align 8
  %438 = mul i32 %437, %435
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds i8, i8* %436, i64 %439
  %441 = bitcast i8* %440 to i16*
  %442 = load i8*, i8** %410, align 8
  %443 = load i32, i32* %412, align 8
  %444 = mul i32 %443, %435
  %445 = icmp eq i32 %434, 0
  br i1 %445, label %461, label %446

446:                                              ; preds = %432
  %447 = load i32, i32* %414, align 4
  %448 = add i32 %447, %444
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds i8, i8* %442, i64 %449
  %451 = load i32, i32* %413, align 4
  %452 = add i32 %451, %444
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds i8, i8* %442, i64 %453
  %455 = load i32, i32* %411, align 4
  %456 = add i32 %455, %444
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds i8, i8* %442, i64 %457
  br label %466

459:                                              ; preds = %466
  %460 = load i32, i32* %399, align 4
  br label %461

461:                                              ; preds = %459, %432
  %462 = phi i32 [ %460, %459 ], [ %433, %432 ]
  %463 = phi i32 [ %510, %459 ], [ 0, %432 ]
  %464 = add nuw i32 %435, 1
  %465 = icmp ult i32 %464, %462
  br i1 %465, label %432, label %1811

466:                                              ; preds = %466, %446
  %467 = phi i64 [ 0, %446 ], [ %509, %466 ]
  %468 = phi i8* [ %450, %446 ], [ %508, %466 ]
  %469 = phi i8* [ %454, %446 ], [ %507, %466 ]
  %470 = phi i8* [ %458, %446 ], [ %506, %466 ]
  %471 = getelementptr inbounds i16, i16* %441, i64 %467
  %472 = load i16, i16* %471, align 2
  %473 = zext i16 %472 to i32
  %474 = icmp ugt i32 %416, %473
  %475 = select i1 %474, i32 %473, i32 %416
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %476
  %478 = load float, float* %477, align 4
  %479 = fadd float %419, %478
  %480 = fadd float %422, %478
  %481 = fsub float %478, %429
  %482 = fcmp olt float %479, 0.000000e+00
  %483 = fcmp ogt float %479, 1.000000e+00
  %484 = select i1 %483, float 1.000000e+00, float %479
  %485 = select i1 %482, float 0.000000e+00, float %484
  %486 = fcmp olt float %481, 0.000000e+00
  %487 = fcmp ogt float %481, 1.000000e+00
  %488 = select i1 %487, float 1.000000e+00, float %481
  %489 = select i1 %486, float 0.000000e+00, float %488
  %490 = fcmp olt float %480, 0.000000e+00
  %491 = fcmp ogt float %480, 1.000000e+00
  %492 = select i1 %491, float 1.000000e+00, float %480
  %493 = select i1 %490, float 0.000000e+00, float %492
  %494 = fmul float %398, %485
  %495 = fadd float %494, 5.000000e-01
  %496 = fptoui float %495 to i16
  %497 = bitcast i8* %470 to i16*
  store i16 %496, i16* %497, align 2
  %498 = fmul float %398, %489
  %499 = fadd float %498, 5.000000e-01
  %500 = fptoui float %499 to i16
  %501 = bitcast i8* %469 to i16*
  store i16 %500, i16* %501, align 2
  %502 = fmul float %398, %493
  %503 = fadd float %502, 5.000000e-01
  %504 = fptoui float %503 to i16
  %505 = bitcast i8* %468 to i16*
  store i16 %504, i16* %505, align 2
  %506 = getelementptr inbounds i8, i8* %470, i64 %430
  %507 = getelementptr inbounds i8, i8* %469, i64 %430
  %508 = getelementptr inbounds i8, i8* %468, i64 %430
  %509 = add nuw nsw i64 %467, 1
  %510 = load i32, i32* %415, align 8
  %511 = zext i32 %510 to i64
  %512 = icmp ult i64 %509, %511
  br i1 %512, label %466, label %459

513:                                              ; preds = %229
  br i1 %116, label %514, label %674

514:                                              ; preds = %513
  %515 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %516 = load float, float* %515, align 4
  %517 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %518 = load float, float* %517, align 4
  %519 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %520 = load i32, i32* %519, align 4
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %1811, label %522

522:                                              ; preds = %514
  %523 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %524 = load float, float* %523, align 4
  %525 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %526 = load i32, i32* %525, align 4
  %527 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %528 = load i32, i32* %527, align 4
  %529 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 2
  %530 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %531 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %532 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %533 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %534 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %535 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %536 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %537 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %538 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %539 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %540 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 1
  %541 = and i32 %526, 65535
  %542 = insertelement <2 x float> undef, float %524, i32 0
  %543 = insertelement <2 x float> %542, float %228, i32 1
  %544 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %543
  %545 = extractelement <2 x float> %544, i32 1
  %546 = fmul float %545, 2.000000e+00
  %547 = extractelement <2 x float> %544, i32 0
  %548 = fmul float %547, 2.000000e+00
  %549 = fmul <2 x float> %543, %544
  %550 = zext i32 %528 to i64
  %551 = load i32, i32* %539, align 8
  br label %552

552:                                              ; preds = %595, %522
  %553 = phi i32 [ %520, %522 ], [ %596, %595 ]
  %554 = phi i32 [ %551, %522 ], [ %597, %595 ]
  %555 = phi i32 [ 0, %522 ], [ %598, %595 ]
  %556 = load i32, i32* %529, align 4
  %557 = lshr i32 %555, %556
  %558 = load i8*, i8** %5, align 8
  %559 = load i32, i32* %530, align 8
  %560 = mul i32 %559, %555
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds i8, i8* %558, i64 %561
  %563 = bitcast i8* %562 to i16*
  %564 = load i8*, i8** %531, align 8
  %565 = load i32, i32* %100, align 4
  %566 = mul i32 %565, %557
  %567 = zext i32 %566 to i64
  %568 = getelementptr inbounds i8, i8* %564, i64 %567
  %569 = bitcast i8* %568 to i16*
  %570 = load i8*, i8** %532, align 8
  %571 = load i32, i32* %533, align 8
  %572 = mul i32 %571, %557
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds i8, i8* %570, i64 %573
  %575 = bitcast i8* %574 to i16*
  %576 = load i8*, i8** %534, align 8
  %577 = load i32, i32* %536, align 8
  %578 = mul i32 %577, %555
  %579 = icmp eq i32 %554, 0
  br i1 %579, label %595, label %580

580:                                              ; preds = %552
  %581 = load i32, i32* %538, align 4
  %582 = add i32 %581, %578
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds i8, i8* %576, i64 %583
  %585 = load i32, i32* %537, align 4
  %586 = add i32 %585, %578
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds i8, i8* %576, i64 %587
  %589 = load i32, i32* %535, align 4
  %590 = add i32 %589, %578
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds i8, i8* %576, i64 %591
  br label %600

593:                                              ; preds = %600
  %594 = load i32, i32* %519, align 4
  br label %595

595:                                              ; preds = %593, %552
  %596 = phi i32 [ %594, %593 ], [ %553, %552 ]
  %597 = phi i32 [ %671, %593 ], [ 0, %552 ]
  %598 = add nuw i32 %555, 1
  %599 = icmp ult i32 %598, %596
  br i1 %599, label %552, label %1811

600:                                              ; preds = %600, %580
  %601 = phi i64 [ 0, %580 ], [ %670, %600 ]
  %602 = phi i8* [ %584, %580 ], [ %669, %600 ]
  %603 = phi i8* [ %588, %580 ], [ %668, %600 ]
  %604 = phi i8* [ %592, %580 ], [ %667, %600 ]
  %605 = load i32, i32* %540, align 4
  %606 = trunc i64 %601 to i32
  %607 = lshr i32 %606, %605
  %608 = getelementptr inbounds i16, i16* %563, i64 %601
  %609 = load i16, i16* %608, align 2
  %610 = zext i16 %609 to i32
  %611 = icmp ugt i32 %541, %610
  %612 = select i1 %611, i32 %610, i32 %541
  %613 = zext i32 %612 to i64
  %614 = zext i32 %607 to i64
  %615 = getelementptr inbounds i16, i16* %569, i64 %614
  %616 = load i16, i16* %615, align 2
  %617 = zext i16 %616 to i32
  %618 = icmp ugt i32 %541, %617
  %619 = select i1 %618, i32 %617, i32 %541
  %620 = zext i32 %619 to i64
  %621 = getelementptr inbounds i16, i16* %575, i64 %614
  %622 = load i16, i16* %621, align 2
  %623 = zext i16 %622 to i32
  %624 = icmp ugt i32 %541, %623
  %625 = select i1 %624, i32 %623, i32 %541
  %626 = zext i32 %625 to i64
  %627 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %613
  %628 = load float, float* %627, align 4
  %629 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %620
  %630 = load float, float* %629, align 4
  %631 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %626
  %632 = load float, float* %631, align 4
  %633 = fmul float %546, %632
  %634 = fadd float %628, %633
  %635 = fmul float %548, %630
  %636 = fadd float %628, %635
  %637 = insertelement <2 x float> undef, float %630, i32 0
  %638 = insertelement <2 x float> %637, float %632, i32 1
  %639 = fmul <2 x float> %549, %638
  %640 = extractelement <2 x float> %639, i32 0
  %641 = extractelement <2 x float> %639, i32 1
  %642 = fadd float %640, %641
  %643 = fmul float %642, 2.000000e+00
  %644 = fdiv float %643, %516
  %645 = fsub float %628, %644
  %646 = fcmp olt float %634, 0.000000e+00
  %647 = fcmp ogt float %634, 1.000000e+00
  %648 = select i1 %647, float 1.000000e+00, float %634
  %649 = select i1 %646, float 0.000000e+00, float %648
  %650 = fcmp olt float %645, 0.000000e+00
  %651 = fcmp ogt float %645, 1.000000e+00
  %652 = select i1 %651, float 1.000000e+00, float %645
  %653 = select i1 %650, float 0.000000e+00, float %652
  %654 = fcmp olt float %636, 0.000000e+00
  %655 = fcmp ogt float %636, 1.000000e+00
  %656 = select i1 %655, float 1.000000e+00, float %636
  %657 = select i1 %654, float 0.000000e+00, float %656
  %658 = fmul float %518, %649
  %659 = fadd float %658, 5.000000e-01
  %660 = fptoui float %659 to i8
  store i8 %660, i8* %604, align 1
  %661 = fmul float %518, %653
  %662 = fadd float %661, 5.000000e-01
  %663 = fptoui float %662 to i8
  store i8 %663, i8* %603, align 1
  %664 = fmul float %518, %657
  %665 = fadd float %664, 5.000000e-01
  %666 = fptoui float %665 to i8
  store i8 %666, i8* %602, align 1
  %667 = getelementptr inbounds i8, i8* %604, i64 %550
  %668 = getelementptr inbounds i8, i8* %603, i64 %550
  %669 = getelementptr inbounds i8, i8* %602, i64 %550
  %670 = add nuw nsw i64 %601, 1
  %671 = load i32, i32* %539, align 8
  %672 = zext i32 %671 to i64
  %673 = icmp ult i64 %670, %672
  br i1 %673, label %600, label %593

674:                                              ; preds = %513
  %675 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %676 = load float, float* %675, align 4
  %677 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %678 = load float, float* %677, align 4
  %679 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %680 = load i32, i32* %679, align 4
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %1811, label %682

682:                                              ; preds = %674
  %683 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %684 = load i32, i32* %683, align 4
  %685 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %686 = load i32, i32* %685, align 4
  %687 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %688 = load float, float* %687, align 4
  %689 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %690 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %691 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %692 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %693 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %694 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %695 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %696 = and i32 %684, 65535
  %697 = fsub float 1.000000e+00, %228
  %698 = fmul float %697, 2.000000e+00
  %699 = fmul float %698, 0.000000e+00
  %700 = fsub float 1.000000e+00, %676
  %701 = fmul float %700, 2.000000e+00
  %702 = fmul float %701, 0.000000e+00
  %703 = fmul float %228, %697
  %704 = fmul float %703, 0.000000e+00
  %705 = fmul float %676, %700
  %706 = fmul float %705, 0.000000e+00
  %707 = fadd float %704, %706
  %708 = fmul float %707, 2.000000e+00
  %709 = fdiv float %708, %688
  %710 = zext i32 %686 to i64
  %711 = load i32, i32* %695, align 8
  br label %712

712:                                              ; preds = %741, %682
  %713 = phi i32 [ %680, %682 ], [ %742, %741 ]
  %714 = phi i32 [ %711, %682 ], [ %743, %741 ]
  %715 = phi i32 [ 0, %682 ], [ %744, %741 ]
  %716 = load i8*, i8** %5, align 8
  %717 = load i32, i32* %689, align 8
  %718 = mul i32 %717, %715
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds i8, i8* %716, i64 %719
  %721 = bitcast i8* %720 to i16*
  %722 = load i8*, i8** %690, align 8
  %723 = load i32, i32* %692, align 8
  %724 = mul i32 %723, %715
  %725 = icmp eq i32 %714, 0
  br i1 %725, label %741, label %726

726:                                              ; preds = %712
  %727 = load i32, i32* %694, align 4
  %728 = add i32 %727, %724
  %729 = zext i32 %728 to i64
  %730 = getelementptr inbounds i8, i8* %722, i64 %729
  %731 = load i32, i32* %693, align 4
  %732 = add i32 %731, %724
  %733 = zext i32 %732 to i64
  %734 = getelementptr inbounds i8, i8* %722, i64 %733
  %735 = load i32, i32* %691, align 4
  %736 = add i32 %735, %724
  %737 = zext i32 %736 to i64
  %738 = getelementptr inbounds i8, i8* %722, i64 %737
  br label %746

739:                                              ; preds = %746
  %740 = load i32, i32* %679, align 4
  br label %741

741:                                              ; preds = %739, %712
  %742 = phi i32 [ %740, %739 ], [ %713, %712 ]
  %743 = phi i32 [ %787, %739 ], [ 0, %712 ]
  %744 = add nuw i32 %715, 1
  %745 = icmp ult i32 %744, %742
  br i1 %745, label %712, label %1811

746:                                              ; preds = %746, %726
  %747 = phi i64 [ 0, %726 ], [ %786, %746 ]
  %748 = phi i8* [ %730, %726 ], [ %785, %746 ]
  %749 = phi i8* [ %734, %726 ], [ %784, %746 ]
  %750 = phi i8* [ %738, %726 ], [ %783, %746 ]
  %751 = getelementptr inbounds i16, i16* %721, i64 %747
  %752 = load i16, i16* %751, align 2
  %753 = zext i16 %752 to i32
  %754 = icmp ugt i32 %696, %753
  %755 = select i1 %754, i32 %753, i32 %696
  %756 = zext i32 %755 to i64
  %757 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %756
  %758 = load float, float* %757, align 4
  %759 = fadd float %699, %758
  %760 = fadd float %702, %758
  %761 = fsub float %758, %709
  %762 = fcmp olt float %759, 0.000000e+00
  %763 = fcmp ogt float %759, 1.000000e+00
  %764 = select i1 %763, float 1.000000e+00, float %759
  %765 = select i1 %762, float 0.000000e+00, float %764
  %766 = fcmp olt float %761, 0.000000e+00
  %767 = fcmp ogt float %761, 1.000000e+00
  %768 = select i1 %767, float 1.000000e+00, float %761
  %769 = select i1 %766, float 0.000000e+00, float %768
  %770 = fcmp olt float %760, 0.000000e+00
  %771 = fcmp ogt float %760, 1.000000e+00
  %772 = select i1 %771, float 1.000000e+00, float %760
  %773 = select i1 %770, float 0.000000e+00, float %772
  %774 = fmul float %678, %765
  %775 = fadd float %774, 5.000000e-01
  %776 = fptoui float %775 to i8
  store i8 %776, i8* %750, align 1
  %777 = fmul float %678, %769
  %778 = fadd float %777, 5.000000e-01
  %779 = fptoui float %778 to i8
  store i8 %779, i8* %749, align 1
  %780 = fmul float %678, %773
  %781 = fadd float %780, 5.000000e-01
  %782 = fptoui float %781 to i8
  store i8 %782, i8* %748, align 1
  %783 = getelementptr inbounds i8, i8* %750, i64 %710
  %784 = getelementptr inbounds i8, i8* %749, i64 %710
  %785 = getelementptr inbounds i8, i8* %748, i64 %710
  %786 = add nuw nsw i64 %747, 1
  %787 = load i32, i32* %695, align 8
  %788 = zext i32 %787 to i64
  %789 = icmp ult i64 %786, %788
  br i1 %789, label %746, label %739

790:                                              ; preds = %220
  br i1 %226, label %791, label %1052

791:                                              ; preds = %790
  br i1 %116, label %792, label %940

792:                                              ; preds = %791
  %793 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %794 = load float, float* %793, align 4
  %795 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %796 = load float, float* %795, align 4
  %797 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %798 = load i32, i32* %797, align 4
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %1811, label %800

800:                                              ; preds = %792
  %801 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %802 = load float, float* %801, align 4
  %803 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %804 = load i32, i32* %803, align 4
  %805 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 2
  %806 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %807 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %808 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %809 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %810 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %811 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %812 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %813 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %814 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %815 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %816 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 1
  %817 = insertelement <2 x float> undef, float %802, i32 0
  %818 = insertelement <2 x float> %817, float %228, i32 1
  %819 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %818
  %820 = extractelement <2 x float> %819, i32 1
  %821 = fmul float %820, 2.000000e+00
  %822 = extractelement <2 x float> %819, i32 0
  %823 = fmul float %822, 2.000000e+00
  %824 = fmul <2 x float> %818, %819
  %825 = zext i32 %804 to i64
  %826 = load i32, i32* %815, align 8
  br label %827

827:                                              ; preds = %867, %800
  %828 = phi i32 [ %798, %800 ], [ %868, %867 ]
  %829 = phi i32 [ %826, %800 ], [ %869, %867 ]
  %830 = phi i32 [ 0, %800 ], [ %870, %867 ]
  %831 = load i32, i32* %805, align 4
  %832 = lshr i32 %830, %831
  %833 = load i8*, i8** %5, align 8
  %834 = load i32, i32* %806, align 8
  %835 = mul i32 %834, %830
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds i8, i8* %833, i64 %836
  %838 = load i8*, i8** %807, align 8
  %839 = load i32, i32* %100, align 4
  %840 = mul i32 %839, %832
  %841 = zext i32 %840 to i64
  %842 = getelementptr inbounds i8, i8* %838, i64 %841
  %843 = load i8*, i8** %808, align 8
  %844 = load i32, i32* %809, align 8
  %845 = mul i32 %844, %832
  %846 = zext i32 %845 to i64
  %847 = getelementptr inbounds i8, i8* %843, i64 %846
  %848 = load i8*, i8** %810, align 8
  %849 = load i32, i32* %812, align 8
  %850 = mul i32 %849, %830
  %851 = icmp eq i32 %829, 0
  br i1 %851, label %867, label %852

852:                                              ; preds = %827
  %853 = load i32, i32* %814, align 4
  %854 = add i32 %853, %850
  %855 = zext i32 %854 to i64
  %856 = getelementptr inbounds i8, i8* %848, i64 %855
  %857 = load i32, i32* %813, align 4
  %858 = add i32 %857, %850
  %859 = zext i32 %858 to i64
  %860 = getelementptr inbounds i8, i8* %848, i64 %859
  %861 = load i32, i32* %811, align 4
  %862 = add i32 %861, %850
  %863 = zext i32 %862 to i64
  %864 = getelementptr inbounds i8, i8* %848, i64 %863
  br label %872

865:                                              ; preds = %872
  %866 = load i32, i32* %797, align 4
  br label %867

867:                                              ; preds = %865, %827
  %868 = phi i32 [ %866, %865 ], [ %828, %827 ]
  %869 = phi i32 [ %937, %865 ], [ 0, %827 ]
  %870 = add nuw i32 %830, 1
  %871 = icmp ult i32 %870, %868
  br i1 %871, label %827, label %1811

872:                                              ; preds = %872, %852
  %873 = phi i64 [ 0, %852 ], [ %936, %872 ]
  %874 = phi i8* [ %856, %852 ], [ %935, %872 ]
  %875 = phi i8* [ %860, %852 ], [ %934, %872 ]
  %876 = phi i8* [ %864, %852 ], [ %933, %872 ]
  %877 = load i32, i32* %816, align 4
  %878 = trunc i64 %873 to i32
  %879 = lshr i32 %878, %877
  %880 = getelementptr inbounds i8, i8* %837, i64 %873
  %881 = load i8, i8* %880, align 1
  %882 = zext i8 %881 to i64
  %883 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %882
  %884 = load float, float* %883, align 4
  %885 = zext i32 %879 to i64
  %886 = getelementptr inbounds i8, i8* %842, i64 %885
  %887 = load i8, i8* %886, align 1
  %888 = zext i8 %887 to i64
  %889 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %888
  %890 = load float, float* %889, align 4
  %891 = getelementptr inbounds i8, i8* %847, i64 %885
  %892 = load i8, i8* %891, align 1
  %893 = zext i8 %892 to i64
  %894 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %893
  %895 = load float, float* %894, align 4
  %896 = fmul float %821, %895
  %897 = fadd float %884, %896
  %898 = fmul float %823, %890
  %899 = fadd float %884, %898
  %900 = insertelement <2 x float> undef, float %890, i32 0
  %901 = insertelement <2 x float> %900, float %895, i32 1
  %902 = fmul <2 x float> %824, %901
  %903 = extractelement <2 x float> %902, i32 0
  %904 = extractelement <2 x float> %902, i32 1
  %905 = fadd float %903, %904
  %906 = fmul float %905, 2.000000e+00
  %907 = fdiv float %906, %794
  %908 = fsub float %884, %907
  %909 = fcmp olt float %897, 0.000000e+00
  %910 = fcmp ogt float %897, 1.000000e+00
  %911 = select i1 %910, float 1.000000e+00, float %897
  %912 = select i1 %909, float 0.000000e+00, float %911
  %913 = fcmp olt float %908, 0.000000e+00
  %914 = fcmp ogt float %908, 1.000000e+00
  %915 = select i1 %914, float 1.000000e+00, float %908
  %916 = select i1 %913, float 0.000000e+00, float %915
  %917 = fcmp olt float %899, 0.000000e+00
  %918 = fcmp ogt float %899, 1.000000e+00
  %919 = select i1 %918, float 1.000000e+00, float %899
  %920 = select i1 %917, float 0.000000e+00, float %919
  %921 = fmul float %796, %912
  %922 = fadd float %921, 5.000000e-01
  %923 = fptoui float %922 to i16
  %924 = bitcast i8* %876 to i16*
  store i16 %923, i16* %924, align 2
  %925 = fmul float %796, %916
  %926 = fadd float %925, 5.000000e-01
  %927 = fptoui float %926 to i16
  %928 = bitcast i8* %875 to i16*
  store i16 %927, i16* %928, align 2
  %929 = fmul float %796, %920
  %930 = fadd float %929, 5.000000e-01
  %931 = fptoui float %930 to i16
  %932 = bitcast i8* %874 to i16*
  store i16 %931, i16* %932, align 2
  %933 = getelementptr inbounds i8, i8* %876, i64 %825
  %934 = getelementptr inbounds i8, i8* %875, i64 %825
  %935 = getelementptr inbounds i8, i8* %874, i64 %825
  %936 = add nuw nsw i64 %873, 1
  %937 = load i32, i32* %815, align 8
  %938 = zext i32 %937 to i64
  %939 = icmp ult i64 %936, %938
  br i1 %939, label %872, label %865

940:                                              ; preds = %791
  %941 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %942 = load float, float* %941, align 4
  %943 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %944 = load float, float* %943, align 4
  %945 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %946 = load i32, i32* %945, align 4
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %1811, label %948

948:                                              ; preds = %940
  %949 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %950 = load i32, i32* %949, align 4
  %951 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %952 = load float, float* %951, align 4
  %953 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %954 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %955 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %956 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %957 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %958 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %959 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %960 = fsub float 1.000000e+00, %228
  %961 = fmul float %960, 2.000000e+00
  %962 = fmul float %961, 0.000000e+00
  %963 = fsub float 1.000000e+00, %942
  %964 = fmul float %963, 2.000000e+00
  %965 = fmul float %964, 0.000000e+00
  %966 = fmul float %228, %960
  %967 = fmul float %966, 0.000000e+00
  %968 = fmul float %942, %963
  %969 = fmul float %968, 0.000000e+00
  %970 = fadd float %967, %969
  %971 = fmul float %970, 2.000000e+00
  %972 = fdiv float %971, %952
  %973 = zext i32 %950 to i64
  %974 = load i32, i32* %959, align 8
  br label %975

975:                                              ; preds = %1003, %948
  %976 = phi i32 [ %946, %948 ], [ %1004, %1003 ]
  %977 = phi i32 [ %974, %948 ], [ %1005, %1003 ]
  %978 = phi i32 [ 0, %948 ], [ %1006, %1003 ]
  %979 = load i8*, i8** %5, align 8
  %980 = load i32, i32* %953, align 8
  %981 = mul i32 %980, %978
  %982 = zext i32 %981 to i64
  %983 = getelementptr inbounds i8, i8* %979, i64 %982
  %984 = load i8*, i8** %954, align 8
  %985 = load i32, i32* %956, align 8
  %986 = mul i32 %985, %978
  %987 = icmp eq i32 %977, 0
  br i1 %987, label %1003, label %988

988:                                              ; preds = %975
  %989 = load i32, i32* %958, align 4
  %990 = add i32 %989, %986
  %991 = zext i32 %990 to i64
  %992 = getelementptr inbounds i8, i8* %984, i64 %991
  %993 = load i32, i32* %957, align 4
  %994 = add i32 %993, %986
  %995 = zext i32 %994 to i64
  %996 = getelementptr inbounds i8, i8* %984, i64 %995
  %997 = load i32, i32* %955, align 4
  %998 = add i32 %997, %986
  %999 = zext i32 %998 to i64
  %1000 = getelementptr inbounds i8, i8* %984, i64 %999
  br label %1008

1001:                                             ; preds = %1008
  %1002 = load i32, i32* %945, align 4
  br label %1003

1003:                                             ; preds = %1001, %975
  %1004 = phi i32 [ %1002, %1001 ], [ %976, %975 ]
  %1005 = phi i32 [ %1049, %1001 ], [ 0, %975 ]
  %1006 = add nuw i32 %978, 1
  %1007 = icmp ult i32 %1006, %1004
  br i1 %1007, label %975, label %1811

1008:                                             ; preds = %1008, %988
  %1009 = phi i64 [ 0, %988 ], [ %1048, %1008 ]
  %1010 = phi i8* [ %992, %988 ], [ %1047, %1008 ]
  %1011 = phi i8* [ %996, %988 ], [ %1046, %1008 ]
  %1012 = phi i8* [ %1000, %988 ], [ %1045, %1008 ]
  %1013 = getelementptr inbounds i8, i8* %983, i64 %1009
  %1014 = load i8, i8* %1013, align 1
  %1015 = zext i8 %1014 to i64
  %1016 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %1015
  %1017 = load float, float* %1016, align 4
  %1018 = fadd float %962, %1017
  %1019 = fadd float %965, %1017
  %1020 = fsub float %1017, %972
  %1021 = fcmp olt float %1018, 0.000000e+00
  %1022 = fcmp ogt float %1018, 1.000000e+00
  %1023 = select i1 %1022, float 1.000000e+00, float %1018
  %1024 = select i1 %1021, float 0.000000e+00, float %1023
  %1025 = fcmp olt float %1020, 0.000000e+00
  %1026 = fcmp ogt float %1020, 1.000000e+00
  %1027 = select i1 %1026, float 1.000000e+00, float %1020
  %1028 = select i1 %1025, float 0.000000e+00, float %1027
  %1029 = fcmp olt float %1019, 0.000000e+00
  %1030 = fcmp ogt float %1019, 1.000000e+00
  %1031 = select i1 %1030, float 1.000000e+00, float %1019
  %1032 = select i1 %1029, float 0.000000e+00, float %1031
  %1033 = fmul float %944, %1024
  %1034 = fadd float %1033, 5.000000e-01
  %1035 = fptoui float %1034 to i16
  %1036 = bitcast i8* %1012 to i16*
  store i16 %1035, i16* %1036, align 2
  %1037 = fmul float %944, %1028
  %1038 = fadd float %1037, 5.000000e-01
  %1039 = fptoui float %1038 to i16
  %1040 = bitcast i8* %1011 to i16*
  store i16 %1039, i16* %1040, align 2
  %1041 = fmul float %944, %1032
  %1042 = fadd float %1041, 5.000000e-01
  %1043 = fptoui float %1042 to i16
  %1044 = bitcast i8* %1010 to i16*
  store i16 %1043, i16* %1044, align 2
  %1045 = getelementptr inbounds i8, i8* %1012, i64 %973
  %1046 = getelementptr inbounds i8, i8* %1011, i64 %973
  %1047 = getelementptr inbounds i8, i8* %1010, i64 %973
  %1048 = add nuw nsw i64 %1009, 1
  %1049 = load i32, i32* %959, align 8
  %1050 = zext i32 %1049 to i64
  %1051 = icmp ult i64 %1048, %1050
  br i1 %1051, label %1008, label %1001

1052:                                             ; preds = %790
  br i1 %116, label %1053, label %1198

1053:                                             ; preds = %1052
  %1054 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %1055 = load float, float* %1054, align 4
  %1056 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %1057 = load float, float* %1056, align 4
  %1058 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %1059 = load i32, i32* %1058, align 4
  %1060 = icmp eq i32 %1059, 0
  br i1 %1060, label %1811, label %1061

1061:                                             ; preds = %1053
  %1062 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %1063 = load float, float* %1062, align 4
  %1064 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %1065 = load i32, i32* %1064, align 4
  %1066 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 2
  %1067 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %1068 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %1069 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %1070 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %1071 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %1072 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %1073 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %1074 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %1075 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %1076 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %1077 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 1
  %1078 = insertelement <2 x float> undef, float %1063, i32 0
  %1079 = insertelement <2 x float> %1078, float %228, i32 1
  %1080 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %1079
  %1081 = extractelement <2 x float> %1080, i32 1
  %1082 = fmul float %1081, 2.000000e+00
  %1083 = extractelement <2 x float> %1080, i32 0
  %1084 = fmul float %1083, 2.000000e+00
  %1085 = fmul <2 x float> %1079, %1080
  %1086 = zext i32 %1065 to i64
  %1087 = load i32, i32* %1076, align 8
  br label %1088

1088:                                             ; preds = %1128, %1061
  %1089 = phi i32 [ %1059, %1061 ], [ %1129, %1128 ]
  %1090 = phi i32 [ %1087, %1061 ], [ %1130, %1128 ]
  %1091 = phi i32 [ 0, %1061 ], [ %1131, %1128 ]
  %1092 = load i32, i32* %1066, align 4
  %1093 = lshr i32 %1091, %1092
  %1094 = load i8*, i8** %5, align 8
  %1095 = load i32, i32* %1067, align 8
  %1096 = mul i32 %1095, %1091
  %1097 = zext i32 %1096 to i64
  %1098 = getelementptr inbounds i8, i8* %1094, i64 %1097
  %1099 = load i8*, i8** %1068, align 8
  %1100 = load i32, i32* %100, align 4
  %1101 = mul i32 %1100, %1093
  %1102 = zext i32 %1101 to i64
  %1103 = getelementptr inbounds i8, i8* %1099, i64 %1102
  %1104 = load i8*, i8** %1069, align 8
  %1105 = load i32, i32* %1070, align 8
  %1106 = mul i32 %1105, %1093
  %1107 = zext i32 %1106 to i64
  %1108 = getelementptr inbounds i8, i8* %1104, i64 %1107
  %1109 = load i8*, i8** %1071, align 8
  %1110 = load i32, i32* %1073, align 8
  %1111 = mul i32 %1110, %1091
  %1112 = icmp eq i32 %1090, 0
  br i1 %1112, label %1128, label %1113

1113:                                             ; preds = %1088
  %1114 = load i32, i32* %1075, align 4
  %1115 = add i32 %1114, %1111
  %1116 = zext i32 %1115 to i64
  %1117 = getelementptr inbounds i8, i8* %1109, i64 %1116
  %1118 = load i32, i32* %1074, align 4
  %1119 = add i32 %1118, %1111
  %1120 = zext i32 %1119 to i64
  %1121 = getelementptr inbounds i8, i8* %1109, i64 %1120
  %1122 = load i32, i32* %1072, align 4
  %1123 = add i32 %1122, %1111
  %1124 = zext i32 %1123 to i64
  %1125 = getelementptr inbounds i8, i8* %1109, i64 %1124
  br label %1133

1126:                                             ; preds = %1133
  %1127 = load i32, i32* %1058, align 4
  br label %1128

1128:                                             ; preds = %1126, %1088
  %1129 = phi i32 [ %1127, %1126 ], [ %1089, %1088 ]
  %1130 = phi i32 [ %1195, %1126 ], [ 0, %1088 ]
  %1131 = add nuw i32 %1091, 1
  %1132 = icmp ult i32 %1131, %1129
  br i1 %1132, label %1088, label %1811

1133:                                             ; preds = %1133, %1113
  %1134 = phi i64 [ 0, %1113 ], [ %1194, %1133 ]
  %1135 = phi i8* [ %1117, %1113 ], [ %1193, %1133 ]
  %1136 = phi i8* [ %1121, %1113 ], [ %1192, %1133 ]
  %1137 = phi i8* [ %1125, %1113 ], [ %1191, %1133 ]
  %1138 = load i32, i32* %1077, align 4
  %1139 = trunc i64 %1134 to i32
  %1140 = lshr i32 %1139, %1138
  %1141 = getelementptr inbounds i8, i8* %1098, i64 %1134
  %1142 = load i8, i8* %1141, align 1
  %1143 = zext i8 %1142 to i64
  %1144 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %1143
  %1145 = load float, float* %1144, align 4
  %1146 = zext i32 %1140 to i64
  %1147 = getelementptr inbounds i8, i8* %1103, i64 %1146
  %1148 = load i8, i8* %1147, align 1
  %1149 = zext i8 %1148 to i64
  %1150 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1149
  %1151 = load float, float* %1150, align 4
  %1152 = getelementptr inbounds i8, i8* %1108, i64 %1146
  %1153 = load i8, i8* %1152, align 1
  %1154 = zext i8 %1153 to i64
  %1155 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1154
  %1156 = load float, float* %1155, align 4
  %1157 = fmul float %1082, %1156
  %1158 = fadd float %1145, %1157
  %1159 = fmul float %1084, %1151
  %1160 = fadd float %1145, %1159
  %1161 = insertelement <2 x float> undef, float %1151, i32 0
  %1162 = insertelement <2 x float> %1161, float %1156, i32 1
  %1163 = fmul <2 x float> %1085, %1162
  %1164 = extractelement <2 x float> %1163, i32 0
  %1165 = extractelement <2 x float> %1163, i32 1
  %1166 = fadd float %1164, %1165
  %1167 = fmul float %1166, 2.000000e+00
  %1168 = fdiv float %1167, %1055
  %1169 = fsub float %1145, %1168
  %1170 = fcmp olt float %1158, 0.000000e+00
  %1171 = fcmp ogt float %1158, 1.000000e+00
  %1172 = select i1 %1171, float 1.000000e+00, float %1158
  %1173 = select i1 %1170, float 0.000000e+00, float %1172
  %1174 = fcmp olt float %1169, 0.000000e+00
  %1175 = fcmp ogt float %1169, 1.000000e+00
  %1176 = select i1 %1175, float 1.000000e+00, float %1169
  %1177 = select i1 %1174, float 0.000000e+00, float %1176
  %1178 = fcmp olt float %1160, 0.000000e+00
  %1179 = fcmp ogt float %1160, 1.000000e+00
  %1180 = select i1 %1179, float 1.000000e+00, float %1160
  %1181 = select i1 %1178, float 0.000000e+00, float %1180
  %1182 = fmul float %1057, %1173
  %1183 = fadd float %1182, 5.000000e-01
  %1184 = fptoui float %1183 to i8
  store i8 %1184, i8* %1137, align 1
  %1185 = fmul float %1057, %1177
  %1186 = fadd float %1185, 5.000000e-01
  %1187 = fptoui float %1186 to i8
  store i8 %1187, i8* %1136, align 1
  %1188 = fmul float %1057, %1181
  %1189 = fadd float %1188, 5.000000e-01
  %1190 = fptoui float %1189 to i8
  store i8 %1190, i8* %1135, align 1
  %1191 = getelementptr inbounds i8, i8* %1137, i64 %1086
  %1192 = getelementptr inbounds i8, i8* %1136, i64 %1086
  %1193 = getelementptr inbounds i8, i8* %1135, i64 %1086
  %1194 = add nuw nsw i64 %1134, 1
  %1195 = load i32, i32* %1076, align 8
  %1196 = zext i32 %1195 to i64
  %1197 = icmp ult i64 %1194, %1196
  br i1 %1197, label %1133, label %1126

1198:                                             ; preds = %1052
  %1199 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %1200 = load float, float* %1199, align 4
  %1201 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %1202 = load float, float* %1201, align 4
  %1203 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %1204 = load i32, i32* %1203, align 4
  %1205 = icmp eq i32 %1204, 0
  br i1 %1205, label %1811, label %1206

1206:                                             ; preds = %1198
  %1207 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %1208 = load i32, i32* %1207, align 4
  %1209 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %1210 = load float, float* %1209, align 4
  %1211 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %1212 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %1213 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %1214 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %1215 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %1216 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %1217 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %1218 = fsub float 1.000000e+00, %228
  %1219 = fmul float %1218, 2.000000e+00
  %1220 = fmul float %1219, 0.000000e+00
  %1221 = fsub float 1.000000e+00, %1200
  %1222 = fmul float %1221, 2.000000e+00
  %1223 = fmul float %1222, 0.000000e+00
  %1224 = fmul float %228, %1218
  %1225 = fmul float %1224, 0.000000e+00
  %1226 = fmul float %1200, %1221
  %1227 = fmul float %1226, 0.000000e+00
  %1228 = fadd float %1225, %1227
  %1229 = fmul float %1228, 2.000000e+00
  %1230 = fdiv float %1229, %1210
  %1231 = zext i32 %1208 to i64
  %1232 = load i32, i32* %1217, align 8
  br label %1233

1233:                                             ; preds = %1261, %1206
  %1234 = phi i32 [ %1204, %1206 ], [ %1262, %1261 ]
  %1235 = phi i32 [ %1232, %1206 ], [ %1263, %1261 ]
  %1236 = phi i32 [ 0, %1206 ], [ %1264, %1261 ]
  %1237 = load i8*, i8** %5, align 8
  %1238 = load i32, i32* %1211, align 8
  %1239 = mul i32 %1238, %1236
  %1240 = zext i32 %1239 to i64
  %1241 = getelementptr inbounds i8, i8* %1237, i64 %1240
  %1242 = load i8*, i8** %1212, align 8
  %1243 = load i32, i32* %1214, align 8
  %1244 = mul i32 %1243, %1236
  %1245 = icmp eq i32 %1235, 0
  br i1 %1245, label %1261, label %1246

1246:                                             ; preds = %1233
  %1247 = load i32, i32* %1216, align 4
  %1248 = add i32 %1247, %1244
  %1249 = zext i32 %1248 to i64
  %1250 = getelementptr inbounds i8, i8* %1242, i64 %1249
  %1251 = load i32, i32* %1215, align 4
  %1252 = add i32 %1251, %1244
  %1253 = zext i32 %1252 to i64
  %1254 = getelementptr inbounds i8, i8* %1242, i64 %1253
  %1255 = load i32, i32* %1213, align 4
  %1256 = add i32 %1255, %1244
  %1257 = zext i32 %1256 to i64
  %1258 = getelementptr inbounds i8, i8* %1242, i64 %1257
  br label %1266

1259:                                             ; preds = %1266
  %1260 = load i32, i32* %1203, align 4
  br label %1261

1261:                                             ; preds = %1259, %1233
  %1262 = phi i32 [ %1260, %1259 ], [ %1234, %1233 ]
  %1263 = phi i32 [ %1304, %1259 ], [ 0, %1233 ]
  %1264 = add nuw i32 %1236, 1
  %1265 = icmp ult i32 %1264, %1262
  br i1 %1265, label %1233, label %1811

1266:                                             ; preds = %1266, %1246
  %1267 = phi i64 [ 0, %1246 ], [ %1303, %1266 ]
  %1268 = phi i8* [ %1250, %1246 ], [ %1302, %1266 ]
  %1269 = phi i8* [ %1254, %1246 ], [ %1301, %1266 ]
  %1270 = phi i8* [ %1258, %1246 ], [ %1300, %1266 ]
  %1271 = getelementptr inbounds i8, i8* %1241, i64 %1267
  %1272 = load i8, i8* %1271, align 1
  %1273 = zext i8 %1272 to i64
  %1274 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %1273
  %1275 = load float, float* %1274, align 4
  %1276 = fadd float %1220, %1275
  %1277 = fadd float %1223, %1275
  %1278 = fsub float %1275, %1230
  %1279 = fcmp olt float %1276, 0.000000e+00
  %1280 = fcmp ogt float %1276, 1.000000e+00
  %1281 = select i1 %1280, float 1.000000e+00, float %1276
  %1282 = select i1 %1279, float 0.000000e+00, float %1281
  %1283 = fcmp olt float %1278, 0.000000e+00
  %1284 = fcmp ogt float %1278, 1.000000e+00
  %1285 = select i1 %1284, float 1.000000e+00, float %1278
  %1286 = select i1 %1283, float 0.000000e+00, float %1285
  %1287 = fcmp olt float %1277, 0.000000e+00
  %1288 = fcmp ogt float %1277, 1.000000e+00
  %1289 = select i1 %1288, float 1.000000e+00, float %1277
  %1290 = select i1 %1287, float 0.000000e+00, float %1289
  %1291 = fmul float %1202, %1282
  %1292 = fadd float %1291, 5.000000e-01
  %1293 = fptoui float %1292 to i8
  store i8 %1293, i8* %1270, align 1
  %1294 = fmul float %1202, %1286
  %1295 = fadd float %1294, 5.000000e-01
  %1296 = fptoui float %1295 to i8
  store i8 %1296, i8* %1269, align 1
  %1297 = fmul float %1202, %1290
  %1298 = fadd float %1297, 5.000000e-01
  %1299 = fptoui float %1298 to i8
  store i8 %1299, i8* %1268, align 1
  %1300 = getelementptr inbounds i8, i8* %1270, i64 %1231
  %1301 = getelementptr inbounds i8, i8* %1269, i64 %1231
  %1302 = getelementptr inbounds i8, i8* %1268, i64 %1231
  %1303 = add nuw nsw i64 %1267, 1
  %1304 = load i32, i32* %1217, align 8
  %1305 = zext i32 %1304 to i64
  %1306 = icmp ult i64 %1303, %1305
  br i1 %1306, label %1266, label %1259

1307:                                             ; preds = %111, %124, %128, %132, %136, %117, %121
  %1308 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 0
  %1309 = load float, float* %1308, align 4
  %1310 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 1
  %1311 = load float, float* %1310, align 4
  %1312 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 2
  %1313 = load float, float* %1312, align 4
  %1314 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 3
  %1315 = load i32, i32* %1314, align 4
  %1316 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 6
  %1317 = load i32, i32* %1316, align 4
  %1318 = load i8*, i8** %5, align 8
  %1319 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %1320 = load i8*, i8** %1319, align 8
  %1321 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %1322 = load i8*, i8** %1321, align 8
  %1323 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %1324 = load i8*, i8** %1323, align 8
  %1325 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %1326 = load i32, i32* %1325, align 8
  %1327 = load i32, i32* %100, align 4
  %1328 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %1329 = load i32, i32* %1328, align 8
  %1330 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  %1331 = load i32, i32* %1330, align 8
  %1332 = icmp ne i8* %1320, null
  %1333 = icmp ne i8* %1322, null
  %1334 = and i1 %1332, %1333
  br i1 %1334, label %1335, label %1339

1335:                                             ; preds = %1307
  %1336 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %1337 = load i32, i32* %1336, align 4
  %1338 = icmp ne i32 %1337, 4
  br label %1339

1339:                                             ; preds = %1335, %1307
  %1340 = phi i1 [ false, %1307 ], [ %1338, %1335 ]
  %1341 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 15
  %1342 = load float, float* %1341, align 4
  %1343 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %1344 = load i32, i32* %1343, align 4
  %1345 = icmp eq i32 %1344, 0
  br i1 %1345, label %1816, label %1346

1346:                                             ; preds = %1339
  %1347 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 13
  %1348 = load i32, i32* %1347, align 4
  %1349 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 2
  %1350 = icmp eq i8* %1324, null
  %1351 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 7
  %1352 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 7
  %1353 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 8
  %1354 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 8
  %1355 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 9
  %1356 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %1357 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 22, i32 1
  %1358 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %1359 = and i32 %1348, 65535
  %1360 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %1361 = sub i32 0, %1315
  %1362 = sub nsw i32 0, %1327
  %1363 = sub nsw i32 0, %1329
  %1364 = icmp eq i32 %99, 4
  %1365 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 25
  %1366 = fsub float 1.000000e+00, %1309
  %1367 = fmul float %1366, 2.000000e+00
  %1368 = fsub float 1.000000e+00, %1313
  %1369 = fmul float %1368, 2.000000e+00
  %1370 = fmul float %1309, %1366
  %1371 = fmul float %1313, %1368
  %1372 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 18
  %1373 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 21
  %1374 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %1, i64 0, i32 2
  %1375 = zext i32 %1317 to i64
  %1376 = load i32, i32* %1356, align 8
  br label %1377

1377:                                             ; preds = %1426, %1346
  %1378 = phi i32 [ %1344, %1346 ], [ %1427, %1426 ]
  %1379 = phi i32 [ %1376, %1346 ], [ %1428, %1426 ]
  %1380 = phi i64 [ 0, %1346 ], [ %1429, %1426 ]
  %1381 = load i32, i32* %1349, align 4
  %1382 = trunc i64 %1380 to i32
  %1383 = lshr i32 %1382, %1381
  %1384 = mul i32 %1326, %1382
  %1385 = zext i32 %1384 to i64
  %1386 = getelementptr inbounds i8, i8* %1318, i64 %1385
  %1387 = mul i32 %1383, %1327
  %1388 = zext i32 %1387 to i64
  %1389 = getelementptr inbounds i8, i8* %1320, i64 %1388
  %1390 = select i1 %1332, i8* %1389, i8* null
  %1391 = mul i32 %1383, %1329
  %1392 = zext i32 %1391 to i64
  %1393 = getelementptr inbounds i8, i8* %1322, i64 %1392
  %1394 = select i1 %1333, i8* %1393, i8* null
  %1395 = mul i32 %1331, %1382
  %1396 = zext i32 %1395 to i64
  %1397 = getelementptr inbounds i8, i8* %1324, i64 %1396
  %1398 = select i1 %1350, i8* null, i8* %1397
  %1399 = bitcast i8* %1386 to i16*
  %1400 = bitcast i8* %1390 to i16*
  %1401 = bitcast i8* %1394 to i16*
  %1402 = bitcast i8* %1398 to i16*
  %1403 = load i8*, i8** %1351, align 8
  %1404 = load i32, i32* %1353, align 8
  %1405 = mul i32 %1404, %1382
  %1406 = icmp eq i32 %1379, 0
  br i1 %1406, label %1426, label %1407

1407:                                             ; preds = %1377
  %1408 = load i32, i32* %1355, align 4
  %1409 = add i32 %1408, %1405
  %1410 = zext i32 %1409 to i64
  %1411 = getelementptr inbounds i8, i8* %1403, i64 %1410
  %1412 = load i32, i32* %1354, align 4
  %1413 = add i32 %1412, %1405
  %1414 = zext i32 %1413 to i64
  %1415 = getelementptr inbounds i8, i8* %1403, i64 %1414
  %1416 = load i32, i32* %1352, align 4
  %1417 = add i32 %1416, %1405
  %1418 = zext i32 %1417 to i64
  %1419 = getelementptr inbounds i8, i8* %1403, i64 %1418
  %1420 = icmp eq i64 %1380, 0
  %1421 = and i32 %1382, 1
  %1422 = icmp eq i32 %1421, 0
  %1423 = xor i1 %1422, true
  br label %1432

1424:                                             ; preds = %1803
  %1425 = load i32, i32* %1343, align 4
  br label %1426

1426:                                             ; preds = %1424, %1377
  %1427 = phi i32 [ %1425, %1424 ], [ %1378, %1377 ]
  %1428 = phi i32 [ %1808, %1424 ], [ 0, %1377 ]
  %1429 = add nuw nsw i64 %1380, 1
  %1430 = zext i32 %1427 to i64
  %1431 = icmp ult i64 %1429, %1430
  br i1 %1431, label %1377, label %1816

1432:                                             ; preds = %1803, %1407
  %1433 = phi i64 [ 0, %1407 ], [ %1807, %1803 ]
  %1434 = phi i32 [ %1379, %1407 ], [ %1808, %1803 ]
  %1435 = phi i8* [ %1411, %1407 ], [ %1806, %1803 ]
  %1436 = phi i8* [ %1415, %1407 ], [ %1805, %1803 ]
  %1437 = phi i8* [ %1419, %1407 ], [ %1804, %1803 ]
  %1438 = load i32, i32* %1357, align 4
  %1439 = trunc i64 %1433 to i32
  %1440 = lshr i32 %1439, %1438
  %1441 = load i32, i32* %1358, align 8
  %1442 = icmp eq i32 %1441, 8
  br i1 %1442, label %1443, label %1447

1443:                                             ; preds = %1432
  %1444 = getelementptr inbounds i8, i8* %1386, i64 %1433
  %1445 = load i8, i8* %1444, align 1
  %1446 = zext i8 %1445 to i64
  br label %1454

1447:                                             ; preds = %1432
  %1448 = getelementptr inbounds i16, i16* %1399, i64 %1433
  %1449 = load i16, i16* %1448, align 2
  %1450 = zext i16 %1449 to i32
  %1451 = icmp ugt i32 %1359, %1450
  %1452 = select i1 %1451, i32 %1450, i32 %1359
  %1453 = zext i32 %1452 to i64
  br label %1454

1454:                                             ; preds = %1447, %1443
  %1455 = phi i64 [ %1446, %1443 ], [ %1453, %1447 ]
  %1456 = and i64 %1455, 65535
  %1457 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 23, i64 %1456
  %1458 = load float, float* %1457, align 4
  br i1 %1340, label %1459, label %1713

1459:                                             ; preds = %1454
  %1460 = load i32, i32* %1360, align 4
  %1461 = icmp eq i32 %1460, 1
  br i1 %1461, label %1462, label %1495

1462:                                             ; preds = %1459
  %1463 = zext i32 %1440 to i64
  br i1 %1442, label %1464, label %1471

1464:                                             ; preds = %1462
  %1465 = getelementptr inbounds i8, i8* %1390, i64 %1463
  %1466 = load i8, i8* %1465, align 1
  %1467 = zext i8 %1466 to i64
  %1468 = getelementptr inbounds i8, i8* %1394, i64 %1463
  %1469 = load i8, i8* %1468, align 1
  %1470 = zext i8 %1469 to i64
  br label %1484

1471:                                             ; preds = %1462
  %1472 = getelementptr inbounds i16, i16* %1400, i64 %1463
  %1473 = load i16, i16* %1472, align 2
  %1474 = zext i16 %1473 to i32
  %1475 = icmp ugt i32 %1359, %1474
  %1476 = select i1 %1475, i32 %1474, i32 %1359
  %1477 = zext i32 %1476 to i64
  %1478 = getelementptr inbounds i16, i16* %1401, i64 %1463
  %1479 = load i16, i16* %1478, align 2
  %1480 = zext i16 %1479 to i32
  %1481 = icmp ugt i32 %1359, %1480
  %1482 = select i1 %1481, i32 %1480, i32 %1359
  %1483 = zext i32 %1482 to i64
  br label %1484

1484:                                             ; preds = %1471, %1464
  %1485 = phi i64 [ %1467, %1464 ], [ %1477, %1471 ]
  %1486 = phi i64 [ %1470, %1464 ], [ %1483, %1471 ]
  %1487 = and i64 %1485, 65535
  %1488 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1487
  %1489 = load float, float* %1488, align 4
  %1490 = and i64 %1486, 65535
  %1491 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1490
  %1492 = load float, float* %1491, align 4
  %1493 = insertelement <2 x float> undef, float %1492, i32 0
  %1494 = insertelement <2 x float> %1493, float %1489, i32 1
  br label %1692

1495:                                             ; preds = %1459
  %1496 = icmp eq i64 %1433, 0
  br i1 %1496, label %1506, label %1497

1497:                                             ; preds = %1495
  %1498 = add i32 %1434, -1
  %1499 = zext i32 %1498 to i64
  %1500 = icmp ne i64 %1433, %1499
  %1501 = and i32 %1439, 1
  %1502 = icmp eq i32 %1501, 0
  %1503 = or i1 %1502, %1500
  %1504 = select i1 %1502, i32 %1361, i32 %1315
  %1505 = select i1 %1503, i32 %1504, i32 0
  br label %1506

1506:                                             ; preds = %1497, %1495
  %1507 = phi i32 [ 0, %1495 ], [ %1505, %1497 ]
  br i1 %1420, label %1522, label %1508

1508:                                             ; preds = %1506
  %1509 = load i32, i32* %1343, align 4
  %1510 = add i32 %1509, -1
  %1511 = zext i32 %1510 to i64
  %1512 = icmp ne i64 %1380, %1511
  %1513 = or i1 %1422, %1512
  %1514 = xor i1 %1513, true
  %1515 = icmp eq i32 %1460, 2
  %1516 = or i1 %1515, %1514
  %1517 = or i1 %1516, %1423
  %1518 = select i1 %1516, i32 0, i32 %1327
  %1519 = select i1 %1516, i32 0, i32 %1329
  %1520 = select i1 %1517, i32 %1518, i32 %1362
  %1521 = select i1 %1517, i32 %1519, i32 %1363
  br label %1522

1522:                                             ; preds = %1508, %1506
  %1523 = phi i32 [ 0, %1506 ], [ %1520, %1508 ]
  %1524 = phi i32 [ 0, %1506 ], [ %1521, %1508 ]
  %1525 = mul i32 %1440, %1315
  %1526 = add i32 %1525, %1387
  %1527 = zext i32 %1526 to i64
  %1528 = getelementptr inbounds i8, i8* %1320, i64 %1527
  br i1 %1442, label %1529, label %1567

1529:                                             ; preds = %1522
  %1530 = load i8, i8* %1528, align 1
  %1531 = zext i8 %1530 to i64
  %1532 = add i32 %1525, %1391
  %1533 = zext i32 %1532 to i64
  %1534 = getelementptr inbounds i8, i8* %1322, i64 %1533
  %1535 = load i8, i8* %1534, align 1
  %1536 = zext i8 %1535 to i16
  %1537 = add i32 %1507, %1526
  %1538 = zext i32 %1537 to i64
  %1539 = getelementptr inbounds i8, i8* %1320, i64 %1538
  %1540 = load i8, i8* %1539, align 1
  %1541 = zext i8 %1540 to i64
  %1542 = add i32 %1507, %1532
  %1543 = zext i32 %1542 to i64
  %1544 = getelementptr inbounds i8, i8* %1322, i64 %1543
  %1545 = load i8, i8* %1544, align 1
  %1546 = zext i8 %1545 to i64
  %1547 = add i32 %1523, %1526
  %1548 = zext i32 %1547 to i64
  %1549 = getelementptr inbounds i8, i8* %1320, i64 %1548
  %1550 = load i8, i8* %1549, align 1
  %1551 = zext i8 %1550 to i64
  %1552 = add i32 %1524, %1532
  %1553 = zext i32 %1552 to i64
  %1554 = getelementptr inbounds i8, i8* %1322, i64 %1553
  %1555 = load i8, i8* %1554, align 1
  %1556 = zext i8 %1555 to i64
  %1557 = add i32 %1523, %1537
  %1558 = zext i32 %1557 to i64
  %1559 = getelementptr inbounds i8, i8* %1320, i64 %1558
  %1560 = load i8, i8* %1559, align 1
  %1561 = zext i8 %1560 to i64
  %1562 = add i32 %1524, %1542
  %1563 = zext i32 %1562 to i64
  %1564 = getelementptr inbounds i8, i8* %1322, i64 %1563
  %1565 = load i8, i8* %1564, align 1
  %1566 = zext i8 %1565 to i64
  br label %1637

1567:                                             ; preds = %1522
  %1568 = bitcast i8* %1528 to i16*
  %1569 = load i16, i16* %1568, align 2
  %1570 = add i32 %1525, %1391
  %1571 = zext i32 %1570 to i64
  %1572 = getelementptr inbounds i8, i8* %1322, i64 %1571
  %1573 = bitcast i8* %1572 to i16*
  %1574 = load i16, i16* %1573, align 2
  %1575 = add i32 %1507, %1526
  %1576 = zext i32 %1575 to i64
  %1577 = getelementptr inbounds i8, i8* %1320, i64 %1576
  %1578 = bitcast i8* %1577 to i16*
  %1579 = load i16, i16* %1578, align 2
  %1580 = add i32 %1507, %1570
  %1581 = zext i32 %1580 to i64
  %1582 = getelementptr inbounds i8, i8* %1322, i64 %1581
  %1583 = bitcast i8* %1582 to i16*
  %1584 = load i16, i16* %1583, align 2
  %1585 = add i32 %1523, %1526
  %1586 = zext i32 %1585 to i64
  %1587 = getelementptr inbounds i8, i8* %1320, i64 %1586
  %1588 = bitcast i8* %1587 to i16*
  %1589 = load i16, i16* %1588, align 2
  %1590 = add i32 %1524, %1570
  %1591 = zext i32 %1590 to i64
  %1592 = getelementptr inbounds i8, i8* %1322, i64 %1591
  %1593 = bitcast i8* %1592 to i16*
  %1594 = load i16, i16* %1593, align 2
  %1595 = add i32 %1523, %1575
  %1596 = zext i32 %1595 to i64
  %1597 = getelementptr inbounds i8, i8* %1320, i64 %1596
  %1598 = bitcast i8* %1597 to i16*
  %1599 = load i16, i16* %1598, align 2
  %1600 = add i32 %1524, %1580
  %1601 = zext i32 %1600 to i64
  %1602 = getelementptr inbounds i8, i8* %1322, i64 %1601
  %1603 = bitcast i8* %1602 to i16*
  %1604 = load i16, i16* %1603, align 2
  %1605 = zext i16 %1569 to i32
  %1606 = icmp ugt i32 %1359, %1605
  %1607 = select i1 %1606, i32 %1605, i32 %1359
  %1608 = zext i32 %1607 to i64
  %1609 = zext i16 %1574 to i32
  %1610 = icmp ugt i32 %1359, %1609
  %1611 = select i1 %1610, i32 %1609, i32 %1359
  %1612 = trunc i32 %1611 to i16
  %1613 = zext i16 %1579 to i32
  %1614 = icmp ugt i32 %1359, %1613
  %1615 = select i1 %1614, i32 %1613, i32 %1359
  %1616 = zext i32 %1615 to i64
  %1617 = zext i16 %1584 to i32
  %1618 = icmp ugt i32 %1359, %1617
  %1619 = select i1 %1618, i32 %1617, i32 %1359
  %1620 = zext i32 %1619 to i64
  %1621 = zext i16 %1589 to i32
  %1622 = icmp ugt i32 %1359, %1621
  %1623 = select i1 %1622, i32 %1621, i32 %1359
  %1624 = zext i32 %1623 to i64
  %1625 = zext i16 %1594 to i32
  %1626 = icmp ugt i32 %1359, %1625
  %1627 = select i1 %1626, i32 %1625, i32 %1359
  %1628 = zext i32 %1627 to i64
  %1629 = zext i16 %1599 to i32
  %1630 = icmp ugt i32 %1359, %1629
  %1631 = select i1 %1630, i32 %1629, i32 %1359
  %1632 = zext i32 %1631 to i64
  %1633 = zext i16 %1604 to i32
  %1634 = icmp ugt i32 %1359, %1633
  %1635 = select i1 %1634, i32 %1633, i32 %1359
  %1636 = zext i32 %1635 to i64
  br label %1637

1637:                                             ; preds = %1567, %1529
  %1638 = phi i64 [ %1636, %1567 ], [ %1566, %1529 ]
  %1639 = phi i64 [ %1628, %1567 ], [ %1556, %1529 ]
  %1640 = phi i64 [ %1620, %1567 ], [ %1546, %1529 ]
  %1641 = phi i64 [ %1632, %1567 ], [ %1561, %1529 ]
  %1642 = phi i64 [ %1624, %1567 ], [ %1551, %1529 ]
  %1643 = phi i64 [ %1616, %1567 ], [ %1541, %1529 ]
  %1644 = phi i16 [ %1612, %1567 ], [ %1536, %1529 ]
  %1645 = phi i64 [ %1608, %1567 ], [ %1531, %1529 ]
  %1646 = and i64 %1645, 65535
  %1647 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1646
  %1648 = load float, float* %1647, align 4
  br i1 %1364, label %1649, label %1686

1649:                                             ; preds = %1637
  %1650 = and i64 %1643, 65535
  %1651 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1650
  %1652 = load float, float* %1651, align 4
  %1653 = and i64 %1642, 65535
  %1654 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1653
  %1655 = load float, float* %1654, align 4
  %1656 = and i64 %1641, 65535
  %1657 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1656
  %1658 = load float, float* %1657, align 4
  %1659 = zext i16 %1644 to i64
  %1660 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1659
  %1661 = load float, float* %1660, align 4
  %1662 = insertelement <2 x float> undef, float %1661, i32 0
  %1663 = insertelement <2 x float> %1662, float %1648, i32 1
  %1664 = fmul <2 x float> %1663, <float 5.625000e-01, float 5.625000e-01>
  %1665 = and i64 %1640, 65535
  %1666 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1665
  %1667 = load float, float* %1666, align 4
  %1668 = insertelement <2 x float> undef, float %1667, i32 0
  %1669 = insertelement <2 x float> %1668, float %1652, i32 1
  %1670 = fmul <2 x float> %1669, <float 1.875000e-01, float 1.875000e-01>
  %1671 = fadd <2 x float> %1664, %1670
  %1672 = and i64 %1639, 65535
  %1673 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1672
  %1674 = load float, float* %1673, align 4
  %1675 = insertelement <2 x float> undef, float %1674, i32 0
  %1676 = insertelement <2 x float> %1675, float %1655, i32 1
  %1677 = fmul <2 x float> %1676, <float 1.875000e-01, float 1.875000e-01>
  %1678 = fadd <2 x float> %1671, %1677
  %1679 = and i64 %1638, 65535
  %1680 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1679
  %1681 = load float, float* %1680, align 4
  %1682 = insertelement <2 x float> undef, float %1681, i32 0
  %1683 = insertelement <2 x float> %1682, float %1658, i32 1
  %1684 = fmul <2 x float> %1683, <float 6.250000e-02, float 6.250000e-02>
  %1685 = fadd <2 x float> %1678, %1684
  br label %1692

1686:                                             ; preds = %1637
  %1687 = zext i16 %1644 to i64
  %1688 = getelementptr inbounds %struct.avifReformatState, %struct.avifReformatState* %3, i64 0, i32 24, i64 %1687
  %1689 = load float, float* %1688, align 4
  %1690 = insertelement <2 x float> undef, float %1689, i32 0
  %1691 = insertelement <2 x float> %1690, float %1648, i32 1
  br label %1692

1692:                                             ; preds = %1686, %1649, %1484
  %1693 = phi <2 x float> [ %1494, %1484 ], [ %1685, %1649 ], [ %1691, %1686 ]
  %1694 = load i32, i32* %1365, align 4
  %1695 = extractelement <2 x float> %1693, i32 0
  %1696 = extractelement <2 x float> %1693, i32 1
  switch i32 %1694, label %1702 [
    i32 1, label %1713
    i32 2, label %1697
  ]

1697:                                             ; preds = %1692
  %1698 = fsub float %1458, %1696
  %1699 = fadd float %1458, %1696
  %1700 = fsub float %1698, %1695
  %1701 = fadd float %1695, %1698
  br label %1713

1702:                                             ; preds = %1692
  %1703 = fmul float %1367, %1695
  %1704 = fadd float %1458, %1703
  %1705 = fmul float %1369, %1696
  %1706 = fadd float %1458, %1705
  %1707 = fmul float %1370, %1695
  %1708 = fmul float %1371, %1696
  %1709 = fadd float %1707, %1708
  %1710 = fmul float %1709, 2.000000e+00
  %1711 = fdiv float %1710, %1311
  %1712 = fsub float %1458, %1711
  br label %1713

1713:                                             ; preds = %1702, %1697, %1692, %1454
  %1714 = phi float [ %1701, %1697 ], [ %1704, %1702 ], [ %1695, %1692 ], [ %1458, %1454 ]
  %1715 = phi float [ %1699, %1697 ], [ %1712, %1702 ], [ %1458, %1692 ], [ %1458, %1454 ]
  %1716 = phi float [ %1700, %1697 ], [ %1706, %1702 ], [ %1696, %1692 ], [ %1458, %1454 ]
  %1717 = fcmp olt float %1714, 0.000000e+00
  %1718 = fcmp ogt float %1714, 1.000000e+00
  %1719 = select i1 %1718, float 1.000000e+00, float %1714
  %1720 = select i1 %1717, float 0.000000e+00, float %1719
  %1721 = fcmp olt float %1715, 0.000000e+00
  %1722 = fcmp ogt float %1715, 1.000000e+00
  %1723 = select i1 %1722, float 1.000000e+00, float %1715
  %1724 = select i1 %1721, float 0.000000e+00, float %1723
  %1725 = fcmp olt float %1716, 0.000000e+00
  %1726 = fcmp ogt float %1716, 1.000000e+00
  %1727 = select i1 %1726, float 1.000000e+00, float %1716
  %1728 = select i1 %1725, float 0.000000e+00, float %1727
  %1729 = load i32, i32* %13, align 4
  %1730 = icmp eq i32 %1729, 0
  br i1 %1730, label %1776, label %1731

1731:                                             ; preds = %1713
  br i1 %1442, label %1732, label %1736

1732:                                             ; preds = %1731
  %1733 = getelementptr inbounds i8, i8* %1398, i64 %1433
  %1734 = load i8, i8* %1733, align 1
  %1735 = zext i8 %1734 to i32
  br label %1742

1736:                                             ; preds = %1731
  %1737 = getelementptr inbounds i16, i16* %1402, i64 %1433
  %1738 = load i16, i16* %1737, align 2
  %1739 = zext i16 %1738 to i32
  %1740 = icmp ugt i32 %1359, %1739
  %1741 = select i1 %1740, i32 %1739, i32 %1359
  br label %1742

1742:                                             ; preds = %1736, %1732
  %1743 = phi i32 [ %1735, %1732 ], [ %1741, %1736 ]
  %1744 = and i32 %1743, 65535
  %1745 = sitofp i32 %1744 to float
  %1746 = load float, float* %1372, align 4
  %1747 = fsub float %1745, %1746
  %1748 = load float, float* %1373, align 4
  %1749 = fdiv float %1747, %1748
  %1750 = fcmp olt float %1749, 0.000000e+00
  %1751 = fcmp ogt float %1749, 1.000000e+00
  %1752 = select i1 %1751, float 1.000000e+00, float %1749
  %1753 = select i1 %1750, float 0.000000e+00, float %1752
  %1754 = icmp eq i32 %1729, 1
  %1755 = fcmp oeq float %1753, 0.000000e+00
  br i1 %1754, label %1756, label %1763

1756:                                             ; preds = %1742
  br i1 %1755, label %1776, label %1757

1757:                                             ; preds = %1756
  %1758 = fcmp olt float %1753, 1.000000e+00
  br i1 %1758, label %1759, label %1776

1759:                                             ; preds = %1757
  %1760 = fmul float %1720, %1753
  %1761 = fmul float %1724, %1753
  %1762 = fmul float %1728, %1753
  br label %1776

1763:                                             ; preds = %1742
  br i1 %1755, label %1776, label %1764

1764:                                             ; preds = %1763
  %1765 = fcmp olt float %1753, 1.000000e+00
  br i1 %1765, label %1766, label %1776

1766:                                             ; preds = %1764
  %1767 = fdiv float %1720, %1753
  %1768 = fdiv float %1724, %1753
  %1769 = fdiv float %1728, %1753
  %1770 = fcmp olt float %1767, 1.000000e+00
  %1771 = select i1 %1770, float %1767, float 1.000000e+00
  %1772 = fcmp olt float %1768, 1.000000e+00
  %1773 = select i1 %1772, float %1768, float 1.000000e+00
  %1774 = fcmp olt float %1769, 1.000000e+00
  %1775 = select i1 %1774, float %1769, float 1.000000e+00
  br label %1776

1776:                                             ; preds = %1766, %1764, %1763, %1759, %1757, %1756, %1713
  %1777 = phi float [ %1720, %1713 ], [ %1760, %1759 ], [ %1720, %1757 ], [ %1771, %1766 ], [ %1720, %1764 ], [ 0.000000e+00, %1756 ], [ 0.000000e+00, %1763 ]
  %1778 = phi float [ %1724, %1713 ], [ %1761, %1759 ], [ %1724, %1757 ], [ %1773, %1766 ], [ %1724, %1764 ], [ 0.000000e+00, %1756 ], [ 0.000000e+00, %1763 ]
  %1779 = phi float [ %1728, %1713 ], [ %1762, %1759 ], [ %1728, %1757 ], [ %1775, %1766 ], [ %1728, %1764 ], [ 0.000000e+00, %1756 ], [ 0.000000e+00, %1763 ]
  %1780 = load i32, i32* %1374, align 8
  %1781 = icmp eq i32 %1780, 8
  %1782 = fmul float %1342, %1777
  %1783 = fadd float %1782, 5.000000e-01
  br i1 %1781, label %1784, label %1792

1784:                                             ; preds = %1776
  %1785 = fptoui float %1783 to i8
  store i8 %1785, i8* %1437, align 1
  %1786 = fmul float %1342, %1778
  %1787 = fadd float %1786, 5.000000e-01
  %1788 = fptoui float %1787 to i8
  store i8 %1788, i8* %1436, align 1
  %1789 = fmul float %1342, %1779
  %1790 = fadd float %1789, 5.000000e-01
  %1791 = fptoui float %1790 to i8
  store i8 %1791, i8* %1435, align 1
  br label %1803

1792:                                             ; preds = %1776
  %1793 = fptoui float %1783 to i16
  %1794 = bitcast i8* %1437 to i16*
  store i16 %1793, i16* %1794, align 2
  %1795 = fmul float %1342, %1778
  %1796 = fadd float %1795, 5.000000e-01
  %1797 = fptoui float %1796 to i16
  %1798 = bitcast i8* %1436 to i16*
  store i16 %1797, i16* %1798, align 2
  %1799 = fmul float %1342, %1779
  %1800 = fadd float %1799, 5.000000e-01
  %1801 = fptoui float %1800 to i16
  %1802 = bitcast i8* %1435 to i16*
  store i16 %1801, i16* %1802, align 2
  br label %1803

1803:                                             ; preds = %1792, %1784
  %1804 = getelementptr inbounds i8, i8* %1437, i64 %1375
  %1805 = getelementptr inbounds i8, i8* %1436, i64 %1375
  %1806 = getelementptr inbounds i8, i8* %1435, i64 %1375
  %1807 = add nuw nsw i64 %1433, 1
  %1808 = load i32, i32* %1356, align 8
  %1809 = zext i32 %1808 to i64
  %1810 = icmp ult i64 %1807, %1809
  br i1 %1810, label %1432, label %1424

1811:                                             ; preds = %1261, %1128, %1003, %867, %741, %595, %461, %312, %197, %1198, %1053, %940, %792, %674, %514, %394, %231, %140, %92
  switch i32 %14, label %1816 [
    i32 1, label %1812
    i32 2, label %1814
  ]

1812:                                             ; preds = %1811
  %1813 = call i32 @avifRGBImagePremultiplyAlpha(%struct.avifRGBImage* %1) #4
  br label %1816

1814:                                             ; preds = %1811
  %1815 = call i32 @avifRGBImageUnpremultiplyAlpha(%struct.avifRGBImage* %1) #4
  br label %1816

1816:                                             ; preds = %1426, %1339, %21, %1812, %1814, %1811, %8
  %1817 = phi i32 [ 5, %8 ], [ %1813, %1812 ], [ %1815, %1814 ], [ 0, %1811 ], [ %22, %21 ], [ 0, %1339 ], [ 0, %1426 ]
  call void @llvm.lifetime.end.p0i8(i64 32876, i8* nonnull %9) #4
  br label %1818

1818:                                             ; preds = %2, %1816
  %1819 = phi i32 [ %1817, %1816 ], [ 5, %2 ]
  ret i32 %1819
}

declare i32 @avifImageYUVToRGBLibYUV(%struct.avifImage*, %struct.avifRGBImage*) local_unnamed_addr #2

declare i32 @avifRGBImagePremultiplyAlpha(%struct.avifRGBImage*) local_unnamed_addr #2

declare i32 @avifRGBImageUnpremultiplyAlpha(%struct.avifRGBImage*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifLimitedToFullY(i32, i32) local_unnamed_addr #3 {
  switch i32 %0, label %27 [
    i32 8, label %3
    i32 10, label %11
    i32 12, label %19
  ]

3:                                                ; preds = %2
  %4 = mul i32 %1, 255
  %5 = add i32 %4, -3971
  %6 = sdiv i32 %5, 219
  %7 = icmp slt i32 %5, -218
  %8 = icmp slt i32 %6, 255
  %9 = select i1 %8, i32 %6, i32 255
  %10 = select i1 %7, i32 0, i32 %9
  br label %27

11:                                               ; preds = %2
  %12 = mul i32 %1, 1023
  %13 = add i32 %12, -65034
  %14 = sdiv i32 %13, 876
  %15 = icmp slt i32 %13, -875
  %16 = icmp slt i32 %14, 1023
  %17 = select i1 %16, i32 %14, i32 1023
  %18 = select i1 %15, i32 0, i32 %17
  br label %27

19:                                               ; preds = %2
  %20 = mul i32 %1, 4095
  %21 = add i32 %20, -1046568
  %22 = sdiv i32 %21, 3504
  %23 = icmp slt i32 %21, -3503
  %24 = icmp slt i32 %22, 4095
  %25 = select i1 %24, i32 %22, i32 4095
  %26 = select i1 %23, i32 0, i32 %25
  br label %27

27:                                               ; preds = %19, %11, %3, %2
  %28 = phi i32 [ %1, %2 ], [ %10, %3 ], [ %18, %11 ], [ %26, %19 ]
  ret i32 %28
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifLimitedToFullUV(i32, i32) local_unnamed_addr #3 {
  switch i32 %0, label %27 [
    i32 8, label %3
    i32 10, label %11
    i32 12, label %19
  ]

3:                                                ; preds = %2
  %4 = mul i32 %1, 255
  %5 = add i32 %4, -3968
  %6 = sdiv i32 %5, 224
  %7 = icmp slt i32 %5, -223
  %8 = icmp slt i32 %6, 255
  %9 = select i1 %8, i32 %6, i32 255
  %10 = select i1 %7, i32 0, i32 %9
  br label %27

11:                                               ; preds = %2
  %12 = mul i32 %1, 1023
  %13 = add i32 %12, -65024
  %14 = sdiv i32 %13, 896
  %15 = icmp slt i32 %13, -895
  %16 = icmp slt i32 %14, 1023
  %17 = select i1 %16, i32 %14, i32 1023
  %18 = select i1 %15, i32 0, i32 %17
  br label %27

19:                                               ; preds = %2
  %20 = mul i32 %1, 4095
  %21 = add i32 %20, -1046528
  %22 = sdiv i32 %21, 3584
  %23 = icmp slt i32 %21, -3583
  %24 = icmp slt i32 %22, 4095
  %25 = select i1 %24, i32 %22, i32 4095
  %26 = select i1 %23, i32 0, i32 %25
  br label %27

27:                                               ; preds = %19, %11, %3, %2
  %28 = phi i32 [ %1, %2 ], [ %10, %3 ], [ %18, %11 ], [ %26, %19 ]
  ret i32 %28
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifFullToLimitedY(i32, i32) local_unnamed_addr #3 {
  switch i32 %0, label %30 [
    i32 8, label %3
    i32 10, label %12
    i32 12, label %21
  ]

3:                                                ; preds = %2
  %4 = mul nsw i32 %1, 219
  %5 = add nsw i32 %4, 127
  %6 = sdiv i32 %5, 255
  %7 = icmp slt i32 %5, -254
  br i1 %7, label %30, label %8

8:                                                ; preds = %3
  %9 = icmp slt i32 %6, 219
  %10 = select i1 %9, i32 %6, i32 219
  %11 = add nsw i32 %10, 16
  br label %30

12:                                               ; preds = %2
  %13 = mul nsw i32 %1, 876
  %14 = add nsw i32 %13, 511
  %15 = sdiv i32 %14, 1023
  %16 = icmp slt i32 %14, -1022
  br i1 %16, label %30, label %17

17:                                               ; preds = %12
  %18 = icmp slt i32 %15, 876
  %19 = select i1 %18, i32 %15, i32 876
  %20 = add nsw i32 %19, 64
  br label %30

21:                                               ; preds = %2
  %22 = mul nsw i32 %1, 3504
  %23 = add nsw i32 %22, 2047
  %24 = sdiv i32 %23, 4095
  %25 = icmp slt i32 %23, -4094
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = icmp slt i32 %24, 3504
  %28 = select i1 %27, i32 %24, i32 3504
  %29 = add nsw i32 %28, 256
  br label %30

30:                                               ; preds = %21, %26, %12, %17, %3, %8, %2
  %31 = phi i32 [ %1, %2 ], [ 16, %3 ], [ %11, %8 ], [ 64, %12 ], [ %20, %17 ], [ 256, %21 ], [ %29, %26 ]
  ret i32 %31
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifFullToLimitedUV(i32, i32) local_unnamed_addr #3 {
  switch i32 %0, label %30 [
    i32 8, label %3
    i32 10, label %12
    i32 12, label %21
  ]

3:                                                ; preds = %2
  %4 = mul nsw i32 %1, 224
  %5 = add nsw i32 %4, 127
  %6 = sdiv i32 %5, 255
  %7 = icmp slt i32 %5, -254
  br i1 %7, label %30, label %8

8:                                                ; preds = %3
  %9 = icmp slt i32 %6, 224
  %10 = select i1 %9, i32 %6, i32 224
  %11 = add nsw i32 %10, 16
  br label %30

12:                                               ; preds = %2
  %13 = mul nsw i32 %1, 896
  %14 = add nsw i32 %13, 511
  %15 = sdiv i32 %14, 1023
  %16 = icmp slt i32 %14, -1022
  br i1 %16, label %30, label %17

17:                                               ; preds = %12
  %18 = icmp slt i32 %15, 896
  %19 = select i1 %18, i32 %15, i32 896
  %20 = add nsw i32 %19, 64
  br label %30

21:                                               ; preds = %2
  %22 = mul nsw i32 %1, 3584
  %23 = add nsw i32 %22, 2047
  %24 = sdiv i32 %23, 4095
  %25 = icmp slt i32 %23, -4094
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = icmp slt i32 %24, 3584
  %28 = select i1 %27, i32 %24, i32 3584
  %29 = add nsw i32 %28, 256
  br label %30

30:                                               ; preds = %21, %26, %12, %17, %3, %8, %2
  %31 = phi i32 [ %1, %2 ], [ 16, %3 ], [ %11, %8 ], [ 64, %12 ], [ %20, %17 ], [ 256, %21 ], [ %29, %26 ]
  ret i32 %31
}

declare void @avifGetPixelFormatInfo(i32, %struct.avifPixelFormatInfo*) local_unnamed_addr #2

declare void @avifCalcYUVCoefficients(%struct.avifImage*, float*, float*, float*) local_unnamed_addr #2

declare i32 @avifRGBFormatChannelCount(i32) local_unnamed_addr #2

declare float @avifRoundf(float) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !6, !3}
