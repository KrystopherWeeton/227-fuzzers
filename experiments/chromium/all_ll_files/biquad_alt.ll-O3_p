; ModuleID = '../../third_party/opus/src/silk/biquad_alt.c'
source_filename = "../../third_party/opus/src/silk/biquad_alt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_biquad_alt_stride1(i16* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture, i16* nocapture, i32) local_unnamed_addr #0 {
  %7 = load i32, i32* %2, align 4
  %8 = sub nsw i32 0, %7
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = sub nsw i32 0, %10
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %13, label %88

13:                                               ; preds = %6
  %14 = lshr i32 %11, 14
  %15 = lshr i32 %8, 14
  %16 = getelementptr inbounds i32, i32* %3, i64 1
  %17 = and i32 %8, 16383
  %18 = zext i32 %17 to i64
  %19 = zext i32 %15 to i64
  %20 = shl i64 %19, 48
  %21 = ashr exact i64 %20, 48
  %22 = getelementptr inbounds i32, i32* %1, i64 1
  %23 = and i32 %11, 16383
  %24 = zext i32 %23 to i64
  %25 = zext i32 %14 to i64
  %26 = shl i64 %25, 48
  %27 = ashr exact i64 %26, 48
  %28 = getelementptr inbounds i32, i32* %1, i64 2
  %29 = zext i32 %5 to i64
  br label %30

30:                                               ; preds = %30, %13
  %31 = phi i64 [ 0, %13 ], [ %86, %30 ]
  %32 = getelementptr inbounds i16, i16* %0, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = load i32, i32* %3, align 4
  %35 = load i32, i32* %1, align 4
  %36 = sext i32 %35 to i64
  %37 = sext i16 %33 to i64
  %38 = mul nsw i64 %36, %37
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i32
  %41 = add i32 %34, %40
  %42 = shl i32 %41, 2
  %43 = load i32, i32* %16, align 4
  %44 = sext i32 %42 to i64
  %45 = mul nsw i64 %44, %18
  %46 = lshr i64 %45, 16
  %47 = trunc i64 %46 to i32
  %48 = ashr i32 %47, 13
  %49 = add nsw i32 %48, 1
  %50 = ashr i32 %49, 1
  %51 = mul nsw i64 %21, %44
  %52 = lshr i64 %51, 16
  %53 = trunc i64 %52 to i32
  %54 = add i32 %43, %53
  %55 = add i32 %54, %50
  store i32 %55, i32* %3, align 4
  %56 = load i32, i32* %22, align 4
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %57, %37
  %59 = lshr i64 %58, 16
  %60 = trunc i64 %59 to i32
  %61 = add i32 %55, %60
  store i32 %61, i32* %3, align 4
  %62 = mul nsw i64 %44, %24
  %63 = lshr i64 %62, 16
  %64 = trunc i64 %63 to i32
  %65 = ashr i32 %64, 13
  %66 = add nsw i32 %65, 1
  %67 = ashr i32 %66, 1
  %68 = mul nsw i64 %27, %44
  %69 = lshr i64 %68, 16
  %70 = trunc i64 %69 to i32
  %71 = add i32 %67, %70
  store i32 %71, i32* %16, align 4
  %72 = load i32, i32* %28, align 4
  %73 = sext i32 %72 to i64
  %74 = mul nsw i64 %73, %37
  %75 = lshr i64 %74, 16
  %76 = trunc i64 %75 to i32
  %77 = add i32 %71, %76
  store i32 %77, i32* %16, align 4
  %78 = add nsw i32 %42, 16383
  %79 = lshr i32 %78, 14
  %80 = icmp sgt i32 %78, 536870911
  %81 = icmp slt i32 %78, -536870912
  %82 = select i1 %81, i32 32768, i32 %79
  %83 = select i1 %80, i32 32767, i32 %82
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %4, i64 %31
  store i16 %84, i16* %85, align 2
  %86 = add nuw nsw i64 %31, 1
  %87 = icmp eq i64 %86, %29
  br i1 %87, label %88, label %30

88:                                               ; preds = %30, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_biquad_alt_stride2_c(i16* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture, i16* nocapture, i32) local_unnamed_addr #0 {
  %7 = load i32, i32* %2, align 4
  %8 = sub nsw i32 0, %7
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = sub nsw i32 0, %10
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %13, label %152

13:                                               ; preds = %6
  %14 = lshr i32 %11, 14
  %15 = lshr i32 %8, 14
  %16 = getelementptr inbounds i32, i32* %3, i64 2
  %17 = getelementptr inbounds i32, i32* %3, i64 1
  %18 = and i32 %8, 16383
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %3, i64 3
  %21 = zext i32 %15 to i64
  %22 = shl i64 %21, 48
  %23 = ashr exact i64 %22, 48
  %24 = getelementptr inbounds i32, i32* %1, i64 1
  %25 = and i32 %11, 16383
  %26 = zext i32 %25 to i64
  %27 = zext i32 %14 to i64
  %28 = shl i64 %27, 48
  %29 = ashr exact i64 %28, 48
  %30 = getelementptr inbounds i32, i32* %1, i64 2
  %31 = zext i32 %5 to i64
  br label %32

32:                                               ; preds = %32, %13
  %33 = phi i64 [ 0, %13 ], [ %150, %32 ]
  %34 = load i32, i32* %3, align 4
  %35 = load i32, i32* %1, align 4
  %36 = sext i32 %35 to i64
  %37 = shl nuw nsw i64 %33, 1
  %38 = getelementptr inbounds i16, i16* %0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i64
  %41 = mul nsw i64 %40, %36
  %42 = lshr i64 %41, 16
  %43 = trunc i64 %42 to i32
  %44 = add i32 %34, %43
  %45 = shl i32 %44, 2
  %46 = load i32, i32* %16, align 4
  %47 = or i64 %37, 1
  %48 = getelementptr inbounds i16, i16* %0, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i64
  %51 = mul nsw i64 %50, %36
  %52 = lshr i64 %51, 16
  %53 = trunc i64 %52 to i32
  %54 = add i32 %46, %53
  %55 = shl i32 %54, 2
  %56 = load i32, i32* %17, align 4
  %57 = sext i32 %45 to i64
  %58 = mul nsw i64 %57, %19
  %59 = lshr i64 %58, 16
  %60 = trunc i64 %59 to i32
  %61 = ashr i32 %60, 13
  %62 = add nsw i32 %61, 1
  %63 = ashr i32 %62, 1
  %64 = add nsw i32 %63, %56
  %65 = load i32, i32* %20, align 4
  %66 = sext i32 %55 to i64
  %67 = mul nsw i64 %66, %19
  %68 = lshr i64 %67, 16
  %69 = trunc i64 %68 to i32
  %70 = ashr i32 %69, 13
  %71 = add nsw i32 %70, 1
  %72 = ashr i32 %71, 1
  %73 = add nsw i32 %72, %65
  %74 = mul nsw i64 %23, %57
  %75 = lshr i64 %74, 16
  %76 = trunc i64 %75 to i32
  %77 = add i32 %64, %76
  store i32 %77, i32* %3, align 4
  %78 = mul nsw i64 %23, %66
  %79 = lshr i64 %78, 16
  %80 = trunc i64 %79 to i32
  %81 = add i32 %73, %80
  store i32 %81, i32* %16, align 4
  %82 = load i32, i32* %24, align 4
  %83 = sext i32 %82 to i64
  %84 = load i16, i16* %38, align 2
  %85 = sext i16 %84 to i64
  %86 = mul nsw i64 %85, %83
  %87 = lshr i64 %86, 16
  %88 = trunc i64 %87 to i32
  %89 = add i32 %77, %88
  store i32 %89, i32* %3, align 4
  %90 = load i32, i32* %24, align 4
  %91 = sext i32 %90 to i64
  %92 = load i16, i16* %48, align 2
  %93 = sext i16 %92 to i64
  %94 = mul nsw i64 %93, %91
  %95 = lshr i64 %94, 16
  %96 = trunc i64 %95 to i32
  %97 = add i32 %81, %96
  store i32 %97, i32* %16, align 4
  %98 = mul nsw i64 %57, %26
  %99 = lshr i64 %98, 16
  %100 = trunc i64 %99 to i32
  %101 = ashr i32 %100, 13
  %102 = add nsw i32 %101, 1
  %103 = ashr i32 %102, 1
  %104 = mul nsw i64 %66, %26
  %105 = lshr i64 %104, 16
  %106 = trunc i64 %105 to i32
  %107 = ashr i32 %106, 13
  %108 = add nsw i32 %107, 1
  %109 = ashr i32 %108, 1
  %110 = mul nsw i64 %29, %57
  %111 = lshr i64 %110, 16
  %112 = trunc i64 %111 to i32
  %113 = add i32 %103, %112
  store i32 %113, i32* %17, align 4
  %114 = mul nsw i64 %29, %66
  %115 = lshr i64 %114, 16
  %116 = trunc i64 %115 to i32
  %117 = add i32 %109, %116
  store i32 %117, i32* %20, align 4
  %118 = load i32, i32* %30, align 4
  %119 = sext i32 %118 to i64
  %120 = load i16, i16* %38, align 2
  %121 = sext i16 %120 to i64
  %122 = mul nsw i64 %121, %119
  %123 = lshr i64 %122, 16
  %124 = trunc i64 %123 to i32
  %125 = add i32 %113, %124
  store i32 %125, i32* %17, align 4
  %126 = load i32, i32* %30, align 4
  %127 = sext i32 %126 to i64
  %128 = load i16, i16* %48, align 2
  %129 = sext i16 %128 to i64
  %130 = mul nsw i64 %129, %127
  %131 = lshr i64 %130, 16
  %132 = trunc i64 %131 to i32
  %133 = add i32 %117, %132
  store i32 %133, i32* %20, align 4
  %134 = add nsw i32 %45, 16383
  %135 = lshr i32 %134, 14
  %136 = icmp sgt i32 %134, 536870911
  %137 = icmp slt i32 %134, -536870912
  %138 = select i1 %137, i32 32768, i32 %135
  %139 = select i1 %136, i32 32767, i32 %138
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds i16, i16* %4, i64 %37
  store i16 %140, i16* %141, align 2
  %142 = add nsw i32 %55, 16383
  %143 = lshr i32 %142, 14
  %144 = icmp sgt i32 %142, 536870911
  %145 = icmp slt i32 %142, -536870912
  %146 = select i1 %145, i32 32768, i32 %143
  %147 = select i1 %144, i32 32767, i32 %146
  %148 = trunc i32 %147 to i16
  %149 = getelementptr inbounds i16, i16* %4, i64 %47
  store i16 %148, i16* %149, align 2
  %150 = add nuw nsw i64 %33, 1
  %151 = icmp eq i64 %150, %31
  br i1 %151, label %152, label %32

152:                                              ; preds = %32, %6
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
