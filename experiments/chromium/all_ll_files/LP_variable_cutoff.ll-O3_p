; ModuleID = '../../third_party/opus/src/silk/LP_variable_cutoff.c'
source_filename = "../../third_party/opus/src/silk/LP_variable_cutoff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }

@silk_Transition_LP_B_Q28 = external local_unnamed_addr constant [5 x [3 x i32]], align 16
@silk_Transition_LP_A_Q28 = external local_unnamed_addr constant [5 x [2 x i32]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_LP_variable_cutoff(%struct.silk_LP_state*, i16*, i32) local_unnamed_addr #0 {
  %4 = alloca [3 x i32], align 4
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to [2 x i32]*
  %7 = bitcast [3 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #3
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 0
  store i32 -1431655766, i32* %8, align 4
  %9 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 1
  store i32 -1431655766, i32* %9, align 4
  %10 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 2
  store i32 -1431655766, i32* %10, align 4
  %11 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #3
  %12 = bitcast i64* %5 to i32*
  store i32 -1431655766, i32* %12, align 8
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  store i32 -1431655766, i32* %13, align 4
  %14 = getelementptr inbounds %struct.silk_LP_state, %struct.silk_LP_state* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %161, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.silk_LP_state, %struct.silk_LP_state* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = shl i32 %19, 10
  %21 = sub i32 262144, %20
  %22 = ashr i32 %21, 16
  %23 = and i32 %21, 64512
  %24 = icmp slt i32 %21, 262144
  br i1 %24, label %25, label %152

25:                                               ; preds = %17
  %26 = icmp eq i32 %23, 0
  br i1 %26, label %145, label %27

27:                                               ; preds = %25
  %28 = icmp ult i32 %23, 32768
  br i1 %28, label %87, label %29

29:                                               ; preds = %27
  %30 = add nsw i32 %22, 1
  %31 = sext i32 %30 to i64
  %32 = sext i32 %22 to i64
  %33 = zext i32 %21 to i64
  %34 = shl i64 %33, 48
  %35 = ashr exact i64 %34, 48
  %36 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %31, i64 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %32, i64 0
  %39 = load i32, i32* %38, align 4
  %40 = sub nsw i32 %37, %39
  %41 = sext i32 %40 to i64
  %42 = mul nsw i64 %35, %41
  %43 = lshr i64 %42, 16
  %44 = trunc i64 %43 to i32
  %45 = add i32 %37, %44
  store i32 %45, i32* %8, align 4
  %46 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %31, i64 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %32, i64 1
  %49 = load i32, i32* %48, align 4
  %50 = sub nsw i32 %47, %49
  %51 = sext i32 %50 to i64
  %52 = mul nsw i64 %35, %51
  %53 = lshr i64 %52, 16
  %54 = trunc i64 %53 to i32
  %55 = add i32 %47, %54
  store i32 %55, i32* %9, align 4
  %56 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %31, i64 2
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %32, i64 2
  %59 = load i32, i32* %58, align 4
  %60 = sub nsw i32 %57, %59
  %61 = sext i32 %60 to i64
  %62 = mul nsw i64 %35, %61
  %63 = lshr i64 %62, 16
  %64 = trunc i64 %63 to i32
  %65 = add i32 %57, %64
  store i32 %65, i32* %10, align 4
  %66 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %31, i64 0
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %32, i64 0
  %69 = load i32, i32* %68, align 8
  %70 = sub nsw i32 %67, %69
  %71 = sext i32 %70 to i64
  %72 = mul nsw i64 %35, %71
  %73 = lshr i64 %72, 16
  %74 = trunc i64 %73 to i32
  %75 = add i32 %67, %74
  store i32 %75, i32* %12, align 8
  %76 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %31, i64 1
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %32, i64 1
  %79 = load i32, i32* %78, align 4
  %80 = sub nsw i32 %77, %79
  %81 = sext i32 %80 to i64
  %82 = mul nsw i64 %35, %81
  %83 = lshr i64 %82, 16
  %84 = trunc i64 %83 to i32
  %85 = add i32 %77, %84
  %86 = getelementptr inbounds i32, i32* %12, i64 1
  store i32 %85, i32* %86, align 4
  br label %154

87:                                               ; preds = %27
  %88 = sext i32 %22 to i64
  %89 = add nsw i32 %22, 1
  %90 = sext i32 %89 to i64
  %91 = zext i32 %21 to i64
  %92 = shl i64 %91, 48
  %93 = ashr exact i64 %92, 48
  %94 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %88, i64 0
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %90, i64 0
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 %97, %95
  %99 = sext i32 %98 to i64
  %100 = mul nsw i64 %93, %99
  %101 = lshr i64 %100, 16
  %102 = trunc i64 %101 to i32
  %103 = add i32 %95, %102
  store i32 %103, i32* %8, align 4
  %104 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %88, i64 1
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %90, i64 1
  %107 = load i32, i32* %106, align 4
  %108 = sub nsw i32 %107, %105
  %109 = sext i32 %108 to i64
  %110 = mul nsw i64 %93, %109
  %111 = lshr i64 %110, 16
  %112 = trunc i64 %111 to i32
  %113 = add i32 %105, %112
  store i32 %113, i32* %9, align 4
  %114 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %88, i64 2
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %90, i64 2
  %117 = load i32, i32* %116, align 4
  %118 = sub nsw i32 %117, %115
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %93, %119
  %121 = lshr i64 %120, 16
  %122 = trunc i64 %121 to i32
  %123 = add i32 %115, %122
  store i32 %123, i32* %10, align 4
  %124 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %88, i64 0
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %90, i64 0
  %127 = load i32, i32* %126, align 8
  %128 = sub nsw i32 %127, %125
  %129 = sext i32 %128 to i64
  %130 = mul nsw i64 %93, %129
  %131 = lshr i64 %130, 16
  %132 = trunc i64 %131 to i32
  %133 = add i32 %125, %132
  store i32 %133, i32* %12, align 8
  %134 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %88, i64 1
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %90, i64 1
  %137 = load i32, i32* %136, align 4
  %138 = sub nsw i32 %137, %135
  %139 = sext i32 %138 to i64
  %140 = mul nsw i64 %93, %139
  %141 = lshr i64 %140, 16
  %142 = trunc i64 %141 to i32
  %143 = add i32 %135, %142
  %144 = getelementptr inbounds i32, i32* %12, i64 1
  store i32 %143, i32* %144, align 4
  br label %154

145:                                              ; preds = %25
  %146 = sext i32 %22 to i64
  %147 = getelementptr inbounds [5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 %146, i64 0
  %148 = bitcast i32* %147 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* align 4 %148, i64 12, i1 false) #3
  %149 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 %146, i64 0
  %150 = bitcast i32* %149 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %5, align 8
  br label %154

152:                                              ; preds = %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* align 16 bitcast (i32* getelementptr inbounds ([5 x [3 x i32]], [5 x [3 x i32]]* @silk_Transition_LP_B_Q28, i64 0, i64 4, i64 0) to i8*), i64 12, i1 false) #3
  %153 = load i64, i64* bitcast (i32* getelementptr inbounds ([5 x [2 x i32]], [5 x [2 x i32]]* @silk_Transition_LP_A_Q28, i64 0, i64 4, i64 0) to i64*), align 16
  store i64 %153, i64* %5, align 8
  br label %154

154:                                              ; preds = %29, %87, %145, %152
  %155 = add nsw i32 %19, %15
  %156 = icmp sgt i32 %155, 0
  %157 = select i1 %156, i32 %155, i32 0
  %158 = icmp slt i32 %157, 256
  %159 = select i1 %158, i32 %157, i32 256
  store i32 %159, i32* %18, align 4
  %160 = getelementptr inbounds %struct.silk_LP_state, %struct.silk_LP_state* %0, i64 0, i32 0, i64 0
  call void @silk_biquad_alt_stride1(i16* %1, i32* nonnull %8, i32* nonnull %12, i32* %160, i16* %1, i32 %2) #3
  br label %161

161:                                              ; preds = %3, %154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @silk_biquad_alt_stride1(i16*, i32*, i32*, i32*, i16*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
