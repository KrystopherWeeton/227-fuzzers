; ModuleID = '../../third_party/boringssl/src/ssl/ssl_buffer.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.2", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.91", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.58", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.29", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.15", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.bssl::Array", %"class.bssl::GrowableArray.82", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.84", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.8", i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.56", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", i8, [32 x i8], %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.18", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.28 }
%union.anon.28 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.39, i16, [2 x i8], %"class.std::__1::unique_ptr.40", [2 x %"class.std::__1::unique_ptr.45"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.57", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.63", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.70", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.50", %"class.bssl::internal::StackAllocated.55" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.55" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.57" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.66" }
%"class.bssl::Array.66" = type { %"class.std::__1::unique_ptr.67"*, i64 }
%"class.std::__1::unique_ptr.67" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.5", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.15", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.84", %"class.bssl::GrowableArray.114", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.56", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.34", i16, %"class.std::__1::unique_ptr.18" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.82" = type { i64, %"class.bssl::Array.83" }
%"class.bssl::Array.83" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array.56" = type { i16*, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.40", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.96", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.58", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.101"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }

@.str = private unnamed_addr constant [50 x i8] c"../../third_party/boringssl/src/ssl/ssl_buffer.cc\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl9SSLBuffer5ClearEv(%"class.bssl::SSLBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  tail call void @free(i8* %7) #6
  br label %8

8:                                                ; preds = %1, %5
  store i8 0, i8* %2, align 1
  %9 = bitcast %"class.bssl::SSLBuffer"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 14, i1 false)
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl9SSLBuffer9EnsureCapEmm(%"class.bssl::SSLBuffer"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = icmp ugt i64 %2, 65535
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 52) #6
  br label %50

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 3
  %8 = load i16, i16* %7, align 4
  %9 = zext i16 %8 to i64
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %50

11:                                               ; preds = %6
  %12 = icmp ult i64 %2, 6
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 4, i64 0
  br label %25

15:                                               ; preds = %11
  %16 = add nuw nsw i64 %2, 7
  %17 = tail call noalias i8* @malloc(i64 %16) #6
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %15
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 77) #6
  br label %50

20:                                               ; preds = %15
  %21 = ptrtoint i8* %17 to i64
  %22 = add i64 %21, %1
  %23 = sub i64 0, %22
  %24 = and i64 %23, 7
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi i8* [ %14, %13 ], [ %17, %20 ]
  %27 = phi i8 [ 0, %13 ], [ 1, %20 ]
  %28 = phi i64 [ 0, %13 ], [ %24, %20 ]
  %29 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 0
  %30 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 2
  %32 = load i16, i16* %31, align 2
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %25
  %35 = zext i16 %32 to i64
  %36 = load i8*, i8** %29, align 8
  %37 = load i16, i16* %30, align 8
  %38 = zext i16 %37 to i64
  %39 = getelementptr inbounds i8, i8* %36, i64 %38
  %40 = getelementptr inbounds i8, i8* %26, i64 %28
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %39, i64 %35, i1 false) #6
  br label %41

41:                                               ; preds = %25, %34
  %42 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 5
  %43 = load i8, i8* %42, align 1, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  %46 = load i8*, i8** %29, align 8
  tail call void @free(i8* %46) #6
  br label %47

47:                                               ; preds = %41, %45
  store i8* %26, i8** %29, align 8
  store i8 %27, i8* %42, align 1
  %48 = trunc i64 %28 to i16
  store i16 %48, i16* %30, align 8
  %49 = trunc i64 %2 to i16
  store i16 %49, i16* %7, align 4
  br label %50

50:                                               ; preds = %19, %47, %6, %5
  %51 = phi i1 [ false, %5 ], [ true, %6 ], [ true, %47 ], [ false, %19 ]
  ret i1 %51
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl9SSLBuffer8DidWriteEm(%"class.bssl::SSLBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 3
  %4 = load i16, i16* %3, align 4
  %5 = zext i16 %4 to i64
  %6 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 2
  %7 = load i16, i16* %6, align 2
  %8 = zext i16 %7 to i64
  %9 = sub nsw i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  tail call void @abort() #7
  unreachable

12:                                               ; preds = %2
  %13 = trunc i64 %1 to i16
  %14 = add i16 %7, %13
  store i16 %14, i16* %6, align 2
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl9SSLBuffer7ConsumeEm(%"class.bssl::SSLBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 2
  %4 = load i16, i16* %3, align 2
  %5 = zext i16 %4 to i64
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @abort() #7
  unreachable

8:                                                ; preds = %2
  %9 = trunc i64 %1 to i16
  %10 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = add i16 %11, %9
  store i16 %12, i16* %10, align 8
  %13 = sub i16 %4, %9
  store i16 %13, i16* %3, align 2
  %14 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 3
  %15 = load i16, i16* %14, align 4
  %16 = sub i16 %15, %9
  store i16 %16, i16* %14, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl9SSLBuffer15DiscardConsumedEv(%"class.bssl::SSLBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 2
  %3 = load i16, i16* %2, align 2
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call void @free(i8* %11) #6
  br label %12

12:                                               ; preds = %5, %9
  store i8 0, i8* %6, align 1
  %13 = bitcast %"class.bssl::SSLBuffer"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 14, i1 false) #6
  br label %14

14:                                               ; preds = %12, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl25ssl_read_buffer_extend_toEP6ssl_stm(%struct.ssl_st*, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %4 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  %5 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %4, i64 0, i32 4
  %6 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %4, i64 0, i32 4, i32 2
  %7 = load i16, i16* %6, align 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %4, i64 0, i32 4, i32 5
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %5, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void @free(i8* %15) #6
  br label %16

16:                                               ; preds = %13, %9
  store i8 0, i8* %10, align 1
  %17 = bitcast %"class.bssl::SSLBuffer"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 14, i1 false) #6
  br label %18

18:                                               ; preds = %2, %16
  %19 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #6
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i64 %1, i64 16717
  %22 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  %23 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %22, i64 0, i32 4
  %24 = tail call i64 @_ZN4bssl21ssl_record_prefix_lenEPK6ssl_st(%struct.ssl_st* %0) #6
  %25 = tail call zeroext i1 @_ZN4bssl9SSLBuffer9EnsureCapEmm(%"class.bssl::SSLBuffer"* %23, i64 %24, i64 %21)
  br i1 %25, label %26, label %127

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %28 = load %struct.bio_st*, %struct.bio_st** %27, align 8
  %29 = icmp eq %struct.bio_st* %28, null
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  tail call void @ERR_put_error(i32 16, i32 0, i32 119, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 187) #6
  br label %127

31:                                               ; preds = %26
  %32 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #6
  %33 = icmp eq i32 %32, 0
  %34 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  br i1 %33, label %68, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 2
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i16 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 130) #6
  br label %111

40:                                               ; preds = %35
  %41 = load %struct.bio_st*, %struct.bio_st** %27, align 8
  %42 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 1
  %45 = load i16, i16* %44, align 8
  %46 = zext i16 %45 to i64
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 3
  %49 = load i16, i16* %48, align 4
  %50 = zext i16 %49 to i32
  %51 = tail call i32 @BIO_read(%struct.bio_st* %41, i8* %47, i32 %50) #6
  %52 = icmp slt i32 %51, 1
  br i1 %52, label %53, label %56

53:                                               ; preds = %40
  %54 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  %55 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %54, i64 0, i32 16
  store i32 2, i32* %55, align 4
  br label %111

56:                                               ; preds = %40
  %57 = sext i32 %51 to i64
  %58 = load i16, i16* %48, align 4
  %59 = zext i16 %58 to i64
  %60 = load i16, i16* %36, align 2
  %61 = zext i16 %60 to i64
  %62 = sub nsw i64 %59, %61
  %63 = icmp ult i64 %62, %57
  br i1 %63, label %64, label %65

64:                                               ; preds = %56
  tail call void @abort() #7
  unreachable

65:                                               ; preds = %56
  %66 = trunc i32 %51 to i16
  %67 = add i16 %60, %66
  store i16 %67, i16* %36, align 2
  br label %127

68:                                               ; preds = %31
  %69 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 3
  %70 = load i16, i16* %69, align 4
  %71 = zext i16 %70 to i64
  %72 = icmp ugt i64 %21, %71
  br i1 %72, label %81, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 2
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i64
  %77 = icmp ugt i64 %21, %76
  br i1 %77, label %78, label %127

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 0
  %80 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 4, i32 1
  br label %82

81:                                               ; preds = %68
  tail call void @ERR_put_error(i32 16, i32 0, i32 121, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 149) #6
  br label %111

82:                                               ; preds = %106, %78
  %83 = phi i64 [ %76, %78 ], [ %109, %106 ]
  %84 = load %struct.bio_st*, %struct.bio_st** %27, align 8
  %85 = load i8*, i8** %79, align 8
  %86 = load i16, i16* %80, align 8
  %87 = zext i16 %86 to i64
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = getelementptr inbounds i8, i8* %88, i64 %83
  %90 = sub i64 %21, %83
  %91 = trunc i64 %90 to i32
  %92 = tail call i32 @BIO_read(%struct.bio_st* %84, i8* %89, i32 %91) #6
  %93 = icmp slt i32 %92, 1
  br i1 %93, label %94, label %97

94:                                               ; preds = %82
  %95 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  %96 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %95, i64 0, i32 16
  store i32 2, i32* %96, align 4
  br label %111

97:                                               ; preds = %82
  %98 = sext i32 %92 to i64
  %99 = load i16, i16* %69, align 4
  %100 = zext i16 %99 to i64
  %101 = load i16, i16* %74, align 2
  %102 = zext i16 %101 to i64
  %103 = sub nsw i64 %100, %102
  %104 = icmp ult i64 %103, %98
  br i1 %104, label %105, label %106

105:                                              ; preds = %97
  tail call void @abort() #7
  unreachable

106:                                              ; preds = %97
  %107 = trunc i32 %92 to i16
  %108 = add i16 %101, %107
  store i16 %108, i16* %74, align 2
  %109 = zext i16 %108 to i64
  %110 = icmp ugt i64 %21, %109
  br i1 %110, label %82, label %127

111:                                              ; preds = %39, %53, %81, %94
  %112 = phi i32 [ %92, %94 ], [ -1, %81 ], [ %51, %53 ], [ -1, %39 ]
  %113 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %3, align 8
  %114 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %113, i64 0, i32 4
  %115 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %113, i64 0, i32 4, i32 2
  %116 = load i16, i16* %115, align 2
  %117 = icmp eq i16 %116, 0
  br i1 %117, label %118, label %127

118:                                              ; preds = %111
  %119 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %113, i64 0, i32 4, i32 5
  %120 = load i8, i8* %119, align 1, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %125, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %114, i64 0, i32 0
  %124 = load i8*, i8** %123, align 8
  tail call void @free(i8* %124) #6
  br label %125

125:                                              ; preds = %122, %118
  store i8 0, i8* %119, align 1
  %126 = bitcast %"class.bssl::SSLBuffer"* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 14, i1 false) #6
  br label %127

127:                                              ; preds = %106, %125, %111, %65, %73, %18, %30
  %128 = phi i32 [ -1, %30 ], [ -1, %18 ], [ 1, %65 ], [ 1, %73 ], [ %112, %111 ], [ %112, %125 ], [ 1, %106 ]
  ret i32 %128
}

declare i32 @SSL_is_dtls(%struct.ssl_st*) local_unnamed_addr #2

declare i64 @_ZN4bssl21ssl_record_prefix_lenEPK6ssl_st(%struct.ssl_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl22ssl_handle_open_recordEP6ssl_stPbNS_17ssl_open_record_tEmh(%struct.ssl_st*, i8* nocapture, i32, i64, i8 zeroext) local_unnamed_addr #0 {
  store i8 0, i8* %1, align 1
  %6 = icmp eq i32 %2, 2
  br i1 %6, label %25, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %9 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %8, align 8
  %10 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %9, i64 0, i32 4, i32 2
  %11 = load i16, i16* %10, align 2
  %12 = zext i16 %11 to i64
  %13 = icmp ult i64 %12, %3
  br i1 %13, label %14, label %15

14:                                               ; preds = %7
  tail call void @abort() #7
  unreachable

15:                                               ; preds = %7
  %16 = trunc i64 %3 to i16
  %17 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %9, i64 0, i32 4, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = add i16 %18, %16
  store i16 %19, i16* %17, align 8
  %20 = sub i16 %11, %16
  store i16 %20, i16* %10, align 2
  %21 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %9, i64 0, i32 4, i32 3
  %22 = load i16, i16* %21, align 4
  %23 = sub i16 %22, %16
  store i16 %23, i16* %21, align 4
  %24 = icmp eq i32 %2, 0
  br i1 %24, label %53, label %25

25:                                               ; preds = %15, %5
  %26 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %27 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %26, align 8
  %28 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %27, i64 0, i32 4
  %29 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %27, i64 0, i32 4, i32 2
  %30 = load i16, i16* %29, align 2
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %32, label %41

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %27, i64 0, i32 4, i32 5
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %28, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  tail call void @free(i8* %38) #6
  br label %39

39:                                               ; preds = %36, %32
  store i8 0, i8* %33, align 1
  %40 = bitcast %"class.bssl::SSLBuffer"* %28 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 14, i1 false) #6
  br label %41

41:                                               ; preds = %25, %39
  switch i32 %2, label %52 [
    i32 0, label %53
    i32 2, label %42
    i32 1, label %46
    i32 3, label %47
    i32 4, label %48
  ]

42:                                               ; preds = %41
  %43 = tail call i32 @_ZN4bssl25ssl_read_buffer_extend_toEP6ssl_stm(%struct.ssl_st* %0, i64 %3)
  %44 = icmp slt i32 %43, 1
  br i1 %44, label %53, label %45

45:                                               ; preds = %42
  store i8 1, i8* %1, align 1
  br label %53

46:                                               ; preds = %41
  store i8 1, i8* %1, align 1
  br label %53

47:                                               ; preds = %41
  br label %53

48:                                               ; preds = %41
  %49 = icmp eq i8 %4, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = zext i8 %4 to i32
  tail call void @_ZN4bssl14ssl_send_alertEP6ssl_stii(%struct.ssl_st* %0, i32 2, i32 %51) #6
  br label %53

52:                                               ; preds = %41
  br label %53

53:                                               ; preds = %15, %50, %48, %45, %42, %41, %52, %47, %46
  %54 = phi i32 [ -1, %52 ], [ 0, %47 ], [ 1, %46 ], [ 1, %15 ], [ 1, %41 ], [ 1, %45 ], [ %43, %42 ], [ -1, %48 ], [ -1, %50 ]
  ret i32 %54
}

declare void @_ZN4bssl14ssl_send_alertEP6ssl_stii(%struct.ssl_st*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl22ssl_write_buffer_flushEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %3 = load %struct.bio_st*, %struct.bio_st** %2, align 8
  %4 = icmp eq %struct.bio_st* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 119, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 295) #6
  br label %87

6:                                                ; preds = %1
  %7 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #6
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %10 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5
  %12 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 2
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, 0
  br i1 %8, label %45, label %15

15:                                               ; preds = %6
  br i1 %14, label %87, label %16

16:                                               ; preds = %15
  %17 = load %struct.bio_st*, %struct.bio_st** %2, align 8
  %18 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %11, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i64
  %23 = getelementptr inbounds i8, i8* %19, i64 %22
  %24 = zext i16 %13 to i32
  %25 = tail call i32 @BIO_write(%struct.bio_st* %17, i8* %23, i32 %24) #6
  %26 = icmp slt i32 %25, 1
  br i1 %26, label %27, label %37

27:                                               ; preds = %16
  %28 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %9, align 8
  %29 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %28, i64 0, i32 16
  store i32 3, i32* %29, align 4
  %30 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 5
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %27
  %34 = load i8*, i8** %18, align 8
  tail call void @free(i8* %34) #6
  br label %35

35:                                               ; preds = %33, %27
  store i8 0, i8* %30, align 1
  %36 = bitcast %"class.bssl::SSLBuffer"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 14, i1 false) #6
  br label %87

37:                                               ; preds = %16
  %38 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 5
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = load i8*, i8** %18, align 8
  tail call void @free(i8* %42) #6
  br label %43

43:                                               ; preds = %41, %37
  store i8 0, i8* %38, align 1
  %44 = bitcast %"class.bssl::SSLBuffer"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 14, i1 false) #6
  br label %87

45:                                               ; preds = %6
  br i1 %14, label %78, label %46

46:                                               ; preds = %45
  %47 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %11, i64 0, i32 0
  %48 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 1
  %49 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 3
  %50 = load i16, i16* %48, align 8
  br label %51

51:                                               ; preds = %70, %46
  %52 = phi i16 [ %50, %46 ], [ %73, %70 ]
  %53 = phi i16 [ %13, %46 ], [ %74, %70 ]
  %54 = load %struct.bio_st*, %struct.bio_st** %2, align 8
  %55 = load i8*, i8** %47, align 8
  %56 = zext i16 %52 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = zext i16 %53 to i32
  %59 = tail call i32 @BIO_write(%struct.bio_st* %54, i8* %57, i32 %58) #6
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %61, label %64

61:                                               ; preds = %51
  %62 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %9, align 8
  %63 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %62, i64 0, i32 16
  store i32 3, i32* %63, align 4
  br label %87

64:                                               ; preds = %51
  %65 = sext i32 %59 to i64
  %66 = load i16, i16* %12, align 2
  %67 = zext i16 %66 to i64
  %68 = icmp ult i64 %67, %65
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  tail call void @abort() #7
  unreachable

70:                                               ; preds = %64
  %71 = trunc i32 %59 to i16
  %72 = load i16, i16* %48, align 8
  %73 = add i16 %72, %71
  store i16 %73, i16* %48, align 8
  %74 = sub i16 %66, %71
  store i16 %74, i16* %12, align 2
  %75 = load i16, i16* %49, align 4
  %76 = sub i16 %75, %71
  store i16 %76, i16* %49, align 4
  %77 = icmp eq i16 %74, 0
  br i1 %77, label %78, label %51

78:                                               ; preds = %70, %45
  %79 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %10, i64 0, i32 5, i32 5
  %80 = load i8, i8* %79, align 1, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %85, label %82

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer"* %11, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  tail call void @free(i8* %84) #6
  br label %85

85:                                               ; preds = %82, %78
  store i8 0, i8* %79, align 1
  %86 = bitcast %"class.bssl::SSLBuffer"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 14, i1 false) #6
  br label %87

87:                                               ; preds = %85, %61, %43, %35, %15, %5
  %88 = phi i32 [ -1, %5 ], [ 1, %15 ], [ %25, %35 ], [ 1, %43 ], [ 1, %85 ], [ %59, %61 ]
  ret i32 %88
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

declare i32 @BIO_read(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
