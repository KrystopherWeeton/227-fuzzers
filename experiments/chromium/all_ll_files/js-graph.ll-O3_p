; ModuleID = '../../v8/src/compiler/js-graph.cc'
source_filename = "../../v8/src/compiler/js-graph.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::piecewise_construct_t" = type { i8 }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.v8::internal::compiler::JSGraph" = type { %"class.v8::internal::compiler::MachineGraph", %"class.v8::internal::Isolate"*, %"class.v8::internal::compiler::JSOperatorBuilder"*, %"class.v8::internal::compiler::SimplifiedOperatorBuilder"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::MachineGraph" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::CommonNodeCache", %"class.v8::internal::compiler::Node"* }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector" }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.18" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::CommonOperatorBuilder" = type { %"struct.v8::internal::compiler::CommonOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::CommonOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::MachineOperatorBuilder" = type <{ %"class.v8::internal::Zone"*, %"struct.v8::internal::compiler::MachineOperatorGlobalCache"*, i8, [3 x i8], %"class.v8::base::Flags.21", %"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements", [4 x i8] }>
%"struct.v8::internal::compiler::MachineOperatorGlobalCache" = type opaque
%"class.v8::base::Flags.21" = type { i32 }
%"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements" = type { i32, %"class.v8::base::EnumSet", %"class.v8::base::EnumSet" }
%"class.v8::base::EnumSet" = type { i32 }
%"class.v8::internal::compiler::CommonNodeCache" = type { %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache.38", %"class.v8::internal::compiler::NodeCache.65", %"class.v8::internal::compiler::NodeCache.92" }
%"class.v8::internal::compiler::NodeCache" = type { %"class.v8::internal::ZoneUnorderedMap" }
%"class.v8::internal::ZoneUnorderedMap" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.22", %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.33", %"class.std::__1::__compressed_pair.35", [4 x i8] }>
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24", %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.v8::internal::ZoneAllocator.28" }
%"class.v8::internal::ZoneAllocator.28" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30", %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.v8::internal::ZoneAllocator.32" }
%"class.v8::internal::ZoneAllocator.32" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { float }
%"class.v8::internal::compiler::NodeCache.38" = type { %"class.v8::internal::ZoneUnorderedMap.39" }
%"class.v8::internal::ZoneUnorderedMap.39" = type { %"class.std::__1::unordered_map.40" }
%"class.std::__1::unordered_map.40" = type { %"class.std::__1::__hash_table.41" }
%"class.std::__1::__hash_table.41" = type <{ %"class.std::__1::unique_ptr.42", %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.59", [4 x i8] }>
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44", %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.std::__1::__hash_node_base.45"** }
%"struct.std::__1::__hash_node_base.45" = type { %"struct.std::__1::__hash_node_base.45"* }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.std::__1::__bucket_list_deallocator.47" }
%"class.std::__1::__bucket_list_deallocator.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.v8::internal::ZoneAllocator.50" }
%"class.v8::internal::ZoneAllocator.50" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52", %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::__hash_node_base.45" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.v8::internal::ZoneAllocator.54" }
%"class.v8::internal::ZoneAllocator.54" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::compiler::NodeCache.65" = type { %"class.v8::internal::ZoneUnorderedMap.66" }
%"class.v8::internal::ZoneUnorderedMap.66" = type { %"class.std::__1::unordered_map.67" }
%"class.std::__1::unordered_map.67" = type { %"class.std::__1::__hash_table.68" }
%"class.std::__1::__hash_table.68" = type <{ %"class.std::__1::unique_ptr.69", %"class.std::__1::__compressed_pair.78", %"class.std::__1::__compressed_pair.82", %"class.std::__1::__compressed_pair.86", [4 x i8] }>
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71", %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.std::__1::__hash_node_base.72"** }
%"struct.std::__1::__hash_node_base.72" = type { %"struct.std::__1::__hash_node_base.72"* }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.std::__1::__bucket_list_deallocator.74" }
%"class.std::__1::__bucket_list_deallocator.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.v8::internal::ZoneAllocator.77" }
%"class.v8::internal::ZoneAllocator.77" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79", %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.std::__1::__hash_node_base.72" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.v8::internal::ZoneAllocator.81" }
%"class.v8::internal::ZoneAllocator.81" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::compiler::NodeCache.92" = type { %"class.v8::internal::ZoneUnorderedMap.93" }
%"class.v8::internal::ZoneUnorderedMap.93" = type { %"class.std::__1::unordered_map.94" }
%"class.std::__1::unordered_map.94" = type { %"class.std::__1::__hash_table.95" }
%"class.std::__1::__hash_table.95" = type <{ %"class.std::__1::unique_ptr.96", %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.109", %"class.std::__1::__compressed_pair.113", [4 x i8] }>
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.std::__1::__hash_node_base.99"** }
%"struct.std::__1::__hash_node_base.99" = type { %"struct.std::__1::__hash_node_base.99"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator.101" }
%"class.std::__1::__bucket_list_deallocator.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.v8::internal::ZoneAllocator.104" }
%"class.v8::internal::ZoneAllocator.104" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106", %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::__hash_node_base.99" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.v8::internal::ZoneAllocator.108" }
%"class.v8::internal::ZoneAllocator.108" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.124", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.760", %"class.std::__1::unique_ptr.781", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.791", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.924", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.937", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.947", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.958", %"struct.std::__1::atomic.287", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.1033", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.1076"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1084", i32, i8, i8, i32, i32, %"class.std::__1::vector.1090", %"class.std::__1::vector.1090", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1097", i64, %"class.std::__1::unordered_map.1098", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.658", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.295", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1154", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1192", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1226", %"class.std::__1::vector.1230", %"class.std::__1::vector.1230", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic.119", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__cxx_atomic_impl.121" }
%"struct.std::__1::__cxx_atomic_impl.121" = type { %"struct.std::__1::__cxx_atomic_base_impl.122" }
%"struct.std::__1::__cxx_atomic_base_impl.122" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map.130", %"struct.std::__1::atomic", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic", i64, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic.161", %"class.std::__1::vector.165", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.281", %"class.std::__1::unique_ptr.281", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.296", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic", i64, i8, %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.300", %"class.std::__1::vector.300", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.307", %"class.std::__1::unique_ptr.313", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.443", %"class.std::__1::unique_ptr.449", %"class.std::__1::unique_ptr.455", %"class.std::__1::unique_ptr.494", %"class.std::__1::unique_ptr.533", %"class.std::__1::unique_ptr.563", %"class.std::__1::unique_ptr.569", %"class.std::__1::unique_ptr.579", %"class.std::__1::unique_ptr.585", %"class.std::__1::unique_ptr.585", %"class.std::__1::unique_ptr.591", %"class.std::__1::unique_ptr.597", %"class.std::__1::unique_ptr.597", %"class.std::__1::unique_ptr.603", %"class.std::__1::unique_ptr.609", %"class.std::__1::shared_ptr.615", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.620", %"class.std::__1::unique_ptr.646", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.652", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.665", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.465", i8, [7 x i8], %"class.std::__1::unordered_map.671", %"class.std::__1::unordered_map.697", %"class.std::__1::unordered_map.671", %"class.std::__1::unordered_map.721", %"class.std::__1::vector.747", i8, %"class.std::__1::unique_ptr.754", i32, i32 }
%"class.std::__1::unordered_map.130" = type { %"class.std::__1::__hash_table.131" }
%"class.std::__1::__hash_table.131" = type <{ %"class.std::__1::unique_ptr.132", %"class.std::__1::__compressed_pair.142", %"class.std::__1::__compressed_pair.147", %"class.std::__1::__compressed_pair.150", [4 x i8] }>
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134", %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"struct.std::__1::__hash_node_base.135"** }
%"struct.std::__1::__hash_node_base.135" = type { %"struct.std::__1::__hash_node_base.135"* }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.std::__1::__bucket_list_deallocator.137" }
%"class.std::__1::__bucket_list_deallocator.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.std::__1::__hash_node_base.135" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.156", %"struct.std::__1::atomic.156", %"struct.std::__1::atomic.156" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__atomic_base.158" }
%"struct.std::__1::__atomic_base.158" = type { %"struct.std::__1::__cxx_atomic_impl.159" }
%"struct.std::__1::__cxx_atomic_impl.159" = type { %"struct.std::__1::__cxx_atomic_base_impl.160" }
%"struct.std::__1::__cxx_atomic_base_impl.160" = type { i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.167" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.238" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic"*, %"class.std::__1::unique_ptr.232" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.172", %"class.std::__1::vector.172", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.174" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.179" }
%"class.std::__1::__hash_table.179" = type <{ %"class.std::__1::unique_ptr.180", %"class.std::__1::__compressed_pair.190", %"class.std::__1::__compressed_pair.195", %"class.std::__1::__compressed_pair.197", [4 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182", %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.std::__1::__hash_node_base.183"** }
%"struct.std::__1::__hash_node_base.183" = type { %"struct.std::__1::__hash_node_base.183"* }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.std::__1::__bucket_list_deallocator.185" }
%"class.std::__1::__bucket_list_deallocator.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.std::__1::__hash_node_base.183" }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic", %"struct.std::__1::atomic.156", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set.213"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.221", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.156", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.156", %"struct.std::__1::atomic.202", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.202" = type { %"struct.std::__1::__atomic_base.203" }
%"struct.std::__1::__atomic_base.203" = type { %"struct.std::__1::__cxx_atomic_impl.204" }
%"struct.std::__1::__cxx_atomic_impl.204" = type { %"struct.std::__1::__cxx_atomic_base_impl.205" }
%"struct.std::__1::__cxx_atomic_base_impl.205" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.206" }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.208" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set.213" = type { %"class.std::__1::__tree.214" }
%"class.std::__1::__tree.214" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.215", %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.221" = type { %"struct.std::__1::__atomic_base.222" }
%"struct.std::__1::__atomic_base.222" = type { %"struct.std::__1::__cxx_atomic_impl.223" }
%"struct.std::__1::__cxx_atomic_impl.223" = type { %"struct.std::__1::__cxx_atomic_base_impl.224" }
%"struct.std::__1::__cxx_atomic_base_impl.224" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.225", i8, [7 x i8] }>
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { i64*, i64*, %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.238" = type { %"class.std::__1::__vector_base.239" }
%"class.std::__1::__vector_base.239" = type { %"struct.std::__1::pair.240"*, %"struct.std::__1::pair.240"*, %"class.std::__1::__compressed_pair.241" }
%"struct.std::__1::pair.240" = type { i32, i64 }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::pair.240"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic", i64, %"struct.std::__1::atomic" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic", i32, %"struct.std::__1::atomic", %"class.v8::base::Mutex", %"struct.std::__1::atomic" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.246" }
%"class.std::__1::unordered_map.246" = type { %"class.std::__1::__hash_table.247" }
%"class.std::__1::__hash_table.247" = type <{ %"class.std::__1::unique_ptr.248", %"class.std::__1::__compressed_pair.258", %"class.std::__1::__compressed_pair.263", %"class.std::__1::__compressed_pair.268", [4 x i8] }>
%"class.std::__1::unique_ptr.248" = type { %"class.std::__1::__compressed_pair.249" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.250", %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.250" = type { %"struct.std::__1::__hash_node_base.251"** }
%"struct.std::__1::__hash_node_base.251" = type { %"struct.std::__1::__hash_node_base.251"* }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.std::__1::__bucket_list_deallocator.253" }
%"class.std::__1::__bucket_list_deallocator.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"struct.std::__1::__hash_node_base.251" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.274", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.274" = type { %"class.std::__1::__vector_base.275" }
%"class.std::__1::__vector_base.275" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.276" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.277" }
%"struct.std::__1::__compressed_pair_elem.277" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.281" = type { %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1159", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1163", %"class.std::__1::unique_ptr.1169", %"class.std::__1::unique_ptr.609", %"class.std::__1::vector.1175", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1159" = type { %"struct.std::__1::__atomic_base.1160" }
%"struct.std::__1::__atomic_base.1160" = type { %"struct.std::__1::__cxx_atomic_impl.1161" }
%"struct.std::__1::__cxx_atomic_impl.1161" = type { %"struct.std::__1::__cxx_atomic_base_impl.1162" }
%"struct.std::__1::__cxx_atomic_base_impl.1162" = type { i32 }
%"class.std::__1::unique_ptr.1163" = type { %"class.std::__1::__compressed_pair.1164" }
%"class.std::__1::__compressed_pair.1164" = type { %"struct.std::__1::__compressed_pair_elem.1165" }
%"struct.std::__1::__compressed_pair_elem.1165" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.917" }
%"class.std::__1::vector.917" = type { %"class.std::__1::__vector_base.918" }
%"class.std::__1::__vector_base.918" = type { i64**, i64**, %"class.std::__1::__compressed_pair.919" }
%"class.std::__1::__compressed_pair.919" = type { %"struct.std::__1::__compressed_pair_elem.920" }
%"struct.std::__1::__compressed_pair_elem.920" = type { i64** }
%"class.std::__1::unique_ptr.1169" = type { %"class.std::__1::__compressed_pair.1170" }
%"class.std::__1::__compressed_pair.1170" = type { %"struct.std::__1::__compressed_pair_elem.1171" }
%"struct.std::__1::__compressed_pair_elem.1171" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.917", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1175" = type { %"class.std::__1::__vector_base.1176" }
%"class.std::__1::__vector_base.1176" = type { %"struct.std::__1::pair.1177"*, %"struct.std::__1::pair.1177"*, %"class.std::__1::__compressed_pair.1178" }
%"struct.std::__1::pair.1177" = type opaque
%"class.std::__1::__compressed_pair.1178" = type { %"struct.std::__1::__compressed_pair_elem.1179" }
%"struct.std::__1::__compressed_pair_elem.1179" = type { %"struct.std::__1::pair.1177"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.287", %"struct.std::__1::atomic.291", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.291" = type { %"struct.std::__1::__atomic_base.292" }
%"struct.std::__1::__atomic_base.292" = type { %"struct.std::__1::__cxx_atomic_impl.293" }
%"struct.std::__1::__cxx_atomic_impl.293" = type { %"struct.std::__1::__cxx_atomic_base_impl.294" }
%"struct.std::__1::__cxx_atomic_base_impl.294" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.295" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.296" = type { %"struct.std::__1::__atomic_base.297" }
%"struct.std::__1::__atomic_base.297" = type { %"struct.std::__1::__cxx_atomic_impl.298" }
%"struct.std::__1::__cxx_atomic_impl.298" = type { %"struct.std::__1::__cxx_atomic_base_impl.299" }
%"struct.std::__1::__cxx_atomic_base_impl.299" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.std::__1::vector.300" = type { %"class.std::__1::__vector_base.301" }
%"class.std::__1::__vector_base.301" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.302" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.307" = type { %"class.std::__1::__compressed_pair.308" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.313" = type { %"class.std::__1::__compressed_pair.314" }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.315" }
%"struct.std::__1::__compressed_pair_elem.315" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.355", %"class.std::__1::unique_ptr.361", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.415", %"class.std::__1::vector.415", %"class.std::__1::vector.415", %"class.std::__1::vector.422", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.316", %"class.std::__1::vector.317", %"class.std::__1::vector.324", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.316" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.317" = type { %"class.std::__1::__vector_base.318" }
%"class.std::__1::__vector_base.318" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.319" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.324" = type { %"class.std::__1::__vector_base.325" }
%"class.std::__1::__vector_base.325" = type { %"class.std::__1::unique_ptr.326"*, %"class.std::__1::unique_ptr.326"*, %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::unique_ptr.326" = type opaque
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.std::__1::unique_ptr.326"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.332", %"class.v8::internal::Worklist.334", %"class.v8::internal::Worklist.334", %"class.v8::internal::Worklist.334", %"class.v8::internal::Worklist.336", %"class.v8::internal::Worklist.338", %"class.v8::internal::Worklist.340", %"class.v8::internal::Worklist.342", %"class.v8::internal::Worklist.344", %"class.v8::internal::Worklist.346" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.332" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.334" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.336" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.338" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.340" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.342" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.344" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic" }
%"class.v8::internal::Worklist.346" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.348", i8, i64 }
%"class.std::__1::vector.348" = type { %"class.std::__1::__vector_base.349" }
%"class.std::__1::__vector_base.349" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.355" = type { %"class.std::__1::__compressed_pair.356" }
%"class.std::__1::__compressed_pair.356" = type { %"struct.std::__1::__compressed_pair_elem.357" }
%"struct.std::__1::__compressed_pair_elem.357" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.364" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.316"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.364" = type { %"class.std::__1::__hash_table.365" }
%"class.std::__1::__hash_table.365" = type <{ %"class.std::__1::unique_ptr.366", %"class.std::__1::__compressed_pair.376", %"class.std::__1::__compressed_pair.381", %"class.std::__1::__compressed_pair.384", [4 x i8] }>
%"class.std::__1::unique_ptr.366" = type { %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368", %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"struct.std::__1::__hash_node_base.369"** }
%"struct.std::__1::__hash_node_base.369" = type { %"struct.std::__1::__hash_node_base.369"* }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.std::__1::__bucket_list_deallocator.371" }
%"class.std::__1::__bucket_list_deallocator.371" = type { %"class.std::__1::__compressed_pair.372" }
%"class.std::__1::__compressed_pair.372" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base.369" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.384" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.391" }
%"class.std::__1::unordered_map.391" = type { %"class.std::__1::__hash_table.392" }
%"class.std::__1::__hash_table.392" = type <{ %"class.std::__1::unique_ptr.393", %"class.std::__1::__compressed_pair.403", %"class.std::__1::__compressed_pair.408", %"class.std::__1::__compressed_pair.411", [4 x i8] }>
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395", %"struct.std::__1::__compressed_pair_elem.397" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"struct.std::__1::__hash_node_base.396"** }
%"struct.std::__1::__hash_node_base.396" = type { %"struct.std::__1::__hash_node_base.396"* }
%"struct.std::__1::__compressed_pair_elem.397" = type { %"class.std::__1::__bucket_list_deallocator.398" }
%"class.std::__1::__bucket_list_deallocator.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.403" = type { %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"struct.std::__1::__hash_node_base.396" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::vector.415" = type { %"class.std::__1::__vector_base.416" }
%"class.std::__1::__vector_base.416" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.422" = type { %"class.std::__1::__vector_base.423" }
%"class.std::__1::__vector_base.423" = type { %"struct.std::__1::pair.424"*, %"struct.std::__1::pair.424"*, %"class.std::__1::__compressed_pair.425" }
%"struct.std::__1::pair.424" = type opaque
%"class.std::__1::__compressed_pair.425" = type { %"struct.std::__1::__compressed_pair_elem.426" }
%"struct.std::__1::__compressed_pair_elem.426" = type { %"struct.std::__1::pair.424"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.430", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.415"], [3 x %"class.std::__1::vector.415"], i8, %"struct.std::__1::atomic.287", [6 x i8], %"class.std::__1::vector.415", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.440"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.415", %"class.std::__1::vector.415", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.440" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.449" = type { %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.451" }
%"struct.std::__1::__compressed_pair_elem.451" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.455" = type { %"class.std::__1::__compressed_pair.456" }
%"class.std::__1::__compressed_pair.456" = type { %"struct.std::__1::__compressed_pair_elem.457" }
%"struct.std::__1::__compressed_pair_elem.457" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.465", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.458"], %"class.std::__1::unique_ptr.430" }
%"class.std::__1::vector.458" = type { %"class.std::__1::__vector_base.459" }
%"class.std::__1::__vector_base.459" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.494" = type { %"class.std::__1::__compressed_pair.495" }
%"class.std::__1::__compressed_pair.495" = type { %"struct.std::__1::__compressed_pair_elem.496" }
%"struct.std::__1::__compressed_pair_elem.496" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.497", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.501", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.506" }
%"struct.std::__1::atomic.497" = type { %"struct.std::__1::__atomic_base.498" }
%"struct.std::__1::__atomic_base.498" = type { %"struct.std::__1::__cxx_atomic_impl.499" }
%"struct.std::__1::__cxx_atomic_impl.499" = type { %"struct.std::__1::__cxx_atomic_base_impl.500" }
%"struct.std::__1::__cxx_atomic_base_impl.500" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.501" = type { %"struct.std::__1::__atomic_base.502" }
%"struct.std::__1::__atomic_base.502" = type { %"struct.std::__1::__cxx_atomic_impl.503" }
%"struct.std::__1::__cxx_atomic_impl.503" = type { %"struct.std::__1::__cxx_atomic_base_impl.504" }
%"struct.std::__1::__cxx_atomic_base_impl.504" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.506" = type { %"class.std::__1::__hash_table.507" }
%"class.std::__1::__hash_table.507" = type <{ %"class.std::__1::unique_ptr.508", %"class.std::__1::__compressed_pair.518", %"class.std::__1::__compressed_pair.523", %"class.std::__1::__compressed_pair.526", [4 x i8] }>
%"class.std::__1::unique_ptr.508" = type { %"class.std::__1::__compressed_pair.509" }
%"class.std::__1::__compressed_pair.509" = type { %"struct.std::__1::__compressed_pair_elem.510", %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.510" = type { %"struct.std::__1::__hash_node_base.511"** }
%"struct.std::__1::__hash_node_base.511" = type { %"struct.std::__1::__hash_node_base.511"* }
%"struct.std::__1::__compressed_pair_elem.512" = type { %"class.std::__1::__bucket_list_deallocator.513" }
%"class.std::__1::__bucket_list_deallocator.513" = type { %"class.std::__1::__compressed_pair.514" }
%"class.std::__1::__compressed_pair.514" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"struct.std::__1::__hash_node_base.511" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.526" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unique_ptr.533" = type { %"class.std::__1::__compressed_pair.534" }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.535" }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.430", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic", %"struct.std::__1::atomic.287", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.536", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.536" = type { %"class.std::__1::__hash_table.537" }
%"class.std::__1::__hash_table.537" = type <{ %"class.std::__1::unique_ptr.538", %"class.std::__1::__compressed_pair.548", %"class.std::__1::__compressed_pair.553", %"class.std::__1::__compressed_pair.556", [4 x i8] }>
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540", %"struct.std::__1::__compressed_pair_elem.542" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"struct.std::__1::__hash_node_base.541"** }
%"struct.std::__1::__hash_node_base.541" = type { %"struct.std::__1::__hash_node_base.541"* }
%"struct.std::__1::__compressed_pair_elem.542" = type { %"class.std::__1::__bucket_list_deallocator.543" }
%"class.std::__1::__bucket_list_deallocator.543" = type { %"class.std::__1::__compressed_pair.544" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.548" = type { %"struct.std::__1::__compressed_pair_elem.549" }
%"struct.std::__1::__compressed_pair_elem.549" = type { %"struct.std::__1::__hash_node_base.541" }
%"class.std::__1::__compressed_pair.553" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.556" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unique_ptr.563" = type { %"class.std::__1::__compressed_pair.564" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.565" }
%"struct.std::__1::__compressed_pair_elem.565" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.569" = type { %"class.std::__1::__compressed_pair.570" }
%"class.std::__1::__compressed_pair.570" = type { %"struct.std::__1::__compressed_pair_elem.571" }
%"struct.std::__1::__compressed_pair_elem.571" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.572" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.579" = type { %"class.std::__1::__compressed_pair.580" }
%"class.std::__1::__compressed_pair.580" = type { %"struct.std::__1::__compressed_pair_elem.581" }
%"struct.std::__1::__compressed_pair_elem.581" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.585" = type { %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.587" }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.591" = type { %"class.std::__1::__compressed_pair.592" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.597" = type { %"class.std::__1::__compressed_pair.598" }
%"class.std::__1::__compressed_pair.598" = type { %"struct.std::__1::__compressed_pair_elem.599" }
%"struct.std::__1::__compressed_pair_elem.599" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.603" = type { %"class.std::__1::__compressed_pair.604" }
%"class.std::__1::__compressed_pair.604" = type { %"struct.std::__1::__compressed_pair_elem.605" }
%"struct.std::__1::__compressed_pair_elem.605" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.615" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.616", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.2", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.616" = type { %"struct.std::__1::__atomic_base.617" }
%"struct.std::__1::__atomic_base.617" = type { %"struct.std::__1::__cxx_atomic_impl.618" }
%"struct.std::__1::__cxx_atomic_impl.618" = type { %"struct.std::__1::__cxx_atomic_base_impl.619" }
%"struct.std::__1::__cxx_atomic_base_impl.619" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.620" = type { %"class.std::__1::__hash_table.621" }
%"class.std::__1::__hash_table.621" = type <{ %"class.std::__1::unique_ptr.622", %"class.std::__1::__compressed_pair.632", %"class.std::__1::__compressed_pair.637", %"class.std::__1::__compressed_pair.640", [4 x i8] }>
%"class.std::__1::unique_ptr.622" = type { %"class.std::__1::__compressed_pair.623" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.624", %"struct.std::__1::__compressed_pair_elem.626" }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"struct.std::__1::__hash_node_base.625"** }
%"struct.std::__1::__hash_node_base.625" = type { %"struct.std::__1::__hash_node_base.625"* }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"class.std::__1::__bucket_list_deallocator.627" }
%"class.std::__1::__bucket_list_deallocator.627" = type { %"class.std::__1::__compressed_pair.628" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.632" = type { %"struct.std::__1::__compressed_pair_elem.633" }
%"struct.std::__1::__compressed_pair_elem.633" = type { %"struct.std::__1::__hash_node_base.625" }
%"class.std::__1::__compressed_pair.637" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.652" = type { %"class.std::__1::__compressed_pair.653" }
%"class.std::__1::__compressed_pair.653" = type { %"struct.std::__1::__compressed_pair_elem.654" }
%"struct.std::__1::__compressed_pair_elem.654" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.658", %"class.std::__1::vector.658" }
%"class.std::__1::unique_ptr.665" = type { %"class.std::__1::__compressed_pair.666" }
%"class.std::__1::__compressed_pair.666" = type { %"struct.std::__1::__compressed_pair_elem.667" }
%"struct.std::__1::__compressed_pair_elem.667" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.465" = type { %"class.std::__1::__hash_table.466" }
%"class.std::__1::__hash_table.466" = type <{ %"class.std::__1::unique_ptr.467", %"class.std::__1::__compressed_pair.477", %"class.std::__1::__compressed_pair.482", %"class.std::__1::__compressed_pair.486", [4 x i8] }>
%"class.std::__1::unique_ptr.467" = type { %"class.std::__1::__compressed_pair.468" }
%"class.std::__1::__compressed_pair.468" = type { %"struct.std::__1::__compressed_pair_elem.469", %"struct.std::__1::__compressed_pair_elem.471" }
%"struct.std::__1::__compressed_pair_elem.469" = type { %"struct.std::__1::__hash_node_base.470"** }
%"struct.std::__1::__hash_node_base.470" = type { %"struct.std::__1::__hash_node_base.470"* }
%"struct.std::__1::__compressed_pair_elem.471" = type { %"class.std::__1::__bucket_list_deallocator.472" }
%"class.std::__1::__bucket_list_deallocator.472" = type { %"class.std::__1::__compressed_pair.473" }
%"class.std::__1::__compressed_pair.473" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"struct.std::__1::__hash_node_base.470" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unordered_map.697" = type { %"class.std::__1::__hash_table.698" }
%"class.std::__1::__hash_table.698" = type <{ %"class.std::__1::unique_ptr.699", %"class.std::__1::__compressed_pair.709", %"class.std::__1::__compressed_pair.714", %"class.std::__1::__compressed_pair.717", [4 x i8] }>
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701", %"struct.std::__1::__compressed_pair_elem.703" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"struct.std::__1::__hash_node_base.702"** }
%"struct.std::__1::__hash_node_base.702" = type { %"struct.std::__1::__hash_node_base.702"* }
%"struct.std::__1::__compressed_pair_elem.703" = type { %"class.std::__1::__bucket_list_deallocator.704" }
%"class.std::__1::__bucket_list_deallocator.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"struct.std::__1::__hash_node_base.702" }
%"class.std::__1::__compressed_pair.714" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unordered_map.671" = type { %"class.std::__1::__hash_table.672" }
%"class.std::__1::__hash_table.672" = type <{ %"class.std::__1::unique_ptr.673", %"class.std::__1::__compressed_pair.683", %"class.std::__1::__compressed_pair.688", %"class.std::__1::__compressed_pair.691", [4 x i8] }>
%"class.std::__1::unique_ptr.673" = type { %"class.std::__1::__compressed_pair.674" }
%"class.std::__1::__compressed_pair.674" = type { %"struct.std::__1::__compressed_pair_elem.675", %"struct.std::__1::__compressed_pair_elem.677" }
%"struct.std::__1::__compressed_pair_elem.675" = type { %"struct.std::__1::__hash_node_base.676"** }
%"struct.std::__1::__hash_node_base.676" = type { %"struct.std::__1::__hash_node_base.676"* }
%"struct.std::__1::__compressed_pair_elem.677" = type { %"class.std::__1::__bucket_list_deallocator.678" }
%"class.std::__1::__bucket_list_deallocator.678" = type { %"class.std::__1::__compressed_pair.679" }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.683" = type { %"struct.std::__1::__compressed_pair_elem.684" }
%"struct.std::__1::__compressed_pair_elem.684" = type { %"struct.std::__1::__hash_node_base.676" }
%"class.std::__1::__compressed_pair.688" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.691" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::unordered_map.721" = type { %"class.std::__1::__hash_table.722" }
%"class.std::__1::__hash_table.722" = type <{ %"class.std::__1::unique_ptr.723", %"class.std::__1::__compressed_pair.733", %"class.std::__1::__compressed_pair.738", %"class.std::__1::__compressed_pair.743", [4 x i8] }>
%"class.std::__1::unique_ptr.723" = type { %"class.std::__1::__compressed_pair.724" }
%"class.std::__1::__compressed_pair.724" = type { %"struct.std::__1::__compressed_pair_elem.725", %"struct.std::__1::__compressed_pair_elem.727" }
%"struct.std::__1::__compressed_pair_elem.725" = type { %"struct.std::__1::__hash_node_base.726"** }
%"struct.std::__1::__hash_node_base.726" = type { %"struct.std::__1::__hash_node_base.726"* }
%"struct.std::__1::__compressed_pair_elem.727" = type { %"class.std::__1::__bucket_list_deallocator.728" }
%"class.std::__1::__bucket_list_deallocator.728" = type { %"class.std::__1::__compressed_pair.729" }
%"class.std::__1::__compressed_pair.729" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.733" = type { %"struct.std::__1::__compressed_pair_elem.734" }
%"struct.std::__1::__compressed_pair_elem.734" = type { %"struct.std::__1::__hash_node_base.726" }
%"class.std::__1::__compressed_pair.738" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.743" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.std::__1::vector.747" = type { %"class.std::__1::__vector_base.748" }
%"class.std::__1::__vector_base.748" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.749" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.749" = type { %"struct.std::__1::__compressed_pair_elem.750" }
%"struct.std::__1::__compressed_pair_elem.750" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.754" = type { %"class.std::__1::__compressed_pair.755" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.658" }
%"class.std::__1::shared_ptr.760" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.274", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.761", %"class.std::__1::unique_ptr.775" }
%"class.std::__1::unique_ptr.761" = type { %"class.std::__1::__compressed_pair.762" }
%"class.std::__1::__compressed_pair.762" = type { %"struct.std::__1::__compressed_pair_elem.763" }
%"struct.std::__1::__compressed_pair_elem.763" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.764" }
%"class.std::__1::vector.764" = type { %"class.std::__1::__vector_base.765" }
%"class.std::__1::__vector_base.765" = type { %"class.std::__1::unique_ptr.766"*, %"class.std::__1::unique_ptr.766"*, %"class.std::__1::__compressed_pair.767" }
%"class.std::__1::unique_ptr.766" = type { %"class.std::__1::__compressed_pair.1252" }
%"class.std::__1::__compressed_pair.1252" = type { %"struct.std::__1::__compressed_pair_elem.1253" }
%"struct.std::__1::__compressed_pair_elem.1253" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.767" = type { %"struct.std::__1::__compressed_pair_elem.768" }
%"struct.std::__1::__compressed_pair_elem.768" = type { %"class.std::__1::unique_ptr.766"* }
%"class.std::__1::unique_ptr.775" = type { %"class.std::__1::__compressed_pair.776" }
%"class.std::__1::__compressed_pair.776" = type { %"struct.std::__1::__compressed_pair_elem.777" }
%"struct.std::__1::__compressed_pair_elem.777" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.781" = type { %"class.std::__1::__compressed_pair.782" }
%"class.std::__1::__compressed_pair.782" = type { %"struct.std::__1::__compressed_pair_elem.783" }
%"struct.std::__1::__compressed_pair_elem.783" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.784", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.784" = type { %"struct.std::__1::__atomic_base.785" }
%"struct.std::__1::__atomic_base.785" = type { %"struct.std::__1::__cxx_atomic_impl.786" }
%"struct.std::__1::__cxx_atomic_impl.786" = type { %"struct.std::__1::__cxx_atomic_base_impl.787" }
%"struct.std::__1::__cxx_atomic_base_impl.787" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.791" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.792", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.792" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.793", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"class.std::__1::unique_ptr.795"*, %"class.std::__1::unique_ptr.795"*, %"class.std::__1::__compressed_pair.796" }
%"class.std::__1::unique_ptr.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"class.std::__1::unique_ptr.795"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.801", %"class.std::__1::unique_ptr.807", %"struct.std::__1::atomic.287", %"class.std::__1::unique_ptr.813", %"class.std::__1::unique_ptr.819", %"class.std::__1::unique_ptr.825", %"class.std::__1::unique_ptr.831", %"class.std::__1::unique_ptr.837", %"class.std::__1::set.843", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.801" = type { %"class.std::__1::__compressed_pair.802" }
%"class.std::__1::__compressed_pair.802" = type { %"struct.std::__1::__compressed_pair_elem.803" }
%"struct.std::__1::__compressed_pair_elem.803" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.807" = type { %"class.std::__1::__compressed_pair.808" }
%"class.std::__1::__compressed_pair.808" = type { %"struct.std::__1::__compressed_pair_elem.809" }
%"struct.std::__1::__compressed_pair_elem.809" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.813" = type { %"class.std::__1::__compressed_pair.814" }
%"class.std::__1::__compressed_pair.814" = type { %"struct.std::__1::__compressed_pair_elem.815" }
%"struct.std::__1::__compressed_pair_elem.815" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.819" = type { %"class.std::__1::__compressed_pair.820" }
%"class.std::__1::__compressed_pair.820" = type { %"struct.std::__1::__compressed_pair_elem.821" }
%"struct.std::__1::__compressed_pair_elem.821" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.825" = type { %"class.std::__1::__compressed_pair.826" }
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.831" = type { %"class.std::__1::__compressed_pair.832" }
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.837" = type { %"class.std::__1::__compressed_pair.838" }
%"class.std::__1::__compressed_pair.838" = type { %"struct.std::__1::__compressed_pair_elem.839" }
%"struct.std::__1::__compressed_pair_elem.839" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.843" = type { %"class.std::__1::__tree.844" }
%"class.std::__1::__tree.844" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.845", %"class.std::__1::__compressed_pair.849" }
%"class.std::__1::__compressed_pair.845" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"class.std::__1::__compressed_pair.849" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.852" }
%"class.v8::internal::TaggedImpl.852" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.851" }
%"class.v8::internal::TaggedImpl.851" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.853", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.853" = type { %"class.std::__1::__compressed_pair.854" }
%"class.std::__1::__compressed_pair.854" = type { %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.859", %"class.v8::internal::DetachableVector.860", %"class.v8::internal::DetachableVector.859", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.860" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.859" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.861", %"class.std::__1::vector.867", %"class.std::__1::unique_ptr.874", %"class.std::__1::vector.881", %"class.std::__1::unique_ptr.888", i64, %"class.std::__1::vector.894", %"class.std::__1::vector.902", %"class.std::__1::vector.910", i8, i8, i32 }
%"class.std::__1::unique_ptr.861" = type { %"class.std::__1::__compressed_pair.862" }
%"class.std::__1::__compressed_pair.862" = type { %"struct.std::__1::__compressed_pair_elem.863" }
%"struct.std::__1::__compressed_pair_elem.863" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.867" = type { %"class.std::__1::__vector_base.868" }
%"class.std::__1::__vector_base.868" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.869" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.870" }
%"struct.std::__1::__compressed_pair_elem.870" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.874" = type { %"class.std::__1::__compressed_pair.875" }
%"class.std::__1::__compressed_pair.875" = type { %"struct.std::__1::__compressed_pair_elem.876" }
%"struct.std::__1::__compressed_pair_elem.876" = type { %"class.v8::internal::GlobalHandles::NodeSpace.877"* }
%"class.v8::internal::GlobalHandles::NodeSpace.877" = type opaque
%"class.std::__1::vector.881" = type { %"class.std::__1::__vector_base.882" }
%"class.std::__1::__vector_base.882" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.883" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.883" = type { %"struct.std::__1::__compressed_pair_elem.884" }
%"struct.std::__1::__compressed_pair_elem.884" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.888" = type { %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890" }
%"struct.std::__1::__compressed_pair_elem.890" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.894" = type { %"class.std::__1::__vector_base.895" }
%"class.std::__1::__vector_base.895" = type { %"struct.std::__1::pair.896"*, %"struct.std::__1::pair.896"*, %"class.std::__1::__compressed_pair.897" }
%"struct.std::__1::pair.896" = type opaque
%"class.std::__1::__compressed_pair.897" = type { %"struct.std::__1::__compressed_pair_elem.898" }
%"struct.std::__1::__compressed_pair_elem.898" = type { %"struct.std::__1::pair.896"* }
%"class.std::__1::vector.902" = type { %"class.std::__1::__vector_base.903" }
%"class.std::__1::__vector_base.903" = type { %"struct.std::__1::pair.904"*, %"struct.std::__1::pair.904"*, %"class.std::__1::__compressed_pair.905" }
%"struct.std::__1::pair.904" = type opaque
%"class.std::__1::__compressed_pair.905" = type { %"struct.std::__1::__compressed_pair_elem.906" }
%"struct.std::__1::__compressed_pair_elem.906" = type { %"struct.std::__1::pair.904"* }
%"class.std::__1::vector.910" = type { %"class.std::__1::__vector_base.911" }
%"class.std::__1::__vector_base.911" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.912" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.917", %"class.std::__1::vector.924" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.931" }
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.924" = type { %"class.std::__1::__vector_base.925" }
%"class.std::__1::__vector_base.925" = type { i32*, i32*, %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.937" = type { %"struct.std::__1::__atomic_base.938" }
%"struct.std::__1::__atomic_base.938" = type { %"struct.std::__1::__cxx_atomic_impl.939" }
%"struct.std::__1::__cxx_atomic_impl.939" = type { %"struct.std::__1::__cxx_atomic_base_impl.940" }
%"struct.std::__1::__cxx_atomic_base_impl.940" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.947" = type { %"struct.std::__1::__atomic_base.948" }
%"struct.std::__1::__atomic_base.948" = type { %"struct.std::__1::__cxx_atomic_impl.949" }
%"struct.std::__1::__cxx_atomic_impl.949" = type { %"struct.std::__1::__cxx_atomic_base_impl.950" }
%"struct.std::__1::__cxx_atomic_base_impl.950" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.952" }
%"class.std::__1::__compressed_pair.952" = type { %"struct.std::__1::__compressed_pair_elem.953" }
%"struct.std::__1::__compressed_pair_elem.953" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.954 }
%union.anon.954 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.958" = type { %"class.std::__1::__hash_table.959" }
%"class.std::__1::__hash_table.959" = type <{ %"class.std::__1::unique_ptr.960", %"class.std::__1::__compressed_pair.970", %"class.std::__1::__compressed_pair.975", %"class.std::__1::__compressed_pair.978", [4 x i8] }>
%"class.std::__1::unique_ptr.960" = type { %"class.std::__1::__compressed_pair.961" }
%"class.std::__1::__compressed_pair.961" = type { %"struct.std::__1::__compressed_pair_elem.962", %"struct.std::__1::__compressed_pair_elem.964" }
%"struct.std::__1::__compressed_pair_elem.962" = type { %"struct.std::__1::__hash_node_base.963"** }
%"struct.std::__1::__hash_node_base.963" = type { %"struct.std::__1::__hash_node_base.963"* }
%"struct.std::__1::__compressed_pair_elem.964" = type { %"class.std::__1::__bucket_list_deallocator.965" }
%"class.std::__1::__bucket_list_deallocator.965" = type { %"class.std::__1::__compressed_pair.966" }
%"class.std::__1::__compressed_pair.966" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"struct.std::__1::__hash_node_base.963" }
%"class.std::__1::__compressed_pair.975" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.978" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::atomic.287" = type { %"struct.std::__1::__atomic_base.288" }
%"struct.std::__1::__atomic_base.288" = type { %"struct.std::__1::__cxx_atomic_impl.289" }
%"struct.std::__1::__cxx_atomic_impl.289" = type { %"struct.std::__1::__cxx_atomic_base_impl.290" }
%"struct.std::__1::__cxx_atomic_base_impl.290" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.984", %"class.v8::internal::Handle.990", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.991", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.984" = type { %"class.std::__1::__compressed_pair.985" }
%"class.std::__1::__compressed_pair.985" = type { %"struct.std::__1::__compressed_pair_elem.986" }
%"struct.std::__1::__compressed_pair_elem.986" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.990" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.991" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.992", %"class.std::__1::vector.998", %"class.std::__1::unique_ptr.1006", %"class.std::__1::unique_ptr.1012", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.1018", %"class.std::__1::vector.1024", %"struct.std::__1::pair.1032" }
%"class.std::__1::unique_ptr.992" = type { %"class.std::__1::__compressed_pair.993" }
%"class.std::__1::__compressed_pair.993" = type { %"struct.std::__1::__compressed_pair_elem.994" }
%"struct.std::__1::__compressed_pair_elem.994" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.998" = type { %"class.std::__1::__vector_base.999" }
%"class.std::__1::__vector_base.999" = type { %"class.std::__1::unique_ptr.1000"*, %"class.std::__1::unique_ptr.1000"*, %"class.std::__1::__compressed_pair.1001" }
%"class.std::__1::unique_ptr.1000" = type opaque
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"class.std::__1::unique_ptr.1000"* }
%"class.std::__1::unique_ptr.1006" = type { %"class.std::__1::__compressed_pair.1007" }
%"class.std::__1::__compressed_pair.1007" = type { %"struct.std::__1::__compressed_pair_elem.1008" }
%"struct.std::__1::__compressed_pair_elem.1008" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.1012" = type { %"class.std::__1::__compressed_pair.1013" }
%"class.std::__1::__compressed_pair.1013" = type { %"struct.std::__1::__compressed_pair_elem.1014" }
%"struct.std::__1::__compressed_pair_elem.1014" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.1018" = type { %"class.std::__1::__compressed_pair.1019" }
%"class.std::__1::__compressed_pair.1019" = type { %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.1024" = type { %"class.std::__1::__vector_base.1025" }
%"class.std::__1::__vector_base.1025" = type { %"struct.std::__1::pair.1026"*, %"struct.std::__1::pair.1026"*, %"class.std::__1::__compressed_pair.1027" }
%"struct.std::__1::pair.1026" = type opaque
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.1028" }
%"struct.std::__1::__compressed_pair_elem.1028" = type { %"struct.std::__1::pair.1026"* }
%"struct.std::__1::pair.1032" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.123"*, i16, i8*)*, i8* }
%"class.v8::Local.123" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.1033" = type { %"class.std::__1::__compressed_pair.1034" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.1035" }
%"struct.std::__1::__compressed_pair_elem.1035" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.1036", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.1036" = type { %"class.std::__1::__hash_table.1037" }
%"class.std::__1::__hash_table.1037" = type <{ %"class.std::__1::unique_ptr.1038", %"class.std::__1::__compressed_pair.1048", %"class.std::__1::__compressed_pair.1053", %"class.std::__1::__compressed_pair.1057", [4 x i8] }>
%"class.std::__1::unique_ptr.1038" = type { %"class.std::__1::__compressed_pair.1039" }
%"class.std::__1::__compressed_pair.1039" = type { %"struct.std::__1::__compressed_pair_elem.1040", %"struct.std::__1::__compressed_pair_elem.1042" }
%"struct.std::__1::__compressed_pair_elem.1040" = type { %"struct.std::__1::__hash_node_base.1041"** }
%"struct.std::__1::__hash_node_base.1041" = type { %"struct.std::__1::__hash_node_base.1041"* }
%"struct.std::__1::__compressed_pair_elem.1042" = type { %"class.std::__1::__bucket_list_deallocator.1043" }
%"class.std::__1::__bucket_list_deallocator.1043" = type { %"class.std::__1::__compressed_pair.1044" }
%"class.std::__1::__compressed_pair.1044" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1048" = type { %"struct.std::__1::__compressed_pair_elem.1049" }
%"struct.std::__1::__compressed_pair_elem.1049" = type { %"struct.std::__1::__hash_node_base.1041" }
%"class.std::__1::__compressed_pair.1053" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1071" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.1065"**, %"struct.std::__1::pair.1065"**, %"struct.std::__1::pair.1065"**, %"class.std::__1::__compressed_pair.1066" }
%"struct.std::__1::pair.1065" = type opaque
%"class.std::__1::__compressed_pair.1066" = type { %"struct.std::__1::__compressed_pair_elem.1067" }
%"struct.std::__1::__compressed_pair_elem.1067" = type { %"struct.std::__1::pair.1065"** }
%"class.std::__1::__compressed_pair.1071" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.1076" = type { %"class.std::__1::__vector_base.1077" }
%"class.std::__1::__vector_base.1077" = type { %"class.v8::internal::Handle.1078"*, %"class.v8::internal::Handle.1078"*, %"class.std::__1::__compressed_pair.1079" }
%"class.v8::internal::Handle.1078" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.1079" = type { %"struct.std::__1::__compressed_pair_elem.1080" }
%"struct.std::__1::__compressed_pair_elem.1080" = type { %"class.v8::internal::Handle.1078"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.942", i32, %"class.v8::Local.123" }
%"class.v8::Local.942" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1084" = type { %"class.std::__1::__compressed_pair.1085" }
%"class.std::__1::__compressed_pair.1085" = type { %"struct.std::__1::__compressed_pair_elem.1086" }
%"struct.std::__1::__compressed_pair_elem.1086" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1090" = type { %"class.std::__1::__vector_base.1091" }
%"class.std::__1::__vector_base.1091" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1092" }
%"class.std::__1::__compressed_pair.1092" = type { %"struct.std::__1::__compressed_pair_elem.1093" }
%"struct.std::__1::__compressed_pair_elem.1093" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1097" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1098" = type { %"class.std::__1::__hash_table.1099" }
%"class.std::__1::__hash_table.1099" = type <{ %"class.std::__1::unique_ptr.1100", %"class.std::__1::__compressed_pair.1110", %"class.std::__1::__compressed_pair.1115", %"class.std::__1::__compressed_pair.1118", [4 x i8] }>
%"class.std::__1::unique_ptr.1100" = type { %"class.std::__1::__compressed_pair.1101" }
%"class.std::__1::__compressed_pair.1101" = type { %"struct.std::__1::__compressed_pair_elem.1102", %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1102" = type { %"struct.std::__1::__hash_node_base.1103"** }
%"struct.std::__1::__hash_node_base.1103" = type { %"struct.std::__1::__hash_node_base.1103"* }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"class.std::__1::__bucket_list_deallocator.1105" }
%"class.std::__1::__bucket_list_deallocator.1105" = type { %"class.std::__1::__compressed_pair.1106" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1110" = type { %"struct.std::__1::__compressed_pair_elem.1111" }
%"struct.std::__1::__compressed_pair_elem.1111" = type { %"struct.std::__1::__hash_node_base.1103" }
%"class.std::__1::__compressed_pair.1115" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1118" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.658" = type { %"class.std::__1::__vector_base.659" }
%"class.std::__1::__vector_base.659" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.660" }
%"class.std::__1::__compressed_pair.660" = type { %"struct.std::__1::__compressed_pair_elem.661" }
%"struct.std::__1::__compressed_pair_elem.661" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.295" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1122", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1151", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1152", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1122" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1147, %union.anon.1149, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1147 = type { i64 }
%union.anon.1149 = type { i64 }
%"class.std::__1::weak_ptr.1151" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1152" = type { %"class.v8::PersistentBase.1153" }
%"class.v8::PersistentBase.1153" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1123", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1123" = type { %"class.std::__1::__hash_table.1124" }
%"class.std::__1::__hash_table.1124" = type <{ %"class.std::__1::unique_ptr.1125", %"class.std::__1::__compressed_pair.1135", %"class.std::__1::__compressed_pair.1140", %"class.std::__1::__compressed_pair.1143", [4 x i8] }>
%"class.std::__1::unique_ptr.1125" = type { %"class.std::__1::__compressed_pair.1126" }
%"class.std::__1::__compressed_pair.1126" = type { %"struct.std::__1::__compressed_pair_elem.1127", %"struct.std::__1::__compressed_pair_elem.1129" }
%"struct.std::__1::__compressed_pair_elem.1127" = type { %"struct.std::__1::__hash_node_base.1128"** }
%"struct.std::__1::__hash_node_base.1128" = type { %"struct.std::__1::__hash_node_base.1128"* }
%"struct.std::__1::__compressed_pair_elem.1129" = type { %"class.std::__1::__bucket_list_deallocator.1130" }
%"class.std::__1::__bucket_list_deallocator.1130" = type { %"class.std::__1::__compressed_pair.1131" }
%"class.std::__1::__compressed_pair.1131" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.1136" }
%"struct.std::__1::__compressed_pair_elem.1136" = type { %"struct.std::__1::__hash_node_base.1128" }
%"class.std::__1::__compressed_pair.1140" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1143" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1154" = type { %"class.std::__1::__compressed_pair.1155" }
%"class.std::__1::__compressed_pair.1155" = type { %"struct.std::__1::__compressed_pair_elem.1156" }
%"struct.std::__1::__compressed_pair_elem.1156" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1183", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1183" = type { %"class.std::__1::__compressed_pair.1184" }
%"class.std::__1::__compressed_pair.1184" = type { %"struct.std::__1::__compressed_pair_elem.1185" }
%"struct.std::__1::__compressed_pair_elem.1185" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1192" = type { %"class.std::__1::__compressed_pair.1193" }
%"class.std::__1::__compressed_pair.1193" = type { %"struct.std::__1::__compressed_pair_elem.1194" }
%"struct.std::__1::__compressed_pair_elem.1194" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.943", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.943" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1200" }
%"class.std::__1::unordered_map.1200" = type { %"class.std::__1::__hash_table.1201" }
%"class.std::__1::__hash_table.1201" = type <{ %"class.std::__1::unique_ptr.1202", %"class.std::__1::__compressed_pair.1212", %"class.std::__1::__compressed_pair.1217", %"class.std::__1::__compressed_pair.1220", [4 x i8] }>
%"class.std::__1::unique_ptr.1202" = type { %"class.std::__1::__compressed_pair.1203" }
%"class.std::__1::__compressed_pair.1203" = type { %"struct.std::__1::__compressed_pair_elem.1204", %"struct.std::__1::__compressed_pair_elem.1206" }
%"struct.std::__1::__compressed_pair_elem.1204" = type { %"struct.std::__1::__hash_node_base.1205"** }
%"struct.std::__1::__hash_node_base.1205" = type { %"struct.std::__1::__hash_node_base.1205"* }
%"struct.std::__1::__compressed_pair_elem.1206" = type { %"class.std::__1::__bucket_list_deallocator.1207" }
%"class.std::__1::__bucket_list_deallocator.1207" = type { %"class.std::__1::__compressed_pair.1208" }
%"class.std::__1::__compressed_pair.1208" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1212" = type { %"struct.std::__1::__compressed_pair_elem.1213" }
%"struct.std::__1::__compressed_pair_elem.1213" = type { %"struct.std::__1::__hash_node_base.1205" }
%"class.std::__1::__compressed_pair.1217" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1220" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::atomic.1226" = type { %"struct.std::__1::__atomic_base.1227" }
%"struct.std::__1::__atomic_base.1227" = type { %"struct.std::__1::__cxx_atomic_impl.1228" }
%"struct.std::__1::__cxx_atomic_impl.1228" = type { %"struct.std::__1::__cxx_atomic_base_impl.1229" }
%"struct.std::__1::__cxx_atomic_base_impl.1229" = type { %"class.std::__1::vector.1230"* }
%"class.std::__1::vector.1230" = type { %"class.std::__1::__vector_base.1231" }
%"class.std::__1::__vector_base.1231" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1232" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1232" = type { %"struct.std::__1::__compressed_pair_elem.1233" }
%"struct.std::__1::__compressed_pair_elem.1233" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::compiler::JSOperatorBuilder" = type { %"struct.v8::internal::compiler::JSOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::JSOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::SimplifiedOperatorBuilder" = type opaque
%"class.v8::internal::compiler::ObjectRef" = type { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* }
%"class.v8::internal::compiler::ObjectData" = type opaque
%"class.v8::internal::compiler::JSHeapBroker" = type opaque
%"class.v8::internal::compiler::HeapNumberRef" = type { %"class.v8::internal::compiler::HeapObjectRef" }
%"class.v8::internal::compiler::HeapObjectRef" = type { %"class.v8::internal::compiler::ObjectRef" }
%"class.v8::internal::Factory" = type { i8 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf" }
%"class.std::__1::__tuple_leaf" = type { i64* }
%"class.std::__1::tuple.1264" = type { i8 }
%"class.v8::internal::ZoneVector.1241" = type { %"class.std::__1::vector.1242" }
%"class.std::__1::vector.1242" = type { %"class.std::__1::__vector_base.1243" }
%"class.std::__1::__vector_base.1243" = type { %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"**, %"class.std::__1::__compressed_pair.1244" }
%"class.std::__1::__compressed_pair.1244" = type { %"struct.std::__1::__compressed_pair_elem.1245", %"struct.std::__1::__compressed_pair_elem.1246" }
%"struct.std::__1::__compressed_pair_elem.1245" = type { %"class.v8::internal::compiler::Node"** }
%"struct.std::__1::__compressed_pair_elem.1246" = type { %"class.v8::internal::ZoneAllocator.1247" }
%"class.v8::internal::ZoneAllocator.1247" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::ZoneVector.1251" = type { %"class.std::__1::vector.1257" }
%"class.std::__1::vector.1257" = type { %"class.std::__1::__vector_base.1258" }
%"class.std::__1::__vector_base.1258" = type { %"class.v8::internal::MachineType"*, %"class.v8::internal::MachineType"*, %"class.std::__1::__compressed_pair.1259" }
%"class.v8::internal::MachineType" = type { i8, i8 }
%"class.std::__1::__compressed_pair.1259" = type { %"struct.std::__1::__compressed_pair_elem.1260", %"struct.std::__1::__compressed_pair_elem.1261" }
%"struct.std::__1::__compressed_pair_elem.1260" = type { %"class.v8::internal::MachineType"* }
%"struct.std::__1::__compressed_pair_elem.1261" = type { %"class.v8::internal::ZoneAllocator.1262" }
%"class.v8::internal::ZoneAllocator.1262" = type { %"class.v8::internal::Zone"* }
%"struct.std::__1::__hash_node" = type { %"struct.std::__1::__hash_node_base.45", i64, %"struct.std::__1::__hash_value_type" }
%"struct.std::__1::__hash_value_type" = type { %"struct.std::__1::pair.1265" }
%"struct.std::__1::pair.1265" = type { i64, %"class.v8::internal::compiler::Node"* }

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE6rehashEm = comdat any

$_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE8__rehashEm = comdat any

@_ZNSt3__1L19piecewise_constructE = internal constant %"struct.std::__1::piecewise_construct_t" undef, align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph18CEntryStubConstantEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb(%"class.v8::internal::compiler::JSGraph"*, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::Handle.1078", align 8
  %7 = alloca %"class.v8::internal::Handle.1078", align 8
  %8 = alloca %"class.v8::internal::Handle.1078", align 8
  %9 = or i32 %3, %2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %65

11:                                               ; preds = %5
  br i1 %4, label %42, label %12

12:                                               ; preds = %11
  switch i32 %1, label %17 [
    i32 1, label %13
    i32 2, label %15
  ]

13:                                               ; preds = %12
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 34
  br label %19

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 35
  br label %19

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 36
  br label %19

19:                                               ; preds = %15, %17, %13
  %20 = phi %"class.v8::internal::compiler::Node"** [ %14, %13 ], [ %16, %15 ], [ %18, %17 ]
  %21 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %20, align 8
  %22 = icmp eq %"class.v8::internal::compiler::Node"* %21, null
  br i1 %22, label %23, label %84

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %25 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %24, align 8
  %26 = tail call i64* @_ZN2v88internal11CodeFactory6CEntryEPNS0_7IsolateEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb(%"class.v8::internal::Isolate"* %25, i32 %1, i32 0, i32 0, i1 zeroext false) #5
  %27 = bitcast %"class.v8::internal::Handle.1078"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %7, i64 0, i32 0, i32 0
  store i64* %26, i64** %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %30 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %29, i64* %26) #5
  %31 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %30, align 8
  %32 = icmp eq %"class.v8::internal::compiler::Node"* %31, null
  br i1 %32, label %33, label %40

33:                                               ; preds = %23
  %34 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %35 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %37 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %36, align 8
  %38 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %37, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %7) #5
  %39 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %35, %"class.v8::internal::compiler::Operator"* %38, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %39, %"class.v8::internal::compiler::Node"** %30, align 8
  br label %40

40:                                               ; preds = %23, %33
  %41 = phi %"class.v8::internal::compiler::Node"* [ %39, %33 ], [ %31, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store %"class.v8::internal::compiler::Node"* %41, %"class.v8::internal::compiler::Node"** %20, align 8
  br label %84

42:                                               ; preds = %11
  %43 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 37
  %44 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %43, align 8
  %45 = icmp eq %"class.v8::internal::compiler::Node"* %44, null
  br i1 %45, label %46, label %84

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %48 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %47, align 8
  %49 = tail call i64* @_ZN2v88internal11CodeFactory6CEntryEPNS0_7IsolateEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb(%"class.v8::internal::Isolate"* %48, i32 %1, i32 0, i32 0, i1 zeroext true) #5
  %50 = bitcast %"class.v8::internal::Handle.1078"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50)
  %51 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %6, i64 0, i32 0, i32 0
  store i64* %49, i64** %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %53 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %52, i64* %49) #5
  %54 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %53, align 8
  %55 = icmp eq %"class.v8::internal::compiler::Node"* %54, null
  br i1 %55, label %56, label %63

56:                                               ; preds = %46
  %57 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %58 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %60 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %59, align 8
  %61 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %60, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %6) #5
  %62 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %58, %"class.v8::internal::compiler::Operator"* %61, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %62, %"class.v8::internal::compiler::Node"** %53, align 8
  br label %63

63:                                               ; preds = %46, %56
  %64 = phi %"class.v8::internal::compiler::Node"* [ %62, %56 ], [ %54, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50)
  store %"class.v8::internal::compiler::Node"* %64, %"class.v8::internal::compiler::Node"** %43, align 8
  br label %84

65:                                               ; preds = %5
  %66 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %67 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %66, align 8
  %68 = tail call i64* @_ZN2v88internal11CodeFactory6CEntryEPNS0_7IsolateEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb(%"class.v8::internal::Isolate"* %67, i32 %1, i32 %2, i32 %3, i1 zeroext %4) #5
  %69 = bitcast %"class.v8::internal::Handle.1078"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69)
  %70 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %8, i64 0, i32 0, i32 0
  store i64* %68, i64** %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %72 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %71, i64* %68) #5
  %73 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %72, align 8
  %74 = icmp eq %"class.v8::internal::compiler::Node"* %73, null
  br i1 %74, label %75, label %82

75:                                               ; preds = %65
  %76 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %77 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %79 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %78, align 8
  %80 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %79, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %8) #5
  %81 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %77, %"class.v8::internal::compiler::Operator"* %80, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %81, %"class.v8::internal::compiler::Node"** %72, align 8
  br label %82

82:                                               ; preds = %65, %75
  %83 = phi %"class.v8::internal::compiler::Node"* [ %81, %75 ], [ %73, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69)
  br label %84

84:                                               ; preds = %63, %42, %40, %19, %82
  %85 = phi %"class.v8::internal::compiler::Node"* [ %83, %82 ], [ %41, %40 ], [ %21, %19 ], [ %64, %63 ], [ %44, %42 ]
  ret %"class.v8::internal::compiler::Node"* %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph12HeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::JSGraph"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle.1078", align 8
  %4 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %3, i64 0, i32 0, i32 0
  store i64* %1, i64** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %6 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %5, i64* %1) #5
  %7 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6, align 8
  %8 = icmp eq %"class.v8::internal::compiler::Node"* %7, null
  br i1 %8, label %9, label %16

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %11 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %13 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %12, align 8
  %14 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %13, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %3) #5
  %15 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %11, %"class.v8::internal::compiler::Operator"* %14, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %15, %"class.v8::internal::compiler::Node"** %6, align 8
  br label %16

16:                                               ; preds = %9, %2
  %17 = phi %"class.v8::internal::compiler::Node"* [ %15, %9 ], [ %7, %2 ]
  ret %"class.v8::internal::compiler::Node"* %17
}

declare i64* @_ZN2v88internal11CodeFactory6CEntryEPNS0_7IsolateEiNS0_14SaveFPRegsModeENS0_8ArgvModeEb(%"class.v8::internal::Isolate"*, i32, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph8ConstantERKNS1_9ObjectRefE(%"class.v8::internal::compiler::JSGraph"*, %"class.v8::internal::compiler::ObjectRef"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle.1078", align 8
  %4 = alloca %"class.v8::internal::Handle.1078", align 8
  %5 = alloca %"class.v8::internal::Handle.1078", align 8
  %6 = alloca %"class.v8::internal::Handle.1078", align 8
  %7 = alloca %"class.v8::internal::Handle.1078", align 8
  %8 = alloca %"class.v8::internal::Handle.1078", align 8
  %9 = alloca %"class.v8::internal::compiler::HeapNumberRef", align 8
  %10 = alloca %"class.v8::internal::compiler::HeapObjectRef", align 8
  %11 = alloca %"class.v8::internal::compiler::HeapObjectRef", align 8
  %12 = tail call zeroext i1 @_ZNK2v88internal8compiler9ObjectRef5IsSmiEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  br i1 %12, label %13, label %17

13:                                               ; preds = %2
  %14 = tail call i32 @_ZNK2v88internal8compiler9ObjectRef5AsSmiEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  %15 = sitofp i32 %14 to double
  %16 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph8ConstantEd(%"class.v8::internal::compiler::JSGraph"* %0, double %15)
  br label %186

17:                                               ; preds = %2
  %18 = tail call zeroext i1 @_ZNK2v88internal8compiler9ObjectRef12IsHeapNumberEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  br i1 %18, label %19, label %28

19:                                               ; preds = %17
  %20 = bitcast %"class.v8::internal::compiler::HeapNumberRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #5
  %21 = tail call { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } @_ZNK2v88internal8compiler9ObjectRef12AsHeapNumberEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  %22 = getelementptr inbounds %"class.v8::internal::compiler::HeapNumberRef", %"class.v8::internal::compiler::HeapNumberRef"* %9, i64 0, i32 0, i32 0, i32 0
  %23 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %21, 0
  store %"class.v8::internal::compiler::ObjectData"* %23, %"class.v8::internal::compiler::ObjectData"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::HeapNumberRef", %"class.v8::internal::compiler::HeapNumberRef"* %9, i64 0, i32 0, i32 0, i32 1
  %25 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %21, 1
  store %"class.v8::internal::compiler::JSHeapBroker"* %25, %"class.v8::internal::compiler::JSHeapBroker"** %24, align 8
  %26 = call double @_ZNK2v88internal8compiler13HeapNumberRef5valueEv(%"class.v8::internal::compiler::HeapNumberRef"* nonnull %9) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph8ConstantEd(%"class.v8::internal::compiler::JSGraph"* %0, double %26)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #5
  br label %186

28:                                               ; preds = %17
  %29 = bitcast %"class.v8::internal::compiler::HeapObjectRef"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #5
  %30 = tail call { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } @_ZNK2v88internal8compiler9ObjectRef12AsHeapObjectEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  %31 = getelementptr inbounds %"class.v8::internal::compiler::HeapObjectRef", %"class.v8::internal::compiler::HeapObjectRef"* %10, i64 0, i32 0, i32 0
  %32 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %30, 0
  store %"class.v8::internal::compiler::ObjectData"* %32, %"class.v8::internal::compiler::ObjectData"** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::compiler::HeapObjectRef", %"class.v8::internal::compiler::HeapObjectRef"* %10, i64 0, i32 0, i32 1
  %34 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %30, 1
  store %"class.v8::internal::compiler::JSHeapBroker"* %34, %"class.v8::internal::compiler::JSHeapBroker"** %33, align 8
  %35 = call i64 @_ZNK2v88internal8compiler13HeapObjectRef17GetHeapObjectTypeEv(%"class.v8::internal::compiler::HeapObjectRef"* nonnull %10) #5
  %36 = lshr i64 %35, 16
  %37 = trunc i64 %36 to i8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #5
  switch i8 %37, label %163 [
    i8 2, label %38
    i8 3, label %63
    i8 4, label %88
    i8 1, label %113
  ]

38:                                               ; preds = %28
  %39 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 22
  %40 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %39, align 8
  %41 = icmp eq %"class.v8::internal::compiler::Node"* %40, null
  br i1 %41, label %42, label %186

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %44 = bitcast %"class.v8::internal::Isolate"** %43 to %"class.v8::internal::Factory"**
  %45 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %45, i64 160
  %47 = bitcast %"class.v8::internal::Factory"* %46 to i64*
  %48 = bitcast %"class.v8::internal::Handle.1078"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #5
  %49 = bitcast %"class.v8::internal::Handle.1078"* %7 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %46, %"class.v8::internal::Factory"** %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %51 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %50, i64* %47) #5
  %52 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %51, align 8
  %53 = icmp eq %"class.v8::internal::compiler::Node"* %52, null
  br i1 %53, label %54, label %61

54:                                               ; preds = %42
  %55 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %56 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %58 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %57, align 8
  %59 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %58, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %7) #5
  %60 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %56, %"class.v8::internal::compiler::Operator"* %59, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %60, %"class.v8::internal::compiler::Node"** %51, align 8
  br label %61

61:                                               ; preds = %54, %42
  %62 = phi %"class.v8::internal::compiler::Node"* [ %60, %54 ], [ %52, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #5
  store %"class.v8::internal::compiler::Node"* %62, %"class.v8::internal::compiler::Node"** %39, align 8
  br label %186

63:                                               ; preds = %28
  %64 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 26
  %65 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %64, align 8
  %66 = icmp eq %"class.v8::internal::compiler::Node"* %65, null
  br i1 %66, label %67, label %186

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %69 = bitcast %"class.v8::internal::Isolate"** %68 to %"class.v8::internal::Factory"**
  %70 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %70, i64 176
  %72 = bitcast %"class.v8::internal::Factory"* %71 to i64*
  %73 = bitcast %"class.v8::internal::Handle.1078"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #5
  %74 = bitcast %"class.v8::internal::Handle.1078"* %6 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %71, %"class.v8::internal::Factory"** %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %76 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %75, i64* %72) #5
  %77 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %76, align 8
  %78 = icmp eq %"class.v8::internal::compiler::Node"* %77, null
  br i1 %78, label %79, label %86

79:                                               ; preds = %67
  %80 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %81 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %80, align 8
  %82 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %83 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %82, align 8
  %84 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %83, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %6) #5
  %85 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %81, %"class.v8::internal::compiler::Operator"* %84, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %85, %"class.v8::internal::compiler::Node"** %76, align 8
  br label %86

86:                                               ; preds = %79, %67
  %87 = phi %"class.v8::internal::compiler::Node"* [ %85, %79 ], [ %77, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #5
  store %"class.v8::internal::compiler::Node"* %87, %"class.v8::internal::compiler::Node"** %64, align 8
  br label %186

88:                                               ; preds = %28
  %89 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 23
  %90 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %89, align 8
  %91 = icmp eq %"class.v8::internal::compiler::Node"* %90, null
  br i1 %91, label %92, label %186

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %94 = bitcast %"class.v8::internal::Isolate"** %93 to %"class.v8::internal::Factory"**
  %95 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %95, i64 168
  %97 = bitcast %"class.v8::internal::Factory"* %96 to i64*
  %98 = bitcast %"class.v8::internal::Handle.1078"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %98) #5
  %99 = bitcast %"class.v8::internal::Handle.1078"* %5 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %96, %"class.v8::internal::Factory"** %99, align 8
  %100 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %101 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %100, i64* %97) #5
  %102 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %101, align 8
  %103 = icmp eq %"class.v8::internal::compiler::Node"* %102, null
  br i1 %103, label %104, label %111

104:                                              ; preds = %92
  %105 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %106 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %105, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %108 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %107, align 8
  %109 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %108, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %5) #5
  %110 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %106, %"class.v8::internal::compiler::Operator"* %109, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %110, %"class.v8::internal::compiler::Node"** %101, align 8
  br label %111

111:                                              ; preds = %104, %92
  %112 = phi %"class.v8::internal::compiler::Node"* [ %110, %104 ], [ %102, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %98) #5
  store %"class.v8::internal::compiler::Node"* %112, %"class.v8::internal::compiler::Node"** %89, align 8
  br label %186

113:                                              ; preds = %28
  %114 = call i64* @_ZNK2v88internal8compiler9ObjectRef6objectEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  %115 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %116 = bitcast %"class.v8::internal::Isolate"** %115 to %"class.v8::internal::Factory"**
  %117 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %116, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %117, i64 184
  %119 = bitcast %"class.v8::internal::Factory"* %118 to i64*
  %120 = icmp eq i64* %114, %119
  br i1 %120, label %121, label %141

121:                                              ; preds = %113
  %122 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 24
  %123 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %122, align 8
  %124 = icmp eq %"class.v8::internal::compiler::Node"* %123, null
  br i1 %124, label %125, label %186

125:                                              ; preds = %121
  %126 = bitcast %"class.v8::internal::Handle.1078"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #5
  %127 = bitcast %"class.v8::internal::Handle.1078"* %4 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %118, %"class.v8::internal::Factory"** %127, align 8
  %128 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %129 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %128, i64* %114) #5
  %130 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %129, align 8
  %131 = icmp eq %"class.v8::internal::compiler::Node"* %130, null
  br i1 %131, label %132, label %139

132:                                              ; preds = %125
  %133 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %134 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %133, align 8
  %135 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %136 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %135, align 8
  %137 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %136, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %4) #5
  %138 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %134, %"class.v8::internal::compiler::Operator"* %137, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %138, %"class.v8::internal::compiler::Node"** %129, align 8
  br label %139

139:                                              ; preds = %132, %125
  %140 = phi %"class.v8::internal::compiler::Node"* [ %138, %132 ], [ %130, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #5
  store %"class.v8::internal::compiler::Node"* %140, %"class.v8::internal::compiler::Node"** %122, align 8
  br label %186

141:                                              ; preds = %113
  %142 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 25
  %143 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %142, align 8
  %144 = icmp eq %"class.v8::internal::compiler::Node"* %143, null
  br i1 %144, label %145, label %186

145:                                              ; preds = %141
  %146 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %117, i64 192
  %147 = bitcast %"class.v8::internal::Factory"* %146 to i64*
  %148 = bitcast %"class.v8::internal::Handle.1078"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %148) #5
  %149 = bitcast %"class.v8::internal::Handle.1078"* %3 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %146, %"class.v8::internal::Factory"** %149, align 8
  %150 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %151 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %150, i64* %147) #5
  %152 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %151, align 8
  %153 = icmp eq %"class.v8::internal::compiler::Node"* %152, null
  br i1 %153, label %154, label %161

154:                                              ; preds = %145
  %155 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %156 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %155, align 8
  %157 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %158 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %157, align 8
  %159 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %158, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %3) #5
  %160 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %156, %"class.v8::internal::compiler::Operator"* %159, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %160, %"class.v8::internal::compiler::Node"** %151, align 8
  br label %161

161:                                              ; preds = %154, %145
  %162 = phi %"class.v8::internal::compiler::Node"* [ %160, %154 ], [ %152, %145 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %148) #5
  store %"class.v8::internal::compiler::Node"* %162, %"class.v8::internal::compiler::Node"** %142, align 8
  br label %186

163:                                              ; preds = %28
  %164 = bitcast %"class.v8::internal::compiler::HeapObjectRef"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %164) #5
  %165 = call { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } @_ZNK2v88internal8compiler9ObjectRef12AsHeapObjectEv(%"class.v8::internal::compiler::ObjectRef"* %1) #5
  %166 = getelementptr inbounds %"class.v8::internal::compiler::HeapObjectRef", %"class.v8::internal::compiler::HeapObjectRef"* %11, i64 0, i32 0, i32 0
  %167 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %165, 0
  store %"class.v8::internal::compiler::ObjectData"* %167, %"class.v8::internal::compiler::ObjectData"** %166, align 8
  %168 = getelementptr inbounds %"class.v8::internal::compiler::HeapObjectRef", %"class.v8::internal::compiler::HeapObjectRef"* %11, i64 0, i32 0, i32 1
  %169 = extractvalue { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } %165, 1
  store %"class.v8::internal::compiler::JSHeapBroker"* %169, %"class.v8::internal::compiler::JSHeapBroker"** %168, align 8
  %170 = call i64* @_ZNK2v88internal8compiler13HeapObjectRef6objectEv(%"class.v8::internal::compiler::HeapObjectRef"* nonnull %11) #5
  %171 = bitcast %"class.v8::internal::Handle.1078"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %171)
  %172 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %8, i64 0, i32 0, i32 0
  store i64* %170, i64** %172, align 8
  %173 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %174 = call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %173, i64* %170) #5
  %175 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %174, align 8
  %176 = icmp eq %"class.v8::internal::compiler::Node"* %175, null
  br i1 %176, label %177, label %184

177:                                              ; preds = %163
  %178 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %179 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %178, align 8
  %180 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %181 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %180, align 8
  %182 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %181, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %8) #5
  %183 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %179, %"class.v8::internal::compiler::Operator"* %182, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %183, %"class.v8::internal::compiler::Node"** %174, align 8
  br label %184

184:                                              ; preds = %163, %177
  %185 = phi %"class.v8::internal::compiler::Node"* [ %183, %177 ], [ %175, %163 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %171)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %164) #5
  br label %186

186:                                              ; preds = %161, %141, %139, %121, %111, %88, %86, %63, %61, %38, %184, %19, %13
  %187 = phi %"class.v8::internal::compiler::Node"* [ %16, %13 ], [ %27, %19 ], [ %185, %184 ], [ %62, %61 ], [ %40, %38 ], [ %87, %86 ], [ %65, %63 ], [ %112, %111 ], [ %90, %88 ], [ %140, %139 ], [ %123, %121 ], [ %162, %161 ], [ %143, %141 ]
  ret %"class.v8::internal::compiler::Node"* %187
}

declare zeroext i1 @_ZNK2v88internal8compiler9ObjectRef5IsSmiEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph8ConstantEd(%"class.v8::internal::compiler::JSGraph"*, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::tuple", align 8
  %4 = alloca %"class.std::__1::tuple.1264", align 1
  %5 = alloca i64, align 8
  %6 = alloca %"class.std::__1::tuple", align 8
  %7 = alloca %"class.std::__1::tuple.1264", align 1
  %8 = alloca i64, align 8
  %9 = alloca %"class.std::__1::tuple", align 8
  %10 = alloca %"class.std::__1::tuple.1264", align 1
  %11 = alloca i64, align 8
  %12 = bitcast double %1 to i64
  switch i64 %12, label %65 [
    i64 0, label %13
    i64 4607182418800017408, label %39
  ]

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 27
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %85

17:                                               ; preds = %13
  %18 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = bitcast i64* %8 to double*
  store double 0.000000e+00, double* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::tuple"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #5
  %22 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %6, i64 0, i32 0, i32 0, i32 0
  store i64* %8, i64** %22, align 8
  %23 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %23) #5
  %24 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %20, i64* nonnull dereferenceable(8) %8, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %6, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %7) #5
  %25 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %24, 0
  %26 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %25, i64 3
  %27 = bitcast %"struct.std::__1::__hash_node_base.45"* %26 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  %28 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %27, align 8
  %29 = icmp eq %"class.v8::internal::compiler::Node"* %28, null
  br i1 %29, label %30, label %37

30:                                               ; preds = %17
  %31 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %32 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %34 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %33, align 8
  %35 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %34, double 0.000000e+00) #5
  %36 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %32, %"class.v8::internal::compiler::Operator"* %35, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %36, %"class.v8::internal::compiler::Node"** %27, align 8
  br label %37

37:                                               ; preds = %30, %17
  %38 = phi %"class.v8::internal::compiler::Node"* [ %36, %30 ], [ %28, %17 ]
  store %"class.v8::internal::compiler::Node"* %38, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %85

39:                                               ; preds = %2
  %40 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 29
  %41 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %40, align 8
  %42 = icmp eq %"class.v8::internal::compiler::Node"* %41, null
  br i1 %42, label %43, label %85

43:                                               ; preds = %39
  %44 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #5
  %45 = bitcast i64* %5 to double*
  store double 1.000000e+00, double* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %47 = bitcast %"class.std::__1::tuple"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #5
  %48 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %3, i64 0, i32 0, i32 0, i32 0
  store i64* %5, i64** %48, align 8
  %49 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %49) #5
  %50 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %46, i64* nonnull dereferenceable(8) %5, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %3, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %4) #5
  %51 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %50, 0
  %52 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %51, i64 3
  %53 = bitcast %"struct.std::__1::__hash_node_base.45"* %52 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %49) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #5
  %54 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %53, align 8
  %55 = icmp eq %"class.v8::internal::compiler::Node"* %54, null
  br i1 %55, label %56, label %63

56:                                               ; preds = %43
  %57 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %58 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %60 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %59, align 8
  %61 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %60, double 1.000000e+00) #5
  %62 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %58, %"class.v8::internal::compiler::Operator"* %61, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %62, %"class.v8::internal::compiler::Node"** %53, align 8
  br label %63

63:                                               ; preds = %56, %43
  %64 = phi %"class.v8::internal::compiler::Node"* [ %62, %56 ], [ %54, %43 ]
  store %"class.v8::internal::compiler::Node"* %64, %"class.v8::internal::compiler::Node"** %40, align 8
  br label %85

65:                                               ; preds = %2
  %66 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #5
  %67 = bitcast i64* %11 to double*
  store double %1, double* %67, align 8
  %68 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::tuple"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #5
  %70 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %9, i64 0, i32 0, i32 0, i32 0
  store i64* %11, i64** %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %71) #5
  %72 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %68, i64* nonnull dereferenceable(8) %11, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %9, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %10) #5
  %73 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %72, 0
  %74 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %73, i64 3
  %75 = bitcast %"struct.std::__1::__hash_node_base.45"* %74 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %71) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #5
  %76 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %75, align 8
  %77 = icmp eq %"class.v8::internal::compiler::Node"* %76, null
  br i1 %77, label %78, label %85

78:                                               ; preds = %65
  %79 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %80 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %82 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %81, align 8
  %83 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %82, double %1) #5
  %84 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %80, %"class.v8::internal::compiler::Operator"* %83, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %84, %"class.v8::internal::compiler::Node"** %75, align 8
  br label %85

85:                                               ; preds = %78, %65, %63, %39, %37, %13
  %86 = phi %"class.v8::internal::compiler::Node"* [ %38, %37 ], [ %15, %13 ], [ %64, %63 ], [ %41, %39 ], [ %84, %78 ], [ %76, %65 ]
  ret %"class.v8::internal::compiler::Node"* %86
}

declare i32 @_ZNK2v88internal8compiler9ObjectRef5AsSmiEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2v88internal8compiler9ObjectRef12IsHeapNumberEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

declare { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } @_ZNK2v88internal8compiler9ObjectRef12AsHeapNumberEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

declare double @_ZNK2v88internal8compiler13HeapNumberRef5valueEv(%"class.v8::internal::compiler::HeapNumberRef"*) local_unnamed_addr #2

declare { %"class.v8::internal::compiler::ObjectData"*, %"class.v8::internal::compiler::JSHeapBroker"* } @_ZNK2v88internal8compiler9ObjectRef12AsHeapObjectEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

declare i64 @_ZNK2v88internal8compiler13HeapObjectRef17GetHeapObjectTypeEv(%"class.v8::internal::compiler::HeapObjectRef"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph17UndefinedConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 22
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 160
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph12NullConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 26
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 176
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph15TheHoleConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 23
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 168
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

declare i64* @_ZNK2v88internal8compiler9ObjectRef6objectEv(%"class.v8::internal::compiler::ObjectRef"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph12TrueConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 24
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 184
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph13FalseConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 25
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 192
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

declare i64* @_ZNK2v88internal8compiler13HeapObjectRef6objectEv(%"class.v8::internal::compiler::HeapObjectRef"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph12ZeroConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::tuple", align 8
  %3 = alloca %"class.std::__1::tuple.1264", align 1
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 27
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"* %6, null
  br i1 %7, label %8, label %30

8:                                                ; preds = %1
  %9 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = bitcast i64* %4 to double*
  store double 0.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::tuple"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  store i64* %4, i64** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  %15 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %11, i64* nonnull dereferenceable(8) %4, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %2, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %3) #5
  %16 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %15, 0
  %17 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %16, i64 3
  %18 = bitcast %"struct.std::__1::__hash_node_base.45"* %17 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  %19 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %18, align 8
  %20 = icmp eq %"class.v8::internal::compiler::Node"* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %23 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %25 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %24, align 8
  %26 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %25, double 0.000000e+00) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %23, %"class.v8::internal::compiler::Operator"* %26, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %27, %"class.v8::internal::compiler::Node"** %18, align 8
  br label %28

28:                                               ; preds = %8, %21
  %29 = phi %"class.v8::internal::compiler::Node"* [ %27, %21 ], [ %19, %8 ]
  store %"class.v8::internal::compiler::Node"* %29, %"class.v8::internal::compiler::Node"** %5, align 8
  br label %30

30:                                               ; preds = %1, %28
  %31 = phi %"class.v8::internal::compiler::Node"* [ %29, %28 ], [ %6, %1 ]
  ret %"class.v8::internal::compiler::Node"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph11OneConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::tuple", align 8
  %3 = alloca %"class.std::__1::tuple.1264", align 1
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 29
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"* %6, null
  br i1 %7, label %8, label %30

8:                                                ; preds = %1
  %9 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = bitcast i64* %4 to double*
  store double 1.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::tuple"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  store i64* %4, i64** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  %15 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %11, i64* nonnull dereferenceable(8) %4, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %2, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %3) #5
  %16 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %15, 0
  %17 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %16, i64 3
  %18 = bitcast %"struct.std::__1::__hash_node_base.45"* %17 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  %19 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %18, align 8
  %20 = icmp eq %"class.v8::internal::compiler::Node"* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %23 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %25 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %24, align 8
  %26 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %25, double 1.000000e+00) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %23, %"class.v8::internal::compiler::Operator"* %26, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %27, %"class.v8::internal::compiler::Node"** %18, align 8
  br label %28

28:                                               ; preds = %8, %21
  %29 = phi %"class.v8::internal::compiler::Node"* [ %27, %21 ], [ %19, %8 ]
  store %"class.v8::internal::compiler::Node"* %29, %"class.v8::internal::compiler::Node"** %5, align 8
  br label %30

30:                                               ; preds = %1, %28
  %31 = phi %"class.v8::internal::compiler::Node"* [ %29, %28 ], [ %6, %1 ]
  ret %"class.v8::internal::compiler::Node"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph14NumberConstantEd(%"class.v8::internal::compiler::JSGraph"*, double) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::tuple", align 8
  %4 = alloca %"class.std::__1::tuple.1264", align 1
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = bitcast i64* %5 to double*
  store double %1, double* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::__1::tuple"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %3, i64 0, i32 0, i32 0, i32 0
  store i64* %5, i64** %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #5
  %12 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %8, i64* nonnull dereferenceable(8) %5, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %3, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %4) #5
  %13 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %12, 0
  %14 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %13, i64 3
  %15 = bitcast %"struct.std::__1::__hash_node_base.45"* %14 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, double %1) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %18, %2
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %2 ]
  ret %"class.v8::internal::compiler::Node"* %26
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"*, double) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"*, i64*) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::Handle.1078"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler7JSGraph14GetCachedNodesEPNS0_10ZoneVectorIPNS1_4NodeEEE(%"class.v8::internal::compiler::JSGraph"*, %"class.v8::internal::ZoneVector.1241"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  tail call void @_ZN2v88internal8compiler15CommonNodeCache14GetCachedNodesEPNS0_10ZoneVectorIPNS1_4NodeEEE(%"class.v8::internal::compiler::CommonNodeCache"* %3, %"class.v8::internal::ZoneVector.1241"* %1) #5
  %4 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 4
  %5 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4, align 8
  %6 = icmp eq %"class.v8::internal::compiler::Node"* %5, null
  %7 = ptrtoint %"class.v8::internal::compiler::Node"* %5 to i64
  br i1 %6, label %248, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %11, align 8
  %13 = icmp eq %"class.v8::internal::compiler::Node"** %10, %12
  %14 = ptrtoint %"class.v8::internal::compiler::Node"** %12 to i64
  br i1 %13, label %20, label %15

15:                                               ; preds = %8
  %16 = bitcast %"class.v8::internal::compiler::Node"** %10 to i64*
  store i64 %7, i64* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %10, i64 1
  %18 = ptrtoint %"class.v8::internal::compiler::Node"** %17 to i64
  %19 = bitcast %"class.v8::internal::compiler::Node"*** %9 to i64*
  store i64 %18, i64* %19, align 8
  br label %248

20:                                               ; preds = %8
  %21 = ptrtoint %"class.v8::internal::compiler::Node"** %10 to i64
  %22 = bitcast %"class.v8::internal::compiler::Node"*** %9 to i64*
  %23 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = ashr exact i64 %25, 3
  %27 = add nsw i64 %26, 1
  %28 = icmp ugt i64 %27, 268435455
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #6
  unreachable

31:                                               ; preds = %20
  %32 = bitcast %"class.v8::internal::compiler::Node"*** %11 to i64*
  %33 = sub i64 %14, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, 134217727
  br i1 %35, label %36, label %41

36:                                               ; preds = %31
  %37 = ashr exact i64 %33, 2
  %38 = icmp ult i64 %37, %27
  %39 = select i1 %38, i64 %27, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %61, label %41

41:                                               ; preds = %36, %31
  %42 = phi i64 [ %39, %36 ], [ 268435455, %31 ]
  %43 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %44 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %43, align 8
  %45 = shl i64 %42, 3
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %44, i64 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %44, i64 0, i32 3
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %49, %47
  %51 = icmp ugt i64 %45, %50
  br i1 %51, label %52, label %54, !prof !2

52:                                               ; preds = %41
  %53 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %44, i64 %45) #5
  br label %56

54:                                               ; preds = %41
  %55 = add i64 %47, %45
  store i64 %55, i64* %46, align 8
  br label %56

56:                                               ; preds = %54, %52
  %57 = phi i64 [ %53, %52 ], [ %47, %54 ]
  %58 = inttoptr i64 %57 to %"class.v8::internal::compiler::Node"**
  %59 = bitcast %"class.v8::internal::compiler::Node"** %4 to i64*
  %60 = load i64, i64* %59, align 8
  br label %61

61:                                               ; preds = %36, %56
  %62 = phi i64 [ %60, %56 ], [ %7, %36 ]
  %63 = phi i64 [ %42, %56 ], [ 0, %36 ]
  %64 = phi %"class.v8::internal::compiler::Node"** [ %58, %56 ], [ null, %36 ]
  %65 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %64, i64 %26
  %66 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %64, i64 %63
  %67 = ptrtoint %"class.v8::internal::compiler::Node"** %66 to i64
  %68 = bitcast %"class.v8::internal::compiler::Node"** %65 to i64*
  store i64 %62, i64* %68, align 8
  %69 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, i64 1
  %70 = ptrtoint %"class.v8::internal::compiler::Node"** %69 to i64
  %71 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %72 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %71, align 8
  %73 = ptrtoint %"class.v8::internal::compiler::Node"** %72 to i64
  %74 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %9, align 8
  %75 = icmp eq %"class.v8::internal::compiler::Node"** %74, %72
  br i1 %75, label %245, label %76

76:                                               ; preds = %61
  %77 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %78 = ptrtoint %"class.v8::internal::compiler::Node"** %77 to i64
  %79 = sub i64 %78, %73
  %80 = lshr i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = icmp ult i64 %81, 4
  br i1 %82, label %175, label %83

83:                                               ; preds = %76
  %84 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %85 = ptrtoint %"class.v8::internal::compiler::Node"** %84 to i64
  %86 = sub i64 %85, %73
  %87 = lshr i64 %86, 3
  %88 = xor i64 %87, -1
  %89 = add nsw i64 %26, %88
  %90 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %64, i64 %89
  %91 = xor i64 %87, -1
  %92 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 %91
  %93 = icmp ult %"class.v8::internal::compiler::Node"** %90, %74
  %94 = icmp ult %"class.v8::internal::compiler::Node"** %92, %65
  %95 = and i1 %93, %94
  br i1 %95, label %175, label %96

96:                                               ; preds = %83
  %97 = and i64 %81, 4611686018427387900
  %98 = sub nsw i64 0, %97
  %99 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, i64 %98
  %100 = sub nsw i64 0, %97
  %101 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 %100
  %102 = add nsw i64 %97, -4
  %103 = lshr exact i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %102, 0
  br i1 %106, label %151, label %107

107:                                              ; preds = %96
  %108 = sub nuw nsw i64 %104, %105
  %109 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, i64 -1
  %110 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %111 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, i64 -1
  %112 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  br label %113

113:                                              ; preds = %113, %107
  %114 = phi i64 [ 0, %107 ], [ %148, %113 ]
  %115 = phi i64 [ %108, %107 ], [ %149, %113 ]
  %116 = sub i64 0, %114
  %117 = sub i64 0, %114
  %118 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %109, i64 %116
  %119 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %110, i64 %117
  %120 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %119, i64 -1
  %121 = bitcast %"class.v8::internal::compiler::Node"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !3
  %123 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %119, i64 -2
  %124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 -1
  %125 = bitcast %"class.v8::internal::compiler::Node"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !3
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %118, i64 -1
  %128 = bitcast %"class.v8::internal::compiler::Node"** %127 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %128, align 8, !alias.scope !6, !noalias !3
  %129 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %118, i64 -2
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %129, i64 -1
  %131 = bitcast %"class.v8::internal::compiler::Node"** %130 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %131, align 8, !alias.scope !6, !noalias !3
  %132 = sub nuw nsw i64 -4, %114
  %133 = sub nuw nsw i64 -4, %114
  %134 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %111, i64 %132
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %112, i64 %133
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 -1
  %137 = bitcast %"class.v8::internal::compiler::Node"** %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 8, !alias.scope !3
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 -2
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %139, i64 -1
  %141 = bitcast %"class.v8::internal::compiler::Node"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !3
  %143 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %134, i64 -1
  %144 = bitcast %"class.v8::internal::compiler::Node"** %143 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %144, align 8, !alias.scope !6, !noalias !3
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %134, i64 -2
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %145, i64 -1
  %147 = bitcast %"class.v8::internal::compiler::Node"** %146 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %147, align 8, !alias.scope !6, !noalias !3
  %148 = add i64 %114, 8
  %149 = add i64 %115, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %113, !llvm.loop !8

151:                                              ; preds = %113, %96
  %152 = phi i64 [ 0, %96 ], [ %148, %113 ]
  %153 = icmp eq i64 %105, 0
  br i1 %153, label %173, label %154

154:                                              ; preds = %151
  %155 = sub i64 0, %152
  %156 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %65, i64 -1
  %157 = sub i64 0, %152
  %158 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %74, i64 -1
  %159 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %156, i64 %155
  %160 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %158, i64 %157
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %160, i64 -1
  %162 = bitcast %"class.v8::internal::compiler::Node"** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !3
  %164 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %160, i64 -2
  %165 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %164, i64 -1
  %166 = bitcast %"class.v8::internal::compiler::Node"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !3
  %168 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %159, i64 -1
  %169 = bitcast %"class.v8::internal::compiler::Node"** %168 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %169, align 8, !alias.scope !6, !noalias !3
  %170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %159, i64 -2
  %171 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %170, i64 -1
  %172 = bitcast %"class.v8::internal::compiler::Node"** %171 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %172, align 8, !alias.scope !6, !noalias !3
  br label %173

173:                                              ; preds = %151, %154
  %174 = icmp eq i64 %81, %97
  br i1 %174, label %245, label %175

175:                                              ; preds = %173, %83, %76
  %176 = phi %"class.v8::internal::compiler::Node"** [ %65, %83 ], [ %65, %76 ], [ %99, %173 ]
  %177 = phi %"class.v8::internal::compiler::Node"** [ %74, %83 ], [ %74, %76 ], [ %101, %173 ]
  %178 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %177, i64 -1
  %179 = ptrtoint %"class.v8::internal::compiler::Node"** %178 to i64
  %180 = sub i64 %179, %73
  %181 = lshr i64 %180, 3
  %182 = add nuw nsw i64 %181, 1
  %183 = and i64 %182, 7
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %196, label %185

185:                                              ; preds = %175, %185
  %186 = phi %"class.v8::internal::compiler::Node"** [ %189, %185 ], [ %176, %175 ]
  %187 = phi %"class.v8::internal::compiler::Node"** [ %190, %185 ], [ %177, %175 ]
  %188 = phi i64 [ %194, %185 ], [ %183, %175 ]
  %189 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %186, i64 -1
  %190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %187, i64 -1
  %191 = bitcast %"class.v8::internal::compiler::Node"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.v8::internal::compiler::Node"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = add i64 %188, -1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %185, !llvm.loop !10

196:                                              ; preds = %185, %175
  %197 = phi %"class.v8::internal::compiler::Node"** [ undef, %175 ], [ %189, %185 ]
  %198 = phi %"class.v8::internal::compiler::Node"** [ %176, %175 ], [ %189, %185 ]
  %199 = phi %"class.v8::internal::compiler::Node"** [ %177, %175 ], [ %190, %185 ]
  %200 = icmp ult i64 %180, 56
  br i1 %200, label %245, label %201

201:                                              ; preds = %196, %201
  %202 = phi %"class.v8::internal::compiler::Node"** [ %239, %201 ], [ %198, %196 ]
  %203 = phi %"class.v8::internal::compiler::Node"** [ %240, %201 ], [ %199, %196 ]
  %204 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -1
  %205 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -1
  %206 = bitcast %"class.v8::internal::compiler::Node"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.v8::internal::compiler::Node"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -2
  %210 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -2
  %211 = bitcast %"class.v8::internal::compiler::Node"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.v8::internal::compiler::Node"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -3
  %215 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -3
  %216 = bitcast %"class.v8::internal::compiler::Node"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.v8::internal::compiler::Node"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -4
  %220 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -4
  %221 = bitcast %"class.v8::internal::compiler::Node"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.v8::internal::compiler::Node"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -5
  %225 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -5
  %226 = bitcast %"class.v8::internal::compiler::Node"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.v8::internal::compiler::Node"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -6
  %230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -6
  %231 = bitcast %"class.v8::internal::compiler::Node"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.v8::internal::compiler::Node"** %229 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -7
  %235 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -7
  %236 = bitcast %"class.v8::internal::compiler::Node"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.v8::internal::compiler::Node"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %202, i64 -8
  %240 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %203, i64 -8
  %241 = bitcast %"class.v8::internal::compiler::Node"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.v8::internal::compiler::Node"** %239 to i64*
  store i64 %242, i64* %243, align 8
  %244 = icmp eq %"class.v8::internal::compiler::Node"** %240, %72
  br i1 %244, label %245, label %201, !llvm.loop !12

245:                                              ; preds = %196, %201, %173, %61
  %246 = phi %"class.v8::internal::compiler::Node"** [ %65, %61 ], [ %99, %173 ], [ %197, %196 ], [ %239, %201 ]
  %247 = ptrtoint %"class.v8::internal::compiler::Node"** %246 to i64
  store i64 %247, i64* %23, align 8
  store i64 %70, i64* %22, align 8
  store i64 %67, i64* %32, align 8
  br label %248

248:                                              ; preds = %245, %15, %2
  %249 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 5
  %250 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %249, align 8
  %251 = icmp eq %"class.v8::internal::compiler::Node"* %250, null
  %252 = ptrtoint %"class.v8::internal::compiler::Node"* %250 to i64
  br i1 %251, label %493, label %253

253:                                              ; preds = %248
  %254 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %255 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %254, align 8
  %256 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %257 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %256, align 8
  %258 = icmp eq %"class.v8::internal::compiler::Node"** %255, %257
  %259 = ptrtoint %"class.v8::internal::compiler::Node"** %257 to i64
  br i1 %258, label %265, label %260

260:                                              ; preds = %253
  %261 = bitcast %"class.v8::internal::compiler::Node"** %255 to i64*
  store i64 %252, i64* %261, align 8
  %262 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %255, i64 1
  %263 = ptrtoint %"class.v8::internal::compiler::Node"** %262 to i64
  %264 = bitcast %"class.v8::internal::compiler::Node"*** %254 to i64*
  store i64 %263, i64* %264, align 8
  br label %493

265:                                              ; preds = %253
  %266 = ptrtoint %"class.v8::internal::compiler::Node"** %255 to i64
  %267 = bitcast %"class.v8::internal::compiler::Node"*** %254 to i64*
  %268 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = sub i64 %266, %269
  %271 = ashr exact i64 %270, 3
  %272 = add nsw i64 %271, 1
  %273 = icmp ugt i64 %272, 268435455
  br i1 %273, label %274, label %276

274:                                              ; preds = %265
  %275 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #6
  unreachable

276:                                              ; preds = %265
  %277 = bitcast %"class.v8::internal::compiler::Node"*** %256 to i64*
  %278 = sub i64 %259, %269
  %279 = ashr exact i64 %278, 3
  %280 = icmp ult i64 %279, 134217727
  br i1 %280, label %281, label %286

281:                                              ; preds = %276
  %282 = ashr exact i64 %278, 2
  %283 = icmp ult i64 %282, %272
  %284 = select i1 %283, i64 %272, i64 %282
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %306, label %286

286:                                              ; preds = %281, %276
  %287 = phi i64 [ %284, %281 ], [ 268435455, %276 ]
  %288 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %289 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %288, align 8
  %290 = shl i64 %287, 3
  %291 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %289, i64 0, i32 2
  %292 = load i64, i64* %291, align 8
  %293 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %289, i64 0, i32 3
  %294 = load i64, i64* %293, align 8
  %295 = sub i64 %294, %292
  %296 = icmp ugt i64 %290, %295
  br i1 %296, label %297, label %299, !prof !2

297:                                              ; preds = %286
  %298 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %289, i64 %290) #5
  br label %301

299:                                              ; preds = %286
  %300 = add i64 %292, %290
  store i64 %300, i64* %291, align 8
  br label %301

301:                                              ; preds = %299, %297
  %302 = phi i64 [ %298, %297 ], [ %292, %299 ]
  %303 = inttoptr i64 %302 to %"class.v8::internal::compiler::Node"**
  %304 = bitcast %"class.v8::internal::compiler::Node"** %249 to i64*
  %305 = load i64, i64* %304, align 8
  br label %306

306:                                              ; preds = %281, %301
  %307 = phi i64 [ %305, %301 ], [ %252, %281 ]
  %308 = phi i64 [ %287, %301 ], [ 0, %281 ]
  %309 = phi %"class.v8::internal::compiler::Node"** [ %303, %301 ], [ null, %281 ]
  %310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %309, i64 %271
  %311 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %309, i64 %308
  %312 = ptrtoint %"class.v8::internal::compiler::Node"** %311 to i64
  %313 = bitcast %"class.v8::internal::compiler::Node"** %310 to i64*
  store i64 %307, i64* %313, align 8
  %314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %310, i64 1
  %315 = ptrtoint %"class.v8::internal::compiler::Node"** %314 to i64
  %316 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %317 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %316, align 8
  %318 = ptrtoint %"class.v8::internal::compiler::Node"** %317 to i64
  %319 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %254, align 8
  %320 = icmp eq %"class.v8::internal::compiler::Node"** %319, %317
  br i1 %320, label %490, label %321

321:                                              ; preds = %306
  %322 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  %323 = ptrtoint %"class.v8::internal::compiler::Node"** %322 to i64
  %324 = sub i64 %323, %318
  %325 = lshr i64 %324, 3
  %326 = add nuw nsw i64 %325, 1
  %327 = icmp ult i64 %326, 4
  br i1 %327, label %420, label %328

328:                                              ; preds = %321
  %329 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  %330 = ptrtoint %"class.v8::internal::compiler::Node"** %329 to i64
  %331 = sub i64 %330, %318
  %332 = lshr i64 %331, 3
  %333 = xor i64 %332, -1
  %334 = add nsw i64 %271, %333
  %335 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %309, i64 %334
  %336 = xor i64 %332, -1
  %337 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 %336
  %338 = icmp ult %"class.v8::internal::compiler::Node"** %335, %319
  %339 = icmp ult %"class.v8::internal::compiler::Node"** %337, %310
  %340 = and i1 %338, %339
  br i1 %340, label %420, label %341

341:                                              ; preds = %328
  %342 = and i64 %326, 4611686018427387900
  %343 = sub nsw i64 0, %342
  %344 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %310, i64 %343
  %345 = sub nsw i64 0, %342
  %346 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 %345
  %347 = add nsw i64 %342, -4
  %348 = lshr exact i64 %347, 2
  %349 = add nuw nsw i64 %348, 1
  %350 = and i64 %349, 1
  %351 = icmp eq i64 %347, 0
  br i1 %351, label %396, label %352

352:                                              ; preds = %341
  %353 = sub nuw nsw i64 %349, %350
  %354 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %310, i64 -1
  %355 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  %356 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %310, i64 -1
  %357 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  br label %358

358:                                              ; preds = %358, %352
  %359 = phi i64 [ 0, %352 ], [ %393, %358 ]
  %360 = phi i64 [ %353, %352 ], [ %394, %358 ]
  %361 = sub i64 0, %359
  %362 = sub i64 0, %359
  %363 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %354, i64 %361
  %364 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %355, i64 %362
  %365 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %364, i64 -1
  %366 = bitcast %"class.v8::internal::compiler::Node"** %365 to <2 x i64>*
  %367 = load <2 x i64>, <2 x i64>* %366, align 8, !alias.scope !13
  %368 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %364, i64 -2
  %369 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %368, i64 -1
  %370 = bitcast %"class.v8::internal::compiler::Node"** %369 to <2 x i64>*
  %371 = load <2 x i64>, <2 x i64>* %370, align 8, !alias.scope !13
  %372 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %363, i64 -1
  %373 = bitcast %"class.v8::internal::compiler::Node"** %372 to <2 x i64>*
  store <2 x i64> %367, <2 x i64>* %373, align 8, !alias.scope !16, !noalias !13
  %374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %363, i64 -2
  %375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %374, i64 -1
  %376 = bitcast %"class.v8::internal::compiler::Node"** %375 to <2 x i64>*
  store <2 x i64> %371, <2 x i64>* %376, align 8, !alias.scope !16, !noalias !13
  %377 = sub nuw nsw i64 -4, %359
  %378 = sub nuw nsw i64 -4, %359
  %379 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %356, i64 %377
  %380 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %357, i64 %378
  %381 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %380, i64 -1
  %382 = bitcast %"class.v8::internal::compiler::Node"** %381 to <2 x i64>*
  %383 = load <2 x i64>, <2 x i64>* %382, align 8, !alias.scope !13
  %384 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %380, i64 -2
  %385 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %384, i64 -1
  %386 = bitcast %"class.v8::internal::compiler::Node"** %385 to <2 x i64>*
  %387 = load <2 x i64>, <2 x i64>* %386, align 8, !alias.scope !13
  %388 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %379, i64 -1
  %389 = bitcast %"class.v8::internal::compiler::Node"** %388 to <2 x i64>*
  store <2 x i64> %383, <2 x i64>* %389, align 8, !alias.scope !16, !noalias !13
  %390 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %379, i64 -2
  %391 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %390, i64 -1
  %392 = bitcast %"class.v8::internal::compiler::Node"** %391 to <2 x i64>*
  store <2 x i64> %387, <2 x i64>* %392, align 8, !alias.scope !16, !noalias !13
  %393 = add i64 %359, 8
  %394 = add i64 %360, -2
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %358, !llvm.loop !18

396:                                              ; preds = %358, %341
  %397 = phi i64 [ 0, %341 ], [ %393, %358 ]
  %398 = icmp eq i64 %350, 0
  br i1 %398, label %418, label %399

399:                                              ; preds = %396
  %400 = sub i64 0, %397
  %401 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %310, i64 -1
  %402 = sub i64 0, %397
  %403 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  %404 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %401, i64 %400
  %405 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %403, i64 %402
  %406 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %405, i64 -1
  %407 = bitcast %"class.v8::internal::compiler::Node"** %406 to <2 x i64>*
  %408 = load <2 x i64>, <2 x i64>* %407, align 8, !alias.scope !13
  %409 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %405, i64 -2
  %410 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %409, i64 -1
  %411 = bitcast %"class.v8::internal::compiler::Node"** %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 8, !alias.scope !13
  %413 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %404, i64 -1
  %414 = bitcast %"class.v8::internal::compiler::Node"** %413 to <2 x i64>*
  store <2 x i64> %408, <2 x i64>* %414, align 8, !alias.scope !16, !noalias !13
  %415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %404, i64 -2
  %416 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %415, i64 -1
  %417 = bitcast %"class.v8::internal::compiler::Node"** %416 to <2 x i64>*
  store <2 x i64> %412, <2 x i64>* %417, align 8, !alias.scope !16, !noalias !13
  br label %418

418:                                              ; preds = %396, %399
  %419 = icmp eq i64 %326, %342
  br i1 %419, label %490, label %420

420:                                              ; preds = %418, %328, %321
  %421 = phi %"class.v8::internal::compiler::Node"** [ %310, %328 ], [ %310, %321 ], [ %344, %418 ]
  %422 = phi %"class.v8::internal::compiler::Node"** [ %319, %328 ], [ %319, %321 ], [ %346, %418 ]
  %423 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %422, i64 -1
  %424 = ptrtoint %"class.v8::internal::compiler::Node"** %423 to i64
  %425 = sub i64 %424, %318
  %426 = lshr i64 %425, 3
  %427 = add nuw nsw i64 %426, 1
  %428 = and i64 %427, 7
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %441, label %430

430:                                              ; preds = %420, %430
  %431 = phi %"class.v8::internal::compiler::Node"** [ %434, %430 ], [ %421, %420 ]
  %432 = phi %"class.v8::internal::compiler::Node"** [ %435, %430 ], [ %422, %420 ]
  %433 = phi i64 [ %439, %430 ], [ %428, %420 ]
  %434 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %431, i64 -1
  %435 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %432, i64 -1
  %436 = bitcast %"class.v8::internal::compiler::Node"** %435 to i64*
  %437 = load i64, i64* %436, align 8
  %438 = bitcast %"class.v8::internal::compiler::Node"** %434 to i64*
  store i64 %437, i64* %438, align 8
  %439 = add i64 %433, -1
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %441, label %430, !llvm.loop !19

441:                                              ; preds = %430, %420
  %442 = phi %"class.v8::internal::compiler::Node"** [ undef, %420 ], [ %434, %430 ]
  %443 = phi %"class.v8::internal::compiler::Node"** [ %421, %420 ], [ %434, %430 ]
  %444 = phi %"class.v8::internal::compiler::Node"** [ %422, %420 ], [ %435, %430 ]
  %445 = icmp ult i64 %425, 56
  br i1 %445, label %490, label %446

446:                                              ; preds = %441, %446
  %447 = phi %"class.v8::internal::compiler::Node"** [ %484, %446 ], [ %443, %441 ]
  %448 = phi %"class.v8::internal::compiler::Node"** [ %485, %446 ], [ %444, %441 ]
  %449 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -1
  %450 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -1
  %451 = bitcast %"class.v8::internal::compiler::Node"** %450 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = bitcast %"class.v8::internal::compiler::Node"** %449 to i64*
  store i64 %452, i64* %453, align 8
  %454 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -2
  %455 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -2
  %456 = bitcast %"class.v8::internal::compiler::Node"** %455 to i64*
  %457 = load i64, i64* %456, align 8
  %458 = bitcast %"class.v8::internal::compiler::Node"** %454 to i64*
  store i64 %457, i64* %458, align 8
  %459 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -3
  %460 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -3
  %461 = bitcast %"class.v8::internal::compiler::Node"** %460 to i64*
  %462 = load i64, i64* %461, align 8
  %463 = bitcast %"class.v8::internal::compiler::Node"** %459 to i64*
  store i64 %462, i64* %463, align 8
  %464 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -4
  %465 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -4
  %466 = bitcast %"class.v8::internal::compiler::Node"** %465 to i64*
  %467 = load i64, i64* %466, align 8
  %468 = bitcast %"class.v8::internal::compiler::Node"** %464 to i64*
  store i64 %467, i64* %468, align 8
  %469 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -5
  %470 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -5
  %471 = bitcast %"class.v8::internal::compiler::Node"** %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = bitcast %"class.v8::internal::compiler::Node"** %469 to i64*
  store i64 %472, i64* %473, align 8
  %474 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -6
  %475 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -6
  %476 = bitcast %"class.v8::internal::compiler::Node"** %475 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = bitcast %"class.v8::internal::compiler::Node"** %474 to i64*
  store i64 %477, i64* %478, align 8
  %479 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -7
  %480 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -7
  %481 = bitcast %"class.v8::internal::compiler::Node"** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"class.v8::internal::compiler::Node"** %479 to i64*
  store i64 %482, i64* %483, align 8
  %484 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %447, i64 -8
  %485 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -8
  %486 = bitcast %"class.v8::internal::compiler::Node"** %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %"class.v8::internal::compiler::Node"** %484 to i64*
  store i64 %487, i64* %488, align 8
  %489 = icmp eq %"class.v8::internal::compiler::Node"** %485, %317
  br i1 %489, label %490, label %446, !llvm.loop !20

490:                                              ; preds = %441, %446, %418, %306
  %491 = phi %"class.v8::internal::compiler::Node"** [ %310, %306 ], [ %344, %418 ], [ %442, %441 ], [ %484, %446 ]
  %492 = ptrtoint %"class.v8::internal::compiler::Node"** %491 to i64
  store i64 %492, i64* %268, align 8
  store i64 %315, i64* %267, align 8
  store i64 %312, i64* %277, align 8
  br label %493

493:                                              ; preds = %490, %260, %248
  %494 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 6
  %495 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %494, align 8
  %496 = icmp eq %"class.v8::internal::compiler::Node"* %495, null
  %497 = ptrtoint %"class.v8::internal::compiler::Node"* %495 to i64
  br i1 %496, label %738, label %498

498:                                              ; preds = %493
  %499 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %500 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %499, align 8
  %501 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %502 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %501, align 8
  %503 = icmp eq %"class.v8::internal::compiler::Node"** %500, %502
  %504 = ptrtoint %"class.v8::internal::compiler::Node"** %502 to i64
  br i1 %503, label %510, label %505

505:                                              ; preds = %498
  %506 = bitcast %"class.v8::internal::compiler::Node"** %500 to i64*
  store i64 %497, i64* %506, align 8
  %507 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %500, i64 1
  %508 = ptrtoint %"class.v8::internal::compiler::Node"** %507 to i64
  %509 = bitcast %"class.v8::internal::compiler::Node"*** %499 to i64*
  store i64 %508, i64* %509, align 8
  br label %738

510:                                              ; preds = %498
  %511 = ptrtoint %"class.v8::internal::compiler::Node"** %500 to i64
  %512 = bitcast %"class.v8::internal::compiler::Node"*** %499 to i64*
  %513 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %514 = load i64, i64* %513, align 8
  %515 = sub i64 %511, %514
  %516 = ashr exact i64 %515, 3
  %517 = add nsw i64 %516, 1
  %518 = icmp ugt i64 %517, 268435455
  br i1 %518, label %519, label %521

519:                                              ; preds = %510
  %520 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %520) #6
  unreachable

521:                                              ; preds = %510
  %522 = bitcast %"class.v8::internal::compiler::Node"*** %501 to i64*
  %523 = sub i64 %504, %514
  %524 = ashr exact i64 %523, 3
  %525 = icmp ult i64 %524, 134217727
  br i1 %525, label %526, label %531

526:                                              ; preds = %521
  %527 = ashr exact i64 %523, 2
  %528 = icmp ult i64 %527, %517
  %529 = select i1 %528, i64 %517, i64 %527
  %530 = icmp eq i64 %529, 0
  br i1 %530, label %551, label %531

531:                                              ; preds = %526, %521
  %532 = phi i64 [ %529, %526 ], [ 268435455, %521 ]
  %533 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %534 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %533, align 8
  %535 = shl i64 %532, 3
  %536 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %534, i64 0, i32 2
  %537 = load i64, i64* %536, align 8
  %538 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %534, i64 0, i32 3
  %539 = load i64, i64* %538, align 8
  %540 = sub i64 %539, %537
  %541 = icmp ugt i64 %535, %540
  br i1 %541, label %542, label %544, !prof !2

542:                                              ; preds = %531
  %543 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %534, i64 %535) #5
  br label %546

544:                                              ; preds = %531
  %545 = add i64 %537, %535
  store i64 %545, i64* %536, align 8
  br label %546

546:                                              ; preds = %544, %542
  %547 = phi i64 [ %543, %542 ], [ %537, %544 ]
  %548 = inttoptr i64 %547 to %"class.v8::internal::compiler::Node"**
  %549 = bitcast %"class.v8::internal::compiler::Node"** %494 to i64*
  %550 = load i64, i64* %549, align 8
  br label %551

551:                                              ; preds = %526, %546
  %552 = phi i64 [ %550, %546 ], [ %497, %526 ]
  %553 = phi i64 [ %532, %546 ], [ 0, %526 ]
  %554 = phi %"class.v8::internal::compiler::Node"** [ %548, %546 ], [ null, %526 ]
  %555 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %554, i64 %516
  %556 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %554, i64 %553
  %557 = ptrtoint %"class.v8::internal::compiler::Node"** %556 to i64
  %558 = bitcast %"class.v8::internal::compiler::Node"** %555 to i64*
  store i64 %552, i64* %558, align 8
  %559 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %555, i64 1
  %560 = ptrtoint %"class.v8::internal::compiler::Node"** %559 to i64
  %561 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %562 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %561, align 8
  %563 = ptrtoint %"class.v8::internal::compiler::Node"** %562 to i64
  %564 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %499, align 8
  %565 = icmp eq %"class.v8::internal::compiler::Node"** %564, %562
  br i1 %565, label %735, label %566

566:                                              ; preds = %551
  %567 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 -1
  %568 = ptrtoint %"class.v8::internal::compiler::Node"** %567 to i64
  %569 = sub i64 %568, %563
  %570 = lshr i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = icmp ult i64 %571, 4
  br i1 %572, label %665, label %573

573:                                              ; preds = %566
  %574 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 -1
  %575 = ptrtoint %"class.v8::internal::compiler::Node"** %574 to i64
  %576 = sub i64 %575, %563
  %577 = lshr i64 %576, 3
  %578 = xor i64 %577, -1
  %579 = add nsw i64 %516, %578
  %580 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %554, i64 %579
  %581 = xor i64 %577, -1
  %582 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 %581
  %583 = icmp ult %"class.v8::internal::compiler::Node"** %580, %564
  %584 = icmp ult %"class.v8::internal::compiler::Node"** %582, %555
  %585 = and i1 %583, %584
  br i1 %585, label %665, label %586

586:                                              ; preds = %573
  %587 = and i64 %571, 4611686018427387900
  %588 = sub nsw i64 0, %587
  %589 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %555, i64 %588
  %590 = sub nsw i64 0, %587
  %591 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 %590
  %592 = add nsw i64 %587, -4
  %593 = lshr exact i64 %592, 2
  %594 = add nuw nsw i64 %593, 1
  %595 = and i64 %594, 1
  %596 = icmp eq i64 %592, 0
  br i1 %596, label %641, label %597

597:                                              ; preds = %586
  %598 = sub nuw nsw i64 %594, %595
  %599 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %555, i64 -1
  %600 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 -1
  %601 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %555, i64 -1
  %602 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 -1
  br label %603

603:                                              ; preds = %603, %597
  %604 = phi i64 [ 0, %597 ], [ %638, %603 ]
  %605 = phi i64 [ %598, %597 ], [ %639, %603 ]
  %606 = sub i64 0, %604
  %607 = sub i64 0, %604
  %608 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %599, i64 %606
  %609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %600, i64 %607
  %610 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %609, i64 -1
  %611 = bitcast %"class.v8::internal::compiler::Node"** %610 to <2 x i64>*
  %612 = load <2 x i64>, <2 x i64>* %611, align 8, !alias.scope !21
  %613 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %609, i64 -2
  %614 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %613, i64 -1
  %615 = bitcast %"class.v8::internal::compiler::Node"** %614 to <2 x i64>*
  %616 = load <2 x i64>, <2 x i64>* %615, align 8, !alias.scope !21
  %617 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %608, i64 -1
  %618 = bitcast %"class.v8::internal::compiler::Node"** %617 to <2 x i64>*
  store <2 x i64> %612, <2 x i64>* %618, align 8, !alias.scope !24, !noalias !21
  %619 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %608, i64 -2
  %620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %619, i64 -1
  %621 = bitcast %"class.v8::internal::compiler::Node"** %620 to <2 x i64>*
  store <2 x i64> %616, <2 x i64>* %621, align 8, !alias.scope !24, !noalias !21
  %622 = sub nuw nsw i64 -4, %604
  %623 = sub nuw nsw i64 -4, %604
  %624 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %601, i64 %622
  %625 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %602, i64 %623
  %626 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %625, i64 -1
  %627 = bitcast %"class.v8::internal::compiler::Node"** %626 to <2 x i64>*
  %628 = load <2 x i64>, <2 x i64>* %627, align 8, !alias.scope !21
  %629 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %625, i64 -2
  %630 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %629, i64 -1
  %631 = bitcast %"class.v8::internal::compiler::Node"** %630 to <2 x i64>*
  %632 = load <2 x i64>, <2 x i64>* %631, align 8, !alias.scope !21
  %633 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %624, i64 -1
  %634 = bitcast %"class.v8::internal::compiler::Node"** %633 to <2 x i64>*
  store <2 x i64> %628, <2 x i64>* %634, align 8, !alias.scope !24, !noalias !21
  %635 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %624, i64 -2
  %636 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %635, i64 -1
  %637 = bitcast %"class.v8::internal::compiler::Node"** %636 to <2 x i64>*
  store <2 x i64> %632, <2 x i64>* %637, align 8, !alias.scope !24, !noalias !21
  %638 = add i64 %604, 8
  %639 = add i64 %605, -2
  %640 = icmp eq i64 %639, 0
  br i1 %640, label %641, label %603, !llvm.loop !26

641:                                              ; preds = %603, %586
  %642 = phi i64 [ 0, %586 ], [ %638, %603 ]
  %643 = icmp eq i64 %595, 0
  br i1 %643, label %663, label %644

644:                                              ; preds = %641
  %645 = sub i64 0, %642
  %646 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %555, i64 -1
  %647 = sub i64 0, %642
  %648 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 -1
  %649 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %646, i64 %645
  %650 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %648, i64 %647
  %651 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %650, i64 -1
  %652 = bitcast %"class.v8::internal::compiler::Node"** %651 to <2 x i64>*
  %653 = load <2 x i64>, <2 x i64>* %652, align 8, !alias.scope !21
  %654 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %650, i64 -2
  %655 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %654, i64 -1
  %656 = bitcast %"class.v8::internal::compiler::Node"** %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 8, !alias.scope !21
  %658 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 -1
  %659 = bitcast %"class.v8::internal::compiler::Node"** %658 to <2 x i64>*
  store <2 x i64> %653, <2 x i64>* %659, align 8, !alias.scope !24, !noalias !21
  %660 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %649, i64 -2
  %661 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %660, i64 -1
  %662 = bitcast %"class.v8::internal::compiler::Node"** %661 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %662, align 8, !alias.scope !24, !noalias !21
  br label %663

663:                                              ; preds = %641, %644
  %664 = icmp eq i64 %571, %587
  br i1 %664, label %735, label %665

665:                                              ; preds = %663, %573, %566
  %666 = phi %"class.v8::internal::compiler::Node"** [ %555, %573 ], [ %555, %566 ], [ %589, %663 ]
  %667 = phi %"class.v8::internal::compiler::Node"** [ %564, %573 ], [ %564, %566 ], [ %591, %663 ]
  %668 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %667, i64 -1
  %669 = ptrtoint %"class.v8::internal::compiler::Node"** %668 to i64
  %670 = sub i64 %669, %563
  %671 = lshr i64 %670, 3
  %672 = add nuw nsw i64 %671, 1
  %673 = and i64 %672, 7
  %674 = icmp eq i64 %673, 0
  br i1 %674, label %686, label %675

675:                                              ; preds = %665, %675
  %676 = phi %"class.v8::internal::compiler::Node"** [ %679, %675 ], [ %666, %665 ]
  %677 = phi %"class.v8::internal::compiler::Node"** [ %680, %675 ], [ %667, %665 ]
  %678 = phi i64 [ %684, %675 ], [ %673, %665 ]
  %679 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %676, i64 -1
  %680 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %677, i64 -1
  %681 = bitcast %"class.v8::internal::compiler::Node"** %680 to i64*
  %682 = load i64, i64* %681, align 8
  %683 = bitcast %"class.v8::internal::compiler::Node"** %679 to i64*
  store i64 %682, i64* %683, align 8
  %684 = add i64 %678, -1
  %685 = icmp eq i64 %684, 0
  br i1 %685, label %686, label %675, !llvm.loop !27

686:                                              ; preds = %675, %665
  %687 = phi %"class.v8::internal::compiler::Node"** [ undef, %665 ], [ %679, %675 ]
  %688 = phi %"class.v8::internal::compiler::Node"** [ %666, %665 ], [ %679, %675 ]
  %689 = phi %"class.v8::internal::compiler::Node"** [ %667, %665 ], [ %680, %675 ]
  %690 = icmp ult i64 %670, 56
  br i1 %690, label %735, label %691

691:                                              ; preds = %686, %691
  %692 = phi %"class.v8::internal::compiler::Node"** [ %729, %691 ], [ %688, %686 ]
  %693 = phi %"class.v8::internal::compiler::Node"** [ %730, %691 ], [ %689, %686 ]
  %694 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -1
  %695 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -1
  %696 = bitcast %"class.v8::internal::compiler::Node"** %695 to i64*
  %697 = load i64, i64* %696, align 8
  %698 = bitcast %"class.v8::internal::compiler::Node"** %694 to i64*
  store i64 %697, i64* %698, align 8
  %699 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -2
  %700 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -2
  %701 = bitcast %"class.v8::internal::compiler::Node"** %700 to i64*
  %702 = load i64, i64* %701, align 8
  %703 = bitcast %"class.v8::internal::compiler::Node"** %699 to i64*
  store i64 %702, i64* %703, align 8
  %704 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -3
  %705 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -3
  %706 = bitcast %"class.v8::internal::compiler::Node"** %705 to i64*
  %707 = load i64, i64* %706, align 8
  %708 = bitcast %"class.v8::internal::compiler::Node"** %704 to i64*
  store i64 %707, i64* %708, align 8
  %709 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -4
  %710 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -4
  %711 = bitcast %"class.v8::internal::compiler::Node"** %710 to i64*
  %712 = load i64, i64* %711, align 8
  %713 = bitcast %"class.v8::internal::compiler::Node"** %709 to i64*
  store i64 %712, i64* %713, align 8
  %714 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -5
  %715 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -5
  %716 = bitcast %"class.v8::internal::compiler::Node"** %715 to i64*
  %717 = load i64, i64* %716, align 8
  %718 = bitcast %"class.v8::internal::compiler::Node"** %714 to i64*
  store i64 %717, i64* %718, align 8
  %719 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -6
  %720 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -6
  %721 = bitcast %"class.v8::internal::compiler::Node"** %720 to i64*
  %722 = load i64, i64* %721, align 8
  %723 = bitcast %"class.v8::internal::compiler::Node"** %719 to i64*
  store i64 %722, i64* %723, align 8
  %724 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -7
  %725 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -7
  %726 = bitcast %"class.v8::internal::compiler::Node"** %725 to i64*
  %727 = load i64, i64* %726, align 8
  %728 = bitcast %"class.v8::internal::compiler::Node"** %724 to i64*
  store i64 %727, i64* %728, align 8
  %729 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %692, i64 -8
  %730 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %693, i64 -8
  %731 = bitcast %"class.v8::internal::compiler::Node"** %730 to i64*
  %732 = load i64, i64* %731, align 8
  %733 = bitcast %"class.v8::internal::compiler::Node"** %729 to i64*
  store i64 %732, i64* %733, align 8
  %734 = icmp eq %"class.v8::internal::compiler::Node"** %730, %562
  br i1 %734, label %735, label %691, !llvm.loop !28

735:                                              ; preds = %686, %691, %663, %551
  %736 = phi %"class.v8::internal::compiler::Node"** [ %555, %551 ], [ %589, %663 ], [ %687, %686 ], [ %729, %691 ]
  %737 = ptrtoint %"class.v8::internal::compiler::Node"** %736 to i64
  store i64 %737, i64* %513, align 8
  store i64 %560, i64* %512, align 8
  store i64 %557, i64* %522, align 8
  br label %738

738:                                              ; preds = %735, %505, %493
  %739 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 7
  %740 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %739, align 8
  %741 = icmp eq %"class.v8::internal::compiler::Node"* %740, null
  %742 = ptrtoint %"class.v8::internal::compiler::Node"* %740 to i64
  br i1 %741, label %983, label %743

743:                                              ; preds = %738
  %744 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %745 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %744, align 8
  %746 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %747 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %746, align 8
  %748 = icmp eq %"class.v8::internal::compiler::Node"** %745, %747
  %749 = ptrtoint %"class.v8::internal::compiler::Node"** %747 to i64
  br i1 %748, label %755, label %750

750:                                              ; preds = %743
  %751 = bitcast %"class.v8::internal::compiler::Node"** %745 to i64*
  store i64 %742, i64* %751, align 8
  %752 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %745, i64 1
  %753 = ptrtoint %"class.v8::internal::compiler::Node"** %752 to i64
  %754 = bitcast %"class.v8::internal::compiler::Node"*** %744 to i64*
  store i64 %753, i64* %754, align 8
  br label %983

755:                                              ; preds = %743
  %756 = ptrtoint %"class.v8::internal::compiler::Node"** %745 to i64
  %757 = bitcast %"class.v8::internal::compiler::Node"*** %744 to i64*
  %758 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %759 = load i64, i64* %758, align 8
  %760 = sub i64 %756, %759
  %761 = ashr exact i64 %760, 3
  %762 = add nsw i64 %761, 1
  %763 = icmp ugt i64 %762, 268435455
  br i1 %763, label %764, label %766

764:                                              ; preds = %755
  %765 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %765) #6
  unreachable

766:                                              ; preds = %755
  %767 = bitcast %"class.v8::internal::compiler::Node"*** %746 to i64*
  %768 = sub i64 %749, %759
  %769 = ashr exact i64 %768, 3
  %770 = icmp ult i64 %769, 134217727
  br i1 %770, label %771, label %776

771:                                              ; preds = %766
  %772 = ashr exact i64 %768, 2
  %773 = icmp ult i64 %772, %762
  %774 = select i1 %773, i64 %762, i64 %772
  %775 = icmp eq i64 %774, 0
  br i1 %775, label %796, label %776

776:                                              ; preds = %771, %766
  %777 = phi i64 [ %774, %771 ], [ 268435455, %766 ]
  %778 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %779 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %778, align 8
  %780 = shl i64 %777, 3
  %781 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %779, i64 0, i32 2
  %782 = load i64, i64* %781, align 8
  %783 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %779, i64 0, i32 3
  %784 = load i64, i64* %783, align 8
  %785 = sub i64 %784, %782
  %786 = icmp ugt i64 %780, %785
  br i1 %786, label %787, label %789, !prof !2

787:                                              ; preds = %776
  %788 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %779, i64 %780) #5
  br label %791

789:                                              ; preds = %776
  %790 = add i64 %782, %780
  store i64 %790, i64* %781, align 8
  br label %791

791:                                              ; preds = %789, %787
  %792 = phi i64 [ %788, %787 ], [ %782, %789 ]
  %793 = inttoptr i64 %792 to %"class.v8::internal::compiler::Node"**
  %794 = bitcast %"class.v8::internal::compiler::Node"** %739 to i64*
  %795 = load i64, i64* %794, align 8
  br label %796

796:                                              ; preds = %771, %791
  %797 = phi i64 [ %795, %791 ], [ %742, %771 ]
  %798 = phi i64 [ %777, %791 ], [ 0, %771 ]
  %799 = phi %"class.v8::internal::compiler::Node"** [ %793, %791 ], [ null, %771 ]
  %800 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %799, i64 %761
  %801 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %799, i64 %798
  %802 = ptrtoint %"class.v8::internal::compiler::Node"** %801 to i64
  %803 = bitcast %"class.v8::internal::compiler::Node"** %800 to i64*
  store i64 %797, i64* %803, align 8
  %804 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %800, i64 1
  %805 = ptrtoint %"class.v8::internal::compiler::Node"** %804 to i64
  %806 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %807 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %806, align 8
  %808 = ptrtoint %"class.v8::internal::compiler::Node"** %807 to i64
  %809 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %744, align 8
  %810 = icmp eq %"class.v8::internal::compiler::Node"** %809, %807
  br i1 %810, label %980, label %811

811:                                              ; preds = %796
  %812 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 -1
  %813 = ptrtoint %"class.v8::internal::compiler::Node"** %812 to i64
  %814 = sub i64 %813, %808
  %815 = lshr i64 %814, 3
  %816 = add nuw nsw i64 %815, 1
  %817 = icmp ult i64 %816, 4
  br i1 %817, label %910, label %818

818:                                              ; preds = %811
  %819 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 -1
  %820 = ptrtoint %"class.v8::internal::compiler::Node"** %819 to i64
  %821 = sub i64 %820, %808
  %822 = lshr i64 %821, 3
  %823 = xor i64 %822, -1
  %824 = add nsw i64 %761, %823
  %825 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %799, i64 %824
  %826 = xor i64 %822, -1
  %827 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 %826
  %828 = icmp ult %"class.v8::internal::compiler::Node"** %825, %809
  %829 = icmp ult %"class.v8::internal::compiler::Node"** %827, %800
  %830 = and i1 %828, %829
  br i1 %830, label %910, label %831

831:                                              ; preds = %818
  %832 = and i64 %816, 4611686018427387900
  %833 = sub nsw i64 0, %832
  %834 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %800, i64 %833
  %835 = sub nsw i64 0, %832
  %836 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 %835
  %837 = add nsw i64 %832, -4
  %838 = lshr exact i64 %837, 2
  %839 = add nuw nsw i64 %838, 1
  %840 = and i64 %839, 1
  %841 = icmp eq i64 %837, 0
  br i1 %841, label %886, label %842

842:                                              ; preds = %831
  %843 = sub nuw nsw i64 %839, %840
  %844 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %800, i64 -1
  %845 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 -1
  %846 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %800, i64 -1
  %847 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 -1
  br label %848

848:                                              ; preds = %848, %842
  %849 = phi i64 [ 0, %842 ], [ %883, %848 ]
  %850 = phi i64 [ %843, %842 ], [ %884, %848 ]
  %851 = sub i64 0, %849
  %852 = sub i64 0, %849
  %853 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %844, i64 %851
  %854 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %845, i64 %852
  %855 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %854, i64 -1
  %856 = bitcast %"class.v8::internal::compiler::Node"** %855 to <2 x i64>*
  %857 = load <2 x i64>, <2 x i64>* %856, align 8, !alias.scope !29
  %858 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %854, i64 -2
  %859 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %858, i64 -1
  %860 = bitcast %"class.v8::internal::compiler::Node"** %859 to <2 x i64>*
  %861 = load <2 x i64>, <2 x i64>* %860, align 8, !alias.scope !29
  %862 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %853, i64 -1
  %863 = bitcast %"class.v8::internal::compiler::Node"** %862 to <2 x i64>*
  store <2 x i64> %857, <2 x i64>* %863, align 8, !alias.scope !32, !noalias !29
  %864 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %853, i64 -2
  %865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %864, i64 -1
  %866 = bitcast %"class.v8::internal::compiler::Node"** %865 to <2 x i64>*
  store <2 x i64> %861, <2 x i64>* %866, align 8, !alias.scope !32, !noalias !29
  %867 = sub nuw nsw i64 -4, %849
  %868 = sub nuw nsw i64 -4, %849
  %869 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %846, i64 %867
  %870 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %847, i64 %868
  %871 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %870, i64 -1
  %872 = bitcast %"class.v8::internal::compiler::Node"** %871 to <2 x i64>*
  %873 = load <2 x i64>, <2 x i64>* %872, align 8, !alias.scope !29
  %874 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %870, i64 -2
  %875 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %874, i64 -1
  %876 = bitcast %"class.v8::internal::compiler::Node"** %875 to <2 x i64>*
  %877 = load <2 x i64>, <2 x i64>* %876, align 8, !alias.scope !29
  %878 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %869, i64 -1
  %879 = bitcast %"class.v8::internal::compiler::Node"** %878 to <2 x i64>*
  store <2 x i64> %873, <2 x i64>* %879, align 8, !alias.scope !32, !noalias !29
  %880 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %869, i64 -2
  %881 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %880, i64 -1
  %882 = bitcast %"class.v8::internal::compiler::Node"** %881 to <2 x i64>*
  store <2 x i64> %877, <2 x i64>* %882, align 8, !alias.scope !32, !noalias !29
  %883 = add i64 %849, 8
  %884 = add i64 %850, -2
  %885 = icmp eq i64 %884, 0
  br i1 %885, label %886, label %848, !llvm.loop !34

886:                                              ; preds = %848, %831
  %887 = phi i64 [ 0, %831 ], [ %883, %848 ]
  %888 = icmp eq i64 %840, 0
  br i1 %888, label %908, label %889

889:                                              ; preds = %886
  %890 = sub i64 0, %887
  %891 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %800, i64 -1
  %892 = sub i64 0, %887
  %893 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 -1
  %894 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %891, i64 %890
  %895 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %893, i64 %892
  %896 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %895, i64 -1
  %897 = bitcast %"class.v8::internal::compiler::Node"** %896 to <2 x i64>*
  %898 = load <2 x i64>, <2 x i64>* %897, align 8, !alias.scope !29
  %899 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %895, i64 -2
  %900 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -1
  %901 = bitcast %"class.v8::internal::compiler::Node"** %900 to <2 x i64>*
  %902 = load <2 x i64>, <2 x i64>* %901, align 8, !alias.scope !29
  %903 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %894, i64 -1
  %904 = bitcast %"class.v8::internal::compiler::Node"** %903 to <2 x i64>*
  store <2 x i64> %898, <2 x i64>* %904, align 8, !alias.scope !32, !noalias !29
  %905 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %894, i64 -2
  %906 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %905, i64 -1
  %907 = bitcast %"class.v8::internal::compiler::Node"** %906 to <2 x i64>*
  store <2 x i64> %902, <2 x i64>* %907, align 8, !alias.scope !32, !noalias !29
  br label %908

908:                                              ; preds = %886, %889
  %909 = icmp eq i64 %816, %832
  br i1 %909, label %980, label %910

910:                                              ; preds = %908, %818, %811
  %911 = phi %"class.v8::internal::compiler::Node"** [ %800, %818 ], [ %800, %811 ], [ %834, %908 ]
  %912 = phi %"class.v8::internal::compiler::Node"** [ %809, %818 ], [ %809, %811 ], [ %836, %908 ]
  %913 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %912, i64 -1
  %914 = ptrtoint %"class.v8::internal::compiler::Node"** %913 to i64
  %915 = sub i64 %914, %808
  %916 = lshr i64 %915, 3
  %917 = add nuw nsw i64 %916, 1
  %918 = and i64 %917, 7
  %919 = icmp eq i64 %918, 0
  br i1 %919, label %931, label %920

920:                                              ; preds = %910, %920
  %921 = phi %"class.v8::internal::compiler::Node"** [ %924, %920 ], [ %911, %910 ]
  %922 = phi %"class.v8::internal::compiler::Node"** [ %925, %920 ], [ %912, %910 ]
  %923 = phi i64 [ %929, %920 ], [ %918, %910 ]
  %924 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %921, i64 -1
  %925 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %922, i64 -1
  %926 = bitcast %"class.v8::internal::compiler::Node"** %925 to i64*
  %927 = load i64, i64* %926, align 8
  %928 = bitcast %"class.v8::internal::compiler::Node"** %924 to i64*
  store i64 %927, i64* %928, align 8
  %929 = add i64 %923, -1
  %930 = icmp eq i64 %929, 0
  br i1 %930, label %931, label %920, !llvm.loop !35

931:                                              ; preds = %920, %910
  %932 = phi %"class.v8::internal::compiler::Node"** [ undef, %910 ], [ %924, %920 ]
  %933 = phi %"class.v8::internal::compiler::Node"** [ %911, %910 ], [ %924, %920 ]
  %934 = phi %"class.v8::internal::compiler::Node"** [ %912, %910 ], [ %925, %920 ]
  %935 = icmp ult i64 %915, 56
  br i1 %935, label %980, label %936

936:                                              ; preds = %931, %936
  %937 = phi %"class.v8::internal::compiler::Node"** [ %974, %936 ], [ %933, %931 ]
  %938 = phi %"class.v8::internal::compiler::Node"** [ %975, %936 ], [ %934, %931 ]
  %939 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -1
  %940 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -1
  %941 = bitcast %"class.v8::internal::compiler::Node"** %940 to i64*
  %942 = load i64, i64* %941, align 8
  %943 = bitcast %"class.v8::internal::compiler::Node"** %939 to i64*
  store i64 %942, i64* %943, align 8
  %944 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -2
  %945 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -2
  %946 = bitcast %"class.v8::internal::compiler::Node"** %945 to i64*
  %947 = load i64, i64* %946, align 8
  %948 = bitcast %"class.v8::internal::compiler::Node"** %944 to i64*
  store i64 %947, i64* %948, align 8
  %949 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -3
  %950 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -3
  %951 = bitcast %"class.v8::internal::compiler::Node"** %950 to i64*
  %952 = load i64, i64* %951, align 8
  %953 = bitcast %"class.v8::internal::compiler::Node"** %949 to i64*
  store i64 %952, i64* %953, align 8
  %954 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -4
  %955 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -4
  %956 = bitcast %"class.v8::internal::compiler::Node"** %955 to i64*
  %957 = load i64, i64* %956, align 8
  %958 = bitcast %"class.v8::internal::compiler::Node"** %954 to i64*
  store i64 %957, i64* %958, align 8
  %959 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -5
  %960 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -5
  %961 = bitcast %"class.v8::internal::compiler::Node"** %960 to i64*
  %962 = load i64, i64* %961, align 8
  %963 = bitcast %"class.v8::internal::compiler::Node"** %959 to i64*
  store i64 %962, i64* %963, align 8
  %964 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -6
  %965 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -6
  %966 = bitcast %"class.v8::internal::compiler::Node"** %965 to i64*
  %967 = load i64, i64* %966, align 8
  %968 = bitcast %"class.v8::internal::compiler::Node"** %964 to i64*
  store i64 %967, i64* %968, align 8
  %969 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -7
  %970 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -7
  %971 = bitcast %"class.v8::internal::compiler::Node"** %970 to i64*
  %972 = load i64, i64* %971, align 8
  %973 = bitcast %"class.v8::internal::compiler::Node"** %969 to i64*
  store i64 %972, i64* %973, align 8
  %974 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %937, i64 -8
  %975 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %938, i64 -8
  %976 = bitcast %"class.v8::internal::compiler::Node"** %975 to i64*
  %977 = load i64, i64* %976, align 8
  %978 = bitcast %"class.v8::internal::compiler::Node"** %974 to i64*
  store i64 %977, i64* %978, align 8
  %979 = icmp eq %"class.v8::internal::compiler::Node"** %975, %807
  br i1 %979, label %980, label %936, !llvm.loop !36

980:                                              ; preds = %931, %936, %908, %796
  %981 = phi %"class.v8::internal::compiler::Node"** [ %800, %796 ], [ %834, %908 ], [ %932, %931 ], [ %974, %936 ]
  %982 = ptrtoint %"class.v8::internal::compiler::Node"** %981 to i64
  store i64 %982, i64* %758, align 8
  store i64 %805, i64* %757, align 8
  store i64 %802, i64* %767, align 8
  br label %983

983:                                              ; preds = %980, %750, %738
  %984 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 8
  %985 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %984, align 8
  %986 = icmp eq %"class.v8::internal::compiler::Node"* %985, null
  %987 = ptrtoint %"class.v8::internal::compiler::Node"* %985 to i64
  br i1 %986, label %1228, label %988

988:                                              ; preds = %983
  %989 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %990 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %989, align 8
  %991 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %992 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %991, align 8
  %993 = icmp eq %"class.v8::internal::compiler::Node"** %990, %992
  %994 = ptrtoint %"class.v8::internal::compiler::Node"** %992 to i64
  br i1 %993, label %1000, label %995

995:                                              ; preds = %988
  %996 = bitcast %"class.v8::internal::compiler::Node"** %990 to i64*
  store i64 %987, i64* %996, align 8
  %997 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %990, i64 1
  %998 = ptrtoint %"class.v8::internal::compiler::Node"** %997 to i64
  %999 = bitcast %"class.v8::internal::compiler::Node"*** %989 to i64*
  store i64 %998, i64* %999, align 8
  br label %1228

1000:                                             ; preds = %988
  %1001 = ptrtoint %"class.v8::internal::compiler::Node"** %990 to i64
  %1002 = bitcast %"class.v8::internal::compiler::Node"*** %989 to i64*
  %1003 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %1004 = load i64, i64* %1003, align 8
  %1005 = sub i64 %1001, %1004
  %1006 = ashr exact i64 %1005, 3
  %1007 = add nsw i64 %1006, 1
  %1008 = icmp ugt i64 %1007, 268435455
  br i1 %1008, label %1009, label %1011

1009:                                             ; preds = %1000
  %1010 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1010) #6
  unreachable

1011:                                             ; preds = %1000
  %1012 = bitcast %"class.v8::internal::compiler::Node"*** %991 to i64*
  %1013 = sub i64 %994, %1004
  %1014 = ashr exact i64 %1013, 3
  %1015 = icmp ult i64 %1014, 134217727
  br i1 %1015, label %1016, label %1021

1016:                                             ; preds = %1011
  %1017 = ashr exact i64 %1013, 2
  %1018 = icmp ult i64 %1017, %1007
  %1019 = select i1 %1018, i64 %1007, i64 %1017
  %1020 = icmp eq i64 %1019, 0
  br i1 %1020, label %1041, label %1021

1021:                                             ; preds = %1016, %1011
  %1022 = phi i64 [ %1019, %1016 ], [ 268435455, %1011 ]
  %1023 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1024 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1023, align 8
  %1025 = shl i64 %1022, 3
  %1026 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1024, i64 0, i32 2
  %1027 = load i64, i64* %1026, align 8
  %1028 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1024, i64 0, i32 3
  %1029 = load i64, i64* %1028, align 8
  %1030 = sub i64 %1029, %1027
  %1031 = icmp ugt i64 %1025, %1030
  br i1 %1031, label %1032, label %1034, !prof !2

1032:                                             ; preds = %1021
  %1033 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1024, i64 %1025) #5
  br label %1036

1034:                                             ; preds = %1021
  %1035 = add i64 %1027, %1025
  store i64 %1035, i64* %1026, align 8
  br label %1036

1036:                                             ; preds = %1034, %1032
  %1037 = phi i64 [ %1033, %1032 ], [ %1027, %1034 ]
  %1038 = inttoptr i64 %1037 to %"class.v8::internal::compiler::Node"**
  %1039 = bitcast %"class.v8::internal::compiler::Node"** %984 to i64*
  %1040 = load i64, i64* %1039, align 8
  br label %1041

1041:                                             ; preds = %1016, %1036
  %1042 = phi i64 [ %1040, %1036 ], [ %987, %1016 ]
  %1043 = phi i64 [ %1022, %1036 ], [ 0, %1016 ]
  %1044 = phi %"class.v8::internal::compiler::Node"** [ %1038, %1036 ], [ null, %1016 ]
  %1045 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1044, i64 %1006
  %1046 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1044, i64 %1043
  %1047 = ptrtoint %"class.v8::internal::compiler::Node"** %1046 to i64
  %1048 = bitcast %"class.v8::internal::compiler::Node"** %1045 to i64*
  store i64 %1042, i64* %1048, align 8
  %1049 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1045, i64 1
  %1050 = ptrtoint %"class.v8::internal::compiler::Node"** %1049 to i64
  %1051 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %1052 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1051, align 8
  %1053 = ptrtoint %"class.v8::internal::compiler::Node"** %1052 to i64
  %1054 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %989, align 8
  %1055 = icmp eq %"class.v8::internal::compiler::Node"** %1054, %1052
  br i1 %1055, label %1225, label %1056

1056:                                             ; preds = %1041
  %1057 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 -1
  %1058 = ptrtoint %"class.v8::internal::compiler::Node"** %1057 to i64
  %1059 = sub i64 %1058, %1053
  %1060 = lshr i64 %1059, 3
  %1061 = add nuw nsw i64 %1060, 1
  %1062 = icmp ult i64 %1061, 4
  br i1 %1062, label %1155, label %1063

1063:                                             ; preds = %1056
  %1064 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 -1
  %1065 = ptrtoint %"class.v8::internal::compiler::Node"** %1064 to i64
  %1066 = sub i64 %1065, %1053
  %1067 = lshr i64 %1066, 3
  %1068 = xor i64 %1067, -1
  %1069 = add nsw i64 %1006, %1068
  %1070 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1044, i64 %1069
  %1071 = xor i64 %1067, -1
  %1072 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 %1071
  %1073 = icmp ult %"class.v8::internal::compiler::Node"** %1070, %1054
  %1074 = icmp ult %"class.v8::internal::compiler::Node"** %1072, %1045
  %1075 = and i1 %1073, %1074
  br i1 %1075, label %1155, label %1076

1076:                                             ; preds = %1063
  %1077 = and i64 %1061, 4611686018427387900
  %1078 = sub nsw i64 0, %1077
  %1079 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1045, i64 %1078
  %1080 = sub nsw i64 0, %1077
  %1081 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 %1080
  %1082 = add nsw i64 %1077, -4
  %1083 = lshr exact i64 %1082, 2
  %1084 = add nuw nsw i64 %1083, 1
  %1085 = and i64 %1084, 1
  %1086 = icmp eq i64 %1082, 0
  br i1 %1086, label %1131, label %1087

1087:                                             ; preds = %1076
  %1088 = sub nuw nsw i64 %1084, %1085
  %1089 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1045, i64 -1
  %1090 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 -1
  %1091 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1045, i64 -1
  %1092 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 -1
  br label %1093

1093:                                             ; preds = %1093, %1087
  %1094 = phi i64 [ 0, %1087 ], [ %1128, %1093 ]
  %1095 = phi i64 [ %1088, %1087 ], [ %1129, %1093 ]
  %1096 = sub i64 0, %1094
  %1097 = sub i64 0, %1094
  %1098 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1089, i64 %1096
  %1099 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1090, i64 %1097
  %1100 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1099, i64 -1
  %1101 = bitcast %"class.v8::internal::compiler::Node"** %1100 to <2 x i64>*
  %1102 = load <2 x i64>, <2 x i64>* %1101, align 8, !alias.scope !37
  %1103 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1099, i64 -2
  %1104 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1103, i64 -1
  %1105 = bitcast %"class.v8::internal::compiler::Node"** %1104 to <2 x i64>*
  %1106 = load <2 x i64>, <2 x i64>* %1105, align 8, !alias.scope !37
  %1107 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1098, i64 -1
  %1108 = bitcast %"class.v8::internal::compiler::Node"** %1107 to <2 x i64>*
  store <2 x i64> %1102, <2 x i64>* %1108, align 8, !alias.scope !40, !noalias !37
  %1109 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1098, i64 -2
  %1110 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1109, i64 -1
  %1111 = bitcast %"class.v8::internal::compiler::Node"** %1110 to <2 x i64>*
  store <2 x i64> %1106, <2 x i64>* %1111, align 8, !alias.scope !40, !noalias !37
  %1112 = sub nuw nsw i64 -4, %1094
  %1113 = sub nuw nsw i64 -4, %1094
  %1114 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1091, i64 %1112
  %1115 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1092, i64 %1113
  %1116 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1115, i64 -1
  %1117 = bitcast %"class.v8::internal::compiler::Node"** %1116 to <2 x i64>*
  %1118 = load <2 x i64>, <2 x i64>* %1117, align 8, !alias.scope !37
  %1119 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1115, i64 -2
  %1120 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1119, i64 -1
  %1121 = bitcast %"class.v8::internal::compiler::Node"** %1120 to <2 x i64>*
  %1122 = load <2 x i64>, <2 x i64>* %1121, align 8, !alias.scope !37
  %1123 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1114, i64 -1
  %1124 = bitcast %"class.v8::internal::compiler::Node"** %1123 to <2 x i64>*
  store <2 x i64> %1118, <2 x i64>* %1124, align 8, !alias.scope !40, !noalias !37
  %1125 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1114, i64 -2
  %1126 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1125, i64 -1
  %1127 = bitcast %"class.v8::internal::compiler::Node"** %1126 to <2 x i64>*
  store <2 x i64> %1122, <2 x i64>* %1127, align 8, !alias.scope !40, !noalias !37
  %1128 = add i64 %1094, 8
  %1129 = add i64 %1095, -2
  %1130 = icmp eq i64 %1129, 0
  br i1 %1130, label %1131, label %1093, !llvm.loop !42

1131:                                             ; preds = %1093, %1076
  %1132 = phi i64 [ 0, %1076 ], [ %1128, %1093 ]
  %1133 = icmp eq i64 %1085, 0
  br i1 %1133, label %1153, label %1134

1134:                                             ; preds = %1131
  %1135 = sub i64 0, %1132
  %1136 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1045, i64 -1
  %1137 = sub i64 0, %1132
  %1138 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1054, i64 -1
  %1139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1136, i64 %1135
  %1140 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1138, i64 %1137
  %1141 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1140, i64 -1
  %1142 = bitcast %"class.v8::internal::compiler::Node"** %1141 to <2 x i64>*
  %1143 = load <2 x i64>, <2 x i64>* %1142, align 8, !alias.scope !37
  %1144 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1140, i64 -2
  %1145 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1144, i64 -1
  %1146 = bitcast %"class.v8::internal::compiler::Node"** %1145 to <2 x i64>*
  %1147 = load <2 x i64>, <2 x i64>* %1146, align 8, !alias.scope !37
  %1148 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1139, i64 -1
  %1149 = bitcast %"class.v8::internal::compiler::Node"** %1148 to <2 x i64>*
  store <2 x i64> %1143, <2 x i64>* %1149, align 8, !alias.scope !40, !noalias !37
  %1150 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1139, i64 -2
  %1151 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1150, i64 -1
  %1152 = bitcast %"class.v8::internal::compiler::Node"** %1151 to <2 x i64>*
  store <2 x i64> %1147, <2 x i64>* %1152, align 8, !alias.scope !40, !noalias !37
  br label %1153

1153:                                             ; preds = %1131, %1134
  %1154 = icmp eq i64 %1061, %1077
  br i1 %1154, label %1225, label %1155

1155:                                             ; preds = %1153, %1063, %1056
  %1156 = phi %"class.v8::internal::compiler::Node"** [ %1045, %1063 ], [ %1045, %1056 ], [ %1079, %1153 ]
  %1157 = phi %"class.v8::internal::compiler::Node"** [ %1054, %1063 ], [ %1054, %1056 ], [ %1081, %1153 ]
  %1158 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1157, i64 -1
  %1159 = ptrtoint %"class.v8::internal::compiler::Node"** %1158 to i64
  %1160 = sub i64 %1159, %1053
  %1161 = lshr i64 %1160, 3
  %1162 = add nuw nsw i64 %1161, 1
  %1163 = and i64 %1162, 7
  %1164 = icmp eq i64 %1163, 0
  br i1 %1164, label %1176, label %1165

1165:                                             ; preds = %1155, %1165
  %1166 = phi %"class.v8::internal::compiler::Node"** [ %1169, %1165 ], [ %1156, %1155 ]
  %1167 = phi %"class.v8::internal::compiler::Node"** [ %1170, %1165 ], [ %1157, %1155 ]
  %1168 = phi i64 [ %1174, %1165 ], [ %1163, %1155 ]
  %1169 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1166, i64 -1
  %1170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1167, i64 -1
  %1171 = bitcast %"class.v8::internal::compiler::Node"** %1170 to i64*
  %1172 = load i64, i64* %1171, align 8
  %1173 = bitcast %"class.v8::internal::compiler::Node"** %1169 to i64*
  store i64 %1172, i64* %1173, align 8
  %1174 = add i64 %1168, -1
  %1175 = icmp eq i64 %1174, 0
  br i1 %1175, label %1176, label %1165, !llvm.loop !43

1176:                                             ; preds = %1165, %1155
  %1177 = phi %"class.v8::internal::compiler::Node"** [ undef, %1155 ], [ %1169, %1165 ]
  %1178 = phi %"class.v8::internal::compiler::Node"** [ %1156, %1155 ], [ %1169, %1165 ]
  %1179 = phi %"class.v8::internal::compiler::Node"** [ %1157, %1155 ], [ %1170, %1165 ]
  %1180 = icmp ult i64 %1160, 56
  br i1 %1180, label %1225, label %1181

1181:                                             ; preds = %1176, %1181
  %1182 = phi %"class.v8::internal::compiler::Node"** [ %1219, %1181 ], [ %1178, %1176 ]
  %1183 = phi %"class.v8::internal::compiler::Node"** [ %1220, %1181 ], [ %1179, %1176 ]
  %1184 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -1
  %1185 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -1
  %1186 = bitcast %"class.v8::internal::compiler::Node"** %1185 to i64*
  %1187 = load i64, i64* %1186, align 8
  %1188 = bitcast %"class.v8::internal::compiler::Node"** %1184 to i64*
  store i64 %1187, i64* %1188, align 8
  %1189 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -2
  %1190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -2
  %1191 = bitcast %"class.v8::internal::compiler::Node"** %1190 to i64*
  %1192 = load i64, i64* %1191, align 8
  %1193 = bitcast %"class.v8::internal::compiler::Node"** %1189 to i64*
  store i64 %1192, i64* %1193, align 8
  %1194 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -3
  %1195 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -3
  %1196 = bitcast %"class.v8::internal::compiler::Node"** %1195 to i64*
  %1197 = load i64, i64* %1196, align 8
  %1198 = bitcast %"class.v8::internal::compiler::Node"** %1194 to i64*
  store i64 %1197, i64* %1198, align 8
  %1199 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -4
  %1200 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -4
  %1201 = bitcast %"class.v8::internal::compiler::Node"** %1200 to i64*
  %1202 = load i64, i64* %1201, align 8
  %1203 = bitcast %"class.v8::internal::compiler::Node"** %1199 to i64*
  store i64 %1202, i64* %1203, align 8
  %1204 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -5
  %1205 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -5
  %1206 = bitcast %"class.v8::internal::compiler::Node"** %1205 to i64*
  %1207 = load i64, i64* %1206, align 8
  %1208 = bitcast %"class.v8::internal::compiler::Node"** %1204 to i64*
  store i64 %1207, i64* %1208, align 8
  %1209 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -6
  %1210 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -6
  %1211 = bitcast %"class.v8::internal::compiler::Node"** %1210 to i64*
  %1212 = load i64, i64* %1211, align 8
  %1213 = bitcast %"class.v8::internal::compiler::Node"** %1209 to i64*
  store i64 %1212, i64* %1213, align 8
  %1214 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -7
  %1215 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -7
  %1216 = bitcast %"class.v8::internal::compiler::Node"** %1215 to i64*
  %1217 = load i64, i64* %1216, align 8
  %1218 = bitcast %"class.v8::internal::compiler::Node"** %1214 to i64*
  store i64 %1217, i64* %1218, align 8
  %1219 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1182, i64 -8
  %1220 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, i64 -8
  %1221 = bitcast %"class.v8::internal::compiler::Node"** %1220 to i64*
  %1222 = load i64, i64* %1221, align 8
  %1223 = bitcast %"class.v8::internal::compiler::Node"** %1219 to i64*
  store i64 %1222, i64* %1223, align 8
  %1224 = icmp eq %"class.v8::internal::compiler::Node"** %1220, %1052
  br i1 %1224, label %1225, label %1181, !llvm.loop !44

1225:                                             ; preds = %1176, %1181, %1153, %1041
  %1226 = phi %"class.v8::internal::compiler::Node"** [ %1045, %1041 ], [ %1079, %1153 ], [ %1177, %1176 ], [ %1219, %1181 ]
  %1227 = ptrtoint %"class.v8::internal::compiler::Node"** %1226 to i64
  store i64 %1227, i64* %1003, align 8
  store i64 %1050, i64* %1002, align 8
  store i64 %1047, i64* %1012, align 8
  br label %1228

1228:                                             ; preds = %1225, %995, %983
  %1229 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 9
  %1230 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1229, align 8
  %1231 = icmp eq %"class.v8::internal::compiler::Node"* %1230, null
  %1232 = ptrtoint %"class.v8::internal::compiler::Node"* %1230 to i64
  br i1 %1231, label %1473, label %1233

1233:                                             ; preds = %1228
  %1234 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %1235 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1234, align 8
  %1236 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1237 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1236, align 8
  %1238 = icmp eq %"class.v8::internal::compiler::Node"** %1235, %1237
  %1239 = ptrtoint %"class.v8::internal::compiler::Node"** %1237 to i64
  br i1 %1238, label %1245, label %1240

1240:                                             ; preds = %1233
  %1241 = bitcast %"class.v8::internal::compiler::Node"** %1235 to i64*
  store i64 %1232, i64* %1241, align 8
  %1242 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1235, i64 1
  %1243 = ptrtoint %"class.v8::internal::compiler::Node"** %1242 to i64
  %1244 = bitcast %"class.v8::internal::compiler::Node"*** %1234 to i64*
  store i64 %1243, i64* %1244, align 8
  br label %1473

1245:                                             ; preds = %1233
  %1246 = ptrtoint %"class.v8::internal::compiler::Node"** %1235 to i64
  %1247 = bitcast %"class.v8::internal::compiler::Node"*** %1234 to i64*
  %1248 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %1249 = load i64, i64* %1248, align 8
  %1250 = sub i64 %1246, %1249
  %1251 = ashr exact i64 %1250, 3
  %1252 = add nsw i64 %1251, 1
  %1253 = icmp ugt i64 %1252, 268435455
  br i1 %1253, label %1254, label %1256

1254:                                             ; preds = %1245
  %1255 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1255) #6
  unreachable

1256:                                             ; preds = %1245
  %1257 = bitcast %"class.v8::internal::compiler::Node"*** %1236 to i64*
  %1258 = sub i64 %1239, %1249
  %1259 = ashr exact i64 %1258, 3
  %1260 = icmp ult i64 %1259, 134217727
  br i1 %1260, label %1261, label %1266

1261:                                             ; preds = %1256
  %1262 = ashr exact i64 %1258, 2
  %1263 = icmp ult i64 %1262, %1252
  %1264 = select i1 %1263, i64 %1252, i64 %1262
  %1265 = icmp eq i64 %1264, 0
  br i1 %1265, label %1286, label %1266

1266:                                             ; preds = %1261, %1256
  %1267 = phi i64 [ %1264, %1261 ], [ 268435455, %1256 ]
  %1268 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1269 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1268, align 8
  %1270 = shl i64 %1267, 3
  %1271 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1269, i64 0, i32 2
  %1272 = load i64, i64* %1271, align 8
  %1273 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1269, i64 0, i32 3
  %1274 = load i64, i64* %1273, align 8
  %1275 = sub i64 %1274, %1272
  %1276 = icmp ugt i64 %1270, %1275
  br i1 %1276, label %1277, label %1279, !prof !2

1277:                                             ; preds = %1266
  %1278 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1269, i64 %1270) #5
  br label %1281

1279:                                             ; preds = %1266
  %1280 = add i64 %1272, %1270
  store i64 %1280, i64* %1271, align 8
  br label %1281

1281:                                             ; preds = %1279, %1277
  %1282 = phi i64 [ %1278, %1277 ], [ %1272, %1279 ]
  %1283 = inttoptr i64 %1282 to %"class.v8::internal::compiler::Node"**
  %1284 = bitcast %"class.v8::internal::compiler::Node"** %1229 to i64*
  %1285 = load i64, i64* %1284, align 8
  br label %1286

1286:                                             ; preds = %1261, %1281
  %1287 = phi i64 [ %1285, %1281 ], [ %1232, %1261 ]
  %1288 = phi i64 [ %1267, %1281 ], [ 0, %1261 ]
  %1289 = phi %"class.v8::internal::compiler::Node"** [ %1283, %1281 ], [ null, %1261 ]
  %1290 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1289, i64 %1251
  %1291 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1289, i64 %1288
  %1292 = ptrtoint %"class.v8::internal::compiler::Node"** %1291 to i64
  %1293 = bitcast %"class.v8::internal::compiler::Node"** %1290 to i64*
  store i64 %1287, i64* %1293, align 8
  %1294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1290, i64 1
  %1295 = ptrtoint %"class.v8::internal::compiler::Node"** %1294 to i64
  %1296 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %1297 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1296, align 8
  %1298 = ptrtoint %"class.v8::internal::compiler::Node"** %1297 to i64
  %1299 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1234, align 8
  %1300 = icmp eq %"class.v8::internal::compiler::Node"** %1299, %1297
  br i1 %1300, label %1470, label %1301

1301:                                             ; preds = %1286
  %1302 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 -1
  %1303 = ptrtoint %"class.v8::internal::compiler::Node"** %1302 to i64
  %1304 = sub i64 %1303, %1298
  %1305 = lshr i64 %1304, 3
  %1306 = add nuw nsw i64 %1305, 1
  %1307 = icmp ult i64 %1306, 4
  br i1 %1307, label %1400, label %1308

1308:                                             ; preds = %1301
  %1309 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 -1
  %1310 = ptrtoint %"class.v8::internal::compiler::Node"** %1309 to i64
  %1311 = sub i64 %1310, %1298
  %1312 = lshr i64 %1311, 3
  %1313 = xor i64 %1312, -1
  %1314 = add nsw i64 %1251, %1313
  %1315 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1289, i64 %1314
  %1316 = xor i64 %1312, -1
  %1317 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 %1316
  %1318 = icmp ult %"class.v8::internal::compiler::Node"** %1315, %1299
  %1319 = icmp ult %"class.v8::internal::compiler::Node"** %1317, %1290
  %1320 = and i1 %1318, %1319
  br i1 %1320, label %1400, label %1321

1321:                                             ; preds = %1308
  %1322 = and i64 %1306, 4611686018427387900
  %1323 = sub nsw i64 0, %1322
  %1324 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1290, i64 %1323
  %1325 = sub nsw i64 0, %1322
  %1326 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 %1325
  %1327 = add nsw i64 %1322, -4
  %1328 = lshr exact i64 %1327, 2
  %1329 = add nuw nsw i64 %1328, 1
  %1330 = and i64 %1329, 1
  %1331 = icmp eq i64 %1327, 0
  br i1 %1331, label %1376, label %1332

1332:                                             ; preds = %1321
  %1333 = sub nuw nsw i64 %1329, %1330
  %1334 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1290, i64 -1
  %1335 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 -1
  %1336 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1290, i64 -1
  %1337 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 -1
  br label %1338

1338:                                             ; preds = %1338, %1332
  %1339 = phi i64 [ 0, %1332 ], [ %1373, %1338 ]
  %1340 = phi i64 [ %1333, %1332 ], [ %1374, %1338 ]
  %1341 = sub i64 0, %1339
  %1342 = sub i64 0, %1339
  %1343 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1334, i64 %1341
  %1344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1335, i64 %1342
  %1345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1344, i64 -1
  %1346 = bitcast %"class.v8::internal::compiler::Node"** %1345 to <2 x i64>*
  %1347 = load <2 x i64>, <2 x i64>* %1346, align 8, !alias.scope !45
  %1348 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1344, i64 -2
  %1349 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1348, i64 -1
  %1350 = bitcast %"class.v8::internal::compiler::Node"** %1349 to <2 x i64>*
  %1351 = load <2 x i64>, <2 x i64>* %1350, align 8, !alias.scope !45
  %1352 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1343, i64 -1
  %1353 = bitcast %"class.v8::internal::compiler::Node"** %1352 to <2 x i64>*
  store <2 x i64> %1347, <2 x i64>* %1353, align 8, !alias.scope !48, !noalias !45
  %1354 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1343, i64 -2
  %1355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1354, i64 -1
  %1356 = bitcast %"class.v8::internal::compiler::Node"** %1355 to <2 x i64>*
  store <2 x i64> %1351, <2 x i64>* %1356, align 8, !alias.scope !48, !noalias !45
  %1357 = sub nuw nsw i64 -4, %1339
  %1358 = sub nuw nsw i64 -4, %1339
  %1359 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1336, i64 %1357
  %1360 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1337, i64 %1358
  %1361 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1360, i64 -1
  %1362 = bitcast %"class.v8::internal::compiler::Node"** %1361 to <2 x i64>*
  %1363 = load <2 x i64>, <2 x i64>* %1362, align 8, !alias.scope !45
  %1364 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1360, i64 -2
  %1365 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1364, i64 -1
  %1366 = bitcast %"class.v8::internal::compiler::Node"** %1365 to <2 x i64>*
  %1367 = load <2 x i64>, <2 x i64>* %1366, align 8, !alias.scope !45
  %1368 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1359, i64 -1
  %1369 = bitcast %"class.v8::internal::compiler::Node"** %1368 to <2 x i64>*
  store <2 x i64> %1363, <2 x i64>* %1369, align 8, !alias.scope !48, !noalias !45
  %1370 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1359, i64 -2
  %1371 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1370, i64 -1
  %1372 = bitcast %"class.v8::internal::compiler::Node"** %1371 to <2 x i64>*
  store <2 x i64> %1367, <2 x i64>* %1372, align 8, !alias.scope !48, !noalias !45
  %1373 = add i64 %1339, 8
  %1374 = add i64 %1340, -2
  %1375 = icmp eq i64 %1374, 0
  br i1 %1375, label %1376, label %1338, !llvm.loop !50

1376:                                             ; preds = %1338, %1321
  %1377 = phi i64 [ 0, %1321 ], [ %1373, %1338 ]
  %1378 = icmp eq i64 %1330, 0
  br i1 %1378, label %1398, label %1379

1379:                                             ; preds = %1376
  %1380 = sub i64 0, %1377
  %1381 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1290, i64 -1
  %1382 = sub i64 0, %1377
  %1383 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1299, i64 -1
  %1384 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1381, i64 %1380
  %1385 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1383, i64 %1382
  %1386 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1385, i64 -1
  %1387 = bitcast %"class.v8::internal::compiler::Node"** %1386 to <2 x i64>*
  %1388 = load <2 x i64>, <2 x i64>* %1387, align 8, !alias.scope !45
  %1389 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1385, i64 -2
  %1390 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1389, i64 -1
  %1391 = bitcast %"class.v8::internal::compiler::Node"** %1390 to <2 x i64>*
  %1392 = load <2 x i64>, <2 x i64>* %1391, align 8, !alias.scope !45
  %1393 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1384, i64 -1
  %1394 = bitcast %"class.v8::internal::compiler::Node"** %1393 to <2 x i64>*
  store <2 x i64> %1388, <2 x i64>* %1394, align 8, !alias.scope !48, !noalias !45
  %1395 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1384, i64 -2
  %1396 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1395, i64 -1
  %1397 = bitcast %"class.v8::internal::compiler::Node"** %1396 to <2 x i64>*
  store <2 x i64> %1392, <2 x i64>* %1397, align 8, !alias.scope !48, !noalias !45
  br label %1398

1398:                                             ; preds = %1376, %1379
  %1399 = icmp eq i64 %1306, %1322
  br i1 %1399, label %1470, label %1400

1400:                                             ; preds = %1398, %1308, %1301
  %1401 = phi %"class.v8::internal::compiler::Node"** [ %1290, %1308 ], [ %1290, %1301 ], [ %1324, %1398 ]
  %1402 = phi %"class.v8::internal::compiler::Node"** [ %1299, %1308 ], [ %1299, %1301 ], [ %1326, %1398 ]
  %1403 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1402, i64 -1
  %1404 = ptrtoint %"class.v8::internal::compiler::Node"** %1403 to i64
  %1405 = sub i64 %1404, %1298
  %1406 = lshr i64 %1405, 3
  %1407 = add nuw nsw i64 %1406, 1
  %1408 = and i64 %1407, 7
  %1409 = icmp eq i64 %1408, 0
  br i1 %1409, label %1421, label %1410

1410:                                             ; preds = %1400, %1410
  %1411 = phi %"class.v8::internal::compiler::Node"** [ %1414, %1410 ], [ %1401, %1400 ]
  %1412 = phi %"class.v8::internal::compiler::Node"** [ %1415, %1410 ], [ %1402, %1400 ]
  %1413 = phi i64 [ %1419, %1410 ], [ %1408, %1400 ]
  %1414 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1411, i64 -1
  %1415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1412, i64 -1
  %1416 = bitcast %"class.v8::internal::compiler::Node"** %1415 to i64*
  %1417 = load i64, i64* %1416, align 8
  %1418 = bitcast %"class.v8::internal::compiler::Node"** %1414 to i64*
  store i64 %1417, i64* %1418, align 8
  %1419 = add i64 %1413, -1
  %1420 = icmp eq i64 %1419, 0
  br i1 %1420, label %1421, label %1410, !llvm.loop !51

1421:                                             ; preds = %1410, %1400
  %1422 = phi %"class.v8::internal::compiler::Node"** [ undef, %1400 ], [ %1414, %1410 ]
  %1423 = phi %"class.v8::internal::compiler::Node"** [ %1401, %1400 ], [ %1414, %1410 ]
  %1424 = phi %"class.v8::internal::compiler::Node"** [ %1402, %1400 ], [ %1415, %1410 ]
  %1425 = icmp ult i64 %1405, 56
  br i1 %1425, label %1470, label %1426

1426:                                             ; preds = %1421, %1426
  %1427 = phi %"class.v8::internal::compiler::Node"** [ %1464, %1426 ], [ %1423, %1421 ]
  %1428 = phi %"class.v8::internal::compiler::Node"** [ %1465, %1426 ], [ %1424, %1421 ]
  %1429 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -1
  %1430 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -1
  %1431 = bitcast %"class.v8::internal::compiler::Node"** %1430 to i64*
  %1432 = load i64, i64* %1431, align 8
  %1433 = bitcast %"class.v8::internal::compiler::Node"** %1429 to i64*
  store i64 %1432, i64* %1433, align 8
  %1434 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -2
  %1435 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -2
  %1436 = bitcast %"class.v8::internal::compiler::Node"** %1435 to i64*
  %1437 = load i64, i64* %1436, align 8
  %1438 = bitcast %"class.v8::internal::compiler::Node"** %1434 to i64*
  store i64 %1437, i64* %1438, align 8
  %1439 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -3
  %1440 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -3
  %1441 = bitcast %"class.v8::internal::compiler::Node"** %1440 to i64*
  %1442 = load i64, i64* %1441, align 8
  %1443 = bitcast %"class.v8::internal::compiler::Node"** %1439 to i64*
  store i64 %1442, i64* %1443, align 8
  %1444 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -4
  %1445 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -4
  %1446 = bitcast %"class.v8::internal::compiler::Node"** %1445 to i64*
  %1447 = load i64, i64* %1446, align 8
  %1448 = bitcast %"class.v8::internal::compiler::Node"** %1444 to i64*
  store i64 %1447, i64* %1448, align 8
  %1449 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -5
  %1450 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -5
  %1451 = bitcast %"class.v8::internal::compiler::Node"** %1450 to i64*
  %1452 = load i64, i64* %1451, align 8
  %1453 = bitcast %"class.v8::internal::compiler::Node"** %1449 to i64*
  store i64 %1452, i64* %1453, align 8
  %1454 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -6
  %1455 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -6
  %1456 = bitcast %"class.v8::internal::compiler::Node"** %1455 to i64*
  %1457 = load i64, i64* %1456, align 8
  %1458 = bitcast %"class.v8::internal::compiler::Node"** %1454 to i64*
  store i64 %1457, i64* %1458, align 8
  %1459 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -7
  %1460 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -7
  %1461 = bitcast %"class.v8::internal::compiler::Node"** %1460 to i64*
  %1462 = load i64, i64* %1461, align 8
  %1463 = bitcast %"class.v8::internal::compiler::Node"** %1459 to i64*
  store i64 %1462, i64* %1463, align 8
  %1464 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1427, i64 -8
  %1465 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1428, i64 -8
  %1466 = bitcast %"class.v8::internal::compiler::Node"** %1465 to i64*
  %1467 = load i64, i64* %1466, align 8
  %1468 = bitcast %"class.v8::internal::compiler::Node"** %1464 to i64*
  store i64 %1467, i64* %1468, align 8
  %1469 = icmp eq %"class.v8::internal::compiler::Node"** %1465, %1297
  br i1 %1469, label %1470, label %1426, !llvm.loop !52

1470:                                             ; preds = %1421, %1426, %1398, %1286
  %1471 = phi %"class.v8::internal::compiler::Node"** [ %1290, %1286 ], [ %1324, %1398 ], [ %1422, %1421 ], [ %1464, %1426 ]
  %1472 = ptrtoint %"class.v8::internal::compiler::Node"** %1471 to i64
  store i64 %1472, i64* %1248, align 8
  store i64 %1295, i64* %1247, align 8
  store i64 %1292, i64* %1257, align 8
  br label %1473

1473:                                             ; preds = %1470, %1240, %1228
  %1474 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 10
  %1475 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1474, align 8
  %1476 = icmp eq %"class.v8::internal::compiler::Node"* %1475, null
  %1477 = ptrtoint %"class.v8::internal::compiler::Node"* %1475 to i64
  br i1 %1476, label %1718, label %1478

1478:                                             ; preds = %1473
  %1479 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %1480 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1479, align 8
  %1481 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1482 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1481, align 8
  %1483 = icmp eq %"class.v8::internal::compiler::Node"** %1480, %1482
  %1484 = ptrtoint %"class.v8::internal::compiler::Node"** %1482 to i64
  br i1 %1483, label %1490, label %1485

1485:                                             ; preds = %1478
  %1486 = bitcast %"class.v8::internal::compiler::Node"** %1480 to i64*
  store i64 %1477, i64* %1486, align 8
  %1487 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1480, i64 1
  %1488 = ptrtoint %"class.v8::internal::compiler::Node"** %1487 to i64
  %1489 = bitcast %"class.v8::internal::compiler::Node"*** %1479 to i64*
  store i64 %1488, i64* %1489, align 8
  br label %1718

1490:                                             ; preds = %1478
  %1491 = ptrtoint %"class.v8::internal::compiler::Node"** %1480 to i64
  %1492 = bitcast %"class.v8::internal::compiler::Node"*** %1479 to i64*
  %1493 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %1494 = load i64, i64* %1493, align 8
  %1495 = sub i64 %1491, %1494
  %1496 = ashr exact i64 %1495, 3
  %1497 = add nsw i64 %1496, 1
  %1498 = icmp ugt i64 %1497, 268435455
  br i1 %1498, label %1499, label %1501

1499:                                             ; preds = %1490
  %1500 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1500) #6
  unreachable

1501:                                             ; preds = %1490
  %1502 = bitcast %"class.v8::internal::compiler::Node"*** %1481 to i64*
  %1503 = sub i64 %1484, %1494
  %1504 = ashr exact i64 %1503, 3
  %1505 = icmp ult i64 %1504, 134217727
  br i1 %1505, label %1506, label %1511

1506:                                             ; preds = %1501
  %1507 = ashr exact i64 %1503, 2
  %1508 = icmp ult i64 %1507, %1497
  %1509 = select i1 %1508, i64 %1497, i64 %1507
  %1510 = icmp eq i64 %1509, 0
  br i1 %1510, label %1531, label %1511

1511:                                             ; preds = %1506, %1501
  %1512 = phi i64 [ %1509, %1506 ], [ 268435455, %1501 ]
  %1513 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1514 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1513, align 8
  %1515 = shl i64 %1512, 3
  %1516 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1514, i64 0, i32 2
  %1517 = load i64, i64* %1516, align 8
  %1518 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1514, i64 0, i32 3
  %1519 = load i64, i64* %1518, align 8
  %1520 = sub i64 %1519, %1517
  %1521 = icmp ugt i64 %1515, %1520
  br i1 %1521, label %1522, label %1524, !prof !2

1522:                                             ; preds = %1511
  %1523 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1514, i64 %1515) #5
  br label %1526

1524:                                             ; preds = %1511
  %1525 = add i64 %1517, %1515
  store i64 %1525, i64* %1516, align 8
  br label %1526

1526:                                             ; preds = %1524, %1522
  %1527 = phi i64 [ %1523, %1522 ], [ %1517, %1524 ]
  %1528 = inttoptr i64 %1527 to %"class.v8::internal::compiler::Node"**
  %1529 = bitcast %"class.v8::internal::compiler::Node"** %1474 to i64*
  %1530 = load i64, i64* %1529, align 8
  br label %1531

1531:                                             ; preds = %1506, %1526
  %1532 = phi i64 [ %1530, %1526 ], [ %1477, %1506 ]
  %1533 = phi i64 [ %1512, %1526 ], [ 0, %1506 ]
  %1534 = phi %"class.v8::internal::compiler::Node"** [ %1528, %1526 ], [ null, %1506 ]
  %1535 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1534, i64 %1496
  %1536 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1534, i64 %1533
  %1537 = ptrtoint %"class.v8::internal::compiler::Node"** %1536 to i64
  %1538 = bitcast %"class.v8::internal::compiler::Node"** %1535 to i64*
  store i64 %1532, i64* %1538, align 8
  %1539 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1535, i64 1
  %1540 = ptrtoint %"class.v8::internal::compiler::Node"** %1539 to i64
  %1541 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %1542 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1541, align 8
  %1543 = ptrtoint %"class.v8::internal::compiler::Node"** %1542 to i64
  %1544 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1479, align 8
  %1545 = icmp eq %"class.v8::internal::compiler::Node"** %1544, %1542
  br i1 %1545, label %1715, label %1546

1546:                                             ; preds = %1531
  %1547 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 -1
  %1548 = ptrtoint %"class.v8::internal::compiler::Node"** %1547 to i64
  %1549 = sub i64 %1548, %1543
  %1550 = lshr i64 %1549, 3
  %1551 = add nuw nsw i64 %1550, 1
  %1552 = icmp ult i64 %1551, 4
  br i1 %1552, label %1645, label %1553

1553:                                             ; preds = %1546
  %1554 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 -1
  %1555 = ptrtoint %"class.v8::internal::compiler::Node"** %1554 to i64
  %1556 = sub i64 %1555, %1543
  %1557 = lshr i64 %1556, 3
  %1558 = xor i64 %1557, -1
  %1559 = add nsw i64 %1496, %1558
  %1560 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1534, i64 %1559
  %1561 = xor i64 %1557, -1
  %1562 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 %1561
  %1563 = icmp ult %"class.v8::internal::compiler::Node"** %1560, %1544
  %1564 = icmp ult %"class.v8::internal::compiler::Node"** %1562, %1535
  %1565 = and i1 %1563, %1564
  br i1 %1565, label %1645, label %1566

1566:                                             ; preds = %1553
  %1567 = and i64 %1551, 4611686018427387900
  %1568 = sub nsw i64 0, %1567
  %1569 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1535, i64 %1568
  %1570 = sub nsw i64 0, %1567
  %1571 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 %1570
  %1572 = add nsw i64 %1567, -4
  %1573 = lshr exact i64 %1572, 2
  %1574 = add nuw nsw i64 %1573, 1
  %1575 = and i64 %1574, 1
  %1576 = icmp eq i64 %1572, 0
  br i1 %1576, label %1621, label %1577

1577:                                             ; preds = %1566
  %1578 = sub nuw nsw i64 %1574, %1575
  %1579 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1535, i64 -1
  %1580 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 -1
  %1581 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1535, i64 -1
  %1582 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 -1
  br label %1583

1583:                                             ; preds = %1583, %1577
  %1584 = phi i64 [ 0, %1577 ], [ %1618, %1583 ]
  %1585 = phi i64 [ %1578, %1577 ], [ %1619, %1583 ]
  %1586 = sub i64 0, %1584
  %1587 = sub i64 0, %1584
  %1588 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1579, i64 %1586
  %1589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1580, i64 %1587
  %1590 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1589, i64 -1
  %1591 = bitcast %"class.v8::internal::compiler::Node"** %1590 to <2 x i64>*
  %1592 = load <2 x i64>, <2 x i64>* %1591, align 8, !alias.scope !53
  %1593 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1589, i64 -2
  %1594 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1593, i64 -1
  %1595 = bitcast %"class.v8::internal::compiler::Node"** %1594 to <2 x i64>*
  %1596 = load <2 x i64>, <2 x i64>* %1595, align 8, !alias.scope !53
  %1597 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1588, i64 -1
  %1598 = bitcast %"class.v8::internal::compiler::Node"** %1597 to <2 x i64>*
  store <2 x i64> %1592, <2 x i64>* %1598, align 8, !alias.scope !56, !noalias !53
  %1599 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1588, i64 -2
  %1600 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1599, i64 -1
  %1601 = bitcast %"class.v8::internal::compiler::Node"** %1600 to <2 x i64>*
  store <2 x i64> %1596, <2 x i64>* %1601, align 8, !alias.scope !56, !noalias !53
  %1602 = sub nuw nsw i64 -4, %1584
  %1603 = sub nuw nsw i64 -4, %1584
  %1604 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1581, i64 %1602
  %1605 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1582, i64 %1603
  %1606 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1605, i64 -1
  %1607 = bitcast %"class.v8::internal::compiler::Node"** %1606 to <2 x i64>*
  %1608 = load <2 x i64>, <2 x i64>* %1607, align 8, !alias.scope !53
  %1609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1605, i64 -2
  %1610 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1609, i64 -1
  %1611 = bitcast %"class.v8::internal::compiler::Node"** %1610 to <2 x i64>*
  %1612 = load <2 x i64>, <2 x i64>* %1611, align 8, !alias.scope !53
  %1613 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1604, i64 -1
  %1614 = bitcast %"class.v8::internal::compiler::Node"** %1613 to <2 x i64>*
  store <2 x i64> %1608, <2 x i64>* %1614, align 8, !alias.scope !56, !noalias !53
  %1615 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1604, i64 -2
  %1616 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1615, i64 -1
  %1617 = bitcast %"class.v8::internal::compiler::Node"** %1616 to <2 x i64>*
  store <2 x i64> %1612, <2 x i64>* %1617, align 8, !alias.scope !56, !noalias !53
  %1618 = add i64 %1584, 8
  %1619 = add i64 %1585, -2
  %1620 = icmp eq i64 %1619, 0
  br i1 %1620, label %1621, label %1583, !llvm.loop !58

1621:                                             ; preds = %1583, %1566
  %1622 = phi i64 [ 0, %1566 ], [ %1618, %1583 ]
  %1623 = icmp eq i64 %1575, 0
  br i1 %1623, label %1643, label %1624

1624:                                             ; preds = %1621
  %1625 = sub i64 0, %1622
  %1626 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1535, i64 -1
  %1627 = sub i64 0, %1622
  %1628 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1544, i64 -1
  %1629 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1626, i64 %1625
  %1630 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1628, i64 %1627
  %1631 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1630, i64 -1
  %1632 = bitcast %"class.v8::internal::compiler::Node"** %1631 to <2 x i64>*
  %1633 = load <2 x i64>, <2 x i64>* %1632, align 8, !alias.scope !53
  %1634 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1630, i64 -2
  %1635 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1634, i64 -1
  %1636 = bitcast %"class.v8::internal::compiler::Node"** %1635 to <2 x i64>*
  %1637 = load <2 x i64>, <2 x i64>* %1636, align 8, !alias.scope !53
  %1638 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1629, i64 -1
  %1639 = bitcast %"class.v8::internal::compiler::Node"** %1638 to <2 x i64>*
  store <2 x i64> %1633, <2 x i64>* %1639, align 8, !alias.scope !56, !noalias !53
  %1640 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1629, i64 -2
  %1641 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1640, i64 -1
  %1642 = bitcast %"class.v8::internal::compiler::Node"** %1641 to <2 x i64>*
  store <2 x i64> %1637, <2 x i64>* %1642, align 8, !alias.scope !56, !noalias !53
  br label %1643

1643:                                             ; preds = %1621, %1624
  %1644 = icmp eq i64 %1551, %1567
  br i1 %1644, label %1715, label %1645

1645:                                             ; preds = %1643, %1553, %1546
  %1646 = phi %"class.v8::internal::compiler::Node"** [ %1535, %1553 ], [ %1535, %1546 ], [ %1569, %1643 ]
  %1647 = phi %"class.v8::internal::compiler::Node"** [ %1544, %1553 ], [ %1544, %1546 ], [ %1571, %1643 ]
  %1648 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1647, i64 -1
  %1649 = ptrtoint %"class.v8::internal::compiler::Node"** %1648 to i64
  %1650 = sub i64 %1649, %1543
  %1651 = lshr i64 %1650, 3
  %1652 = add nuw nsw i64 %1651, 1
  %1653 = and i64 %1652, 7
  %1654 = icmp eq i64 %1653, 0
  br i1 %1654, label %1666, label %1655

1655:                                             ; preds = %1645, %1655
  %1656 = phi %"class.v8::internal::compiler::Node"** [ %1659, %1655 ], [ %1646, %1645 ]
  %1657 = phi %"class.v8::internal::compiler::Node"** [ %1660, %1655 ], [ %1647, %1645 ]
  %1658 = phi i64 [ %1664, %1655 ], [ %1653, %1645 ]
  %1659 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1656, i64 -1
  %1660 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1657, i64 -1
  %1661 = bitcast %"class.v8::internal::compiler::Node"** %1660 to i64*
  %1662 = load i64, i64* %1661, align 8
  %1663 = bitcast %"class.v8::internal::compiler::Node"** %1659 to i64*
  store i64 %1662, i64* %1663, align 8
  %1664 = add i64 %1658, -1
  %1665 = icmp eq i64 %1664, 0
  br i1 %1665, label %1666, label %1655, !llvm.loop !59

1666:                                             ; preds = %1655, %1645
  %1667 = phi %"class.v8::internal::compiler::Node"** [ undef, %1645 ], [ %1659, %1655 ]
  %1668 = phi %"class.v8::internal::compiler::Node"** [ %1646, %1645 ], [ %1659, %1655 ]
  %1669 = phi %"class.v8::internal::compiler::Node"** [ %1647, %1645 ], [ %1660, %1655 ]
  %1670 = icmp ult i64 %1650, 56
  br i1 %1670, label %1715, label %1671

1671:                                             ; preds = %1666, %1671
  %1672 = phi %"class.v8::internal::compiler::Node"** [ %1709, %1671 ], [ %1668, %1666 ]
  %1673 = phi %"class.v8::internal::compiler::Node"** [ %1710, %1671 ], [ %1669, %1666 ]
  %1674 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -1
  %1675 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -1
  %1676 = bitcast %"class.v8::internal::compiler::Node"** %1675 to i64*
  %1677 = load i64, i64* %1676, align 8
  %1678 = bitcast %"class.v8::internal::compiler::Node"** %1674 to i64*
  store i64 %1677, i64* %1678, align 8
  %1679 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -2
  %1680 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -2
  %1681 = bitcast %"class.v8::internal::compiler::Node"** %1680 to i64*
  %1682 = load i64, i64* %1681, align 8
  %1683 = bitcast %"class.v8::internal::compiler::Node"** %1679 to i64*
  store i64 %1682, i64* %1683, align 8
  %1684 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -3
  %1685 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -3
  %1686 = bitcast %"class.v8::internal::compiler::Node"** %1685 to i64*
  %1687 = load i64, i64* %1686, align 8
  %1688 = bitcast %"class.v8::internal::compiler::Node"** %1684 to i64*
  store i64 %1687, i64* %1688, align 8
  %1689 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -4
  %1690 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -4
  %1691 = bitcast %"class.v8::internal::compiler::Node"** %1690 to i64*
  %1692 = load i64, i64* %1691, align 8
  %1693 = bitcast %"class.v8::internal::compiler::Node"** %1689 to i64*
  store i64 %1692, i64* %1693, align 8
  %1694 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -5
  %1695 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -5
  %1696 = bitcast %"class.v8::internal::compiler::Node"** %1695 to i64*
  %1697 = load i64, i64* %1696, align 8
  %1698 = bitcast %"class.v8::internal::compiler::Node"** %1694 to i64*
  store i64 %1697, i64* %1698, align 8
  %1699 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -6
  %1700 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -6
  %1701 = bitcast %"class.v8::internal::compiler::Node"** %1700 to i64*
  %1702 = load i64, i64* %1701, align 8
  %1703 = bitcast %"class.v8::internal::compiler::Node"** %1699 to i64*
  store i64 %1702, i64* %1703, align 8
  %1704 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -7
  %1705 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -7
  %1706 = bitcast %"class.v8::internal::compiler::Node"** %1705 to i64*
  %1707 = load i64, i64* %1706, align 8
  %1708 = bitcast %"class.v8::internal::compiler::Node"** %1704 to i64*
  store i64 %1707, i64* %1708, align 8
  %1709 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1672, i64 -8
  %1710 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1673, i64 -8
  %1711 = bitcast %"class.v8::internal::compiler::Node"** %1710 to i64*
  %1712 = load i64, i64* %1711, align 8
  %1713 = bitcast %"class.v8::internal::compiler::Node"** %1709 to i64*
  store i64 %1712, i64* %1713, align 8
  %1714 = icmp eq %"class.v8::internal::compiler::Node"** %1710, %1542
  br i1 %1714, label %1715, label %1671, !llvm.loop !60

1715:                                             ; preds = %1666, %1671, %1643, %1531
  %1716 = phi %"class.v8::internal::compiler::Node"** [ %1535, %1531 ], [ %1569, %1643 ], [ %1667, %1666 ], [ %1709, %1671 ]
  %1717 = ptrtoint %"class.v8::internal::compiler::Node"** %1716 to i64
  store i64 %1717, i64* %1493, align 8
  store i64 %1540, i64* %1492, align 8
  store i64 %1537, i64* %1502, align 8
  br label %1718

1718:                                             ; preds = %1715, %1485, %1473
  %1719 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 11
  %1720 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1719, align 8
  %1721 = icmp eq %"class.v8::internal::compiler::Node"* %1720, null
  %1722 = ptrtoint %"class.v8::internal::compiler::Node"* %1720 to i64
  br i1 %1721, label %1963, label %1723

1723:                                             ; preds = %1718
  %1724 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %1725 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1724, align 8
  %1726 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1727 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1726, align 8
  %1728 = icmp eq %"class.v8::internal::compiler::Node"** %1725, %1727
  %1729 = ptrtoint %"class.v8::internal::compiler::Node"** %1727 to i64
  br i1 %1728, label %1735, label %1730

1730:                                             ; preds = %1723
  %1731 = bitcast %"class.v8::internal::compiler::Node"** %1725 to i64*
  store i64 %1722, i64* %1731, align 8
  %1732 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1725, i64 1
  %1733 = ptrtoint %"class.v8::internal::compiler::Node"** %1732 to i64
  %1734 = bitcast %"class.v8::internal::compiler::Node"*** %1724 to i64*
  store i64 %1733, i64* %1734, align 8
  br label %1963

1735:                                             ; preds = %1723
  %1736 = ptrtoint %"class.v8::internal::compiler::Node"** %1725 to i64
  %1737 = bitcast %"class.v8::internal::compiler::Node"*** %1724 to i64*
  %1738 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %1739 = load i64, i64* %1738, align 8
  %1740 = sub i64 %1736, %1739
  %1741 = ashr exact i64 %1740, 3
  %1742 = add nsw i64 %1741, 1
  %1743 = icmp ugt i64 %1742, 268435455
  br i1 %1743, label %1744, label %1746

1744:                                             ; preds = %1735
  %1745 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1745) #6
  unreachable

1746:                                             ; preds = %1735
  %1747 = bitcast %"class.v8::internal::compiler::Node"*** %1726 to i64*
  %1748 = sub i64 %1729, %1739
  %1749 = ashr exact i64 %1748, 3
  %1750 = icmp ult i64 %1749, 134217727
  br i1 %1750, label %1751, label %1756

1751:                                             ; preds = %1746
  %1752 = ashr exact i64 %1748, 2
  %1753 = icmp ult i64 %1752, %1742
  %1754 = select i1 %1753, i64 %1742, i64 %1752
  %1755 = icmp eq i64 %1754, 0
  br i1 %1755, label %1776, label %1756

1756:                                             ; preds = %1751, %1746
  %1757 = phi i64 [ %1754, %1751 ], [ 268435455, %1746 ]
  %1758 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %1759 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1758, align 8
  %1760 = shl i64 %1757, 3
  %1761 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1759, i64 0, i32 2
  %1762 = load i64, i64* %1761, align 8
  %1763 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1759, i64 0, i32 3
  %1764 = load i64, i64* %1763, align 8
  %1765 = sub i64 %1764, %1762
  %1766 = icmp ugt i64 %1760, %1765
  br i1 %1766, label %1767, label %1769, !prof !2

1767:                                             ; preds = %1756
  %1768 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1759, i64 %1760) #5
  br label %1771

1769:                                             ; preds = %1756
  %1770 = add i64 %1762, %1760
  store i64 %1770, i64* %1761, align 8
  br label %1771

1771:                                             ; preds = %1769, %1767
  %1772 = phi i64 [ %1768, %1767 ], [ %1762, %1769 ]
  %1773 = inttoptr i64 %1772 to %"class.v8::internal::compiler::Node"**
  %1774 = bitcast %"class.v8::internal::compiler::Node"** %1719 to i64*
  %1775 = load i64, i64* %1774, align 8
  br label %1776

1776:                                             ; preds = %1751, %1771
  %1777 = phi i64 [ %1775, %1771 ], [ %1722, %1751 ]
  %1778 = phi i64 [ %1757, %1771 ], [ 0, %1751 ]
  %1779 = phi %"class.v8::internal::compiler::Node"** [ %1773, %1771 ], [ null, %1751 ]
  %1780 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1779, i64 %1741
  %1781 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1779, i64 %1778
  %1782 = ptrtoint %"class.v8::internal::compiler::Node"** %1781 to i64
  %1783 = bitcast %"class.v8::internal::compiler::Node"** %1780 to i64*
  store i64 %1777, i64* %1783, align 8
  %1784 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1780, i64 1
  %1785 = ptrtoint %"class.v8::internal::compiler::Node"** %1784 to i64
  %1786 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %1787 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1786, align 8
  %1788 = ptrtoint %"class.v8::internal::compiler::Node"** %1787 to i64
  %1789 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1724, align 8
  %1790 = icmp eq %"class.v8::internal::compiler::Node"** %1789, %1787
  br i1 %1790, label %1960, label %1791

1791:                                             ; preds = %1776
  %1792 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 -1
  %1793 = ptrtoint %"class.v8::internal::compiler::Node"** %1792 to i64
  %1794 = sub i64 %1793, %1788
  %1795 = lshr i64 %1794, 3
  %1796 = add nuw nsw i64 %1795, 1
  %1797 = icmp ult i64 %1796, 4
  br i1 %1797, label %1890, label %1798

1798:                                             ; preds = %1791
  %1799 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 -1
  %1800 = ptrtoint %"class.v8::internal::compiler::Node"** %1799 to i64
  %1801 = sub i64 %1800, %1788
  %1802 = lshr i64 %1801, 3
  %1803 = xor i64 %1802, -1
  %1804 = add nsw i64 %1741, %1803
  %1805 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1779, i64 %1804
  %1806 = xor i64 %1802, -1
  %1807 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 %1806
  %1808 = icmp ult %"class.v8::internal::compiler::Node"** %1805, %1789
  %1809 = icmp ult %"class.v8::internal::compiler::Node"** %1807, %1780
  %1810 = and i1 %1808, %1809
  br i1 %1810, label %1890, label %1811

1811:                                             ; preds = %1798
  %1812 = and i64 %1796, 4611686018427387900
  %1813 = sub nsw i64 0, %1812
  %1814 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1780, i64 %1813
  %1815 = sub nsw i64 0, %1812
  %1816 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 %1815
  %1817 = add nsw i64 %1812, -4
  %1818 = lshr exact i64 %1817, 2
  %1819 = add nuw nsw i64 %1818, 1
  %1820 = and i64 %1819, 1
  %1821 = icmp eq i64 %1817, 0
  br i1 %1821, label %1866, label %1822

1822:                                             ; preds = %1811
  %1823 = sub nuw nsw i64 %1819, %1820
  %1824 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1780, i64 -1
  %1825 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 -1
  %1826 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1780, i64 -1
  %1827 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 -1
  br label %1828

1828:                                             ; preds = %1828, %1822
  %1829 = phi i64 [ 0, %1822 ], [ %1863, %1828 ]
  %1830 = phi i64 [ %1823, %1822 ], [ %1864, %1828 ]
  %1831 = sub i64 0, %1829
  %1832 = sub i64 0, %1829
  %1833 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1824, i64 %1831
  %1834 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1825, i64 %1832
  %1835 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1834, i64 -1
  %1836 = bitcast %"class.v8::internal::compiler::Node"** %1835 to <2 x i64>*
  %1837 = load <2 x i64>, <2 x i64>* %1836, align 8, !alias.scope !61
  %1838 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1834, i64 -2
  %1839 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1838, i64 -1
  %1840 = bitcast %"class.v8::internal::compiler::Node"** %1839 to <2 x i64>*
  %1841 = load <2 x i64>, <2 x i64>* %1840, align 8, !alias.scope !61
  %1842 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1833, i64 -1
  %1843 = bitcast %"class.v8::internal::compiler::Node"** %1842 to <2 x i64>*
  store <2 x i64> %1837, <2 x i64>* %1843, align 8, !alias.scope !64, !noalias !61
  %1844 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1833, i64 -2
  %1845 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1844, i64 -1
  %1846 = bitcast %"class.v8::internal::compiler::Node"** %1845 to <2 x i64>*
  store <2 x i64> %1841, <2 x i64>* %1846, align 8, !alias.scope !64, !noalias !61
  %1847 = sub nuw nsw i64 -4, %1829
  %1848 = sub nuw nsw i64 -4, %1829
  %1849 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1826, i64 %1847
  %1850 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1827, i64 %1848
  %1851 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1850, i64 -1
  %1852 = bitcast %"class.v8::internal::compiler::Node"** %1851 to <2 x i64>*
  %1853 = load <2 x i64>, <2 x i64>* %1852, align 8, !alias.scope !61
  %1854 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1850, i64 -2
  %1855 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1854, i64 -1
  %1856 = bitcast %"class.v8::internal::compiler::Node"** %1855 to <2 x i64>*
  %1857 = load <2 x i64>, <2 x i64>* %1856, align 8, !alias.scope !61
  %1858 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1849, i64 -1
  %1859 = bitcast %"class.v8::internal::compiler::Node"** %1858 to <2 x i64>*
  store <2 x i64> %1853, <2 x i64>* %1859, align 8, !alias.scope !64, !noalias !61
  %1860 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1849, i64 -2
  %1861 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1860, i64 -1
  %1862 = bitcast %"class.v8::internal::compiler::Node"** %1861 to <2 x i64>*
  store <2 x i64> %1857, <2 x i64>* %1862, align 8, !alias.scope !64, !noalias !61
  %1863 = add i64 %1829, 8
  %1864 = add i64 %1830, -2
  %1865 = icmp eq i64 %1864, 0
  br i1 %1865, label %1866, label %1828, !llvm.loop !66

1866:                                             ; preds = %1828, %1811
  %1867 = phi i64 [ 0, %1811 ], [ %1863, %1828 ]
  %1868 = icmp eq i64 %1820, 0
  br i1 %1868, label %1888, label %1869

1869:                                             ; preds = %1866
  %1870 = sub i64 0, %1867
  %1871 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1780, i64 -1
  %1872 = sub i64 0, %1867
  %1873 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1789, i64 -1
  %1874 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1871, i64 %1870
  %1875 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1873, i64 %1872
  %1876 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1875, i64 -1
  %1877 = bitcast %"class.v8::internal::compiler::Node"** %1876 to <2 x i64>*
  %1878 = load <2 x i64>, <2 x i64>* %1877, align 8, !alias.scope !61
  %1879 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1875, i64 -2
  %1880 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1879, i64 -1
  %1881 = bitcast %"class.v8::internal::compiler::Node"** %1880 to <2 x i64>*
  %1882 = load <2 x i64>, <2 x i64>* %1881, align 8, !alias.scope !61
  %1883 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1874, i64 -1
  %1884 = bitcast %"class.v8::internal::compiler::Node"** %1883 to <2 x i64>*
  store <2 x i64> %1878, <2 x i64>* %1884, align 8, !alias.scope !64, !noalias !61
  %1885 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1874, i64 -2
  %1886 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1885, i64 -1
  %1887 = bitcast %"class.v8::internal::compiler::Node"** %1886 to <2 x i64>*
  store <2 x i64> %1882, <2 x i64>* %1887, align 8, !alias.scope !64, !noalias !61
  br label %1888

1888:                                             ; preds = %1866, %1869
  %1889 = icmp eq i64 %1796, %1812
  br i1 %1889, label %1960, label %1890

1890:                                             ; preds = %1888, %1798, %1791
  %1891 = phi %"class.v8::internal::compiler::Node"** [ %1780, %1798 ], [ %1780, %1791 ], [ %1814, %1888 ]
  %1892 = phi %"class.v8::internal::compiler::Node"** [ %1789, %1798 ], [ %1789, %1791 ], [ %1816, %1888 ]
  %1893 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1892, i64 -1
  %1894 = ptrtoint %"class.v8::internal::compiler::Node"** %1893 to i64
  %1895 = sub i64 %1894, %1788
  %1896 = lshr i64 %1895, 3
  %1897 = add nuw nsw i64 %1896, 1
  %1898 = and i64 %1897, 7
  %1899 = icmp eq i64 %1898, 0
  br i1 %1899, label %1911, label %1900

1900:                                             ; preds = %1890, %1900
  %1901 = phi %"class.v8::internal::compiler::Node"** [ %1904, %1900 ], [ %1891, %1890 ]
  %1902 = phi %"class.v8::internal::compiler::Node"** [ %1905, %1900 ], [ %1892, %1890 ]
  %1903 = phi i64 [ %1909, %1900 ], [ %1898, %1890 ]
  %1904 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1901, i64 -1
  %1905 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1902, i64 -1
  %1906 = bitcast %"class.v8::internal::compiler::Node"** %1905 to i64*
  %1907 = load i64, i64* %1906, align 8
  %1908 = bitcast %"class.v8::internal::compiler::Node"** %1904 to i64*
  store i64 %1907, i64* %1908, align 8
  %1909 = add i64 %1903, -1
  %1910 = icmp eq i64 %1909, 0
  br i1 %1910, label %1911, label %1900, !llvm.loop !67

1911:                                             ; preds = %1900, %1890
  %1912 = phi %"class.v8::internal::compiler::Node"** [ undef, %1890 ], [ %1904, %1900 ]
  %1913 = phi %"class.v8::internal::compiler::Node"** [ %1891, %1890 ], [ %1904, %1900 ]
  %1914 = phi %"class.v8::internal::compiler::Node"** [ %1892, %1890 ], [ %1905, %1900 ]
  %1915 = icmp ult i64 %1895, 56
  br i1 %1915, label %1960, label %1916

1916:                                             ; preds = %1911, %1916
  %1917 = phi %"class.v8::internal::compiler::Node"** [ %1954, %1916 ], [ %1913, %1911 ]
  %1918 = phi %"class.v8::internal::compiler::Node"** [ %1955, %1916 ], [ %1914, %1911 ]
  %1919 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -1
  %1920 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -1
  %1921 = bitcast %"class.v8::internal::compiler::Node"** %1920 to i64*
  %1922 = load i64, i64* %1921, align 8
  %1923 = bitcast %"class.v8::internal::compiler::Node"** %1919 to i64*
  store i64 %1922, i64* %1923, align 8
  %1924 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -2
  %1925 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -2
  %1926 = bitcast %"class.v8::internal::compiler::Node"** %1925 to i64*
  %1927 = load i64, i64* %1926, align 8
  %1928 = bitcast %"class.v8::internal::compiler::Node"** %1924 to i64*
  store i64 %1927, i64* %1928, align 8
  %1929 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -3
  %1930 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -3
  %1931 = bitcast %"class.v8::internal::compiler::Node"** %1930 to i64*
  %1932 = load i64, i64* %1931, align 8
  %1933 = bitcast %"class.v8::internal::compiler::Node"** %1929 to i64*
  store i64 %1932, i64* %1933, align 8
  %1934 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -4
  %1935 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -4
  %1936 = bitcast %"class.v8::internal::compiler::Node"** %1935 to i64*
  %1937 = load i64, i64* %1936, align 8
  %1938 = bitcast %"class.v8::internal::compiler::Node"** %1934 to i64*
  store i64 %1937, i64* %1938, align 8
  %1939 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -5
  %1940 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -5
  %1941 = bitcast %"class.v8::internal::compiler::Node"** %1940 to i64*
  %1942 = load i64, i64* %1941, align 8
  %1943 = bitcast %"class.v8::internal::compiler::Node"** %1939 to i64*
  store i64 %1942, i64* %1943, align 8
  %1944 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -6
  %1945 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -6
  %1946 = bitcast %"class.v8::internal::compiler::Node"** %1945 to i64*
  %1947 = load i64, i64* %1946, align 8
  %1948 = bitcast %"class.v8::internal::compiler::Node"** %1944 to i64*
  store i64 %1947, i64* %1948, align 8
  %1949 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -7
  %1950 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -7
  %1951 = bitcast %"class.v8::internal::compiler::Node"** %1950 to i64*
  %1952 = load i64, i64* %1951, align 8
  %1953 = bitcast %"class.v8::internal::compiler::Node"** %1949 to i64*
  store i64 %1952, i64* %1953, align 8
  %1954 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1917, i64 -8
  %1955 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1918, i64 -8
  %1956 = bitcast %"class.v8::internal::compiler::Node"** %1955 to i64*
  %1957 = load i64, i64* %1956, align 8
  %1958 = bitcast %"class.v8::internal::compiler::Node"** %1954 to i64*
  store i64 %1957, i64* %1958, align 8
  %1959 = icmp eq %"class.v8::internal::compiler::Node"** %1955, %1787
  br i1 %1959, label %1960, label %1916, !llvm.loop !68

1960:                                             ; preds = %1911, %1916, %1888, %1776
  %1961 = phi %"class.v8::internal::compiler::Node"** [ %1780, %1776 ], [ %1814, %1888 ], [ %1912, %1911 ], [ %1954, %1916 ]
  %1962 = ptrtoint %"class.v8::internal::compiler::Node"** %1961 to i64
  store i64 %1962, i64* %1738, align 8
  store i64 %1785, i64* %1737, align 8
  store i64 %1782, i64* %1747, align 8
  br label %1963

1963:                                             ; preds = %1960, %1730, %1718
  %1964 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 12
  %1965 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1964, align 8
  %1966 = icmp eq %"class.v8::internal::compiler::Node"* %1965, null
  %1967 = ptrtoint %"class.v8::internal::compiler::Node"* %1965 to i64
  br i1 %1966, label %2208, label %1968

1968:                                             ; preds = %1963
  %1969 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %1970 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1969, align 8
  %1971 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %1972 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1971, align 8
  %1973 = icmp eq %"class.v8::internal::compiler::Node"** %1970, %1972
  %1974 = ptrtoint %"class.v8::internal::compiler::Node"** %1972 to i64
  br i1 %1973, label %1980, label %1975

1975:                                             ; preds = %1968
  %1976 = bitcast %"class.v8::internal::compiler::Node"** %1970 to i64*
  store i64 %1967, i64* %1976, align 8
  %1977 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1970, i64 1
  %1978 = ptrtoint %"class.v8::internal::compiler::Node"** %1977 to i64
  %1979 = bitcast %"class.v8::internal::compiler::Node"*** %1969 to i64*
  store i64 %1978, i64* %1979, align 8
  br label %2208

1980:                                             ; preds = %1968
  %1981 = ptrtoint %"class.v8::internal::compiler::Node"** %1970 to i64
  %1982 = bitcast %"class.v8::internal::compiler::Node"*** %1969 to i64*
  %1983 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %1984 = load i64, i64* %1983, align 8
  %1985 = sub i64 %1981, %1984
  %1986 = ashr exact i64 %1985, 3
  %1987 = add nsw i64 %1986, 1
  %1988 = icmp ugt i64 %1987, 268435455
  br i1 %1988, label %1989, label %1991

1989:                                             ; preds = %1980
  %1990 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1990) #6
  unreachable

1991:                                             ; preds = %1980
  %1992 = bitcast %"class.v8::internal::compiler::Node"*** %1971 to i64*
  %1993 = sub i64 %1974, %1984
  %1994 = ashr exact i64 %1993, 3
  %1995 = icmp ult i64 %1994, 134217727
  br i1 %1995, label %1996, label %2001

1996:                                             ; preds = %1991
  %1997 = ashr exact i64 %1993, 2
  %1998 = icmp ult i64 %1997, %1987
  %1999 = select i1 %1998, i64 %1987, i64 %1997
  %2000 = icmp eq i64 %1999, 0
  br i1 %2000, label %2021, label %2001

2001:                                             ; preds = %1996, %1991
  %2002 = phi i64 [ %1999, %1996 ], [ 268435455, %1991 ]
  %2003 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %2004 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2003, align 8
  %2005 = shl i64 %2002, 3
  %2006 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2004, i64 0, i32 2
  %2007 = load i64, i64* %2006, align 8
  %2008 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2004, i64 0, i32 3
  %2009 = load i64, i64* %2008, align 8
  %2010 = sub i64 %2009, %2007
  %2011 = icmp ugt i64 %2005, %2010
  br i1 %2011, label %2012, label %2014, !prof !2

2012:                                             ; preds = %2001
  %2013 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2004, i64 %2005) #5
  br label %2016

2014:                                             ; preds = %2001
  %2015 = add i64 %2007, %2005
  store i64 %2015, i64* %2006, align 8
  br label %2016

2016:                                             ; preds = %2014, %2012
  %2017 = phi i64 [ %2013, %2012 ], [ %2007, %2014 ]
  %2018 = inttoptr i64 %2017 to %"class.v8::internal::compiler::Node"**
  %2019 = bitcast %"class.v8::internal::compiler::Node"** %1964 to i64*
  %2020 = load i64, i64* %2019, align 8
  br label %2021

2021:                                             ; preds = %1996, %2016
  %2022 = phi i64 [ %2020, %2016 ], [ %1967, %1996 ]
  %2023 = phi i64 [ %2002, %2016 ], [ 0, %1996 ]
  %2024 = phi %"class.v8::internal::compiler::Node"** [ %2018, %2016 ], [ null, %1996 ]
  %2025 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2024, i64 %1986
  %2026 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2024, i64 %2023
  %2027 = ptrtoint %"class.v8::internal::compiler::Node"** %2026 to i64
  %2028 = bitcast %"class.v8::internal::compiler::Node"** %2025 to i64*
  store i64 %2022, i64* %2028, align 8
  %2029 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2025, i64 1
  %2030 = ptrtoint %"class.v8::internal::compiler::Node"** %2029 to i64
  %2031 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %2032 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2031, align 8
  %2033 = ptrtoint %"class.v8::internal::compiler::Node"** %2032 to i64
  %2034 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1969, align 8
  %2035 = icmp eq %"class.v8::internal::compiler::Node"** %2034, %2032
  br i1 %2035, label %2205, label %2036

2036:                                             ; preds = %2021
  %2037 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 -1
  %2038 = ptrtoint %"class.v8::internal::compiler::Node"** %2037 to i64
  %2039 = sub i64 %2038, %2033
  %2040 = lshr i64 %2039, 3
  %2041 = add nuw nsw i64 %2040, 1
  %2042 = icmp ult i64 %2041, 4
  br i1 %2042, label %2135, label %2043

2043:                                             ; preds = %2036
  %2044 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 -1
  %2045 = ptrtoint %"class.v8::internal::compiler::Node"** %2044 to i64
  %2046 = sub i64 %2045, %2033
  %2047 = lshr i64 %2046, 3
  %2048 = xor i64 %2047, -1
  %2049 = add nsw i64 %1986, %2048
  %2050 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2024, i64 %2049
  %2051 = xor i64 %2047, -1
  %2052 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 %2051
  %2053 = icmp ult %"class.v8::internal::compiler::Node"** %2050, %2034
  %2054 = icmp ult %"class.v8::internal::compiler::Node"** %2052, %2025
  %2055 = and i1 %2053, %2054
  br i1 %2055, label %2135, label %2056

2056:                                             ; preds = %2043
  %2057 = and i64 %2041, 4611686018427387900
  %2058 = sub nsw i64 0, %2057
  %2059 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2025, i64 %2058
  %2060 = sub nsw i64 0, %2057
  %2061 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 %2060
  %2062 = add nsw i64 %2057, -4
  %2063 = lshr exact i64 %2062, 2
  %2064 = add nuw nsw i64 %2063, 1
  %2065 = and i64 %2064, 1
  %2066 = icmp eq i64 %2062, 0
  br i1 %2066, label %2111, label %2067

2067:                                             ; preds = %2056
  %2068 = sub nuw nsw i64 %2064, %2065
  %2069 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2025, i64 -1
  %2070 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 -1
  %2071 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2025, i64 -1
  %2072 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 -1
  br label %2073

2073:                                             ; preds = %2073, %2067
  %2074 = phi i64 [ 0, %2067 ], [ %2108, %2073 ]
  %2075 = phi i64 [ %2068, %2067 ], [ %2109, %2073 ]
  %2076 = sub i64 0, %2074
  %2077 = sub i64 0, %2074
  %2078 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2069, i64 %2076
  %2079 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2070, i64 %2077
  %2080 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2079, i64 -1
  %2081 = bitcast %"class.v8::internal::compiler::Node"** %2080 to <2 x i64>*
  %2082 = load <2 x i64>, <2 x i64>* %2081, align 8, !alias.scope !69
  %2083 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2079, i64 -2
  %2084 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2083, i64 -1
  %2085 = bitcast %"class.v8::internal::compiler::Node"** %2084 to <2 x i64>*
  %2086 = load <2 x i64>, <2 x i64>* %2085, align 8, !alias.scope !69
  %2087 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2078, i64 -1
  %2088 = bitcast %"class.v8::internal::compiler::Node"** %2087 to <2 x i64>*
  store <2 x i64> %2082, <2 x i64>* %2088, align 8, !alias.scope !72, !noalias !69
  %2089 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2078, i64 -2
  %2090 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2089, i64 -1
  %2091 = bitcast %"class.v8::internal::compiler::Node"** %2090 to <2 x i64>*
  store <2 x i64> %2086, <2 x i64>* %2091, align 8, !alias.scope !72, !noalias !69
  %2092 = sub nuw nsw i64 -4, %2074
  %2093 = sub nuw nsw i64 -4, %2074
  %2094 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2071, i64 %2092
  %2095 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2072, i64 %2093
  %2096 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2095, i64 -1
  %2097 = bitcast %"class.v8::internal::compiler::Node"** %2096 to <2 x i64>*
  %2098 = load <2 x i64>, <2 x i64>* %2097, align 8, !alias.scope !69
  %2099 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2095, i64 -2
  %2100 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2099, i64 -1
  %2101 = bitcast %"class.v8::internal::compiler::Node"** %2100 to <2 x i64>*
  %2102 = load <2 x i64>, <2 x i64>* %2101, align 8, !alias.scope !69
  %2103 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2094, i64 -1
  %2104 = bitcast %"class.v8::internal::compiler::Node"** %2103 to <2 x i64>*
  store <2 x i64> %2098, <2 x i64>* %2104, align 8, !alias.scope !72, !noalias !69
  %2105 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2094, i64 -2
  %2106 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2105, i64 -1
  %2107 = bitcast %"class.v8::internal::compiler::Node"** %2106 to <2 x i64>*
  store <2 x i64> %2102, <2 x i64>* %2107, align 8, !alias.scope !72, !noalias !69
  %2108 = add i64 %2074, 8
  %2109 = add i64 %2075, -2
  %2110 = icmp eq i64 %2109, 0
  br i1 %2110, label %2111, label %2073, !llvm.loop !74

2111:                                             ; preds = %2073, %2056
  %2112 = phi i64 [ 0, %2056 ], [ %2108, %2073 ]
  %2113 = icmp eq i64 %2065, 0
  br i1 %2113, label %2133, label %2114

2114:                                             ; preds = %2111
  %2115 = sub i64 0, %2112
  %2116 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2025, i64 -1
  %2117 = sub i64 0, %2112
  %2118 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2034, i64 -1
  %2119 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2116, i64 %2115
  %2120 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2118, i64 %2117
  %2121 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2120, i64 -1
  %2122 = bitcast %"class.v8::internal::compiler::Node"** %2121 to <2 x i64>*
  %2123 = load <2 x i64>, <2 x i64>* %2122, align 8, !alias.scope !69
  %2124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2120, i64 -2
  %2125 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2124, i64 -1
  %2126 = bitcast %"class.v8::internal::compiler::Node"** %2125 to <2 x i64>*
  %2127 = load <2 x i64>, <2 x i64>* %2126, align 8, !alias.scope !69
  %2128 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2119, i64 -1
  %2129 = bitcast %"class.v8::internal::compiler::Node"** %2128 to <2 x i64>*
  store <2 x i64> %2123, <2 x i64>* %2129, align 8, !alias.scope !72, !noalias !69
  %2130 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2119, i64 -2
  %2131 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2130, i64 -1
  %2132 = bitcast %"class.v8::internal::compiler::Node"** %2131 to <2 x i64>*
  store <2 x i64> %2127, <2 x i64>* %2132, align 8, !alias.scope !72, !noalias !69
  br label %2133

2133:                                             ; preds = %2111, %2114
  %2134 = icmp eq i64 %2041, %2057
  br i1 %2134, label %2205, label %2135

2135:                                             ; preds = %2133, %2043, %2036
  %2136 = phi %"class.v8::internal::compiler::Node"** [ %2025, %2043 ], [ %2025, %2036 ], [ %2059, %2133 ]
  %2137 = phi %"class.v8::internal::compiler::Node"** [ %2034, %2043 ], [ %2034, %2036 ], [ %2061, %2133 ]
  %2138 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2137, i64 -1
  %2139 = ptrtoint %"class.v8::internal::compiler::Node"** %2138 to i64
  %2140 = sub i64 %2139, %2033
  %2141 = lshr i64 %2140, 3
  %2142 = add nuw nsw i64 %2141, 1
  %2143 = and i64 %2142, 7
  %2144 = icmp eq i64 %2143, 0
  br i1 %2144, label %2156, label %2145

2145:                                             ; preds = %2135, %2145
  %2146 = phi %"class.v8::internal::compiler::Node"** [ %2149, %2145 ], [ %2136, %2135 ]
  %2147 = phi %"class.v8::internal::compiler::Node"** [ %2150, %2145 ], [ %2137, %2135 ]
  %2148 = phi i64 [ %2154, %2145 ], [ %2143, %2135 ]
  %2149 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2146, i64 -1
  %2150 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2147, i64 -1
  %2151 = bitcast %"class.v8::internal::compiler::Node"** %2150 to i64*
  %2152 = load i64, i64* %2151, align 8
  %2153 = bitcast %"class.v8::internal::compiler::Node"** %2149 to i64*
  store i64 %2152, i64* %2153, align 8
  %2154 = add i64 %2148, -1
  %2155 = icmp eq i64 %2154, 0
  br i1 %2155, label %2156, label %2145, !llvm.loop !75

2156:                                             ; preds = %2145, %2135
  %2157 = phi %"class.v8::internal::compiler::Node"** [ undef, %2135 ], [ %2149, %2145 ]
  %2158 = phi %"class.v8::internal::compiler::Node"** [ %2136, %2135 ], [ %2149, %2145 ]
  %2159 = phi %"class.v8::internal::compiler::Node"** [ %2137, %2135 ], [ %2150, %2145 ]
  %2160 = icmp ult i64 %2140, 56
  br i1 %2160, label %2205, label %2161

2161:                                             ; preds = %2156, %2161
  %2162 = phi %"class.v8::internal::compiler::Node"** [ %2199, %2161 ], [ %2158, %2156 ]
  %2163 = phi %"class.v8::internal::compiler::Node"** [ %2200, %2161 ], [ %2159, %2156 ]
  %2164 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -1
  %2165 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -1
  %2166 = bitcast %"class.v8::internal::compiler::Node"** %2165 to i64*
  %2167 = load i64, i64* %2166, align 8
  %2168 = bitcast %"class.v8::internal::compiler::Node"** %2164 to i64*
  store i64 %2167, i64* %2168, align 8
  %2169 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -2
  %2170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -2
  %2171 = bitcast %"class.v8::internal::compiler::Node"** %2170 to i64*
  %2172 = load i64, i64* %2171, align 8
  %2173 = bitcast %"class.v8::internal::compiler::Node"** %2169 to i64*
  store i64 %2172, i64* %2173, align 8
  %2174 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -3
  %2175 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -3
  %2176 = bitcast %"class.v8::internal::compiler::Node"** %2175 to i64*
  %2177 = load i64, i64* %2176, align 8
  %2178 = bitcast %"class.v8::internal::compiler::Node"** %2174 to i64*
  store i64 %2177, i64* %2178, align 8
  %2179 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -4
  %2180 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -4
  %2181 = bitcast %"class.v8::internal::compiler::Node"** %2180 to i64*
  %2182 = load i64, i64* %2181, align 8
  %2183 = bitcast %"class.v8::internal::compiler::Node"** %2179 to i64*
  store i64 %2182, i64* %2183, align 8
  %2184 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -5
  %2185 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -5
  %2186 = bitcast %"class.v8::internal::compiler::Node"** %2185 to i64*
  %2187 = load i64, i64* %2186, align 8
  %2188 = bitcast %"class.v8::internal::compiler::Node"** %2184 to i64*
  store i64 %2187, i64* %2188, align 8
  %2189 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -6
  %2190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -6
  %2191 = bitcast %"class.v8::internal::compiler::Node"** %2190 to i64*
  %2192 = load i64, i64* %2191, align 8
  %2193 = bitcast %"class.v8::internal::compiler::Node"** %2189 to i64*
  store i64 %2192, i64* %2193, align 8
  %2194 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -7
  %2195 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -7
  %2196 = bitcast %"class.v8::internal::compiler::Node"** %2195 to i64*
  %2197 = load i64, i64* %2196, align 8
  %2198 = bitcast %"class.v8::internal::compiler::Node"** %2194 to i64*
  store i64 %2197, i64* %2198, align 8
  %2199 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2162, i64 -8
  %2200 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2163, i64 -8
  %2201 = bitcast %"class.v8::internal::compiler::Node"** %2200 to i64*
  %2202 = load i64, i64* %2201, align 8
  %2203 = bitcast %"class.v8::internal::compiler::Node"** %2199 to i64*
  store i64 %2202, i64* %2203, align 8
  %2204 = icmp eq %"class.v8::internal::compiler::Node"** %2200, %2032
  br i1 %2204, label %2205, label %2161, !llvm.loop !76

2205:                                             ; preds = %2156, %2161, %2133, %2021
  %2206 = phi %"class.v8::internal::compiler::Node"** [ %2025, %2021 ], [ %2059, %2133 ], [ %2157, %2156 ], [ %2199, %2161 ]
  %2207 = ptrtoint %"class.v8::internal::compiler::Node"** %2206 to i64
  store i64 %2207, i64* %1983, align 8
  store i64 %2030, i64* %1982, align 8
  store i64 %2027, i64* %1992, align 8
  br label %2208

2208:                                             ; preds = %2205, %1975, %1963
  %2209 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 13
  %2210 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2209, align 8
  %2211 = icmp eq %"class.v8::internal::compiler::Node"* %2210, null
  %2212 = ptrtoint %"class.v8::internal::compiler::Node"* %2210 to i64
  br i1 %2211, label %2453, label %2213

2213:                                             ; preds = %2208
  %2214 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %2215 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2214, align 8
  %2216 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2217 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2216, align 8
  %2218 = icmp eq %"class.v8::internal::compiler::Node"** %2215, %2217
  %2219 = ptrtoint %"class.v8::internal::compiler::Node"** %2217 to i64
  br i1 %2218, label %2225, label %2220

2220:                                             ; preds = %2213
  %2221 = bitcast %"class.v8::internal::compiler::Node"** %2215 to i64*
  store i64 %2212, i64* %2221, align 8
  %2222 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2215, i64 1
  %2223 = ptrtoint %"class.v8::internal::compiler::Node"** %2222 to i64
  %2224 = bitcast %"class.v8::internal::compiler::Node"*** %2214 to i64*
  store i64 %2223, i64* %2224, align 8
  br label %2453

2225:                                             ; preds = %2213
  %2226 = ptrtoint %"class.v8::internal::compiler::Node"** %2215 to i64
  %2227 = bitcast %"class.v8::internal::compiler::Node"*** %2214 to i64*
  %2228 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %2229 = load i64, i64* %2228, align 8
  %2230 = sub i64 %2226, %2229
  %2231 = ashr exact i64 %2230, 3
  %2232 = add nsw i64 %2231, 1
  %2233 = icmp ugt i64 %2232, 268435455
  br i1 %2233, label %2234, label %2236

2234:                                             ; preds = %2225
  %2235 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2235) #6
  unreachable

2236:                                             ; preds = %2225
  %2237 = bitcast %"class.v8::internal::compiler::Node"*** %2216 to i64*
  %2238 = sub i64 %2219, %2229
  %2239 = ashr exact i64 %2238, 3
  %2240 = icmp ult i64 %2239, 134217727
  br i1 %2240, label %2241, label %2246

2241:                                             ; preds = %2236
  %2242 = ashr exact i64 %2238, 2
  %2243 = icmp ult i64 %2242, %2232
  %2244 = select i1 %2243, i64 %2232, i64 %2242
  %2245 = icmp eq i64 %2244, 0
  br i1 %2245, label %2266, label %2246

2246:                                             ; preds = %2241, %2236
  %2247 = phi i64 [ %2244, %2241 ], [ 268435455, %2236 ]
  %2248 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %2249 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2248, align 8
  %2250 = shl i64 %2247, 3
  %2251 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2249, i64 0, i32 2
  %2252 = load i64, i64* %2251, align 8
  %2253 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2249, i64 0, i32 3
  %2254 = load i64, i64* %2253, align 8
  %2255 = sub i64 %2254, %2252
  %2256 = icmp ugt i64 %2250, %2255
  br i1 %2256, label %2257, label %2259, !prof !2

2257:                                             ; preds = %2246
  %2258 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2249, i64 %2250) #5
  br label %2261

2259:                                             ; preds = %2246
  %2260 = add i64 %2252, %2250
  store i64 %2260, i64* %2251, align 8
  br label %2261

2261:                                             ; preds = %2259, %2257
  %2262 = phi i64 [ %2258, %2257 ], [ %2252, %2259 ]
  %2263 = inttoptr i64 %2262 to %"class.v8::internal::compiler::Node"**
  %2264 = bitcast %"class.v8::internal::compiler::Node"** %2209 to i64*
  %2265 = load i64, i64* %2264, align 8
  br label %2266

2266:                                             ; preds = %2241, %2261
  %2267 = phi i64 [ %2265, %2261 ], [ %2212, %2241 ]
  %2268 = phi i64 [ %2247, %2261 ], [ 0, %2241 ]
  %2269 = phi %"class.v8::internal::compiler::Node"** [ %2263, %2261 ], [ null, %2241 ]
  %2270 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2269, i64 %2231
  %2271 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2269, i64 %2268
  %2272 = ptrtoint %"class.v8::internal::compiler::Node"** %2271 to i64
  %2273 = bitcast %"class.v8::internal::compiler::Node"** %2270 to i64*
  store i64 %2267, i64* %2273, align 8
  %2274 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2270, i64 1
  %2275 = ptrtoint %"class.v8::internal::compiler::Node"** %2274 to i64
  %2276 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %2277 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2276, align 8
  %2278 = ptrtoint %"class.v8::internal::compiler::Node"** %2277 to i64
  %2279 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2214, align 8
  %2280 = icmp eq %"class.v8::internal::compiler::Node"** %2279, %2277
  br i1 %2280, label %2450, label %2281

2281:                                             ; preds = %2266
  %2282 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 -1
  %2283 = ptrtoint %"class.v8::internal::compiler::Node"** %2282 to i64
  %2284 = sub i64 %2283, %2278
  %2285 = lshr i64 %2284, 3
  %2286 = add nuw nsw i64 %2285, 1
  %2287 = icmp ult i64 %2286, 4
  br i1 %2287, label %2380, label %2288

2288:                                             ; preds = %2281
  %2289 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 -1
  %2290 = ptrtoint %"class.v8::internal::compiler::Node"** %2289 to i64
  %2291 = sub i64 %2290, %2278
  %2292 = lshr i64 %2291, 3
  %2293 = xor i64 %2292, -1
  %2294 = add nsw i64 %2231, %2293
  %2295 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2269, i64 %2294
  %2296 = xor i64 %2292, -1
  %2297 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 %2296
  %2298 = icmp ult %"class.v8::internal::compiler::Node"** %2295, %2279
  %2299 = icmp ult %"class.v8::internal::compiler::Node"** %2297, %2270
  %2300 = and i1 %2298, %2299
  br i1 %2300, label %2380, label %2301

2301:                                             ; preds = %2288
  %2302 = and i64 %2286, 4611686018427387900
  %2303 = sub nsw i64 0, %2302
  %2304 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2270, i64 %2303
  %2305 = sub nsw i64 0, %2302
  %2306 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 %2305
  %2307 = add nsw i64 %2302, -4
  %2308 = lshr exact i64 %2307, 2
  %2309 = add nuw nsw i64 %2308, 1
  %2310 = and i64 %2309, 1
  %2311 = icmp eq i64 %2307, 0
  br i1 %2311, label %2356, label %2312

2312:                                             ; preds = %2301
  %2313 = sub nuw nsw i64 %2309, %2310
  %2314 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2270, i64 -1
  %2315 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 -1
  %2316 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2270, i64 -1
  %2317 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 -1
  br label %2318

2318:                                             ; preds = %2318, %2312
  %2319 = phi i64 [ 0, %2312 ], [ %2353, %2318 ]
  %2320 = phi i64 [ %2313, %2312 ], [ %2354, %2318 ]
  %2321 = sub i64 0, %2319
  %2322 = sub i64 0, %2319
  %2323 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2314, i64 %2321
  %2324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2315, i64 %2322
  %2325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2324, i64 -1
  %2326 = bitcast %"class.v8::internal::compiler::Node"** %2325 to <2 x i64>*
  %2327 = load <2 x i64>, <2 x i64>* %2326, align 8, !alias.scope !77
  %2328 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2324, i64 -2
  %2329 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2328, i64 -1
  %2330 = bitcast %"class.v8::internal::compiler::Node"** %2329 to <2 x i64>*
  %2331 = load <2 x i64>, <2 x i64>* %2330, align 8, !alias.scope !77
  %2332 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2323, i64 -1
  %2333 = bitcast %"class.v8::internal::compiler::Node"** %2332 to <2 x i64>*
  store <2 x i64> %2327, <2 x i64>* %2333, align 8, !alias.scope !80, !noalias !77
  %2334 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2323, i64 -2
  %2335 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2334, i64 -1
  %2336 = bitcast %"class.v8::internal::compiler::Node"** %2335 to <2 x i64>*
  store <2 x i64> %2331, <2 x i64>* %2336, align 8, !alias.scope !80, !noalias !77
  %2337 = sub nuw nsw i64 -4, %2319
  %2338 = sub nuw nsw i64 -4, %2319
  %2339 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2316, i64 %2337
  %2340 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2317, i64 %2338
  %2341 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2340, i64 -1
  %2342 = bitcast %"class.v8::internal::compiler::Node"** %2341 to <2 x i64>*
  %2343 = load <2 x i64>, <2 x i64>* %2342, align 8, !alias.scope !77
  %2344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2340, i64 -2
  %2345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2344, i64 -1
  %2346 = bitcast %"class.v8::internal::compiler::Node"** %2345 to <2 x i64>*
  %2347 = load <2 x i64>, <2 x i64>* %2346, align 8, !alias.scope !77
  %2348 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2339, i64 -1
  %2349 = bitcast %"class.v8::internal::compiler::Node"** %2348 to <2 x i64>*
  store <2 x i64> %2343, <2 x i64>* %2349, align 8, !alias.scope !80, !noalias !77
  %2350 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2339, i64 -2
  %2351 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2350, i64 -1
  %2352 = bitcast %"class.v8::internal::compiler::Node"** %2351 to <2 x i64>*
  store <2 x i64> %2347, <2 x i64>* %2352, align 8, !alias.scope !80, !noalias !77
  %2353 = add i64 %2319, 8
  %2354 = add i64 %2320, -2
  %2355 = icmp eq i64 %2354, 0
  br i1 %2355, label %2356, label %2318, !llvm.loop !82

2356:                                             ; preds = %2318, %2301
  %2357 = phi i64 [ 0, %2301 ], [ %2353, %2318 ]
  %2358 = icmp eq i64 %2310, 0
  br i1 %2358, label %2378, label %2359

2359:                                             ; preds = %2356
  %2360 = sub i64 0, %2357
  %2361 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2270, i64 -1
  %2362 = sub i64 0, %2357
  %2363 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2279, i64 -1
  %2364 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2361, i64 %2360
  %2365 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2363, i64 %2362
  %2366 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2365, i64 -1
  %2367 = bitcast %"class.v8::internal::compiler::Node"** %2366 to <2 x i64>*
  %2368 = load <2 x i64>, <2 x i64>* %2367, align 8, !alias.scope !77
  %2369 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2365, i64 -2
  %2370 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2369, i64 -1
  %2371 = bitcast %"class.v8::internal::compiler::Node"** %2370 to <2 x i64>*
  %2372 = load <2 x i64>, <2 x i64>* %2371, align 8, !alias.scope !77
  %2373 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2364, i64 -1
  %2374 = bitcast %"class.v8::internal::compiler::Node"** %2373 to <2 x i64>*
  store <2 x i64> %2368, <2 x i64>* %2374, align 8, !alias.scope !80, !noalias !77
  %2375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2364, i64 -2
  %2376 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2375, i64 -1
  %2377 = bitcast %"class.v8::internal::compiler::Node"** %2376 to <2 x i64>*
  store <2 x i64> %2372, <2 x i64>* %2377, align 8, !alias.scope !80, !noalias !77
  br label %2378

2378:                                             ; preds = %2356, %2359
  %2379 = icmp eq i64 %2286, %2302
  br i1 %2379, label %2450, label %2380

2380:                                             ; preds = %2378, %2288, %2281
  %2381 = phi %"class.v8::internal::compiler::Node"** [ %2270, %2288 ], [ %2270, %2281 ], [ %2304, %2378 ]
  %2382 = phi %"class.v8::internal::compiler::Node"** [ %2279, %2288 ], [ %2279, %2281 ], [ %2306, %2378 ]
  %2383 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2382, i64 -1
  %2384 = ptrtoint %"class.v8::internal::compiler::Node"** %2383 to i64
  %2385 = sub i64 %2384, %2278
  %2386 = lshr i64 %2385, 3
  %2387 = add nuw nsw i64 %2386, 1
  %2388 = and i64 %2387, 7
  %2389 = icmp eq i64 %2388, 0
  br i1 %2389, label %2401, label %2390

2390:                                             ; preds = %2380, %2390
  %2391 = phi %"class.v8::internal::compiler::Node"** [ %2394, %2390 ], [ %2381, %2380 ]
  %2392 = phi %"class.v8::internal::compiler::Node"** [ %2395, %2390 ], [ %2382, %2380 ]
  %2393 = phi i64 [ %2399, %2390 ], [ %2388, %2380 ]
  %2394 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2391, i64 -1
  %2395 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2392, i64 -1
  %2396 = bitcast %"class.v8::internal::compiler::Node"** %2395 to i64*
  %2397 = load i64, i64* %2396, align 8
  %2398 = bitcast %"class.v8::internal::compiler::Node"** %2394 to i64*
  store i64 %2397, i64* %2398, align 8
  %2399 = add i64 %2393, -1
  %2400 = icmp eq i64 %2399, 0
  br i1 %2400, label %2401, label %2390, !llvm.loop !83

2401:                                             ; preds = %2390, %2380
  %2402 = phi %"class.v8::internal::compiler::Node"** [ undef, %2380 ], [ %2394, %2390 ]
  %2403 = phi %"class.v8::internal::compiler::Node"** [ %2381, %2380 ], [ %2394, %2390 ]
  %2404 = phi %"class.v8::internal::compiler::Node"** [ %2382, %2380 ], [ %2395, %2390 ]
  %2405 = icmp ult i64 %2385, 56
  br i1 %2405, label %2450, label %2406

2406:                                             ; preds = %2401, %2406
  %2407 = phi %"class.v8::internal::compiler::Node"** [ %2444, %2406 ], [ %2403, %2401 ]
  %2408 = phi %"class.v8::internal::compiler::Node"** [ %2445, %2406 ], [ %2404, %2401 ]
  %2409 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -1
  %2410 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -1
  %2411 = bitcast %"class.v8::internal::compiler::Node"** %2410 to i64*
  %2412 = load i64, i64* %2411, align 8
  %2413 = bitcast %"class.v8::internal::compiler::Node"** %2409 to i64*
  store i64 %2412, i64* %2413, align 8
  %2414 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -2
  %2415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -2
  %2416 = bitcast %"class.v8::internal::compiler::Node"** %2415 to i64*
  %2417 = load i64, i64* %2416, align 8
  %2418 = bitcast %"class.v8::internal::compiler::Node"** %2414 to i64*
  store i64 %2417, i64* %2418, align 8
  %2419 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -3
  %2420 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -3
  %2421 = bitcast %"class.v8::internal::compiler::Node"** %2420 to i64*
  %2422 = load i64, i64* %2421, align 8
  %2423 = bitcast %"class.v8::internal::compiler::Node"** %2419 to i64*
  store i64 %2422, i64* %2423, align 8
  %2424 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -4
  %2425 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -4
  %2426 = bitcast %"class.v8::internal::compiler::Node"** %2425 to i64*
  %2427 = load i64, i64* %2426, align 8
  %2428 = bitcast %"class.v8::internal::compiler::Node"** %2424 to i64*
  store i64 %2427, i64* %2428, align 8
  %2429 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -5
  %2430 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -5
  %2431 = bitcast %"class.v8::internal::compiler::Node"** %2430 to i64*
  %2432 = load i64, i64* %2431, align 8
  %2433 = bitcast %"class.v8::internal::compiler::Node"** %2429 to i64*
  store i64 %2432, i64* %2433, align 8
  %2434 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -6
  %2435 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -6
  %2436 = bitcast %"class.v8::internal::compiler::Node"** %2435 to i64*
  %2437 = load i64, i64* %2436, align 8
  %2438 = bitcast %"class.v8::internal::compiler::Node"** %2434 to i64*
  store i64 %2437, i64* %2438, align 8
  %2439 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -7
  %2440 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -7
  %2441 = bitcast %"class.v8::internal::compiler::Node"** %2440 to i64*
  %2442 = load i64, i64* %2441, align 8
  %2443 = bitcast %"class.v8::internal::compiler::Node"** %2439 to i64*
  store i64 %2442, i64* %2443, align 8
  %2444 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2407, i64 -8
  %2445 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2408, i64 -8
  %2446 = bitcast %"class.v8::internal::compiler::Node"** %2445 to i64*
  %2447 = load i64, i64* %2446, align 8
  %2448 = bitcast %"class.v8::internal::compiler::Node"** %2444 to i64*
  store i64 %2447, i64* %2448, align 8
  %2449 = icmp eq %"class.v8::internal::compiler::Node"** %2445, %2277
  br i1 %2449, label %2450, label %2406, !llvm.loop !84

2450:                                             ; preds = %2401, %2406, %2378, %2266
  %2451 = phi %"class.v8::internal::compiler::Node"** [ %2270, %2266 ], [ %2304, %2378 ], [ %2402, %2401 ], [ %2444, %2406 ]
  %2452 = ptrtoint %"class.v8::internal::compiler::Node"** %2451 to i64
  store i64 %2452, i64* %2228, align 8
  store i64 %2275, i64* %2227, align 8
  store i64 %2272, i64* %2237, align 8
  br label %2453

2453:                                             ; preds = %2450, %2220, %2208
  %2454 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 14
  %2455 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2454, align 8
  %2456 = icmp eq %"class.v8::internal::compiler::Node"* %2455, null
  %2457 = ptrtoint %"class.v8::internal::compiler::Node"* %2455 to i64
  br i1 %2456, label %2698, label %2458

2458:                                             ; preds = %2453
  %2459 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %2460 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2459, align 8
  %2461 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2462 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2461, align 8
  %2463 = icmp eq %"class.v8::internal::compiler::Node"** %2460, %2462
  %2464 = ptrtoint %"class.v8::internal::compiler::Node"** %2462 to i64
  br i1 %2463, label %2470, label %2465

2465:                                             ; preds = %2458
  %2466 = bitcast %"class.v8::internal::compiler::Node"** %2460 to i64*
  store i64 %2457, i64* %2466, align 8
  %2467 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2460, i64 1
  %2468 = ptrtoint %"class.v8::internal::compiler::Node"** %2467 to i64
  %2469 = bitcast %"class.v8::internal::compiler::Node"*** %2459 to i64*
  store i64 %2468, i64* %2469, align 8
  br label %2698

2470:                                             ; preds = %2458
  %2471 = ptrtoint %"class.v8::internal::compiler::Node"** %2460 to i64
  %2472 = bitcast %"class.v8::internal::compiler::Node"*** %2459 to i64*
  %2473 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %2474 = load i64, i64* %2473, align 8
  %2475 = sub i64 %2471, %2474
  %2476 = ashr exact i64 %2475, 3
  %2477 = add nsw i64 %2476, 1
  %2478 = icmp ugt i64 %2477, 268435455
  br i1 %2478, label %2479, label %2481

2479:                                             ; preds = %2470
  %2480 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2480) #6
  unreachable

2481:                                             ; preds = %2470
  %2482 = bitcast %"class.v8::internal::compiler::Node"*** %2461 to i64*
  %2483 = sub i64 %2464, %2474
  %2484 = ashr exact i64 %2483, 3
  %2485 = icmp ult i64 %2484, 134217727
  br i1 %2485, label %2486, label %2491

2486:                                             ; preds = %2481
  %2487 = ashr exact i64 %2483, 2
  %2488 = icmp ult i64 %2487, %2477
  %2489 = select i1 %2488, i64 %2477, i64 %2487
  %2490 = icmp eq i64 %2489, 0
  br i1 %2490, label %2511, label %2491

2491:                                             ; preds = %2486, %2481
  %2492 = phi i64 [ %2489, %2486 ], [ 268435455, %2481 ]
  %2493 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %2494 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2493, align 8
  %2495 = shl i64 %2492, 3
  %2496 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2494, i64 0, i32 2
  %2497 = load i64, i64* %2496, align 8
  %2498 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2494, i64 0, i32 3
  %2499 = load i64, i64* %2498, align 8
  %2500 = sub i64 %2499, %2497
  %2501 = icmp ugt i64 %2495, %2500
  br i1 %2501, label %2502, label %2504, !prof !2

2502:                                             ; preds = %2491
  %2503 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2494, i64 %2495) #5
  br label %2506

2504:                                             ; preds = %2491
  %2505 = add i64 %2497, %2495
  store i64 %2505, i64* %2496, align 8
  br label %2506

2506:                                             ; preds = %2504, %2502
  %2507 = phi i64 [ %2503, %2502 ], [ %2497, %2504 ]
  %2508 = inttoptr i64 %2507 to %"class.v8::internal::compiler::Node"**
  %2509 = bitcast %"class.v8::internal::compiler::Node"** %2454 to i64*
  %2510 = load i64, i64* %2509, align 8
  br label %2511

2511:                                             ; preds = %2486, %2506
  %2512 = phi i64 [ %2510, %2506 ], [ %2457, %2486 ]
  %2513 = phi i64 [ %2492, %2506 ], [ 0, %2486 ]
  %2514 = phi %"class.v8::internal::compiler::Node"** [ %2508, %2506 ], [ null, %2486 ]
  %2515 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2514, i64 %2476
  %2516 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2514, i64 %2513
  %2517 = ptrtoint %"class.v8::internal::compiler::Node"** %2516 to i64
  %2518 = bitcast %"class.v8::internal::compiler::Node"** %2515 to i64*
  store i64 %2512, i64* %2518, align 8
  %2519 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2515, i64 1
  %2520 = ptrtoint %"class.v8::internal::compiler::Node"** %2519 to i64
  %2521 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %2522 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2521, align 8
  %2523 = ptrtoint %"class.v8::internal::compiler::Node"** %2522 to i64
  %2524 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2459, align 8
  %2525 = icmp eq %"class.v8::internal::compiler::Node"** %2524, %2522
  br i1 %2525, label %2695, label %2526

2526:                                             ; preds = %2511
  %2527 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 -1
  %2528 = ptrtoint %"class.v8::internal::compiler::Node"** %2527 to i64
  %2529 = sub i64 %2528, %2523
  %2530 = lshr i64 %2529, 3
  %2531 = add nuw nsw i64 %2530, 1
  %2532 = icmp ult i64 %2531, 4
  br i1 %2532, label %2625, label %2533

2533:                                             ; preds = %2526
  %2534 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 -1
  %2535 = ptrtoint %"class.v8::internal::compiler::Node"** %2534 to i64
  %2536 = sub i64 %2535, %2523
  %2537 = lshr i64 %2536, 3
  %2538 = xor i64 %2537, -1
  %2539 = add nsw i64 %2476, %2538
  %2540 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2514, i64 %2539
  %2541 = xor i64 %2537, -1
  %2542 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 %2541
  %2543 = icmp ult %"class.v8::internal::compiler::Node"** %2540, %2524
  %2544 = icmp ult %"class.v8::internal::compiler::Node"** %2542, %2515
  %2545 = and i1 %2543, %2544
  br i1 %2545, label %2625, label %2546

2546:                                             ; preds = %2533
  %2547 = and i64 %2531, 4611686018427387900
  %2548 = sub nsw i64 0, %2547
  %2549 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2515, i64 %2548
  %2550 = sub nsw i64 0, %2547
  %2551 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 %2550
  %2552 = add nsw i64 %2547, -4
  %2553 = lshr exact i64 %2552, 2
  %2554 = add nuw nsw i64 %2553, 1
  %2555 = and i64 %2554, 1
  %2556 = icmp eq i64 %2552, 0
  br i1 %2556, label %2601, label %2557

2557:                                             ; preds = %2546
  %2558 = sub nuw nsw i64 %2554, %2555
  %2559 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2515, i64 -1
  %2560 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 -1
  %2561 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2515, i64 -1
  %2562 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 -1
  br label %2563

2563:                                             ; preds = %2563, %2557
  %2564 = phi i64 [ 0, %2557 ], [ %2598, %2563 ]
  %2565 = phi i64 [ %2558, %2557 ], [ %2599, %2563 ]
  %2566 = sub i64 0, %2564
  %2567 = sub i64 0, %2564
  %2568 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2559, i64 %2566
  %2569 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2560, i64 %2567
  %2570 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2569, i64 -1
  %2571 = bitcast %"class.v8::internal::compiler::Node"** %2570 to <2 x i64>*
  %2572 = load <2 x i64>, <2 x i64>* %2571, align 8, !alias.scope !85
  %2573 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2569, i64 -2
  %2574 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2573, i64 -1
  %2575 = bitcast %"class.v8::internal::compiler::Node"** %2574 to <2 x i64>*
  %2576 = load <2 x i64>, <2 x i64>* %2575, align 8, !alias.scope !85
  %2577 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2568, i64 -1
  %2578 = bitcast %"class.v8::internal::compiler::Node"** %2577 to <2 x i64>*
  store <2 x i64> %2572, <2 x i64>* %2578, align 8, !alias.scope !88, !noalias !85
  %2579 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2568, i64 -2
  %2580 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2579, i64 -1
  %2581 = bitcast %"class.v8::internal::compiler::Node"** %2580 to <2 x i64>*
  store <2 x i64> %2576, <2 x i64>* %2581, align 8, !alias.scope !88, !noalias !85
  %2582 = sub nuw nsw i64 -4, %2564
  %2583 = sub nuw nsw i64 -4, %2564
  %2584 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2561, i64 %2582
  %2585 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2562, i64 %2583
  %2586 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2585, i64 -1
  %2587 = bitcast %"class.v8::internal::compiler::Node"** %2586 to <2 x i64>*
  %2588 = load <2 x i64>, <2 x i64>* %2587, align 8, !alias.scope !85
  %2589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2585, i64 -2
  %2590 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2589, i64 -1
  %2591 = bitcast %"class.v8::internal::compiler::Node"** %2590 to <2 x i64>*
  %2592 = load <2 x i64>, <2 x i64>* %2591, align 8, !alias.scope !85
  %2593 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2584, i64 -1
  %2594 = bitcast %"class.v8::internal::compiler::Node"** %2593 to <2 x i64>*
  store <2 x i64> %2588, <2 x i64>* %2594, align 8, !alias.scope !88, !noalias !85
  %2595 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2584, i64 -2
  %2596 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2595, i64 -1
  %2597 = bitcast %"class.v8::internal::compiler::Node"** %2596 to <2 x i64>*
  store <2 x i64> %2592, <2 x i64>* %2597, align 8, !alias.scope !88, !noalias !85
  %2598 = add i64 %2564, 8
  %2599 = add i64 %2565, -2
  %2600 = icmp eq i64 %2599, 0
  br i1 %2600, label %2601, label %2563, !llvm.loop !90

2601:                                             ; preds = %2563, %2546
  %2602 = phi i64 [ 0, %2546 ], [ %2598, %2563 ]
  %2603 = icmp eq i64 %2555, 0
  br i1 %2603, label %2623, label %2604

2604:                                             ; preds = %2601
  %2605 = sub i64 0, %2602
  %2606 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2515, i64 -1
  %2607 = sub i64 0, %2602
  %2608 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2524, i64 -1
  %2609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2606, i64 %2605
  %2610 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2608, i64 %2607
  %2611 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2610, i64 -1
  %2612 = bitcast %"class.v8::internal::compiler::Node"** %2611 to <2 x i64>*
  %2613 = load <2 x i64>, <2 x i64>* %2612, align 8, !alias.scope !85
  %2614 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2610, i64 -2
  %2615 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2614, i64 -1
  %2616 = bitcast %"class.v8::internal::compiler::Node"** %2615 to <2 x i64>*
  %2617 = load <2 x i64>, <2 x i64>* %2616, align 8, !alias.scope !85
  %2618 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2609, i64 -1
  %2619 = bitcast %"class.v8::internal::compiler::Node"** %2618 to <2 x i64>*
  store <2 x i64> %2613, <2 x i64>* %2619, align 8, !alias.scope !88, !noalias !85
  %2620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2609, i64 -2
  %2621 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2620, i64 -1
  %2622 = bitcast %"class.v8::internal::compiler::Node"** %2621 to <2 x i64>*
  store <2 x i64> %2617, <2 x i64>* %2622, align 8, !alias.scope !88, !noalias !85
  br label %2623

2623:                                             ; preds = %2601, %2604
  %2624 = icmp eq i64 %2531, %2547
  br i1 %2624, label %2695, label %2625

2625:                                             ; preds = %2623, %2533, %2526
  %2626 = phi %"class.v8::internal::compiler::Node"** [ %2515, %2533 ], [ %2515, %2526 ], [ %2549, %2623 ]
  %2627 = phi %"class.v8::internal::compiler::Node"** [ %2524, %2533 ], [ %2524, %2526 ], [ %2551, %2623 ]
  %2628 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2627, i64 -1
  %2629 = ptrtoint %"class.v8::internal::compiler::Node"** %2628 to i64
  %2630 = sub i64 %2629, %2523
  %2631 = lshr i64 %2630, 3
  %2632 = add nuw nsw i64 %2631, 1
  %2633 = and i64 %2632, 7
  %2634 = icmp eq i64 %2633, 0
  br i1 %2634, label %2646, label %2635

2635:                                             ; preds = %2625, %2635
  %2636 = phi %"class.v8::internal::compiler::Node"** [ %2639, %2635 ], [ %2626, %2625 ]
  %2637 = phi %"class.v8::internal::compiler::Node"** [ %2640, %2635 ], [ %2627, %2625 ]
  %2638 = phi i64 [ %2644, %2635 ], [ %2633, %2625 ]
  %2639 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2636, i64 -1
  %2640 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2637, i64 -1
  %2641 = bitcast %"class.v8::internal::compiler::Node"** %2640 to i64*
  %2642 = load i64, i64* %2641, align 8
  %2643 = bitcast %"class.v8::internal::compiler::Node"** %2639 to i64*
  store i64 %2642, i64* %2643, align 8
  %2644 = add i64 %2638, -1
  %2645 = icmp eq i64 %2644, 0
  br i1 %2645, label %2646, label %2635, !llvm.loop !91

2646:                                             ; preds = %2635, %2625
  %2647 = phi %"class.v8::internal::compiler::Node"** [ undef, %2625 ], [ %2639, %2635 ]
  %2648 = phi %"class.v8::internal::compiler::Node"** [ %2626, %2625 ], [ %2639, %2635 ]
  %2649 = phi %"class.v8::internal::compiler::Node"** [ %2627, %2625 ], [ %2640, %2635 ]
  %2650 = icmp ult i64 %2630, 56
  br i1 %2650, label %2695, label %2651

2651:                                             ; preds = %2646, %2651
  %2652 = phi %"class.v8::internal::compiler::Node"** [ %2689, %2651 ], [ %2648, %2646 ]
  %2653 = phi %"class.v8::internal::compiler::Node"** [ %2690, %2651 ], [ %2649, %2646 ]
  %2654 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -1
  %2655 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -1
  %2656 = bitcast %"class.v8::internal::compiler::Node"** %2655 to i64*
  %2657 = load i64, i64* %2656, align 8
  %2658 = bitcast %"class.v8::internal::compiler::Node"** %2654 to i64*
  store i64 %2657, i64* %2658, align 8
  %2659 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -2
  %2660 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -2
  %2661 = bitcast %"class.v8::internal::compiler::Node"** %2660 to i64*
  %2662 = load i64, i64* %2661, align 8
  %2663 = bitcast %"class.v8::internal::compiler::Node"** %2659 to i64*
  store i64 %2662, i64* %2663, align 8
  %2664 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -3
  %2665 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -3
  %2666 = bitcast %"class.v8::internal::compiler::Node"** %2665 to i64*
  %2667 = load i64, i64* %2666, align 8
  %2668 = bitcast %"class.v8::internal::compiler::Node"** %2664 to i64*
  store i64 %2667, i64* %2668, align 8
  %2669 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -4
  %2670 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -4
  %2671 = bitcast %"class.v8::internal::compiler::Node"** %2670 to i64*
  %2672 = load i64, i64* %2671, align 8
  %2673 = bitcast %"class.v8::internal::compiler::Node"** %2669 to i64*
  store i64 %2672, i64* %2673, align 8
  %2674 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -5
  %2675 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -5
  %2676 = bitcast %"class.v8::internal::compiler::Node"** %2675 to i64*
  %2677 = load i64, i64* %2676, align 8
  %2678 = bitcast %"class.v8::internal::compiler::Node"** %2674 to i64*
  store i64 %2677, i64* %2678, align 8
  %2679 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -6
  %2680 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -6
  %2681 = bitcast %"class.v8::internal::compiler::Node"** %2680 to i64*
  %2682 = load i64, i64* %2681, align 8
  %2683 = bitcast %"class.v8::internal::compiler::Node"** %2679 to i64*
  store i64 %2682, i64* %2683, align 8
  %2684 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -7
  %2685 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -7
  %2686 = bitcast %"class.v8::internal::compiler::Node"** %2685 to i64*
  %2687 = load i64, i64* %2686, align 8
  %2688 = bitcast %"class.v8::internal::compiler::Node"** %2684 to i64*
  store i64 %2687, i64* %2688, align 8
  %2689 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2652, i64 -8
  %2690 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2653, i64 -8
  %2691 = bitcast %"class.v8::internal::compiler::Node"** %2690 to i64*
  %2692 = load i64, i64* %2691, align 8
  %2693 = bitcast %"class.v8::internal::compiler::Node"** %2689 to i64*
  store i64 %2692, i64* %2693, align 8
  %2694 = icmp eq %"class.v8::internal::compiler::Node"** %2690, %2522
  br i1 %2694, label %2695, label %2651, !llvm.loop !92

2695:                                             ; preds = %2646, %2651, %2623, %2511
  %2696 = phi %"class.v8::internal::compiler::Node"** [ %2515, %2511 ], [ %2549, %2623 ], [ %2647, %2646 ], [ %2689, %2651 ]
  %2697 = ptrtoint %"class.v8::internal::compiler::Node"** %2696 to i64
  store i64 %2697, i64* %2473, align 8
  store i64 %2520, i64* %2472, align 8
  store i64 %2517, i64* %2482, align 8
  br label %2698

2698:                                             ; preds = %2695, %2465, %2453
  %2699 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 15
  %2700 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2699, align 8
  %2701 = icmp eq %"class.v8::internal::compiler::Node"* %2700, null
  %2702 = ptrtoint %"class.v8::internal::compiler::Node"* %2700 to i64
  br i1 %2701, label %2943, label %2703

2703:                                             ; preds = %2698
  %2704 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %2705 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2704, align 8
  %2706 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2707 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2706, align 8
  %2708 = icmp eq %"class.v8::internal::compiler::Node"** %2705, %2707
  %2709 = ptrtoint %"class.v8::internal::compiler::Node"** %2707 to i64
  br i1 %2708, label %2715, label %2710

2710:                                             ; preds = %2703
  %2711 = bitcast %"class.v8::internal::compiler::Node"** %2705 to i64*
  store i64 %2702, i64* %2711, align 8
  %2712 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2705, i64 1
  %2713 = ptrtoint %"class.v8::internal::compiler::Node"** %2712 to i64
  %2714 = bitcast %"class.v8::internal::compiler::Node"*** %2704 to i64*
  store i64 %2713, i64* %2714, align 8
  br label %2943

2715:                                             ; preds = %2703
  %2716 = ptrtoint %"class.v8::internal::compiler::Node"** %2705 to i64
  %2717 = bitcast %"class.v8::internal::compiler::Node"*** %2704 to i64*
  %2718 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %2719 = load i64, i64* %2718, align 8
  %2720 = sub i64 %2716, %2719
  %2721 = ashr exact i64 %2720, 3
  %2722 = add nsw i64 %2721, 1
  %2723 = icmp ugt i64 %2722, 268435455
  br i1 %2723, label %2724, label %2726

2724:                                             ; preds = %2715
  %2725 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2725) #6
  unreachable

2726:                                             ; preds = %2715
  %2727 = bitcast %"class.v8::internal::compiler::Node"*** %2706 to i64*
  %2728 = sub i64 %2709, %2719
  %2729 = ashr exact i64 %2728, 3
  %2730 = icmp ult i64 %2729, 134217727
  br i1 %2730, label %2731, label %2736

2731:                                             ; preds = %2726
  %2732 = ashr exact i64 %2728, 2
  %2733 = icmp ult i64 %2732, %2722
  %2734 = select i1 %2733, i64 %2722, i64 %2732
  %2735 = icmp eq i64 %2734, 0
  br i1 %2735, label %2756, label %2736

2736:                                             ; preds = %2731, %2726
  %2737 = phi i64 [ %2734, %2731 ], [ 268435455, %2726 ]
  %2738 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %2739 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2738, align 8
  %2740 = shl i64 %2737, 3
  %2741 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2739, i64 0, i32 2
  %2742 = load i64, i64* %2741, align 8
  %2743 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2739, i64 0, i32 3
  %2744 = load i64, i64* %2743, align 8
  %2745 = sub i64 %2744, %2742
  %2746 = icmp ugt i64 %2740, %2745
  br i1 %2746, label %2747, label %2749, !prof !2

2747:                                             ; preds = %2736
  %2748 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2739, i64 %2740) #5
  br label %2751

2749:                                             ; preds = %2736
  %2750 = add i64 %2742, %2740
  store i64 %2750, i64* %2741, align 8
  br label %2751

2751:                                             ; preds = %2749, %2747
  %2752 = phi i64 [ %2748, %2747 ], [ %2742, %2749 ]
  %2753 = inttoptr i64 %2752 to %"class.v8::internal::compiler::Node"**
  %2754 = bitcast %"class.v8::internal::compiler::Node"** %2699 to i64*
  %2755 = load i64, i64* %2754, align 8
  br label %2756

2756:                                             ; preds = %2731, %2751
  %2757 = phi i64 [ %2755, %2751 ], [ %2702, %2731 ]
  %2758 = phi i64 [ %2737, %2751 ], [ 0, %2731 ]
  %2759 = phi %"class.v8::internal::compiler::Node"** [ %2753, %2751 ], [ null, %2731 ]
  %2760 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2759, i64 %2721
  %2761 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2759, i64 %2758
  %2762 = ptrtoint %"class.v8::internal::compiler::Node"** %2761 to i64
  %2763 = bitcast %"class.v8::internal::compiler::Node"** %2760 to i64*
  store i64 %2757, i64* %2763, align 8
  %2764 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2760, i64 1
  %2765 = ptrtoint %"class.v8::internal::compiler::Node"** %2764 to i64
  %2766 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %2767 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2766, align 8
  %2768 = ptrtoint %"class.v8::internal::compiler::Node"** %2767 to i64
  %2769 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2704, align 8
  %2770 = icmp eq %"class.v8::internal::compiler::Node"** %2769, %2767
  br i1 %2770, label %2940, label %2771

2771:                                             ; preds = %2756
  %2772 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 -1
  %2773 = ptrtoint %"class.v8::internal::compiler::Node"** %2772 to i64
  %2774 = sub i64 %2773, %2768
  %2775 = lshr i64 %2774, 3
  %2776 = add nuw nsw i64 %2775, 1
  %2777 = icmp ult i64 %2776, 4
  br i1 %2777, label %2870, label %2778

2778:                                             ; preds = %2771
  %2779 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 -1
  %2780 = ptrtoint %"class.v8::internal::compiler::Node"** %2779 to i64
  %2781 = sub i64 %2780, %2768
  %2782 = lshr i64 %2781, 3
  %2783 = xor i64 %2782, -1
  %2784 = add nsw i64 %2721, %2783
  %2785 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2759, i64 %2784
  %2786 = xor i64 %2782, -1
  %2787 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 %2786
  %2788 = icmp ult %"class.v8::internal::compiler::Node"** %2785, %2769
  %2789 = icmp ult %"class.v8::internal::compiler::Node"** %2787, %2760
  %2790 = and i1 %2788, %2789
  br i1 %2790, label %2870, label %2791

2791:                                             ; preds = %2778
  %2792 = and i64 %2776, 4611686018427387900
  %2793 = sub nsw i64 0, %2792
  %2794 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2760, i64 %2793
  %2795 = sub nsw i64 0, %2792
  %2796 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 %2795
  %2797 = add nsw i64 %2792, -4
  %2798 = lshr exact i64 %2797, 2
  %2799 = add nuw nsw i64 %2798, 1
  %2800 = and i64 %2799, 1
  %2801 = icmp eq i64 %2797, 0
  br i1 %2801, label %2846, label %2802

2802:                                             ; preds = %2791
  %2803 = sub nuw nsw i64 %2799, %2800
  %2804 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2760, i64 -1
  %2805 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 -1
  %2806 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2760, i64 -1
  %2807 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 -1
  br label %2808

2808:                                             ; preds = %2808, %2802
  %2809 = phi i64 [ 0, %2802 ], [ %2843, %2808 ]
  %2810 = phi i64 [ %2803, %2802 ], [ %2844, %2808 ]
  %2811 = sub i64 0, %2809
  %2812 = sub i64 0, %2809
  %2813 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2804, i64 %2811
  %2814 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2805, i64 %2812
  %2815 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2814, i64 -1
  %2816 = bitcast %"class.v8::internal::compiler::Node"** %2815 to <2 x i64>*
  %2817 = load <2 x i64>, <2 x i64>* %2816, align 8, !alias.scope !93
  %2818 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2814, i64 -2
  %2819 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2818, i64 -1
  %2820 = bitcast %"class.v8::internal::compiler::Node"** %2819 to <2 x i64>*
  %2821 = load <2 x i64>, <2 x i64>* %2820, align 8, !alias.scope !93
  %2822 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2813, i64 -1
  %2823 = bitcast %"class.v8::internal::compiler::Node"** %2822 to <2 x i64>*
  store <2 x i64> %2817, <2 x i64>* %2823, align 8, !alias.scope !96, !noalias !93
  %2824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2813, i64 -2
  %2825 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2824, i64 -1
  %2826 = bitcast %"class.v8::internal::compiler::Node"** %2825 to <2 x i64>*
  store <2 x i64> %2821, <2 x i64>* %2826, align 8, !alias.scope !96, !noalias !93
  %2827 = sub nuw nsw i64 -4, %2809
  %2828 = sub nuw nsw i64 -4, %2809
  %2829 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2806, i64 %2827
  %2830 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2807, i64 %2828
  %2831 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2830, i64 -1
  %2832 = bitcast %"class.v8::internal::compiler::Node"** %2831 to <2 x i64>*
  %2833 = load <2 x i64>, <2 x i64>* %2832, align 8, !alias.scope !93
  %2834 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2830, i64 -2
  %2835 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2834, i64 -1
  %2836 = bitcast %"class.v8::internal::compiler::Node"** %2835 to <2 x i64>*
  %2837 = load <2 x i64>, <2 x i64>* %2836, align 8, !alias.scope !93
  %2838 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2829, i64 -1
  %2839 = bitcast %"class.v8::internal::compiler::Node"** %2838 to <2 x i64>*
  store <2 x i64> %2833, <2 x i64>* %2839, align 8, !alias.scope !96, !noalias !93
  %2840 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2829, i64 -2
  %2841 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2840, i64 -1
  %2842 = bitcast %"class.v8::internal::compiler::Node"** %2841 to <2 x i64>*
  store <2 x i64> %2837, <2 x i64>* %2842, align 8, !alias.scope !96, !noalias !93
  %2843 = add i64 %2809, 8
  %2844 = add i64 %2810, -2
  %2845 = icmp eq i64 %2844, 0
  br i1 %2845, label %2846, label %2808, !llvm.loop !98

2846:                                             ; preds = %2808, %2791
  %2847 = phi i64 [ 0, %2791 ], [ %2843, %2808 ]
  %2848 = icmp eq i64 %2800, 0
  br i1 %2848, label %2868, label %2849

2849:                                             ; preds = %2846
  %2850 = sub i64 0, %2847
  %2851 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2760, i64 -1
  %2852 = sub i64 0, %2847
  %2853 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2769, i64 -1
  %2854 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2851, i64 %2850
  %2855 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2853, i64 %2852
  %2856 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2855, i64 -1
  %2857 = bitcast %"class.v8::internal::compiler::Node"** %2856 to <2 x i64>*
  %2858 = load <2 x i64>, <2 x i64>* %2857, align 8, !alias.scope !93
  %2859 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2855, i64 -2
  %2860 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2859, i64 -1
  %2861 = bitcast %"class.v8::internal::compiler::Node"** %2860 to <2 x i64>*
  %2862 = load <2 x i64>, <2 x i64>* %2861, align 8, !alias.scope !93
  %2863 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2854, i64 -1
  %2864 = bitcast %"class.v8::internal::compiler::Node"** %2863 to <2 x i64>*
  store <2 x i64> %2858, <2 x i64>* %2864, align 8, !alias.scope !96, !noalias !93
  %2865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2854, i64 -2
  %2866 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2865, i64 -1
  %2867 = bitcast %"class.v8::internal::compiler::Node"** %2866 to <2 x i64>*
  store <2 x i64> %2862, <2 x i64>* %2867, align 8, !alias.scope !96, !noalias !93
  br label %2868

2868:                                             ; preds = %2846, %2849
  %2869 = icmp eq i64 %2776, %2792
  br i1 %2869, label %2940, label %2870

2870:                                             ; preds = %2868, %2778, %2771
  %2871 = phi %"class.v8::internal::compiler::Node"** [ %2760, %2778 ], [ %2760, %2771 ], [ %2794, %2868 ]
  %2872 = phi %"class.v8::internal::compiler::Node"** [ %2769, %2778 ], [ %2769, %2771 ], [ %2796, %2868 ]
  %2873 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2872, i64 -1
  %2874 = ptrtoint %"class.v8::internal::compiler::Node"** %2873 to i64
  %2875 = sub i64 %2874, %2768
  %2876 = lshr i64 %2875, 3
  %2877 = add nuw nsw i64 %2876, 1
  %2878 = and i64 %2877, 7
  %2879 = icmp eq i64 %2878, 0
  br i1 %2879, label %2891, label %2880

2880:                                             ; preds = %2870, %2880
  %2881 = phi %"class.v8::internal::compiler::Node"** [ %2884, %2880 ], [ %2871, %2870 ]
  %2882 = phi %"class.v8::internal::compiler::Node"** [ %2885, %2880 ], [ %2872, %2870 ]
  %2883 = phi i64 [ %2889, %2880 ], [ %2878, %2870 ]
  %2884 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2881, i64 -1
  %2885 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2882, i64 -1
  %2886 = bitcast %"class.v8::internal::compiler::Node"** %2885 to i64*
  %2887 = load i64, i64* %2886, align 8
  %2888 = bitcast %"class.v8::internal::compiler::Node"** %2884 to i64*
  store i64 %2887, i64* %2888, align 8
  %2889 = add i64 %2883, -1
  %2890 = icmp eq i64 %2889, 0
  br i1 %2890, label %2891, label %2880, !llvm.loop !99

2891:                                             ; preds = %2880, %2870
  %2892 = phi %"class.v8::internal::compiler::Node"** [ undef, %2870 ], [ %2884, %2880 ]
  %2893 = phi %"class.v8::internal::compiler::Node"** [ %2871, %2870 ], [ %2884, %2880 ]
  %2894 = phi %"class.v8::internal::compiler::Node"** [ %2872, %2870 ], [ %2885, %2880 ]
  %2895 = icmp ult i64 %2875, 56
  br i1 %2895, label %2940, label %2896

2896:                                             ; preds = %2891, %2896
  %2897 = phi %"class.v8::internal::compiler::Node"** [ %2934, %2896 ], [ %2893, %2891 ]
  %2898 = phi %"class.v8::internal::compiler::Node"** [ %2935, %2896 ], [ %2894, %2891 ]
  %2899 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -1
  %2900 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -1
  %2901 = bitcast %"class.v8::internal::compiler::Node"** %2900 to i64*
  %2902 = load i64, i64* %2901, align 8
  %2903 = bitcast %"class.v8::internal::compiler::Node"** %2899 to i64*
  store i64 %2902, i64* %2903, align 8
  %2904 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -2
  %2905 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -2
  %2906 = bitcast %"class.v8::internal::compiler::Node"** %2905 to i64*
  %2907 = load i64, i64* %2906, align 8
  %2908 = bitcast %"class.v8::internal::compiler::Node"** %2904 to i64*
  store i64 %2907, i64* %2908, align 8
  %2909 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -3
  %2910 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -3
  %2911 = bitcast %"class.v8::internal::compiler::Node"** %2910 to i64*
  %2912 = load i64, i64* %2911, align 8
  %2913 = bitcast %"class.v8::internal::compiler::Node"** %2909 to i64*
  store i64 %2912, i64* %2913, align 8
  %2914 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -4
  %2915 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -4
  %2916 = bitcast %"class.v8::internal::compiler::Node"** %2915 to i64*
  %2917 = load i64, i64* %2916, align 8
  %2918 = bitcast %"class.v8::internal::compiler::Node"** %2914 to i64*
  store i64 %2917, i64* %2918, align 8
  %2919 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -5
  %2920 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -5
  %2921 = bitcast %"class.v8::internal::compiler::Node"** %2920 to i64*
  %2922 = load i64, i64* %2921, align 8
  %2923 = bitcast %"class.v8::internal::compiler::Node"** %2919 to i64*
  store i64 %2922, i64* %2923, align 8
  %2924 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -6
  %2925 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -6
  %2926 = bitcast %"class.v8::internal::compiler::Node"** %2925 to i64*
  %2927 = load i64, i64* %2926, align 8
  %2928 = bitcast %"class.v8::internal::compiler::Node"** %2924 to i64*
  store i64 %2927, i64* %2928, align 8
  %2929 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -7
  %2930 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -7
  %2931 = bitcast %"class.v8::internal::compiler::Node"** %2930 to i64*
  %2932 = load i64, i64* %2931, align 8
  %2933 = bitcast %"class.v8::internal::compiler::Node"** %2929 to i64*
  store i64 %2932, i64* %2933, align 8
  %2934 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2897, i64 -8
  %2935 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2898, i64 -8
  %2936 = bitcast %"class.v8::internal::compiler::Node"** %2935 to i64*
  %2937 = load i64, i64* %2936, align 8
  %2938 = bitcast %"class.v8::internal::compiler::Node"** %2934 to i64*
  store i64 %2937, i64* %2938, align 8
  %2939 = icmp eq %"class.v8::internal::compiler::Node"** %2935, %2767
  br i1 %2939, label %2940, label %2896, !llvm.loop !100

2940:                                             ; preds = %2891, %2896, %2868, %2756
  %2941 = phi %"class.v8::internal::compiler::Node"** [ %2760, %2756 ], [ %2794, %2868 ], [ %2892, %2891 ], [ %2934, %2896 ]
  %2942 = ptrtoint %"class.v8::internal::compiler::Node"** %2941 to i64
  store i64 %2942, i64* %2718, align 8
  store i64 %2765, i64* %2717, align 8
  store i64 %2762, i64* %2727, align 8
  br label %2943

2943:                                             ; preds = %2940, %2710, %2698
  %2944 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 16
  %2945 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2944, align 8
  %2946 = icmp eq %"class.v8::internal::compiler::Node"* %2945, null
  %2947 = ptrtoint %"class.v8::internal::compiler::Node"* %2945 to i64
  br i1 %2946, label %3188, label %2948

2948:                                             ; preds = %2943
  %2949 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %2950 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2949, align 8
  %2951 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %2952 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2951, align 8
  %2953 = icmp eq %"class.v8::internal::compiler::Node"** %2950, %2952
  %2954 = ptrtoint %"class.v8::internal::compiler::Node"** %2952 to i64
  br i1 %2953, label %2960, label %2955

2955:                                             ; preds = %2948
  %2956 = bitcast %"class.v8::internal::compiler::Node"** %2950 to i64*
  store i64 %2947, i64* %2956, align 8
  %2957 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2950, i64 1
  %2958 = ptrtoint %"class.v8::internal::compiler::Node"** %2957 to i64
  %2959 = bitcast %"class.v8::internal::compiler::Node"*** %2949 to i64*
  store i64 %2958, i64* %2959, align 8
  br label %3188

2960:                                             ; preds = %2948
  %2961 = ptrtoint %"class.v8::internal::compiler::Node"** %2950 to i64
  %2962 = bitcast %"class.v8::internal::compiler::Node"*** %2949 to i64*
  %2963 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %2964 = load i64, i64* %2963, align 8
  %2965 = sub i64 %2961, %2964
  %2966 = ashr exact i64 %2965, 3
  %2967 = add nsw i64 %2966, 1
  %2968 = icmp ugt i64 %2967, 268435455
  br i1 %2968, label %2969, label %2971

2969:                                             ; preds = %2960
  %2970 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2970) #6
  unreachable

2971:                                             ; preds = %2960
  %2972 = bitcast %"class.v8::internal::compiler::Node"*** %2951 to i64*
  %2973 = sub i64 %2954, %2964
  %2974 = ashr exact i64 %2973, 3
  %2975 = icmp ult i64 %2974, 134217727
  br i1 %2975, label %2976, label %2981

2976:                                             ; preds = %2971
  %2977 = ashr exact i64 %2973, 2
  %2978 = icmp ult i64 %2977, %2967
  %2979 = select i1 %2978, i64 %2967, i64 %2977
  %2980 = icmp eq i64 %2979, 0
  br i1 %2980, label %3001, label %2981

2981:                                             ; preds = %2976, %2971
  %2982 = phi i64 [ %2979, %2976 ], [ 268435455, %2971 ]
  %2983 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %2984 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %2983, align 8
  %2985 = shl i64 %2982, 3
  %2986 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2984, i64 0, i32 2
  %2987 = load i64, i64* %2986, align 8
  %2988 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2984, i64 0, i32 3
  %2989 = load i64, i64* %2988, align 8
  %2990 = sub i64 %2989, %2987
  %2991 = icmp ugt i64 %2985, %2990
  br i1 %2991, label %2992, label %2994, !prof !2

2992:                                             ; preds = %2981
  %2993 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2984, i64 %2985) #5
  br label %2996

2994:                                             ; preds = %2981
  %2995 = add i64 %2987, %2985
  store i64 %2995, i64* %2986, align 8
  br label %2996

2996:                                             ; preds = %2994, %2992
  %2997 = phi i64 [ %2993, %2992 ], [ %2987, %2994 ]
  %2998 = inttoptr i64 %2997 to %"class.v8::internal::compiler::Node"**
  %2999 = bitcast %"class.v8::internal::compiler::Node"** %2944 to i64*
  %3000 = load i64, i64* %2999, align 8
  br label %3001

3001:                                             ; preds = %2976, %2996
  %3002 = phi i64 [ %3000, %2996 ], [ %2947, %2976 ]
  %3003 = phi i64 [ %2982, %2996 ], [ 0, %2976 ]
  %3004 = phi %"class.v8::internal::compiler::Node"** [ %2998, %2996 ], [ null, %2976 ]
  %3005 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3004, i64 %2966
  %3006 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3004, i64 %3003
  %3007 = ptrtoint %"class.v8::internal::compiler::Node"** %3006 to i64
  %3008 = bitcast %"class.v8::internal::compiler::Node"** %3005 to i64*
  store i64 %3002, i64* %3008, align 8
  %3009 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3005, i64 1
  %3010 = ptrtoint %"class.v8::internal::compiler::Node"** %3009 to i64
  %3011 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %3012 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3011, align 8
  %3013 = ptrtoint %"class.v8::internal::compiler::Node"** %3012 to i64
  %3014 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2949, align 8
  %3015 = icmp eq %"class.v8::internal::compiler::Node"** %3014, %3012
  br i1 %3015, label %3185, label %3016

3016:                                             ; preds = %3001
  %3017 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 -1
  %3018 = ptrtoint %"class.v8::internal::compiler::Node"** %3017 to i64
  %3019 = sub i64 %3018, %3013
  %3020 = lshr i64 %3019, 3
  %3021 = add nuw nsw i64 %3020, 1
  %3022 = icmp ult i64 %3021, 4
  br i1 %3022, label %3115, label %3023

3023:                                             ; preds = %3016
  %3024 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 -1
  %3025 = ptrtoint %"class.v8::internal::compiler::Node"** %3024 to i64
  %3026 = sub i64 %3025, %3013
  %3027 = lshr i64 %3026, 3
  %3028 = xor i64 %3027, -1
  %3029 = add nsw i64 %2966, %3028
  %3030 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3004, i64 %3029
  %3031 = xor i64 %3027, -1
  %3032 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 %3031
  %3033 = icmp ult %"class.v8::internal::compiler::Node"** %3030, %3014
  %3034 = icmp ult %"class.v8::internal::compiler::Node"** %3032, %3005
  %3035 = and i1 %3033, %3034
  br i1 %3035, label %3115, label %3036

3036:                                             ; preds = %3023
  %3037 = and i64 %3021, 4611686018427387900
  %3038 = sub nsw i64 0, %3037
  %3039 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3005, i64 %3038
  %3040 = sub nsw i64 0, %3037
  %3041 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 %3040
  %3042 = add nsw i64 %3037, -4
  %3043 = lshr exact i64 %3042, 2
  %3044 = add nuw nsw i64 %3043, 1
  %3045 = and i64 %3044, 1
  %3046 = icmp eq i64 %3042, 0
  br i1 %3046, label %3091, label %3047

3047:                                             ; preds = %3036
  %3048 = sub nuw nsw i64 %3044, %3045
  %3049 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3005, i64 -1
  %3050 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 -1
  %3051 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3005, i64 -1
  %3052 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 -1
  br label %3053

3053:                                             ; preds = %3053, %3047
  %3054 = phi i64 [ 0, %3047 ], [ %3088, %3053 ]
  %3055 = phi i64 [ %3048, %3047 ], [ %3089, %3053 ]
  %3056 = sub i64 0, %3054
  %3057 = sub i64 0, %3054
  %3058 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3049, i64 %3056
  %3059 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3050, i64 %3057
  %3060 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3059, i64 -1
  %3061 = bitcast %"class.v8::internal::compiler::Node"** %3060 to <2 x i64>*
  %3062 = load <2 x i64>, <2 x i64>* %3061, align 8, !alias.scope !101
  %3063 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3059, i64 -2
  %3064 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3063, i64 -1
  %3065 = bitcast %"class.v8::internal::compiler::Node"** %3064 to <2 x i64>*
  %3066 = load <2 x i64>, <2 x i64>* %3065, align 8, !alias.scope !101
  %3067 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3058, i64 -1
  %3068 = bitcast %"class.v8::internal::compiler::Node"** %3067 to <2 x i64>*
  store <2 x i64> %3062, <2 x i64>* %3068, align 8, !alias.scope !104, !noalias !101
  %3069 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3058, i64 -2
  %3070 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3069, i64 -1
  %3071 = bitcast %"class.v8::internal::compiler::Node"** %3070 to <2 x i64>*
  store <2 x i64> %3066, <2 x i64>* %3071, align 8, !alias.scope !104, !noalias !101
  %3072 = sub nuw nsw i64 -4, %3054
  %3073 = sub nuw nsw i64 -4, %3054
  %3074 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3051, i64 %3072
  %3075 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3052, i64 %3073
  %3076 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3075, i64 -1
  %3077 = bitcast %"class.v8::internal::compiler::Node"** %3076 to <2 x i64>*
  %3078 = load <2 x i64>, <2 x i64>* %3077, align 8, !alias.scope !101
  %3079 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3075, i64 -2
  %3080 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3079, i64 -1
  %3081 = bitcast %"class.v8::internal::compiler::Node"** %3080 to <2 x i64>*
  %3082 = load <2 x i64>, <2 x i64>* %3081, align 8, !alias.scope !101
  %3083 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3074, i64 -1
  %3084 = bitcast %"class.v8::internal::compiler::Node"** %3083 to <2 x i64>*
  store <2 x i64> %3078, <2 x i64>* %3084, align 8, !alias.scope !104, !noalias !101
  %3085 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3074, i64 -2
  %3086 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3085, i64 -1
  %3087 = bitcast %"class.v8::internal::compiler::Node"** %3086 to <2 x i64>*
  store <2 x i64> %3082, <2 x i64>* %3087, align 8, !alias.scope !104, !noalias !101
  %3088 = add i64 %3054, 8
  %3089 = add i64 %3055, -2
  %3090 = icmp eq i64 %3089, 0
  br i1 %3090, label %3091, label %3053, !llvm.loop !106

3091:                                             ; preds = %3053, %3036
  %3092 = phi i64 [ 0, %3036 ], [ %3088, %3053 ]
  %3093 = icmp eq i64 %3045, 0
  br i1 %3093, label %3113, label %3094

3094:                                             ; preds = %3091
  %3095 = sub i64 0, %3092
  %3096 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3005, i64 -1
  %3097 = sub i64 0, %3092
  %3098 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3014, i64 -1
  %3099 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3096, i64 %3095
  %3100 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3098, i64 %3097
  %3101 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3100, i64 -1
  %3102 = bitcast %"class.v8::internal::compiler::Node"** %3101 to <2 x i64>*
  %3103 = load <2 x i64>, <2 x i64>* %3102, align 8, !alias.scope !101
  %3104 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3100, i64 -2
  %3105 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3104, i64 -1
  %3106 = bitcast %"class.v8::internal::compiler::Node"** %3105 to <2 x i64>*
  %3107 = load <2 x i64>, <2 x i64>* %3106, align 8, !alias.scope !101
  %3108 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3099, i64 -1
  %3109 = bitcast %"class.v8::internal::compiler::Node"** %3108 to <2 x i64>*
  store <2 x i64> %3103, <2 x i64>* %3109, align 8, !alias.scope !104, !noalias !101
  %3110 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3099, i64 -2
  %3111 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3110, i64 -1
  %3112 = bitcast %"class.v8::internal::compiler::Node"** %3111 to <2 x i64>*
  store <2 x i64> %3107, <2 x i64>* %3112, align 8, !alias.scope !104, !noalias !101
  br label %3113

3113:                                             ; preds = %3091, %3094
  %3114 = icmp eq i64 %3021, %3037
  br i1 %3114, label %3185, label %3115

3115:                                             ; preds = %3113, %3023, %3016
  %3116 = phi %"class.v8::internal::compiler::Node"** [ %3005, %3023 ], [ %3005, %3016 ], [ %3039, %3113 ]
  %3117 = phi %"class.v8::internal::compiler::Node"** [ %3014, %3023 ], [ %3014, %3016 ], [ %3041, %3113 ]
  %3118 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3117, i64 -1
  %3119 = ptrtoint %"class.v8::internal::compiler::Node"** %3118 to i64
  %3120 = sub i64 %3119, %3013
  %3121 = lshr i64 %3120, 3
  %3122 = add nuw nsw i64 %3121, 1
  %3123 = and i64 %3122, 7
  %3124 = icmp eq i64 %3123, 0
  br i1 %3124, label %3136, label %3125

3125:                                             ; preds = %3115, %3125
  %3126 = phi %"class.v8::internal::compiler::Node"** [ %3129, %3125 ], [ %3116, %3115 ]
  %3127 = phi %"class.v8::internal::compiler::Node"** [ %3130, %3125 ], [ %3117, %3115 ]
  %3128 = phi i64 [ %3134, %3125 ], [ %3123, %3115 ]
  %3129 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3126, i64 -1
  %3130 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3127, i64 -1
  %3131 = bitcast %"class.v8::internal::compiler::Node"** %3130 to i64*
  %3132 = load i64, i64* %3131, align 8
  %3133 = bitcast %"class.v8::internal::compiler::Node"** %3129 to i64*
  store i64 %3132, i64* %3133, align 8
  %3134 = add i64 %3128, -1
  %3135 = icmp eq i64 %3134, 0
  br i1 %3135, label %3136, label %3125, !llvm.loop !107

3136:                                             ; preds = %3125, %3115
  %3137 = phi %"class.v8::internal::compiler::Node"** [ undef, %3115 ], [ %3129, %3125 ]
  %3138 = phi %"class.v8::internal::compiler::Node"** [ %3116, %3115 ], [ %3129, %3125 ]
  %3139 = phi %"class.v8::internal::compiler::Node"** [ %3117, %3115 ], [ %3130, %3125 ]
  %3140 = icmp ult i64 %3120, 56
  br i1 %3140, label %3185, label %3141

3141:                                             ; preds = %3136, %3141
  %3142 = phi %"class.v8::internal::compiler::Node"** [ %3179, %3141 ], [ %3138, %3136 ]
  %3143 = phi %"class.v8::internal::compiler::Node"** [ %3180, %3141 ], [ %3139, %3136 ]
  %3144 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -1
  %3145 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -1
  %3146 = bitcast %"class.v8::internal::compiler::Node"** %3145 to i64*
  %3147 = load i64, i64* %3146, align 8
  %3148 = bitcast %"class.v8::internal::compiler::Node"** %3144 to i64*
  store i64 %3147, i64* %3148, align 8
  %3149 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -2
  %3150 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -2
  %3151 = bitcast %"class.v8::internal::compiler::Node"** %3150 to i64*
  %3152 = load i64, i64* %3151, align 8
  %3153 = bitcast %"class.v8::internal::compiler::Node"** %3149 to i64*
  store i64 %3152, i64* %3153, align 8
  %3154 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -3
  %3155 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -3
  %3156 = bitcast %"class.v8::internal::compiler::Node"** %3155 to i64*
  %3157 = load i64, i64* %3156, align 8
  %3158 = bitcast %"class.v8::internal::compiler::Node"** %3154 to i64*
  store i64 %3157, i64* %3158, align 8
  %3159 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -4
  %3160 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -4
  %3161 = bitcast %"class.v8::internal::compiler::Node"** %3160 to i64*
  %3162 = load i64, i64* %3161, align 8
  %3163 = bitcast %"class.v8::internal::compiler::Node"** %3159 to i64*
  store i64 %3162, i64* %3163, align 8
  %3164 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -5
  %3165 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -5
  %3166 = bitcast %"class.v8::internal::compiler::Node"** %3165 to i64*
  %3167 = load i64, i64* %3166, align 8
  %3168 = bitcast %"class.v8::internal::compiler::Node"** %3164 to i64*
  store i64 %3167, i64* %3168, align 8
  %3169 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -6
  %3170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -6
  %3171 = bitcast %"class.v8::internal::compiler::Node"** %3170 to i64*
  %3172 = load i64, i64* %3171, align 8
  %3173 = bitcast %"class.v8::internal::compiler::Node"** %3169 to i64*
  store i64 %3172, i64* %3173, align 8
  %3174 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -7
  %3175 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -7
  %3176 = bitcast %"class.v8::internal::compiler::Node"** %3175 to i64*
  %3177 = load i64, i64* %3176, align 8
  %3178 = bitcast %"class.v8::internal::compiler::Node"** %3174 to i64*
  store i64 %3177, i64* %3178, align 8
  %3179 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3142, i64 -8
  %3180 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3143, i64 -8
  %3181 = bitcast %"class.v8::internal::compiler::Node"** %3180 to i64*
  %3182 = load i64, i64* %3181, align 8
  %3183 = bitcast %"class.v8::internal::compiler::Node"** %3179 to i64*
  store i64 %3182, i64* %3183, align 8
  %3184 = icmp eq %"class.v8::internal::compiler::Node"** %3180, %3012
  br i1 %3184, label %3185, label %3141, !llvm.loop !108

3185:                                             ; preds = %3136, %3141, %3113, %3001
  %3186 = phi %"class.v8::internal::compiler::Node"** [ %3005, %3001 ], [ %3039, %3113 ], [ %3137, %3136 ], [ %3179, %3141 ]
  %3187 = ptrtoint %"class.v8::internal::compiler::Node"** %3186 to i64
  store i64 %3187, i64* %2963, align 8
  store i64 %3010, i64* %2962, align 8
  store i64 %3007, i64* %2972, align 8
  br label %3188

3188:                                             ; preds = %3185, %2955, %2943
  %3189 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 17
  %3190 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3189, align 8
  %3191 = icmp eq %"class.v8::internal::compiler::Node"* %3190, null
  %3192 = ptrtoint %"class.v8::internal::compiler::Node"* %3190 to i64
  br i1 %3191, label %3433, label %3193

3193:                                             ; preds = %3188
  %3194 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %3195 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3194, align 8
  %3196 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3197 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3196, align 8
  %3198 = icmp eq %"class.v8::internal::compiler::Node"** %3195, %3197
  %3199 = ptrtoint %"class.v8::internal::compiler::Node"** %3197 to i64
  br i1 %3198, label %3205, label %3200

3200:                                             ; preds = %3193
  %3201 = bitcast %"class.v8::internal::compiler::Node"** %3195 to i64*
  store i64 %3192, i64* %3201, align 8
  %3202 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3195, i64 1
  %3203 = ptrtoint %"class.v8::internal::compiler::Node"** %3202 to i64
  %3204 = bitcast %"class.v8::internal::compiler::Node"*** %3194 to i64*
  store i64 %3203, i64* %3204, align 8
  br label %3433

3205:                                             ; preds = %3193
  %3206 = ptrtoint %"class.v8::internal::compiler::Node"** %3195 to i64
  %3207 = bitcast %"class.v8::internal::compiler::Node"*** %3194 to i64*
  %3208 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %3209 = load i64, i64* %3208, align 8
  %3210 = sub i64 %3206, %3209
  %3211 = ashr exact i64 %3210, 3
  %3212 = add nsw i64 %3211, 1
  %3213 = icmp ugt i64 %3212, 268435455
  br i1 %3213, label %3214, label %3216

3214:                                             ; preds = %3205
  %3215 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3215) #6
  unreachable

3216:                                             ; preds = %3205
  %3217 = bitcast %"class.v8::internal::compiler::Node"*** %3196 to i64*
  %3218 = sub i64 %3199, %3209
  %3219 = ashr exact i64 %3218, 3
  %3220 = icmp ult i64 %3219, 134217727
  br i1 %3220, label %3221, label %3226

3221:                                             ; preds = %3216
  %3222 = ashr exact i64 %3218, 2
  %3223 = icmp ult i64 %3222, %3212
  %3224 = select i1 %3223, i64 %3212, i64 %3222
  %3225 = icmp eq i64 %3224, 0
  br i1 %3225, label %3246, label %3226

3226:                                             ; preds = %3221, %3216
  %3227 = phi i64 [ %3224, %3221 ], [ 268435455, %3216 ]
  %3228 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %3229 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3228, align 8
  %3230 = shl i64 %3227, 3
  %3231 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3229, i64 0, i32 2
  %3232 = load i64, i64* %3231, align 8
  %3233 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3229, i64 0, i32 3
  %3234 = load i64, i64* %3233, align 8
  %3235 = sub i64 %3234, %3232
  %3236 = icmp ugt i64 %3230, %3235
  br i1 %3236, label %3237, label %3239, !prof !2

3237:                                             ; preds = %3226
  %3238 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3229, i64 %3230) #5
  br label %3241

3239:                                             ; preds = %3226
  %3240 = add i64 %3232, %3230
  store i64 %3240, i64* %3231, align 8
  br label %3241

3241:                                             ; preds = %3239, %3237
  %3242 = phi i64 [ %3238, %3237 ], [ %3232, %3239 ]
  %3243 = inttoptr i64 %3242 to %"class.v8::internal::compiler::Node"**
  %3244 = bitcast %"class.v8::internal::compiler::Node"** %3189 to i64*
  %3245 = load i64, i64* %3244, align 8
  br label %3246

3246:                                             ; preds = %3221, %3241
  %3247 = phi i64 [ %3245, %3241 ], [ %3192, %3221 ]
  %3248 = phi i64 [ %3227, %3241 ], [ 0, %3221 ]
  %3249 = phi %"class.v8::internal::compiler::Node"** [ %3243, %3241 ], [ null, %3221 ]
  %3250 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3249, i64 %3211
  %3251 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3249, i64 %3248
  %3252 = ptrtoint %"class.v8::internal::compiler::Node"** %3251 to i64
  %3253 = bitcast %"class.v8::internal::compiler::Node"** %3250 to i64*
  store i64 %3247, i64* %3253, align 8
  %3254 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3250, i64 1
  %3255 = ptrtoint %"class.v8::internal::compiler::Node"** %3254 to i64
  %3256 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %3257 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3256, align 8
  %3258 = ptrtoint %"class.v8::internal::compiler::Node"** %3257 to i64
  %3259 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3194, align 8
  %3260 = icmp eq %"class.v8::internal::compiler::Node"** %3259, %3257
  br i1 %3260, label %3430, label %3261

3261:                                             ; preds = %3246
  %3262 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 -1
  %3263 = ptrtoint %"class.v8::internal::compiler::Node"** %3262 to i64
  %3264 = sub i64 %3263, %3258
  %3265 = lshr i64 %3264, 3
  %3266 = add nuw nsw i64 %3265, 1
  %3267 = icmp ult i64 %3266, 4
  br i1 %3267, label %3360, label %3268

3268:                                             ; preds = %3261
  %3269 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 -1
  %3270 = ptrtoint %"class.v8::internal::compiler::Node"** %3269 to i64
  %3271 = sub i64 %3270, %3258
  %3272 = lshr i64 %3271, 3
  %3273 = xor i64 %3272, -1
  %3274 = add nsw i64 %3211, %3273
  %3275 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3249, i64 %3274
  %3276 = xor i64 %3272, -1
  %3277 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 %3276
  %3278 = icmp ult %"class.v8::internal::compiler::Node"** %3275, %3259
  %3279 = icmp ult %"class.v8::internal::compiler::Node"** %3277, %3250
  %3280 = and i1 %3278, %3279
  br i1 %3280, label %3360, label %3281

3281:                                             ; preds = %3268
  %3282 = and i64 %3266, 4611686018427387900
  %3283 = sub nsw i64 0, %3282
  %3284 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3250, i64 %3283
  %3285 = sub nsw i64 0, %3282
  %3286 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 %3285
  %3287 = add nsw i64 %3282, -4
  %3288 = lshr exact i64 %3287, 2
  %3289 = add nuw nsw i64 %3288, 1
  %3290 = and i64 %3289, 1
  %3291 = icmp eq i64 %3287, 0
  br i1 %3291, label %3336, label %3292

3292:                                             ; preds = %3281
  %3293 = sub nuw nsw i64 %3289, %3290
  %3294 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3250, i64 -1
  %3295 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 -1
  %3296 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3250, i64 -1
  %3297 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 -1
  br label %3298

3298:                                             ; preds = %3298, %3292
  %3299 = phi i64 [ 0, %3292 ], [ %3333, %3298 ]
  %3300 = phi i64 [ %3293, %3292 ], [ %3334, %3298 ]
  %3301 = sub i64 0, %3299
  %3302 = sub i64 0, %3299
  %3303 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3294, i64 %3301
  %3304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3295, i64 %3302
  %3305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3304, i64 -1
  %3306 = bitcast %"class.v8::internal::compiler::Node"** %3305 to <2 x i64>*
  %3307 = load <2 x i64>, <2 x i64>* %3306, align 8, !alias.scope !109
  %3308 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3304, i64 -2
  %3309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3308, i64 -1
  %3310 = bitcast %"class.v8::internal::compiler::Node"** %3309 to <2 x i64>*
  %3311 = load <2 x i64>, <2 x i64>* %3310, align 8, !alias.scope !109
  %3312 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3303, i64 -1
  %3313 = bitcast %"class.v8::internal::compiler::Node"** %3312 to <2 x i64>*
  store <2 x i64> %3307, <2 x i64>* %3313, align 8, !alias.scope !112, !noalias !109
  %3314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3303, i64 -2
  %3315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3314, i64 -1
  %3316 = bitcast %"class.v8::internal::compiler::Node"** %3315 to <2 x i64>*
  store <2 x i64> %3311, <2 x i64>* %3316, align 8, !alias.scope !112, !noalias !109
  %3317 = sub nuw nsw i64 -4, %3299
  %3318 = sub nuw nsw i64 -4, %3299
  %3319 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3296, i64 %3317
  %3320 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3297, i64 %3318
  %3321 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3320, i64 -1
  %3322 = bitcast %"class.v8::internal::compiler::Node"** %3321 to <2 x i64>*
  %3323 = load <2 x i64>, <2 x i64>* %3322, align 8, !alias.scope !109
  %3324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3320, i64 -2
  %3325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3324, i64 -1
  %3326 = bitcast %"class.v8::internal::compiler::Node"** %3325 to <2 x i64>*
  %3327 = load <2 x i64>, <2 x i64>* %3326, align 8, !alias.scope !109
  %3328 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3319, i64 -1
  %3329 = bitcast %"class.v8::internal::compiler::Node"** %3328 to <2 x i64>*
  store <2 x i64> %3323, <2 x i64>* %3329, align 8, !alias.scope !112, !noalias !109
  %3330 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3319, i64 -2
  %3331 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3330, i64 -1
  %3332 = bitcast %"class.v8::internal::compiler::Node"** %3331 to <2 x i64>*
  store <2 x i64> %3327, <2 x i64>* %3332, align 8, !alias.scope !112, !noalias !109
  %3333 = add i64 %3299, 8
  %3334 = add i64 %3300, -2
  %3335 = icmp eq i64 %3334, 0
  br i1 %3335, label %3336, label %3298, !llvm.loop !114

3336:                                             ; preds = %3298, %3281
  %3337 = phi i64 [ 0, %3281 ], [ %3333, %3298 ]
  %3338 = icmp eq i64 %3290, 0
  br i1 %3338, label %3358, label %3339

3339:                                             ; preds = %3336
  %3340 = sub i64 0, %3337
  %3341 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3250, i64 -1
  %3342 = sub i64 0, %3337
  %3343 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3259, i64 -1
  %3344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3341, i64 %3340
  %3345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3343, i64 %3342
  %3346 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3345, i64 -1
  %3347 = bitcast %"class.v8::internal::compiler::Node"** %3346 to <2 x i64>*
  %3348 = load <2 x i64>, <2 x i64>* %3347, align 8, !alias.scope !109
  %3349 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3345, i64 -2
  %3350 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3349, i64 -1
  %3351 = bitcast %"class.v8::internal::compiler::Node"** %3350 to <2 x i64>*
  %3352 = load <2 x i64>, <2 x i64>* %3351, align 8, !alias.scope !109
  %3353 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3344, i64 -1
  %3354 = bitcast %"class.v8::internal::compiler::Node"** %3353 to <2 x i64>*
  store <2 x i64> %3348, <2 x i64>* %3354, align 8, !alias.scope !112, !noalias !109
  %3355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3344, i64 -2
  %3356 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3355, i64 -1
  %3357 = bitcast %"class.v8::internal::compiler::Node"** %3356 to <2 x i64>*
  store <2 x i64> %3352, <2 x i64>* %3357, align 8, !alias.scope !112, !noalias !109
  br label %3358

3358:                                             ; preds = %3336, %3339
  %3359 = icmp eq i64 %3266, %3282
  br i1 %3359, label %3430, label %3360

3360:                                             ; preds = %3358, %3268, %3261
  %3361 = phi %"class.v8::internal::compiler::Node"** [ %3250, %3268 ], [ %3250, %3261 ], [ %3284, %3358 ]
  %3362 = phi %"class.v8::internal::compiler::Node"** [ %3259, %3268 ], [ %3259, %3261 ], [ %3286, %3358 ]
  %3363 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3362, i64 -1
  %3364 = ptrtoint %"class.v8::internal::compiler::Node"** %3363 to i64
  %3365 = sub i64 %3364, %3258
  %3366 = lshr i64 %3365, 3
  %3367 = add nuw nsw i64 %3366, 1
  %3368 = and i64 %3367, 7
  %3369 = icmp eq i64 %3368, 0
  br i1 %3369, label %3381, label %3370

3370:                                             ; preds = %3360, %3370
  %3371 = phi %"class.v8::internal::compiler::Node"** [ %3374, %3370 ], [ %3361, %3360 ]
  %3372 = phi %"class.v8::internal::compiler::Node"** [ %3375, %3370 ], [ %3362, %3360 ]
  %3373 = phi i64 [ %3379, %3370 ], [ %3368, %3360 ]
  %3374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3371, i64 -1
  %3375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3372, i64 -1
  %3376 = bitcast %"class.v8::internal::compiler::Node"** %3375 to i64*
  %3377 = load i64, i64* %3376, align 8
  %3378 = bitcast %"class.v8::internal::compiler::Node"** %3374 to i64*
  store i64 %3377, i64* %3378, align 8
  %3379 = add i64 %3373, -1
  %3380 = icmp eq i64 %3379, 0
  br i1 %3380, label %3381, label %3370, !llvm.loop !115

3381:                                             ; preds = %3370, %3360
  %3382 = phi %"class.v8::internal::compiler::Node"** [ undef, %3360 ], [ %3374, %3370 ]
  %3383 = phi %"class.v8::internal::compiler::Node"** [ %3361, %3360 ], [ %3374, %3370 ]
  %3384 = phi %"class.v8::internal::compiler::Node"** [ %3362, %3360 ], [ %3375, %3370 ]
  %3385 = icmp ult i64 %3365, 56
  br i1 %3385, label %3430, label %3386

3386:                                             ; preds = %3381, %3386
  %3387 = phi %"class.v8::internal::compiler::Node"** [ %3424, %3386 ], [ %3383, %3381 ]
  %3388 = phi %"class.v8::internal::compiler::Node"** [ %3425, %3386 ], [ %3384, %3381 ]
  %3389 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -1
  %3390 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -1
  %3391 = bitcast %"class.v8::internal::compiler::Node"** %3390 to i64*
  %3392 = load i64, i64* %3391, align 8
  %3393 = bitcast %"class.v8::internal::compiler::Node"** %3389 to i64*
  store i64 %3392, i64* %3393, align 8
  %3394 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -2
  %3395 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -2
  %3396 = bitcast %"class.v8::internal::compiler::Node"** %3395 to i64*
  %3397 = load i64, i64* %3396, align 8
  %3398 = bitcast %"class.v8::internal::compiler::Node"** %3394 to i64*
  store i64 %3397, i64* %3398, align 8
  %3399 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -3
  %3400 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -3
  %3401 = bitcast %"class.v8::internal::compiler::Node"** %3400 to i64*
  %3402 = load i64, i64* %3401, align 8
  %3403 = bitcast %"class.v8::internal::compiler::Node"** %3399 to i64*
  store i64 %3402, i64* %3403, align 8
  %3404 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -4
  %3405 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -4
  %3406 = bitcast %"class.v8::internal::compiler::Node"** %3405 to i64*
  %3407 = load i64, i64* %3406, align 8
  %3408 = bitcast %"class.v8::internal::compiler::Node"** %3404 to i64*
  store i64 %3407, i64* %3408, align 8
  %3409 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -5
  %3410 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -5
  %3411 = bitcast %"class.v8::internal::compiler::Node"** %3410 to i64*
  %3412 = load i64, i64* %3411, align 8
  %3413 = bitcast %"class.v8::internal::compiler::Node"** %3409 to i64*
  store i64 %3412, i64* %3413, align 8
  %3414 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -6
  %3415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -6
  %3416 = bitcast %"class.v8::internal::compiler::Node"** %3415 to i64*
  %3417 = load i64, i64* %3416, align 8
  %3418 = bitcast %"class.v8::internal::compiler::Node"** %3414 to i64*
  store i64 %3417, i64* %3418, align 8
  %3419 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -7
  %3420 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -7
  %3421 = bitcast %"class.v8::internal::compiler::Node"** %3420 to i64*
  %3422 = load i64, i64* %3421, align 8
  %3423 = bitcast %"class.v8::internal::compiler::Node"** %3419 to i64*
  store i64 %3422, i64* %3423, align 8
  %3424 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3387, i64 -8
  %3425 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3388, i64 -8
  %3426 = bitcast %"class.v8::internal::compiler::Node"** %3425 to i64*
  %3427 = load i64, i64* %3426, align 8
  %3428 = bitcast %"class.v8::internal::compiler::Node"** %3424 to i64*
  store i64 %3427, i64* %3428, align 8
  %3429 = icmp eq %"class.v8::internal::compiler::Node"** %3425, %3257
  br i1 %3429, label %3430, label %3386, !llvm.loop !116

3430:                                             ; preds = %3381, %3386, %3358, %3246
  %3431 = phi %"class.v8::internal::compiler::Node"** [ %3250, %3246 ], [ %3284, %3358 ], [ %3382, %3381 ], [ %3424, %3386 ]
  %3432 = ptrtoint %"class.v8::internal::compiler::Node"** %3431 to i64
  store i64 %3432, i64* %3208, align 8
  store i64 %3255, i64* %3207, align 8
  store i64 %3252, i64* %3217, align 8
  br label %3433

3433:                                             ; preds = %3430, %3200, %3188
  %3434 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 18
  %3435 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3434, align 8
  %3436 = icmp eq %"class.v8::internal::compiler::Node"* %3435, null
  %3437 = ptrtoint %"class.v8::internal::compiler::Node"* %3435 to i64
  br i1 %3436, label %3678, label %3438

3438:                                             ; preds = %3433
  %3439 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %3440 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3439, align 8
  %3441 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3442 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3441, align 8
  %3443 = icmp eq %"class.v8::internal::compiler::Node"** %3440, %3442
  %3444 = ptrtoint %"class.v8::internal::compiler::Node"** %3442 to i64
  br i1 %3443, label %3450, label %3445

3445:                                             ; preds = %3438
  %3446 = bitcast %"class.v8::internal::compiler::Node"** %3440 to i64*
  store i64 %3437, i64* %3446, align 8
  %3447 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3440, i64 1
  %3448 = ptrtoint %"class.v8::internal::compiler::Node"** %3447 to i64
  %3449 = bitcast %"class.v8::internal::compiler::Node"*** %3439 to i64*
  store i64 %3448, i64* %3449, align 8
  br label %3678

3450:                                             ; preds = %3438
  %3451 = ptrtoint %"class.v8::internal::compiler::Node"** %3440 to i64
  %3452 = bitcast %"class.v8::internal::compiler::Node"*** %3439 to i64*
  %3453 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %3454 = load i64, i64* %3453, align 8
  %3455 = sub i64 %3451, %3454
  %3456 = ashr exact i64 %3455, 3
  %3457 = add nsw i64 %3456, 1
  %3458 = icmp ugt i64 %3457, 268435455
  br i1 %3458, label %3459, label %3461

3459:                                             ; preds = %3450
  %3460 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3460) #6
  unreachable

3461:                                             ; preds = %3450
  %3462 = bitcast %"class.v8::internal::compiler::Node"*** %3441 to i64*
  %3463 = sub i64 %3444, %3454
  %3464 = ashr exact i64 %3463, 3
  %3465 = icmp ult i64 %3464, 134217727
  br i1 %3465, label %3466, label %3471

3466:                                             ; preds = %3461
  %3467 = ashr exact i64 %3463, 2
  %3468 = icmp ult i64 %3467, %3457
  %3469 = select i1 %3468, i64 %3457, i64 %3467
  %3470 = icmp eq i64 %3469, 0
  br i1 %3470, label %3491, label %3471

3471:                                             ; preds = %3466, %3461
  %3472 = phi i64 [ %3469, %3466 ], [ 268435455, %3461 ]
  %3473 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %3474 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3473, align 8
  %3475 = shl i64 %3472, 3
  %3476 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3474, i64 0, i32 2
  %3477 = load i64, i64* %3476, align 8
  %3478 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3474, i64 0, i32 3
  %3479 = load i64, i64* %3478, align 8
  %3480 = sub i64 %3479, %3477
  %3481 = icmp ugt i64 %3475, %3480
  br i1 %3481, label %3482, label %3484, !prof !2

3482:                                             ; preds = %3471
  %3483 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3474, i64 %3475) #5
  br label %3486

3484:                                             ; preds = %3471
  %3485 = add i64 %3477, %3475
  store i64 %3485, i64* %3476, align 8
  br label %3486

3486:                                             ; preds = %3484, %3482
  %3487 = phi i64 [ %3483, %3482 ], [ %3477, %3484 ]
  %3488 = inttoptr i64 %3487 to %"class.v8::internal::compiler::Node"**
  %3489 = bitcast %"class.v8::internal::compiler::Node"** %3434 to i64*
  %3490 = load i64, i64* %3489, align 8
  br label %3491

3491:                                             ; preds = %3466, %3486
  %3492 = phi i64 [ %3490, %3486 ], [ %3437, %3466 ]
  %3493 = phi i64 [ %3472, %3486 ], [ 0, %3466 ]
  %3494 = phi %"class.v8::internal::compiler::Node"** [ %3488, %3486 ], [ null, %3466 ]
  %3495 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3494, i64 %3456
  %3496 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3494, i64 %3493
  %3497 = ptrtoint %"class.v8::internal::compiler::Node"** %3496 to i64
  %3498 = bitcast %"class.v8::internal::compiler::Node"** %3495 to i64*
  store i64 %3492, i64* %3498, align 8
  %3499 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3495, i64 1
  %3500 = ptrtoint %"class.v8::internal::compiler::Node"** %3499 to i64
  %3501 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %3502 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3501, align 8
  %3503 = ptrtoint %"class.v8::internal::compiler::Node"** %3502 to i64
  %3504 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3439, align 8
  %3505 = icmp eq %"class.v8::internal::compiler::Node"** %3504, %3502
  br i1 %3505, label %3675, label %3506

3506:                                             ; preds = %3491
  %3507 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 -1
  %3508 = ptrtoint %"class.v8::internal::compiler::Node"** %3507 to i64
  %3509 = sub i64 %3508, %3503
  %3510 = lshr i64 %3509, 3
  %3511 = add nuw nsw i64 %3510, 1
  %3512 = icmp ult i64 %3511, 4
  br i1 %3512, label %3605, label %3513

3513:                                             ; preds = %3506
  %3514 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 -1
  %3515 = ptrtoint %"class.v8::internal::compiler::Node"** %3514 to i64
  %3516 = sub i64 %3515, %3503
  %3517 = lshr i64 %3516, 3
  %3518 = xor i64 %3517, -1
  %3519 = add nsw i64 %3456, %3518
  %3520 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3494, i64 %3519
  %3521 = xor i64 %3517, -1
  %3522 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 %3521
  %3523 = icmp ult %"class.v8::internal::compiler::Node"** %3520, %3504
  %3524 = icmp ult %"class.v8::internal::compiler::Node"** %3522, %3495
  %3525 = and i1 %3523, %3524
  br i1 %3525, label %3605, label %3526

3526:                                             ; preds = %3513
  %3527 = and i64 %3511, 4611686018427387900
  %3528 = sub nsw i64 0, %3527
  %3529 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3495, i64 %3528
  %3530 = sub nsw i64 0, %3527
  %3531 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 %3530
  %3532 = add nsw i64 %3527, -4
  %3533 = lshr exact i64 %3532, 2
  %3534 = add nuw nsw i64 %3533, 1
  %3535 = and i64 %3534, 1
  %3536 = icmp eq i64 %3532, 0
  br i1 %3536, label %3581, label %3537

3537:                                             ; preds = %3526
  %3538 = sub nuw nsw i64 %3534, %3535
  %3539 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3495, i64 -1
  %3540 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 -1
  %3541 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3495, i64 -1
  %3542 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 -1
  br label %3543

3543:                                             ; preds = %3543, %3537
  %3544 = phi i64 [ 0, %3537 ], [ %3578, %3543 ]
  %3545 = phi i64 [ %3538, %3537 ], [ %3579, %3543 ]
  %3546 = sub i64 0, %3544
  %3547 = sub i64 0, %3544
  %3548 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3539, i64 %3546
  %3549 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3540, i64 %3547
  %3550 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3549, i64 -1
  %3551 = bitcast %"class.v8::internal::compiler::Node"** %3550 to <2 x i64>*
  %3552 = load <2 x i64>, <2 x i64>* %3551, align 8, !alias.scope !117
  %3553 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3549, i64 -2
  %3554 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3553, i64 -1
  %3555 = bitcast %"class.v8::internal::compiler::Node"** %3554 to <2 x i64>*
  %3556 = load <2 x i64>, <2 x i64>* %3555, align 8, !alias.scope !117
  %3557 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3548, i64 -1
  %3558 = bitcast %"class.v8::internal::compiler::Node"** %3557 to <2 x i64>*
  store <2 x i64> %3552, <2 x i64>* %3558, align 8, !alias.scope !120, !noalias !117
  %3559 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3548, i64 -2
  %3560 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3559, i64 -1
  %3561 = bitcast %"class.v8::internal::compiler::Node"** %3560 to <2 x i64>*
  store <2 x i64> %3556, <2 x i64>* %3561, align 8, !alias.scope !120, !noalias !117
  %3562 = sub nuw nsw i64 -4, %3544
  %3563 = sub nuw nsw i64 -4, %3544
  %3564 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3541, i64 %3562
  %3565 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3542, i64 %3563
  %3566 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3565, i64 -1
  %3567 = bitcast %"class.v8::internal::compiler::Node"** %3566 to <2 x i64>*
  %3568 = load <2 x i64>, <2 x i64>* %3567, align 8, !alias.scope !117
  %3569 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3565, i64 -2
  %3570 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3569, i64 -1
  %3571 = bitcast %"class.v8::internal::compiler::Node"** %3570 to <2 x i64>*
  %3572 = load <2 x i64>, <2 x i64>* %3571, align 8, !alias.scope !117
  %3573 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3564, i64 -1
  %3574 = bitcast %"class.v8::internal::compiler::Node"** %3573 to <2 x i64>*
  store <2 x i64> %3568, <2 x i64>* %3574, align 8, !alias.scope !120, !noalias !117
  %3575 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3564, i64 -2
  %3576 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3575, i64 -1
  %3577 = bitcast %"class.v8::internal::compiler::Node"** %3576 to <2 x i64>*
  store <2 x i64> %3572, <2 x i64>* %3577, align 8, !alias.scope !120, !noalias !117
  %3578 = add i64 %3544, 8
  %3579 = add i64 %3545, -2
  %3580 = icmp eq i64 %3579, 0
  br i1 %3580, label %3581, label %3543, !llvm.loop !122

3581:                                             ; preds = %3543, %3526
  %3582 = phi i64 [ 0, %3526 ], [ %3578, %3543 ]
  %3583 = icmp eq i64 %3535, 0
  br i1 %3583, label %3603, label %3584

3584:                                             ; preds = %3581
  %3585 = sub i64 0, %3582
  %3586 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3495, i64 -1
  %3587 = sub i64 0, %3582
  %3588 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3504, i64 -1
  %3589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3586, i64 %3585
  %3590 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3588, i64 %3587
  %3591 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3590, i64 -1
  %3592 = bitcast %"class.v8::internal::compiler::Node"** %3591 to <2 x i64>*
  %3593 = load <2 x i64>, <2 x i64>* %3592, align 8, !alias.scope !117
  %3594 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3590, i64 -2
  %3595 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3594, i64 -1
  %3596 = bitcast %"class.v8::internal::compiler::Node"** %3595 to <2 x i64>*
  %3597 = load <2 x i64>, <2 x i64>* %3596, align 8, !alias.scope !117
  %3598 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3589, i64 -1
  %3599 = bitcast %"class.v8::internal::compiler::Node"** %3598 to <2 x i64>*
  store <2 x i64> %3593, <2 x i64>* %3599, align 8, !alias.scope !120, !noalias !117
  %3600 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3589, i64 -2
  %3601 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3600, i64 -1
  %3602 = bitcast %"class.v8::internal::compiler::Node"** %3601 to <2 x i64>*
  store <2 x i64> %3597, <2 x i64>* %3602, align 8, !alias.scope !120, !noalias !117
  br label %3603

3603:                                             ; preds = %3581, %3584
  %3604 = icmp eq i64 %3511, %3527
  br i1 %3604, label %3675, label %3605

3605:                                             ; preds = %3603, %3513, %3506
  %3606 = phi %"class.v8::internal::compiler::Node"** [ %3495, %3513 ], [ %3495, %3506 ], [ %3529, %3603 ]
  %3607 = phi %"class.v8::internal::compiler::Node"** [ %3504, %3513 ], [ %3504, %3506 ], [ %3531, %3603 ]
  %3608 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3607, i64 -1
  %3609 = ptrtoint %"class.v8::internal::compiler::Node"** %3608 to i64
  %3610 = sub i64 %3609, %3503
  %3611 = lshr i64 %3610, 3
  %3612 = add nuw nsw i64 %3611, 1
  %3613 = and i64 %3612, 7
  %3614 = icmp eq i64 %3613, 0
  br i1 %3614, label %3626, label %3615

3615:                                             ; preds = %3605, %3615
  %3616 = phi %"class.v8::internal::compiler::Node"** [ %3619, %3615 ], [ %3606, %3605 ]
  %3617 = phi %"class.v8::internal::compiler::Node"** [ %3620, %3615 ], [ %3607, %3605 ]
  %3618 = phi i64 [ %3624, %3615 ], [ %3613, %3605 ]
  %3619 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3616, i64 -1
  %3620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3617, i64 -1
  %3621 = bitcast %"class.v8::internal::compiler::Node"** %3620 to i64*
  %3622 = load i64, i64* %3621, align 8
  %3623 = bitcast %"class.v8::internal::compiler::Node"** %3619 to i64*
  store i64 %3622, i64* %3623, align 8
  %3624 = add i64 %3618, -1
  %3625 = icmp eq i64 %3624, 0
  br i1 %3625, label %3626, label %3615, !llvm.loop !123

3626:                                             ; preds = %3615, %3605
  %3627 = phi %"class.v8::internal::compiler::Node"** [ undef, %3605 ], [ %3619, %3615 ]
  %3628 = phi %"class.v8::internal::compiler::Node"** [ %3606, %3605 ], [ %3619, %3615 ]
  %3629 = phi %"class.v8::internal::compiler::Node"** [ %3607, %3605 ], [ %3620, %3615 ]
  %3630 = icmp ult i64 %3610, 56
  br i1 %3630, label %3675, label %3631

3631:                                             ; preds = %3626, %3631
  %3632 = phi %"class.v8::internal::compiler::Node"** [ %3669, %3631 ], [ %3628, %3626 ]
  %3633 = phi %"class.v8::internal::compiler::Node"** [ %3670, %3631 ], [ %3629, %3626 ]
  %3634 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -1
  %3635 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -1
  %3636 = bitcast %"class.v8::internal::compiler::Node"** %3635 to i64*
  %3637 = load i64, i64* %3636, align 8
  %3638 = bitcast %"class.v8::internal::compiler::Node"** %3634 to i64*
  store i64 %3637, i64* %3638, align 8
  %3639 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -2
  %3640 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -2
  %3641 = bitcast %"class.v8::internal::compiler::Node"** %3640 to i64*
  %3642 = load i64, i64* %3641, align 8
  %3643 = bitcast %"class.v8::internal::compiler::Node"** %3639 to i64*
  store i64 %3642, i64* %3643, align 8
  %3644 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -3
  %3645 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -3
  %3646 = bitcast %"class.v8::internal::compiler::Node"** %3645 to i64*
  %3647 = load i64, i64* %3646, align 8
  %3648 = bitcast %"class.v8::internal::compiler::Node"** %3644 to i64*
  store i64 %3647, i64* %3648, align 8
  %3649 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -4
  %3650 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -4
  %3651 = bitcast %"class.v8::internal::compiler::Node"** %3650 to i64*
  %3652 = load i64, i64* %3651, align 8
  %3653 = bitcast %"class.v8::internal::compiler::Node"** %3649 to i64*
  store i64 %3652, i64* %3653, align 8
  %3654 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -5
  %3655 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -5
  %3656 = bitcast %"class.v8::internal::compiler::Node"** %3655 to i64*
  %3657 = load i64, i64* %3656, align 8
  %3658 = bitcast %"class.v8::internal::compiler::Node"** %3654 to i64*
  store i64 %3657, i64* %3658, align 8
  %3659 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -6
  %3660 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -6
  %3661 = bitcast %"class.v8::internal::compiler::Node"** %3660 to i64*
  %3662 = load i64, i64* %3661, align 8
  %3663 = bitcast %"class.v8::internal::compiler::Node"** %3659 to i64*
  store i64 %3662, i64* %3663, align 8
  %3664 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -7
  %3665 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -7
  %3666 = bitcast %"class.v8::internal::compiler::Node"** %3665 to i64*
  %3667 = load i64, i64* %3666, align 8
  %3668 = bitcast %"class.v8::internal::compiler::Node"** %3664 to i64*
  store i64 %3667, i64* %3668, align 8
  %3669 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3632, i64 -8
  %3670 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3633, i64 -8
  %3671 = bitcast %"class.v8::internal::compiler::Node"** %3670 to i64*
  %3672 = load i64, i64* %3671, align 8
  %3673 = bitcast %"class.v8::internal::compiler::Node"** %3669 to i64*
  store i64 %3672, i64* %3673, align 8
  %3674 = icmp eq %"class.v8::internal::compiler::Node"** %3670, %3502
  br i1 %3674, label %3675, label %3631, !llvm.loop !124

3675:                                             ; preds = %3626, %3631, %3603, %3491
  %3676 = phi %"class.v8::internal::compiler::Node"** [ %3495, %3491 ], [ %3529, %3603 ], [ %3627, %3626 ], [ %3669, %3631 ]
  %3677 = ptrtoint %"class.v8::internal::compiler::Node"** %3676 to i64
  store i64 %3677, i64* %3453, align 8
  store i64 %3500, i64* %3452, align 8
  store i64 %3497, i64* %3462, align 8
  br label %3678

3678:                                             ; preds = %3675, %3445, %3433
  %3679 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 19
  %3680 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3679, align 8
  %3681 = icmp eq %"class.v8::internal::compiler::Node"* %3680, null
  %3682 = ptrtoint %"class.v8::internal::compiler::Node"* %3680 to i64
  br i1 %3681, label %3923, label %3683

3683:                                             ; preds = %3678
  %3684 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %3685 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3684, align 8
  %3686 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3687 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3686, align 8
  %3688 = icmp eq %"class.v8::internal::compiler::Node"** %3685, %3687
  %3689 = ptrtoint %"class.v8::internal::compiler::Node"** %3687 to i64
  br i1 %3688, label %3695, label %3690

3690:                                             ; preds = %3683
  %3691 = bitcast %"class.v8::internal::compiler::Node"** %3685 to i64*
  store i64 %3682, i64* %3691, align 8
  %3692 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3685, i64 1
  %3693 = ptrtoint %"class.v8::internal::compiler::Node"** %3692 to i64
  %3694 = bitcast %"class.v8::internal::compiler::Node"*** %3684 to i64*
  store i64 %3693, i64* %3694, align 8
  br label %3923

3695:                                             ; preds = %3683
  %3696 = ptrtoint %"class.v8::internal::compiler::Node"** %3685 to i64
  %3697 = bitcast %"class.v8::internal::compiler::Node"*** %3684 to i64*
  %3698 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %3699 = load i64, i64* %3698, align 8
  %3700 = sub i64 %3696, %3699
  %3701 = ashr exact i64 %3700, 3
  %3702 = add nsw i64 %3701, 1
  %3703 = icmp ugt i64 %3702, 268435455
  br i1 %3703, label %3704, label %3706

3704:                                             ; preds = %3695
  %3705 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3705) #6
  unreachable

3706:                                             ; preds = %3695
  %3707 = bitcast %"class.v8::internal::compiler::Node"*** %3686 to i64*
  %3708 = sub i64 %3689, %3699
  %3709 = ashr exact i64 %3708, 3
  %3710 = icmp ult i64 %3709, 134217727
  br i1 %3710, label %3711, label %3716

3711:                                             ; preds = %3706
  %3712 = ashr exact i64 %3708, 2
  %3713 = icmp ult i64 %3712, %3702
  %3714 = select i1 %3713, i64 %3702, i64 %3712
  %3715 = icmp eq i64 %3714, 0
  br i1 %3715, label %3736, label %3716

3716:                                             ; preds = %3711, %3706
  %3717 = phi i64 [ %3714, %3711 ], [ 268435455, %3706 ]
  %3718 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %3719 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3718, align 8
  %3720 = shl i64 %3717, 3
  %3721 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3719, i64 0, i32 2
  %3722 = load i64, i64* %3721, align 8
  %3723 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3719, i64 0, i32 3
  %3724 = load i64, i64* %3723, align 8
  %3725 = sub i64 %3724, %3722
  %3726 = icmp ugt i64 %3720, %3725
  br i1 %3726, label %3727, label %3729, !prof !2

3727:                                             ; preds = %3716
  %3728 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3719, i64 %3720) #5
  br label %3731

3729:                                             ; preds = %3716
  %3730 = add i64 %3722, %3720
  store i64 %3730, i64* %3721, align 8
  br label %3731

3731:                                             ; preds = %3729, %3727
  %3732 = phi i64 [ %3728, %3727 ], [ %3722, %3729 ]
  %3733 = inttoptr i64 %3732 to %"class.v8::internal::compiler::Node"**
  %3734 = bitcast %"class.v8::internal::compiler::Node"** %3679 to i64*
  %3735 = load i64, i64* %3734, align 8
  br label %3736

3736:                                             ; preds = %3711, %3731
  %3737 = phi i64 [ %3735, %3731 ], [ %3682, %3711 ]
  %3738 = phi i64 [ %3717, %3731 ], [ 0, %3711 ]
  %3739 = phi %"class.v8::internal::compiler::Node"** [ %3733, %3731 ], [ null, %3711 ]
  %3740 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3739, i64 %3701
  %3741 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3739, i64 %3738
  %3742 = ptrtoint %"class.v8::internal::compiler::Node"** %3741 to i64
  %3743 = bitcast %"class.v8::internal::compiler::Node"** %3740 to i64*
  store i64 %3737, i64* %3743, align 8
  %3744 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3740, i64 1
  %3745 = ptrtoint %"class.v8::internal::compiler::Node"** %3744 to i64
  %3746 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %3747 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3746, align 8
  %3748 = ptrtoint %"class.v8::internal::compiler::Node"** %3747 to i64
  %3749 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3684, align 8
  %3750 = icmp eq %"class.v8::internal::compiler::Node"** %3749, %3747
  br i1 %3750, label %3920, label %3751

3751:                                             ; preds = %3736
  %3752 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 -1
  %3753 = ptrtoint %"class.v8::internal::compiler::Node"** %3752 to i64
  %3754 = sub i64 %3753, %3748
  %3755 = lshr i64 %3754, 3
  %3756 = add nuw nsw i64 %3755, 1
  %3757 = icmp ult i64 %3756, 4
  br i1 %3757, label %3850, label %3758

3758:                                             ; preds = %3751
  %3759 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 -1
  %3760 = ptrtoint %"class.v8::internal::compiler::Node"** %3759 to i64
  %3761 = sub i64 %3760, %3748
  %3762 = lshr i64 %3761, 3
  %3763 = xor i64 %3762, -1
  %3764 = add nsw i64 %3701, %3763
  %3765 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3739, i64 %3764
  %3766 = xor i64 %3762, -1
  %3767 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 %3766
  %3768 = icmp ult %"class.v8::internal::compiler::Node"** %3765, %3749
  %3769 = icmp ult %"class.v8::internal::compiler::Node"** %3767, %3740
  %3770 = and i1 %3768, %3769
  br i1 %3770, label %3850, label %3771

3771:                                             ; preds = %3758
  %3772 = and i64 %3756, 4611686018427387900
  %3773 = sub nsw i64 0, %3772
  %3774 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3740, i64 %3773
  %3775 = sub nsw i64 0, %3772
  %3776 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 %3775
  %3777 = add nsw i64 %3772, -4
  %3778 = lshr exact i64 %3777, 2
  %3779 = add nuw nsw i64 %3778, 1
  %3780 = and i64 %3779, 1
  %3781 = icmp eq i64 %3777, 0
  br i1 %3781, label %3826, label %3782

3782:                                             ; preds = %3771
  %3783 = sub nuw nsw i64 %3779, %3780
  %3784 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3740, i64 -1
  %3785 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 -1
  %3786 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3740, i64 -1
  %3787 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 -1
  br label %3788

3788:                                             ; preds = %3788, %3782
  %3789 = phi i64 [ 0, %3782 ], [ %3823, %3788 ]
  %3790 = phi i64 [ %3783, %3782 ], [ %3824, %3788 ]
  %3791 = sub i64 0, %3789
  %3792 = sub i64 0, %3789
  %3793 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3784, i64 %3791
  %3794 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3785, i64 %3792
  %3795 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3794, i64 -1
  %3796 = bitcast %"class.v8::internal::compiler::Node"** %3795 to <2 x i64>*
  %3797 = load <2 x i64>, <2 x i64>* %3796, align 8, !alias.scope !125
  %3798 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3794, i64 -2
  %3799 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3798, i64 -1
  %3800 = bitcast %"class.v8::internal::compiler::Node"** %3799 to <2 x i64>*
  %3801 = load <2 x i64>, <2 x i64>* %3800, align 8, !alias.scope !125
  %3802 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3793, i64 -1
  %3803 = bitcast %"class.v8::internal::compiler::Node"** %3802 to <2 x i64>*
  store <2 x i64> %3797, <2 x i64>* %3803, align 8, !alias.scope !128, !noalias !125
  %3804 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3793, i64 -2
  %3805 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3804, i64 -1
  %3806 = bitcast %"class.v8::internal::compiler::Node"** %3805 to <2 x i64>*
  store <2 x i64> %3801, <2 x i64>* %3806, align 8, !alias.scope !128, !noalias !125
  %3807 = sub nuw nsw i64 -4, %3789
  %3808 = sub nuw nsw i64 -4, %3789
  %3809 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3786, i64 %3807
  %3810 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3787, i64 %3808
  %3811 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3810, i64 -1
  %3812 = bitcast %"class.v8::internal::compiler::Node"** %3811 to <2 x i64>*
  %3813 = load <2 x i64>, <2 x i64>* %3812, align 8, !alias.scope !125
  %3814 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3810, i64 -2
  %3815 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3814, i64 -1
  %3816 = bitcast %"class.v8::internal::compiler::Node"** %3815 to <2 x i64>*
  %3817 = load <2 x i64>, <2 x i64>* %3816, align 8, !alias.scope !125
  %3818 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3809, i64 -1
  %3819 = bitcast %"class.v8::internal::compiler::Node"** %3818 to <2 x i64>*
  store <2 x i64> %3813, <2 x i64>* %3819, align 8, !alias.scope !128, !noalias !125
  %3820 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3809, i64 -2
  %3821 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3820, i64 -1
  %3822 = bitcast %"class.v8::internal::compiler::Node"** %3821 to <2 x i64>*
  store <2 x i64> %3817, <2 x i64>* %3822, align 8, !alias.scope !128, !noalias !125
  %3823 = add i64 %3789, 8
  %3824 = add i64 %3790, -2
  %3825 = icmp eq i64 %3824, 0
  br i1 %3825, label %3826, label %3788, !llvm.loop !130

3826:                                             ; preds = %3788, %3771
  %3827 = phi i64 [ 0, %3771 ], [ %3823, %3788 ]
  %3828 = icmp eq i64 %3780, 0
  br i1 %3828, label %3848, label %3829

3829:                                             ; preds = %3826
  %3830 = sub i64 0, %3827
  %3831 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3740, i64 -1
  %3832 = sub i64 0, %3827
  %3833 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3749, i64 -1
  %3834 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3831, i64 %3830
  %3835 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3833, i64 %3832
  %3836 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3835, i64 -1
  %3837 = bitcast %"class.v8::internal::compiler::Node"** %3836 to <2 x i64>*
  %3838 = load <2 x i64>, <2 x i64>* %3837, align 8, !alias.scope !125
  %3839 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3835, i64 -2
  %3840 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3839, i64 -1
  %3841 = bitcast %"class.v8::internal::compiler::Node"** %3840 to <2 x i64>*
  %3842 = load <2 x i64>, <2 x i64>* %3841, align 8, !alias.scope !125
  %3843 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3834, i64 -1
  %3844 = bitcast %"class.v8::internal::compiler::Node"** %3843 to <2 x i64>*
  store <2 x i64> %3838, <2 x i64>* %3844, align 8, !alias.scope !128, !noalias !125
  %3845 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3834, i64 -2
  %3846 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3845, i64 -1
  %3847 = bitcast %"class.v8::internal::compiler::Node"** %3846 to <2 x i64>*
  store <2 x i64> %3842, <2 x i64>* %3847, align 8, !alias.scope !128, !noalias !125
  br label %3848

3848:                                             ; preds = %3826, %3829
  %3849 = icmp eq i64 %3756, %3772
  br i1 %3849, label %3920, label %3850

3850:                                             ; preds = %3848, %3758, %3751
  %3851 = phi %"class.v8::internal::compiler::Node"** [ %3740, %3758 ], [ %3740, %3751 ], [ %3774, %3848 ]
  %3852 = phi %"class.v8::internal::compiler::Node"** [ %3749, %3758 ], [ %3749, %3751 ], [ %3776, %3848 ]
  %3853 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3852, i64 -1
  %3854 = ptrtoint %"class.v8::internal::compiler::Node"** %3853 to i64
  %3855 = sub i64 %3854, %3748
  %3856 = lshr i64 %3855, 3
  %3857 = add nuw nsw i64 %3856, 1
  %3858 = and i64 %3857, 7
  %3859 = icmp eq i64 %3858, 0
  br i1 %3859, label %3871, label %3860

3860:                                             ; preds = %3850, %3860
  %3861 = phi %"class.v8::internal::compiler::Node"** [ %3864, %3860 ], [ %3851, %3850 ]
  %3862 = phi %"class.v8::internal::compiler::Node"** [ %3865, %3860 ], [ %3852, %3850 ]
  %3863 = phi i64 [ %3869, %3860 ], [ %3858, %3850 ]
  %3864 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3861, i64 -1
  %3865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3862, i64 -1
  %3866 = bitcast %"class.v8::internal::compiler::Node"** %3865 to i64*
  %3867 = load i64, i64* %3866, align 8
  %3868 = bitcast %"class.v8::internal::compiler::Node"** %3864 to i64*
  store i64 %3867, i64* %3868, align 8
  %3869 = add i64 %3863, -1
  %3870 = icmp eq i64 %3869, 0
  br i1 %3870, label %3871, label %3860, !llvm.loop !131

3871:                                             ; preds = %3860, %3850
  %3872 = phi %"class.v8::internal::compiler::Node"** [ undef, %3850 ], [ %3864, %3860 ]
  %3873 = phi %"class.v8::internal::compiler::Node"** [ %3851, %3850 ], [ %3864, %3860 ]
  %3874 = phi %"class.v8::internal::compiler::Node"** [ %3852, %3850 ], [ %3865, %3860 ]
  %3875 = icmp ult i64 %3855, 56
  br i1 %3875, label %3920, label %3876

3876:                                             ; preds = %3871, %3876
  %3877 = phi %"class.v8::internal::compiler::Node"** [ %3914, %3876 ], [ %3873, %3871 ]
  %3878 = phi %"class.v8::internal::compiler::Node"** [ %3915, %3876 ], [ %3874, %3871 ]
  %3879 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -1
  %3880 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -1
  %3881 = bitcast %"class.v8::internal::compiler::Node"** %3880 to i64*
  %3882 = load i64, i64* %3881, align 8
  %3883 = bitcast %"class.v8::internal::compiler::Node"** %3879 to i64*
  store i64 %3882, i64* %3883, align 8
  %3884 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -2
  %3885 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -2
  %3886 = bitcast %"class.v8::internal::compiler::Node"** %3885 to i64*
  %3887 = load i64, i64* %3886, align 8
  %3888 = bitcast %"class.v8::internal::compiler::Node"** %3884 to i64*
  store i64 %3887, i64* %3888, align 8
  %3889 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -3
  %3890 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -3
  %3891 = bitcast %"class.v8::internal::compiler::Node"** %3890 to i64*
  %3892 = load i64, i64* %3891, align 8
  %3893 = bitcast %"class.v8::internal::compiler::Node"** %3889 to i64*
  store i64 %3892, i64* %3893, align 8
  %3894 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -4
  %3895 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -4
  %3896 = bitcast %"class.v8::internal::compiler::Node"** %3895 to i64*
  %3897 = load i64, i64* %3896, align 8
  %3898 = bitcast %"class.v8::internal::compiler::Node"** %3894 to i64*
  store i64 %3897, i64* %3898, align 8
  %3899 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -5
  %3900 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -5
  %3901 = bitcast %"class.v8::internal::compiler::Node"** %3900 to i64*
  %3902 = load i64, i64* %3901, align 8
  %3903 = bitcast %"class.v8::internal::compiler::Node"** %3899 to i64*
  store i64 %3902, i64* %3903, align 8
  %3904 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -6
  %3905 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -6
  %3906 = bitcast %"class.v8::internal::compiler::Node"** %3905 to i64*
  %3907 = load i64, i64* %3906, align 8
  %3908 = bitcast %"class.v8::internal::compiler::Node"** %3904 to i64*
  store i64 %3907, i64* %3908, align 8
  %3909 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -7
  %3910 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -7
  %3911 = bitcast %"class.v8::internal::compiler::Node"** %3910 to i64*
  %3912 = load i64, i64* %3911, align 8
  %3913 = bitcast %"class.v8::internal::compiler::Node"** %3909 to i64*
  store i64 %3912, i64* %3913, align 8
  %3914 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3877, i64 -8
  %3915 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3878, i64 -8
  %3916 = bitcast %"class.v8::internal::compiler::Node"** %3915 to i64*
  %3917 = load i64, i64* %3916, align 8
  %3918 = bitcast %"class.v8::internal::compiler::Node"** %3914 to i64*
  store i64 %3917, i64* %3918, align 8
  %3919 = icmp eq %"class.v8::internal::compiler::Node"** %3915, %3747
  br i1 %3919, label %3920, label %3876, !llvm.loop !132

3920:                                             ; preds = %3871, %3876, %3848, %3736
  %3921 = phi %"class.v8::internal::compiler::Node"** [ %3740, %3736 ], [ %3774, %3848 ], [ %3872, %3871 ], [ %3914, %3876 ]
  %3922 = ptrtoint %"class.v8::internal::compiler::Node"** %3921 to i64
  store i64 %3922, i64* %3698, align 8
  store i64 %3745, i64* %3697, align 8
  store i64 %3742, i64* %3707, align 8
  br label %3923

3923:                                             ; preds = %3920, %3690, %3678
  %3924 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 20
  %3925 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3924, align 8
  %3926 = icmp eq %"class.v8::internal::compiler::Node"* %3925, null
  %3927 = ptrtoint %"class.v8::internal::compiler::Node"* %3925 to i64
  br i1 %3926, label %4168, label %3928

3928:                                             ; preds = %3923
  %3929 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %3930 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3929, align 8
  %3931 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %3932 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3931, align 8
  %3933 = icmp eq %"class.v8::internal::compiler::Node"** %3930, %3932
  %3934 = ptrtoint %"class.v8::internal::compiler::Node"** %3932 to i64
  br i1 %3933, label %3940, label %3935

3935:                                             ; preds = %3928
  %3936 = bitcast %"class.v8::internal::compiler::Node"** %3930 to i64*
  store i64 %3927, i64* %3936, align 8
  %3937 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3930, i64 1
  %3938 = ptrtoint %"class.v8::internal::compiler::Node"** %3937 to i64
  %3939 = bitcast %"class.v8::internal::compiler::Node"*** %3929 to i64*
  store i64 %3938, i64* %3939, align 8
  br label %4168

3940:                                             ; preds = %3928
  %3941 = ptrtoint %"class.v8::internal::compiler::Node"** %3930 to i64
  %3942 = bitcast %"class.v8::internal::compiler::Node"*** %3929 to i64*
  %3943 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %3944 = load i64, i64* %3943, align 8
  %3945 = sub i64 %3941, %3944
  %3946 = ashr exact i64 %3945, 3
  %3947 = add nsw i64 %3946, 1
  %3948 = icmp ugt i64 %3947, 268435455
  br i1 %3948, label %3949, label %3951

3949:                                             ; preds = %3940
  %3950 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3950) #6
  unreachable

3951:                                             ; preds = %3940
  %3952 = bitcast %"class.v8::internal::compiler::Node"*** %3931 to i64*
  %3953 = sub i64 %3934, %3944
  %3954 = ashr exact i64 %3953, 3
  %3955 = icmp ult i64 %3954, 134217727
  br i1 %3955, label %3956, label %3961

3956:                                             ; preds = %3951
  %3957 = ashr exact i64 %3953, 2
  %3958 = icmp ult i64 %3957, %3947
  %3959 = select i1 %3958, i64 %3947, i64 %3957
  %3960 = icmp eq i64 %3959, 0
  br i1 %3960, label %3981, label %3961

3961:                                             ; preds = %3956, %3951
  %3962 = phi i64 [ %3959, %3956 ], [ 268435455, %3951 ]
  %3963 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %3964 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3963, align 8
  %3965 = shl i64 %3962, 3
  %3966 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3964, i64 0, i32 2
  %3967 = load i64, i64* %3966, align 8
  %3968 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %3964, i64 0, i32 3
  %3969 = load i64, i64* %3968, align 8
  %3970 = sub i64 %3969, %3967
  %3971 = icmp ugt i64 %3965, %3970
  br i1 %3971, label %3972, label %3974, !prof !2

3972:                                             ; preds = %3961
  %3973 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %3964, i64 %3965) #5
  br label %3976

3974:                                             ; preds = %3961
  %3975 = add i64 %3967, %3965
  store i64 %3975, i64* %3966, align 8
  br label %3976

3976:                                             ; preds = %3974, %3972
  %3977 = phi i64 [ %3973, %3972 ], [ %3967, %3974 ]
  %3978 = inttoptr i64 %3977 to %"class.v8::internal::compiler::Node"**
  %3979 = bitcast %"class.v8::internal::compiler::Node"** %3924 to i64*
  %3980 = load i64, i64* %3979, align 8
  br label %3981

3981:                                             ; preds = %3956, %3976
  %3982 = phi i64 [ %3980, %3976 ], [ %3927, %3956 ]
  %3983 = phi i64 [ %3962, %3976 ], [ 0, %3956 ]
  %3984 = phi %"class.v8::internal::compiler::Node"** [ %3978, %3976 ], [ null, %3956 ]
  %3985 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3984, i64 %3946
  %3986 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3984, i64 %3983
  %3987 = ptrtoint %"class.v8::internal::compiler::Node"** %3986 to i64
  %3988 = bitcast %"class.v8::internal::compiler::Node"** %3985 to i64*
  store i64 %3982, i64* %3988, align 8
  %3989 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3985, i64 1
  %3990 = ptrtoint %"class.v8::internal::compiler::Node"** %3989 to i64
  %3991 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %3992 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3991, align 8
  %3993 = ptrtoint %"class.v8::internal::compiler::Node"** %3992 to i64
  %3994 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3929, align 8
  %3995 = icmp eq %"class.v8::internal::compiler::Node"** %3994, %3992
  br i1 %3995, label %4165, label %3996

3996:                                             ; preds = %3981
  %3997 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 -1
  %3998 = ptrtoint %"class.v8::internal::compiler::Node"** %3997 to i64
  %3999 = sub i64 %3998, %3993
  %4000 = lshr i64 %3999, 3
  %4001 = add nuw nsw i64 %4000, 1
  %4002 = icmp ult i64 %4001, 4
  br i1 %4002, label %4095, label %4003

4003:                                             ; preds = %3996
  %4004 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 -1
  %4005 = ptrtoint %"class.v8::internal::compiler::Node"** %4004 to i64
  %4006 = sub i64 %4005, %3993
  %4007 = lshr i64 %4006, 3
  %4008 = xor i64 %4007, -1
  %4009 = add nsw i64 %3946, %4008
  %4010 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3984, i64 %4009
  %4011 = xor i64 %4007, -1
  %4012 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 %4011
  %4013 = icmp ult %"class.v8::internal::compiler::Node"** %4010, %3994
  %4014 = icmp ult %"class.v8::internal::compiler::Node"** %4012, %3985
  %4015 = and i1 %4013, %4014
  br i1 %4015, label %4095, label %4016

4016:                                             ; preds = %4003
  %4017 = and i64 %4001, 4611686018427387900
  %4018 = sub nsw i64 0, %4017
  %4019 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3985, i64 %4018
  %4020 = sub nsw i64 0, %4017
  %4021 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 %4020
  %4022 = add nsw i64 %4017, -4
  %4023 = lshr exact i64 %4022, 2
  %4024 = add nuw nsw i64 %4023, 1
  %4025 = and i64 %4024, 1
  %4026 = icmp eq i64 %4022, 0
  br i1 %4026, label %4071, label %4027

4027:                                             ; preds = %4016
  %4028 = sub nuw nsw i64 %4024, %4025
  %4029 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3985, i64 -1
  %4030 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 -1
  %4031 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3985, i64 -1
  %4032 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 -1
  br label %4033

4033:                                             ; preds = %4033, %4027
  %4034 = phi i64 [ 0, %4027 ], [ %4068, %4033 ]
  %4035 = phi i64 [ %4028, %4027 ], [ %4069, %4033 ]
  %4036 = sub i64 0, %4034
  %4037 = sub i64 0, %4034
  %4038 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4029, i64 %4036
  %4039 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4030, i64 %4037
  %4040 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4039, i64 -1
  %4041 = bitcast %"class.v8::internal::compiler::Node"** %4040 to <2 x i64>*
  %4042 = load <2 x i64>, <2 x i64>* %4041, align 8, !alias.scope !133
  %4043 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4039, i64 -2
  %4044 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4043, i64 -1
  %4045 = bitcast %"class.v8::internal::compiler::Node"** %4044 to <2 x i64>*
  %4046 = load <2 x i64>, <2 x i64>* %4045, align 8, !alias.scope !133
  %4047 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4038, i64 -1
  %4048 = bitcast %"class.v8::internal::compiler::Node"** %4047 to <2 x i64>*
  store <2 x i64> %4042, <2 x i64>* %4048, align 8, !alias.scope !136, !noalias !133
  %4049 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4038, i64 -2
  %4050 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4049, i64 -1
  %4051 = bitcast %"class.v8::internal::compiler::Node"** %4050 to <2 x i64>*
  store <2 x i64> %4046, <2 x i64>* %4051, align 8, !alias.scope !136, !noalias !133
  %4052 = sub nuw nsw i64 -4, %4034
  %4053 = sub nuw nsw i64 -4, %4034
  %4054 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4031, i64 %4052
  %4055 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4032, i64 %4053
  %4056 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4055, i64 -1
  %4057 = bitcast %"class.v8::internal::compiler::Node"** %4056 to <2 x i64>*
  %4058 = load <2 x i64>, <2 x i64>* %4057, align 8, !alias.scope !133
  %4059 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4055, i64 -2
  %4060 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4059, i64 -1
  %4061 = bitcast %"class.v8::internal::compiler::Node"** %4060 to <2 x i64>*
  %4062 = load <2 x i64>, <2 x i64>* %4061, align 8, !alias.scope !133
  %4063 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4054, i64 -1
  %4064 = bitcast %"class.v8::internal::compiler::Node"** %4063 to <2 x i64>*
  store <2 x i64> %4058, <2 x i64>* %4064, align 8, !alias.scope !136, !noalias !133
  %4065 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4054, i64 -2
  %4066 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4065, i64 -1
  %4067 = bitcast %"class.v8::internal::compiler::Node"** %4066 to <2 x i64>*
  store <2 x i64> %4062, <2 x i64>* %4067, align 8, !alias.scope !136, !noalias !133
  %4068 = add i64 %4034, 8
  %4069 = add i64 %4035, -2
  %4070 = icmp eq i64 %4069, 0
  br i1 %4070, label %4071, label %4033, !llvm.loop !138

4071:                                             ; preds = %4033, %4016
  %4072 = phi i64 [ 0, %4016 ], [ %4068, %4033 ]
  %4073 = icmp eq i64 %4025, 0
  br i1 %4073, label %4093, label %4074

4074:                                             ; preds = %4071
  %4075 = sub i64 0, %4072
  %4076 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3985, i64 -1
  %4077 = sub i64 0, %4072
  %4078 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3994, i64 -1
  %4079 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4076, i64 %4075
  %4080 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4078, i64 %4077
  %4081 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4080, i64 -1
  %4082 = bitcast %"class.v8::internal::compiler::Node"** %4081 to <2 x i64>*
  %4083 = load <2 x i64>, <2 x i64>* %4082, align 8, !alias.scope !133
  %4084 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4080, i64 -2
  %4085 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4084, i64 -1
  %4086 = bitcast %"class.v8::internal::compiler::Node"** %4085 to <2 x i64>*
  %4087 = load <2 x i64>, <2 x i64>* %4086, align 8, !alias.scope !133
  %4088 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4079, i64 -1
  %4089 = bitcast %"class.v8::internal::compiler::Node"** %4088 to <2 x i64>*
  store <2 x i64> %4083, <2 x i64>* %4089, align 8, !alias.scope !136, !noalias !133
  %4090 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4079, i64 -2
  %4091 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4090, i64 -1
  %4092 = bitcast %"class.v8::internal::compiler::Node"** %4091 to <2 x i64>*
  store <2 x i64> %4087, <2 x i64>* %4092, align 8, !alias.scope !136, !noalias !133
  br label %4093

4093:                                             ; preds = %4071, %4074
  %4094 = icmp eq i64 %4001, %4017
  br i1 %4094, label %4165, label %4095

4095:                                             ; preds = %4093, %4003, %3996
  %4096 = phi %"class.v8::internal::compiler::Node"** [ %3985, %4003 ], [ %3985, %3996 ], [ %4019, %4093 ]
  %4097 = phi %"class.v8::internal::compiler::Node"** [ %3994, %4003 ], [ %3994, %3996 ], [ %4021, %4093 ]
  %4098 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4097, i64 -1
  %4099 = ptrtoint %"class.v8::internal::compiler::Node"** %4098 to i64
  %4100 = sub i64 %4099, %3993
  %4101 = lshr i64 %4100, 3
  %4102 = add nuw nsw i64 %4101, 1
  %4103 = and i64 %4102, 7
  %4104 = icmp eq i64 %4103, 0
  br i1 %4104, label %4116, label %4105

4105:                                             ; preds = %4095, %4105
  %4106 = phi %"class.v8::internal::compiler::Node"** [ %4109, %4105 ], [ %4096, %4095 ]
  %4107 = phi %"class.v8::internal::compiler::Node"** [ %4110, %4105 ], [ %4097, %4095 ]
  %4108 = phi i64 [ %4114, %4105 ], [ %4103, %4095 ]
  %4109 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4106, i64 -1
  %4110 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4107, i64 -1
  %4111 = bitcast %"class.v8::internal::compiler::Node"** %4110 to i64*
  %4112 = load i64, i64* %4111, align 8
  %4113 = bitcast %"class.v8::internal::compiler::Node"** %4109 to i64*
  store i64 %4112, i64* %4113, align 8
  %4114 = add i64 %4108, -1
  %4115 = icmp eq i64 %4114, 0
  br i1 %4115, label %4116, label %4105, !llvm.loop !139

4116:                                             ; preds = %4105, %4095
  %4117 = phi %"class.v8::internal::compiler::Node"** [ undef, %4095 ], [ %4109, %4105 ]
  %4118 = phi %"class.v8::internal::compiler::Node"** [ %4096, %4095 ], [ %4109, %4105 ]
  %4119 = phi %"class.v8::internal::compiler::Node"** [ %4097, %4095 ], [ %4110, %4105 ]
  %4120 = icmp ult i64 %4100, 56
  br i1 %4120, label %4165, label %4121

4121:                                             ; preds = %4116, %4121
  %4122 = phi %"class.v8::internal::compiler::Node"** [ %4159, %4121 ], [ %4118, %4116 ]
  %4123 = phi %"class.v8::internal::compiler::Node"** [ %4160, %4121 ], [ %4119, %4116 ]
  %4124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -1
  %4125 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -1
  %4126 = bitcast %"class.v8::internal::compiler::Node"** %4125 to i64*
  %4127 = load i64, i64* %4126, align 8
  %4128 = bitcast %"class.v8::internal::compiler::Node"** %4124 to i64*
  store i64 %4127, i64* %4128, align 8
  %4129 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -2
  %4130 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -2
  %4131 = bitcast %"class.v8::internal::compiler::Node"** %4130 to i64*
  %4132 = load i64, i64* %4131, align 8
  %4133 = bitcast %"class.v8::internal::compiler::Node"** %4129 to i64*
  store i64 %4132, i64* %4133, align 8
  %4134 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -3
  %4135 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -3
  %4136 = bitcast %"class.v8::internal::compiler::Node"** %4135 to i64*
  %4137 = load i64, i64* %4136, align 8
  %4138 = bitcast %"class.v8::internal::compiler::Node"** %4134 to i64*
  store i64 %4137, i64* %4138, align 8
  %4139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -4
  %4140 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -4
  %4141 = bitcast %"class.v8::internal::compiler::Node"** %4140 to i64*
  %4142 = load i64, i64* %4141, align 8
  %4143 = bitcast %"class.v8::internal::compiler::Node"** %4139 to i64*
  store i64 %4142, i64* %4143, align 8
  %4144 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -5
  %4145 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -5
  %4146 = bitcast %"class.v8::internal::compiler::Node"** %4145 to i64*
  %4147 = load i64, i64* %4146, align 8
  %4148 = bitcast %"class.v8::internal::compiler::Node"** %4144 to i64*
  store i64 %4147, i64* %4148, align 8
  %4149 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -6
  %4150 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -6
  %4151 = bitcast %"class.v8::internal::compiler::Node"** %4150 to i64*
  %4152 = load i64, i64* %4151, align 8
  %4153 = bitcast %"class.v8::internal::compiler::Node"** %4149 to i64*
  store i64 %4152, i64* %4153, align 8
  %4154 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -7
  %4155 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -7
  %4156 = bitcast %"class.v8::internal::compiler::Node"** %4155 to i64*
  %4157 = load i64, i64* %4156, align 8
  %4158 = bitcast %"class.v8::internal::compiler::Node"** %4154 to i64*
  store i64 %4157, i64* %4158, align 8
  %4159 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4122, i64 -8
  %4160 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4123, i64 -8
  %4161 = bitcast %"class.v8::internal::compiler::Node"** %4160 to i64*
  %4162 = load i64, i64* %4161, align 8
  %4163 = bitcast %"class.v8::internal::compiler::Node"** %4159 to i64*
  store i64 %4162, i64* %4163, align 8
  %4164 = icmp eq %"class.v8::internal::compiler::Node"** %4160, %3992
  br i1 %4164, label %4165, label %4121, !llvm.loop !140

4165:                                             ; preds = %4116, %4121, %4093, %3981
  %4166 = phi %"class.v8::internal::compiler::Node"** [ %3985, %3981 ], [ %4019, %4093 ], [ %4117, %4116 ], [ %4159, %4121 ]
  %4167 = ptrtoint %"class.v8::internal::compiler::Node"** %4166 to i64
  store i64 %4167, i64* %3943, align 8
  store i64 %3990, i64* %3942, align 8
  store i64 %3987, i64* %3952, align 8
  br label %4168

4168:                                             ; preds = %4165, %3935, %3923
  %4169 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 21
  %4170 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4169, align 8
  %4171 = icmp eq %"class.v8::internal::compiler::Node"* %4170, null
  %4172 = ptrtoint %"class.v8::internal::compiler::Node"* %4170 to i64
  br i1 %4171, label %4413, label %4173

4173:                                             ; preds = %4168
  %4174 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %4175 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4174, align 8
  %4176 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4177 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4176, align 8
  %4178 = icmp eq %"class.v8::internal::compiler::Node"** %4175, %4177
  %4179 = ptrtoint %"class.v8::internal::compiler::Node"** %4177 to i64
  br i1 %4178, label %4185, label %4180

4180:                                             ; preds = %4173
  %4181 = bitcast %"class.v8::internal::compiler::Node"** %4175 to i64*
  store i64 %4172, i64* %4181, align 8
  %4182 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4175, i64 1
  %4183 = ptrtoint %"class.v8::internal::compiler::Node"** %4182 to i64
  %4184 = bitcast %"class.v8::internal::compiler::Node"*** %4174 to i64*
  store i64 %4183, i64* %4184, align 8
  br label %4413

4185:                                             ; preds = %4173
  %4186 = ptrtoint %"class.v8::internal::compiler::Node"** %4175 to i64
  %4187 = bitcast %"class.v8::internal::compiler::Node"*** %4174 to i64*
  %4188 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %4189 = load i64, i64* %4188, align 8
  %4190 = sub i64 %4186, %4189
  %4191 = ashr exact i64 %4190, 3
  %4192 = add nsw i64 %4191, 1
  %4193 = icmp ugt i64 %4192, 268435455
  br i1 %4193, label %4194, label %4196

4194:                                             ; preds = %4185
  %4195 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %4195) #6
  unreachable

4196:                                             ; preds = %4185
  %4197 = bitcast %"class.v8::internal::compiler::Node"*** %4176 to i64*
  %4198 = sub i64 %4179, %4189
  %4199 = ashr exact i64 %4198, 3
  %4200 = icmp ult i64 %4199, 134217727
  br i1 %4200, label %4201, label %4206

4201:                                             ; preds = %4196
  %4202 = ashr exact i64 %4198, 2
  %4203 = icmp ult i64 %4202, %4192
  %4204 = select i1 %4203, i64 %4192, i64 %4202
  %4205 = icmp eq i64 %4204, 0
  br i1 %4205, label %4226, label %4206

4206:                                             ; preds = %4201, %4196
  %4207 = phi i64 [ %4204, %4201 ], [ 268435455, %4196 ]
  %4208 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %4209 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4208, align 8
  %4210 = shl i64 %4207, 3
  %4211 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4209, i64 0, i32 2
  %4212 = load i64, i64* %4211, align 8
  %4213 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4209, i64 0, i32 3
  %4214 = load i64, i64* %4213, align 8
  %4215 = sub i64 %4214, %4212
  %4216 = icmp ugt i64 %4210, %4215
  br i1 %4216, label %4217, label %4219, !prof !2

4217:                                             ; preds = %4206
  %4218 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4209, i64 %4210) #5
  br label %4221

4219:                                             ; preds = %4206
  %4220 = add i64 %4212, %4210
  store i64 %4220, i64* %4211, align 8
  br label %4221

4221:                                             ; preds = %4219, %4217
  %4222 = phi i64 [ %4218, %4217 ], [ %4212, %4219 ]
  %4223 = inttoptr i64 %4222 to %"class.v8::internal::compiler::Node"**
  %4224 = bitcast %"class.v8::internal::compiler::Node"** %4169 to i64*
  %4225 = load i64, i64* %4224, align 8
  br label %4226

4226:                                             ; preds = %4201, %4221
  %4227 = phi i64 [ %4225, %4221 ], [ %4172, %4201 ]
  %4228 = phi i64 [ %4207, %4221 ], [ 0, %4201 ]
  %4229 = phi %"class.v8::internal::compiler::Node"** [ %4223, %4221 ], [ null, %4201 ]
  %4230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4229, i64 %4191
  %4231 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4229, i64 %4228
  %4232 = ptrtoint %"class.v8::internal::compiler::Node"** %4231 to i64
  %4233 = bitcast %"class.v8::internal::compiler::Node"** %4230 to i64*
  store i64 %4227, i64* %4233, align 8
  %4234 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4230, i64 1
  %4235 = ptrtoint %"class.v8::internal::compiler::Node"** %4234 to i64
  %4236 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %4237 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4236, align 8
  %4238 = ptrtoint %"class.v8::internal::compiler::Node"** %4237 to i64
  %4239 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4174, align 8
  %4240 = icmp eq %"class.v8::internal::compiler::Node"** %4239, %4237
  br i1 %4240, label %4410, label %4241

4241:                                             ; preds = %4226
  %4242 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 -1
  %4243 = ptrtoint %"class.v8::internal::compiler::Node"** %4242 to i64
  %4244 = sub i64 %4243, %4238
  %4245 = lshr i64 %4244, 3
  %4246 = add nuw nsw i64 %4245, 1
  %4247 = icmp ult i64 %4246, 4
  br i1 %4247, label %4340, label %4248

4248:                                             ; preds = %4241
  %4249 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 -1
  %4250 = ptrtoint %"class.v8::internal::compiler::Node"** %4249 to i64
  %4251 = sub i64 %4250, %4238
  %4252 = lshr i64 %4251, 3
  %4253 = xor i64 %4252, -1
  %4254 = add nsw i64 %4191, %4253
  %4255 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4229, i64 %4254
  %4256 = xor i64 %4252, -1
  %4257 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 %4256
  %4258 = icmp ult %"class.v8::internal::compiler::Node"** %4255, %4239
  %4259 = icmp ult %"class.v8::internal::compiler::Node"** %4257, %4230
  %4260 = and i1 %4258, %4259
  br i1 %4260, label %4340, label %4261

4261:                                             ; preds = %4248
  %4262 = and i64 %4246, 4611686018427387900
  %4263 = sub nsw i64 0, %4262
  %4264 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4230, i64 %4263
  %4265 = sub nsw i64 0, %4262
  %4266 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 %4265
  %4267 = add nsw i64 %4262, -4
  %4268 = lshr exact i64 %4267, 2
  %4269 = add nuw nsw i64 %4268, 1
  %4270 = and i64 %4269, 1
  %4271 = icmp eq i64 %4267, 0
  br i1 %4271, label %4316, label %4272

4272:                                             ; preds = %4261
  %4273 = sub nuw nsw i64 %4269, %4270
  %4274 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4230, i64 -1
  %4275 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 -1
  %4276 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4230, i64 -1
  %4277 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 -1
  br label %4278

4278:                                             ; preds = %4278, %4272
  %4279 = phi i64 [ 0, %4272 ], [ %4313, %4278 ]
  %4280 = phi i64 [ %4273, %4272 ], [ %4314, %4278 ]
  %4281 = sub i64 0, %4279
  %4282 = sub i64 0, %4279
  %4283 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4274, i64 %4281
  %4284 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4275, i64 %4282
  %4285 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4284, i64 -1
  %4286 = bitcast %"class.v8::internal::compiler::Node"** %4285 to <2 x i64>*
  %4287 = load <2 x i64>, <2 x i64>* %4286, align 8, !alias.scope !141
  %4288 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4284, i64 -2
  %4289 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4288, i64 -1
  %4290 = bitcast %"class.v8::internal::compiler::Node"** %4289 to <2 x i64>*
  %4291 = load <2 x i64>, <2 x i64>* %4290, align 8, !alias.scope !141
  %4292 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4283, i64 -1
  %4293 = bitcast %"class.v8::internal::compiler::Node"** %4292 to <2 x i64>*
  store <2 x i64> %4287, <2 x i64>* %4293, align 8, !alias.scope !144, !noalias !141
  %4294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4283, i64 -2
  %4295 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4294, i64 -1
  %4296 = bitcast %"class.v8::internal::compiler::Node"** %4295 to <2 x i64>*
  store <2 x i64> %4291, <2 x i64>* %4296, align 8, !alias.scope !144, !noalias !141
  %4297 = sub nuw nsw i64 -4, %4279
  %4298 = sub nuw nsw i64 -4, %4279
  %4299 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4276, i64 %4297
  %4300 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4277, i64 %4298
  %4301 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4300, i64 -1
  %4302 = bitcast %"class.v8::internal::compiler::Node"** %4301 to <2 x i64>*
  %4303 = load <2 x i64>, <2 x i64>* %4302, align 8, !alias.scope !141
  %4304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4300, i64 -2
  %4305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4304, i64 -1
  %4306 = bitcast %"class.v8::internal::compiler::Node"** %4305 to <2 x i64>*
  %4307 = load <2 x i64>, <2 x i64>* %4306, align 8, !alias.scope !141
  %4308 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4299, i64 -1
  %4309 = bitcast %"class.v8::internal::compiler::Node"** %4308 to <2 x i64>*
  store <2 x i64> %4303, <2 x i64>* %4309, align 8, !alias.scope !144, !noalias !141
  %4310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4299, i64 -2
  %4311 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4310, i64 -1
  %4312 = bitcast %"class.v8::internal::compiler::Node"** %4311 to <2 x i64>*
  store <2 x i64> %4307, <2 x i64>* %4312, align 8, !alias.scope !144, !noalias !141
  %4313 = add i64 %4279, 8
  %4314 = add i64 %4280, -2
  %4315 = icmp eq i64 %4314, 0
  br i1 %4315, label %4316, label %4278, !llvm.loop !146

4316:                                             ; preds = %4278, %4261
  %4317 = phi i64 [ 0, %4261 ], [ %4313, %4278 ]
  %4318 = icmp eq i64 %4270, 0
  br i1 %4318, label %4338, label %4319

4319:                                             ; preds = %4316
  %4320 = sub i64 0, %4317
  %4321 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4230, i64 -1
  %4322 = sub i64 0, %4317
  %4323 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4239, i64 -1
  %4324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4321, i64 %4320
  %4325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4323, i64 %4322
  %4326 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4325, i64 -1
  %4327 = bitcast %"class.v8::internal::compiler::Node"** %4326 to <2 x i64>*
  %4328 = load <2 x i64>, <2 x i64>* %4327, align 8, !alias.scope !141
  %4329 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4325, i64 -2
  %4330 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4329, i64 -1
  %4331 = bitcast %"class.v8::internal::compiler::Node"** %4330 to <2 x i64>*
  %4332 = load <2 x i64>, <2 x i64>* %4331, align 8, !alias.scope !141
  %4333 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4324, i64 -1
  %4334 = bitcast %"class.v8::internal::compiler::Node"** %4333 to <2 x i64>*
  store <2 x i64> %4328, <2 x i64>* %4334, align 8, !alias.scope !144, !noalias !141
  %4335 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4324, i64 -2
  %4336 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4335, i64 -1
  %4337 = bitcast %"class.v8::internal::compiler::Node"** %4336 to <2 x i64>*
  store <2 x i64> %4332, <2 x i64>* %4337, align 8, !alias.scope !144, !noalias !141
  br label %4338

4338:                                             ; preds = %4316, %4319
  %4339 = icmp eq i64 %4246, %4262
  br i1 %4339, label %4410, label %4340

4340:                                             ; preds = %4338, %4248, %4241
  %4341 = phi %"class.v8::internal::compiler::Node"** [ %4230, %4248 ], [ %4230, %4241 ], [ %4264, %4338 ]
  %4342 = phi %"class.v8::internal::compiler::Node"** [ %4239, %4248 ], [ %4239, %4241 ], [ %4266, %4338 ]
  %4343 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4342, i64 -1
  %4344 = ptrtoint %"class.v8::internal::compiler::Node"** %4343 to i64
  %4345 = sub i64 %4344, %4238
  %4346 = lshr i64 %4345, 3
  %4347 = add nuw nsw i64 %4346, 1
  %4348 = and i64 %4347, 7
  %4349 = icmp eq i64 %4348, 0
  br i1 %4349, label %4361, label %4350

4350:                                             ; preds = %4340, %4350
  %4351 = phi %"class.v8::internal::compiler::Node"** [ %4354, %4350 ], [ %4341, %4340 ]
  %4352 = phi %"class.v8::internal::compiler::Node"** [ %4355, %4350 ], [ %4342, %4340 ]
  %4353 = phi i64 [ %4359, %4350 ], [ %4348, %4340 ]
  %4354 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4351, i64 -1
  %4355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4352, i64 -1
  %4356 = bitcast %"class.v8::internal::compiler::Node"** %4355 to i64*
  %4357 = load i64, i64* %4356, align 8
  %4358 = bitcast %"class.v8::internal::compiler::Node"** %4354 to i64*
  store i64 %4357, i64* %4358, align 8
  %4359 = add i64 %4353, -1
  %4360 = icmp eq i64 %4359, 0
  br i1 %4360, label %4361, label %4350, !llvm.loop !147

4361:                                             ; preds = %4350, %4340
  %4362 = phi %"class.v8::internal::compiler::Node"** [ undef, %4340 ], [ %4354, %4350 ]
  %4363 = phi %"class.v8::internal::compiler::Node"** [ %4341, %4340 ], [ %4354, %4350 ]
  %4364 = phi %"class.v8::internal::compiler::Node"** [ %4342, %4340 ], [ %4355, %4350 ]
  %4365 = icmp ult i64 %4345, 56
  br i1 %4365, label %4410, label %4366

4366:                                             ; preds = %4361, %4366
  %4367 = phi %"class.v8::internal::compiler::Node"** [ %4404, %4366 ], [ %4363, %4361 ]
  %4368 = phi %"class.v8::internal::compiler::Node"** [ %4405, %4366 ], [ %4364, %4361 ]
  %4369 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -1
  %4370 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -1
  %4371 = bitcast %"class.v8::internal::compiler::Node"** %4370 to i64*
  %4372 = load i64, i64* %4371, align 8
  %4373 = bitcast %"class.v8::internal::compiler::Node"** %4369 to i64*
  store i64 %4372, i64* %4373, align 8
  %4374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -2
  %4375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -2
  %4376 = bitcast %"class.v8::internal::compiler::Node"** %4375 to i64*
  %4377 = load i64, i64* %4376, align 8
  %4378 = bitcast %"class.v8::internal::compiler::Node"** %4374 to i64*
  store i64 %4377, i64* %4378, align 8
  %4379 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -3
  %4380 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -3
  %4381 = bitcast %"class.v8::internal::compiler::Node"** %4380 to i64*
  %4382 = load i64, i64* %4381, align 8
  %4383 = bitcast %"class.v8::internal::compiler::Node"** %4379 to i64*
  store i64 %4382, i64* %4383, align 8
  %4384 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -4
  %4385 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -4
  %4386 = bitcast %"class.v8::internal::compiler::Node"** %4385 to i64*
  %4387 = load i64, i64* %4386, align 8
  %4388 = bitcast %"class.v8::internal::compiler::Node"** %4384 to i64*
  store i64 %4387, i64* %4388, align 8
  %4389 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -5
  %4390 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -5
  %4391 = bitcast %"class.v8::internal::compiler::Node"** %4390 to i64*
  %4392 = load i64, i64* %4391, align 8
  %4393 = bitcast %"class.v8::internal::compiler::Node"** %4389 to i64*
  store i64 %4392, i64* %4393, align 8
  %4394 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -6
  %4395 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -6
  %4396 = bitcast %"class.v8::internal::compiler::Node"** %4395 to i64*
  %4397 = load i64, i64* %4396, align 8
  %4398 = bitcast %"class.v8::internal::compiler::Node"** %4394 to i64*
  store i64 %4397, i64* %4398, align 8
  %4399 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -7
  %4400 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -7
  %4401 = bitcast %"class.v8::internal::compiler::Node"** %4400 to i64*
  %4402 = load i64, i64* %4401, align 8
  %4403 = bitcast %"class.v8::internal::compiler::Node"** %4399 to i64*
  store i64 %4402, i64* %4403, align 8
  %4404 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4367, i64 -8
  %4405 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4368, i64 -8
  %4406 = bitcast %"class.v8::internal::compiler::Node"** %4405 to i64*
  %4407 = load i64, i64* %4406, align 8
  %4408 = bitcast %"class.v8::internal::compiler::Node"** %4404 to i64*
  store i64 %4407, i64* %4408, align 8
  %4409 = icmp eq %"class.v8::internal::compiler::Node"** %4405, %4237
  br i1 %4409, label %4410, label %4366, !llvm.loop !148

4410:                                             ; preds = %4361, %4366, %4338, %4226
  %4411 = phi %"class.v8::internal::compiler::Node"** [ %4230, %4226 ], [ %4264, %4338 ], [ %4362, %4361 ], [ %4404, %4366 ]
  %4412 = ptrtoint %"class.v8::internal::compiler::Node"** %4411 to i64
  store i64 %4412, i64* %4188, align 8
  store i64 %4235, i64* %4187, align 8
  store i64 %4232, i64* %4197, align 8
  br label %4413

4413:                                             ; preds = %4410, %4180, %4168
  %4414 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 22
  %4415 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4414, align 8
  %4416 = icmp eq %"class.v8::internal::compiler::Node"* %4415, null
  %4417 = ptrtoint %"class.v8::internal::compiler::Node"* %4415 to i64
  br i1 %4416, label %4658, label %4418

4418:                                             ; preds = %4413
  %4419 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %4420 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4419, align 8
  %4421 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4422 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4421, align 8
  %4423 = icmp eq %"class.v8::internal::compiler::Node"** %4420, %4422
  %4424 = ptrtoint %"class.v8::internal::compiler::Node"** %4422 to i64
  br i1 %4423, label %4430, label %4425

4425:                                             ; preds = %4418
  %4426 = bitcast %"class.v8::internal::compiler::Node"** %4420 to i64*
  store i64 %4417, i64* %4426, align 8
  %4427 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4420, i64 1
  %4428 = ptrtoint %"class.v8::internal::compiler::Node"** %4427 to i64
  %4429 = bitcast %"class.v8::internal::compiler::Node"*** %4419 to i64*
  store i64 %4428, i64* %4429, align 8
  br label %4658

4430:                                             ; preds = %4418
  %4431 = ptrtoint %"class.v8::internal::compiler::Node"** %4420 to i64
  %4432 = bitcast %"class.v8::internal::compiler::Node"*** %4419 to i64*
  %4433 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %4434 = load i64, i64* %4433, align 8
  %4435 = sub i64 %4431, %4434
  %4436 = ashr exact i64 %4435, 3
  %4437 = add nsw i64 %4436, 1
  %4438 = icmp ugt i64 %4437, 268435455
  br i1 %4438, label %4439, label %4441

4439:                                             ; preds = %4430
  %4440 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %4440) #6
  unreachable

4441:                                             ; preds = %4430
  %4442 = bitcast %"class.v8::internal::compiler::Node"*** %4421 to i64*
  %4443 = sub i64 %4424, %4434
  %4444 = ashr exact i64 %4443, 3
  %4445 = icmp ult i64 %4444, 134217727
  br i1 %4445, label %4446, label %4451

4446:                                             ; preds = %4441
  %4447 = ashr exact i64 %4443, 2
  %4448 = icmp ult i64 %4447, %4437
  %4449 = select i1 %4448, i64 %4437, i64 %4447
  %4450 = icmp eq i64 %4449, 0
  br i1 %4450, label %4471, label %4451

4451:                                             ; preds = %4446, %4441
  %4452 = phi i64 [ %4449, %4446 ], [ 268435455, %4441 ]
  %4453 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %4454 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4453, align 8
  %4455 = shl i64 %4452, 3
  %4456 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4454, i64 0, i32 2
  %4457 = load i64, i64* %4456, align 8
  %4458 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4454, i64 0, i32 3
  %4459 = load i64, i64* %4458, align 8
  %4460 = sub i64 %4459, %4457
  %4461 = icmp ugt i64 %4455, %4460
  br i1 %4461, label %4462, label %4464, !prof !2

4462:                                             ; preds = %4451
  %4463 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4454, i64 %4455) #5
  br label %4466

4464:                                             ; preds = %4451
  %4465 = add i64 %4457, %4455
  store i64 %4465, i64* %4456, align 8
  br label %4466

4466:                                             ; preds = %4464, %4462
  %4467 = phi i64 [ %4463, %4462 ], [ %4457, %4464 ]
  %4468 = inttoptr i64 %4467 to %"class.v8::internal::compiler::Node"**
  %4469 = bitcast %"class.v8::internal::compiler::Node"** %4414 to i64*
  %4470 = load i64, i64* %4469, align 8
  br label %4471

4471:                                             ; preds = %4446, %4466
  %4472 = phi i64 [ %4470, %4466 ], [ %4417, %4446 ]
  %4473 = phi i64 [ %4452, %4466 ], [ 0, %4446 ]
  %4474 = phi %"class.v8::internal::compiler::Node"** [ %4468, %4466 ], [ null, %4446 ]
  %4475 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4474, i64 %4436
  %4476 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4474, i64 %4473
  %4477 = ptrtoint %"class.v8::internal::compiler::Node"** %4476 to i64
  %4478 = bitcast %"class.v8::internal::compiler::Node"** %4475 to i64*
  store i64 %4472, i64* %4478, align 8
  %4479 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4475, i64 1
  %4480 = ptrtoint %"class.v8::internal::compiler::Node"** %4479 to i64
  %4481 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %4482 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4481, align 8
  %4483 = ptrtoint %"class.v8::internal::compiler::Node"** %4482 to i64
  %4484 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4419, align 8
  %4485 = icmp eq %"class.v8::internal::compiler::Node"** %4484, %4482
  br i1 %4485, label %4655, label %4486

4486:                                             ; preds = %4471
  %4487 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 -1
  %4488 = ptrtoint %"class.v8::internal::compiler::Node"** %4487 to i64
  %4489 = sub i64 %4488, %4483
  %4490 = lshr i64 %4489, 3
  %4491 = add nuw nsw i64 %4490, 1
  %4492 = icmp ult i64 %4491, 4
  br i1 %4492, label %4585, label %4493

4493:                                             ; preds = %4486
  %4494 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 -1
  %4495 = ptrtoint %"class.v8::internal::compiler::Node"** %4494 to i64
  %4496 = sub i64 %4495, %4483
  %4497 = lshr i64 %4496, 3
  %4498 = xor i64 %4497, -1
  %4499 = add nsw i64 %4436, %4498
  %4500 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4474, i64 %4499
  %4501 = xor i64 %4497, -1
  %4502 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 %4501
  %4503 = icmp ult %"class.v8::internal::compiler::Node"** %4500, %4484
  %4504 = icmp ult %"class.v8::internal::compiler::Node"** %4502, %4475
  %4505 = and i1 %4503, %4504
  br i1 %4505, label %4585, label %4506

4506:                                             ; preds = %4493
  %4507 = and i64 %4491, 4611686018427387900
  %4508 = sub nsw i64 0, %4507
  %4509 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4475, i64 %4508
  %4510 = sub nsw i64 0, %4507
  %4511 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 %4510
  %4512 = add nsw i64 %4507, -4
  %4513 = lshr exact i64 %4512, 2
  %4514 = add nuw nsw i64 %4513, 1
  %4515 = and i64 %4514, 1
  %4516 = icmp eq i64 %4512, 0
  br i1 %4516, label %4561, label %4517

4517:                                             ; preds = %4506
  %4518 = sub nuw nsw i64 %4514, %4515
  %4519 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4475, i64 -1
  %4520 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 -1
  %4521 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4475, i64 -1
  %4522 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 -1
  br label %4523

4523:                                             ; preds = %4523, %4517
  %4524 = phi i64 [ 0, %4517 ], [ %4558, %4523 ]
  %4525 = phi i64 [ %4518, %4517 ], [ %4559, %4523 ]
  %4526 = sub i64 0, %4524
  %4527 = sub i64 0, %4524
  %4528 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4519, i64 %4526
  %4529 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4520, i64 %4527
  %4530 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4529, i64 -1
  %4531 = bitcast %"class.v8::internal::compiler::Node"** %4530 to <2 x i64>*
  %4532 = load <2 x i64>, <2 x i64>* %4531, align 8, !alias.scope !149
  %4533 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4529, i64 -2
  %4534 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4533, i64 -1
  %4535 = bitcast %"class.v8::internal::compiler::Node"** %4534 to <2 x i64>*
  %4536 = load <2 x i64>, <2 x i64>* %4535, align 8, !alias.scope !149
  %4537 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4528, i64 -1
  %4538 = bitcast %"class.v8::internal::compiler::Node"** %4537 to <2 x i64>*
  store <2 x i64> %4532, <2 x i64>* %4538, align 8, !alias.scope !152, !noalias !149
  %4539 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4528, i64 -2
  %4540 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4539, i64 -1
  %4541 = bitcast %"class.v8::internal::compiler::Node"** %4540 to <2 x i64>*
  store <2 x i64> %4536, <2 x i64>* %4541, align 8, !alias.scope !152, !noalias !149
  %4542 = sub nuw nsw i64 -4, %4524
  %4543 = sub nuw nsw i64 -4, %4524
  %4544 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4521, i64 %4542
  %4545 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4522, i64 %4543
  %4546 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4545, i64 -1
  %4547 = bitcast %"class.v8::internal::compiler::Node"** %4546 to <2 x i64>*
  %4548 = load <2 x i64>, <2 x i64>* %4547, align 8, !alias.scope !149
  %4549 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4545, i64 -2
  %4550 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4549, i64 -1
  %4551 = bitcast %"class.v8::internal::compiler::Node"** %4550 to <2 x i64>*
  %4552 = load <2 x i64>, <2 x i64>* %4551, align 8, !alias.scope !149
  %4553 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4544, i64 -1
  %4554 = bitcast %"class.v8::internal::compiler::Node"** %4553 to <2 x i64>*
  store <2 x i64> %4548, <2 x i64>* %4554, align 8, !alias.scope !152, !noalias !149
  %4555 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4544, i64 -2
  %4556 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4555, i64 -1
  %4557 = bitcast %"class.v8::internal::compiler::Node"** %4556 to <2 x i64>*
  store <2 x i64> %4552, <2 x i64>* %4557, align 8, !alias.scope !152, !noalias !149
  %4558 = add i64 %4524, 8
  %4559 = add i64 %4525, -2
  %4560 = icmp eq i64 %4559, 0
  br i1 %4560, label %4561, label %4523, !llvm.loop !154

4561:                                             ; preds = %4523, %4506
  %4562 = phi i64 [ 0, %4506 ], [ %4558, %4523 ]
  %4563 = icmp eq i64 %4515, 0
  br i1 %4563, label %4583, label %4564

4564:                                             ; preds = %4561
  %4565 = sub i64 0, %4562
  %4566 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4475, i64 -1
  %4567 = sub i64 0, %4562
  %4568 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4484, i64 -1
  %4569 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4566, i64 %4565
  %4570 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4568, i64 %4567
  %4571 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4570, i64 -1
  %4572 = bitcast %"class.v8::internal::compiler::Node"** %4571 to <2 x i64>*
  %4573 = load <2 x i64>, <2 x i64>* %4572, align 8, !alias.scope !149
  %4574 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4570, i64 -2
  %4575 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4574, i64 -1
  %4576 = bitcast %"class.v8::internal::compiler::Node"** %4575 to <2 x i64>*
  %4577 = load <2 x i64>, <2 x i64>* %4576, align 8, !alias.scope !149
  %4578 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4569, i64 -1
  %4579 = bitcast %"class.v8::internal::compiler::Node"** %4578 to <2 x i64>*
  store <2 x i64> %4573, <2 x i64>* %4579, align 8, !alias.scope !152, !noalias !149
  %4580 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4569, i64 -2
  %4581 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4580, i64 -1
  %4582 = bitcast %"class.v8::internal::compiler::Node"** %4581 to <2 x i64>*
  store <2 x i64> %4577, <2 x i64>* %4582, align 8, !alias.scope !152, !noalias !149
  br label %4583

4583:                                             ; preds = %4561, %4564
  %4584 = icmp eq i64 %4491, %4507
  br i1 %4584, label %4655, label %4585

4585:                                             ; preds = %4583, %4493, %4486
  %4586 = phi %"class.v8::internal::compiler::Node"** [ %4475, %4493 ], [ %4475, %4486 ], [ %4509, %4583 ]
  %4587 = phi %"class.v8::internal::compiler::Node"** [ %4484, %4493 ], [ %4484, %4486 ], [ %4511, %4583 ]
  %4588 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4587, i64 -1
  %4589 = ptrtoint %"class.v8::internal::compiler::Node"** %4588 to i64
  %4590 = sub i64 %4589, %4483
  %4591 = lshr i64 %4590, 3
  %4592 = add nuw nsw i64 %4591, 1
  %4593 = and i64 %4592, 7
  %4594 = icmp eq i64 %4593, 0
  br i1 %4594, label %4606, label %4595

4595:                                             ; preds = %4585, %4595
  %4596 = phi %"class.v8::internal::compiler::Node"** [ %4599, %4595 ], [ %4586, %4585 ]
  %4597 = phi %"class.v8::internal::compiler::Node"** [ %4600, %4595 ], [ %4587, %4585 ]
  %4598 = phi i64 [ %4604, %4595 ], [ %4593, %4585 ]
  %4599 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4596, i64 -1
  %4600 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4597, i64 -1
  %4601 = bitcast %"class.v8::internal::compiler::Node"** %4600 to i64*
  %4602 = load i64, i64* %4601, align 8
  %4603 = bitcast %"class.v8::internal::compiler::Node"** %4599 to i64*
  store i64 %4602, i64* %4603, align 8
  %4604 = add i64 %4598, -1
  %4605 = icmp eq i64 %4604, 0
  br i1 %4605, label %4606, label %4595, !llvm.loop !155

4606:                                             ; preds = %4595, %4585
  %4607 = phi %"class.v8::internal::compiler::Node"** [ undef, %4585 ], [ %4599, %4595 ]
  %4608 = phi %"class.v8::internal::compiler::Node"** [ %4586, %4585 ], [ %4599, %4595 ]
  %4609 = phi %"class.v8::internal::compiler::Node"** [ %4587, %4585 ], [ %4600, %4595 ]
  %4610 = icmp ult i64 %4590, 56
  br i1 %4610, label %4655, label %4611

4611:                                             ; preds = %4606, %4611
  %4612 = phi %"class.v8::internal::compiler::Node"** [ %4649, %4611 ], [ %4608, %4606 ]
  %4613 = phi %"class.v8::internal::compiler::Node"** [ %4650, %4611 ], [ %4609, %4606 ]
  %4614 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -1
  %4615 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -1
  %4616 = bitcast %"class.v8::internal::compiler::Node"** %4615 to i64*
  %4617 = load i64, i64* %4616, align 8
  %4618 = bitcast %"class.v8::internal::compiler::Node"** %4614 to i64*
  store i64 %4617, i64* %4618, align 8
  %4619 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -2
  %4620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -2
  %4621 = bitcast %"class.v8::internal::compiler::Node"** %4620 to i64*
  %4622 = load i64, i64* %4621, align 8
  %4623 = bitcast %"class.v8::internal::compiler::Node"** %4619 to i64*
  store i64 %4622, i64* %4623, align 8
  %4624 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -3
  %4625 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -3
  %4626 = bitcast %"class.v8::internal::compiler::Node"** %4625 to i64*
  %4627 = load i64, i64* %4626, align 8
  %4628 = bitcast %"class.v8::internal::compiler::Node"** %4624 to i64*
  store i64 %4627, i64* %4628, align 8
  %4629 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -4
  %4630 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -4
  %4631 = bitcast %"class.v8::internal::compiler::Node"** %4630 to i64*
  %4632 = load i64, i64* %4631, align 8
  %4633 = bitcast %"class.v8::internal::compiler::Node"** %4629 to i64*
  store i64 %4632, i64* %4633, align 8
  %4634 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -5
  %4635 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -5
  %4636 = bitcast %"class.v8::internal::compiler::Node"** %4635 to i64*
  %4637 = load i64, i64* %4636, align 8
  %4638 = bitcast %"class.v8::internal::compiler::Node"** %4634 to i64*
  store i64 %4637, i64* %4638, align 8
  %4639 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -6
  %4640 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -6
  %4641 = bitcast %"class.v8::internal::compiler::Node"** %4640 to i64*
  %4642 = load i64, i64* %4641, align 8
  %4643 = bitcast %"class.v8::internal::compiler::Node"** %4639 to i64*
  store i64 %4642, i64* %4643, align 8
  %4644 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -7
  %4645 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -7
  %4646 = bitcast %"class.v8::internal::compiler::Node"** %4645 to i64*
  %4647 = load i64, i64* %4646, align 8
  %4648 = bitcast %"class.v8::internal::compiler::Node"** %4644 to i64*
  store i64 %4647, i64* %4648, align 8
  %4649 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4612, i64 -8
  %4650 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4613, i64 -8
  %4651 = bitcast %"class.v8::internal::compiler::Node"** %4650 to i64*
  %4652 = load i64, i64* %4651, align 8
  %4653 = bitcast %"class.v8::internal::compiler::Node"** %4649 to i64*
  store i64 %4652, i64* %4653, align 8
  %4654 = icmp eq %"class.v8::internal::compiler::Node"** %4650, %4482
  br i1 %4654, label %4655, label %4611, !llvm.loop !156

4655:                                             ; preds = %4606, %4611, %4583, %4471
  %4656 = phi %"class.v8::internal::compiler::Node"** [ %4475, %4471 ], [ %4509, %4583 ], [ %4607, %4606 ], [ %4649, %4611 ]
  %4657 = ptrtoint %"class.v8::internal::compiler::Node"** %4656 to i64
  store i64 %4657, i64* %4433, align 8
  store i64 %4480, i64* %4432, align 8
  store i64 %4477, i64* %4442, align 8
  br label %4658

4658:                                             ; preds = %4655, %4425, %4413
  %4659 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 23
  %4660 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4659, align 8
  %4661 = icmp eq %"class.v8::internal::compiler::Node"* %4660, null
  %4662 = ptrtoint %"class.v8::internal::compiler::Node"* %4660 to i64
  br i1 %4661, label %4903, label %4663

4663:                                             ; preds = %4658
  %4664 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %4665 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4664, align 8
  %4666 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4667 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4666, align 8
  %4668 = icmp eq %"class.v8::internal::compiler::Node"** %4665, %4667
  %4669 = ptrtoint %"class.v8::internal::compiler::Node"** %4667 to i64
  br i1 %4668, label %4675, label %4670

4670:                                             ; preds = %4663
  %4671 = bitcast %"class.v8::internal::compiler::Node"** %4665 to i64*
  store i64 %4662, i64* %4671, align 8
  %4672 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4665, i64 1
  %4673 = ptrtoint %"class.v8::internal::compiler::Node"** %4672 to i64
  %4674 = bitcast %"class.v8::internal::compiler::Node"*** %4664 to i64*
  store i64 %4673, i64* %4674, align 8
  br label %4903

4675:                                             ; preds = %4663
  %4676 = ptrtoint %"class.v8::internal::compiler::Node"** %4665 to i64
  %4677 = bitcast %"class.v8::internal::compiler::Node"*** %4664 to i64*
  %4678 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %4679 = load i64, i64* %4678, align 8
  %4680 = sub i64 %4676, %4679
  %4681 = ashr exact i64 %4680, 3
  %4682 = add nsw i64 %4681, 1
  %4683 = icmp ugt i64 %4682, 268435455
  br i1 %4683, label %4684, label %4686

4684:                                             ; preds = %4675
  %4685 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %4685) #6
  unreachable

4686:                                             ; preds = %4675
  %4687 = bitcast %"class.v8::internal::compiler::Node"*** %4666 to i64*
  %4688 = sub i64 %4669, %4679
  %4689 = ashr exact i64 %4688, 3
  %4690 = icmp ult i64 %4689, 134217727
  br i1 %4690, label %4691, label %4696

4691:                                             ; preds = %4686
  %4692 = ashr exact i64 %4688, 2
  %4693 = icmp ult i64 %4692, %4682
  %4694 = select i1 %4693, i64 %4682, i64 %4692
  %4695 = icmp eq i64 %4694, 0
  br i1 %4695, label %4716, label %4696

4696:                                             ; preds = %4691, %4686
  %4697 = phi i64 [ %4694, %4691 ], [ 268435455, %4686 ]
  %4698 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %4699 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4698, align 8
  %4700 = shl i64 %4697, 3
  %4701 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4699, i64 0, i32 2
  %4702 = load i64, i64* %4701, align 8
  %4703 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4699, i64 0, i32 3
  %4704 = load i64, i64* %4703, align 8
  %4705 = sub i64 %4704, %4702
  %4706 = icmp ugt i64 %4700, %4705
  br i1 %4706, label %4707, label %4709, !prof !2

4707:                                             ; preds = %4696
  %4708 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4699, i64 %4700) #5
  br label %4711

4709:                                             ; preds = %4696
  %4710 = add i64 %4702, %4700
  store i64 %4710, i64* %4701, align 8
  br label %4711

4711:                                             ; preds = %4709, %4707
  %4712 = phi i64 [ %4708, %4707 ], [ %4702, %4709 ]
  %4713 = inttoptr i64 %4712 to %"class.v8::internal::compiler::Node"**
  %4714 = bitcast %"class.v8::internal::compiler::Node"** %4659 to i64*
  %4715 = load i64, i64* %4714, align 8
  br label %4716

4716:                                             ; preds = %4691, %4711
  %4717 = phi i64 [ %4715, %4711 ], [ %4662, %4691 ]
  %4718 = phi i64 [ %4697, %4711 ], [ 0, %4691 ]
  %4719 = phi %"class.v8::internal::compiler::Node"** [ %4713, %4711 ], [ null, %4691 ]
  %4720 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4719, i64 %4681
  %4721 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4719, i64 %4718
  %4722 = ptrtoint %"class.v8::internal::compiler::Node"** %4721 to i64
  %4723 = bitcast %"class.v8::internal::compiler::Node"** %4720 to i64*
  store i64 %4717, i64* %4723, align 8
  %4724 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4720, i64 1
  %4725 = ptrtoint %"class.v8::internal::compiler::Node"** %4724 to i64
  %4726 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %4727 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4726, align 8
  %4728 = ptrtoint %"class.v8::internal::compiler::Node"** %4727 to i64
  %4729 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4664, align 8
  %4730 = icmp eq %"class.v8::internal::compiler::Node"** %4729, %4727
  br i1 %4730, label %4900, label %4731

4731:                                             ; preds = %4716
  %4732 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 -1
  %4733 = ptrtoint %"class.v8::internal::compiler::Node"** %4732 to i64
  %4734 = sub i64 %4733, %4728
  %4735 = lshr i64 %4734, 3
  %4736 = add nuw nsw i64 %4735, 1
  %4737 = icmp ult i64 %4736, 4
  br i1 %4737, label %4830, label %4738

4738:                                             ; preds = %4731
  %4739 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 -1
  %4740 = ptrtoint %"class.v8::internal::compiler::Node"** %4739 to i64
  %4741 = sub i64 %4740, %4728
  %4742 = lshr i64 %4741, 3
  %4743 = xor i64 %4742, -1
  %4744 = add nsw i64 %4681, %4743
  %4745 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4719, i64 %4744
  %4746 = xor i64 %4742, -1
  %4747 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 %4746
  %4748 = icmp ult %"class.v8::internal::compiler::Node"** %4745, %4729
  %4749 = icmp ult %"class.v8::internal::compiler::Node"** %4747, %4720
  %4750 = and i1 %4748, %4749
  br i1 %4750, label %4830, label %4751

4751:                                             ; preds = %4738
  %4752 = and i64 %4736, 4611686018427387900
  %4753 = sub nsw i64 0, %4752
  %4754 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4720, i64 %4753
  %4755 = sub nsw i64 0, %4752
  %4756 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 %4755
  %4757 = add nsw i64 %4752, -4
  %4758 = lshr exact i64 %4757, 2
  %4759 = add nuw nsw i64 %4758, 1
  %4760 = and i64 %4759, 1
  %4761 = icmp eq i64 %4757, 0
  br i1 %4761, label %4806, label %4762

4762:                                             ; preds = %4751
  %4763 = sub nuw nsw i64 %4759, %4760
  %4764 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4720, i64 -1
  %4765 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 -1
  %4766 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4720, i64 -1
  %4767 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 -1
  br label %4768

4768:                                             ; preds = %4768, %4762
  %4769 = phi i64 [ 0, %4762 ], [ %4803, %4768 ]
  %4770 = phi i64 [ %4763, %4762 ], [ %4804, %4768 ]
  %4771 = sub i64 0, %4769
  %4772 = sub i64 0, %4769
  %4773 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4764, i64 %4771
  %4774 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4765, i64 %4772
  %4775 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4774, i64 -1
  %4776 = bitcast %"class.v8::internal::compiler::Node"** %4775 to <2 x i64>*
  %4777 = load <2 x i64>, <2 x i64>* %4776, align 8, !alias.scope !157
  %4778 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4774, i64 -2
  %4779 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4778, i64 -1
  %4780 = bitcast %"class.v8::internal::compiler::Node"** %4779 to <2 x i64>*
  %4781 = load <2 x i64>, <2 x i64>* %4780, align 8, !alias.scope !157
  %4782 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4773, i64 -1
  %4783 = bitcast %"class.v8::internal::compiler::Node"** %4782 to <2 x i64>*
  store <2 x i64> %4777, <2 x i64>* %4783, align 8, !alias.scope !160, !noalias !157
  %4784 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4773, i64 -2
  %4785 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4784, i64 -1
  %4786 = bitcast %"class.v8::internal::compiler::Node"** %4785 to <2 x i64>*
  store <2 x i64> %4781, <2 x i64>* %4786, align 8, !alias.scope !160, !noalias !157
  %4787 = sub nuw nsw i64 -4, %4769
  %4788 = sub nuw nsw i64 -4, %4769
  %4789 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4766, i64 %4787
  %4790 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4767, i64 %4788
  %4791 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4790, i64 -1
  %4792 = bitcast %"class.v8::internal::compiler::Node"** %4791 to <2 x i64>*
  %4793 = load <2 x i64>, <2 x i64>* %4792, align 8, !alias.scope !157
  %4794 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4790, i64 -2
  %4795 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4794, i64 -1
  %4796 = bitcast %"class.v8::internal::compiler::Node"** %4795 to <2 x i64>*
  %4797 = load <2 x i64>, <2 x i64>* %4796, align 8, !alias.scope !157
  %4798 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4789, i64 -1
  %4799 = bitcast %"class.v8::internal::compiler::Node"** %4798 to <2 x i64>*
  store <2 x i64> %4793, <2 x i64>* %4799, align 8, !alias.scope !160, !noalias !157
  %4800 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4789, i64 -2
  %4801 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4800, i64 -1
  %4802 = bitcast %"class.v8::internal::compiler::Node"** %4801 to <2 x i64>*
  store <2 x i64> %4797, <2 x i64>* %4802, align 8, !alias.scope !160, !noalias !157
  %4803 = add i64 %4769, 8
  %4804 = add i64 %4770, -2
  %4805 = icmp eq i64 %4804, 0
  br i1 %4805, label %4806, label %4768, !llvm.loop !162

4806:                                             ; preds = %4768, %4751
  %4807 = phi i64 [ 0, %4751 ], [ %4803, %4768 ]
  %4808 = icmp eq i64 %4760, 0
  br i1 %4808, label %4828, label %4809

4809:                                             ; preds = %4806
  %4810 = sub i64 0, %4807
  %4811 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4720, i64 -1
  %4812 = sub i64 0, %4807
  %4813 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4729, i64 -1
  %4814 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4811, i64 %4810
  %4815 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4813, i64 %4812
  %4816 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4815, i64 -1
  %4817 = bitcast %"class.v8::internal::compiler::Node"** %4816 to <2 x i64>*
  %4818 = load <2 x i64>, <2 x i64>* %4817, align 8, !alias.scope !157
  %4819 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4815, i64 -2
  %4820 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4819, i64 -1
  %4821 = bitcast %"class.v8::internal::compiler::Node"** %4820 to <2 x i64>*
  %4822 = load <2 x i64>, <2 x i64>* %4821, align 8, !alias.scope !157
  %4823 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4814, i64 -1
  %4824 = bitcast %"class.v8::internal::compiler::Node"** %4823 to <2 x i64>*
  store <2 x i64> %4818, <2 x i64>* %4824, align 8, !alias.scope !160, !noalias !157
  %4825 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4814, i64 -2
  %4826 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4825, i64 -1
  %4827 = bitcast %"class.v8::internal::compiler::Node"** %4826 to <2 x i64>*
  store <2 x i64> %4822, <2 x i64>* %4827, align 8, !alias.scope !160, !noalias !157
  br label %4828

4828:                                             ; preds = %4806, %4809
  %4829 = icmp eq i64 %4736, %4752
  br i1 %4829, label %4900, label %4830

4830:                                             ; preds = %4828, %4738, %4731
  %4831 = phi %"class.v8::internal::compiler::Node"** [ %4720, %4738 ], [ %4720, %4731 ], [ %4754, %4828 ]
  %4832 = phi %"class.v8::internal::compiler::Node"** [ %4729, %4738 ], [ %4729, %4731 ], [ %4756, %4828 ]
  %4833 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4832, i64 -1
  %4834 = ptrtoint %"class.v8::internal::compiler::Node"** %4833 to i64
  %4835 = sub i64 %4834, %4728
  %4836 = lshr i64 %4835, 3
  %4837 = add nuw nsw i64 %4836, 1
  %4838 = and i64 %4837, 7
  %4839 = icmp eq i64 %4838, 0
  br i1 %4839, label %4851, label %4840

4840:                                             ; preds = %4830, %4840
  %4841 = phi %"class.v8::internal::compiler::Node"** [ %4844, %4840 ], [ %4831, %4830 ]
  %4842 = phi %"class.v8::internal::compiler::Node"** [ %4845, %4840 ], [ %4832, %4830 ]
  %4843 = phi i64 [ %4849, %4840 ], [ %4838, %4830 ]
  %4844 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4841, i64 -1
  %4845 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4842, i64 -1
  %4846 = bitcast %"class.v8::internal::compiler::Node"** %4845 to i64*
  %4847 = load i64, i64* %4846, align 8
  %4848 = bitcast %"class.v8::internal::compiler::Node"** %4844 to i64*
  store i64 %4847, i64* %4848, align 8
  %4849 = add i64 %4843, -1
  %4850 = icmp eq i64 %4849, 0
  br i1 %4850, label %4851, label %4840, !llvm.loop !163

4851:                                             ; preds = %4840, %4830
  %4852 = phi %"class.v8::internal::compiler::Node"** [ undef, %4830 ], [ %4844, %4840 ]
  %4853 = phi %"class.v8::internal::compiler::Node"** [ %4831, %4830 ], [ %4844, %4840 ]
  %4854 = phi %"class.v8::internal::compiler::Node"** [ %4832, %4830 ], [ %4845, %4840 ]
  %4855 = icmp ult i64 %4835, 56
  br i1 %4855, label %4900, label %4856

4856:                                             ; preds = %4851, %4856
  %4857 = phi %"class.v8::internal::compiler::Node"** [ %4894, %4856 ], [ %4853, %4851 ]
  %4858 = phi %"class.v8::internal::compiler::Node"** [ %4895, %4856 ], [ %4854, %4851 ]
  %4859 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -1
  %4860 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -1
  %4861 = bitcast %"class.v8::internal::compiler::Node"** %4860 to i64*
  %4862 = load i64, i64* %4861, align 8
  %4863 = bitcast %"class.v8::internal::compiler::Node"** %4859 to i64*
  store i64 %4862, i64* %4863, align 8
  %4864 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -2
  %4865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -2
  %4866 = bitcast %"class.v8::internal::compiler::Node"** %4865 to i64*
  %4867 = load i64, i64* %4866, align 8
  %4868 = bitcast %"class.v8::internal::compiler::Node"** %4864 to i64*
  store i64 %4867, i64* %4868, align 8
  %4869 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -3
  %4870 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -3
  %4871 = bitcast %"class.v8::internal::compiler::Node"** %4870 to i64*
  %4872 = load i64, i64* %4871, align 8
  %4873 = bitcast %"class.v8::internal::compiler::Node"** %4869 to i64*
  store i64 %4872, i64* %4873, align 8
  %4874 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -4
  %4875 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -4
  %4876 = bitcast %"class.v8::internal::compiler::Node"** %4875 to i64*
  %4877 = load i64, i64* %4876, align 8
  %4878 = bitcast %"class.v8::internal::compiler::Node"** %4874 to i64*
  store i64 %4877, i64* %4878, align 8
  %4879 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -5
  %4880 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -5
  %4881 = bitcast %"class.v8::internal::compiler::Node"** %4880 to i64*
  %4882 = load i64, i64* %4881, align 8
  %4883 = bitcast %"class.v8::internal::compiler::Node"** %4879 to i64*
  store i64 %4882, i64* %4883, align 8
  %4884 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -6
  %4885 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -6
  %4886 = bitcast %"class.v8::internal::compiler::Node"** %4885 to i64*
  %4887 = load i64, i64* %4886, align 8
  %4888 = bitcast %"class.v8::internal::compiler::Node"** %4884 to i64*
  store i64 %4887, i64* %4888, align 8
  %4889 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -7
  %4890 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -7
  %4891 = bitcast %"class.v8::internal::compiler::Node"** %4890 to i64*
  %4892 = load i64, i64* %4891, align 8
  %4893 = bitcast %"class.v8::internal::compiler::Node"** %4889 to i64*
  store i64 %4892, i64* %4893, align 8
  %4894 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4857, i64 -8
  %4895 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4858, i64 -8
  %4896 = bitcast %"class.v8::internal::compiler::Node"** %4895 to i64*
  %4897 = load i64, i64* %4896, align 8
  %4898 = bitcast %"class.v8::internal::compiler::Node"** %4894 to i64*
  store i64 %4897, i64* %4898, align 8
  %4899 = icmp eq %"class.v8::internal::compiler::Node"** %4895, %4727
  br i1 %4899, label %4900, label %4856, !llvm.loop !164

4900:                                             ; preds = %4851, %4856, %4828, %4716
  %4901 = phi %"class.v8::internal::compiler::Node"** [ %4720, %4716 ], [ %4754, %4828 ], [ %4852, %4851 ], [ %4894, %4856 ]
  %4902 = ptrtoint %"class.v8::internal::compiler::Node"** %4901 to i64
  store i64 %4902, i64* %4678, align 8
  store i64 %4725, i64* %4677, align 8
  store i64 %4722, i64* %4687, align 8
  br label %4903

4903:                                             ; preds = %4900, %4670, %4658
  %4904 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 24
  %4905 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4904, align 8
  %4906 = icmp eq %"class.v8::internal::compiler::Node"* %4905, null
  %4907 = ptrtoint %"class.v8::internal::compiler::Node"* %4905 to i64
  br i1 %4906, label %5148, label %4908

4908:                                             ; preds = %4903
  %4909 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %4910 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4909, align 8
  %4911 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %4912 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4911, align 8
  %4913 = icmp eq %"class.v8::internal::compiler::Node"** %4910, %4912
  %4914 = ptrtoint %"class.v8::internal::compiler::Node"** %4912 to i64
  br i1 %4913, label %4920, label %4915

4915:                                             ; preds = %4908
  %4916 = bitcast %"class.v8::internal::compiler::Node"** %4910 to i64*
  store i64 %4907, i64* %4916, align 8
  %4917 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4910, i64 1
  %4918 = ptrtoint %"class.v8::internal::compiler::Node"** %4917 to i64
  %4919 = bitcast %"class.v8::internal::compiler::Node"*** %4909 to i64*
  store i64 %4918, i64* %4919, align 8
  br label %5148

4920:                                             ; preds = %4908
  %4921 = ptrtoint %"class.v8::internal::compiler::Node"** %4910 to i64
  %4922 = bitcast %"class.v8::internal::compiler::Node"*** %4909 to i64*
  %4923 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %4924 = load i64, i64* %4923, align 8
  %4925 = sub i64 %4921, %4924
  %4926 = ashr exact i64 %4925, 3
  %4927 = add nsw i64 %4926, 1
  %4928 = icmp ugt i64 %4927, 268435455
  br i1 %4928, label %4929, label %4931

4929:                                             ; preds = %4920
  %4930 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %4930) #6
  unreachable

4931:                                             ; preds = %4920
  %4932 = bitcast %"class.v8::internal::compiler::Node"*** %4911 to i64*
  %4933 = sub i64 %4914, %4924
  %4934 = ashr exact i64 %4933, 3
  %4935 = icmp ult i64 %4934, 134217727
  br i1 %4935, label %4936, label %4941

4936:                                             ; preds = %4931
  %4937 = ashr exact i64 %4933, 2
  %4938 = icmp ult i64 %4937, %4927
  %4939 = select i1 %4938, i64 %4927, i64 %4937
  %4940 = icmp eq i64 %4939, 0
  br i1 %4940, label %4961, label %4941

4941:                                             ; preds = %4936, %4931
  %4942 = phi i64 [ %4939, %4936 ], [ 268435455, %4931 ]
  %4943 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %4944 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4943, align 8
  %4945 = shl i64 %4942, 3
  %4946 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4944, i64 0, i32 2
  %4947 = load i64, i64* %4946, align 8
  %4948 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4944, i64 0, i32 3
  %4949 = load i64, i64* %4948, align 8
  %4950 = sub i64 %4949, %4947
  %4951 = icmp ugt i64 %4945, %4950
  br i1 %4951, label %4952, label %4954, !prof !2

4952:                                             ; preds = %4941
  %4953 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4944, i64 %4945) #5
  br label %4956

4954:                                             ; preds = %4941
  %4955 = add i64 %4947, %4945
  store i64 %4955, i64* %4946, align 8
  br label %4956

4956:                                             ; preds = %4954, %4952
  %4957 = phi i64 [ %4953, %4952 ], [ %4947, %4954 ]
  %4958 = inttoptr i64 %4957 to %"class.v8::internal::compiler::Node"**
  %4959 = bitcast %"class.v8::internal::compiler::Node"** %4904 to i64*
  %4960 = load i64, i64* %4959, align 8
  br label %4961

4961:                                             ; preds = %4936, %4956
  %4962 = phi i64 [ %4960, %4956 ], [ %4907, %4936 ]
  %4963 = phi i64 [ %4942, %4956 ], [ 0, %4936 ]
  %4964 = phi %"class.v8::internal::compiler::Node"** [ %4958, %4956 ], [ null, %4936 ]
  %4965 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4964, i64 %4926
  %4966 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4964, i64 %4963
  %4967 = ptrtoint %"class.v8::internal::compiler::Node"** %4966 to i64
  %4968 = bitcast %"class.v8::internal::compiler::Node"** %4965 to i64*
  store i64 %4962, i64* %4968, align 8
  %4969 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4965, i64 1
  %4970 = ptrtoint %"class.v8::internal::compiler::Node"** %4969 to i64
  %4971 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %4972 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4971, align 8
  %4973 = ptrtoint %"class.v8::internal::compiler::Node"** %4972 to i64
  %4974 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %4909, align 8
  %4975 = icmp eq %"class.v8::internal::compiler::Node"** %4974, %4972
  br i1 %4975, label %5145, label %4976

4976:                                             ; preds = %4961
  %4977 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 -1
  %4978 = ptrtoint %"class.v8::internal::compiler::Node"** %4977 to i64
  %4979 = sub i64 %4978, %4973
  %4980 = lshr i64 %4979, 3
  %4981 = add nuw nsw i64 %4980, 1
  %4982 = icmp ult i64 %4981, 4
  br i1 %4982, label %5075, label %4983

4983:                                             ; preds = %4976
  %4984 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 -1
  %4985 = ptrtoint %"class.v8::internal::compiler::Node"** %4984 to i64
  %4986 = sub i64 %4985, %4973
  %4987 = lshr i64 %4986, 3
  %4988 = xor i64 %4987, -1
  %4989 = add nsw i64 %4926, %4988
  %4990 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4964, i64 %4989
  %4991 = xor i64 %4987, -1
  %4992 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 %4991
  %4993 = icmp ult %"class.v8::internal::compiler::Node"** %4990, %4974
  %4994 = icmp ult %"class.v8::internal::compiler::Node"** %4992, %4965
  %4995 = and i1 %4993, %4994
  br i1 %4995, label %5075, label %4996

4996:                                             ; preds = %4983
  %4997 = and i64 %4981, 4611686018427387900
  %4998 = sub nsw i64 0, %4997
  %4999 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4965, i64 %4998
  %5000 = sub nsw i64 0, %4997
  %5001 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 %5000
  %5002 = add nsw i64 %4997, -4
  %5003 = lshr exact i64 %5002, 2
  %5004 = add nuw nsw i64 %5003, 1
  %5005 = and i64 %5004, 1
  %5006 = icmp eq i64 %5002, 0
  br i1 %5006, label %5051, label %5007

5007:                                             ; preds = %4996
  %5008 = sub nuw nsw i64 %5004, %5005
  %5009 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4965, i64 -1
  %5010 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 -1
  %5011 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4965, i64 -1
  %5012 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 -1
  br label %5013

5013:                                             ; preds = %5013, %5007
  %5014 = phi i64 [ 0, %5007 ], [ %5048, %5013 ]
  %5015 = phi i64 [ %5008, %5007 ], [ %5049, %5013 ]
  %5016 = sub i64 0, %5014
  %5017 = sub i64 0, %5014
  %5018 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5009, i64 %5016
  %5019 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5010, i64 %5017
  %5020 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5019, i64 -1
  %5021 = bitcast %"class.v8::internal::compiler::Node"** %5020 to <2 x i64>*
  %5022 = load <2 x i64>, <2 x i64>* %5021, align 8, !alias.scope !165
  %5023 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5019, i64 -2
  %5024 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5023, i64 -1
  %5025 = bitcast %"class.v8::internal::compiler::Node"** %5024 to <2 x i64>*
  %5026 = load <2 x i64>, <2 x i64>* %5025, align 8, !alias.scope !165
  %5027 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5018, i64 -1
  %5028 = bitcast %"class.v8::internal::compiler::Node"** %5027 to <2 x i64>*
  store <2 x i64> %5022, <2 x i64>* %5028, align 8, !alias.scope !168, !noalias !165
  %5029 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5018, i64 -2
  %5030 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5029, i64 -1
  %5031 = bitcast %"class.v8::internal::compiler::Node"** %5030 to <2 x i64>*
  store <2 x i64> %5026, <2 x i64>* %5031, align 8, !alias.scope !168, !noalias !165
  %5032 = sub nuw nsw i64 -4, %5014
  %5033 = sub nuw nsw i64 -4, %5014
  %5034 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5011, i64 %5032
  %5035 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5012, i64 %5033
  %5036 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5035, i64 -1
  %5037 = bitcast %"class.v8::internal::compiler::Node"** %5036 to <2 x i64>*
  %5038 = load <2 x i64>, <2 x i64>* %5037, align 8, !alias.scope !165
  %5039 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5035, i64 -2
  %5040 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5039, i64 -1
  %5041 = bitcast %"class.v8::internal::compiler::Node"** %5040 to <2 x i64>*
  %5042 = load <2 x i64>, <2 x i64>* %5041, align 8, !alias.scope !165
  %5043 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5034, i64 -1
  %5044 = bitcast %"class.v8::internal::compiler::Node"** %5043 to <2 x i64>*
  store <2 x i64> %5038, <2 x i64>* %5044, align 8, !alias.scope !168, !noalias !165
  %5045 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5034, i64 -2
  %5046 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5045, i64 -1
  %5047 = bitcast %"class.v8::internal::compiler::Node"** %5046 to <2 x i64>*
  store <2 x i64> %5042, <2 x i64>* %5047, align 8, !alias.scope !168, !noalias !165
  %5048 = add i64 %5014, 8
  %5049 = add i64 %5015, -2
  %5050 = icmp eq i64 %5049, 0
  br i1 %5050, label %5051, label %5013, !llvm.loop !170

5051:                                             ; preds = %5013, %4996
  %5052 = phi i64 [ 0, %4996 ], [ %5048, %5013 ]
  %5053 = icmp eq i64 %5005, 0
  br i1 %5053, label %5073, label %5054

5054:                                             ; preds = %5051
  %5055 = sub i64 0, %5052
  %5056 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4965, i64 -1
  %5057 = sub i64 0, %5052
  %5058 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4974, i64 -1
  %5059 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5056, i64 %5055
  %5060 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5058, i64 %5057
  %5061 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5060, i64 -1
  %5062 = bitcast %"class.v8::internal::compiler::Node"** %5061 to <2 x i64>*
  %5063 = load <2 x i64>, <2 x i64>* %5062, align 8, !alias.scope !165
  %5064 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5060, i64 -2
  %5065 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5064, i64 -1
  %5066 = bitcast %"class.v8::internal::compiler::Node"** %5065 to <2 x i64>*
  %5067 = load <2 x i64>, <2 x i64>* %5066, align 8, !alias.scope !165
  %5068 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5059, i64 -1
  %5069 = bitcast %"class.v8::internal::compiler::Node"** %5068 to <2 x i64>*
  store <2 x i64> %5063, <2 x i64>* %5069, align 8, !alias.scope !168, !noalias !165
  %5070 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5059, i64 -2
  %5071 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5070, i64 -1
  %5072 = bitcast %"class.v8::internal::compiler::Node"** %5071 to <2 x i64>*
  store <2 x i64> %5067, <2 x i64>* %5072, align 8, !alias.scope !168, !noalias !165
  br label %5073

5073:                                             ; preds = %5051, %5054
  %5074 = icmp eq i64 %4981, %4997
  br i1 %5074, label %5145, label %5075

5075:                                             ; preds = %5073, %4983, %4976
  %5076 = phi %"class.v8::internal::compiler::Node"** [ %4965, %4983 ], [ %4965, %4976 ], [ %4999, %5073 ]
  %5077 = phi %"class.v8::internal::compiler::Node"** [ %4974, %4983 ], [ %4974, %4976 ], [ %5001, %5073 ]
  %5078 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5077, i64 -1
  %5079 = ptrtoint %"class.v8::internal::compiler::Node"** %5078 to i64
  %5080 = sub i64 %5079, %4973
  %5081 = lshr i64 %5080, 3
  %5082 = add nuw nsw i64 %5081, 1
  %5083 = and i64 %5082, 7
  %5084 = icmp eq i64 %5083, 0
  br i1 %5084, label %5096, label %5085

5085:                                             ; preds = %5075, %5085
  %5086 = phi %"class.v8::internal::compiler::Node"** [ %5089, %5085 ], [ %5076, %5075 ]
  %5087 = phi %"class.v8::internal::compiler::Node"** [ %5090, %5085 ], [ %5077, %5075 ]
  %5088 = phi i64 [ %5094, %5085 ], [ %5083, %5075 ]
  %5089 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5086, i64 -1
  %5090 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5087, i64 -1
  %5091 = bitcast %"class.v8::internal::compiler::Node"** %5090 to i64*
  %5092 = load i64, i64* %5091, align 8
  %5093 = bitcast %"class.v8::internal::compiler::Node"** %5089 to i64*
  store i64 %5092, i64* %5093, align 8
  %5094 = add i64 %5088, -1
  %5095 = icmp eq i64 %5094, 0
  br i1 %5095, label %5096, label %5085, !llvm.loop !171

5096:                                             ; preds = %5085, %5075
  %5097 = phi %"class.v8::internal::compiler::Node"** [ undef, %5075 ], [ %5089, %5085 ]
  %5098 = phi %"class.v8::internal::compiler::Node"** [ %5076, %5075 ], [ %5089, %5085 ]
  %5099 = phi %"class.v8::internal::compiler::Node"** [ %5077, %5075 ], [ %5090, %5085 ]
  %5100 = icmp ult i64 %5080, 56
  br i1 %5100, label %5145, label %5101

5101:                                             ; preds = %5096, %5101
  %5102 = phi %"class.v8::internal::compiler::Node"** [ %5139, %5101 ], [ %5098, %5096 ]
  %5103 = phi %"class.v8::internal::compiler::Node"** [ %5140, %5101 ], [ %5099, %5096 ]
  %5104 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -1
  %5105 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -1
  %5106 = bitcast %"class.v8::internal::compiler::Node"** %5105 to i64*
  %5107 = load i64, i64* %5106, align 8
  %5108 = bitcast %"class.v8::internal::compiler::Node"** %5104 to i64*
  store i64 %5107, i64* %5108, align 8
  %5109 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -2
  %5110 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -2
  %5111 = bitcast %"class.v8::internal::compiler::Node"** %5110 to i64*
  %5112 = load i64, i64* %5111, align 8
  %5113 = bitcast %"class.v8::internal::compiler::Node"** %5109 to i64*
  store i64 %5112, i64* %5113, align 8
  %5114 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -3
  %5115 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -3
  %5116 = bitcast %"class.v8::internal::compiler::Node"** %5115 to i64*
  %5117 = load i64, i64* %5116, align 8
  %5118 = bitcast %"class.v8::internal::compiler::Node"** %5114 to i64*
  store i64 %5117, i64* %5118, align 8
  %5119 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -4
  %5120 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -4
  %5121 = bitcast %"class.v8::internal::compiler::Node"** %5120 to i64*
  %5122 = load i64, i64* %5121, align 8
  %5123 = bitcast %"class.v8::internal::compiler::Node"** %5119 to i64*
  store i64 %5122, i64* %5123, align 8
  %5124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -5
  %5125 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -5
  %5126 = bitcast %"class.v8::internal::compiler::Node"** %5125 to i64*
  %5127 = load i64, i64* %5126, align 8
  %5128 = bitcast %"class.v8::internal::compiler::Node"** %5124 to i64*
  store i64 %5127, i64* %5128, align 8
  %5129 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -6
  %5130 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -6
  %5131 = bitcast %"class.v8::internal::compiler::Node"** %5130 to i64*
  %5132 = load i64, i64* %5131, align 8
  %5133 = bitcast %"class.v8::internal::compiler::Node"** %5129 to i64*
  store i64 %5132, i64* %5133, align 8
  %5134 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -7
  %5135 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -7
  %5136 = bitcast %"class.v8::internal::compiler::Node"** %5135 to i64*
  %5137 = load i64, i64* %5136, align 8
  %5138 = bitcast %"class.v8::internal::compiler::Node"** %5134 to i64*
  store i64 %5137, i64* %5138, align 8
  %5139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5102, i64 -8
  %5140 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5103, i64 -8
  %5141 = bitcast %"class.v8::internal::compiler::Node"** %5140 to i64*
  %5142 = load i64, i64* %5141, align 8
  %5143 = bitcast %"class.v8::internal::compiler::Node"** %5139 to i64*
  store i64 %5142, i64* %5143, align 8
  %5144 = icmp eq %"class.v8::internal::compiler::Node"** %5140, %4972
  br i1 %5144, label %5145, label %5101, !llvm.loop !172

5145:                                             ; preds = %5096, %5101, %5073, %4961
  %5146 = phi %"class.v8::internal::compiler::Node"** [ %4965, %4961 ], [ %4999, %5073 ], [ %5097, %5096 ], [ %5139, %5101 ]
  %5147 = ptrtoint %"class.v8::internal::compiler::Node"** %5146 to i64
  store i64 %5147, i64* %4923, align 8
  store i64 %4970, i64* %4922, align 8
  store i64 %4967, i64* %4932, align 8
  br label %5148

5148:                                             ; preds = %5145, %4915, %4903
  %5149 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 25
  %5150 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5149, align 8
  %5151 = icmp eq %"class.v8::internal::compiler::Node"* %5150, null
  %5152 = ptrtoint %"class.v8::internal::compiler::Node"* %5150 to i64
  br i1 %5151, label %5393, label %5153

5153:                                             ; preds = %5148
  %5154 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %5155 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5154, align 8
  %5156 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5157 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5156, align 8
  %5158 = icmp eq %"class.v8::internal::compiler::Node"** %5155, %5157
  %5159 = ptrtoint %"class.v8::internal::compiler::Node"** %5157 to i64
  br i1 %5158, label %5165, label %5160

5160:                                             ; preds = %5153
  %5161 = bitcast %"class.v8::internal::compiler::Node"** %5155 to i64*
  store i64 %5152, i64* %5161, align 8
  %5162 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5155, i64 1
  %5163 = ptrtoint %"class.v8::internal::compiler::Node"** %5162 to i64
  %5164 = bitcast %"class.v8::internal::compiler::Node"*** %5154 to i64*
  store i64 %5163, i64* %5164, align 8
  br label %5393

5165:                                             ; preds = %5153
  %5166 = ptrtoint %"class.v8::internal::compiler::Node"** %5155 to i64
  %5167 = bitcast %"class.v8::internal::compiler::Node"*** %5154 to i64*
  %5168 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %5169 = load i64, i64* %5168, align 8
  %5170 = sub i64 %5166, %5169
  %5171 = ashr exact i64 %5170, 3
  %5172 = add nsw i64 %5171, 1
  %5173 = icmp ugt i64 %5172, 268435455
  br i1 %5173, label %5174, label %5176

5174:                                             ; preds = %5165
  %5175 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %5175) #6
  unreachable

5176:                                             ; preds = %5165
  %5177 = bitcast %"class.v8::internal::compiler::Node"*** %5156 to i64*
  %5178 = sub i64 %5159, %5169
  %5179 = ashr exact i64 %5178, 3
  %5180 = icmp ult i64 %5179, 134217727
  br i1 %5180, label %5181, label %5186

5181:                                             ; preds = %5176
  %5182 = ashr exact i64 %5178, 2
  %5183 = icmp ult i64 %5182, %5172
  %5184 = select i1 %5183, i64 %5172, i64 %5182
  %5185 = icmp eq i64 %5184, 0
  br i1 %5185, label %5206, label %5186

5186:                                             ; preds = %5181, %5176
  %5187 = phi i64 [ %5184, %5181 ], [ 268435455, %5176 ]
  %5188 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %5189 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5188, align 8
  %5190 = shl i64 %5187, 3
  %5191 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5189, i64 0, i32 2
  %5192 = load i64, i64* %5191, align 8
  %5193 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5189, i64 0, i32 3
  %5194 = load i64, i64* %5193, align 8
  %5195 = sub i64 %5194, %5192
  %5196 = icmp ugt i64 %5190, %5195
  br i1 %5196, label %5197, label %5199, !prof !2

5197:                                             ; preds = %5186
  %5198 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5189, i64 %5190) #5
  br label %5201

5199:                                             ; preds = %5186
  %5200 = add i64 %5192, %5190
  store i64 %5200, i64* %5191, align 8
  br label %5201

5201:                                             ; preds = %5199, %5197
  %5202 = phi i64 [ %5198, %5197 ], [ %5192, %5199 ]
  %5203 = inttoptr i64 %5202 to %"class.v8::internal::compiler::Node"**
  %5204 = bitcast %"class.v8::internal::compiler::Node"** %5149 to i64*
  %5205 = load i64, i64* %5204, align 8
  br label %5206

5206:                                             ; preds = %5181, %5201
  %5207 = phi i64 [ %5205, %5201 ], [ %5152, %5181 ]
  %5208 = phi i64 [ %5187, %5201 ], [ 0, %5181 ]
  %5209 = phi %"class.v8::internal::compiler::Node"** [ %5203, %5201 ], [ null, %5181 ]
  %5210 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5209, i64 %5171
  %5211 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5209, i64 %5208
  %5212 = ptrtoint %"class.v8::internal::compiler::Node"** %5211 to i64
  %5213 = bitcast %"class.v8::internal::compiler::Node"** %5210 to i64*
  store i64 %5207, i64* %5213, align 8
  %5214 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5210, i64 1
  %5215 = ptrtoint %"class.v8::internal::compiler::Node"** %5214 to i64
  %5216 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %5217 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5216, align 8
  %5218 = ptrtoint %"class.v8::internal::compiler::Node"** %5217 to i64
  %5219 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5154, align 8
  %5220 = icmp eq %"class.v8::internal::compiler::Node"** %5219, %5217
  br i1 %5220, label %5390, label %5221

5221:                                             ; preds = %5206
  %5222 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 -1
  %5223 = ptrtoint %"class.v8::internal::compiler::Node"** %5222 to i64
  %5224 = sub i64 %5223, %5218
  %5225 = lshr i64 %5224, 3
  %5226 = add nuw nsw i64 %5225, 1
  %5227 = icmp ult i64 %5226, 4
  br i1 %5227, label %5320, label %5228

5228:                                             ; preds = %5221
  %5229 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 -1
  %5230 = ptrtoint %"class.v8::internal::compiler::Node"** %5229 to i64
  %5231 = sub i64 %5230, %5218
  %5232 = lshr i64 %5231, 3
  %5233 = xor i64 %5232, -1
  %5234 = add nsw i64 %5171, %5233
  %5235 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5209, i64 %5234
  %5236 = xor i64 %5232, -1
  %5237 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 %5236
  %5238 = icmp ult %"class.v8::internal::compiler::Node"** %5235, %5219
  %5239 = icmp ult %"class.v8::internal::compiler::Node"** %5237, %5210
  %5240 = and i1 %5238, %5239
  br i1 %5240, label %5320, label %5241

5241:                                             ; preds = %5228
  %5242 = and i64 %5226, 4611686018427387900
  %5243 = sub nsw i64 0, %5242
  %5244 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5210, i64 %5243
  %5245 = sub nsw i64 0, %5242
  %5246 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 %5245
  %5247 = add nsw i64 %5242, -4
  %5248 = lshr exact i64 %5247, 2
  %5249 = add nuw nsw i64 %5248, 1
  %5250 = and i64 %5249, 1
  %5251 = icmp eq i64 %5247, 0
  br i1 %5251, label %5296, label %5252

5252:                                             ; preds = %5241
  %5253 = sub nuw nsw i64 %5249, %5250
  %5254 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5210, i64 -1
  %5255 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 -1
  %5256 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5210, i64 -1
  %5257 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 -1
  br label %5258

5258:                                             ; preds = %5258, %5252
  %5259 = phi i64 [ 0, %5252 ], [ %5293, %5258 ]
  %5260 = phi i64 [ %5253, %5252 ], [ %5294, %5258 ]
  %5261 = sub i64 0, %5259
  %5262 = sub i64 0, %5259
  %5263 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5254, i64 %5261
  %5264 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5255, i64 %5262
  %5265 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5264, i64 -1
  %5266 = bitcast %"class.v8::internal::compiler::Node"** %5265 to <2 x i64>*
  %5267 = load <2 x i64>, <2 x i64>* %5266, align 8, !alias.scope !173
  %5268 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5264, i64 -2
  %5269 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5268, i64 -1
  %5270 = bitcast %"class.v8::internal::compiler::Node"** %5269 to <2 x i64>*
  %5271 = load <2 x i64>, <2 x i64>* %5270, align 8, !alias.scope !173
  %5272 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5263, i64 -1
  %5273 = bitcast %"class.v8::internal::compiler::Node"** %5272 to <2 x i64>*
  store <2 x i64> %5267, <2 x i64>* %5273, align 8, !alias.scope !176, !noalias !173
  %5274 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5263, i64 -2
  %5275 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5274, i64 -1
  %5276 = bitcast %"class.v8::internal::compiler::Node"** %5275 to <2 x i64>*
  store <2 x i64> %5271, <2 x i64>* %5276, align 8, !alias.scope !176, !noalias !173
  %5277 = sub nuw nsw i64 -4, %5259
  %5278 = sub nuw nsw i64 -4, %5259
  %5279 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5256, i64 %5277
  %5280 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5257, i64 %5278
  %5281 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5280, i64 -1
  %5282 = bitcast %"class.v8::internal::compiler::Node"** %5281 to <2 x i64>*
  %5283 = load <2 x i64>, <2 x i64>* %5282, align 8, !alias.scope !173
  %5284 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5280, i64 -2
  %5285 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5284, i64 -1
  %5286 = bitcast %"class.v8::internal::compiler::Node"** %5285 to <2 x i64>*
  %5287 = load <2 x i64>, <2 x i64>* %5286, align 8, !alias.scope !173
  %5288 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5279, i64 -1
  %5289 = bitcast %"class.v8::internal::compiler::Node"** %5288 to <2 x i64>*
  store <2 x i64> %5283, <2 x i64>* %5289, align 8, !alias.scope !176, !noalias !173
  %5290 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5279, i64 -2
  %5291 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5290, i64 -1
  %5292 = bitcast %"class.v8::internal::compiler::Node"** %5291 to <2 x i64>*
  store <2 x i64> %5287, <2 x i64>* %5292, align 8, !alias.scope !176, !noalias !173
  %5293 = add i64 %5259, 8
  %5294 = add i64 %5260, -2
  %5295 = icmp eq i64 %5294, 0
  br i1 %5295, label %5296, label %5258, !llvm.loop !178

5296:                                             ; preds = %5258, %5241
  %5297 = phi i64 [ 0, %5241 ], [ %5293, %5258 ]
  %5298 = icmp eq i64 %5250, 0
  br i1 %5298, label %5318, label %5299

5299:                                             ; preds = %5296
  %5300 = sub i64 0, %5297
  %5301 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5210, i64 -1
  %5302 = sub i64 0, %5297
  %5303 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5219, i64 -1
  %5304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5301, i64 %5300
  %5305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5303, i64 %5302
  %5306 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5305, i64 -1
  %5307 = bitcast %"class.v8::internal::compiler::Node"** %5306 to <2 x i64>*
  %5308 = load <2 x i64>, <2 x i64>* %5307, align 8, !alias.scope !173
  %5309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5305, i64 -2
  %5310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5309, i64 -1
  %5311 = bitcast %"class.v8::internal::compiler::Node"** %5310 to <2 x i64>*
  %5312 = load <2 x i64>, <2 x i64>* %5311, align 8, !alias.scope !173
  %5313 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5304, i64 -1
  %5314 = bitcast %"class.v8::internal::compiler::Node"** %5313 to <2 x i64>*
  store <2 x i64> %5308, <2 x i64>* %5314, align 8, !alias.scope !176, !noalias !173
  %5315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5304, i64 -2
  %5316 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5315, i64 -1
  %5317 = bitcast %"class.v8::internal::compiler::Node"** %5316 to <2 x i64>*
  store <2 x i64> %5312, <2 x i64>* %5317, align 8, !alias.scope !176, !noalias !173
  br label %5318

5318:                                             ; preds = %5296, %5299
  %5319 = icmp eq i64 %5226, %5242
  br i1 %5319, label %5390, label %5320

5320:                                             ; preds = %5318, %5228, %5221
  %5321 = phi %"class.v8::internal::compiler::Node"** [ %5210, %5228 ], [ %5210, %5221 ], [ %5244, %5318 ]
  %5322 = phi %"class.v8::internal::compiler::Node"** [ %5219, %5228 ], [ %5219, %5221 ], [ %5246, %5318 ]
  %5323 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5322, i64 -1
  %5324 = ptrtoint %"class.v8::internal::compiler::Node"** %5323 to i64
  %5325 = sub i64 %5324, %5218
  %5326 = lshr i64 %5325, 3
  %5327 = add nuw nsw i64 %5326, 1
  %5328 = and i64 %5327, 7
  %5329 = icmp eq i64 %5328, 0
  br i1 %5329, label %5341, label %5330

5330:                                             ; preds = %5320, %5330
  %5331 = phi %"class.v8::internal::compiler::Node"** [ %5334, %5330 ], [ %5321, %5320 ]
  %5332 = phi %"class.v8::internal::compiler::Node"** [ %5335, %5330 ], [ %5322, %5320 ]
  %5333 = phi i64 [ %5339, %5330 ], [ %5328, %5320 ]
  %5334 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5331, i64 -1
  %5335 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5332, i64 -1
  %5336 = bitcast %"class.v8::internal::compiler::Node"** %5335 to i64*
  %5337 = load i64, i64* %5336, align 8
  %5338 = bitcast %"class.v8::internal::compiler::Node"** %5334 to i64*
  store i64 %5337, i64* %5338, align 8
  %5339 = add i64 %5333, -1
  %5340 = icmp eq i64 %5339, 0
  br i1 %5340, label %5341, label %5330, !llvm.loop !179

5341:                                             ; preds = %5330, %5320
  %5342 = phi %"class.v8::internal::compiler::Node"** [ undef, %5320 ], [ %5334, %5330 ]
  %5343 = phi %"class.v8::internal::compiler::Node"** [ %5321, %5320 ], [ %5334, %5330 ]
  %5344 = phi %"class.v8::internal::compiler::Node"** [ %5322, %5320 ], [ %5335, %5330 ]
  %5345 = icmp ult i64 %5325, 56
  br i1 %5345, label %5390, label %5346

5346:                                             ; preds = %5341, %5346
  %5347 = phi %"class.v8::internal::compiler::Node"** [ %5384, %5346 ], [ %5343, %5341 ]
  %5348 = phi %"class.v8::internal::compiler::Node"** [ %5385, %5346 ], [ %5344, %5341 ]
  %5349 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -1
  %5350 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -1
  %5351 = bitcast %"class.v8::internal::compiler::Node"** %5350 to i64*
  %5352 = load i64, i64* %5351, align 8
  %5353 = bitcast %"class.v8::internal::compiler::Node"** %5349 to i64*
  store i64 %5352, i64* %5353, align 8
  %5354 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -2
  %5355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -2
  %5356 = bitcast %"class.v8::internal::compiler::Node"** %5355 to i64*
  %5357 = load i64, i64* %5356, align 8
  %5358 = bitcast %"class.v8::internal::compiler::Node"** %5354 to i64*
  store i64 %5357, i64* %5358, align 8
  %5359 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -3
  %5360 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -3
  %5361 = bitcast %"class.v8::internal::compiler::Node"** %5360 to i64*
  %5362 = load i64, i64* %5361, align 8
  %5363 = bitcast %"class.v8::internal::compiler::Node"** %5359 to i64*
  store i64 %5362, i64* %5363, align 8
  %5364 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -4
  %5365 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -4
  %5366 = bitcast %"class.v8::internal::compiler::Node"** %5365 to i64*
  %5367 = load i64, i64* %5366, align 8
  %5368 = bitcast %"class.v8::internal::compiler::Node"** %5364 to i64*
  store i64 %5367, i64* %5368, align 8
  %5369 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -5
  %5370 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -5
  %5371 = bitcast %"class.v8::internal::compiler::Node"** %5370 to i64*
  %5372 = load i64, i64* %5371, align 8
  %5373 = bitcast %"class.v8::internal::compiler::Node"** %5369 to i64*
  store i64 %5372, i64* %5373, align 8
  %5374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -6
  %5375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -6
  %5376 = bitcast %"class.v8::internal::compiler::Node"** %5375 to i64*
  %5377 = load i64, i64* %5376, align 8
  %5378 = bitcast %"class.v8::internal::compiler::Node"** %5374 to i64*
  store i64 %5377, i64* %5378, align 8
  %5379 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -7
  %5380 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -7
  %5381 = bitcast %"class.v8::internal::compiler::Node"** %5380 to i64*
  %5382 = load i64, i64* %5381, align 8
  %5383 = bitcast %"class.v8::internal::compiler::Node"** %5379 to i64*
  store i64 %5382, i64* %5383, align 8
  %5384 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5347, i64 -8
  %5385 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5348, i64 -8
  %5386 = bitcast %"class.v8::internal::compiler::Node"** %5385 to i64*
  %5387 = load i64, i64* %5386, align 8
  %5388 = bitcast %"class.v8::internal::compiler::Node"** %5384 to i64*
  store i64 %5387, i64* %5388, align 8
  %5389 = icmp eq %"class.v8::internal::compiler::Node"** %5385, %5217
  br i1 %5389, label %5390, label %5346, !llvm.loop !180

5390:                                             ; preds = %5341, %5346, %5318, %5206
  %5391 = phi %"class.v8::internal::compiler::Node"** [ %5210, %5206 ], [ %5244, %5318 ], [ %5342, %5341 ], [ %5384, %5346 ]
  %5392 = ptrtoint %"class.v8::internal::compiler::Node"** %5391 to i64
  store i64 %5392, i64* %5168, align 8
  store i64 %5215, i64* %5167, align 8
  store i64 %5212, i64* %5177, align 8
  br label %5393

5393:                                             ; preds = %5390, %5160, %5148
  %5394 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 26
  %5395 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5394, align 8
  %5396 = icmp eq %"class.v8::internal::compiler::Node"* %5395, null
  %5397 = ptrtoint %"class.v8::internal::compiler::Node"* %5395 to i64
  br i1 %5396, label %5638, label %5398

5398:                                             ; preds = %5393
  %5399 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %5400 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5399, align 8
  %5401 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5402 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5401, align 8
  %5403 = icmp eq %"class.v8::internal::compiler::Node"** %5400, %5402
  %5404 = ptrtoint %"class.v8::internal::compiler::Node"** %5402 to i64
  br i1 %5403, label %5410, label %5405

5405:                                             ; preds = %5398
  %5406 = bitcast %"class.v8::internal::compiler::Node"** %5400 to i64*
  store i64 %5397, i64* %5406, align 8
  %5407 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5400, i64 1
  %5408 = ptrtoint %"class.v8::internal::compiler::Node"** %5407 to i64
  %5409 = bitcast %"class.v8::internal::compiler::Node"*** %5399 to i64*
  store i64 %5408, i64* %5409, align 8
  br label %5638

5410:                                             ; preds = %5398
  %5411 = ptrtoint %"class.v8::internal::compiler::Node"** %5400 to i64
  %5412 = bitcast %"class.v8::internal::compiler::Node"*** %5399 to i64*
  %5413 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %5414 = load i64, i64* %5413, align 8
  %5415 = sub i64 %5411, %5414
  %5416 = ashr exact i64 %5415, 3
  %5417 = add nsw i64 %5416, 1
  %5418 = icmp ugt i64 %5417, 268435455
  br i1 %5418, label %5419, label %5421

5419:                                             ; preds = %5410
  %5420 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %5420) #6
  unreachable

5421:                                             ; preds = %5410
  %5422 = bitcast %"class.v8::internal::compiler::Node"*** %5401 to i64*
  %5423 = sub i64 %5404, %5414
  %5424 = ashr exact i64 %5423, 3
  %5425 = icmp ult i64 %5424, 134217727
  br i1 %5425, label %5426, label %5431

5426:                                             ; preds = %5421
  %5427 = ashr exact i64 %5423, 2
  %5428 = icmp ult i64 %5427, %5417
  %5429 = select i1 %5428, i64 %5417, i64 %5427
  %5430 = icmp eq i64 %5429, 0
  br i1 %5430, label %5451, label %5431

5431:                                             ; preds = %5426, %5421
  %5432 = phi i64 [ %5429, %5426 ], [ 268435455, %5421 ]
  %5433 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %5434 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5433, align 8
  %5435 = shl i64 %5432, 3
  %5436 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5434, i64 0, i32 2
  %5437 = load i64, i64* %5436, align 8
  %5438 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5434, i64 0, i32 3
  %5439 = load i64, i64* %5438, align 8
  %5440 = sub i64 %5439, %5437
  %5441 = icmp ugt i64 %5435, %5440
  br i1 %5441, label %5442, label %5444, !prof !2

5442:                                             ; preds = %5431
  %5443 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5434, i64 %5435) #5
  br label %5446

5444:                                             ; preds = %5431
  %5445 = add i64 %5437, %5435
  store i64 %5445, i64* %5436, align 8
  br label %5446

5446:                                             ; preds = %5444, %5442
  %5447 = phi i64 [ %5443, %5442 ], [ %5437, %5444 ]
  %5448 = inttoptr i64 %5447 to %"class.v8::internal::compiler::Node"**
  %5449 = bitcast %"class.v8::internal::compiler::Node"** %5394 to i64*
  %5450 = load i64, i64* %5449, align 8
  br label %5451

5451:                                             ; preds = %5426, %5446
  %5452 = phi i64 [ %5450, %5446 ], [ %5397, %5426 ]
  %5453 = phi i64 [ %5432, %5446 ], [ 0, %5426 ]
  %5454 = phi %"class.v8::internal::compiler::Node"** [ %5448, %5446 ], [ null, %5426 ]
  %5455 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5454, i64 %5416
  %5456 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5454, i64 %5453
  %5457 = ptrtoint %"class.v8::internal::compiler::Node"** %5456 to i64
  %5458 = bitcast %"class.v8::internal::compiler::Node"** %5455 to i64*
  store i64 %5452, i64* %5458, align 8
  %5459 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5455, i64 1
  %5460 = ptrtoint %"class.v8::internal::compiler::Node"** %5459 to i64
  %5461 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %5462 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5461, align 8
  %5463 = ptrtoint %"class.v8::internal::compiler::Node"** %5462 to i64
  %5464 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5399, align 8
  %5465 = icmp eq %"class.v8::internal::compiler::Node"** %5464, %5462
  br i1 %5465, label %5635, label %5466

5466:                                             ; preds = %5451
  %5467 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 -1
  %5468 = ptrtoint %"class.v8::internal::compiler::Node"** %5467 to i64
  %5469 = sub i64 %5468, %5463
  %5470 = lshr i64 %5469, 3
  %5471 = add nuw nsw i64 %5470, 1
  %5472 = icmp ult i64 %5471, 4
  br i1 %5472, label %5565, label %5473

5473:                                             ; preds = %5466
  %5474 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 -1
  %5475 = ptrtoint %"class.v8::internal::compiler::Node"** %5474 to i64
  %5476 = sub i64 %5475, %5463
  %5477 = lshr i64 %5476, 3
  %5478 = xor i64 %5477, -1
  %5479 = add nsw i64 %5416, %5478
  %5480 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5454, i64 %5479
  %5481 = xor i64 %5477, -1
  %5482 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 %5481
  %5483 = icmp ult %"class.v8::internal::compiler::Node"** %5480, %5464
  %5484 = icmp ult %"class.v8::internal::compiler::Node"** %5482, %5455
  %5485 = and i1 %5483, %5484
  br i1 %5485, label %5565, label %5486

5486:                                             ; preds = %5473
  %5487 = and i64 %5471, 4611686018427387900
  %5488 = sub nsw i64 0, %5487
  %5489 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5455, i64 %5488
  %5490 = sub nsw i64 0, %5487
  %5491 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 %5490
  %5492 = add nsw i64 %5487, -4
  %5493 = lshr exact i64 %5492, 2
  %5494 = add nuw nsw i64 %5493, 1
  %5495 = and i64 %5494, 1
  %5496 = icmp eq i64 %5492, 0
  br i1 %5496, label %5541, label %5497

5497:                                             ; preds = %5486
  %5498 = sub nuw nsw i64 %5494, %5495
  %5499 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5455, i64 -1
  %5500 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 -1
  %5501 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5455, i64 -1
  %5502 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 -1
  br label %5503

5503:                                             ; preds = %5503, %5497
  %5504 = phi i64 [ 0, %5497 ], [ %5538, %5503 ]
  %5505 = phi i64 [ %5498, %5497 ], [ %5539, %5503 ]
  %5506 = sub i64 0, %5504
  %5507 = sub i64 0, %5504
  %5508 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5499, i64 %5506
  %5509 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5500, i64 %5507
  %5510 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5509, i64 -1
  %5511 = bitcast %"class.v8::internal::compiler::Node"** %5510 to <2 x i64>*
  %5512 = load <2 x i64>, <2 x i64>* %5511, align 8, !alias.scope !181
  %5513 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5509, i64 -2
  %5514 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5513, i64 -1
  %5515 = bitcast %"class.v8::internal::compiler::Node"** %5514 to <2 x i64>*
  %5516 = load <2 x i64>, <2 x i64>* %5515, align 8, !alias.scope !181
  %5517 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5508, i64 -1
  %5518 = bitcast %"class.v8::internal::compiler::Node"** %5517 to <2 x i64>*
  store <2 x i64> %5512, <2 x i64>* %5518, align 8, !alias.scope !184, !noalias !181
  %5519 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5508, i64 -2
  %5520 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5519, i64 -1
  %5521 = bitcast %"class.v8::internal::compiler::Node"** %5520 to <2 x i64>*
  store <2 x i64> %5516, <2 x i64>* %5521, align 8, !alias.scope !184, !noalias !181
  %5522 = sub nuw nsw i64 -4, %5504
  %5523 = sub nuw nsw i64 -4, %5504
  %5524 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5501, i64 %5522
  %5525 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5502, i64 %5523
  %5526 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5525, i64 -1
  %5527 = bitcast %"class.v8::internal::compiler::Node"** %5526 to <2 x i64>*
  %5528 = load <2 x i64>, <2 x i64>* %5527, align 8, !alias.scope !181
  %5529 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5525, i64 -2
  %5530 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5529, i64 -1
  %5531 = bitcast %"class.v8::internal::compiler::Node"** %5530 to <2 x i64>*
  %5532 = load <2 x i64>, <2 x i64>* %5531, align 8, !alias.scope !181
  %5533 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5524, i64 -1
  %5534 = bitcast %"class.v8::internal::compiler::Node"** %5533 to <2 x i64>*
  store <2 x i64> %5528, <2 x i64>* %5534, align 8, !alias.scope !184, !noalias !181
  %5535 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5524, i64 -2
  %5536 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5535, i64 -1
  %5537 = bitcast %"class.v8::internal::compiler::Node"** %5536 to <2 x i64>*
  store <2 x i64> %5532, <2 x i64>* %5537, align 8, !alias.scope !184, !noalias !181
  %5538 = add i64 %5504, 8
  %5539 = add i64 %5505, -2
  %5540 = icmp eq i64 %5539, 0
  br i1 %5540, label %5541, label %5503, !llvm.loop !186

5541:                                             ; preds = %5503, %5486
  %5542 = phi i64 [ 0, %5486 ], [ %5538, %5503 ]
  %5543 = icmp eq i64 %5495, 0
  br i1 %5543, label %5563, label %5544

5544:                                             ; preds = %5541
  %5545 = sub i64 0, %5542
  %5546 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5455, i64 -1
  %5547 = sub i64 0, %5542
  %5548 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5464, i64 -1
  %5549 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5546, i64 %5545
  %5550 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5548, i64 %5547
  %5551 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5550, i64 -1
  %5552 = bitcast %"class.v8::internal::compiler::Node"** %5551 to <2 x i64>*
  %5553 = load <2 x i64>, <2 x i64>* %5552, align 8, !alias.scope !181
  %5554 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5550, i64 -2
  %5555 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5554, i64 -1
  %5556 = bitcast %"class.v8::internal::compiler::Node"** %5555 to <2 x i64>*
  %5557 = load <2 x i64>, <2 x i64>* %5556, align 8, !alias.scope !181
  %5558 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5549, i64 -1
  %5559 = bitcast %"class.v8::internal::compiler::Node"** %5558 to <2 x i64>*
  store <2 x i64> %5553, <2 x i64>* %5559, align 8, !alias.scope !184, !noalias !181
  %5560 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5549, i64 -2
  %5561 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5560, i64 -1
  %5562 = bitcast %"class.v8::internal::compiler::Node"** %5561 to <2 x i64>*
  store <2 x i64> %5557, <2 x i64>* %5562, align 8, !alias.scope !184, !noalias !181
  br label %5563

5563:                                             ; preds = %5541, %5544
  %5564 = icmp eq i64 %5471, %5487
  br i1 %5564, label %5635, label %5565

5565:                                             ; preds = %5563, %5473, %5466
  %5566 = phi %"class.v8::internal::compiler::Node"** [ %5455, %5473 ], [ %5455, %5466 ], [ %5489, %5563 ]
  %5567 = phi %"class.v8::internal::compiler::Node"** [ %5464, %5473 ], [ %5464, %5466 ], [ %5491, %5563 ]
  %5568 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5567, i64 -1
  %5569 = ptrtoint %"class.v8::internal::compiler::Node"** %5568 to i64
  %5570 = sub i64 %5569, %5463
  %5571 = lshr i64 %5570, 3
  %5572 = add nuw nsw i64 %5571, 1
  %5573 = and i64 %5572, 7
  %5574 = icmp eq i64 %5573, 0
  br i1 %5574, label %5586, label %5575

5575:                                             ; preds = %5565, %5575
  %5576 = phi %"class.v8::internal::compiler::Node"** [ %5579, %5575 ], [ %5566, %5565 ]
  %5577 = phi %"class.v8::internal::compiler::Node"** [ %5580, %5575 ], [ %5567, %5565 ]
  %5578 = phi i64 [ %5584, %5575 ], [ %5573, %5565 ]
  %5579 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5576, i64 -1
  %5580 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5577, i64 -1
  %5581 = bitcast %"class.v8::internal::compiler::Node"** %5580 to i64*
  %5582 = load i64, i64* %5581, align 8
  %5583 = bitcast %"class.v8::internal::compiler::Node"** %5579 to i64*
  store i64 %5582, i64* %5583, align 8
  %5584 = add i64 %5578, -1
  %5585 = icmp eq i64 %5584, 0
  br i1 %5585, label %5586, label %5575, !llvm.loop !187

5586:                                             ; preds = %5575, %5565
  %5587 = phi %"class.v8::internal::compiler::Node"** [ undef, %5565 ], [ %5579, %5575 ]
  %5588 = phi %"class.v8::internal::compiler::Node"** [ %5566, %5565 ], [ %5579, %5575 ]
  %5589 = phi %"class.v8::internal::compiler::Node"** [ %5567, %5565 ], [ %5580, %5575 ]
  %5590 = icmp ult i64 %5570, 56
  br i1 %5590, label %5635, label %5591

5591:                                             ; preds = %5586, %5591
  %5592 = phi %"class.v8::internal::compiler::Node"** [ %5629, %5591 ], [ %5588, %5586 ]
  %5593 = phi %"class.v8::internal::compiler::Node"** [ %5630, %5591 ], [ %5589, %5586 ]
  %5594 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -1
  %5595 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -1
  %5596 = bitcast %"class.v8::internal::compiler::Node"** %5595 to i64*
  %5597 = load i64, i64* %5596, align 8
  %5598 = bitcast %"class.v8::internal::compiler::Node"** %5594 to i64*
  store i64 %5597, i64* %5598, align 8
  %5599 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -2
  %5600 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -2
  %5601 = bitcast %"class.v8::internal::compiler::Node"** %5600 to i64*
  %5602 = load i64, i64* %5601, align 8
  %5603 = bitcast %"class.v8::internal::compiler::Node"** %5599 to i64*
  store i64 %5602, i64* %5603, align 8
  %5604 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -3
  %5605 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -3
  %5606 = bitcast %"class.v8::internal::compiler::Node"** %5605 to i64*
  %5607 = load i64, i64* %5606, align 8
  %5608 = bitcast %"class.v8::internal::compiler::Node"** %5604 to i64*
  store i64 %5607, i64* %5608, align 8
  %5609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -4
  %5610 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -4
  %5611 = bitcast %"class.v8::internal::compiler::Node"** %5610 to i64*
  %5612 = load i64, i64* %5611, align 8
  %5613 = bitcast %"class.v8::internal::compiler::Node"** %5609 to i64*
  store i64 %5612, i64* %5613, align 8
  %5614 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -5
  %5615 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -5
  %5616 = bitcast %"class.v8::internal::compiler::Node"** %5615 to i64*
  %5617 = load i64, i64* %5616, align 8
  %5618 = bitcast %"class.v8::internal::compiler::Node"** %5614 to i64*
  store i64 %5617, i64* %5618, align 8
  %5619 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -6
  %5620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -6
  %5621 = bitcast %"class.v8::internal::compiler::Node"** %5620 to i64*
  %5622 = load i64, i64* %5621, align 8
  %5623 = bitcast %"class.v8::internal::compiler::Node"** %5619 to i64*
  store i64 %5622, i64* %5623, align 8
  %5624 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -7
  %5625 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -7
  %5626 = bitcast %"class.v8::internal::compiler::Node"** %5625 to i64*
  %5627 = load i64, i64* %5626, align 8
  %5628 = bitcast %"class.v8::internal::compiler::Node"** %5624 to i64*
  store i64 %5627, i64* %5628, align 8
  %5629 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5592, i64 -8
  %5630 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5593, i64 -8
  %5631 = bitcast %"class.v8::internal::compiler::Node"** %5630 to i64*
  %5632 = load i64, i64* %5631, align 8
  %5633 = bitcast %"class.v8::internal::compiler::Node"** %5629 to i64*
  store i64 %5632, i64* %5633, align 8
  %5634 = icmp eq %"class.v8::internal::compiler::Node"** %5630, %5462
  br i1 %5634, label %5635, label %5591, !llvm.loop !188

5635:                                             ; preds = %5586, %5591, %5563, %5451
  %5636 = phi %"class.v8::internal::compiler::Node"** [ %5455, %5451 ], [ %5489, %5563 ], [ %5587, %5586 ], [ %5629, %5591 ]
  %5637 = ptrtoint %"class.v8::internal::compiler::Node"** %5636 to i64
  store i64 %5637, i64* %5413, align 8
  store i64 %5460, i64* %5412, align 8
  store i64 %5457, i64* %5422, align 8
  br label %5638

5638:                                             ; preds = %5635, %5405, %5393
  %5639 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 27
  %5640 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5639, align 8
  %5641 = icmp eq %"class.v8::internal::compiler::Node"* %5640, null
  %5642 = ptrtoint %"class.v8::internal::compiler::Node"* %5640 to i64
  br i1 %5641, label %5883, label %5643

5643:                                             ; preds = %5638
  %5644 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %5645 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5644, align 8
  %5646 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5647 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5646, align 8
  %5648 = icmp eq %"class.v8::internal::compiler::Node"** %5645, %5647
  %5649 = ptrtoint %"class.v8::internal::compiler::Node"** %5647 to i64
  br i1 %5648, label %5655, label %5650

5650:                                             ; preds = %5643
  %5651 = bitcast %"class.v8::internal::compiler::Node"** %5645 to i64*
  store i64 %5642, i64* %5651, align 8
  %5652 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5645, i64 1
  %5653 = ptrtoint %"class.v8::internal::compiler::Node"** %5652 to i64
  %5654 = bitcast %"class.v8::internal::compiler::Node"*** %5644 to i64*
  store i64 %5653, i64* %5654, align 8
  br label %5883

5655:                                             ; preds = %5643
  %5656 = ptrtoint %"class.v8::internal::compiler::Node"** %5645 to i64
  %5657 = bitcast %"class.v8::internal::compiler::Node"*** %5644 to i64*
  %5658 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %5659 = load i64, i64* %5658, align 8
  %5660 = sub i64 %5656, %5659
  %5661 = ashr exact i64 %5660, 3
  %5662 = add nsw i64 %5661, 1
  %5663 = icmp ugt i64 %5662, 268435455
  br i1 %5663, label %5664, label %5666

5664:                                             ; preds = %5655
  %5665 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %5665) #6
  unreachable

5666:                                             ; preds = %5655
  %5667 = bitcast %"class.v8::internal::compiler::Node"*** %5646 to i64*
  %5668 = sub i64 %5649, %5659
  %5669 = ashr exact i64 %5668, 3
  %5670 = icmp ult i64 %5669, 134217727
  br i1 %5670, label %5671, label %5676

5671:                                             ; preds = %5666
  %5672 = ashr exact i64 %5668, 2
  %5673 = icmp ult i64 %5672, %5662
  %5674 = select i1 %5673, i64 %5662, i64 %5672
  %5675 = icmp eq i64 %5674, 0
  br i1 %5675, label %5696, label %5676

5676:                                             ; preds = %5671, %5666
  %5677 = phi i64 [ %5674, %5671 ], [ 268435455, %5666 ]
  %5678 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %5679 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5678, align 8
  %5680 = shl i64 %5677, 3
  %5681 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5679, i64 0, i32 2
  %5682 = load i64, i64* %5681, align 8
  %5683 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5679, i64 0, i32 3
  %5684 = load i64, i64* %5683, align 8
  %5685 = sub i64 %5684, %5682
  %5686 = icmp ugt i64 %5680, %5685
  br i1 %5686, label %5687, label %5689, !prof !2

5687:                                             ; preds = %5676
  %5688 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5679, i64 %5680) #5
  br label %5691

5689:                                             ; preds = %5676
  %5690 = add i64 %5682, %5680
  store i64 %5690, i64* %5681, align 8
  br label %5691

5691:                                             ; preds = %5689, %5687
  %5692 = phi i64 [ %5688, %5687 ], [ %5682, %5689 ]
  %5693 = inttoptr i64 %5692 to %"class.v8::internal::compiler::Node"**
  %5694 = bitcast %"class.v8::internal::compiler::Node"** %5639 to i64*
  %5695 = load i64, i64* %5694, align 8
  br label %5696

5696:                                             ; preds = %5671, %5691
  %5697 = phi i64 [ %5695, %5691 ], [ %5642, %5671 ]
  %5698 = phi i64 [ %5677, %5691 ], [ 0, %5671 ]
  %5699 = phi %"class.v8::internal::compiler::Node"** [ %5693, %5691 ], [ null, %5671 ]
  %5700 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5699, i64 %5661
  %5701 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5699, i64 %5698
  %5702 = ptrtoint %"class.v8::internal::compiler::Node"** %5701 to i64
  %5703 = bitcast %"class.v8::internal::compiler::Node"** %5700 to i64*
  store i64 %5697, i64* %5703, align 8
  %5704 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5700, i64 1
  %5705 = ptrtoint %"class.v8::internal::compiler::Node"** %5704 to i64
  %5706 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %5707 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5706, align 8
  %5708 = ptrtoint %"class.v8::internal::compiler::Node"** %5707 to i64
  %5709 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5644, align 8
  %5710 = icmp eq %"class.v8::internal::compiler::Node"** %5709, %5707
  br i1 %5710, label %5880, label %5711

5711:                                             ; preds = %5696
  %5712 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 -1
  %5713 = ptrtoint %"class.v8::internal::compiler::Node"** %5712 to i64
  %5714 = sub i64 %5713, %5708
  %5715 = lshr i64 %5714, 3
  %5716 = add nuw nsw i64 %5715, 1
  %5717 = icmp ult i64 %5716, 4
  br i1 %5717, label %5810, label %5718

5718:                                             ; preds = %5711
  %5719 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 -1
  %5720 = ptrtoint %"class.v8::internal::compiler::Node"** %5719 to i64
  %5721 = sub i64 %5720, %5708
  %5722 = lshr i64 %5721, 3
  %5723 = xor i64 %5722, -1
  %5724 = add nsw i64 %5661, %5723
  %5725 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5699, i64 %5724
  %5726 = xor i64 %5722, -1
  %5727 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 %5726
  %5728 = icmp ult %"class.v8::internal::compiler::Node"** %5725, %5709
  %5729 = icmp ult %"class.v8::internal::compiler::Node"** %5727, %5700
  %5730 = and i1 %5728, %5729
  br i1 %5730, label %5810, label %5731

5731:                                             ; preds = %5718
  %5732 = and i64 %5716, 4611686018427387900
  %5733 = sub nsw i64 0, %5732
  %5734 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5700, i64 %5733
  %5735 = sub nsw i64 0, %5732
  %5736 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 %5735
  %5737 = add nsw i64 %5732, -4
  %5738 = lshr exact i64 %5737, 2
  %5739 = add nuw nsw i64 %5738, 1
  %5740 = and i64 %5739, 1
  %5741 = icmp eq i64 %5737, 0
  br i1 %5741, label %5786, label %5742

5742:                                             ; preds = %5731
  %5743 = sub nuw nsw i64 %5739, %5740
  %5744 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5700, i64 -1
  %5745 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 -1
  %5746 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5700, i64 -1
  %5747 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 -1
  br label %5748

5748:                                             ; preds = %5748, %5742
  %5749 = phi i64 [ 0, %5742 ], [ %5783, %5748 ]
  %5750 = phi i64 [ %5743, %5742 ], [ %5784, %5748 ]
  %5751 = sub i64 0, %5749
  %5752 = sub i64 0, %5749
  %5753 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5744, i64 %5751
  %5754 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5745, i64 %5752
  %5755 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5754, i64 -1
  %5756 = bitcast %"class.v8::internal::compiler::Node"** %5755 to <2 x i64>*
  %5757 = load <2 x i64>, <2 x i64>* %5756, align 8, !alias.scope !189
  %5758 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5754, i64 -2
  %5759 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5758, i64 -1
  %5760 = bitcast %"class.v8::internal::compiler::Node"** %5759 to <2 x i64>*
  %5761 = load <2 x i64>, <2 x i64>* %5760, align 8, !alias.scope !189
  %5762 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5753, i64 -1
  %5763 = bitcast %"class.v8::internal::compiler::Node"** %5762 to <2 x i64>*
  store <2 x i64> %5757, <2 x i64>* %5763, align 8, !alias.scope !192, !noalias !189
  %5764 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5753, i64 -2
  %5765 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5764, i64 -1
  %5766 = bitcast %"class.v8::internal::compiler::Node"** %5765 to <2 x i64>*
  store <2 x i64> %5761, <2 x i64>* %5766, align 8, !alias.scope !192, !noalias !189
  %5767 = sub nuw nsw i64 -4, %5749
  %5768 = sub nuw nsw i64 -4, %5749
  %5769 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5746, i64 %5767
  %5770 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5747, i64 %5768
  %5771 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5770, i64 -1
  %5772 = bitcast %"class.v8::internal::compiler::Node"** %5771 to <2 x i64>*
  %5773 = load <2 x i64>, <2 x i64>* %5772, align 8, !alias.scope !189
  %5774 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5770, i64 -2
  %5775 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5774, i64 -1
  %5776 = bitcast %"class.v8::internal::compiler::Node"** %5775 to <2 x i64>*
  %5777 = load <2 x i64>, <2 x i64>* %5776, align 8, !alias.scope !189
  %5778 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5769, i64 -1
  %5779 = bitcast %"class.v8::internal::compiler::Node"** %5778 to <2 x i64>*
  store <2 x i64> %5773, <2 x i64>* %5779, align 8, !alias.scope !192, !noalias !189
  %5780 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5769, i64 -2
  %5781 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5780, i64 -1
  %5782 = bitcast %"class.v8::internal::compiler::Node"** %5781 to <2 x i64>*
  store <2 x i64> %5777, <2 x i64>* %5782, align 8, !alias.scope !192, !noalias !189
  %5783 = add i64 %5749, 8
  %5784 = add i64 %5750, -2
  %5785 = icmp eq i64 %5784, 0
  br i1 %5785, label %5786, label %5748, !llvm.loop !194

5786:                                             ; preds = %5748, %5731
  %5787 = phi i64 [ 0, %5731 ], [ %5783, %5748 ]
  %5788 = icmp eq i64 %5740, 0
  br i1 %5788, label %5808, label %5789

5789:                                             ; preds = %5786
  %5790 = sub i64 0, %5787
  %5791 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5700, i64 -1
  %5792 = sub i64 0, %5787
  %5793 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5709, i64 -1
  %5794 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5791, i64 %5790
  %5795 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5793, i64 %5792
  %5796 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5795, i64 -1
  %5797 = bitcast %"class.v8::internal::compiler::Node"** %5796 to <2 x i64>*
  %5798 = load <2 x i64>, <2 x i64>* %5797, align 8, !alias.scope !189
  %5799 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5795, i64 -2
  %5800 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5799, i64 -1
  %5801 = bitcast %"class.v8::internal::compiler::Node"** %5800 to <2 x i64>*
  %5802 = load <2 x i64>, <2 x i64>* %5801, align 8, !alias.scope !189
  %5803 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5794, i64 -1
  %5804 = bitcast %"class.v8::internal::compiler::Node"** %5803 to <2 x i64>*
  store <2 x i64> %5798, <2 x i64>* %5804, align 8, !alias.scope !192, !noalias !189
  %5805 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5794, i64 -2
  %5806 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5805, i64 -1
  %5807 = bitcast %"class.v8::internal::compiler::Node"** %5806 to <2 x i64>*
  store <2 x i64> %5802, <2 x i64>* %5807, align 8, !alias.scope !192, !noalias !189
  br label %5808

5808:                                             ; preds = %5786, %5789
  %5809 = icmp eq i64 %5716, %5732
  br i1 %5809, label %5880, label %5810

5810:                                             ; preds = %5808, %5718, %5711
  %5811 = phi %"class.v8::internal::compiler::Node"** [ %5700, %5718 ], [ %5700, %5711 ], [ %5734, %5808 ]
  %5812 = phi %"class.v8::internal::compiler::Node"** [ %5709, %5718 ], [ %5709, %5711 ], [ %5736, %5808 ]
  %5813 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5812, i64 -1
  %5814 = ptrtoint %"class.v8::internal::compiler::Node"** %5813 to i64
  %5815 = sub i64 %5814, %5708
  %5816 = lshr i64 %5815, 3
  %5817 = add nuw nsw i64 %5816, 1
  %5818 = and i64 %5817, 7
  %5819 = icmp eq i64 %5818, 0
  br i1 %5819, label %5831, label %5820

5820:                                             ; preds = %5810, %5820
  %5821 = phi %"class.v8::internal::compiler::Node"** [ %5824, %5820 ], [ %5811, %5810 ]
  %5822 = phi %"class.v8::internal::compiler::Node"** [ %5825, %5820 ], [ %5812, %5810 ]
  %5823 = phi i64 [ %5829, %5820 ], [ %5818, %5810 ]
  %5824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5821, i64 -1
  %5825 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5822, i64 -1
  %5826 = bitcast %"class.v8::internal::compiler::Node"** %5825 to i64*
  %5827 = load i64, i64* %5826, align 8
  %5828 = bitcast %"class.v8::internal::compiler::Node"** %5824 to i64*
  store i64 %5827, i64* %5828, align 8
  %5829 = add i64 %5823, -1
  %5830 = icmp eq i64 %5829, 0
  br i1 %5830, label %5831, label %5820, !llvm.loop !195

5831:                                             ; preds = %5820, %5810
  %5832 = phi %"class.v8::internal::compiler::Node"** [ undef, %5810 ], [ %5824, %5820 ]
  %5833 = phi %"class.v8::internal::compiler::Node"** [ %5811, %5810 ], [ %5824, %5820 ]
  %5834 = phi %"class.v8::internal::compiler::Node"** [ %5812, %5810 ], [ %5825, %5820 ]
  %5835 = icmp ult i64 %5815, 56
  br i1 %5835, label %5880, label %5836

5836:                                             ; preds = %5831, %5836
  %5837 = phi %"class.v8::internal::compiler::Node"** [ %5874, %5836 ], [ %5833, %5831 ]
  %5838 = phi %"class.v8::internal::compiler::Node"** [ %5875, %5836 ], [ %5834, %5831 ]
  %5839 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -1
  %5840 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -1
  %5841 = bitcast %"class.v8::internal::compiler::Node"** %5840 to i64*
  %5842 = load i64, i64* %5841, align 8
  %5843 = bitcast %"class.v8::internal::compiler::Node"** %5839 to i64*
  store i64 %5842, i64* %5843, align 8
  %5844 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -2
  %5845 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -2
  %5846 = bitcast %"class.v8::internal::compiler::Node"** %5845 to i64*
  %5847 = load i64, i64* %5846, align 8
  %5848 = bitcast %"class.v8::internal::compiler::Node"** %5844 to i64*
  store i64 %5847, i64* %5848, align 8
  %5849 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -3
  %5850 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -3
  %5851 = bitcast %"class.v8::internal::compiler::Node"** %5850 to i64*
  %5852 = load i64, i64* %5851, align 8
  %5853 = bitcast %"class.v8::internal::compiler::Node"** %5849 to i64*
  store i64 %5852, i64* %5853, align 8
  %5854 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -4
  %5855 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -4
  %5856 = bitcast %"class.v8::internal::compiler::Node"** %5855 to i64*
  %5857 = load i64, i64* %5856, align 8
  %5858 = bitcast %"class.v8::internal::compiler::Node"** %5854 to i64*
  store i64 %5857, i64* %5858, align 8
  %5859 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -5
  %5860 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -5
  %5861 = bitcast %"class.v8::internal::compiler::Node"** %5860 to i64*
  %5862 = load i64, i64* %5861, align 8
  %5863 = bitcast %"class.v8::internal::compiler::Node"** %5859 to i64*
  store i64 %5862, i64* %5863, align 8
  %5864 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -6
  %5865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -6
  %5866 = bitcast %"class.v8::internal::compiler::Node"** %5865 to i64*
  %5867 = load i64, i64* %5866, align 8
  %5868 = bitcast %"class.v8::internal::compiler::Node"** %5864 to i64*
  store i64 %5867, i64* %5868, align 8
  %5869 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -7
  %5870 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -7
  %5871 = bitcast %"class.v8::internal::compiler::Node"** %5870 to i64*
  %5872 = load i64, i64* %5871, align 8
  %5873 = bitcast %"class.v8::internal::compiler::Node"** %5869 to i64*
  store i64 %5872, i64* %5873, align 8
  %5874 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5837, i64 -8
  %5875 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5838, i64 -8
  %5876 = bitcast %"class.v8::internal::compiler::Node"** %5875 to i64*
  %5877 = load i64, i64* %5876, align 8
  %5878 = bitcast %"class.v8::internal::compiler::Node"** %5874 to i64*
  store i64 %5877, i64* %5878, align 8
  %5879 = icmp eq %"class.v8::internal::compiler::Node"** %5875, %5707
  br i1 %5879, label %5880, label %5836, !llvm.loop !196

5880:                                             ; preds = %5831, %5836, %5808, %5696
  %5881 = phi %"class.v8::internal::compiler::Node"** [ %5700, %5696 ], [ %5734, %5808 ], [ %5832, %5831 ], [ %5874, %5836 ]
  %5882 = ptrtoint %"class.v8::internal::compiler::Node"** %5881 to i64
  store i64 %5882, i64* %5658, align 8
  store i64 %5705, i64* %5657, align 8
  store i64 %5702, i64* %5667, align 8
  br label %5883

5883:                                             ; preds = %5880, %5650, %5638
  %5884 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 28
  %5885 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5884, align 8
  %5886 = icmp eq %"class.v8::internal::compiler::Node"* %5885, null
  %5887 = ptrtoint %"class.v8::internal::compiler::Node"* %5885 to i64
  br i1 %5886, label %6128, label %5888

5888:                                             ; preds = %5883
  %5889 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %5890 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5889, align 8
  %5891 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5892 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5891, align 8
  %5893 = icmp eq %"class.v8::internal::compiler::Node"** %5890, %5892
  %5894 = ptrtoint %"class.v8::internal::compiler::Node"** %5892 to i64
  br i1 %5893, label %5900, label %5895

5895:                                             ; preds = %5888
  %5896 = bitcast %"class.v8::internal::compiler::Node"** %5890 to i64*
  store i64 %5887, i64* %5896, align 8
  %5897 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5890, i64 1
  %5898 = ptrtoint %"class.v8::internal::compiler::Node"** %5897 to i64
  %5899 = bitcast %"class.v8::internal::compiler::Node"*** %5889 to i64*
  store i64 %5898, i64* %5899, align 8
  br label %6128

5900:                                             ; preds = %5888
  %5901 = ptrtoint %"class.v8::internal::compiler::Node"** %5890 to i64
  %5902 = bitcast %"class.v8::internal::compiler::Node"*** %5889 to i64*
  %5903 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %5904 = load i64, i64* %5903, align 8
  %5905 = sub i64 %5901, %5904
  %5906 = ashr exact i64 %5905, 3
  %5907 = add nsw i64 %5906, 1
  %5908 = icmp ugt i64 %5907, 268435455
  br i1 %5908, label %5909, label %5911

5909:                                             ; preds = %5900
  %5910 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %5910) #6
  unreachable

5911:                                             ; preds = %5900
  %5912 = bitcast %"class.v8::internal::compiler::Node"*** %5891 to i64*
  %5913 = sub i64 %5894, %5904
  %5914 = ashr exact i64 %5913, 3
  %5915 = icmp ult i64 %5914, 134217727
  br i1 %5915, label %5916, label %5921

5916:                                             ; preds = %5911
  %5917 = ashr exact i64 %5913, 2
  %5918 = icmp ult i64 %5917, %5907
  %5919 = select i1 %5918, i64 %5907, i64 %5917
  %5920 = icmp eq i64 %5919, 0
  br i1 %5920, label %5941, label %5921

5921:                                             ; preds = %5916, %5911
  %5922 = phi i64 [ %5919, %5916 ], [ 268435455, %5911 ]
  %5923 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %5924 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5923, align 8
  %5925 = shl i64 %5922, 3
  %5926 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5924, i64 0, i32 2
  %5927 = load i64, i64* %5926, align 8
  %5928 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %5924, i64 0, i32 3
  %5929 = load i64, i64* %5928, align 8
  %5930 = sub i64 %5929, %5927
  %5931 = icmp ugt i64 %5925, %5930
  br i1 %5931, label %5932, label %5934, !prof !2

5932:                                             ; preds = %5921
  %5933 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %5924, i64 %5925) #5
  br label %5936

5934:                                             ; preds = %5921
  %5935 = add i64 %5927, %5925
  store i64 %5935, i64* %5926, align 8
  br label %5936

5936:                                             ; preds = %5934, %5932
  %5937 = phi i64 [ %5933, %5932 ], [ %5927, %5934 ]
  %5938 = inttoptr i64 %5937 to %"class.v8::internal::compiler::Node"**
  %5939 = bitcast %"class.v8::internal::compiler::Node"** %5884 to i64*
  %5940 = load i64, i64* %5939, align 8
  br label %5941

5941:                                             ; preds = %5916, %5936
  %5942 = phi i64 [ %5940, %5936 ], [ %5887, %5916 ]
  %5943 = phi i64 [ %5922, %5936 ], [ 0, %5916 ]
  %5944 = phi %"class.v8::internal::compiler::Node"** [ %5938, %5936 ], [ null, %5916 ]
  %5945 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5944, i64 %5906
  %5946 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5944, i64 %5943
  %5947 = ptrtoint %"class.v8::internal::compiler::Node"** %5946 to i64
  %5948 = bitcast %"class.v8::internal::compiler::Node"** %5945 to i64*
  store i64 %5942, i64* %5948, align 8
  %5949 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5945, i64 1
  %5950 = ptrtoint %"class.v8::internal::compiler::Node"** %5949 to i64
  %5951 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %5952 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5951, align 8
  %5953 = ptrtoint %"class.v8::internal::compiler::Node"** %5952 to i64
  %5954 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5889, align 8
  %5955 = icmp eq %"class.v8::internal::compiler::Node"** %5954, %5952
  br i1 %5955, label %6125, label %5956

5956:                                             ; preds = %5941
  %5957 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 -1
  %5958 = ptrtoint %"class.v8::internal::compiler::Node"** %5957 to i64
  %5959 = sub i64 %5958, %5953
  %5960 = lshr i64 %5959, 3
  %5961 = add nuw nsw i64 %5960, 1
  %5962 = icmp ult i64 %5961, 4
  br i1 %5962, label %6055, label %5963

5963:                                             ; preds = %5956
  %5964 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 -1
  %5965 = ptrtoint %"class.v8::internal::compiler::Node"** %5964 to i64
  %5966 = sub i64 %5965, %5953
  %5967 = lshr i64 %5966, 3
  %5968 = xor i64 %5967, -1
  %5969 = add nsw i64 %5906, %5968
  %5970 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5944, i64 %5969
  %5971 = xor i64 %5967, -1
  %5972 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 %5971
  %5973 = icmp ult %"class.v8::internal::compiler::Node"** %5970, %5954
  %5974 = icmp ult %"class.v8::internal::compiler::Node"** %5972, %5945
  %5975 = and i1 %5973, %5974
  br i1 %5975, label %6055, label %5976

5976:                                             ; preds = %5963
  %5977 = and i64 %5961, 4611686018427387900
  %5978 = sub nsw i64 0, %5977
  %5979 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5945, i64 %5978
  %5980 = sub nsw i64 0, %5977
  %5981 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 %5980
  %5982 = add nsw i64 %5977, -4
  %5983 = lshr exact i64 %5982, 2
  %5984 = add nuw nsw i64 %5983, 1
  %5985 = and i64 %5984, 1
  %5986 = icmp eq i64 %5982, 0
  br i1 %5986, label %6031, label %5987

5987:                                             ; preds = %5976
  %5988 = sub nuw nsw i64 %5984, %5985
  %5989 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5945, i64 -1
  %5990 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 -1
  %5991 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5945, i64 -1
  %5992 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 -1
  br label %5993

5993:                                             ; preds = %5993, %5987
  %5994 = phi i64 [ 0, %5987 ], [ %6028, %5993 ]
  %5995 = phi i64 [ %5988, %5987 ], [ %6029, %5993 ]
  %5996 = sub i64 0, %5994
  %5997 = sub i64 0, %5994
  %5998 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5989, i64 %5996
  %5999 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5990, i64 %5997
  %6000 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5999, i64 -1
  %6001 = bitcast %"class.v8::internal::compiler::Node"** %6000 to <2 x i64>*
  %6002 = load <2 x i64>, <2 x i64>* %6001, align 8, !alias.scope !197
  %6003 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5999, i64 -2
  %6004 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6003, i64 -1
  %6005 = bitcast %"class.v8::internal::compiler::Node"** %6004 to <2 x i64>*
  %6006 = load <2 x i64>, <2 x i64>* %6005, align 8, !alias.scope !197
  %6007 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5998, i64 -1
  %6008 = bitcast %"class.v8::internal::compiler::Node"** %6007 to <2 x i64>*
  store <2 x i64> %6002, <2 x i64>* %6008, align 8, !alias.scope !200, !noalias !197
  %6009 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5998, i64 -2
  %6010 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6009, i64 -1
  %6011 = bitcast %"class.v8::internal::compiler::Node"** %6010 to <2 x i64>*
  store <2 x i64> %6006, <2 x i64>* %6011, align 8, !alias.scope !200, !noalias !197
  %6012 = sub nuw nsw i64 -4, %5994
  %6013 = sub nuw nsw i64 -4, %5994
  %6014 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5991, i64 %6012
  %6015 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5992, i64 %6013
  %6016 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6015, i64 -1
  %6017 = bitcast %"class.v8::internal::compiler::Node"** %6016 to <2 x i64>*
  %6018 = load <2 x i64>, <2 x i64>* %6017, align 8, !alias.scope !197
  %6019 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6015, i64 -2
  %6020 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6019, i64 -1
  %6021 = bitcast %"class.v8::internal::compiler::Node"** %6020 to <2 x i64>*
  %6022 = load <2 x i64>, <2 x i64>* %6021, align 8, !alias.scope !197
  %6023 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6014, i64 -1
  %6024 = bitcast %"class.v8::internal::compiler::Node"** %6023 to <2 x i64>*
  store <2 x i64> %6018, <2 x i64>* %6024, align 8, !alias.scope !200, !noalias !197
  %6025 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6014, i64 -2
  %6026 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6025, i64 -1
  %6027 = bitcast %"class.v8::internal::compiler::Node"** %6026 to <2 x i64>*
  store <2 x i64> %6022, <2 x i64>* %6027, align 8, !alias.scope !200, !noalias !197
  %6028 = add i64 %5994, 8
  %6029 = add i64 %5995, -2
  %6030 = icmp eq i64 %6029, 0
  br i1 %6030, label %6031, label %5993, !llvm.loop !202

6031:                                             ; preds = %5993, %5976
  %6032 = phi i64 [ 0, %5976 ], [ %6028, %5993 ]
  %6033 = icmp eq i64 %5985, 0
  br i1 %6033, label %6053, label %6034

6034:                                             ; preds = %6031
  %6035 = sub i64 0, %6032
  %6036 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5945, i64 -1
  %6037 = sub i64 0, %6032
  %6038 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5954, i64 -1
  %6039 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6036, i64 %6035
  %6040 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6038, i64 %6037
  %6041 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6040, i64 -1
  %6042 = bitcast %"class.v8::internal::compiler::Node"** %6041 to <2 x i64>*
  %6043 = load <2 x i64>, <2 x i64>* %6042, align 8, !alias.scope !197
  %6044 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6040, i64 -2
  %6045 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6044, i64 -1
  %6046 = bitcast %"class.v8::internal::compiler::Node"** %6045 to <2 x i64>*
  %6047 = load <2 x i64>, <2 x i64>* %6046, align 8, !alias.scope !197
  %6048 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6039, i64 -1
  %6049 = bitcast %"class.v8::internal::compiler::Node"** %6048 to <2 x i64>*
  store <2 x i64> %6043, <2 x i64>* %6049, align 8, !alias.scope !200, !noalias !197
  %6050 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6039, i64 -2
  %6051 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6050, i64 -1
  %6052 = bitcast %"class.v8::internal::compiler::Node"** %6051 to <2 x i64>*
  store <2 x i64> %6047, <2 x i64>* %6052, align 8, !alias.scope !200, !noalias !197
  br label %6053

6053:                                             ; preds = %6031, %6034
  %6054 = icmp eq i64 %5961, %5977
  br i1 %6054, label %6125, label %6055

6055:                                             ; preds = %6053, %5963, %5956
  %6056 = phi %"class.v8::internal::compiler::Node"** [ %5945, %5963 ], [ %5945, %5956 ], [ %5979, %6053 ]
  %6057 = phi %"class.v8::internal::compiler::Node"** [ %5954, %5963 ], [ %5954, %5956 ], [ %5981, %6053 ]
  %6058 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6057, i64 -1
  %6059 = ptrtoint %"class.v8::internal::compiler::Node"** %6058 to i64
  %6060 = sub i64 %6059, %5953
  %6061 = lshr i64 %6060, 3
  %6062 = add nuw nsw i64 %6061, 1
  %6063 = and i64 %6062, 7
  %6064 = icmp eq i64 %6063, 0
  br i1 %6064, label %6076, label %6065

6065:                                             ; preds = %6055, %6065
  %6066 = phi %"class.v8::internal::compiler::Node"** [ %6069, %6065 ], [ %6056, %6055 ]
  %6067 = phi %"class.v8::internal::compiler::Node"** [ %6070, %6065 ], [ %6057, %6055 ]
  %6068 = phi i64 [ %6074, %6065 ], [ %6063, %6055 ]
  %6069 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6066, i64 -1
  %6070 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6067, i64 -1
  %6071 = bitcast %"class.v8::internal::compiler::Node"** %6070 to i64*
  %6072 = load i64, i64* %6071, align 8
  %6073 = bitcast %"class.v8::internal::compiler::Node"** %6069 to i64*
  store i64 %6072, i64* %6073, align 8
  %6074 = add i64 %6068, -1
  %6075 = icmp eq i64 %6074, 0
  br i1 %6075, label %6076, label %6065, !llvm.loop !203

6076:                                             ; preds = %6065, %6055
  %6077 = phi %"class.v8::internal::compiler::Node"** [ undef, %6055 ], [ %6069, %6065 ]
  %6078 = phi %"class.v8::internal::compiler::Node"** [ %6056, %6055 ], [ %6069, %6065 ]
  %6079 = phi %"class.v8::internal::compiler::Node"** [ %6057, %6055 ], [ %6070, %6065 ]
  %6080 = icmp ult i64 %6060, 56
  br i1 %6080, label %6125, label %6081

6081:                                             ; preds = %6076, %6081
  %6082 = phi %"class.v8::internal::compiler::Node"** [ %6119, %6081 ], [ %6078, %6076 ]
  %6083 = phi %"class.v8::internal::compiler::Node"** [ %6120, %6081 ], [ %6079, %6076 ]
  %6084 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -1
  %6085 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -1
  %6086 = bitcast %"class.v8::internal::compiler::Node"** %6085 to i64*
  %6087 = load i64, i64* %6086, align 8
  %6088 = bitcast %"class.v8::internal::compiler::Node"** %6084 to i64*
  store i64 %6087, i64* %6088, align 8
  %6089 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -2
  %6090 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -2
  %6091 = bitcast %"class.v8::internal::compiler::Node"** %6090 to i64*
  %6092 = load i64, i64* %6091, align 8
  %6093 = bitcast %"class.v8::internal::compiler::Node"** %6089 to i64*
  store i64 %6092, i64* %6093, align 8
  %6094 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -3
  %6095 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -3
  %6096 = bitcast %"class.v8::internal::compiler::Node"** %6095 to i64*
  %6097 = load i64, i64* %6096, align 8
  %6098 = bitcast %"class.v8::internal::compiler::Node"** %6094 to i64*
  store i64 %6097, i64* %6098, align 8
  %6099 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -4
  %6100 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -4
  %6101 = bitcast %"class.v8::internal::compiler::Node"** %6100 to i64*
  %6102 = load i64, i64* %6101, align 8
  %6103 = bitcast %"class.v8::internal::compiler::Node"** %6099 to i64*
  store i64 %6102, i64* %6103, align 8
  %6104 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -5
  %6105 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -5
  %6106 = bitcast %"class.v8::internal::compiler::Node"** %6105 to i64*
  %6107 = load i64, i64* %6106, align 8
  %6108 = bitcast %"class.v8::internal::compiler::Node"** %6104 to i64*
  store i64 %6107, i64* %6108, align 8
  %6109 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -6
  %6110 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -6
  %6111 = bitcast %"class.v8::internal::compiler::Node"** %6110 to i64*
  %6112 = load i64, i64* %6111, align 8
  %6113 = bitcast %"class.v8::internal::compiler::Node"** %6109 to i64*
  store i64 %6112, i64* %6113, align 8
  %6114 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -7
  %6115 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -7
  %6116 = bitcast %"class.v8::internal::compiler::Node"** %6115 to i64*
  %6117 = load i64, i64* %6116, align 8
  %6118 = bitcast %"class.v8::internal::compiler::Node"** %6114 to i64*
  store i64 %6117, i64* %6118, align 8
  %6119 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6082, i64 -8
  %6120 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6083, i64 -8
  %6121 = bitcast %"class.v8::internal::compiler::Node"** %6120 to i64*
  %6122 = load i64, i64* %6121, align 8
  %6123 = bitcast %"class.v8::internal::compiler::Node"** %6119 to i64*
  store i64 %6122, i64* %6123, align 8
  %6124 = icmp eq %"class.v8::internal::compiler::Node"** %6120, %5952
  br i1 %6124, label %6125, label %6081, !llvm.loop !204

6125:                                             ; preds = %6076, %6081, %6053, %5941
  %6126 = phi %"class.v8::internal::compiler::Node"** [ %5945, %5941 ], [ %5979, %6053 ], [ %6077, %6076 ], [ %6119, %6081 ]
  %6127 = ptrtoint %"class.v8::internal::compiler::Node"** %6126 to i64
  store i64 %6127, i64* %5903, align 8
  store i64 %5950, i64* %5902, align 8
  store i64 %5947, i64* %5912, align 8
  br label %6128

6128:                                             ; preds = %6125, %5895, %5883
  %6129 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 29
  %6130 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6129, align 8
  %6131 = icmp eq %"class.v8::internal::compiler::Node"* %6130, null
  %6132 = ptrtoint %"class.v8::internal::compiler::Node"* %6130 to i64
  br i1 %6131, label %6373, label %6133

6133:                                             ; preds = %6128
  %6134 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %6135 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6134, align 8
  %6136 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6137 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6136, align 8
  %6138 = icmp eq %"class.v8::internal::compiler::Node"** %6135, %6137
  %6139 = ptrtoint %"class.v8::internal::compiler::Node"** %6137 to i64
  br i1 %6138, label %6145, label %6140

6140:                                             ; preds = %6133
  %6141 = bitcast %"class.v8::internal::compiler::Node"** %6135 to i64*
  store i64 %6132, i64* %6141, align 8
  %6142 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6135, i64 1
  %6143 = ptrtoint %"class.v8::internal::compiler::Node"** %6142 to i64
  %6144 = bitcast %"class.v8::internal::compiler::Node"*** %6134 to i64*
  store i64 %6143, i64* %6144, align 8
  br label %6373

6145:                                             ; preds = %6133
  %6146 = ptrtoint %"class.v8::internal::compiler::Node"** %6135 to i64
  %6147 = bitcast %"class.v8::internal::compiler::Node"*** %6134 to i64*
  %6148 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %6149 = load i64, i64* %6148, align 8
  %6150 = sub i64 %6146, %6149
  %6151 = ashr exact i64 %6150, 3
  %6152 = add nsw i64 %6151, 1
  %6153 = icmp ugt i64 %6152, 268435455
  br i1 %6153, label %6154, label %6156

6154:                                             ; preds = %6145
  %6155 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %6155) #6
  unreachable

6156:                                             ; preds = %6145
  %6157 = bitcast %"class.v8::internal::compiler::Node"*** %6136 to i64*
  %6158 = sub i64 %6139, %6149
  %6159 = ashr exact i64 %6158, 3
  %6160 = icmp ult i64 %6159, 134217727
  br i1 %6160, label %6161, label %6166

6161:                                             ; preds = %6156
  %6162 = ashr exact i64 %6158, 2
  %6163 = icmp ult i64 %6162, %6152
  %6164 = select i1 %6163, i64 %6152, i64 %6162
  %6165 = icmp eq i64 %6164, 0
  br i1 %6165, label %6186, label %6166

6166:                                             ; preds = %6161, %6156
  %6167 = phi i64 [ %6164, %6161 ], [ 268435455, %6156 ]
  %6168 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %6169 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6168, align 8
  %6170 = shl i64 %6167, 3
  %6171 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6169, i64 0, i32 2
  %6172 = load i64, i64* %6171, align 8
  %6173 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6169, i64 0, i32 3
  %6174 = load i64, i64* %6173, align 8
  %6175 = sub i64 %6174, %6172
  %6176 = icmp ugt i64 %6170, %6175
  br i1 %6176, label %6177, label %6179, !prof !2

6177:                                             ; preds = %6166
  %6178 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6169, i64 %6170) #5
  br label %6181

6179:                                             ; preds = %6166
  %6180 = add i64 %6172, %6170
  store i64 %6180, i64* %6171, align 8
  br label %6181

6181:                                             ; preds = %6179, %6177
  %6182 = phi i64 [ %6178, %6177 ], [ %6172, %6179 ]
  %6183 = inttoptr i64 %6182 to %"class.v8::internal::compiler::Node"**
  %6184 = bitcast %"class.v8::internal::compiler::Node"** %6129 to i64*
  %6185 = load i64, i64* %6184, align 8
  br label %6186

6186:                                             ; preds = %6161, %6181
  %6187 = phi i64 [ %6185, %6181 ], [ %6132, %6161 ]
  %6188 = phi i64 [ %6167, %6181 ], [ 0, %6161 ]
  %6189 = phi %"class.v8::internal::compiler::Node"** [ %6183, %6181 ], [ null, %6161 ]
  %6190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6189, i64 %6151
  %6191 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6189, i64 %6188
  %6192 = ptrtoint %"class.v8::internal::compiler::Node"** %6191 to i64
  %6193 = bitcast %"class.v8::internal::compiler::Node"** %6190 to i64*
  store i64 %6187, i64* %6193, align 8
  %6194 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6190, i64 1
  %6195 = ptrtoint %"class.v8::internal::compiler::Node"** %6194 to i64
  %6196 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %6197 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6196, align 8
  %6198 = ptrtoint %"class.v8::internal::compiler::Node"** %6197 to i64
  %6199 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6134, align 8
  %6200 = icmp eq %"class.v8::internal::compiler::Node"** %6199, %6197
  br i1 %6200, label %6370, label %6201

6201:                                             ; preds = %6186
  %6202 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 -1
  %6203 = ptrtoint %"class.v8::internal::compiler::Node"** %6202 to i64
  %6204 = sub i64 %6203, %6198
  %6205 = lshr i64 %6204, 3
  %6206 = add nuw nsw i64 %6205, 1
  %6207 = icmp ult i64 %6206, 4
  br i1 %6207, label %6300, label %6208

6208:                                             ; preds = %6201
  %6209 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 -1
  %6210 = ptrtoint %"class.v8::internal::compiler::Node"** %6209 to i64
  %6211 = sub i64 %6210, %6198
  %6212 = lshr i64 %6211, 3
  %6213 = xor i64 %6212, -1
  %6214 = add nsw i64 %6151, %6213
  %6215 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6189, i64 %6214
  %6216 = xor i64 %6212, -1
  %6217 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 %6216
  %6218 = icmp ult %"class.v8::internal::compiler::Node"** %6215, %6199
  %6219 = icmp ult %"class.v8::internal::compiler::Node"** %6217, %6190
  %6220 = and i1 %6218, %6219
  br i1 %6220, label %6300, label %6221

6221:                                             ; preds = %6208
  %6222 = and i64 %6206, 4611686018427387900
  %6223 = sub nsw i64 0, %6222
  %6224 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6190, i64 %6223
  %6225 = sub nsw i64 0, %6222
  %6226 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 %6225
  %6227 = add nsw i64 %6222, -4
  %6228 = lshr exact i64 %6227, 2
  %6229 = add nuw nsw i64 %6228, 1
  %6230 = and i64 %6229, 1
  %6231 = icmp eq i64 %6227, 0
  br i1 %6231, label %6276, label %6232

6232:                                             ; preds = %6221
  %6233 = sub nuw nsw i64 %6229, %6230
  %6234 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6190, i64 -1
  %6235 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 -1
  %6236 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6190, i64 -1
  %6237 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 -1
  br label %6238

6238:                                             ; preds = %6238, %6232
  %6239 = phi i64 [ 0, %6232 ], [ %6273, %6238 ]
  %6240 = phi i64 [ %6233, %6232 ], [ %6274, %6238 ]
  %6241 = sub i64 0, %6239
  %6242 = sub i64 0, %6239
  %6243 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6234, i64 %6241
  %6244 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6235, i64 %6242
  %6245 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6244, i64 -1
  %6246 = bitcast %"class.v8::internal::compiler::Node"** %6245 to <2 x i64>*
  %6247 = load <2 x i64>, <2 x i64>* %6246, align 8, !alias.scope !205
  %6248 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6244, i64 -2
  %6249 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6248, i64 -1
  %6250 = bitcast %"class.v8::internal::compiler::Node"** %6249 to <2 x i64>*
  %6251 = load <2 x i64>, <2 x i64>* %6250, align 8, !alias.scope !205
  %6252 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6243, i64 -1
  %6253 = bitcast %"class.v8::internal::compiler::Node"** %6252 to <2 x i64>*
  store <2 x i64> %6247, <2 x i64>* %6253, align 8, !alias.scope !208, !noalias !205
  %6254 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6243, i64 -2
  %6255 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6254, i64 -1
  %6256 = bitcast %"class.v8::internal::compiler::Node"** %6255 to <2 x i64>*
  store <2 x i64> %6251, <2 x i64>* %6256, align 8, !alias.scope !208, !noalias !205
  %6257 = sub nuw nsw i64 -4, %6239
  %6258 = sub nuw nsw i64 -4, %6239
  %6259 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6236, i64 %6257
  %6260 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6237, i64 %6258
  %6261 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6260, i64 -1
  %6262 = bitcast %"class.v8::internal::compiler::Node"** %6261 to <2 x i64>*
  %6263 = load <2 x i64>, <2 x i64>* %6262, align 8, !alias.scope !205
  %6264 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6260, i64 -2
  %6265 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6264, i64 -1
  %6266 = bitcast %"class.v8::internal::compiler::Node"** %6265 to <2 x i64>*
  %6267 = load <2 x i64>, <2 x i64>* %6266, align 8, !alias.scope !205
  %6268 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6259, i64 -1
  %6269 = bitcast %"class.v8::internal::compiler::Node"** %6268 to <2 x i64>*
  store <2 x i64> %6263, <2 x i64>* %6269, align 8, !alias.scope !208, !noalias !205
  %6270 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6259, i64 -2
  %6271 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6270, i64 -1
  %6272 = bitcast %"class.v8::internal::compiler::Node"** %6271 to <2 x i64>*
  store <2 x i64> %6267, <2 x i64>* %6272, align 8, !alias.scope !208, !noalias !205
  %6273 = add i64 %6239, 8
  %6274 = add i64 %6240, -2
  %6275 = icmp eq i64 %6274, 0
  br i1 %6275, label %6276, label %6238, !llvm.loop !210

6276:                                             ; preds = %6238, %6221
  %6277 = phi i64 [ 0, %6221 ], [ %6273, %6238 ]
  %6278 = icmp eq i64 %6230, 0
  br i1 %6278, label %6298, label %6279

6279:                                             ; preds = %6276
  %6280 = sub i64 0, %6277
  %6281 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6190, i64 -1
  %6282 = sub i64 0, %6277
  %6283 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6199, i64 -1
  %6284 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6281, i64 %6280
  %6285 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6283, i64 %6282
  %6286 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6285, i64 -1
  %6287 = bitcast %"class.v8::internal::compiler::Node"** %6286 to <2 x i64>*
  %6288 = load <2 x i64>, <2 x i64>* %6287, align 8, !alias.scope !205
  %6289 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6285, i64 -2
  %6290 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6289, i64 -1
  %6291 = bitcast %"class.v8::internal::compiler::Node"** %6290 to <2 x i64>*
  %6292 = load <2 x i64>, <2 x i64>* %6291, align 8, !alias.scope !205
  %6293 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6284, i64 -1
  %6294 = bitcast %"class.v8::internal::compiler::Node"** %6293 to <2 x i64>*
  store <2 x i64> %6288, <2 x i64>* %6294, align 8, !alias.scope !208, !noalias !205
  %6295 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6284, i64 -2
  %6296 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6295, i64 -1
  %6297 = bitcast %"class.v8::internal::compiler::Node"** %6296 to <2 x i64>*
  store <2 x i64> %6292, <2 x i64>* %6297, align 8, !alias.scope !208, !noalias !205
  br label %6298

6298:                                             ; preds = %6276, %6279
  %6299 = icmp eq i64 %6206, %6222
  br i1 %6299, label %6370, label %6300

6300:                                             ; preds = %6298, %6208, %6201
  %6301 = phi %"class.v8::internal::compiler::Node"** [ %6190, %6208 ], [ %6190, %6201 ], [ %6224, %6298 ]
  %6302 = phi %"class.v8::internal::compiler::Node"** [ %6199, %6208 ], [ %6199, %6201 ], [ %6226, %6298 ]
  %6303 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6302, i64 -1
  %6304 = ptrtoint %"class.v8::internal::compiler::Node"** %6303 to i64
  %6305 = sub i64 %6304, %6198
  %6306 = lshr i64 %6305, 3
  %6307 = add nuw nsw i64 %6306, 1
  %6308 = and i64 %6307, 7
  %6309 = icmp eq i64 %6308, 0
  br i1 %6309, label %6321, label %6310

6310:                                             ; preds = %6300, %6310
  %6311 = phi %"class.v8::internal::compiler::Node"** [ %6314, %6310 ], [ %6301, %6300 ]
  %6312 = phi %"class.v8::internal::compiler::Node"** [ %6315, %6310 ], [ %6302, %6300 ]
  %6313 = phi i64 [ %6319, %6310 ], [ %6308, %6300 ]
  %6314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6311, i64 -1
  %6315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6312, i64 -1
  %6316 = bitcast %"class.v8::internal::compiler::Node"** %6315 to i64*
  %6317 = load i64, i64* %6316, align 8
  %6318 = bitcast %"class.v8::internal::compiler::Node"** %6314 to i64*
  store i64 %6317, i64* %6318, align 8
  %6319 = add i64 %6313, -1
  %6320 = icmp eq i64 %6319, 0
  br i1 %6320, label %6321, label %6310, !llvm.loop !211

6321:                                             ; preds = %6310, %6300
  %6322 = phi %"class.v8::internal::compiler::Node"** [ undef, %6300 ], [ %6314, %6310 ]
  %6323 = phi %"class.v8::internal::compiler::Node"** [ %6301, %6300 ], [ %6314, %6310 ]
  %6324 = phi %"class.v8::internal::compiler::Node"** [ %6302, %6300 ], [ %6315, %6310 ]
  %6325 = icmp ult i64 %6305, 56
  br i1 %6325, label %6370, label %6326

6326:                                             ; preds = %6321, %6326
  %6327 = phi %"class.v8::internal::compiler::Node"** [ %6364, %6326 ], [ %6323, %6321 ]
  %6328 = phi %"class.v8::internal::compiler::Node"** [ %6365, %6326 ], [ %6324, %6321 ]
  %6329 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -1
  %6330 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -1
  %6331 = bitcast %"class.v8::internal::compiler::Node"** %6330 to i64*
  %6332 = load i64, i64* %6331, align 8
  %6333 = bitcast %"class.v8::internal::compiler::Node"** %6329 to i64*
  store i64 %6332, i64* %6333, align 8
  %6334 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -2
  %6335 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -2
  %6336 = bitcast %"class.v8::internal::compiler::Node"** %6335 to i64*
  %6337 = load i64, i64* %6336, align 8
  %6338 = bitcast %"class.v8::internal::compiler::Node"** %6334 to i64*
  store i64 %6337, i64* %6338, align 8
  %6339 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -3
  %6340 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -3
  %6341 = bitcast %"class.v8::internal::compiler::Node"** %6340 to i64*
  %6342 = load i64, i64* %6341, align 8
  %6343 = bitcast %"class.v8::internal::compiler::Node"** %6339 to i64*
  store i64 %6342, i64* %6343, align 8
  %6344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -4
  %6345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -4
  %6346 = bitcast %"class.v8::internal::compiler::Node"** %6345 to i64*
  %6347 = load i64, i64* %6346, align 8
  %6348 = bitcast %"class.v8::internal::compiler::Node"** %6344 to i64*
  store i64 %6347, i64* %6348, align 8
  %6349 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -5
  %6350 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -5
  %6351 = bitcast %"class.v8::internal::compiler::Node"** %6350 to i64*
  %6352 = load i64, i64* %6351, align 8
  %6353 = bitcast %"class.v8::internal::compiler::Node"** %6349 to i64*
  store i64 %6352, i64* %6353, align 8
  %6354 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -6
  %6355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -6
  %6356 = bitcast %"class.v8::internal::compiler::Node"** %6355 to i64*
  %6357 = load i64, i64* %6356, align 8
  %6358 = bitcast %"class.v8::internal::compiler::Node"** %6354 to i64*
  store i64 %6357, i64* %6358, align 8
  %6359 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -7
  %6360 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -7
  %6361 = bitcast %"class.v8::internal::compiler::Node"** %6360 to i64*
  %6362 = load i64, i64* %6361, align 8
  %6363 = bitcast %"class.v8::internal::compiler::Node"** %6359 to i64*
  store i64 %6362, i64* %6363, align 8
  %6364 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6327, i64 -8
  %6365 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6328, i64 -8
  %6366 = bitcast %"class.v8::internal::compiler::Node"** %6365 to i64*
  %6367 = load i64, i64* %6366, align 8
  %6368 = bitcast %"class.v8::internal::compiler::Node"** %6364 to i64*
  store i64 %6367, i64* %6368, align 8
  %6369 = icmp eq %"class.v8::internal::compiler::Node"** %6365, %6197
  br i1 %6369, label %6370, label %6326, !llvm.loop !212

6370:                                             ; preds = %6321, %6326, %6298, %6186
  %6371 = phi %"class.v8::internal::compiler::Node"** [ %6190, %6186 ], [ %6224, %6298 ], [ %6322, %6321 ], [ %6364, %6326 ]
  %6372 = ptrtoint %"class.v8::internal::compiler::Node"** %6371 to i64
  store i64 %6372, i64* %6148, align 8
  store i64 %6195, i64* %6147, align 8
  store i64 %6192, i64* %6157, align 8
  br label %6373

6373:                                             ; preds = %6370, %6140, %6128
  %6374 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 30
  %6375 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6374, align 8
  %6376 = icmp eq %"class.v8::internal::compiler::Node"* %6375, null
  %6377 = ptrtoint %"class.v8::internal::compiler::Node"* %6375 to i64
  br i1 %6376, label %6618, label %6378

6378:                                             ; preds = %6373
  %6379 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %6380 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6379, align 8
  %6381 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6382 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6381, align 8
  %6383 = icmp eq %"class.v8::internal::compiler::Node"** %6380, %6382
  %6384 = ptrtoint %"class.v8::internal::compiler::Node"** %6382 to i64
  br i1 %6383, label %6390, label %6385

6385:                                             ; preds = %6378
  %6386 = bitcast %"class.v8::internal::compiler::Node"** %6380 to i64*
  store i64 %6377, i64* %6386, align 8
  %6387 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6380, i64 1
  %6388 = ptrtoint %"class.v8::internal::compiler::Node"** %6387 to i64
  %6389 = bitcast %"class.v8::internal::compiler::Node"*** %6379 to i64*
  store i64 %6388, i64* %6389, align 8
  br label %6618

6390:                                             ; preds = %6378
  %6391 = ptrtoint %"class.v8::internal::compiler::Node"** %6380 to i64
  %6392 = bitcast %"class.v8::internal::compiler::Node"*** %6379 to i64*
  %6393 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %6394 = load i64, i64* %6393, align 8
  %6395 = sub i64 %6391, %6394
  %6396 = ashr exact i64 %6395, 3
  %6397 = add nsw i64 %6396, 1
  %6398 = icmp ugt i64 %6397, 268435455
  br i1 %6398, label %6399, label %6401

6399:                                             ; preds = %6390
  %6400 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %6400) #6
  unreachable

6401:                                             ; preds = %6390
  %6402 = bitcast %"class.v8::internal::compiler::Node"*** %6381 to i64*
  %6403 = sub i64 %6384, %6394
  %6404 = ashr exact i64 %6403, 3
  %6405 = icmp ult i64 %6404, 134217727
  br i1 %6405, label %6406, label %6411

6406:                                             ; preds = %6401
  %6407 = ashr exact i64 %6403, 2
  %6408 = icmp ult i64 %6407, %6397
  %6409 = select i1 %6408, i64 %6397, i64 %6407
  %6410 = icmp eq i64 %6409, 0
  br i1 %6410, label %6431, label %6411

6411:                                             ; preds = %6406, %6401
  %6412 = phi i64 [ %6409, %6406 ], [ 268435455, %6401 ]
  %6413 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %6414 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6413, align 8
  %6415 = shl i64 %6412, 3
  %6416 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6414, i64 0, i32 2
  %6417 = load i64, i64* %6416, align 8
  %6418 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6414, i64 0, i32 3
  %6419 = load i64, i64* %6418, align 8
  %6420 = sub i64 %6419, %6417
  %6421 = icmp ugt i64 %6415, %6420
  br i1 %6421, label %6422, label %6424, !prof !2

6422:                                             ; preds = %6411
  %6423 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6414, i64 %6415) #5
  br label %6426

6424:                                             ; preds = %6411
  %6425 = add i64 %6417, %6415
  store i64 %6425, i64* %6416, align 8
  br label %6426

6426:                                             ; preds = %6424, %6422
  %6427 = phi i64 [ %6423, %6422 ], [ %6417, %6424 ]
  %6428 = inttoptr i64 %6427 to %"class.v8::internal::compiler::Node"**
  %6429 = bitcast %"class.v8::internal::compiler::Node"** %6374 to i64*
  %6430 = load i64, i64* %6429, align 8
  br label %6431

6431:                                             ; preds = %6406, %6426
  %6432 = phi i64 [ %6430, %6426 ], [ %6377, %6406 ]
  %6433 = phi i64 [ %6412, %6426 ], [ 0, %6406 ]
  %6434 = phi %"class.v8::internal::compiler::Node"** [ %6428, %6426 ], [ null, %6406 ]
  %6435 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6434, i64 %6396
  %6436 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6434, i64 %6433
  %6437 = ptrtoint %"class.v8::internal::compiler::Node"** %6436 to i64
  %6438 = bitcast %"class.v8::internal::compiler::Node"** %6435 to i64*
  store i64 %6432, i64* %6438, align 8
  %6439 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6435, i64 1
  %6440 = ptrtoint %"class.v8::internal::compiler::Node"** %6439 to i64
  %6441 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %6442 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6441, align 8
  %6443 = ptrtoint %"class.v8::internal::compiler::Node"** %6442 to i64
  %6444 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6379, align 8
  %6445 = icmp eq %"class.v8::internal::compiler::Node"** %6444, %6442
  br i1 %6445, label %6615, label %6446

6446:                                             ; preds = %6431
  %6447 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 -1
  %6448 = ptrtoint %"class.v8::internal::compiler::Node"** %6447 to i64
  %6449 = sub i64 %6448, %6443
  %6450 = lshr i64 %6449, 3
  %6451 = add nuw nsw i64 %6450, 1
  %6452 = icmp ult i64 %6451, 4
  br i1 %6452, label %6545, label %6453

6453:                                             ; preds = %6446
  %6454 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 -1
  %6455 = ptrtoint %"class.v8::internal::compiler::Node"** %6454 to i64
  %6456 = sub i64 %6455, %6443
  %6457 = lshr i64 %6456, 3
  %6458 = xor i64 %6457, -1
  %6459 = add nsw i64 %6396, %6458
  %6460 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6434, i64 %6459
  %6461 = xor i64 %6457, -1
  %6462 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 %6461
  %6463 = icmp ult %"class.v8::internal::compiler::Node"** %6460, %6444
  %6464 = icmp ult %"class.v8::internal::compiler::Node"** %6462, %6435
  %6465 = and i1 %6463, %6464
  br i1 %6465, label %6545, label %6466

6466:                                             ; preds = %6453
  %6467 = and i64 %6451, 4611686018427387900
  %6468 = sub nsw i64 0, %6467
  %6469 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6435, i64 %6468
  %6470 = sub nsw i64 0, %6467
  %6471 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 %6470
  %6472 = add nsw i64 %6467, -4
  %6473 = lshr exact i64 %6472, 2
  %6474 = add nuw nsw i64 %6473, 1
  %6475 = and i64 %6474, 1
  %6476 = icmp eq i64 %6472, 0
  br i1 %6476, label %6521, label %6477

6477:                                             ; preds = %6466
  %6478 = sub nuw nsw i64 %6474, %6475
  %6479 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6435, i64 -1
  %6480 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 -1
  %6481 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6435, i64 -1
  %6482 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 -1
  br label %6483

6483:                                             ; preds = %6483, %6477
  %6484 = phi i64 [ 0, %6477 ], [ %6518, %6483 ]
  %6485 = phi i64 [ %6478, %6477 ], [ %6519, %6483 ]
  %6486 = sub i64 0, %6484
  %6487 = sub i64 0, %6484
  %6488 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6479, i64 %6486
  %6489 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6480, i64 %6487
  %6490 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6489, i64 -1
  %6491 = bitcast %"class.v8::internal::compiler::Node"** %6490 to <2 x i64>*
  %6492 = load <2 x i64>, <2 x i64>* %6491, align 8, !alias.scope !213
  %6493 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6489, i64 -2
  %6494 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6493, i64 -1
  %6495 = bitcast %"class.v8::internal::compiler::Node"** %6494 to <2 x i64>*
  %6496 = load <2 x i64>, <2 x i64>* %6495, align 8, !alias.scope !213
  %6497 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6488, i64 -1
  %6498 = bitcast %"class.v8::internal::compiler::Node"** %6497 to <2 x i64>*
  store <2 x i64> %6492, <2 x i64>* %6498, align 8, !alias.scope !216, !noalias !213
  %6499 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6488, i64 -2
  %6500 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6499, i64 -1
  %6501 = bitcast %"class.v8::internal::compiler::Node"** %6500 to <2 x i64>*
  store <2 x i64> %6496, <2 x i64>* %6501, align 8, !alias.scope !216, !noalias !213
  %6502 = sub nuw nsw i64 -4, %6484
  %6503 = sub nuw nsw i64 -4, %6484
  %6504 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6481, i64 %6502
  %6505 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6482, i64 %6503
  %6506 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6505, i64 -1
  %6507 = bitcast %"class.v8::internal::compiler::Node"** %6506 to <2 x i64>*
  %6508 = load <2 x i64>, <2 x i64>* %6507, align 8, !alias.scope !213
  %6509 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6505, i64 -2
  %6510 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6509, i64 -1
  %6511 = bitcast %"class.v8::internal::compiler::Node"** %6510 to <2 x i64>*
  %6512 = load <2 x i64>, <2 x i64>* %6511, align 8, !alias.scope !213
  %6513 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6504, i64 -1
  %6514 = bitcast %"class.v8::internal::compiler::Node"** %6513 to <2 x i64>*
  store <2 x i64> %6508, <2 x i64>* %6514, align 8, !alias.scope !216, !noalias !213
  %6515 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6504, i64 -2
  %6516 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6515, i64 -1
  %6517 = bitcast %"class.v8::internal::compiler::Node"** %6516 to <2 x i64>*
  store <2 x i64> %6512, <2 x i64>* %6517, align 8, !alias.scope !216, !noalias !213
  %6518 = add i64 %6484, 8
  %6519 = add i64 %6485, -2
  %6520 = icmp eq i64 %6519, 0
  br i1 %6520, label %6521, label %6483, !llvm.loop !218

6521:                                             ; preds = %6483, %6466
  %6522 = phi i64 [ 0, %6466 ], [ %6518, %6483 ]
  %6523 = icmp eq i64 %6475, 0
  br i1 %6523, label %6543, label %6524

6524:                                             ; preds = %6521
  %6525 = sub i64 0, %6522
  %6526 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6435, i64 -1
  %6527 = sub i64 0, %6522
  %6528 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6444, i64 -1
  %6529 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6526, i64 %6525
  %6530 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6528, i64 %6527
  %6531 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6530, i64 -1
  %6532 = bitcast %"class.v8::internal::compiler::Node"** %6531 to <2 x i64>*
  %6533 = load <2 x i64>, <2 x i64>* %6532, align 8, !alias.scope !213
  %6534 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6530, i64 -2
  %6535 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6534, i64 -1
  %6536 = bitcast %"class.v8::internal::compiler::Node"** %6535 to <2 x i64>*
  %6537 = load <2 x i64>, <2 x i64>* %6536, align 8, !alias.scope !213
  %6538 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6529, i64 -1
  %6539 = bitcast %"class.v8::internal::compiler::Node"** %6538 to <2 x i64>*
  store <2 x i64> %6533, <2 x i64>* %6539, align 8, !alias.scope !216, !noalias !213
  %6540 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6529, i64 -2
  %6541 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6540, i64 -1
  %6542 = bitcast %"class.v8::internal::compiler::Node"** %6541 to <2 x i64>*
  store <2 x i64> %6537, <2 x i64>* %6542, align 8, !alias.scope !216, !noalias !213
  br label %6543

6543:                                             ; preds = %6521, %6524
  %6544 = icmp eq i64 %6451, %6467
  br i1 %6544, label %6615, label %6545

6545:                                             ; preds = %6543, %6453, %6446
  %6546 = phi %"class.v8::internal::compiler::Node"** [ %6435, %6453 ], [ %6435, %6446 ], [ %6469, %6543 ]
  %6547 = phi %"class.v8::internal::compiler::Node"** [ %6444, %6453 ], [ %6444, %6446 ], [ %6471, %6543 ]
  %6548 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6547, i64 -1
  %6549 = ptrtoint %"class.v8::internal::compiler::Node"** %6548 to i64
  %6550 = sub i64 %6549, %6443
  %6551 = lshr i64 %6550, 3
  %6552 = add nuw nsw i64 %6551, 1
  %6553 = and i64 %6552, 7
  %6554 = icmp eq i64 %6553, 0
  br i1 %6554, label %6566, label %6555

6555:                                             ; preds = %6545, %6555
  %6556 = phi %"class.v8::internal::compiler::Node"** [ %6559, %6555 ], [ %6546, %6545 ]
  %6557 = phi %"class.v8::internal::compiler::Node"** [ %6560, %6555 ], [ %6547, %6545 ]
  %6558 = phi i64 [ %6564, %6555 ], [ %6553, %6545 ]
  %6559 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6556, i64 -1
  %6560 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6557, i64 -1
  %6561 = bitcast %"class.v8::internal::compiler::Node"** %6560 to i64*
  %6562 = load i64, i64* %6561, align 8
  %6563 = bitcast %"class.v8::internal::compiler::Node"** %6559 to i64*
  store i64 %6562, i64* %6563, align 8
  %6564 = add i64 %6558, -1
  %6565 = icmp eq i64 %6564, 0
  br i1 %6565, label %6566, label %6555, !llvm.loop !219

6566:                                             ; preds = %6555, %6545
  %6567 = phi %"class.v8::internal::compiler::Node"** [ undef, %6545 ], [ %6559, %6555 ]
  %6568 = phi %"class.v8::internal::compiler::Node"** [ %6546, %6545 ], [ %6559, %6555 ]
  %6569 = phi %"class.v8::internal::compiler::Node"** [ %6547, %6545 ], [ %6560, %6555 ]
  %6570 = icmp ult i64 %6550, 56
  br i1 %6570, label %6615, label %6571

6571:                                             ; preds = %6566, %6571
  %6572 = phi %"class.v8::internal::compiler::Node"** [ %6609, %6571 ], [ %6568, %6566 ]
  %6573 = phi %"class.v8::internal::compiler::Node"** [ %6610, %6571 ], [ %6569, %6566 ]
  %6574 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -1
  %6575 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -1
  %6576 = bitcast %"class.v8::internal::compiler::Node"** %6575 to i64*
  %6577 = load i64, i64* %6576, align 8
  %6578 = bitcast %"class.v8::internal::compiler::Node"** %6574 to i64*
  store i64 %6577, i64* %6578, align 8
  %6579 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -2
  %6580 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -2
  %6581 = bitcast %"class.v8::internal::compiler::Node"** %6580 to i64*
  %6582 = load i64, i64* %6581, align 8
  %6583 = bitcast %"class.v8::internal::compiler::Node"** %6579 to i64*
  store i64 %6582, i64* %6583, align 8
  %6584 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -3
  %6585 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -3
  %6586 = bitcast %"class.v8::internal::compiler::Node"** %6585 to i64*
  %6587 = load i64, i64* %6586, align 8
  %6588 = bitcast %"class.v8::internal::compiler::Node"** %6584 to i64*
  store i64 %6587, i64* %6588, align 8
  %6589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -4
  %6590 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -4
  %6591 = bitcast %"class.v8::internal::compiler::Node"** %6590 to i64*
  %6592 = load i64, i64* %6591, align 8
  %6593 = bitcast %"class.v8::internal::compiler::Node"** %6589 to i64*
  store i64 %6592, i64* %6593, align 8
  %6594 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -5
  %6595 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -5
  %6596 = bitcast %"class.v8::internal::compiler::Node"** %6595 to i64*
  %6597 = load i64, i64* %6596, align 8
  %6598 = bitcast %"class.v8::internal::compiler::Node"** %6594 to i64*
  store i64 %6597, i64* %6598, align 8
  %6599 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -6
  %6600 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -6
  %6601 = bitcast %"class.v8::internal::compiler::Node"** %6600 to i64*
  %6602 = load i64, i64* %6601, align 8
  %6603 = bitcast %"class.v8::internal::compiler::Node"** %6599 to i64*
  store i64 %6602, i64* %6603, align 8
  %6604 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -7
  %6605 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -7
  %6606 = bitcast %"class.v8::internal::compiler::Node"** %6605 to i64*
  %6607 = load i64, i64* %6606, align 8
  %6608 = bitcast %"class.v8::internal::compiler::Node"** %6604 to i64*
  store i64 %6607, i64* %6608, align 8
  %6609 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6572, i64 -8
  %6610 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6573, i64 -8
  %6611 = bitcast %"class.v8::internal::compiler::Node"** %6610 to i64*
  %6612 = load i64, i64* %6611, align 8
  %6613 = bitcast %"class.v8::internal::compiler::Node"** %6609 to i64*
  store i64 %6612, i64* %6613, align 8
  %6614 = icmp eq %"class.v8::internal::compiler::Node"** %6610, %6442
  br i1 %6614, label %6615, label %6571, !llvm.loop !220

6615:                                             ; preds = %6566, %6571, %6543, %6431
  %6616 = phi %"class.v8::internal::compiler::Node"** [ %6435, %6431 ], [ %6469, %6543 ], [ %6567, %6566 ], [ %6609, %6571 ]
  %6617 = ptrtoint %"class.v8::internal::compiler::Node"** %6616 to i64
  store i64 %6617, i64* %6393, align 8
  store i64 %6440, i64* %6392, align 8
  store i64 %6437, i64* %6402, align 8
  br label %6618

6618:                                             ; preds = %6615, %6385, %6373
  %6619 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 31
  %6620 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6619, align 8
  %6621 = icmp eq %"class.v8::internal::compiler::Node"* %6620, null
  %6622 = ptrtoint %"class.v8::internal::compiler::Node"* %6620 to i64
  br i1 %6621, label %6863, label %6623

6623:                                             ; preds = %6618
  %6624 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %6625 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6624, align 8
  %6626 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6627 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6626, align 8
  %6628 = icmp eq %"class.v8::internal::compiler::Node"** %6625, %6627
  %6629 = ptrtoint %"class.v8::internal::compiler::Node"** %6627 to i64
  br i1 %6628, label %6635, label %6630

6630:                                             ; preds = %6623
  %6631 = bitcast %"class.v8::internal::compiler::Node"** %6625 to i64*
  store i64 %6622, i64* %6631, align 8
  %6632 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6625, i64 1
  %6633 = ptrtoint %"class.v8::internal::compiler::Node"** %6632 to i64
  %6634 = bitcast %"class.v8::internal::compiler::Node"*** %6624 to i64*
  store i64 %6633, i64* %6634, align 8
  br label %6863

6635:                                             ; preds = %6623
  %6636 = ptrtoint %"class.v8::internal::compiler::Node"** %6625 to i64
  %6637 = bitcast %"class.v8::internal::compiler::Node"*** %6624 to i64*
  %6638 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %6639 = load i64, i64* %6638, align 8
  %6640 = sub i64 %6636, %6639
  %6641 = ashr exact i64 %6640, 3
  %6642 = add nsw i64 %6641, 1
  %6643 = icmp ugt i64 %6642, 268435455
  br i1 %6643, label %6644, label %6646

6644:                                             ; preds = %6635
  %6645 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %6645) #6
  unreachable

6646:                                             ; preds = %6635
  %6647 = bitcast %"class.v8::internal::compiler::Node"*** %6626 to i64*
  %6648 = sub i64 %6629, %6639
  %6649 = ashr exact i64 %6648, 3
  %6650 = icmp ult i64 %6649, 134217727
  br i1 %6650, label %6651, label %6656

6651:                                             ; preds = %6646
  %6652 = ashr exact i64 %6648, 2
  %6653 = icmp ult i64 %6652, %6642
  %6654 = select i1 %6653, i64 %6642, i64 %6652
  %6655 = icmp eq i64 %6654, 0
  br i1 %6655, label %6676, label %6656

6656:                                             ; preds = %6651, %6646
  %6657 = phi i64 [ %6654, %6651 ], [ 268435455, %6646 ]
  %6658 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %6659 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6658, align 8
  %6660 = shl i64 %6657, 3
  %6661 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6659, i64 0, i32 2
  %6662 = load i64, i64* %6661, align 8
  %6663 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6659, i64 0, i32 3
  %6664 = load i64, i64* %6663, align 8
  %6665 = sub i64 %6664, %6662
  %6666 = icmp ugt i64 %6660, %6665
  br i1 %6666, label %6667, label %6669, !prof !2

6667:                                             ; preds = %6656
  %6668 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6659, i64 %6660) #5
  br label %6671

6669:                                             ; preds = %6656
  %6670 = add i64 %6662, %6660
  store i64 %6670, i64* %6661, align 8
  br label %6671

6671:                                             ; preds = %6669, %6667
  %6672 = phi i64 [ %6668, %6667 ], [ %6662, %6669 ]
  %6673 = inttoptr i64 %6672 to %"class.v8::internal::compiler::Node"**
  %6674 = bitcast %"class.v8::internal::compiler::Node"** %6619 to i64*
  %6675 = load i64, i64* %6674, align 8
  br label %6676

6676:                                             ; preds = %6651, %6671
  %6677 = phi i64 [ %6675, %6671 ], [ %6622, %6651 ]
  %6678 = phi i64 [ %6657, %6671 ], [ 0, %6651 ]
  %6679 = phi %"class.v8::internal::compiler::Node"** [ %6673, %6671 ], [ null, %6651 ]
  %6680 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6679, i64 %6641
  %6681 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6679, i64 %6678
  %6682 = ptrtoint %"class.v8::internal::compiler::Node"** %6681 to i64
  %6683 = bitcast %"class.v8::internal::compiler::Node"** %6680 to i64*
  store i64 %6677, i64* %6683, align 8
  %6684 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6680, i64 1
  %6685 = ptrtoint %"class.v8::internal::compiler::Node"** %6684 to i64
  %6686 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %6687 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6686, align 8
  %6688 = ptrtoint %"class.v8::internal::compiler::Node"** %6687 to i64
  %6689 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6624, align 8
  %6690 = icmp eq %"class.v8::internal::compiler::Node"** %6689, %6687
  br i1 %6690, label %6860, label %6691

6691:                                             ; preds = %6676
  %6692 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 -1
  %6693 = ptrtoint %"class.v8::internal::compiler::Node"** %6692 to i64
  %6694 = sub i64 %6693, %6688
  %6695 = lshr i64 %6694, 3
  %6696 = add nuw nsw i64 %6695, 1
  %6697 = icmp ult i64 %6696, 4
  br i1 %6697, label %6790, label %6698

6698:                                             ; preds = %6691
  %6699 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 -1
  %6700 = ptrtoint %"class.v8::internal::compiler::Node"** %6699 to i64
  %6701 = sub i64 %6700, %6688
  %6702 = lshr i64 %6701, 3
  %6703 = xor i64 %6702, -1
  %6704 = add nsw i64 %6641, %6703
  %6705 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6679, i64 %6704
  %6706 = xor i64 %6702, -1
  %6707 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 %6706
  %6708 = icmp ult %"class.v8::internal::compiler::Node"** %6705, %6689
  %6709 = icmp ult %"class.v8::internal::compiler::Node"** %6707, %6680
  %6710 = and i1 %6708, %6709
  br i1 %6710, label %6790, label %6711

6711:                                             ; preds = %6698
  %6712 = and i64 %6696, 4611686018427387900
  %6713 = sub nsw i64 0, %6712
  %6714 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6680, i64 %6713
  %6715 = sub nsw i64 0, %6712
  %6716 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 %6715
  %6717 = add nsw i64 %6712, -4
  %6718 = lshr exact i64 %6717, 2
  %6719 = add nuw nsw i64 %6718, 1
  %6720 = and i64 %6719, 1
  %6721 = icmp eq i64 %6717, 0
  br i1 %6721, label %6766, label %6722

6722:                                             ; preds = %6711
  %6723 = sub nuw nsw i64 %6719, %6720
  %6724 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6680, i64 -1
  %6725 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 -1
  %6726 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6680, i64 -1
  %6727 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 -1
  br label %6728

6728:                                             ; preds = %6728, %6722
  %6729 = phi i64 [ 0, %6722 ], [ %6763, %6728 ]
  %6730 = phi i64 [ %6723, %6722 ], [ %6764, %6728 ]
  %6731 = sub i64 0, %6729
  %6732 = sub i64 0, %6729
  %6733 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6724, i64 %6731
  %6734 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6725, i64 %6732
  %6735 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6734, i64 -1
  %6736 = bitcast %"class.v8::internal::compiler::Node"** %6735 to <2 x i64>*
  %6737 = load <2 x i64>, <2 x i64>* %6736, align 8, !alias.scope !221
  %6738 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6734, i64 -2
  %6739 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6738, i64 -1
  %6740 = bitcast %"class.v8::internal::compiler::Node"** %6739 to <2 x i64>*
  %6741 = load <2 x i64>, <2 x i64>* %6740, align 8, !alias.scope !221
  %6742 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6733, i64 -1
  %6743 = bitcast %"class.v8::internal::compiler::Node"** %6742 to <2 x i64>*
  store <2 x i64> %6737, <2 x i64>* %6743, align 8, !alias.scope !224, !noalias !221
  %6744 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6733, i64 -2
  %6745 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6744, i64 -1
  %6746 = bitcast %"class.v8::internal::compiler::Node"** %6745 to <2 x i64>*
  store <2 x i64> %6741, <2 x i64>* %6746, align 8, !alias.scope !224, !noalias !221
  %6747 = sub nuw nsw i64 -4, %6729
  %6748 = sub nuw nsw i64 -4, %6729
  %6749 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6726, i64 %6747
  %6750 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6727, i64 %6748
  %6751 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6750, i64 -1
  %6752 = bitcast %"class.v8::internal::compiler::Node"** %6751 to <2 x i64>*
  %6753 = load <2 x i64>, <2 x i64>* %6752, align 8, !alias.scope !221
  %6754 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6750, i64 -2
  %6755 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6754, i64 -1
  %6756 = bitcast %"class.v8::internal::compiler::Node"** %6755 to <2 x i64>*
  %6757 = load <2 x i64>, <2 x i64>* %6756, align 8, !alias.scope !221
  %6758 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6749, i64 -1
  %6759 = bitcast %"class.v8::internal::compiler::Node"** %6758 to <2 x i64>*
  store <2 x i64> %6753, <2 x i64>* %6759, align 8, !alias.scope !224, !noalias !221
  %6760 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6749, i64 -2
  %6761 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6760, i64 -1
  %6762 = bitcast %"class.v8::internal::compiler::Node"** %6761 to <2 x i64>*
  store <2 x i64> %6757, <2 x i64>* %6762, align 8, !alias.scope !224, !noalias !221
  %6763 = add i64 %6729, 8
  %6764 = add i64 %6730, -2
  %6765 = icmp eq i64 %6764, 0
  br i1 %6765, label %6766, label %6728, !llvm.loop !226

6766:                                             ; preds = %6728, %6711
  %6767 = phi i64 [ 0, %6711 ], [ %6763, %6728 ]
  %6768 = icmp eq i64 %6720, 0
  br i1 %6768, label %6788, label %6769

6769:                                             ; preds = %6766
  %6770 = sub i64 0, %6767
  %6771 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6680, i64 -1
  %6772 = sub i64 0, %6767
  %6773 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6689, i64 -1
  %6774 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6771, i64 %6770
  %6775 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6773, i64 %6772
  %6776 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6775, i64 -1
  %6777 = bitcast %"class.v8::internal::compiler::Node"** %6776 to <2 x i64>*
  %6778 = load <2 x i64>, <2 x i64>* %6777, align 8, !alias.scope !221
  %6779 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6775, i64 -2
  %6780 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6779, i64 -1
  %6781 = bitcast %"class.v8::internal::compiler::Node"** %6780 to <2 x i64>*
  %6782 = load <2 x i64>, <2 x i64>* %6781, align 8, !alias.scope !221
  %6783 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6774, i64 -1
  %6784 = bitcast %"class.v8::internal::compiler::Node"** %6783 to <2 x i64>*
  store <2 x i64> %6778, <2 x i64>* %6784, align 8, !alias.scope !224, !noalias !221
  %6785 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6774, i64 -2
  %6786 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6785, i64 -1
  %6787 = bitcast %"class.v8::internal::compiler::Node"** %6786 to <2 x i64>*
  store <2 x i64> %6782, <2 x i64>* %6787, align 8, !alias.scope !224, !noalias !221
  br label %6788

6788:                                             ; preds = %6766, %6769
  %6789 = icmp eq i64 %6696, %6712
  br i1 %6789, label %6860, label %6790

6790:                                             ; preds = %6788, %6698, %6691
  %6791 = phi %"class.v8::internal::compiler::Node"** [ %6680, %6698 ], [ %6680, %6691 ], [ %6714, %6788 ]
  %6792 = phi %"class.v8::internal::compiler::Node"** [ %6689, %6698 ], [ %6689, %6691 ], [ %6716, %6788 ]
  %6793 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6792, i64 -1
  %6794 = ptrtoint %"class.v8::internal::compiler::Node"** %6793 to i64
  %6795 = sub i64 %6794, %6688
  %6796 = lshr i64 %6795, 3
  %6797 = add nuw nsw i64 %6796, 1
  %6798 = and i64 %6797, 7
  %6799 = icmp eq i64 %6798, 0
  br i1 %6799, label %6811, label %6800

6800:                                             ; preds = %6790, %6800
  %6801 = phi %"class.v8::internal::compiler::Node"** [ %6804, %6800 ], [ %6791, %6790 ]
  %6802 = phi %"class.v8::internal::compiler::Node"** [ %6805, %6800 ], [ %6792, %6790 ]
  %6803 = phi i64 [ %6809, %6800 ], [ %6798, %6790 ]
  %6804 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6801, i64 -1
  %6805 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6802, i64 -1
  %6806 = bitcast %"class.v8::internal::compiler::Node"** %6805 to i64*
  %6807 = load i64, i64* %6806, align 8
  %6808 = bitcast %"class.v8::internal::compiler::Node"** %6804 to i64*
  store i64 %6807, i64* %6808, align 8
  %6809 = add i64 %6803, -1
  %6810 = icmp eq i64 %6809, 0
  br i1 %6810, label %6811, label %6800, !llvm.loop !227

6811:                                             ; preds = %6800, %6790
  %6812 = phi %"class.v8::internal::compiler::Node"** [ undef, %6790 ], [ %6804, %6800 ]
  %6813 = phi %"class.v8::internal::compiler::Node"** [ %6791, %6790 ], [ %6804, %6800 ]
  %6814 = phi %"class.v8::internal::compiler::Node"** [ %6792, %6790 ], [ %6805, %6800 ]
  %6815 = icmp ult i64 %6795, 56
  br i1 %6815, label %6860, label %6816

6816:                                             ; preds = %6811, %6816
  %6817 = phi %"class.v8::internal::compiler::Node"** [ %6854, %6816 ], [ %6813, %6811 ]
  %6818 = phi %"class.v8::internal::compiler::Node"** [ %6855, %6816 ], [ %6814, %6811 ]
  %6819 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -1
  %6820 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -1
  %6821 = bitcast %"class.v8::internal::compiler::Node"** %6820 to i64*
  %6822 = load i64, i64* %6821, align 8
  %6823 = bitcast %"class.v8::internal::compiler::Node"** %6819 to i64*
  store i64 %6822, i64* %6823, align 8
  %6824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -2
  %6825 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -2
  %6826 = bitcast %"class.v8::internal::compiler::Node"** %6825 to i64*
  %6827 = load i64, i64* %6826, align 8
  %6828 = bitcast %"class.v8::internal::compiler::Node"** %6824 to i64*
  store i64 %6827, i64* %6828, align 8
  %6829 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -3
  %6830 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -3
  %6831 = bitcast %"class.v8::internal::compiler::Node"** %6830 to i64*
  %6832 = load i64, i64* %6831, align 8
  %6833 = bitcast %"class.v8::internal::compiler::Node"** %6829 to i64*
  store i64 %6832, i64* %6833, align 8
  %6834 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -4
  %6835 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -4
  %6836 = bitcast %"class.v8::internal::compiler::Node"** %6835 to i64*
  %6837 = load i64, i64* %6836, align 8
  %6838 = bitcast %"class.v8::internal::compiler::Node"** %6834 to i64*
  store i64 %6837, i64* %6838, align 8
  %6839 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -5
  %6840 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -5
  %6841 = bitcast %"class.v8::internal::compiler::Node"** %6840 to i64*
  %6842 = load i64, i64* %6841, align 8
  %6843 = bitcast %"class.v8::internal::compiler::Node"** %6839 to i64*
  store i64 %6842, i64* %6843, align 8
  %6844 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -6
  %6845 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -6
  %6846 = bitcast %"class.v8::internal::compiler::Node"** %6845 to i64*
  %6847 = load i64, i64* %6846, align 8
  %6848 = bitcast %"class.v8::internal::compiler::Node"** %6844 to i64*
  store i64 %6847, i64* %6848, align 8
  %6849 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -7
  %6850 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -7
  %6851 = bitcast %"class.v8::internal::compiler::Node"** %6850 to i64*
  %6852 = load i64, i64* %6851, align 8
  %6853 = bitcast %"class.v8::internal::compiler::Node"** %6849 to i64*
  store i64 %6852, i64* %6853, align 8
  %6854 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6817, i64 -8
  %6855 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6818, i64 -8
  %6856 = bitcast %"class.v8::internal::compiler::Node"** %6855 to i64*
  %6857 = load i64, i64* %6856, align 8
  %6858 = bitcast %"class.v8::internal::compiler::Node"** %6854 to i64*
  store i64 %6857, i64* %6858, align 8
  %6859 = icmp eq %"class.v8::internal::compiler::Node"** %6855, %6687
  br i1 %6859, label %6860, label %6816, !llvm.loop !228

6860:                                             ; preds = %6811, %6816, %6788, %6676
  %6861 = phi %"class.v8::internal::compiler::Node"** [ %6680, %6676 ], [ %6714, %6788 ], [ %6812, %6811 ], [ %6854, %6816 ]
  %6862 = ptrtoint %"class.v8::internal::compiler::Node"** %6861 to i64
  store i64 %6862, i64* %6638, align 8
  store i64 %6685, i64* %6637, align 8
  store i64 %6682, i64* %6647, align 8
  br label %6863

6863:                                             ; preds = %6860, %6630, %6618
  %6864 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 32
  %6865 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6864, align 8
  %6866 = icmp eq %"class.v8::internal::compiler::Node"* %6865, null
  %6867 = ptrtoint %"class.v8::internal::compiler::Node"* %6865 to i64
  br i1 %6866, label %7108, label %6868

6868:                                             ; preds = %6863
  %6869 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %6870 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6869, align 8
  %6871 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6872 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6871, align 8
  %6873 = icmp eq %"class.v8::internal::compiler::Node"** %6870, %6872
  %6874 = ptrtoint %"class.v8::internal::compiler::Node"** %6872 to i64
  br i1 %6873, label %6880, label %6875

6875:                                             ; preds = %6868
  %6876 = bitcast %"class.v8::internal::compiler::Node"** %6870 to i64*
  store i64 %6867, i64* %6876, align 8
  %6877 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6870, i64 1
  %6878 = ptrtoint %"class.v8::internal::compiler::Node"** %6877 to i64
  %6879 = bitcast %"class.v8::internal::compiler::Node"*** %6869 to i64*
  store i64 %6878, i64* %6879, align 8
  br label %7108

6880:                                             ; preds = %6868
  %6881 = ptrtoint %"class.v8::internal::compiler::Node"** %6870 to i64
  %6882 = bitcast %"class.v8::internal::compiler::Node"*** %6869 to i64*
  %6883 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %6884 = load i64, i64* %6883, align 8
  %6885 = sub i64 %6881, %6884
  %6886 = ashr exact i64 %6885, 3
  %6887 = add nsw i64 %6886, 1
  %6888 = icmp ugt i64 %6887, 268435455
  br i1 %6888, label %6889, label %6891

6889:                                             ; preds = %6880
  %6890 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %6890) #6
  unreachable

6891:                                             ; preds = %6880
  %6892 = bitcast %"class.v8::internal::compiler::Node"*** %6871 to i64*
  %6893 = sub i64 %6874, %6884
  %6894 = ashr exact i64 %6893, 3
  %6895 = icmp ult i64 %6894, 134217727
  br i1 %6895, label %6896, label %6901

6896:                                             ; preds = %6891
  %6897 = ashr exact i64 %6893, 2
  %6898 = icmp ult i64 %6897, %6887
  %6899 = select i1 %6898, i64 %6887, i64 %6897
  %6900 = icmp eq i64 %6899, 0
  br i1 %6900, label %6921, label %6901

6901:                                             ; preds = %6896, %6891
  %6902 = phi i64 [ %6899, %6896 ], [ 268435455, %6891 ]
  %6903 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %6904 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %6903, align 8
  %6905 = shl i64 %6902, 3
  %6906 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6904, i64 0, i32 2
  %6907 = load i64, i64* %6906, align 8
  %6908 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6904, i64 0, i32 3
  %6909 = load i64, i64* %6908, align 8
  %6910 = sub i64 %6909, %6907
  %6911 = icmp ugt i64 %6905, %6910
  br i1 %6911, label %6912, label %6914, !prof !2

6912:                                             ; preds = %6901
  %6913 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6904, i64 %6905) #5
  br label %6916

6914:                                             ; preds = %6901
  %6915 = add i64 %6907, %6905
  store i64 %6915, i64* %6906, align 8
  br label %6916

6916:                                             ; preds = %6914, %6912
  %6917 = phi i64 [ %6913, %6912 ], [ %6907, %6914 ]
  %6918 = inttoptr i64 %6917 to %"class.v8::internal::compiler::Node"**
  %6919 = bitcast %"class.v8::internal::compiler::Node"** %6864 to i64*
  %6920 = load i64, i64* %6919, align 8
  br label %6921

6921:                                             ; preds = %6896, %6916
  %6922 = phi i64 [ %6920, %6916 ], [ %6867, %6896 ]
  %6923 = phi i64 [ %6902, %6916 ], [ 0, %6896 ]
  %6924 = phi %"class.v8::internal::compiler::Node"** [ %6918, %6916 ], [ null, %6896 ]
  %6925 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6924, i64 %6886
  %6926 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6924, i64 %6923
  %6927 = ptrtoint %"class.v8::internal::compiler::Node"** %6926 to i64
  %6928 = bitcast %"class.v8::internal::compiler::Node"** %6925 to i64*
  store i64 %6922, i64* %6928, align 8
  %6929 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6925, i64 1
  %6930 = ptrtoint %"class.v8::internal::compiler::Node"** %6929 to i64
  %6931 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %6932 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6931, align 8
  %6933 = ptrtoint %"class.v8::internal::compiler::Node"** %6932 to i64
  %6934 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %6869, align 8
  %6935 = icmp eq %"class.v8::internal::compiler::Node"** %6934, %6932
  br i1 %6935, label %7105, label %6936

6936:                                             ; preds = %6921
  %6937 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 -1
  %6938 = ptrtoint %"class.v8::internal::compiler::Node"** %6937 to i64
  %6939 = sub i64 %6938, %6933
  %6940 = lshr i64 %6939, 3
  %6941 = add nuw nsw i64 %6940, 1
  %6942 = icmp ult i64 %6941, 4
  br i1 %6942, label %7035, label %6943

6943:                                             ; preds = %6936
  %6944 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 -1
  %6945 = ptrtoint %"class.v8::internal::compiler::Node"** %6944 to i64
  %6946 = sub i64 %6945, %6933
  %6947 = lshr i64 %6946, 3
  %6948 = xor i64 %6947, -1
  %6949 = add nsw i64 %6886, %6948
  %6950 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6924, i64 %6949
  %6951 = xor i64 %6947, -1
  %6952 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 %6951
  %6953 = icmp ult %"class.v8::internal::compiler::Node"** %6950, %6934
  %6954 = icmp ult %"class.v8::internal::compiler::Node"** %6952, %6925
  %6955 = and i1 %6953, %6954
  br i1 %6955, label %7035, label %6956

6956:                                             ; preds = %6943
  %6957 = and i64 %6941, 4611686018427387900
  %6958 = sub nsw i64 0, %6957
  %6959 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6925, i64 %6958
  %6960 = sub nsw i64 0, %6957
  %6961 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 %6960
  %6962 = add nsw i64 %6957, -4
  %6963 = lshr exact i64 %6962, 2
  %6964 = add nuw nsw i64 %6963, 1
  %6965 = and i64 %6964, 1
  %6966 = icmp eq i64 %6962, 0
  br i1 %6966, label %7011, label %6967

6967:                                             ; preds = %6956
  %6968 = sub nuw nsw i64 %6964, %6965
  %6969 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6925, i64 -1
  %6970 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 -1
  %6971 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6925, i64 -1
  %6972 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 -1
  br label %6973

6973:                                             ; preds = %6973, %6967
  %6974 = phi i64 [ 0, %6967 ], [ %7008, %6973 ]
  %6975 = phi i64 [ %6968, %6967 ], [ %7009, %6973 ]
  %6976 = sub i64 0, %6974
  %6977 = sub i64 0, %6974
  %6978 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6969, i64 %6976
  %6979 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6970, i64 %6977
  %6980 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6979, i64 -1
  %6981 = bitcast %"class.v8::internal::compiler::Node"** %6980 to <2 x i64>*
  %6982 = load <2 x i64>, <2 x i64>* %6981, align 8, !alias.scope !229
  %6983 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6979, i64 -2
  %6984 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6983, i64 -1
  %6985 = bitcast %"class.v8::internal::compiler::Node"** %6984 to <2 x i64>*
  %6986 = load <2 x i64>, <2 x i64>* %6985, align 8, !alias.scope !229
  %6987 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6978, i64 -1
  %6988 = bitcast %"class.v8::internal::compiler::Node"** %6987 to <2 x i64>*
  store <2 x i64> %6982, <2 x i64>* %6988, align 8, !alias.scope !232, !noalias !229
  %6989 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6978, i64 -2
  %6990 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6989, i64 -1
  %6991 = bitcast %"class.v8::internal::compiler::Node"** %6990 to <2 x i64>*
  store <2 x i64> %6986, <2 x i64>* %6991, align 8, !alias.scope !232, !noalias !229
  %6992 = sub nuw nsw i64 -4, %6974
  %6993 = sub nuw nsw i64 -4, %6974
  %6994 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6971, i64 %6992
  %6995 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6972, i64 %6993
  %6996 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6995, i64 -1
  %6997 = bitcast %"class.v8::internal::compiler::Node"** %6996 to <2 x i64>*
  %6998 = load <2 x i64>, <2 x i64>* %6997, align 8, !alias.scope !229
  %6999 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6995, i64 -2
  %7000 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6999, i64 -1
  %7001 = bitcast %"class.v8::internal::compiler::Node"** %7000 to <2 x i64>*
  %7002 = load <2 x i64>, <2 x i64>* %7001, align 8, !alias.scope !229
  %7003 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6994, i64 -1
  %7004 = bitcast %"class.v8::internal::compiler::Node"** %7003 to <2 x i64>*
  store <2 x i64> %6998, <2 x i64>* %7004, align 8, !alias.scope !232, !noalias !229
  %7005 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6994, i64 -2
  %7006 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7005, i64 -1
  %7007 = bitcast %"class.v8::internal::compiler::Node"** %7006 to <2 x i64>*
  store <2 x i64> %7002, <2 x i64>* %7007, align 8, !alias.scope !232, !noalias !229
  %7008 = add i64 %6974, 8
  %7009 = add i64 %6975, -2
  %7010 = icmp eq i64 %7009, 0
  br i1 %7010, label %7011, label %6973, !llvm.loop !234

7011:                                             ; preds = %6973, %6956
  %7012 = phi i64 [ 0, %6956 ], [ %7008, %6973 ]
  %7013 = icmp eq i64 %6965, 0
  br i1 %7013, label %7033, label %7014

7014:                                             ; preds = %7011
  %7015 = sub i64 0, %7012
  %7016 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6925, i64 -1
  %7017 = sub i64 0, %7012
  %7018 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %6934, i64 -1
  %7019 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7016, i64 %7015
  %7020 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7018, i64 %7017
  %7021 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7020, i64 -1
  %7022 = bitcast %"class.v8::internal::compiler::Node"** %7021 to <2 x i64>*
  %7023 = load <2 x i64>, <2 x i64>* %7022, align 8, !alias.scope !229
  %7024 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7020, i64 -2
  %7025 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7024, i64 -1
  %7026 = bitcast %"class.v8::internal::compiler::Node"** %7025 to <2 x i64>*
  %7027 = load <2 x i64>, <2 x i64>* %7026, align 8, !alias.scope !229
  %7028 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7019, i64 -1
  %7029 = bitcast %"class.v8::internal::compiler::Node"** %7028 to <2 x i64>*
  store <2 x i64> %7023, <2 x i64>* %7029, align 8, !alias.scope !232, !noalias !229
  %7030 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7019, i64 -2
  %7031 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7030, i64 -1
  %7032 = bitcast %"class.v8::internal::compiler::Node"** %7031 to <2 x i64>*
  store <2 x i64> %7027, <2 x i64>* %7032, align 8, !alias.scope !232, !noalias !229
  br label %7033

7033:                                             ; preds = %7011, %7014
  %7034 = icmp eq i64 %6941, %6957
  br i1 %7034, label %7105, label %7035

7035:                                             ; preds = %7033, %6943, %6936
  %7036 = phi %"class.v8::internal::compiler::Node"** [ %6925, %6943 ], [ %6925, %6936 ], [ %6959, %7033 ]
  %7037 = phi %"class.v8::internal::compiler::Node"** [ %6934, %6943 ], [ %6934, %6936 ], [ %6961, %7033 ]
  %7038 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7037, i64 -1
  %7039 = ptrtoint %"class.v8::internal::compiler::Node"** %7038 to i64
  %7040 = sub i64 %7039, %6933
  %7041 = lshr i64 %7040, 3
  %7042 = add nuw nsw i64 %7041, 1
  %7043 = and i64 %7042, 7
  %7044 = icmp eq i64 %7043, 0
  br i1 %7044, label %7056, label %7045

7045:                                             ; preds = %7035, %7045
  %7046 = phi %"class.v8::internal::compiler::Node"** [ %7049, %7045 ], [ %7036, %7035 ]
  %7047 = phi %"class.v8::internal::compiler::Node"** [ %7050, %7045 ], [ %7037, %7035 ]
  %7048 = phi i64 [ %7054, %7045 ], [ %7043, %7035 ]
  %7049 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7046, i64 -1
  %7050 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7047, i64 -1
  %7051 = bitcast %"class.v8::internal::compiler::Node"** %7050 to i64*
  %7052 = load i64, i64* %7051, align 8
  %7053 = bitcast %"class.v8::internal::compiler::Node"** %7049 to i64*
  store i64 %7052, i64* %7053, align 8
  %7054 = add i64 %7048, -1
  %7055 = icmp eq i64 %7054, 0
  br i1 %7055, label %7056, label %7045, !llvm.loop !235

7056:                                             ; preds = %7045, %7035
  %7057 = phi %"class.v8::internal::compiler::Node"** [ undef, %7035 ], [ %7049, %7045 ]
  %7058 = phi %"class.v8::internal::compiler::Node"** [ %7036, %7035 ], [ %7049, %7045 ]
  %7059 = phi %"class.v8::internal::compiler::Node"** [ %7037, %7035 ], [ %7050, %7045 ]
  %7060 = icmp ult i64 %7040, 56
  br i1 %7060, label %7105, label %7061

7061:                                             ; preds = %7056, %7061
  %7062 = phi %"class.v8::internal::compiler::Node"** [ %7099, %7061 ], [ %7058, %7056 ]
  %7063 = phi %"class.v8::internal::compiler::Node"** [ %7100, %7061 ], [ %7059, %7056 ]
  %7064 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -1
  %7065 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -1
  %7066 = bitcast %"class.v8::internal::compiler::Node"** %7065 to i64*
  %7067 = load i64, i64* %7066, align 8
  %7068 = bitcast %"class.v8::internal::compiler::Node"** %7064 to i64*
  store i64 %7067, i64* %7068, align 8
  %7069 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -2
  %7070 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -2
  %7071 = bitcast %"class.v8::internal::compiler::Node"** %7070 to i64*
  %7072 = load i64, i64* %7071, align 8
  %7073 = bitcast %"class.v8::internal::compiler::Node"** %7069 to i64*
  store i64 %7072, i64* %7073, align 8
  %7074 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -3
  %7075 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -3
  %7076 = bitcast %"class.v8::internal::compiler::Node"** %7075 to i64*
  %7077 = load i64, i64* %7076, align 8
  %7078 = bitcast %"class.v8::internal::compiler::Node"** %7074 to i64*
  store i64 %7077, i64* %7078, align 8
  %7079 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -4
  %7080 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -4
  %7081 = bitcast %"class.v8::internal::compiler::Node"** %7080 to i64*
  %7082 = load i64, i64* %7081, align 8
  %7083 = bitcast %"class.v8::internal::compiler::Node"** %7079 to i64*
  store i64 %7082, i64* %7083, align 8
  %7084 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -5
  %7085 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -5
  %7086 = bitcast %"class.v8::internal::compiler::Node"** %7085 to i64*
  %7087 = load i64, i64* %7086, align 8
  %7088 = bitcast %"class.v8::internal::compiler::Node"** %7084 to i64*
  store i64 %7087, i64* %7088, align 8
  %7089 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -6
  %7090 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -6
  %7091 = bitcast %"class.v8::internal::compiler::Node"** %7090 to i64*
  %7092 = load i64, i64* %7091, align 8
  %7093 = bitcast %"class.v8::internal::compiler::Node"** %7089 to i64*
  store i64 %7092, i64* %7093, align 8
  %7094 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -7
  %7095 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -7
  %7096 = bitcast %"class.v8::internal::compiler::Node"** %7095 to i64*
  %7097 = load i64, i64* %7096, align 8
  %7098 = bitcast %"class.v8::internal::compiler::Node"** %7094 to i64*
  store i64 %7097, i64* %7098, align 8
  %7099 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7062, i64 -8
  %7100 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7063, i64 -8
  %7101 = bitcast %"class.v8::internal::compiler::Node"** %7100 to i64*
  %7102 = load i64, i64* %7101, align 8
  %7103 = bitcast %"class.v8::internal::compiler::Node"** %7099 to i64*
  store i64 %7102, i64* %7103, align 8
  %7104 = icmp eq %"class.v8::internal::compiler::Node"** %7100, %6932
  br i1 %7104, label %7105, label %7061, !llvm.loop !236

7105:                                             ; preds = %7056, %7061, %7033, %6921
  %7106 = phi %"class.v8::internal::compiler::Node"** [ %6925, %6921 ], [ %6959, %7033 ], [ %7057, %7056 ], [ %7099, %7061 ]
  %7107 = ptrtoint %"class.v8::internal::compiler::Node"** %7106 to i64
  store i64 %7107, i64* %6883, align 8
  store i64 %6930, i64* %6882, align 8
  store i64 %6927, i64* %6892, align 8
  br label %7108

7108:                                             ; preds = %7105, %6875, %6863
  %7109 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 33
  %7110 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7109, align 8
  %7111 = icmp eq %"class.v8::internal::compiler::Node"* %7110, null
  %7112 = ptrtoint %"class.v8::internal::compiler::Node"* %7110 to i64
  br i1 %7111, label %7353, label %7113

7113:                                             ; preds = %7108
  %7114 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %7115 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7114, align 8
  %7116 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7117 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7116, align 8
  %7118 = icmp eq %"class.v8::internal::compiler::Node"** %7115, %7117
  %7119 = ptrtoint %"class.v8::internal::compiler::Node"** %7117 to i64
  br i1 %7118, label %7125, label %7120

7120:                                             ; preds = %7113
  %7121 = bitcast %"class.v8::internal::compiler::Node"** %7115 to i64*
  store i64 %7112, i64* %7121, align 8
  %7122 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7115, i64 1
  %7123 = ptrtoint %"class.v8::internal::compiler::Node"** %7122 to i64
  %7124 = bitcast %"class.v8::internal::compiler::Node"*** %7114 to i64*
  store i64 %7123, i64* %7124, align 8
  br label %7353

7125:                                             ; preds = %7113
  %7126 = ptrtoint %"class.v8::internal::compiler::Node"** %7115 to i64
  %7127 = bitcast %"class.v8::internal::compiler::Node"*** %7114 to i64*
  %7128 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %7129 = load i64, i64* %7128, align 8
  %7130 = sub i64 %7126, %7129
  %7131 = ashr exact i64 %7130, 3
  %7132 = add nsw i64 %7131, 1
  %7133 = icmp ugt i64 %7132, 268435455
  br i1 %7133, label %7134, label %7136

7134:                                             ; preds = %7125
  %7135 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %7135) #6
  unreachable

7136:                                             ; preds = %7125
  %7137 = bitcast %"class.v8::internal::compiler::Node"*** %7116 to i64*
  %7138 = sub i64 %7119, %7129
  %7139 = ashr exact i64 %7138, 3
  %7140 = icmp ult i64 %7139, 134217727
  br i1 %7140, label %7141, label %7146

7141:                                             ; preds = %7136
  %7142 = ashr exact i64 %7138, 2
  %7143 = icmp ult i64 %7142, %7132
  %7144 = select i1 %7143, i64 %7132, i64 %7142
  %7145 = icmp eq i64 %7144, 0
  br i1 %7145, label %7166, label %7146

7146:                                             ; preds = %7141, %7136
  %7147 = phi i64 [ %7144, %7141 ], [ 268435455, %7136 ]
  %7148 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %7149 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7148, align 8
  %7150 = shl i64 %7147, 3
  %7151 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7149, i64 0, i32 2
  %7152 = load i64, i64* %7151, align 8
  %7153 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7149, i64 0, i32 3
  %7154 = load i64, i64* %7153, align 8
  %7155 = sub i64 %7154, %7152
  %7156 = icmp ugt i64 %7150, %7155
  br i1 %7156, label %7157, label %7159, !prof !2

7157:                                             ; preds = %7146
  %7158 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7149, i64 %7150) #5
  br label %7161

7159:                                             ; preds = %7146
  %7160 = add i64 %7152, %7150
  store i64 %7160, i64* %7151, align 8
  br label %7161

7161:                                             ; preds = %7159, %7157
  %7162 = phi i64 [ %7158, %7157 ], [ %7152, %7159 ]
  %7163 = inttoptr i64 %7162 to %"class.v8::internal::compiler::Node"**
  %7164 = bitcast %"class.v8::internal::compiler::Node"** %7109 to i64*
  %7165 = load i64, i64* %7164, align 8
  br label %7166

7166:                                             ; preds = %7141, %7161
  %7167 = phi i64 [ %7165, %7161 ], [ %7112, %7141 ]
  %7168 = phi i64 [ %7147, %7161 ], [ 0, %7141 ]
  %7169 = phi %"class.v8::internal::compiler::Node"** [ %7163, %7161 ], [ null, %7141 ]
  %7170 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7169, i64 %7131
  %7171 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7169, i64 %7168
  %7172 = ptrtoint %"class.v8::internal::compiler::Node"** %7171 to i64
  %7173 = bitcast %"class.v8::internal::compiler::Node"** %7170 to i64*
  store i64 %7167, i64* %7173, align 8
  %7174 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7170, i64 1
  %7175 = ptrtoint %"class.v8::internal::compiler::Node"** %7174 to i64
  %7176 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %7177 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7176, align 8
  %7178 = ptrtoint %"class.v8::internal::compiler::Node"** %7177 to i64
  %7179 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7114, align 8
  %7180 = icmp eq %"class.v8::internal::compiler::Node"** %7179, %7177
  br i1 %7180, label %7350, label %7181

7181:                                             ; preds = %7166
  %7182 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 -1
  %7183 = ptrtoint %"class.v8::internal::compiler::Node"** %7182 to i64
  %7184 = sub i64 %7183, %7178
  %7185 = lshr i64 %7184, 3
  %7186 = add nuw nsw i64 %7185, 1
  %7187 = icmp ult i64 %7186, 4
  br i1 %7187, label %7280, label %7188

7188:                                             ; preds = %7181
  %7189 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 -1
  %7190 = ptrtoint %"class.v8::internal::compiler::Node"** %7189 to i64
  %7191 = sub i64 %7190, %7178
  %7192 = lshr i64 %7191, 3
  %7193 = xor i64 %7192, -1
  %7194 = add nsw i64 %7131, %7193
  %7195 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7169, i64 %7194
  %7196 = xor i64 %7192, -1
  %7197 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 %7196
  %7198 = icmp ult %"class.v8::internal::compiler::Node"** %7195, %7179
  %7199 = icmp ult %"class.v8::internal::compiler::Node"** %7197, %7170
  %7200 = and i1 %7198, %7199
  br i1 %7200, label %7280, label %7201

7201:                                             ; preds = %7188
  %7202 = and i64 %7186, 4611686018427387900
  %7203 = sub nsw i64 0, %7202
  %7204 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7170, i64 %7203
  %7205 = sub nsw i64 0, %7202
  %7206 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 %7205
  %7207 = add nsw i64 %7202, -4
  %7208 = lshr exact i64 %7207, 2
  %7209 = add nuw nsw i64 %7208, 1
  %7210 = and i64 %7209, 1
  %7211 = icmp eq i64 %7207, 0
  br i1 %7211, label %7256, label %7212

7212:                                             ; preds = %7201
  %7213 = sub nuw nsw i64 %7209, %7210
  %7214 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7170, i64 -1
  %7215 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 -1
  %7216 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7170, i64 -1
  %7217 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 -1
  br label %7218

7218:                                             ; preds = %7218, %7212
  %7219 = phi i64 [ 0, %7212 ], [ %7253, %7218 ]
  %7220 = phi i64 [ %7213, %7212 ], [ %7254, %7218 ]
  %7221 = sub i64 0, %7219
  %7222 = sub i64 0, %7219
  %7223 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7214, i64 %7221
  %7224 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7215, i64 %7222
  %7225 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7224, i64 -1
  %7226 = bitcast %"class.v8::internal::compiler::Node"** %7225 to <2 x i64>*
  %7227 = load <2 x i64>, <2 x i64>* %7226, align 8, !alias.scope !237
  %7228 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7224, i64 -2
  %7229 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7228, i64 -1
  %7230 = bitcast %"class.v8::internal::compiler::Node"** %7229 to <2 x i64>*
  %7231 = load <2 x i64>, <2 x i64>* %7230, align 8, !alias.scope !237
  %7232 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7223, i64 -1
  %7233 = bitcast %"class.v8::internal::compiler::Node"** %7232 to <2 x i64>*
  store <2 x i64> %7227, <2 x i64>* %7233, align 8, !alias.scope !240, !noalias !237
  %7234 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7223, i64 -2
  %7235 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7234, i64 -1
  %7236 = bitcast %"class.v8::internal::compiler::Node"** %7235 to <2 x i64>*
  store <2 x i64> %7231, <2 x i64>* %7236, align 8, !alias.scope !240, !noalias !237
  %7237 = sub nuw nsw i64 -4, %7219
  %7238 = sub nuw nsw i64 -4, %7219
  %7239 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7216, i64 %7237
  %7240 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7217, i64 %7238
  %7241 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7240, i64 -1
  %7242 = bitcast %"class.v8::internal::compiler::Node"** %7241 to <2 x i64>*
  %7243 = load <2 x i64>, <2 x i64>* %7242, align 8, !alias.scope !237
  %7244 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7240, i64 -2
  %7245 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7244, i64 -1
  %7246 = bitcast %"class.v8::internal::compiler::Node"** %7245 to <2 x i64>*
  %7247 = load <2 x i64>, <2 x i64>* %7246, align 8, !alias.scope !237
  %7248 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7239, i64 -1
  %7249 = bitcast %"class.v8::internal::compiler::Node"** %7248 to <2 x i64>*
  store <2 x i64> %7243, <2 x i64>* %7249, align 8, !alias.scope !240, !noalias !237
  %7250 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7239, i64 -2
  %7251 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7250, i64 -1
  %7252 = bitcast %"class.v8::internal::compiler::Node"** %7251 to <2 x i64>*
  store <2 x i64> %7247, <2 x i64>* %7252, align 8, !alias.scope !240, !noalias !237
  %7253 = add i64 %7219, 8
  %7254 = add i64 %7220, -2
  %7255 = icmp eq i64 %7254, 0
  br i1 %7255, label %7256, label %7218, !llvm.loop !242

7256:                                             ; preds = %7218, %7201
  %7257 = phi i64 [ 0, %7201 ], [ %7253, %7218 ]
  %7258 = icmp eq i64 %7210, 0
  br i1 %7258, label %7278, label %7259

7259:                                             ; preds = %7256
  %7260 = sub i64 0, %7257
  %7261 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7170, i64 -1
  %7262 = sub i64 0, %7257
  %7263 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7179, i64 -1
  %7264 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7261, i64 %7260
  %7265 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7263, i64 %7262
  %7266 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7265, i64 -1
  %7267 = bitcast %"class.v8::internal::compiler::Node"** %7266 to <2 x i64>*
  %7268 = load <2 x i64>, <2 x i64>* %7267, align 8, !alias.scope !237
  %7269 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7265, i64 -2
  %7270 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7269, i64 -1
  %7271 = bitcast %"class.v8::internal::compiler::Node"** %7270 to <2 x i64>*
  %7272 = load <2 x i64>, <2 x i64>* %7271, align 8, !alias.scope !237
  %7273 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7264, i64 -1
  %7274 = bitcast %"class.v8::internal::compiler::Node"** %7273 to <2 x i64>*
  store <2 x i64> %7268, <2 x i64>* %7274, align 8, !alias.scope !240, !noalias !237
  %7275 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7264, i64 -2
  %7276 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7275, i64 -1
  %7277 = bitcast %"class.v8::internal::compiler::Node"** %7276 to <2 x i64>*
  store <2 x i64> %7272, <2 x i64>* %7277, align 8, !alias.scope !240, !noalias !237
  br label %7278

7278:                                             ; preds = %7256, %7259
  %7279 = icmp eq i64 %7186, %7202
  br i1 %7279, label %7350, label %7280

7280:                                             ; preds = %7278, %7188, %7181
  %7281 = phi %"class.v8::internal::compiler::Node"** [ %7170, %7188 ], [ %7170, %7181 ], [ %7204, %7278 ]
  %7282 = phi %"class.v8::internal::compiler::Node"** [ %7179, %7188 ], [ %7179, %7181 ], [ %7206, %7278 ]
  %7283 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7282, i64 -1
  %7284 = ptrtoint %"class.v8::internal::compiler::Node"** %7283 to i64
  %7285 = sub i64 %7284, %7178
  %7286 = lshr i64 %7285, 3
  %7287 = add nuw nsw i64 %7286, 1
  %7288 = and i64 %7287, 7
  %7289 = icmp eq i64 %7288, 0
  br i1 %7289, label %7301, label %7290

7290:                                             ; preds = %7280, %7290
  %7291 = phi %"class.v8::internal::compiler::Node"** [ %7294, %7290 ], [ %7281, %7280 ]
  %7292 = phi %"class.v8::internal::compiler::Node"** [ %7295, %7290 ], [ %7282, %7280 ]
  %7293 = phi i64 [ %7299, %7290 ], [ %7288, %7280 ]
  %7294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7291, i64 -1
  %7295 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7292, i64 -1
  %7296 = bitcast %"class.v8::internal::compiler::Node"** %7295 to i64*
  %7297 = load i64, i64* %7296, align 8
  %7298 = bitcast %"class.v8::internal::compiler::Node"** %7294 to i64*
  store i64 %7297, i64* %7298, align 8
  %7299 = add i64 %7293, -1
  %7300 = icmp eq i64 %7299, 0
  br i1 %7300, label %7301, label %7290, !llvm.loop !243

7301:                                             ; preds = %7290, %7280
  %7302 = phi %"class.v8::internal::compiler::Node"** [ undef, %7280 ], [ %7294, %7290 ]
  %7303 = phi %"class.v8::internal::compiler::Node"** [ %7281, %7280 ], [ %7294, %7290 ]
  %7304 = phi %"class.v8::internal::compiler::Node"** [ %7282, %7280 ], [ %7295, %7290 ]
  %7305 = icmp ult i64 %7285, 56
  br i1 %7305, label %7350, label %7306

7306:                                             ; preds = %7301, %7306
  %7307 = phi %"class.v8::internal::compiler::Node"** [ %7344, %7306 ], [ %7303, %7301 ]
  %7308 = phi %"class.v8::internal::compiler::Node"** [ %7345, %7306 ], [ %7304, %7301 ]
  %7309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -1
  %7310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -1
  %7311 = bitcast %"class.v8::internal::compiler::Node"** %7310 to i64*
  %7312 = load i64, i64* %7311, align 8
  %7313 = bitcast %"class.v8::internal::compiler::Node"** %7309 to i64*
  store i64 %7312, i64* %7313, align 8
  %7314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -2
  %7315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -2
  %7316 = bitcast %"class.v8::internal::compiler::Node"** %7315 to i64*
  %7317 = load i64, i64* %7316, align 8
  %7318 = bitcast %"class.v8::internal::compiler::Node"** %7314 to i64*
  store i64 %7317, i64* %7318, align 8
  %7319 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -3
  %7320 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -3
  %7321 = bitcast %"class.v8::internal::compiler::Node"** %7320 to i64*
  %7322 = load i64, i64* %7321, align 8
  %7323 = bitcast %"class.v8::internal::compiler::Node"** %7319 to i64*
  store i64 %7322, i64* %7323, align 8
  %7324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -4
  %7325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -4
  %7326 = bitcast %"class.v8::internal::compiler::Node"** %7325 to i64*
  %7327 = load i64, i64* %7326, align 8
  %7328 = bitcast %"class.v8::internal::compiler::Node"** %7324 to i64*
  store i64 %7327, i64* %7328, align 8
  %7329 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -5
  %7330 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -5
  %7331 = bitcast %"class.v8::internal::compiler::Node"** %7330 to i64*
  %7332 = load i64, i64* %7331, align 8
  %7333 = bitcast %"class.v8::internal::compiler::Node"** %7329 to i64*
  store i64 %7332, i64* %7333, align 8
  %7334 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -6
  %7335 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -6
  %7336 = bitcast %"class.v8::internal::compiler::Node"** %7335 to i64*
  %7337 = load i64, i64* %7336, align 8
  %7338 = bitcast %"class.v8::internal::compiler::Node"** %7334 to i64*
  store i64 %7337, i64* %7338, align 8
  %7339 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -7
  %7340 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -7
  %7341 = bitcast %"class.v8::internal::compiler::Node"** %7340 to i64*
  %7342 = load i64, i64* %7341, align 8
  %7343 = bitcast %"class.v8::internal::compiler::Node"** %7339 to i64*
  store i64 %7342, i64* %7343, align 8
  %7344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7307, i64 -8
  %7345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7308, i64 -8
  %7346 = bitcast %"class.v8::internal::compiler::Node"** %7345 to i64*
  %7347 = load i64, i64* %7346, align 8
  %7348 = bitcast %"class.v8::internal::compiler::Node"** %7344 to i64*
  store i64 %7347, i64* %7348, align 8
  %7349 = icmp eq %"class.v8::internal::compiler::Node"** %7345, %7177
  br i1 %7349, label %7350, label %7306, !llvm.loop !244

7350:                                             ; preds = %7301, %7306, %7278, %7166
  %7351 = phi %"class.v8::internal::compiler::Node"** [ %7170, %7166 ], [ %7204, %7278 ], [ %7302, %7301 ], [ %7344, %7306 ]
  %7352 = ptrtoint %"class.v8::internal::compiler::Node"** %7351 to i64
  store i64 %7352, i64* %7128, align 8
  store i64 %7175, i64* %7127, align 8
  store i64 %7172, i64* %7137, align 8
  br label %7353

7353:                                             ; preds = %7350, %7120, %7108
  %7354 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 34
  %7355 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7354, align 8
  %7356 = icmp eq %"class.v8::internal::compiler::Node"* %7355, null
  %7357 = ptrtoint %"class.v8::internal::compiler::Node"* %7355 to i64
  br i1 %7356, label %7598, label %7358

7358:                                             ; preds = %7353
  %7359 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %7360 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7359, align 8
  %7361 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7362 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7361, align 8
  %7363 = icmp eq %"class.v8::internal::compiler::Node"** %7360, %7362
  %7364 = ptrtoint %"class.v8::internal::compiler::Node"** %7362 to i64
  br i1 %7363, label %7370, label %7365

7365:                                             ; preds = %7358
  %7366 = bitcast %"class.v8::internal::compiler::Node"** %7360 to i64*
  store i64 %7357, i64* %7366, align 8
  %7367 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7360, i64 1
  %7368 = ptrtoint %"class.v8::internal::compiler::Node"** %7367 to i64
  %7369 = bitcast %"class.v8::internal::compiler::Node"*** %7359 to i64*
  store i64 %7368, i64* %7369, align 8
  br label %7598

7370:                                             ; preds = %7358
  %7371 = ptrtoint %"class.v8::internal::compiler::Node"** %7360 to i64
  %7372 = bitcast %"class.v8::internal::compiler::Node"*** %7359 to i64*
  %7373 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %7374 = load i64, i64* %7373, align 8
  %7375 = sub i64 %7371, %7374
  %7376 = ashr exact i64 %7375, 3
  %7377 = add nsw i64 %7376, 1
  %7378 = icmp ugt i64 %7377, 268435455
  br i1 %7378, label %7379, label %7381

7379:                                             ; preds = %7370
  %7380 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %7380) #6
  unreachable

7381:                                             ; preds = %7370
  %7382 = bitcast %"class.v8::internal::compiler::Node"*** %7361 to i64*
  %7383 = sub i64 %7364, %7374
  %7384 = ashr exact i64 %7383, 3
  %7385 = icmp ult i64 %7384, 134217727
  br i1 %7385, label %7386, label %7391

7386:                                             ; preds = %7381
  %7387 = ashr exact i64 %7383, 2
  %7388 = icmp ult i64 %7387, %7377
  %7389 = select i1 %7388, i64 %7377, i64 %7387
  %7390 = icmp eq i64 %7389, 0
  br i1 %7390, label %7411, label %7391

7391:                                             ; preds = %7386, %7381
  %7392 = phi i64 [ %7389, %7386 ], [ 268435455, %7381 ]
  %7393 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %7394 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7393, align 8
  %7395 = shl i64 %7392, 3
  %7396 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7394, i64 0, i32 2
  %7397 = load i64, i64* %7396, align 8
  %7398 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7394, i64 0, i32 3
  %7399 = load i64, i64* %7398, align 8
  %7400 = sub i64 %7399, %7397
  %7401 = icmp ugt i64 %7395, %7400
  br i1 %7401, label %7402, label %7404, !prof !2

7402:                                             ; preds = %7391
  %7403 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7394, i64 %7395) #5
  br label %7406

7404:                                             ; preds = %7391
  %7405 = add i64 %7397, %7395
  store i64 %7405, i64* %7396, align 8
  br label %7406

7406:                                             ; preds = %7404, %7402
  %7407 = phi i64 [ %7403, %7402 ], [ %7397, %7404 ]
  %7408 = inttoptr i64 %7407 to %"class.v8::internal::compiler::Node"**
  %7409 = bitcast %"class.v8::internal::compiler::Node"** %7354 to i64*
  %7410 = load i64, i64* %7409, align 8
  br label %7411

7411:                                             ; preds = %7386, %7406
  %7412 = phi i64 [ %7410, %7406 ], [ %7357, %7386 ]
  %7413 = phi i64 [ %7392, %7406 ], [ 0, %7386 ]
  %7414 = phi %"class.v8::internal::compiler::Node"** [ %7408, %7406 ], [ null, %7386 ]
  %7415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7414, i64 %7376
  %7416 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7414, i64 %7413
  %7417 = ptrtoint %"class.v8::internal::compiler::Node"** %7416 to i64
  %7418 = bitcast %"class.v8::internal::compiler::Node"** %7415 to i64*
  store i64 %7412, i64* %7418, align 8
  %7419 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7415, i64 1
  %7420 = ptrtoint %"class.v8::internal::compiler::Node"** %7419 to i64
  %7421 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %7422 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7421, align 8
  %7423 = ptrtoint %"class.v8::internal::compiler::Node"** %7422 to i64
  %7424 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7359, align 8
  %7425 = icmp eq %"class.v8::internal::compiler::Node"** %7424, %7422
  br i1 %7425, label %7595, label %7426

7426:                                             ; preds = %7411
  %7427 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 -1
  %7428 = ptrtoint %"class.v8::internal::compiler::Node"** %7427 to i64
  %7429 = sub i64 %7428, %7423
  %7430 = lshr i64 %7429, 3
  %7431 = add nuw nsw i64 %7430, 1
  %7432 = icmp ult i64 %7431, 4
  br i1 %7432, label %7525, label %7433

7433:                                             ; preds = %7426
  %7434 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 -1
  %7435 = ptrtoint %"class.v8::internal::compiler::Node"** %7434 to i64
  %7436 = sub i64 %7435, %7423
  %7437 = lshr i64 %7436, 3
  %7438 = xor i64 %7437, -1
  %7439 = add nsw i64 %7376, %7438
  %7440 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7414, i64 %7439
  %7441 = xor i64 %7437, -1
  %7442 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 %7441
  %7443 = icmp ult %"class.v8::internal::compiler::Node"** %7440, %7424
  %7444 = icmp ult %"class.v8::internal::compiler::Node"** %7442, %7415
  %7445 = and i1 %7443, %7444
  br i1 %7445, label %7525, label %7446

7446:                                             ; preds = %7433
  %7447 = and i64 %7431, 4611686018427387900
  %7448 = sub nsw i64 0, %7447
  %7449 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7415, i64 %7448
  %7450 = sub nsw i64 0, %7447
  %7451 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 %7450
  %7452 = add nsw i64 %7447, -4
  %7453 = lshr exact i64 %7452, 2
  %7454 = add nuw nsw i64 %7453, 1
  %7455 = and i64 %7454, 1
  %7456 = icmp eq i64 %7452, 0
  br i1 %7456, label %7501, label %7457

7457:                                             ; preds = %7446
  %7458 = sub nuw nsw i64 %7454, %7455
  %7459 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7415, i64 -1
  %7460 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 -1
  %7461 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7415, i64 -1
  %7462 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 -1
  br label %7463

7463:                                             ; preds = %7463, %7457
  %7464 = phi i64 [ 0, %7457 ], [ %7498, %7463 ]
  %7465 = phi i64 [ %7458, %7457 ], [ %7499, %7463 ]
  %7466 = sub i64 0, %7464
  %7467 = sub i64 0, %7464
  %7468 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7459, i64 %7466
  %7469 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7460, i64 %7467
  %7470 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7469, i64 -1
  %7471 = bitcast %"class.v8::internal::compiler::Node"** %7470 to <2 x i64>*
  %7472 = load <2 x i64>, <2 x i64>* %7471, align 8, !alias.scope !245
  %7473 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7469, i64 -2
  %7474 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7473, i64 -1
  %7475 = bitcast %"class.v8::internal::compiler::Node"** %7474 to <2 x i64>*
  %7476 = load <2 x i64>, <2 x i64>* %7475, align 8, !alias.scope !245
  %7477 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7468, i64 -1
  %7478 = bitcast %"class.v8::internal::compiler::Node"** %7477 to <2 x i64>*
  store <2 x i64> %7472, <2 x i64>* %7478, align 8, !alias.scope !248, !noalias !245
  %7479 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7468, i64 -2
  %7480 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7479, i64 -1
  %7481 = bitcast %"class.v8::internal::compiler::Node"** %7480 to <2 x i64>*
  store <2 x i64> %7476, <2 x i64>* %7481, align 8, !alias.scope !248, !noalias !245
  %7482 = sub nuw nsw i64 -4, %7464
  %7483 = sub nuw nsw i64 -4, %7464
  %7484 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7461, i64 %7482
  %7485 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7462, i64 %7483
  %7486 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7485, i64 -1
  %7487 = bitcast %"class.v8::internal::compiler::Node"** %7486 to <2 x i64>*
  %7488 = load <2 x i64>, <2 x i64>* %7487, align 8, !alias.scope !245
  %7489 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7485, i64 -2
  %7490 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7489, i64 -1
  %7491 = bitcast %"class.v8::internal::compiler::Node"** %7490 to <2 x i64>*
  %7492 = load <2 x i64>, <2 x i64>* %7491, align 8, !alias.scope !245
  %7493 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7484, i64 -1
  %7494 = bitcast %"class.v8::internal::compiler::Node"** %7493 to <2 x i64>*
  store <2 x i64> %7488, <2 x i64>* %7494, align 8, !alias.scope !248, !noalias !245
  %7495 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7484, i64 -2
  %7496 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7495, i64 -1
  %7497 = bitcast %"class.v8::internal::compiler::Node"** %7496 to <2 x i64>*
  store <2 x i64> %7492, <2 x i64>* %7497, align 8, !alias.scope !248, !noalias !245
  %7498 = add i64 %7464, 8
  %7499 = add i64 %7465, -2
  %7500 = icmp eq i64 %7499, 0
  br i1 %7500, label %7501, label %7463, !llvm.loop !250

7501:                                             ; preds = %7463, %7446
  %7502 = phi i64 [ 0, %7446 ], [ %7498, %7463 ]
  %7503 = icmp eq i64 %7455, 0
  br i1 %7503, label %7523, label %7504

7504:                                             ; preds = %7501
  %7505 = sub i64 0, %7502
  %7506 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7415, i64 -1
  %7507 = sub i64 0, %7502
  %7508 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7424, i64 -1
  %7509 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7506, i64 %7505
  %7510 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7508, i64 %7507
  %7511 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7510, i64 -1
  %7512 = bitcast %"class.v8::internal::compiler::Node"** %7511 to <2 x i64>*
  %7513 = load <2 x i64>, <2 x i64>* %7512, align 8, !alias.scope !245
  %7514 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7510, i64 -2
  %7515 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7514, i64 -1
  %7516 = bitcast %"class.v8::internal::compiler::Node"** %7515 to <2 x i64>*
  %7517 = load <2 x i64>, <2 x i64>* %7516, align 8, !alias.scope !245
  %7518 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7509, i64 -1
  %7519 = bitcast %"class.v8::internal::compiler::Node"** %7518 to <2 x i64>*
  store <2 x i64> %7513, <2 x i64>* %7519, align 8, !alias.scope !248, !noalias !245
  %7520 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7509, i64 -2
  %7521 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7520, i64 -1
  %7522 = bitcast %"class.v8::internal::compiler::Node"** %7521 to <2 x i64>*
  store <2 x i64> %7517, <2 x i64>* %7522, align 8, !alias.scope !248, !noalias !245
  br label %7523

7523:                                             ; preds = %7501, %7504
  %7524 = icmp eq i64 %7431, %7447
  br i1 %7524, label %7595, label %7525

7525:                                             ; preds = %7523, %7433, %7426
  %7526 = phi %"class.v8::internal::compiler::Node"** [ %7415, %7433 ], [ %7415, %7426 ], [ %7449, %7523 ]
  %7527 = phi %"class.v8::internal::compiler::Node"** [ %7424, %7433 ], [ %7424, %7426 ], [ %7451, %7523 ]
  %7528 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7527, i64 -1
  %7529 = ptrtoint %"class.v8::internal::compiler::Node"** %7528 to i64
  %7530 = sub i64 %7529, %7423
  %7531 = lshr i64 %7530, 3
  %7532 = add nuw nsw i64 %7531, 1
  %7533 = and i64 %7532, 7
  %7534 = icmp eq i64 %7533, 0
  br i1 %7534, label %7546, label %7535

7535:                                             ; preds = %7525, %7535
  %7536 = phi %"class.v8::internal::compiler::Node"** [ %7539, %7535 ], [ %7526, %7525 ]
  %7537 = phi %"class.v8::internal::compiler::Node"** [ %7540, %7535 ], [ %7527, %7525 ]
  %7538 = phi i64 [ %7544, %7535 ], [ %7533, %7525 ]
  %7539 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7536, i64 -1
  %7540 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7537, i64 -1
  %7541 = bitcast %"class.v8::internal::compiler::Node"** %7540 to i64*
  %7542 = load i64, i64* %7541, align 8
  %7543 = bitcast %"class.v8::internal::compiler::Node"** %7539 to i64*
  store i64 %7542, i64* %7543, align 8
  %7544 = add i64 %7538, -1
  %7545 = icmp eq i64 %7544, 0
  br i1 %7545, label %7546, label %7535, !llvm.loop !251

7546:                                             ; preds = %7535, %7525
  %7547 = phi %"class.v8::internal::compiler::Node"** [ undef, %7525 ], [ %7539, %7535 ]
  %7548 = phi %"class.v8::internal::compiler::Node"** [ %7526, %7525 ], [ %7539, %7535 ]
  %7549 = phi %"class.v8::internal::compiler::Node"** [ %7527, %7525 ], [ %7540, %7535 ]
  %7550 = icmp ult i64 %7530, 56
  br i1 %7550, label %7595, label %7551

7551:                                             ; preds = %7546, %7551
  %7552 = phi %"class.v8::internal::compiler::Node"** [ %7589, %7551 ], [ %7548, %7546 ]
  %7553 = phi %"class.v8::internal::compiler::Node"** [ %7590, %7551 ], [ %7549, %7546 ]
  %7554 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -1
  %7555 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -1
  %7556 = bitcast %"class.v8::internal::compiler::Node"** %7555 to i64*
  %7557 = load i64, i64* %7556, align 8
  %7558 = bitcast %"class.v8::internal::compiler::Node"** %7554 to i64*
  store i64 %7557, i64* %7558, align 8
  %7559 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -2
  %7560 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -2
  %7561 = bitcast %"class.v8::internal::compiler::Node"** %7560 to i64*
  %7562 = load i64, i64* %7561, align 8
  %7563 = bitcast %"class.v8::internal::compiler::Node"** %7559 to i64*
  store i64 %7562, i64* %7563, align 8
  %7564 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -3
  %7565 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -3
  %7566 = bitcast %"class.v8::internal::compiler::Node"** %7565 to i64*
  %7567 = load i64, i64* %7566, align 8
  %7568 = bitcast %"class.v8::internal::compiler::Node"** %7564 to i64*
  store i64 %7567, i64* %7568, align 8
  %7569 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -4
  %7570 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -4
  %7571 = bitcast %"class.v8::internal::compiler::Node"** %7570 to i64*
  %7572 = load i64, i64* %7571, align 8
  %7573 = bitcast %"class.v8::internal::compiler::Node"** %7569 to i64*
  store i64 %7572, i64* %7573, align 8
  %7574 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -5
  %7575 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -5
  %7576 = bitcast %"class.v8::internal::compiler::Node"** %7575 to i64*
  %7577 = load i64, i64* %7576, align 8
  %7578 = bitcast %"class.v8::internal::compiler::Node"** %7574 to i64*
  store i64 %7577, i64* %7578, align 8
  %7579 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -6
  %7580 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -6
  %7581 = bitcast %"class.v8::internal::compiler::Node"** %7580 to i64*
  %7582 = load i64, i64* %7581, align 8
  %7583 = bitcast %"class.v8::internal::compiler::Node"** %7579 to i64*
  store i64 %7582, i64* %7583, align 8
  %7584 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -7
  %7585 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -7
  %7586 = bitcast %"class.v8::internal::compiler::Node"** %7585 to i64*
  %7587 = load i64, i64* %7586, align 8
  %7588 = bitcast %"class.v8::internal::compiler::Node"** %7584 to i64*
  store i64 %7587, i64* %7588, align 8
  %7589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7552, i64 -8
  %7590 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7553, i64 -8
  %7591 = bitcast %"class.v8::internal::compiler::Node"** %7590 to i64*
  %7592 = load i64, i64* %7591, align 8
  %7593 = bitcast %"class.v8::internal::compiler::Node"** %7589 to i64*
  store i64 %7592, i64* %7593, align 8
  %7594 = icmp eq %"class.v8::internal::compiler::Node"** %7590, %7422
  br i1 %7594, label %7595, label %7551, !llvm.loop !252

7595:                                             ; preds = %7546, %7551, %7523, %7411
  %7596 = phi %"class.v8::internal::compiler::Node"** [ %7415, %7411 ], [ %7449, %7523 ], [ %7547, %7546 ], [ %7589, %7551 ]
  %7597 = ptrtoint %"class.v8::internal::compiler::Node"** %7596 to i64
  store i64 %7597, i64* %7373, align 8
  store i64 %7420, i64* %7372, align 8
  store i64 %7417, i64* %7382, align 8
  br label %7598

7598:                                             ; preds = %7595, %7365, %7353
  %7599 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 35
  %7600 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7599, align 8
  %7601 = icmp eq %"class.v8::internal::compiler::Node"* %7600, null
  %7602 = ptrtoint %"class.v8::internal::compiler::Node"* %7600 to i64
  br i1 %7601, label %7843, label %7603

7603:                                             ; preds = %7598
  %7604 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %7605 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7604, align 8
  %7606 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7607 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7606, align 8
  %7608 = icmp eq %"class.v8::internal::compiler::Node"** %7605, %7607
  %7609 = ptrtoint %"class.v8::internal::compiler::Node"** %7607 to i64
  br i1 %7608, label %7615, label %7610

7610:                                             ; preds = %7603
  %7611 = bitcast %"class.v8::internal::compiler::Node"** %7605 to i64*
  store i64 %7602, i64* %7611, align 8
  %7612 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7605, i64 1
  %7613 = ptrtoint %"class.v8::internal::compiler::Node"** %7612 to i64
  %7614 = bitcast %"class.v8::internal::compiler::Node"*** %7604 to i64*
  store i64 %7613, i64* %7614, align 8
  br label %7843

7615:                                             ; preds = %7603
  %7616 = ptrtoint %"class.v8::internal::compiler::Node"** %7605 to i64
  %7617 = bitcast %"class.v8::internal::compiler::Node"*** %7604 to i64*
  %7618 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %7619 = load i64, i64* %7618, align 8
  %7620 = sub i64 %7616, %7619
  %7621 = ashr exact i64 %7620, 3
  %7622 = add nsw i64 %7621, 1
  %7623 = icmp ugt i64 %7622, 268435455
  br i1 %7623, label %7624, label %7626

7624:                                             ; preds = %7615
  %7625 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %7625) #6
  unreachable

7626:                                             ; preds = %7615
  %7627 = bitcast %"class.v8::internal::compiler::Node"*** %7606 to i64*
  %7628 = sub i64 %7609, %7619
  %7629 = ashr exact i64 %7628, 3
  %7630 = icmp ult i64 %7629, 134217727
  br i1 %7630, label %7631, label %7636

7631:                                             ; preds = %7626
  %7632 = ashr exact i64 %7628, 2
  %7633 = icmp ult i64 %7632, %7622
  %7634 = select i1 %7633, i64 %7622, i64 %7632
  %7635 = icmp eq i64 %7634, 0
  br i1 %7635, label %7656, label %7636

7636:                                             ; preds = %7631, %7626
  %7637 = phi i64 [ %7634, %7631 ], [ 268435455, %7626 ]
  %7638 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %7639 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7638, align 8
  %7640 = shl i64 %7637, 3
  %7641 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7639, i64 0, i32 2
  %7642 = load i64, i64* %7641, align 8
  %7643 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7639, i64 0, i32 3
  %7644 = load i64, i64* %7643, align 8
  %7645 = sub i64 %7644, %7642
  %7646 = icmp ugt i64 %7640, %7645
  br i1 %7646, label %7647, label %7649, !prof !2

7647:                                             ; preds = %7636
  %7648 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7639, i64 %7640) #5
  br label %7651

7649:                                             ; preds = %7636
  %7650 = add i64 %7642, %7640
  store i64 %7650, i64* %7641, align 8
  br label %7651

7651:                                             ; preds = %7649, %7647
  %7652 = phi i64 [ %7648, %7647 ], [ %7642, %7649 ]
  %7653 = inttoptr i64 %7652 to %"class.v8::internal::compiler::Node"**
  %7654 = bitcast %"class.v8::internal::compiler::Node"** %7599 to i64*
  %7655 = load i64, i64* %7654, align 8
  br label %7656

7656:                                             ; preds = %7631, %7651
  %7657 = phi i64 [ %7655, %7651 ], [ %7602, %7631 ]
  %7658 = phi i64 [ %7637, %7651 ], [ 0, %7631 ]
  %7659 = phi %"class.v8::internal::compiler::Node"** [ %7653, %7651 ], [ null, %7631 ]
  %7660 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7659, i64 %7621
  %7661 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7659, i64 %7658
  %7662 = ptrtoint %"class.v8::internal::compiler::Node"** %7661 to i64
  %7663 = bitcast %"class.v8::internal::compiler::Node"** %7660 to i64*
  store i64 %7657, i64* %7663, align 8
  %7664 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7660, i64 1
  %7665 = ptrtoint %"class.v8::internal::compiler::Node"** %7664 to i64
  %7666 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %7667 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7666, align 8
  %7668 = ptrtoint %"class.v8::internal::compiler::Node"** %7667 to i64
  %7669 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7604, align 8
  %7670 = icmp eq %"class.v8::internal::compiler::Node"** %7669, %7667
  br i1 %7670, label %7840, label %7671

7671:                                             ; preds = %7656
  %7672 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 -1
  %7673 = ptrtoint %"class.v8::internal::compiler::Node"** %7672 to i64
  %7674 = sub i64 %7673, %7668
  %7675 = lshr i64 %7674, 3
  %7676 = add nuw nsw i64 %7675, 1
  %7677 = icmp ult i64 %7676, 4
  br i1 %7677, label %7770, label %7678

7678:                                             ; preds = %7671
  %7679 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 -1
  %7680 = ptrtoint %"class.v8::internal::compiler::Node"** %7679 to i64
  %7681 = sub i64 %7680, %7668
  %7682 = lshr i64 %7681, 3
  %7683 = xor i64 %7682, -1
  %7684 = add nsw i64 %7621, %7683
  %7685 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7659, i64 %7684
  %7686 = xor i64 %7682, -1
  %7687 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 %7686
  %7688 = icmp ult %"class.v8::internal::compiler::Node"** %7685, %7669
  %7689 = icmp ult %"class.v8::internal::compiler::Node"** %7687, %7660
  %7690 = and i1 %7688, %7689
  br i1 %7690, label %7770, label %7691

7691:                                             ; preds = %7678
  %7692 = and i64 %7676, 4611686018427387900
  %7693 = sub nsw i64 0, %7692
  %7694 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7660, i64 %7693
  %7695 = sub nsw i64 0, %7692
  %7696 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 %7695
  %7697 = add nsw i64 %7692, -4
  %7698 = lshr exact i64 %7697, 2
  %7699 = add nuw nsw i64 %7698, 1
  %7700 = and i64 %7699, 1
  %7701 = icmp eq i64 %7697, 0
  br i1 %7701, label %7746, label %7702

7702:                                             ; preds = %7691
  %7703 = sub nuw nsw i64 %7699, %7700
  %7704 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7660, i64 -1
  %7705 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 -1
  %7706 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7660, i64 -1
  %7707 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 -1
  br label %7708

7708:                                             ; preds = %7708, %7702
  %7709 = phi i64 [ 0, %7702 ], [ %7743, %7708 ]
  %7710 = phi i64 [ %7703, %7702 ], [ %7744, %7708 ]
  %7711 = sub i64 0, %7709
  %7712 = sub i64 0, %7709
  %7713 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7704, i64 %7711
  %7714 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7705, i64 %7712
  %7715 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7714, i64 -1
  %7716 = bitcast %"class.v8::internal::compiler::Node"** %7715 to <2 x i64>*
  %7717 = load <2 x i64>, <2 x i64>* %7716, align 8, !alias.scope !253
  %7718 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7714, i64 -2
  %7719 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7718, i64 -1
  %7720 = bitcast %"class.v8::internal::compiler::Node"** %7719 to <2 x i64>*
  %7721 = load <2 x i64>, <2 x i64>* %7720, align 8, !alias.scope !253
  %7722 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7713, i64 -1
  %7723 = bitcast %"class.v8::internal::compiler::Node"** %7722 to <2 x i64>*
  store <2 x i64> %7717, <2 x i64>* %7723, align 8, !alias.scope !256, !noalias !253
  %7724 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7713, i64 -2
  %7725 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7724, i64 -1
  %7726 = bitcast %"class.v8::internal::compiler::Node"** %7725 to <2 x i64>*
  store <2 x i64> %7721, <2 x i64>* %7726, align 8, !alias.scope !256, !noalias !253
  %7727 = sub nuw nsw i64 -4, %7709
  %7728 = sub nuw nsw i64 -4, %7709
  %7729 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7706, i64 %7727
  %7730 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7707, i64 %7728
  %7731 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7730, i64 -1
  %7732 = bitcast %"class.v8::internal::compiler::Node"** %7731 to <2 x i64>*
  %7733 = load <2 x i64>, <2 x i64>* %7732, align 8, !alias.scope !253
  %7734 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7730, i64 -2
  %7735 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7734, i64 -1
  %7736 = bitcast %"class.v8::internal::compiler::Node"** %7735 to <2 x i64>*
  %7737 = load <2 x i64>, <2 x i64>* %7736, align 8, !alias.scope !253
  %7738 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7729, i64 -1
  %7739 = bitcast %"class.v8::internal::compiler::Node"** %7738 to <2 x i64>*
  store <2 x i64> %7733, <2 x i64>* %7739, align 8, !alias.scope !256, !noalias !253
  %7740 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7729, i64 -2
  %7741 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7740, i64 -1
  %7742 = bitcast %"class.v8::internal::compiler::Node"** %7741 to <2 x i64>*
  store <2 x i64> %7737, <2 x i64>* %7742, align 8, !alias.scope !256, !noalias !253
  %7743 = add i64 %7709, 8
  %7744 = add i64 %7710, -2
  %7745 = icmp eq i64 %7744, 0
  br i1 %7745, label %7746, label %7708, !llvm.loop !258

7746:                                             ; preds = %7708, %7691
  %7747 = phi i64 [ 0, %7691 ], [ %7743, %7708 ]
  %7748 = icmp eq i64 %7700, 0
  br i1 %7748, label %7768, label %7749

7749:                                             ; preds = %7746
  %7750 = sub i64 0, %7747
  %7751 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7660, i64 -1
  %7752 = sub i64 0, %7747
  %7753 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7669, i64 -1
  %7754 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7751, i64 %7750
  %7755 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7753, i64 %7752
  %7756 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7755, i64 -1
  %7757 = bitcast %"class.v8::internal::compiler::Node"** %7756 to <2 x i64>*
  %7758 = load <2 x i64>, <2 x i64>* %7757, align 8, !alias.scope !253
  %7759 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7755, i64 -2
  %7760 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7759, i64 -1
  %7761 = bitcast %"class.v8::internal::compiler::Node"** %7760 to <2 x i64>*
  %7762 = load <2 x i64>, <2 x i64>* %7761, align 8, !alias.scope !253
  %7763 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7754, i64 -1
  %7764 = bitcast %"class.v8::internal::compiler::Node"** %7763 to <2 x i64>*
  store <2 x i64> %7758, <2 x i64>* %7764, align 8, !alias.scope !256, !noalias !253
  %7765 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7754, i64 -2
  %7766 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7765, i64 -1
  %7767 = bitcast %"class.v8::internal::compiler::Node"** %7766 to <2 x i64>*
  store <2 x i64> %7762, <2 x i64>* %7767, align 8, !alias.scope !256, !noalias !253
  br label %7768

7768:                                             ; preds = %7746, %7749
  %7769 = icmp eq i64 %7676, %7692
  br i1 %7769, label %7840, label %7770

7770:                                             ; preds = %7768, %7678, %7671
  %7771 = phi %"class.v8::internal::compiler::Node"** [ %7660, %7678 ], [ %7660, %7671 ], [ %7694, %7768 ]
  %7772 = phi %"class.v8::internal::compiler::Node"** [ %7669, %7678 ], [ %7669, %7671 ], [ %7696, %7768 ]
  %7773 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7772, i64 -1
  %7774 = ptrtoint %"class.v8::internal::compiler::Node"** %7773 to i64
  %7775 = sub i64 %7774, %7668
  %7776 = lshr i64 %7775, 3
  %7777 = add nuw nsw i64 %7776, 1
  %7778 = and i64 %7777, 7
  %7779 = icmp eq i64 %7778, 0
  br i1 %7779, label %7791, label %7780

7780:                                             ; preds = %7770, %7780
  %7781 = phi %"class.v8::internal::compiler::Node"** [ %7784, %7780 ], [ %7771, %7770 ]
  %7782 = phi %"class.v8::internal::compiler::Node"** [ %7785, %7780 ], [ %7772, %7770 ]
  %7783 = phi i64 [ %7789, %7780 ], [ %7778, %7770 ]
  %7784 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7781, i64 -1
  %7785 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7782, i64 -1
  %7786 = bitcast %"class.v8::internal::compiler::Node"** %7785 to i64*
  %7787 = load i64, i64* %7786, align 8
  %7788 = bitcast %"class.v8::internal::compiler::Node"** %7784 to i64*
  store i64 %7787, i64* %7788, align 8
  %7789 = add i64 %7783, -1
  %7790 = icmp eq i64 %7789, 0
  br i1 %7790, label %7791, label %7780, !llvm.loop !259

7791:                                             ; preds = %7780, %7770
  %7792 = phi %"class.v8::internal::compiler::Node"** [ undef, %7770 ], [ %7784, %7780 ]
  %7793 = phi %"class.v8::internal::compiler::Node"** [ %7771, %7770 ], [ %7784, %7780 ]
  %7794 = phi %"class.v8::internal::compiler::Node"** [ %7772, %7770 ], [ %7785, %7780 ]
  %7795 = icmp ult i64 %7775, 56
  br i1 %7795, label %7840, label %7796

7796:                                             ; preds = %7791, %7796
  %7797 = phi %"class.v8::internal::compiler::Node"** [ %7834, %7796 ], [ %7793, %7791 ]
  %7798 = phi %"class.v8::internal::compiler::Node"** [ %7835, %7796 ], [ %7794, %7791 ]
  %7799 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -1
  %7800 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -1
  %7801 = bitcast %"class.v8::internal::compiler::Node"** %7800 to i64*
  %7802 = load i64, i64* %7801, align 8
  %7803 = bitcast %"class.v8::internal::compiler::Node"** %7799 to i64*
  store i64 %7802, i64* %7803, align 8
  %7804 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -2
  %7805 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -2
  %7806 = bitcast %"class.v8::internal::compiler::Node"** %7805 to i64*
  %7807 = load i64, i64* %7806, align 8
  %7808 = bitcast %"class.v8::internal::compiler::Node"** %7804 to i64*
  store i64 %7807, i64* %7808, align 8
  %7809 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -3
  %7810 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -3
  %7811 = bitcast %"class.v8::internal::compiler::Node"** %7810 to i64*
  %7812 = load i64, i64* %7811, align 8
  %7813 = bitcast %"class.v8::internal::compiler::Node"** %7809 to i64*
  store i64 %7812, i64* %7813, align 8
  %7814 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -4
  %7815 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -4
  %7816 = bitcast %"class.v8::internal::compiler::Node"** %7815 to i64*
  %7817 = load i64, i64* %7816, align 8
  %7818 = bitcast %"class.v8::internal::compiler::Node"** %7814 to i64*
  store i64 %7817, i64* %7818, align 8
  %7819 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -5
  %7820 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -5
  %7821 = bitcast %"class.v8::internal::compiler::Node"** %7820 to i64*
  %7822 = load i64, i64* %7821, align 8
  %7823 = bitcast %"class.v8::internal::compiler::Node"** %7819 to i64*
  store i64 %7822, i64* %7823, align 8
  %7824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -6
  %7825 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -6
  %7826 = bitcast %"class.v8::internal::compiler::Node"** %7825 to i64*
  %7827 = load i64, i64* %7826, align 8
  %7828 = bitcast %"class.v8::internal::compiler::Node"** %7824 to i64*
  store i64 %7827, i64* %7828, align 8
  %7829 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -7
  %7830 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -7
  %7831 = bitcast %"class.v8::internal::compiler::Node"** %7830 to i64*
  %7832 = load i64, i64* %7831, align 8
  %7833 = bitcast %"class.v8::internal::compiler::Node"** %7829 to i64*
  store i64 %7832, i64* %7833, align 8
  %7834 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7797, i64 -8
  %7835 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7798, i64 -8
  %7836 = bitcast %"class.v8::internal::compiler::Node"** %7835 to i64*
  %7837 = load i64, i64* %7836, align 8
  %7838 = bitcast %"class.v8::internal::compiler::Node"** %7834 to i64*
  store i64 %7837, i64* %7838, align 8
  %7839 = icmp eq %"class.v8::internal::compiler::Node"** %7835, %7667
  br i1 %7839, label %7840, label %7796, !llvm.loop !260

7840:                                             ; preds = %7791, %7796, %7768, %7656
  %7841 = phi %"class.v8::internal::compiler::Node"** [ %7660, %7656 ], [ %7694, %7768 ], [ %7792, %7791 ], [ %7834, %7796 ]
  %7842 = ptrtoint %"class.v8::internal::compiler::Node"** %7841 to i64
  store i64 %7842, i64* %7618, align 8
  store i64 %7665, i64* %7617, align 8
  store i64 %7662, i64* %7627, align 8
  br label %7843

7843:                                             ; preds = %7840, %7610, %7598
  %7844 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 36
  %7845 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7844, align 8
  %7846 = icmp eq %"class.v8::internal::compiler::Node"* %7845, null
  %7847 = ptrtoint %"class.v8::internal::compiler::Node"* %7845 to i64
  br i1 %7846, label %8088, label %7848

7848:                                             ; preds = %7843
  %7849 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %7850 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7849, align 8
  %7851 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7852 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7851, align 8
  %7853 = icmp eq %"class.v8::internal::compiler::Node"** %7850, %7852
  %7854 = ptrtoint %"class.v8::internal::compiler::Node"** %7852 to i64
  br i1 %7853, label %7860, label %7855

7855:                                             ; preds = %7848
  %7856 = bitcast %"class.v8::internal::compiler::Node"** %7850 to i64*
  store i64 %7847, i64* %7856, align 8
  %7857 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7850, i64 1
  %7858 = ptrtoint %"class.v8::internal::compiler::Node"** %7857 to i64
  %7859 = bitcast %"class.v8::internal::compiler::Node"*** %7849 to i64*
  store i64 %7858, i64* %7859, align 8
  br label %8088

7860:                                             ; preds = %7848
  %7861 = ptrtoint %"class.v8::internal::compiler::Node"** %7850 to i64
  %7862 = bitcast %"class.v8::internal::compiler::Node"*** %7849 to i64*
  %7863 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %7864 = load i64, i64* %7863, align 8
  %7865 = sub i64 %7861, %7864
  %7866 = ashr exact i64 %7865, 3
  %7867 = add nsw i64 %7866, 1
  %7868 = icmp ugt i64 %7867, 268435455
  br i1 %7868, label %7869, label %7871

7869:                                             ; preds = %7860
  %7870 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %7870) #6
  unreachable

7871:                                             ; preds = %7860
  %7872 = bitcast %"class.v8::internal::compiler::Node"*** %7851 to i64*
  %7873 = sub i64 %7854, %7864
  %7874 = ashr exact i64 %7873, 3
  %7875 = icmp ult i64 %7874, 134217727
  br i1 %7875, label %7876, label %7881

7876:                                             ; preds = %7871
  %7877 = ashr exact i64 %7873, 2
  %7878 = icmp ult i64 %7877, %7867
  %7879 = select i1 %7878, i64 %7867, i64 %7877
  %7880 = icmp eq i64 %7879, 0
  br i1 %7880, label %7901, label %7881

7881:                                             ; preds = %7876, %7871
  %7882 = phi i64 [ %7879, %7876 ], [ 268435455, %7871 ]
  %7883 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %7884 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7883, align 8
  %7885 = shl i64 %7882, 3
  %7886 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7884, i64 0, i32 2
  %7887 = load i64, i64* %7886, align 8
  %7888 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %7884, i64 0, i32 3
  %7889 = load i64, i64* %7888, align 8
  %7890 = sub i64 %7889, %7887
  %7891 = icmp ugt i64 %7885, %7890
  br i1 %7891, label %7892, label %7894, !prof !2

7892:                                             ; preds = %7881
  %7893 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %7884, i64 %7885) #5
  br label %7896

7894:                                             ; preds = %7881
  %7895 = add i64 %7887, %7885
  store i64 %7895, i64* %7886, align 8
  br label %7896

7896:                                             ; preds = %7894, %7892
  %7897 = phi i64 [ %7893, %7892 ], [ %7887, %7894 ]
  %7898 = inttoptr i64 %7897 to %"class.v8::internal::compiler::Node"**
  %7899 = bitcast %"class.v8::internal::compiler::Node"** %7844 to i64*
  %7900 = load i64, i64* %7899, align 8
  br label %7901

7901:                                             ; preds = %7876, %7896
  %7902 = phi i64 [ %7900, %7896 ], [ %7847, %7876 ]
  %7903 = phi i64 [ %7882, %7896 ], [ 0, %7876 ]
  %7904 = phi %"class.v8::internal::compiler::Node"** [ %7898, %7896 ], [ null, %7876 ]
  %7905 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7904, i64 %7866
  %7906 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7904, i64 %7903
  %7907 = ptrtoint %"class.v8::internal::compiler::Node"** %7906 to i64
  %7908 = bitcast %"class.v8::internal::compiler::Node"** %7905 to i64*
  store i64 %7902, i64* %7908, align 8
  %7909 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7905, i64 1
  %7910 = ptrtoint %"class.v8::internal::compiler::Node"** %7909 to i64
  %7911 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %7912 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7911, align 8
  %7913 = ptrtoint %"class.v8::internal::compiler::Node"** %7912 to i64
  %7914 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7849, align 8
  %7915 = icmp eq %"class.v8::internal::compiler::Node"** %7914, %7912
  br i1 %7915, label %8085, label %7916

7916:                                             ; preds = %7901
  %7917 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 -1
  %7918 = ptrtoint %"class.v8::internal::compiler::Node"** %7917 to i64
  %7919 = sub i64 %7918, %7913
  %7920 = lshr i64 %7919, 3
  %7921 = add nuw nsw i64 %7920, 1
  %7922 = icmp ult i64 %7921, 4
  br i1 %7922, label %8015, label %7923

7923:                                             ; preds = %7916
  %7924 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 -1
  %7925 = ptrtoint %"class.v8::internal::compiler::Node"** %7924 to i64
  %7926 = sub i64 %7925, %7913
  %7927 = lshr i64 %7926, 3
  %7928 = xor i64 %7927, -1
  %7929 = add nsw i64 %7866, %7928
  %7930 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7904, i64 %7929
  %7931 = xor i64 %7927, -1
  %7932 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 %7931
  %7933 = icmp ult %"class.v8::internal::compiler::Node"** %7930, %7914
  %7934 = icmp ult %"class.v8::internal::compiler::Node"** %7932, %7905
  %7935 = and i1 %7933, %7934
  br i1 %7935, label %8015, label %7936

7936:                                             ; preds = %7923
  %7937 = and i64 %7921, 4611686018427387900
  %7938 = sub nsw i64 0, %7937
  %7939 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7905, i64 %7938
  %7940 = sub nsw i64 0, %7937
  %7941 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 %7940
  %7942 = add nsw i64 %7937, -4
  %7943 = lshr exact i64 %7942, 2
  %7944 = add nuw nsw i64 %7943, 1
  %7945 = and i64 %7944, 1
  %7946 = icmp eq i64 %7942, 0
  br i1 %7946, label %7991, label %7947

7947:                                             ; preds = %7936
  %7948 = sub nuw nsw i64 %7944, %7945
  %7949 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7905, i64 -1
  %7950 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 -1
  %7951 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7905, i64 -1
  %7952 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 -1
  br label %7953

7953:                                             ; preds = %7953, %7947
  %7954 = phi i64 [ 0, %7947 ], [ %7988, %7953 ]
  %7955 = phi i64 [ %7948, %7947 ], [ %7989, %7953 ]
  %7956 = sub i64 0, %7954
  %7957 = sub i64 0, %7954
  %7958 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7949, i64 %7956
  %7959 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7950, i64 %7957
  %7960 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7959, i64 -1
  %7961 = bitcast %"class.v8::internal::compiler::Node"** %7960 to <2 x i64>*
  %7962 = load <2 x i64>, <2 x i64>* %7961, align 8, !alias.scope !261
  %7963 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7959, i64 -2
  %7964 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7963, i64 -1
  %7965 = bitcast %"class.v8::internal::compiler::Node"** %7964 to <2 x i64>*
  %7966 = load <2 x i64>, <2 x i64>* %7965, align 8, !alias.scope !261
  %7967 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7958, i64 -1
  %7968 = bitcast %"class.v8::internal::compiler::Node"** %7967 to <2 x i64>*
  store <2 x i64> %7962, <2 x i64>* %7968, align 8, !alias.scope !264, !noalias !261
  %7969 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7958, i64 -2
  %7970 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7969, i64 -1
  %7971 = bitcast %"class.v8::internal::compiler::Node"** %7970 to <2 x i64>*
  store <2 x i64> %7966, <2 x i64>* %7971, align 8, !alias.scope !264, !noalias !261
  %7972 = sub nuw nsw i64 -4, %7954
  %7973 = sub nuw nsw i64 -4, %7954
  %7974 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7951, i64 %7972
  %7975 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7952, i64 %7973
  %7976 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7975, i64 -1
  %7977 = bitcast %"class.v8::internal::compiler::Node"** %7976 to <2 x i64>*
  %7978 = load <2 x i64>, <2 x i64>* %7977, align 8, !alias.scope !261
  %7979 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7975, i64 -2
  %7980 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7979, i64 -1
  %7981 = bitcast %"class.v8::internal::compiler::Node"** %7980 to <2 x i64>*
  %7982 = load <2 x i64>, <2 x i64>* %7981, align 8, !alias.scope !261
  %7983 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7974, i64 -1
  %7984 = bitcast %"class.v8::internal::compiler::Node"** %7983 to <2 x i64>*
  store <2 x i64> %7978, <2 x i64>* %7984, align 8, !alias.scope !264, !noalias !261
  %7985 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7974, i64 -2
  %7986 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7985, i64 -1
  %7987 = bitcast %"class.v8::internal::compiler::Node"** %7986 to <2 x i64>*
  store <2 x i64> %7982, <2 x i64>* %7987, align 8, !alias.scope !264, !noalias !261
  %7988 = add i64 %7954, 8
  %7989 = add i64 %7955, -2
  %7990 = icmp eq i64 %7989, 0
  br i1 %7990, label %7991, label %7953, !llvm.loop !266

7991:                                             ; preds = %7953, %7936
  %7992 = phi i64 [ 0, %7936 ], [ %7988, %7953 ]
  %7993 = icmp eq i64 %7945, 0
  br i1 %7993, label %8013, label %7994

7994:                                             ; preds = %7991
  %7995 = sub i64 0, %7992
  %7996 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7905, i64 -1
  %7997 = sub i64 0, %7992
  %7998 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7914, i64 -1
  %7999 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7996, i64 %7995
  %8000 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7998, i64 %7997
  %8001 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8000, i64 -1
  %8002 = bitcast %"class.v8::internal::compiler::Node"** %8001 to <2 x i64>*
  %8003 = load <2 x i64>, <2 x i64>* %8002, align 8, !alias.scope !261
  %8004 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8000, i64 -2
  %8005 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8004, i64 -1
  %8006 = bitcast %"class.v8::internal::compiler::Node"** %8005 to <2 x i64>*
  %8007 = load <2 x i64>, <2 x i64>* %8006, align 8, !alias.scope !261
  %8008 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7999, i64 -1
  %8009 = bitcast %"class.v8::internal::compiler::Node"** %8008 to <2 x i64>*
  store <2 x i64> %8003, <2 x i64>* %8009, align 8, !alias.scope !264, !noalias !261
  %8010 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %7999, i64 -2
  %8011 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8010, i64 -1
  %8012 = bitcast %"class.v8::internal::compiler::Node"** %8011 to <2 x i64>*
  store <2 x i64> %8007, <2 x i64>* %8012, align 8, !alias.scope !264, !noalias !261
  br label %8013

8013:                                             ; preds = %7991, %7994
  %8014 = icmp eq i64 %7921, %7937
  br i1 %8014, label %8085, label %8015

8015:                                             ; preds = %8013, %7923, %7916
  %8016 = phi %"class.v8::internal::compiler::Node"** [ %7905, %7923 ], [ %7905, %7916 ], [ %7939, %8013 ]
  %8017 = phi %"class.v8::internal::compiler::Node"** [ %7914, %7923 ], [ %7914, %7916 ], [ %7941, %8013 ]
  %8018 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8017, i64 -1
  %8019 = ptrtoint %"class.v8::internal::compiler::Node"** %8018 to i64
  %8020 = sub i64 %8019, %7913
  %8021 = lshr i64 %8020, 3
  %8022 = add nuw nsw i64 %8021, 1
  %8023 = and i64 %8022, 7
  %8024 = icmp eq i64 %8023, 0
  br i1 %8024, label %8036, label %8025

8025:                                             ; preds = %8015, %8025
  %8026 = phi %"class.v8::internal::compiler::Node"** [ %8029, %8025 ], [ %8016, %8015 ]
  %8027 = phi %"class.v8::internal::compiler::Node"** [ %8030, %8025 ], [ %8017, %8015 ]
  %8028 = phi i64 [ %8034, %8025 ], [ %8023, %8015 ]
  %8029 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8026, i64 -1
  %8030 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8027, i64 -1
  %8031 = bitcast %"class.v8::internal::compiler::Node"** %8030 to i64*
  %8032 = load i64, i64* %8031, align 8
  %8033 = bitcast %"class.v8::internal::compiler::Node"** %8029 to i64*
  store i64 %8032, i64* %8033, align 8
  %8034 = add i64 %8028, -1
  %8035 = icmp eq i64 %8034, 0
  br i1 %8035, label %8036, label %8025, !llvm.loop !267

8036:                                             ; preds = %8025, %8015
  %8037 = phi %"class.v8::internal::compiler::Node"** [ undef, %8015 ], [ %8029, %8025 ]
  %8038 = phi %"class.v8::internal::compiler::Node"** [ %8016, %8015 ], [ %8029, %8025 ]
  %8039 = phi %"class.v8::internal::compiler::Node"** [ %8017, %8015 ], [ %8030, %8025 ]
  %8040 = icmp ult i64 %8020, 56
  br i1 %8040, label %8085, label %8041

8041:                                             ; preds = %8036, %8041
  %8042 = phi %"class.v8::internal::compiler::Node"** [ %8079, %8041 ], [ %8038, %8036 ]
  %8043 = phi %"class.v8::internal::compiler::Node"** [ %8080, %8041 ], [ %8039, %8036 ]
  %8044 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -1
  %8045 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -1
  %8046 = bitcast %"class.v8::internal::compiler::Node"** %8045 to i64*
  %8047 = load i64, i64* %8046, align 8
  %8048 = bitcast %"class.v8::internal::compiler::Node"** %8044 to i64*
  store i64 %8047, i64* %8048, align 8
  %8049 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -2
  %8050 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -2
  %8051 = bitcast %"class.v8::internal::compiler::Node"** %8050 to i64*
  %8052 = load i64, i64* %8051, align 8
  %8053 = bitcast %"class.v8::internal::compiler::Node"** %8049 to i64*
  store i64 %8052, i64* %8053, align 8
  %8054 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -3
  %8055 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -3
  %8056 = bitcast %"class.v8::internal::compiler::Node"** %8055 to i64*
  %8057 = load i64, i64* %8056, align 8
  %8058 = bitcast %"class.v8::internal::compiler::Node"** %8054 to i64*
  store i64 %8057, i64* %8058, align 8
  %8059 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -4
  %8060 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -4
  %8061 = bitcast %"class.v8::internal::compiler::Node"** %8060 to i64*
  %8062 = load i64, i64* %8061, align 8
  %8063 = bitcast %"class.v8::internal::compiler::Node"** %8059 to i64*
  store i64 %8062, i64* %8063, align 8
  %8064 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -5
  %8065 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -5
  %8066 = bitcast %"class.v8::internal::compiler::Node"** %8065 to i64*
  %8067 = load i64, i64* %8066, align 8
  %8068 = bitcast %"class.v8::internal::compiler::Node"** %8064 to i64*
  store i64 %8067, i64* %8068, align 8
  %8069 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -6
  %8070 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -6
  %8071 = bitcast %"class.v8::internal::compiler::Node"** %8070 to i64*
  %8072 = load i64, i64* %8071, align 8
  %8073 = bitcast %"class.v8::internal::compiler::Node"** %8069 to i64*
  store i64 %8072, i64* %8073, align 8
  %8074 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -7
  %8075 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -7
  %8076 = bitcast %"class.v8::internal::compiler::Node"** %8075 to i64*
  %8077 = load i64, i64* %8076, align 8
  %8078 = bitcast %"class.v8::internal::compiler::Node"** %8074 to i64*
  store i64 %8077, i64* %8078, align 8
  %8079 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8042, i64 -8
  %8080 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8043, i64 -8
  %8081 = bitcast %"class.v8::internal::compiler::Node"** %8080 to i64*
  %8082 = load i64, i64* %8081, align 8
  %8083 = bitcast %"class.v8::internal::compiler::Node"** %8079 to i64*
  store i64 %8082, i64* %8083, align 8
  %8084 = icmp eq %"class.v8::internal::compiler::Node"** %8080, %7912
  br i1 %8084, label %8085, label %8041, !llvm.loop !268

8085:                                             ; preds = %8036, %8041, %8013, %7901
  %8086 = phi %"class.v8::internal::compiler::Node"** [ %7905, %7901 ], [ %7939, %8013 ], [ %8037, %8036 ], [ %8079, %8041 ]
  %8087 = ptrtoint %"class.v8::internal::compiler::Node"** %8086 to i64
  store i64 %8087, i64* %7863, align 8
  store i64 %7910, i64* %7862, align 8
  store i64 %7907, i64* %7872, align 8
  br label %8088

8088:                                             ; preds = %8085, %7855, %7843
  %8089 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 37
  %8090 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8089, align 8
  %8091 = icmp eq %"class.v8::internal::compiler::Node"* %8090, null
  %8092 = ptrtoint %"class.v8::internal::compiler::Node"* %8090 to i64
  br i1 %8091, label %8333, label %8093

8093:                                             ; preds = %8088
  %8094 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 1
  %8095 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %8094, align 8
  %8096 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %8097 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %8096, align 8
  %8098 = icmp eq %"class.v8::internal::compiler::Node"** %8095, %8097
  %8099 = ptrtoint %"class.v8::internal::compiler::Node"** %8097 to i64
  br i1 %8098, label %8105, label %8100

8100:                                             ; preds = %8093
  %8101 = bitcast %"class.v8::internal::compiler::Node"** %8095 to i64*
  store i64 %8092, i64* %8101, align 8
  %8102 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8095, i64 1
  %8103 = ptrtoint %"class.v8::internal::compiler::Node"** %8102 to i64
  %8104 = bitcast %"class.v8::internal::compiler::Node"*** %8094 to i64*
  store i64 %8103, i64* %8104, align 8
  br label %8333

8105:                                             ; preds = %8093
  %8106 = ptrtoint %"class.v8::internal::compiler::Node"** %8095 to i64
  %8107 = bitcast %"class.v8::internal::compiler::Node"*** %8094 to i64*
  %8108 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to i64*
  %8109 = load i64, i64* %8108, align 8
  %8110 = sub i64 %8106, %8109
  %8111 = ashr exact i64 %8110, 3
  %8112 = add nsw i64 %8111, 1
  %8113 = icmp ugt i64 %8112, 268435455
  br i1 %8113, label %8114, label %8116

8114:                                             ; preds = %8105
  %8115 = bitcast %"class.v8::internal::ZoneVector.1241"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %8115) #6
  unreachable

8116:                                             ; preds = %8105
  %8117 = bitcast %"class.v8::internal::compiler::Node"*** %8096 to i64*
  %8118 = sub i64 %8099, %8109
  %8119 = ashr exact i64 %8118, 3
  %8120 = icmp ult i64 %8119, 134217727
  br i1 %8120, label %8121, label %8126

8121:                                             ; preds = %8116
  %8122 = ashr exact i64 %8118, 2
  %8123 = icmp ult i64 %8122, %8112
  %8124 = select i1 %8123, i64 %8112, i64 %8122
  %8125 = icmp eq i64 %8124, 0
  br i1 %8125, label %8146, label %8126

8126:                                             ; preds = %8121, %8116
  %8127 = phi i64 [ %8124, %8121 ], [ 268435455, %8116 ]
  %8128 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %8129 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8128, align 8
  %8130 = shl i64 %8127, 3
  %8131 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8129, i64 0, i32 2
  %8132 = load i64, i64* %8131, align 8
  %8133 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8129, i64 0, i32 3
  %8134 = load i64, i64* %8133, align 8
  %8135 = sub i64 %8134, %8132
  %8136 = icmp ugt i64 %8130, %8135
  br i1 %8136, label %8137, label %8139, !prof !2

8137:                                             ; preds = %8126
  %8138 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %8129, i64 %8130) #5
  br label %8141

8139:                                             ; preds = %8126
  %8140 = add i64 %8132, %8130
  store i64 %8140, i64* %8131, align 8
  br label %8141

8141:                                             ; preds = %8139, %8137
  %8142 = phi i64 [ %8138, %8137 ], [ %8132, %8139 ]
  %8143 = inttoptr i64 %8142 to %"class.v8::internal::compiler::Node"**
  %8144 = bitcast %"class.v8::internal::compiler::Node"** %8089 to i64*
  %8145 = load i64, i64* %8144, align 8
  br label %8146

8146:                                             ; preds = %8121, %8141
  %8147 = phi i64 [ %8145, %8141 ], [ %8092, %8121 ]
  %8148 = phi i64 [ %8127, %8141 ], [ 0, %8121 ]
  %8149 = phi %"class.v8::internal::compiler::Node"** [ %8143, %8141 ], [ null, %8121 ]
  %8150 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8149, i64 %8111
  %8151 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8149, i64 %8148
  %8152 = ptrtoint %"class.v8::internal::compiler::Node"** %8151 to i64
  %8153 = bitcast %"class.v8::internal::compiler::Node"** %8150 to i64*
  store i64 %8147, i64* %8153, align 8
  %8154 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8150, i64 1
  %8155 = ptrtoint %"class.v8::internal::compiler::Node"** %8154 to i64
  %8156 = getelementptr inbounds %"class.v8::internal::ZoneVector.1241", %"class.v8::internal::ZoneVector.1241"* %1, i64 0, i32 0, i32 0, i32 0
  %8157 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %8156, align 8
  %8158 = ptrtoint %"class.v8::internal::compiler::Node"** %8157 to i64
  %8159 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %8094, align 8
  %8160 = icmp eq %"class.v8::internal::compiler::Node"** %8159, %8157
  br i1 %8160, label %8330, label %8161

8161:                                             ; preds = %8146
  %8162 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 -1
  %8163 = ptrtoint %"class.v8::internal::compiler::Node"** %8162 to i64
  %8164 = sub i64 %8163, %8158
  %8165 = lshr i64 %8164, 3
  %8166 = add nuw nsw i64 %8165, 1
  %8167 = icmp ult i64 %8166, 4
  br i1 %8167, label %8260, label %8168

8168:                                             ; preds = %8161
  %8169 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 -1
  %8170 = ptrtoint %"class.v8::internal::compiler::Node"** %8169 to i64
  %8171 = sub i64 %8170, %8158
  %8172 = lshr i64 %8171, 3
  %8173 = xor i64 %8172, -1
  %8174 = add nsw i64 %8111, %8173
  %8175 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8149, i64 %8174
  %8176 = xor i64 %8172, -1
  %8177 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 %8176
  %8178 = icmp ult %"class.v8::internal::compiler::Node"** %8175, %8159
  %8179 = icmp ult %"class.v8::internal::compiler::Node"** %8177, %8150
  %8180 = and i1 %8178, %8179
  br i1 %8180, label %8260, label %8181

8181:                                             ; preds = %8168
  %8182 = and i64 %8166, 4611686018427387900
  %8183 = sub nsw i64 0, %8182
  %8184 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8150, i64 %8183
  %8185 = sub nsw i64 0, %8182
  %8186 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 %8185
  %8187 = add nsw i64 %8182, -4
  %8188 = lshr exact i64 %8187, 2
  %8189 = add nuw nsw i64 %8188, 1
  %8190 = and i64 %8189, 1
  %8191 = icmp eq i64 %8187, 0
  br i1 %8191, label %8238, label %8192

8192:                                             ; preds = %8181
  %8193 = sub nuw nsw i64 %8189, %8190
  %8194 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8150, i64 -1
  %8195 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 -1
  %8196 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8150, i64 -1
  %8197 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 -1
  br label %8198

8198:                                             ; preds = %8198, %8192
  %8199 = phi i64 [ 0, %8192 ], [ %8233, %8198 ]
  %8200 = phi i64 [ %8193, %8192 ], [ %8234, %8198 ]
  %8201 = sub i64 0, %8199
  %8202 = sub i64 0, %8199
  %8203 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8194, i64 %8201
  %8204 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8195, i64 %8202
  %8205 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8204, i64 -1
  %8206 = bitcast %"class.v8::internal::compiler::Node"** %8205 to <2 x i64>*
  %8207 = load <2 x i64>, <2 x i64>* %8206, align 8, !alias.scope !269
  %8208 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8204, i64 -2
  %8209 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8208, i64 -1
  %8210 = bitcast %"class.v8::internal::compiler::Node"** %8209 to <2 x i64>*
  %8211 = load <2 x i64>, <2 x i64>* %8210, align 8, !alias.scope !269
  %8212 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8203, i64 -1
  %8213 = bitcast %"class.v8::internal::compiler::Node"** %8212 to <2 x i64>*
  store <2 x i64> %8207, <2 x i64>* %8213, align 8, !alias.scope !272, !noalias !269
  %8214 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8203, i64 -2
  %8215 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8214, i64 -1
  %8216 = bitcast %"class.v8::internal::compiler::Node"** %8215 to <2 x i64>*
  store <2 x i64> %8211, <2 x i64>* %8216, align 8, !alias.scope !272, !noalias !269
  %8217 = sub nuw nsw i64 -4, %8199
  %8218 = sub nuw nsw i64 -4, %8199
  %8219 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8196, i64 %8217
  %8220 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8197, i64 %8218
  %8221 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8220, i64 -1
  %8222 = bitcast %"class.v8::internal::compiler::Node"** %8221 to <2 x i64>*
  %8223 = load <2 x i64>, <2 x i64>* %8222, align 8, !alias.scope !269
  %8224 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8220, i64 -2
  %8225 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8224, i64 -1
  %8226 = bitcast %"class.v8::internal::compiler::Node"** %8225 to <2 x i64>*
  %8227 = load <2 x i64>, <2 x i64>* %8226, align 8, !alias.scope !269
  %8228 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8219, i64 -1
  %8229 = bitcast %"class.v8::internal::compiler::Node"** %8228 to <2 x i64>*
  store <2 x i64> %8223, <2 x i64>* %8229, align 8, !alias.scope !272, !noalias !269
  %8230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8219, i64 -2
  %8231 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8230, i64 -1
  %8232 = bitcast %"class.v8::internal::compiler::Node"** %8231 to <2 x i64>*
  store <2 x i64> %8227, <2 x i64>* %8232, align 8, !alias.scope !272, !noalias !269
  %8233 = add i64 %8199, 8
  %8234 = add i64 %8200, -2
  %8235 = icmp eq i64 %8234, 0
  br i1 %8235, label %8236, label %8198, !llvm.loop !274

8236:                                             ; preds = %8198
  %8237 = sub nuw nsw i64 -8, %8199
  br label %8238

8238:                                             ; preds = %8236, %8181
  %8239 = phi i64 [ 0, %8181 ], [ %8237, %8236 ]
  %8240 = icmp eq i64 %8190, 0
  br i1 %8240, label %8258, label %8241

8241:                                             ; preds = %8238
  %8242 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8150, i64 -1
  %8243 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8159, i64 -1
  %8244 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8242, i64 %8239
  %8245 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8243, i64 %8239
  %8246 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8245, i64 -1
  %8247 = bitcast %"class.v8::internal::compiler::Node"** %8246 to <2 x i64>*
  %8248 = load <2 x i64>, <2 x i64>* %8247, align 8, !alias.scope !269
  %8249 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8245, i64 -2
  %8250 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8249, i64 -1
  %8251 = bitcast %"class.v8::internal::compiler::Node"** %8250 to <2 x i64>*
  %8252 = load <2 x i64>, <2 x i64>* %8251, align 8, !alias.scope !269
  %8253 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8244, i64 -1
  %8254 = bitcast %"class.v8::internal::compiler::Node"** %8253 to <2 x i64>*
  store <2 x i64> %8248, <2 x i64>* %8254, align 8, !alias.scope !272, !noalias !269
  %8255 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8244, i64 -2
  %8256 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8255, i64 -1
  %8257 = bitcast %"class.v8::internal::compiler::Node"** %8256 to <2 x i64>*
  store <2 x i64> %8252, <2 x i64>* %8257, align 8, !alias.scope !272, !noalias !269
  br label %8258

8258:                                             ; preds = %8238, %8241
  %8259 = icmp eq i64 %8166, %8182
  br i1 %8259, label %8330, label %8260

8260:                                             ; preds = %8258, %8168, %8161
  %8261 = phi %"class.v8::internal::compiler::Node"** [ %8150, %8168 ], [ %8150, %8161 ], [ %8184, %8258 ]
  %8262 = phi %"class.v8::internal::compiler::Node"** [ %8159, %8168 ], [ %8159, %8161 ], [ %8186, %8258 ]
  %8263 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8262, i64 -1
  %8264 = ptrtoint %"class.v8::internal::compiler::Node"** %8263 to i64
  %8265 = sub i64 %8264, %8158
  %8266 = lshr i64 %8265, 3
  %8267 = add nuw nsw i64 %8266, 1
  %8268 = and i64 %8267, 7
  %8269 = icmp eq i64 %8268, 0
  br i1 %8269, label %8281, label %8270

8270:                                             ; preds = %8260, %8270
  %8271 = phi %"class.v8::internal::compiler::Node"** [ %8274, %8270 ], [ %8261, %8260 ]
  %8272 = phi %"class.v8::internal::compiler::Node"** [ %8275, %8270 ], [ %8262, %8260 ]
  %8273 = phi i64 [ %8279, %8270 ], [ %8268, %8260 ]
  %8274 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8271, i64 -1
  %8275 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8272, i64 -1
  %8276 = bitcast %"class.v8::internal::compiler::Node"** %8275 to i64*
  %8277 = load i64, i64* %8276, align 8
  %8278 = bitcast %"class.v8::internal::compiler::Node"** %8274 to i64*
  store i64 %8277, i64* %8278, align 8
  %8279 = add i64 %8273, -1
  %8280 = icmp eq i64 %8279, 0
  br i1 %8280, label %8281, label %8270, !llvm.loop !275

8281:                                             ; preds = %8270, %8260
  %8282 = phi %"class.v8::internal::compiler::Node"** [ undef, %8260 ], [ %8274, %8270 ]
  %8283 = phi %"class.v8::internal::compiler::Node"** [ %8261, %8260 ], [ %8274, %8270 ]
  %8284 = phi %"class.v8::internal::compiler::Node"** [ %8262, %8260 ], [ %8275, %8270 ]
  %8285 = icmp ult i64 %8265, 56
  br i1 %8285, label %8330, label %8286

8286:                                             ; preds = %8281, %8286
  %8287 = phi %"class.v8::internal::compiler::Node"** [ %8324, %8286 ], [ %8283, %8281 ]
  %8288 = phi %"class.v8::internal::compiler::Node"** [ %8325, %8286 ], [ %8284, %8281 ]
  %8289 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -1
  %8290 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -1
  %8291 = bitcast %"class.v8::internal::compiler::Node"** %8290 to i64*
  %8292 = load i64, i64* %8291, align 8
  %8293 = bitcast %"class.v8::internal::compiler::Node"** %8289 to i64*
  store i64 %8292, i64* %8293, align 8
  %8294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -2
  %8295 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -2
  %8296 = bitcast %"class.v8::internal::compiler::Node"** %8295 to i64*
  %8297 = load i64, i64* %8296, align 8
  %8298 = bitcast %"class.v8::internal::compiler::Node"** %8294 to i64*
  store i64 %8297, i64* %8298, align 8
  %8299 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -3
  %8300 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -3
  %8301 = bitcast %"class.v8::internal::compiler::Node"** %8300 to i64*
  %8302 = load i64, i64* %8301, align 8
  %8303 = bitcast %"class.v8::internal::compiler::Node"** %8299 to i64*
  store i64 %8302, i64* %8303, align 8
  %8304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -4
  %8305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -4
  %8306 = bitcast %"class.v8::internal::compiler::Node"** %8305 to i64*
  %8307 = load i64, i64* %8306, align 8
  %8308 = bitcast %"class.v8::internal::compiler::Node"** %8304 to i64*
  store i64 %8307, i64* %8308, align 8
  %8309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -5
  %8310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -5
  %8311 = bitcast %"class.v8::internal::compiler::Node"** %8310 to i64*
  %8312 = load i64, i64* %8311, align 8
  %8313 = bitcast %"class.v8::internal::compiler::Node"** %8309 to i64*
  store i64 %8312, i64* %8313, align 8
  %8314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -6
  %8315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -6
  %8316 = bitcast %"class.v8::internal::compiler::Node"** %8315 to i64*
  %8317 = load i64, i64* %8316, align 8
  %8318 = bitcast %"class.v8::internal::compiler::Node"** %8314 to i64*
  store i64 %8317, i64* %8318, align 8
  %8319 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -7
  %8320 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -7
  %8321 = bitcast %"class.v8::internal::compiler::Node"** %8320 to i64*
  %8322 = load i64, i64* %8321, align 8
  %8323 = bitcast %"class.v8::internal::compiler::Node"** %8319 to i64*
  store i64 %8322, i64* %8323, align 8
  %8324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8287, i64 -8
  %8325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %8288, i64 -8
  %8326 = bitcast %"class.v8::internal::compiler::Node"** %8325 to i64*
  %8327 = load i64, i64* %8326, align 8
  %8328 = bitcast %"class.v8::internal::compiler::Node"** %8324 to i64*
  store i64 %8327, i64* %8328, align 8
  %8329 = icmp eq %"class.v8::internal::compiler::Node"** %8325, %8157
  br i1 %8329, label %8330, label %8286, !llvm.loop !276

8330:                                             ; preds = %8281, %8286, %8258, %8146
  %8331 = phi %"class.v8::internal::compiler::Node"** [ %8150, %8146 ], [ %8184, %8258 ], [ %8282, %8281 ], [ %8324, %8286 ]
  %8332 = ptrtoint %"class.v8::internal::compiler::Node"** %8331 to i64
  store i64 %8332, i64* %8108, align 8
  store i64 %8155, i64* %8107, align 8
  store i64 %8152, i64* %8117, align 8
  br label %8333

8333:                                             ; preds = %8330, %8100, %8088
  ret void
}

declare void @_ZN2v88internal8compiler15CommonNodeCache14GetCachedNodesEPNS0_10ZoneVectorIPNS1_4NodeEEE(%"class.v8::internal::compiler::CommonNodeCache"*, %"class.v8::internal::ZoneVector.1241"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph37AllocateInYoungGenerationStubConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 4
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 102) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

declare i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph44AllocateRegularInYoungGenerationStubConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 5
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 103) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph35AllocateInOldGenerationStubConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 6
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 104) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph42AllocateRegularInOldGenerationStubConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 7
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 105) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph28ArrayConstructorStubConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 8
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 165) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph17BigIntMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 9
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 448
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph18BooleanMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 10
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 896
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph23ToNumberBuiltinConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 11
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 110) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph37PlainPrimitiveToNumberBuiltinConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 12
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %8, i64 0, i32 41
  %10 = tail call i64* @_ZN2v88internal8Builtins14builtin_handleEi(%"class.v8::internal::Builtins"* %9, i32 113) #5
  %11 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"class.v8::internal::Handle.1078", %"class.v8::internal::Handle.1078"* %2, i64 0, i32 0, i32 0
  store i64* %10, i64** %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %14 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %13, i64* %10) #5
  %15 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %14, align 8
  %16 = icmp eq %"class.v8::internal::compiler::Node"* %15, null
  br i1 %16, label %17, label %24

17:                                               ; preds = %6
  %18 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %19 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %21 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %20, align 8
  %22 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %21, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %23 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %19, %"class.v8::internal::compiler::Operator"* %22, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %23, %"class.v8::internal::compiler::Node"** %14, align 8
  br label %24

24:                                               ; preds = %6, %17
  %25 = phi %"class.v8::internal::compiler::Node"* [ %23, %17 ], [ %15, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store %"class.v8::internal::compiler::Node"* %25, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %26

26:                                               ; preds = %1, %24
  %27 = phi %"class.v8::internal::compiler::Node"* [ %25, %24 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph23EmptyFixedArrayConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 13
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 360
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph19EmptyStringConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 14
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 200
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph21FixedArrayMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 15
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 224
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph24PropertyArrayMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 16
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 592
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph27FixedDoubleArrayMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 17
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 488
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph25WeakFixedArrayMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 18
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 712
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph21HeapNumberMapConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 19
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 320
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph20OptimizedOutConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 20
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 400
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph21StaleRegisterConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle.1078", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 21
  %4 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, align 8
  %5 = icmp eq %"class.v8::internal::compiler::Node"* %4, null
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 1
  %8 = bitcast %"class.v8::internal::Isolate"** %7 to %"class.v8::internal::Factory"**
  %9 = load %"class.v8::internal::Factory"*, %"class.v8::internal::Factory"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %9, i64 408
  %11 = bitcast %"class.v8::internal::Factory"* %10 to i64*
  %12 = bitcast %"class.v8::internal::Handle.1078"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = bitcast %"class.v8::internal::Handle.1078"* %2 to %"class.v8::internal::Factory"**
  store %"class.v8::internal::Factory"* %10, %"class.v8::internal::Factory"** %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3
  %15 = tail call %"class.v8::internal::compiler::Node"** @_ZN2v88internal8compiler15CommonNodeCache16FindHeapConstantENS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonNodeCache"* %14, i64* %11) #5
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, null
  br i1 %17, label %18, label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %20 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %22 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %21, align 8
  %23 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder12HeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %22, %"class.v8::internal::Handle.1078"* nonnull dereferenceable(8) %2) #5
  %24 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %20, %"class.v8::internal::compiler::Operator"* %23, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %24, %"class.v8::internal::compiler::Node"** %15, align 8
  br label %25

25:                                               ; preds = %6, %18
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %18 ], [ %16, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store %"class.v8::internal::compiler::Node"* %26, %"class.v8::internal::compiler::Node"** %3, align 8
  br label %27

27:                                               ; preds = %1, %25
  %28 = phi %"class.v8::internal::compiler::Node"* [ %26, %25 ], [ %4, %1 ]
  ret %"class.v8::internal::compiler::Node"* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph17MinusZeroConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::tuple", align 8
  %3 = alloca %"class.std::__1::tuple.1264", align 1
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 28
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"* %6, null
  br i1 %7, label %8, label %30

8:                                                ; preds = %1
  %9 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = bitcast i64* %4 to double*
  store double -0.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::tuple"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  store i64* %4, i64** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  %15 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %11, i64* nonnull dereferenceable(8) %4, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %2, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %3) #5
  %16 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %15, 0
  %17 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %16, i64 3
  %18 = bitcast %"struct.std::__1::__hash_node_base.45"* %17 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  %19 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %18, align 8
  %20 = icmp eq %"class.v8::internal::compiler::Node"* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %23 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %25 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %24, align 8
  %26 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %25, double -0.000000e+00) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %23, %"class.v8::internal::compiler::Operator"* %26, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %27, %"class.v8::internal::compiler::Node"** %18, align 8
  br label %28

28:                                               ; preds = %8, %21
  %29 = phi %"class.v8::internal::compiler::Node"* [ %27, %21 ], [ %19, %8 ]
  store %"class.v8::internal::compiler::Node"* %29, %"class.v8::internal::compiler::Node"** %5, align 8
  br label %30

30:                                               ; preds = %1, %28
  %31 = phi %"class.v8::internal::compiler::Node"* [ %29, %28 ], [ %6, %1 ]
  ret %"class.v8::internal::compiler::Node"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph16MinusOneConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::tuple", align 8
  %3 = alloca %"class.std::__1::tuple.1264", align 1
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 30
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"* %6, null
  br i1 %7, label %8, label %30

8:                                                ; preds = %1
  %9 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = bitcast i64* %4 to double*
  store double -1.000000e+00, double* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::tuple"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  store i64* %4, i64** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  %15 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %11, i64* nonnull dereferenceable(8) %4, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %2, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %3) #5
  %16 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %15, 0
  %17 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %16, i64 3
  %18 = bitcast %"struct.std::__1::__hash_node_base.45"* %17 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  %19 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %18, align 8
  %20 = icmp eq %"class.v8::internal::compiler::Node"* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %23 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %25 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %24, align 8
  %26 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %25, double -1.000000e+00) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %23, %"class.v8::internal::compiler::Operator"* %26, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %27, %"class.v8::internal::compiler::Node"** %18, align 8
  br label %28

28:                                               ; preds = %8, %21
  %29 = phi %"class.v8::internal::compiler::Node"* [ %27, %21 ], [ %19, %8 ]
  store %"class.v8::internal::compiler::Node"* %29, %"class.v8::internal::compiler::Node"** %5, align 8
  br label %30

30:                                               ; preds = %1, %28
  %31 = phi %"class.v8::internal::compiler::Node"* [ %29, %28 ], [ %6, %1 ]
  ret %"class.v8::internal::compiler::Node"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph11NaNConstantEv(%"class.v8::internal::compiler::JSGraph"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::tuple", align 8
  %3 = alloca %"class.std::__1::tuple.1264", align 1
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 31
  %6 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"* %6, null
  br i1 %7, label %8, label %30

8:                                                ; preds = %1
  %9 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = bitcast i64* %4 to double*
  store double 0x7FF8000000000000, double* %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 3, i32 7, i32 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::tuple"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  %13 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %2, i64 0, i32 0, i32 0, i32 0
  store i64* %4, i64** %13, align 8
  %14 = getelementptr inbounds %"class.std::__1::tuple.1264", %"class.std::__1::tuple.1264"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #5
  %15 = call { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"* %11, i64* nonnull dereferenceable(8) %4, %"struct.std::__1::piecewise_construct_t"* nonnull dereferenceable(1) @_ZNSt3__1L19piecewise_constructE, %"class.std::__1::tuple"* nonnull dereferenceable(8) %2, %"class.std::__1::tuple.1264"* nonnull dereferenceable(1) %3) #5
  %16 = extractvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %15, 0
  %17 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %16, i64 3
  %18 = bitcast %"struct.std::__1::__hash_node_base.45"* %17 to %"class.v8::internal::compiler::Node"**
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  %19 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %18, align 8
  %20 = icmp eq %"class.v8::internal::compiler::Node"* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %23 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %25 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %24, align 8
  %26 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder14NumberConstantEd(%"class.v8::internal::compiler::CommonOperatorBuilder"* %25, double 0x7FF8000000000000) #5
  %27 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %23, %"class.v8::internal::compiler::Operator"* %26, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %27, %"class.v8::internal::compiler::Node"** %18, align 8
  br label %28

28:                                               ; preds = %8, %21
  %29 = phi %"class.v8::internal::compiler::Node"* [ %27, %21 ], [ %19, %8 ]
  store %"class.v8::internal::compiler::Node"* %29, %"class.v8::internal::compiler::Node"** %5, align 8
  br label %30

30:                                               ; preds = %1, %28
  %31 = phi %"class.v8::internal::compiler::Node"* [ %29, %28 ], [ %6, %1 ]
  ret %"class.v8::internal::compiler::Node"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph16EmptyStateValuesEv(%"class.v8::internal::compiler::JSGraph"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 32
  %3 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, align 8
  %4 = icmp eq %"class.v8::internal::compiler::Node"* %3, null
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %9 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %8, align 8
  %10 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %9, i32 0, i32 0) #5
  %11 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %7, %"class.v8::internal::compiler::Operator"* %10, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %11, %"class.v8::internal::compiler::Node"** %2, align 8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"class.v8::internal::compiler::Node"* [ %11, %5 ], [ %3, %1 ]
  ret %"class.v8::internal::compiler::Node"* %13
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder11StateValuesEiNS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler7JSGraph26SingleDeadTypedStateValuesEv(%"class.v8::internal::compiler::JSGraph"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 33
  %3 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %2, align 8
  %4 = icmp eq %"class.v8::internal::compiler::Node"* %3, null
  br i1 %4, label %5, label %31

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::JSGraph", %"class.v8::internal::compiler::JSGraph"* %0, i64 0, i32 0, i32 1
  %9 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %7, i64 0, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %15, %13
  %17 = icmp ult i64 %16, 32
  br i1 %17, label %18, label %20, !prof !2

18:                                               ; preds = %5
  %19 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 32) #5
  br label %22

20:                                               ; preds = %5
  %21 = add i64 %13, 32
  store i64 %21, i64* %12, align 8
  br label %22

22:                                               ; preds = %18, %20
  %23 = phi i64 [ %19, %18 ], [ %13, %20 ]
  %24 = inttoptr i64 %23 to i8*
  %25 = inttoptr i64 %23 to %"class.v8::internal::ZoneVector.1251"*
  %26 = ptrtoint %"class.v8::internal::Zone"* %11 to i64
  %27 = getelementptr inbounds %"class.v8::internal::ZoneVector.1251", %"class.v8::internal::ZoneVector.1251"* %25, i64 0, i32 0, i32 0, i32 2, i32 1
  %28 = bitcast %"struct.std::__1::__compressed_pair_elem.1261"* %27 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #5
  store i64 %26, i64* %28, align 8
  %29 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder16TypedStateValuesEPKNS0_10ZoneVectorINS0_11MachineTypeEEENS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %9, %"class.v8::internal::ZoneVector.1251"* %25, i32 2) #5
  %30 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %7, %"class.v8::internal::compiler::Operator"* %29, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #5
  store %"class.v8::internal::compiler::Node"* %30, %"class.v8::internal::compiler::Node"** %2, align 8
  br label %31

31:                                               ; preds = %1, %22
  %32 = phi %"class.v8::internal::compiler::Node"* [ %30, %22 ], [ %3, %1 ]
  ret %"class.v8::internal::compiler::Node"* %32
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder16TypedStateValuesEPKNS0_10ZoneVectorINS0_11MachineTypeEEENS1_15SparseInputMaskE(%"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::ZoneVector.1251"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.std::__1::__hash_node_base.45"*, i8 } @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE25__emplace_unique_key_argsIlJRKNS_21piecewise_construct_tENS_5tupleIJRKlEEENSO_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS7_PvEEEEbEERKT_DpOT0_(%"class.std::__1::__hash_table.41"*, i64* dereferenceable(8), %"struct.std::__1::piecewise_construct_t"* dereferenceable(1), %"class.std::__1::tuple"* dereferenceable(8), %"class.std::__1::tuple.1264"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = load i64, i64* %1, align 8
  %7 = tail call i64 @_ZN2v84base10hash_valueEm(i64 %6) #5
  %8 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %71, label %11

11:                                               ; preds = %5
  %12 = tail call i64 @llvm.ctpop.i64(i64 %9) #5, !range !277
  %13 = icmp ugt i64 %12, 1
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = add i64 %9, -1
  %16 = and i64 %15, %7
  br label %21

17:                                               ; preds = %11
  %18 = icmp ult i64 %7, %9
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  %20 = urem i64 %7, %9
  br label %21

21:                                               ; preds = %14, %17, %19
  %22 = phi i64 [ %16, %14 ], [ %20, %19 ], [ %7, %17 ]
  %23 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %23, align 8
  %25 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %24, i64 %22
  %26 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %25, align 8
  %27 = icmp eq %"struct.std::__1::__hash_node_base.45"* %26, null
  br i1 %27, label %71, label %28

28:                                               ; preds = %21
  %29 = add i64 %9, -1
  %30 = load i64, i64* %1, align 8
  br i1 %13, label %31, label %53

31:                                               ; preds = %28, %48
  %32 = phi %"struct.std::__1::__hash_node_base.45"* [ %34, %48 ], [ %26, %28 ]
  %33 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %32, i64 0, i32 0
  %34 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %33, align 8
  %35 = icmp eq %"struct.std::__1::__hash_node_base.45"* %34, null
  br i1 %35, label %71, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %34, i64 1
  %38 = bitcast %"struct.std::__1::__hash_node_base.45"* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, %7
  br i1 %40, label %48, label %41

41:                                               ; preds = %36
  %42 = icmp ult i64 %39, %9
  br i1 %42, label %45, label %43

43:                                               ; preds = %41
  %44 = urem i64 %39, %9
  br label %45

45:                                               ; preds = %43, %41
  %46 = phi i64 [ %44, %43 ], [ %39, %41 ]
  %47 = icmp eq i64 %46, %22
  br i1 %47, label %48, label %71

48:                                               ; preds = %45, %36
  %49 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %34, i64 2
  %50 = bitcast %"struct.std::__1::__hash_node_base.45"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = icmp eq i64 %51, %30
  br i1 %52, label %174, label %31

53:                                               ; preds = %28, %66
  %54 = phi %"struct.std::__1::__hash_node_base.45"* [ %56, %66 ], [ %26, %28 ]
  %55 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %54, i64 0, i32 0
  %56 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %55, align 8
  %57 = icmp eq %"struct.std::__1::__hash_node_base.45"* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %56, i64 1
  %60 = bitcast %"struct.std::__1::__hash_node_base.45"* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = icmp eq i64 %61, %7
  %63 = and i64 %61, %29
  %64 = icmp eq i64 %63, %22
  %65 = or i1 %62, %64
  br i1 %65, label %66, label %71

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %56, i64 2
  %68 = bitcast %"struct.std::__1::__hash_node_base.45"* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, %30
  br i1 %70, label %174, label %53

71:                                               ; preds = %58, %53, %45, %31, %21, %5
  %72 = phi i64 [ %22, %21 ], [ undef, %5 ], [ %22, %31 ], [ %22, %45 ], [ %22, %53 ], [ %22, %58 ]
  %73 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %74 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %73, align 8, !noalias !278
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %74, i64 0, i32 2
  %76 = load i64, i64* %75, align 8, !noalias !278
  %77 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %74, i64 0, i32 3
  %78 = load i64, i64* %77, align 8, !noalias !278
  %79 = sub i64 %78, %76
  %80 = icmp ult i64 %79, 32
  br i1 %80, label %81, label %83, !prof !2

81:                                               ; preds = %71
  %82 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %74, i64 32) #5, !noalias !278
  br label %85

83:                                               ; preds = %71
  %84 = add i64 %76, 32
  store i64 %84, i64* %75, align 8, !noalias !278
  br label %85

85:                                               ; preds = %81, %83
  %86 = phi i64 [ %82, %81 ], [ %76, %83 ]
  %87 = inttoptr i64 %86 to %"struct.std::__1::__hash_node"*
  %88 = getelementptr inbounds %"class.std::__1::tuple", %"class.std::__1::tuple"* %3, i64 0, i32 0, i32 0, i32 0
  %89 = load i64*, i64** %88, align 8, !noalias !278
  %90 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 2, i32 0, i32 0
  %91 = load i64, i64* %89, align 8, !noalias !278
  store i64 %91, i64* %90, align 8, !noalias !278
  %92 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 2, i32 0, i32 1
  store %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"** %92, align 8, !noalias !278
  %93 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 1
  store i64 %7, i64* %93, align 8, !noalias !278
  %94 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %94, align 8, !noalias !278
  %95 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 2, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  %98 = uitofp i64 %97 to float
  %99 = uitofp i64 %9 to float
  %100 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 3, i32 0, i32 0
  %101 = load float, float* %100, align 4
  %102 = fmul float %101, %99
  %103 = fcmp olt float %102, %98
  %104 = or i1 %10, %103
  br i1 %104, label %105, label %128

105:                                              ; preds = %85
  %106 = shl i64 %9, 1
  %107 = icmp ult i64 %9, 3
  %108 = tail call i64 @llvm.ctpop.i64(i64 %9) #5, !range !277
  %109 = icmp ugt i64 %108, 1
  %110 = or i1 %107, %109
  %111 = zext i1 %110 to i64
  %112 = or i64 %106, %111
  %113 = fdiv float %98, %101
  %114 = tail call float @llvm.ceil.f32(float %113) #5
  %115 = fptoui float %114 to i64
  %116 = icmp ult i64 %112, %115
  %117 = select i1 %116, i64 %115, i64 %112
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE6rehashEm(%"class.std::__1::__hash_table.41"* %0, i64 %117)
  %118 = load i64, i64* %8, align 8
  %119 = tail call i64 @llvm.ctpop.i64(i64 %118) #5, !range !277
  %120 = icmp ugt i64 %119, 1
  br i1 %120, label %124, label %121

121:                                              ; preds = %105
  %122 = add i64 %118, -1
  %123 = and i64 %122, %7
  br label %128

124:                                              ; preds = %105
  %125 = icmp ult i64 %7, %118
  br i1 %125, label %128, label %126

126:                                              ; preds = %124
  %127 = urem i64 %7, %118
  br label %128

128:                                              ; preds = %126, %124, %121, %85
  %129 = phi i64 [ %9, %85 ], [ %118, %121 ], [ %118, %124 ], [ %118, %126 ]
  %130 = phi i64 [ %72, %85 ], [ %123, %121 ], [ %7, %124 ], [ %127, %126 ]
  %131 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %132 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %131, align 8
  %133 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %132, i64 %130
  %134 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %133, align 8
  %135 = icmp eq %"struct.std::__1::__hash_node_base.45"* %134, null
  br i1 %135, label %136, label %164

136:                                              ; preds = %128
  %137 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 1, i32 0, i32 0
  %138 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %137, i64 0, i32 0
  %139 = bitcast %"struct.std::__1::__hash_node_base.45"* %137 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = inttoptr i64 %86 to i64*
  store i64 %140, i64* %141, align 8
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"* %142, %"struct.std::__1::__hash_node_base.45"** %138, align 8
  %143 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %131, align 8
  %144 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %143, i64 %130
  store %"struct.std::__1::__hash_node_base.45"* %137, %"struct.std::__1::__hash_node_base.45"** %144, align 8
  %145 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %94, align 8
  %146 = icmp eq %"struct.std::__1::__hash_node_base.45"* %145, null
  br i1 %146, label %170, label %147

147:                                              ; preds = %136
  %148 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %145, i64 1
  %149 = bitcast %"struct.std::__1::__hash_node_base.45"* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = tail call i64 @llvm.ctpop.i64(i64 %129) #5, !range !277
  %152 = icmp ugt i64 %151, 1
  br i1 %152, label %156, label %153

153:                                              ; preds = %147
  %154 = add i64 %129, -1
  %155 = and i64 %150, %154
  br label %160

156:                                              ; preds = %147
  %157 = icmp ult i64 %150, %129
  br i1 %157, label %160, label %158

158:                                              ; preds = %156
  %159 = urem i64 %150, %129
  br label %160

160:                                              ; preds = %153, %156, %158
  %161 = phi i64 [ %155, %153 ], [ %159, %158 ], [ %150, %156 ]
  %162 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %131, align 8
  %163 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %162, i64 %161
  store %"struct.std::__1::__hash_node_base.45"* %142, %"struct.std::__1::__hash_node_base.45"** %163, align 8
  br label %170

164:                                              ; preds = %128
  %165 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %134, i64 0, i32 0
  %166 = bitcast %"struct.std::__1::__hash_node_base.45"* %134 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = inttoptr i64 %86 to i64*
  store i64 %167, i64* %168, align 8
  %169 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"* %169, %"struct.std::__1::__hash_node_base.45"** %165, align 8
  br label %170

170:                                              ; preds = %136, %160, %164
  %171 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %87, i64 0, i32 0
  %172 = load i64, i64* %95, align 8
  %173 = add i64 %172, 1
  store i64 %173, i64* %95, align 8
  br label %174

174:                                              ; preds = %66, %48, %170
  %175 = phi i8 [ 1, %170 ], [ 0, %48 ], [ 0, %66 ]
  %176 = phi %"struct.std::__1::__hash_node_base.45"* [ %171, %170 ], [ %34, %48 ], [ %56, %66 ]
  %177 = insertvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } undef, %"struct.std::__1::__hash_node_base.45"* %176, 0
  %178 = insertvalue { %"struct.std::__1::__hash_node_base.45"*, i8 } %177, i8 %175, 1
  ret { %"struct.std::__1::__hash_node_base.45"*, i8 } %178
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE6rehashEm(%"class.std::__1::__hash_table.41"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 1
  br i1 %3, label %9, label %4

4:                                                ; preds = %2
  %5 = tail call i64 @llvm.ctpop.i64(i64 %1), !range !277
  %6 = icmp ugt i64 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %1) #5
  br label %9

9:                                                ; preds = %2, %4, %7
  %10 = phi i64 [ %8, %7 ], [ %1, %4 ], [ 2, %2 ]
  %11 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE8__rehashEm(%"class.std::__1::__hash_table.41"* %0, i64 %10)
  br label %45

15:                                               ; preds = %9
  %16 = icmp ult i64 %10, %12
  br i1 %16, label %17, label %45

17:                                               ; preds = %15
  %18 = icmp ugt i64 %12, 2
  %19 = tail call i64 @llvm.ctpop.i64(i64 %12) #5, !range !277
  %20 = icmp ult i64 %19, 2
  %21 = and i1 %18, %20
  %22 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = uitofp i64 %23 to float
  %25 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 3, i32 0, i32 0
  %26 = load float, float* %25, align 4
  %27 = fdiv float %24, %26
  %28 = tail call float @llvm.ceil.f32(float %27) #5
  %29 = fptoui float %28 to i64
  br i1 %21, label %30, label %37

30:                                               ; preds = %17
  %31 = icmp ult i64 %29, 2
  br i1 %31, label %39, label %32

32:                                               ; preds = %30
  %33 = add i64 %29, -1
  %34 = tail call i64 @llvm.ctlz.i64(i64 %33, i1 true) #5, !range !277
  %35 = sub nuw nsw i64 64, %34
  %36 = shl i64 1, %35
  br label %39

37:                                               ; preds = %17
  %38 = tail call i64 @_ZNSt3__112__next_primeEm(i64 %29) #5
  br label %39

39:                                               ; preds = %32, %30, %37
  %40 = phi i64 [ %38, %37 ], [ %36, %32 ], [ %29, %30 ]
  %41 = icmp ult i64 %10, %40
  %42 = select i1 %41, i64 %40, i64 %10
  %43 = icmp ult i64 %42, %12
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  tail call void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE8__rehashEm(%"class.std::__1::__hash_table.41"* %0, i64 %42)
  br label %45

45:                                               ; preds = %15, %44, %39, %14
  ret void
}

declare i64 @_ZN2v84base10hash_valueEm(i64) local_unnamed_addr #2

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

declare i64 @_ZNSt3__112__next_primeEm(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE8__rehashEm(%"class.std::__1::__hash_table.41"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %186, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = shl i64 %1, 3
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %6, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %11, %9
  %13 = icmp ugt i64 %7, %12
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %4
  %15 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %6, i64 %7) #5
  br label %18

16:                                               ; preds = %4
  %17 = add i64 %9, %7
  store i64 %17, i64* %8, align 8
  br label %18

18:                                               ; preds = %16, %14
  %19 = phi i64 [ %15, %14 ], [ %9, %16 ]
  %20 = inttoptr i64 %19 to %"struct.std::__1::__hash_node_base.45"**
  %21 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"** %20, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %22, align 8
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %20, align 8
  %23 = icmp eq i64 %1, 1
  br i1 %23, label %42, label %24

24:                                               ; preds = %18
  %25 = add i64 %1, -1
  %26 = add i64 %1, -2
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %31, label %29

29:                                               ; preds = %24
  %30 = sub i64 %25, %27
  br label %47

31:                                               ; preds = %47, %24
  %32 = phi i64 [ 1, %24 ], [ %61, %47 ]
  %33 = icmp eq i64 %27, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %31, %34
  %35 = phi i64 [ %39, %34 ], [ %32, %31 ]
  %36 = phi i64 [ %40, %34 ], [ %27, %31 ]
  %37 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %38 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %37, i64 %35
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %38, align 8
  %39 = add nuw i64 %35, 1
  %40 = add i64 %36, -1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %34, !llvm.loop !281

42:                                               ; preds = %31, %34, %18
  %43 = getelementptr inbounds %"class.std::__1::__hash_table.41", %"class.std::__1::__hash_table.41"* %0, i64 0, i32 1, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %43, i64 0, i32 0
  %45 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %44, align 8
  %46 = icmp eq %"struct.std::__1::__hash_node_base.45"* %45, null
  br i1 %46, label %188, label %64

47:                                               ; preds = %47, %29
  %48 = phi i64 [ 1, %29 ], [ %61, %47 ]
  %49 = phi i64 [ %30, %29 ], [ %62, %47 ]
  %50 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %51 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %50, i64 %48
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %51, align 8
  %52 = add nuw nsw i64 %48, 1
  %53 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %54 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %53, i64 %52
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %54, align 8
  %55 = add nuw nsw i64 %48, 2
  %56 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %57 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %56, i64 %55
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %57, align 8
  %58 = add nuw i64 %48, 3
  %59 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %60 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %59, i64 %58
  store %"struct.std::__1::__hash_node_base.45"* null, %"struct.std::__1::__hash_node_base.45"** %60, align 8
  %61 = add nuw i64 %48, 4
  %62 = add i64 %49, -4
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %31, label %47

64:                                               ; preds = %42
  %65 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %45, i64 1
  %66 = bitcast %"struct.std::__1::__hash_node_base.45"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = tail call i64 @llvm.ctpop.i64(i64 %1) #5, !range !277
  %69 = icmp ugt i64 %68, 1
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = add i64 %1, -1
  %72 = and i64 %67, %71
  br label %77

73:                                               ; preds = %64
  %74 = icmp ult i64 %67, %1
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = urem i64 %67, %1
  br label %77

77:                                               ; preds = %70, %73, %75
  %78 = phi i64 [ %72, %70 ], [ %76, %75 ], [ %67, %73 ]
  %79 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %80 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %79, i64 %78
  store %"struct.std::__1::__hash_node_base.45"* %43, %"struct.std::__1::__hash_node_base.45"** %80, align 8
  %81 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %45, i64 0, i32 0
  %82 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %81, align 8
  %83 = icmp eq %"struct.std::__1::__hash_node_base.45"* %82, null
  br i1 %83, label %188, label %84

84:                                               ; preds = %77
  %85 = add i64 %1, -1
  br i1 %69, label %86, label %138

86:                                               ; preds = %84, %129
  %87 = phi %"struct.std::__1::__hash_node_base.45"* [ %133, %129 ], [ %82, %84 ]
  %88 = phi i64 [ %131, %129 ], [ %78, %84 ]
  %89 = phi %"struct.std::__1::__hash_node_base.45"* [ %130, %129 ], [ %45, %84 ]
  %90 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %87, i64 1
  %91 = bitcast %"struct.std::__1::__hash_node_base.45"* %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = icmp ult i64 %92, %1
  br i1 %93, label %96, label %94

94:                                               ; preds = %86
  %95 = urem i64 %92, %1
  br label %96

96:                                               ; preds = %94, %86
  %97 = phi i64 [ %95, %94 ], [ %92, %86 ]
  %98 = icmp eq i64 %97, %88
  br i1 %98, label %129, label %99

99:                                               ; preds = %96
  %100 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %101 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %100, i64 %97
  %102 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %101, align 8
  %103 = icmp eq %"struct.std::__1::__hash_node_base.45"* %102, null
  br i1 %103, label %128, label %135

104:                                              ; preds = %135, %109
  %105 = phi %"struct.std::__1::__hash_node_base.45"* [ %107, %109 ], [ %87, %135 ]
  %106 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %105, i64 0, i32 0
  %107 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %106, align 8
  %108 = icmp eq %"struct.std::__1::__hash_node_base.45"* %107, null
  br i1 %108, label %115, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %107, i64 2
  %111 = bitcast %"struct.std::__1::__hash_node_base.45"* %110 to i64*
  %112 = load i64, i64* %137, align 8
  %113 = load i64, i64* %111, align 8
  %114 = icmp eq i64 %112, %113
  br i1 %114, label %104, label %115

115:                                              ; preds = %109, %104
  %116 = ptrtoint %"struct.std::__1::__hash_node_base.45"* %107 to i64
  %117 = bitcast %"struct.std::__1::__hash_node_base.45"* %105 to i64*
  %118 = bitcast %"struct.std::__1::__hash_node_base.45"* %89 to i64*
  store i64 %116, i64* %118, align 8
  %119 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %120 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %119, i64 %97
  %121 = bitcast %"struct.std::__1::__hash_node_base.45"** %120 to i64**
  %122 = load i64*, i64** %121, align 8
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %117, align 8
  %124 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %125 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %124, i64 %97
  %126 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %125, align 8
  %127 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %126, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"* %87, %"struct.std::__1::__hash_node_base.45"** %127, align 8
  br label %129

128:                                              ; preds = %99
  store %"struct.std::__1::__hash_node_base.45"* %89, %"struct.std::__1::__hash_node_base.45"** %101, align 8
  br label %129

129:                                              ; preds = %128, %115, %96
  %130 = phi %"struct.std::__1::__hash_node_base.45"* [ %87, %128 ], [ %89, %115 ], [ %87, %96 ]
  %131 = phi i64 [ %97, %128 ], [ %88, %115 ], [ %88, %96 ]
  %132 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %130, i64 0, i32 0
  %133 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %132, align 8
  %134 = icmp eq %"struct.std::__1::__hash_node_base.45"* %133, null
  br i1 %134, label %188, label %86

135:                                              ; preds = %99
  %136 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %87, i64 2
  %137 = bitcast %"struct.std::__1::__hash_node_base.45"* %136 to i64*
  br label %104

138:                                              ; preds = %84, %180
  %139 = phi %"struct.std::__1::__hash_node_base.45"* [ %184, %180 ], [ %82, %84 ]
  %140 = phi i64 [ %182, %180 ], [ %78, %84 ]
  %141 = phi %"struct.std::__1::__hash_node_base.45"* [ %181, %180 ], [ %45, %84 ]
  %142 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %139, i64 1
  %143 = bitcast %"struct.std::__1::__hash_node_base.45"* %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = and i64 %144, %85
  %146 = icmp eq i64 %145, %140
  br i1 %146, label %180, label %147

147:                                              ; preds = %138
  %148 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %149 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %148, i64 %145
  %150 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %149, align 8
  %151 = icmp eq %"struct.std::__1::__hash_node_base.45"* %150, null
  br i1 %151, label %155, label %152

152:                                              ; preds = %147
  %153 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %139, i64 2
  %154 = bitcast %"struct.std::__1::__hash_node_base.45"* %153 to i64*
  br label %156

155:                                              ; preds = %147
  store %"struct.std::__1::__hash_node_base.45"* %141, %"struct.std::__1::__hash_node_base.45"** %149, align 8
  br label %180

156:                                              ; preds = %152, %161
  %157 = phi %"struct.std::__1::__hash_node_base.45"* [ %159, %161 ], [ %139, %152 ]
  %158 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %157, i64 0, i32 0
  %159 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %158, align 8
  %160 = icmp eq %"struct.std::__1::__hash_node_base.45"* %159, null
  br i1 %160, label %167, label %161

161:                                              ; preds = %156
  %162 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %159, i64 2
  %163 = bitcast %"struct.std::__1::__hash_node_base.45"* %162 to i64*
  %164 = load i64, i64* %154, align 8
  %165 = load i64, i64* %163, align 8
  %166 = icmp eq i64 %164, %165
  br i1 %166, label %156, label %167

167:                                              ; preds = %156, %161
  %168 = ptrtoint %"struct.std::__1::__hash_node_base.45"* %159 to i64
  %169 = bitcast %"struct.std::__1::__hash_node_base.45"* %157 to i64*
  %170 = bitcast %"struct.std::__1::__hash_node_base.45"* %141 to i64*
  store i64 %168, i64* %170, align 8
  %171 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %172 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %171, i64 %145
  %173 = bitcast %"struct.std::__1::__hash_node_base.45"** %172 to i64**
  %174 = load i64*, i64** %173, align 8
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %169, align 8
  %176 = load %"struct.std::__1::__hash_node_base.45"**, %"struct.std::__1::__hash_node_base.45"*** %21, align 8
  %177 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %176, i64 %145
  %178 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %177, align 8
  %179 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %178, i64 0, i32 0
  store %"struct.std::__1::__hash_node_base.45"* %139, %"struct.std::__1::__hash_node_base.45"** %179, align 8
  br label %180

180:                                              ; preds = %138, %167, %155
  %181 = phi %"struct.std::__1::__hash_node_base.45"* [ %139, %155 ], [ %141, %167 ], [ %139, %138 ]
  %182 = phi i64 [ %145, %155 ], [ %140, %167 ], [ %140, %138 ]
  %183 = getelementptr inbounds %"struct.std::__1::__hash_node_base.45", %"struct.std::__1::__hash_node_base.45"* %181, i64 0, i32 0
  %184 = load %"struct.std::__1::__hash_node_base.45"*, %"struct.std::__1::__hash_node_base.45"** %183, align 8
  %185 = icmp eq %"struct.std::__1::__hash_node_base.45"* %184, null
  br i1 %185, label %188, label %138

186:                                              ; preds = %2
  %187 = bitcast %"class.std::__1::__hash_table.41"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %187, i8 0, i64 16, i1 false)
  br label %188

188:                                              ; preds = %180, %129, %77, %42, %186
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Operator"*, i32, %"class.v8::internal::compiler::Node"**, i1 zeroext) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !9}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !9}
!59 = distinct !{!59, !11}
!60 = distinct !{!60, !9}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !9}
!67 = distinct !{!67, !11}
!68 = distinct !{!68, !9}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !9}
!75 = distinct !{!75, !11}
!76 = distinct !{!76, !9}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !9}
!83 = distinct !{!83, !11}
!84 = distinct !{!84, !9}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !9}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !9}
!93 = !{!94}
!94 = distinct !{!94, !95}
!95 = distinct !{!95, !"LVerDomain"}
!96 = !{!97}
!97 = distinct !{!97, !95}
!98 = distinct !{!98, !9}
!99 = distinct !{!99, !11}
!100 = distinct !{!100, !9}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !11}
!108 = distinct !{!108, !9}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !9}
!115 = distinct !{!115, !11}
!116 = distinct !{!116, !9}
!117 = !{!118}
!118 = distinct !{!118, !119}
!119 = distinct !{!119, !"LVerDomain"}
!120 = !{!121}
!121 = distinct !{!121, !119}
!122 = distinct !{!122, !9}
!123 = distinct !{!123, !11}
!124 = distinct !{!124, !9}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !9}
!131 = distinct !{!131, !11}
!132 = distinct !{!132, !9}
!133 = !{!134}
!134 = distinct !{!134, !135}
!135 = distinct !{!135, !"LVerDomain"}
!136 = !{!137}
!137 = distinct !{!137, !135}
!138 = distinct !{!138, !9}
!139 = distinct !{!139, !11}
!140 = distinct !{!140, !9}
!141 = !{!142}
!142 = distinct !{!142, !143}
!143 = distinct !{!143, !"LVerDomain"}
!144 = !{!145}
!145 = distinct !{!145, !143}
!146 = distinct !{!146, !9}
!147 = distinct !{!147, !11}
!148 = distinct !{!148, !9}
!149 = !{!150}
!150 = distinct !{!150, !151}
!151 = distinct !{!151, !"LVerDomain"}
!152 = !{!153}
!153 = distinct !{!153, !151}
!154 = distinct !{!154, !9}
!155 = distinct !{!155, !11}
!156 = distinct !{!156, !9}
!157 = !{!158}
!158 = distinct !{!158, !159}
!159 = distinct !{!159, !"LVerDomain"}
!160 = !{!161}
!161 = distinct !{!161, !159}
!162 = distinct !{!162, !9}
!163 = distinct !{!163, !11}
!164 = distinct !{!164, !9}
!165 = !{!166}
!166 = distinct !{!166, !167}
!167 = distinct !{!167, !"LVerDomain"}
!168 = !{!169}
!169 = distinct !{!169, !167}
!170 = distinct !{!170, !9}
!171 = distinct !{!171, !11}
!172 = distinct !{!172, !9}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !9}
!179 = distinct !{!179, !11}
!180 = distinct !{!180, !9}
!181 = !{!182}
!182 = distinct !{!182, !183}
!183 = distinct !{!183, !"LVerDomain"}
!184 = !{!185}
!185 = distinct !{!185, !183}
!186 = distinct !{!186, !9}
!187 = distinct !{!187, !11}
!188 = distinct !{!188, !9}
!189 = !{!190}
!190 = distinct !{!190, !191}
!191 = distinct !{!191, !"LVerDomain"}
!192 = !{!193}
!193 = distinct !{!193, !191}
!194 = distinct !{!194, !9}
!195 = distinct !{!195, !11}
!196 = distinct !{!196, !9}
!197 = !{!198}
!198 = distinct !{!198, !199}
!199 = distinct !{!199, !"LVerDomain"}
!200 = !{!201}
!201 = distinct !{!201, !199}
!202 = distinct !{!202, !9}
!203 = distinct !{!203, !11}
!204 = distinct !{!204, !9}
!205 = !{!206}
!206 = distinct !{!206, !207}
!207 = distinct !{!207, !"LVerDomain"}
!208 = !{!209}
!209 = distinct !{!209, !207}
!210 = distinct !{!210, !9}
!211 = distinct !{!211, !11}
!212 = distinct !{!212, !9}
!213 = !{!214}
!214 = distinct !{!214, !215}
!215 = distinct !{!215, !"LVerDomain"}
!216 = !{!217}
!217 = distinct !{!217, !215}
!218 = distinct !{!218, !9}
!219 = distinct !{!219, !11}
!220 = distinct !{!220, !9}
!221 = !{!222}
!222 = distinct !{!222, !223}
!223 = distinct !{!223, !"LVerDomain"}
!224 = !{!225}
!225 = distinct !{!225, !223}
!226 = distinct !{!226, !9}
!227 = distinct !{!227, !11}
!228 = distinct !{!228, !9}
!229 = !{!230}
!230 = distinct !{!230, !231}
!231 = distinct !{!231, !"LVerDomain"}
!232 = !{!233}
!233 = distinct !{!233, !231}
!234 = distinct !{!234, !9}
!235 = distinct !{!235, !11}
!236 = distinct !{!236, !9}
!237 = !{!238}
!238 = distinct !{!238, !239}
!239 = distinct !{!239, !"LVerDomain"}
!240 = !{!241}
!241 = distinct !{!241, !239}
!242 = distinct !{!242, !9}
!243 = distinct !{!243, !11}
!244 = distinct !{!244, !9}
!245 = !{!246}
!246 = distinct !{!246, !247}
!247 = distinct !{!247, !"LVerDomain"}
!248 = !{!249}
!249 = distinct !{!249, !247}
!250 = distinct !{!250, !9}
!251 = distinct !{!251, !11}
!252 = distinct !{!252, !9}
!253 = !{!254}
!254 = distinct !{!254, !255}
!255 = distinct !{!255, !"LVerDomain"}
!256 = !{!257}
!257 = distinct !{!257, !255}
!258 = distinct !{!258, !9}
!259 = distinct !{!259, !11}
!260 = distinct !{!260, !9}
!261 = !{!262}
!262 = distinct !{!262, !263}
!263 = distinct !{!263, !"LVerDomain"}
!264 = !{!265}
!265 = distinct !{!265, !263}
!266 = distinct !{!266, !9}
!267 = distinct !{!267, !11}
!268 = distinct !{!268, !9}
!269 = !{!270}
!270 = distinct !{!270, !271}
!271 = distinct !{!271, !"LVerDomain"}
!272 = !{!273}
!273 = distinct !{!273, !271}
!274 = distinct !{!274, !9}
!275 = distinct !{!275, !11}
!276 = distinct !{!276, !9}
!277 = !{i64 0, i64 65}
!278 = !{!279}
!279 = distinct !{!279, !280, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKlEEENSO_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS7_PvEENS_22__hash_node_destructorINSH_ISW_EEEEEEmOT_DpOT0_: argument 0"}
!280 = distinct !{!280, !"_ZNSt3__112__hash_tableINS_17__hash_value_typeIlPN2v88internal8compiler4NodeEEENS_22__unordered_map_hasherIlS7_NS2_4base4hashIlEENS_8equal_toIlEELb1EEENS_21__unordered_map_equalIlS7_SD_SB_Lb1EEENS3_13ZoneAllocatorIS7_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKlEEENSO_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS7_PvEENS_22__hash_node_destructorINSH_ISW_EEEEEEmOT_DpOT0_"}
!281 = distinct !{!281, !11}
