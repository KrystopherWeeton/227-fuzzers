; ModuleID = '../../third_party/libgav1/src/src/dsp/x86/obmc_sse4.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/x86/obmc_sse4.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

@_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE = internal unnamed_addr constant [62 x i8] c"-@'2;@$*059=@@\22%(+.1468:<=@@@@!#$&()+,-/02345789:;<<=>@@@@@@@@", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp15ObmcInit_SSE4_1Ev() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #4
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 24, i64 0
  %3 = bitcast void (i8*, i64, i32, i32, i8*, i64)** %2 to <2 x void (i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_126OverlapBlendFromTop_SSE4_1EPvliiPKvl, void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127OverlapBlendFromLeft_SSE4_1EPvliiPKvl>, <2 x void (i8*, i64, i32, i32, i8*, i64)*>* %3, align 8
  %4 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #4
  %5 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %4, i64 0, i32 24, i64 0
  %6 = bitcast void (i8*, i64, i32, i32, i8*, i64)** %5 to <2 x void (i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131OverlapBlendFromTop10bpp_SSE4_1EPvliiPKvl, void (i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_132OverlapBlendFromLeft10bpp_SSE4_1EPvliiPKvl>, <2 x void (i8*, i64, i32, i32, i8*, i64)*>* %6, align 8
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_126OverlapBlendFromTop_SSE4_1EPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = icmp slt i32 %2, 5
  br i1 %7, label %8, label %64

8:                                                ; preds = %6
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %9
  %11 = getelementptr inbounds i8, i8* %10, i64 -2
  %12 = ashr i32 %3, 2
  %13 = sub nsw i32 %3, %12
  %14 = sext i32 %13 to i64
  br label %15

15:                                               ; preds = %15, %8
  %16 = phi i64 [ %62, %15 ], [ 0, %8 ]
  %17 = phi i8* [ %61, %15 ], [ %4, %8 ]
  %18 = phi i8* [ %60, %15 ], [ %0, %8 ]
  %19 = getelementptr inbounds i8, i8* %11, i64 %16
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %26 = tail call <16 x i8> @llvm.x86.ssse3.psign.b.128(<16 x i8> %25, <16 x i8> <i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1>) #4
  %27 = sub <16 x i8> <i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0>, %26
  %28 = bitcast i8* %18 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = insertelement <4 x i32> undef, i32 %29, i32 0
  %31 = bitcast i8* %17 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = insertelement <4 x i32> undef, i32 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %18, i64 %1
  %35 = getelementptr inbounds i8, i8* %17, i64 %5
  %36 = bitcast i8* %34 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = insertelement <4 x i32> undef, i32 %37, i32 0
  %39 = bitcast <4 x i32> %38 to <16 x i8>
  %40 = bitcast <4 x i32> %30 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %42 = shufflevector <16 x i8> %41, <16 x i8> %39, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = bitcast i8* %35 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = insertelement <4 x i32> undef, i32 %44, i32 0
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = bitcast <4 x i32> %33 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %49 = shufflevector <16 x i8> %48, <16 x i8> %46, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = shufflevector <16 x i8> %49, <16 x i8> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %50, <16 x i8> %27) #4
  %52 = lshr <8 x i16> %51, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %53 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %52, <8 x i16> zeroinitializer) #4
  %54 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %53, <8 x i16> %53) #4
  %55 = bitcast <16 x i8> %54 to <4 x i32>
  %56 = extractelement <4 x i32> %55, i32 0
  store i32 %56, i32* %28, align 1
  %57 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = bitcast <16 x i8> %57 to <4 x i32>
  %59 = extractelement <4 x i32> %58, i32 0
  store i32 %59, i32* %36, align 1
  %60 = getelementptr inbounds i8, i8* %34, i64 %1
  %61 = getelementptr inbounds i8, i8* %35, i64 %5
  %62 = add nuw nsw i64 %16, 2
  %63 = icmp slt i64 %62, %14
  br i1 %63, label %15, label %189

64:                                               ; preds = %6
  %65 = icmp eq i32 %2, 8
  br i1 %65, label %66, label %104

66:                                               ; preds = %64
  %67 = sext i32 %3 to i64
  %68 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %67
  %69 = getelementptr inbounds i8, i8* %68, i64 -2
  %70 = ashr i32 %3, 2
  %71 = sub i32 %3, %70
  %72 = sext i32 %71 to i64
  br label %73

73:                                               ; preds = %73, %66
  %74 = phi i64 [ %101, %73 ], [ %72, %66 ]
  %75 = phi i8* [ %100, %73 ], [ %4, %66 ]
  %76 = phi i8* [ %99, %73 ], [ %0, %66 ]
  %77 = sub nsw i64 %72, %74
  %78 = getelementptr inbounds i8, i8* %69, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = insertelement <16 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <16 x i32> zeroinitializer
  %82 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %81
  %83 = shufflevector <16 x i8> %81, <16 x i8> %82, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = bitcast i8* %76 to i64*
  %85 = load i64, i64* %84, align 1
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = bitcast i8* %75 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = insertelement <2 x i64> undef, i64 %88, i32 0
  %90 = bitcast <2 x i64> %86 to <16 x i8>
  %91 = bitcast <2 x i64> %89 to <16 x i8>
  %92 = shufflevector <16 x i8> %90, <16 x i8> %91, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %92, <16 x i8> %83) #4
  %94 = lshr <8 x i16> %93, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %95 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %94, <8 x i16> zeroinitializer) #4
  %96 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %95, <8 x i16> undef) #4
  %97 = bitcast <16 x i8> %96 to <2 x i64>
  %98 = extractelement <2 x i64> %97, i32 0
  store i64 %98, i64* %84, align 1
  %99 = getelementptr inbounds i8, i8* %76, i64 %1
  %100 = getelementptr inbounds i8, i8* %75, i64 %5
  %101 = add nsw i64 %74, -1
  %102 = trunc i64 %101 to i32
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %189, label %73

104:                                              ; preds = %64
  %105 = ashr i32 %3, 2
  %106 = sub nsw i32 %3, %105
  %107 = sext i32 %3 to i64
  %108 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %107
  %109 = getelementptr inbounds i8, i8* %108, i64 -2
  %110 = sext i32 %2 to i64
  %111 = sext i32 %106 to i64
  %112 = add nsw i64 %110, -1
  %113 = lshr i64 %112, 4
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %114, 1
  %116 = icmp eq i64 %113, 0
  %117 = sub nuw nsw i64 %114, %115
  %118 = icmp eq i64 %115, 0
  br label %119

119:                                              ; preds = %184, %104
  %120 = phi i64 [ %187, %184 ], [ 0, %104 ]
  %121 = phi i8* [ %186, %184 ], [ %4, %104 ]
  %122 = phi i8* [ %185, %184 ], [ %0, %104 ]
  %123 = getelementptr inbounds i8, i8* %109, i64 %120
  %124 = load i8, i8* %123, align 1
  %125 = insertelement <16 x i8> undef, i8 %124, i32 0
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <16 x i32> zeroinitializer
  %127 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %126
  %128 = shufflevector <16 x i8> %126, <16 x i8> %127, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br i1 %116, label %166, label %129

129:                                              ; preds = %119, %129
  %130 = phi i64 [ %163, %129 ], [ 0, %119 ]
  %131 = phi i64 [ %164, %129 ], [ %117, %119 ]
  %132 = getelementptr inbounds i8, i8* %122, i64 %130
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1
  %135 = getelementptr inbounds i8, i8* %121, i64 %130
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %139 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %138, <16 x i8> %128) #4
  %140 = lshr <8 x i16> %139, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %141 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %140, <8 x i16> zeroinitializer) #4
  %142 = shufflevector <16 x i8> %134, <16 x i8> %137, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %128) #4
  %144 = lshr <8 x i16> %143, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %145 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %144, <8 x i16> zeroinitializer) #4
  %146 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> %145) #4
  store <16 x i8> %146, <16 x i8>* %133, align 1
  %147 = or i64 %130, 16
  %148 = getelementptr inbounds i8, i8* %122, i64 %147
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = getelementptr inbounds i8, i8* %121, i64 %147
  %152 = bitcast i8* %151 to <16 x i8>*
  %153 = load <16 x i8>, <16 x i8>* %152, align 1
  %154 = shufflevector <16 x i8> %150, <16 x i8> %153, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %155 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %154, <16 x i8> %128) #4
  %156 = lshr <8 x i16> %155, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %157 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %156, <8 x i16> zeroinitializer) #4
  %158 = shufflevector <16 x i8> %150, <16 x i8> %153, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %159 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %158, <16 x i8> %128) #4
  %160 = lshr <8 x i16> %159, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %161 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %160, <8 x i16> zeroinitializer) #4
  %162 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %157, <8 x i16> %161) #4
  store <16 x i8> %162, <16 x i8>* %149, align 1
  %163 = add nuw nsw i64 %130, 32
  %164 = add i64 %131, -2
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %129

166:                                              ; preds = %129, %119
  %167 = phi i64 [ 0, %119 ], [ %163, %129 ]
  br i1 %118, label %184, label %168

168:                                              ; preds = %166
  %169 = getelementptr inbounds i8, i8* %122, i64 %167
  %170 = bitcast i8* %169 to <16 x i8>*
  %171 = load <16 x i8>, <16 x i8>* %170, align 1
  %172 = getelementptr inbounds i8, i8* %121, i64 %167
  %173 = bitcast i8* %172 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 1
  %175 = shufflevector <16 x i8> %171, <16 x i8> %174, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %176 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %175, <16 x i8> %128) #4
  %177 = lshr <8 x i16> %176, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %178 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %177, <8 x i16> zeroinitializer) #4
  %179 = shufflevector <16 x i8> %171, <16 x i8> %174, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %179, <16 x i8> %128) #4
  %181 = lshr <8 x i16> %180, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %182 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %181, <8 x i16> zeroinitializer) #4
  %183 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %178, <8 x i16> %182) #4
  store <16 x i8> %183, <16 x i8>* %170, align 1
  br label %184

184:                                              ; preds = %166, %168
  %185 = getelementptr inbounds i8, i8* %122, i64 %1
  %186 = getelementptr inbounds i8, i8* %121, i64 %5
  %187 = add nuw nsw i64 %120, 1
  %188 = icmp slt i64 %187, %111
  br i1 %188, label %119, label %189

189:                                              ; preds = %184, %73, %15
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12low_bitdepth12_GLOBAL__N_127OverlapBlendFromLeft_SSE4_1EPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  switch i32 %2, label %110 [
    i32 2, label %7
    i32 4, label %49
    i32 8, label %87
  ]

7:                                                ; preds = %6
  %8 = shl i64 %5, 1
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %3, %7 ], [ %47, %9 ]
  %11 = phi i8* [ %4, %7 ], [ %46, %9 ]
  %12 = phi i8* [ %0, %7 ], [ %45, %9 ]
  %13 = getelementptr inbounds i8, i8* %12, i64 %1
  %14 = bitcast i8* %12 to i16*
  %15 = load i16, i16* %14, align 1
  %16 = bitcast i8* %13 to i16*
  %17 = load i16, i16* %16, align 1
  %18 = zext i16 %15 to i32
  %19 = zext i16 %17 to i32
  %20 = shl nuw i32 %19, 16
  %21 = or i32 %20, %18
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %21, i32 0
  %23 = getelementptr inbounds i8, i8* %11, i64 %5
  %24 = bitcast i8* %11 to i16*
  %25 = load i16, i16* %24, align 1
  %26 = bitcast i8* %23 to i16*
  %27 = load i16, i16* %26, align 1
  %28 = zext i16 %25 to i32
  %29 = zext i16 %27 to i32
  %30 = shl nuw i32 %29, 16
  %31 = or i32 %30, %28
  %32 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %33 = bitcast <4 x i32> %22 to <16 x i8>
  %34 = bitcast <4 x i32> %32 to <16 x i8>
  %35 = shufflevector <16 x i8> %33, <16 x i8> %34, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %35, <16 x i8> <i8 45, i8 19, i8 64, i8 0, i8 45, i8 19, i8 64, i8 0, i8 45, i8 -45, i8 64, i8 -64, i8 45, i8 -45, i8 64, i8 -64>) #4
  %37 = lshr <8 x i16> %36, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %38 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %37, <8 x i16> zeroinitializer) #4
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %38) #4
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = trunc i32 %41 to i16
  store i16 %42, i16* %14, align 1
  %43 = bitcast <16 x i8> %39 to <8 x i16>
  %44 = extractelement <8 x i16> %43, i64 1
  store i16 %44, i16* %16, align 1
  %45 = getelementptr inbounds i8, i8* %13, i64 %1
  %46 = getelementptr inbounds i8, i8* %11, i64 %8
  %47 = add nsw i32 %10, -2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %148, label %9

49:                                               ; preds = %6, %49
  %50 = phi i32 [ %85, %49 ], [ %3, %6 ]
  %51 = phi i8* [ %84, %49 ], [ %4, %6 ]
  %52 = phi i8* [ %83, %49 ], [ %0, %6 ]
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = insertelement <4 x i32> undef, i32 %54, i32 0
  %56 = bitcast i8* %51 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = insertelement <4 x i32> undef, i32 %57, i32 0
  %59 = getelementptr inbounds i8, i8* %52, i64 %1
  %60 = getelementptr inbounds i8, i8* %51, i64 %5
  %61 = bitcast i8* %59 to i32*
  %62 = load i32, i32* %61, align 1
  %63 = insertelement <4 x i32> undef, i32 %62, i32 0
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = bitcast <4 x i32> %55 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %67 = shufflevector <16 x i8> %66, <16 x i8> %64, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = bitcast i8* %60 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = insertelement <4 x i32> undef, i32 %69, i32 0
  %71 = bitcast <4 x i32> %70 to <16 x i8>
  %72 = bitcast <4 x i32> %58 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %74 = shufflevector <16 x i8> %73, <16 x i8> %71, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = shufflevector <16 x i8> %67, <16 x i8> %74, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> <i8 39, i8 25, i8 50, i8 14, i8 59, i8 5, i8 64, i8 0, i8 39, i8 25, i8 50, i8 14, i8 59, i8 5, i8 64, i8 0>) #4
  %77 = lshr <8 x i16> %76, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %78 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %77, <8 x i16> zeroinitializer) #4
  %79 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %78, <8 x i16> %78) #4
  %80 = bitcast <16 x i8> %79 to <4 x i32>
  %81 = extractelement <4 x i32> %80, i32 0
  store i32 %81, i32* %53, align 1
  %82 = extractelement <4 x i32> %80, i64 1
  store i32 %82, i32* %61, align 1
  %83 = getelementptr inbounds i8, i8* %59, i64 %1
  %84 = getelementptr inbounds i8, i8* %60, i64 %5
  %85 = add nsw i32 %50, -2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %148, label %49

87:                                               ; preds = %6, %87
  %88 = phi i32 [ %108, %87 ], [ %3, %6 ]
  %89 = phi i8* [ %107, %87 ], [ %4, %6 ]
  %90 = phi i8* [ %106, %87 ], [ %0, %6 ]
  %91 = bitcast i8* %90 to i64*
  %92 = load i64, i64* %91, align 1
  %93 = insertelement <2 x i64> undef, i64 %92, i32 0
  %94 = bitcast i8* %89 to i64*
  %95 = load i64, i64* %94, align 1
  %96 = insertelement <2 x i64> undef, i64 %95, i32 0
  %97 = bitcast <2 x i64> %93 to <16 x i8>
  %98 = bitcast <2 x i64> %96 to <16 x i8>
  %99 = shufflevector <16 x i8> %97, <16 x i8> %98, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %99, <16 x i8> <i8 36, i8 28, i8 42, i8 22, i8 48, i8 16, i8 53, i8 11, i8 57, i8 7, i8 61, i8 3, i8 64, i8 0, i8 64, i8 0>) #4
  %101 = lshr <8 x i16> %100, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %102 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %101, <8 x i16> zeroinitializer) #4
  %103 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> undef) #4
  %104 = bitcast <16 x i8> %103 to <2 x i64>
  %105 = extractelement <2 x i64> %104, i32 0
  store i64 %105, i64* %91, align 1
  %106 = getelementptr inbounds i8, i8* %90, i64 %1
  %107 = getelementptr inbounds i8, i8* %89, i64 %5
  %108 = add nsw i32 %88, -1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %148, label %87

110:                                              ; preds = %6
  %111 = sext i32 %2 to i64
  %112 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i64 -2
  br label %114

114:                                              ; preds = %145, %110
  %115 = phi i64 [ %146, %145 ], [ 0, %110 ]
  %116 = getelementptr inbounds i8, i8* %0, i64 %115
  %117 = getelementptr inbounds i8, i8* %4, i64 %115
  %118 = getelementptr inbounds i8, i8* %113, i64 %115
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %120
  %122 = shufflevector <16 x i8> %120, <16 x i8> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %123 = shufflevector <16 x i8> %120, <16 x i8> %121, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %124

124:                                              ; preds = %124, %114
  %125 = phi i32 [ 0, %114 ], [ %143, %124 ]
  %126 = phi i8* [ %117, %114 ], [ %142, %124 ]
  %127 = phi i8* [ %116, %114 ], [ %141, %124 ]
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1
  %130 = bitcast i8* %126 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1
  %132 = shufflevector <16 x i8> %129, <16 x i8> %131, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %133 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %132, <16 x i8> %122) #4
  %134 = lshr <8 x i16> %133, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %135 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %134, <8 x i16> zeroinitializer) #4
  %136 = shufflevector <16 x i8> %129, <16 x i8> %131, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %137 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %136, <16 x i8> %123) #4
  %138 = lshr <8 x i16> %137, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %139 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %138, <8 x i16> zeroinitializer) #4
  %140 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> %139) #4
  store <16 x i8> %140, <16 x i8>* %128, align 1
  %141 = getelementptr inbounds i8, i8* %127, i64 %1
  %142 = getelementptr inbounds i8, i8* %126, i64 %5
  %143 = add nuw nsw i32 %125, 1
  %144 = icmp slt i32 %143, %3
  br i1 %144, label %124, label %145

145:                                              ; preds = %124
  %146 = add nuw nsw i64 %115, 16
  %147 = icmp slt i64 %146, %111
  br i1 %147, label %114, label %148

148:                                              ; preds = %87, %49, %9, %145
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.ssse3.psign.b.128(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_131OverlapBlendFromTop10bpp_SSE4_1EPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = bitcast i8* %0 to i16*
  %8 = bitcast i8* %4 to i16*
  %9 = lshr i64 %1, 1
  %10 = lshr i64 %5, 1
  switch i32 %2, label %139 [
    i32 2, label %11
    i32 4, label %77
  ]

11:                                               ; preds = %6
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %12
  %14 = getelementptr inbounds i8, i8* %13, i64 -2
  %15 = ashr i32 %3, 2
  %16 = sub nsw i32 %3, %15
  %17 = and i64 %1, -2
  %18 = and i64 %5, -2
  %19 = sext i32 %16 to i64
  br label %20

20:                                               ; preds = %20, %11
  %21 = phi i64 [ %75, %20 ], [ 0, %11 ]
  %22 = phi i16* [ %74, %20 ], [ %8, %11 ]
  %23 = phi i16* [ %73, %20 ], [ %7, %11 ]
  %24 = getelementptr inbounds i8, i8* %14, i64 %21
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = insertelement <4 x i32> undef, i32 %26, i32 0
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %30 = tail call <16 x i8> @llvm.x86.ssse3.psign.b.128(<16 x i8> %29, <16 x i8> <i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1>) #4
  %31 = sub <16 x i8> <i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0>, %30
  %32 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %33 = sext <8 x i8> %32 to <8 x i16>
  %34 = shufflevector <16 x i8> %31, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35 = sext <8 x i8> %34 to <8 x i16>
  %36 = bitcast i16* %23 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %23, i64 %9
  %40 = bitcast <2 x i64> %38 to <4 x float>
  %41 = bitcast i16* %39 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x float> %40, <4 x float> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast i16* %22 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = getelementptr inbounds i16, i16* %22, i64 %10
  %49 = bitcast <2 x i64> %47 to <4 x float>
  %50 = bitcast i16* %48 to <2 x float>*
  %51 = load <2 x float>, <2 x float>* %50, align 1
  %52 = shufflevector <2 x float> %51, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <4 x float> %49, <4 x float> %52, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %54 = bitcast <4 x float> %53 to <8 x i16>
  %55 = bitcast <4 x float> %44 to <8 x i16>
  %56 = shufflevector <8 x i16> %54, <8 x i16> %55, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = shufflevector <8 x i16> %54, <8 x i16> %55, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %33) #4
  %59 = add <4 x i32> %58, <i32 32, i32 32, i32 32, i32 32>
  %60 = lshr <4 x i32> %59, <i32 6, i32 6, i32 6, i32 6>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> %35) #4
  %62 = add <4 x i32> %61, <i32 32, i32 32, i32 32, i32 32>
  %63 = lshr <4 x i32> %62, <i32 6, i32 6, i32 6, i32 6>
  %64 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %60, <4 x i32> %63) #4
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = extractelement <4 x i32> %65, i32 0
  %67 = bitcast i16* %23 to i32*
  store i32 %66, i32* %67, align 1
  %68 = bitcast <8 x i16> %64 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <16 x i8> %69 to <4 x i32>
  %71 = extractelement <4 x i32> %70, i32 0
  %72 = bitcast i16* %39 to i32*
  store i32 %71, i32* %72, align 1
  %73 = getelementptr inbounds i16, i16* %23, i64 %17
  %74 = getelementptr inbounds i16, i16* %22, i64 %18
  %75 = add nuw nsw i64 %21, 2
  %76 = icmp slt i64 %75, %19
  br i1 %76, label %20, label %185

77:                                               ; preds = %6
  %78 = sext i32 %3 to i64
  %79 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %78
  %80 = getelementptr inbounds i8, i8* %79, i64 -2
  %81 = ashr i32 %3, 2
  %82 = sub nsw i32 %3, %81
  %83 = and i64 %1, -2
  %84 = and i64 %5, -2
  %85 = sext i32 %82 to i64
  br label %86

86:                                               ; preds = %86, %77
  %87 = phi i64 [ %137, %86 ], [ 0, %77 ]
  %88 = phi i16* [ %136, %86 ], [ %8, %77 ]
  %89 = phi i16* [ %135, %86 ], [ %7, %77 ]
  %90 = getelementptr inbounds i8, i8* %80, i64 %87
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = insertelement <4 x i32> undef, i32 %92, i32 0
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = tail call <16 x i8> @llvm.x86.ssse3.psign.b.128(<16 x i8> %95, <16 x i8> <i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1, i8 1, i8 -1>) #4
  %97 = sub <16 x i8> <i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0, i8 64, i8 0>, %96
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %99 = sext <8 x i8> %98 to <8 x i16>
  %100 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %101 = sext <8 x i8> %100 to <8 x i16>
  %102 = bitcast i16* %89 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i16, i16* %89, i64 %9
  %106 = bitcast <2 x i64> %104 to <4 x float>
  %107 = bitcast i16* %105 to <2 x float>*
  %108 = load <2 x float>, <2 x float>* %107, align 1
  %109 = shufflevector <2 x float> %108, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x float> %106, <4 x float> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast i16* %88 to i64*
  %112 = load i64, i64* %111, align 1
  %113 = insertelement <2 x i64> undef, i64 %112, i32 0
  %114 = getelementptr inbounds i16, i16* %88, i64 %10
  %115 = bitcast <2 x i64> %113 to <4 x float>
  %116 = bitcast i16* %114 to <2 x float>*
  %117 = load <2 x float>, <2 x float>* %116, align 1
  %118 = shufflevector <2 x float> %117, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %119 = shufflevector <4 x float> %115, <4 x float> %118, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %120 = bitcast <4 x float> %119 to <8 x i16>
  %121 = bitcast <4 x float> %110 to <8 x i16>
  %122 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %123 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %124 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %99) #4
  %125 = add <4 x i32> %124, <i32 32, i32 32, i32 32, i32 32>
  %126 = lshr <4 x i32> %125, <i32 6, i32 6, i32 6, i32 6>
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %123, <8 x i16> %101) #4
  %128 = add <4 x i32> %127, <i32 32, i32 32, i32 32, i32 32>
  %129 = lshr <4 x i32> %128, <i32 6, i32 6, i32 6, i32 6>
  %130 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %126, <4 x i32> %129) #4
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  store i64 %132, i64* %102, align 1
  %133 = bitcast <8 x i16> %130 to <4 x float>
  %134 = shufflevector <4 x float> %133, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %134, <2 x float>* %107, align 1
  %135 = getelementptr inbounds i16, i16* %89, i64 %83
  %136 = getelementptr inbounds i16, i16* %88, i64 %84
  %137 = add nuw nsw i64 %87, 2
  %138 = icmp slt i64 %137, %85
  br i1 %138, label %86, label %185

139:                                              ; preds = %6
  %140 = ashr i32 %3, 2
  %141 = sub nsw i32 %3, %140
  %142 = sext i32 %3 to i64
  %143 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %142
  %144 = getelementptr inbounds i8, i8* %143, i64 -2
  %145 = sext i32 %2 to i64
  %146 = sext i32 %141 to i64
  br label %147

147:                                              ; preds = %180, %139
  %148 = phi i64 [ %183, %180 ], [ 0, %139 ]
  %149 = phi i16* [ %182, %180 ], [ %8, %139 ]
  %150 = phi i16* [ %181, %180 ], [ %7, %139 ]
  %151 = getelementptr inbounds i8, i8* %144, i64 %148
  %152 = load i8, i8* %151, align 1
  %153 = insertelement <16 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> zeroinitializer
  %155 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %154
  %156 = shufflevector <16 x i8> %154, <16 x i8> %155, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %158 = sext <8 x i8> %157 to <8 x i16>
  %159 = shufflevector <16 x i8> %156, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %160 = sext <8 x i8> %159 to <8 x i16>
  br label %161

161:                                              ; preds = %161, %147
  %162 = phi i64 [ %178, %161 ], [ 0, %147 ]
  %163 = getelementptr inbounds i16, i16* %150, i64 %162
  %164 = bitcast i16* %163 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 1
  %166 = getelementptr inbounds i16, i16* %149, i64 %162
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 1
  %169 = shufflevector <8 x i16> %165, <8 x i16> %168, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %170 = shufflevector <8 x i16> %165, <8 x i16> %168, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %171 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %169, <8 x i16> %158) #4
  %172 = add <4 x i32> %171, <i32 32, i32 32, i32 32, i32 32>
  %173 = lshr <4 x i32> %172, <i32 6, i32 6, i32 6, i32 6>
  %174 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %160) #4
  %175 = add <4 x i32> %174, <i32 32, i32 32, i32 32, i32 32>
  %176 = lshr <4 x i32> %175, <i32 6, i32 6, i32 6, i32 6>
  %177 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %173, <4 x i32> %176) #4
  store <8 x i16> %177, <8 x i16>* %164, align 1
  %178 = add nuw nsw i64 %162, 8
  %179 = icmp slt i64 %178, %145
  br i1 %179, label %161, label %180

180:                                              ; preds = %161
  %181 = getelementptr inbounds i16, i16* %150, i64 %9
  %182 = getelementptr inbounds i16, i16* %149, i64 %10
  %183 = add nuw nsw i64 %148, 1
  %184 = icmp slt i64 %183, %146
  br i1 %184, label %147, label %185

185:                                              ; preds = %86, %20, %180
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_132OverlapBlendFromLeft10bpp_SSE4_1EPvliiPKvl(i8* nocapture, i64, i32, i32, i8* nocapture readonly, i64) #2 {
  %7 = bitcast i8* %0 to i16*
  %8 = bitcast i8* %4 to i16*
  %9 = lshr i64 %1, 1
  %10 = lshr i64 %5, 1
  switch i32 %2, label %93 [
    i32 2, label %11
    i32 4, label %49
  ]

11:                                               ; preds = %6
  %12 = and i64 %1, -2
  %13 = and i64 %5, -2
  br label %14

14:                                               ; preds = %14, %11
  %15 = phi i32 [ %3, %11 ], [ %47, %14 ]
  %16 = phi i16* [ %8, %11 ], [ %46, %14 ]
  %17 = phi i16* [ %7, %11 ], [ %45, %14 ]
  %18 = getelementptr inbounds i16, i16* %17, i64 %9
  %19 = bitcast i16* %17 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = bitcast i16* %18 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = insertelement <4 x i32> undef, i32 %20, i32 0
  %24 = insertelement <4 x i32> %23, i32 %22, i64 1
  %25 = getelementptr inbounds i16, i16* %16, i64 %10
  %26 = bitcast i16* %16 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = bitcast i16* %25 to i32*
  %29 = load i32, i32* %28, align 1
  %30 = insertelement <4 x i32> undef, i32 %27, i32 0
  %31 = insertelement <4 x i32> %30, i32 %29, i64 1
  %32 = bitcast <4 x i32> %24 to <8 x i16>
  %33 = bitcast <4 x i32> %31 to <8 x i16>
  %34 = shufflevector <8 x i16> %32, <8 x i16> %33, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> <i16 45, i16 19, i16 64, i16 0, i16 45, i16 19, i16 64, i16 0>) #4
  %36 = add <4 x i32> %35, <i32 32, i32 32, i32 32, i32 32>
  %37 = lshr <4 x i32> %36, <i32 6, i32 6, i32 6, i32 6>
  %38 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %37, <4 x i32> %37) #4
  %39 = bitcast <8 x i16> %38 to <4 x i32>
  %40 = extractelement <4 x i32> %39, i32 0
  store i32 %40, i32* %19, align 1
  %41 = bitcast <8 x i16> %38 to <16 x i8>
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = bitcast <16 x i8> %42 to <4 x i32>
  %44 = extractelement <4 x i32> %43, i32 0
  store i32 %44, i32* %21, align 1
  %45 = getelementptr inbounds i16, i16* %17, i64 %12
  %46 = getelementptr inbounds i16, i16* %16, i64 %13
  %47 = add nsw i32 %15, -2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %175, label %14

49:                                               ; preds = %6
  %50 = and i64 %1, -2
  %51 = and i64 %5, -2
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i32 [ %3, %49 ], [ %91, %52 ]
  %54 = phi i16* [ %8, %49 ], [ %90, %52 ]
  %55 = phi i16* [ %7, %49 ], [ %89, %52 ]
  %56 = bitcast i16* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> undef, i64 %57, i32 0
  %59 = getelementptr inbounds i16, i16* %55, i64 %9
  %60 = bitcast <2 x i64> %58 to <4 x float>
  %61 = bitcast i16* %59 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 1
  %63 = shufflevector <2 x float> %62, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x float> %60, <4 x float> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast i16* %54 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = getelementptr inbounds i16, i16* %54, i64 %10
  %69 = bitcast <2 x i64> %67 to <4 x float>
  %70 = bitcast i16* %68 to <2 x float>*
  %71 = load <2 x float>, <2 x float>* %70, align 1
  %72 = shufflevector <2 x float> %71, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %73 = shufflevector <4 x float> %69, <4 x float> %72, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %74 = bitcast <4 x float> %64 to <8 x i16>
  %75 = bitcast <4 x float> %73 to <8 x i16>
  %76 = shufflevector <8 x i16> %74, <8 x i16> %75, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %77 = shufflevector <8 x i16> %74, <8 x i16> %75, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %76, <8 x i16> <i16 39, i16 25, i16 50, i16 14, i16 59, i16 5, i16 64, i16 0>) #4
  %79 = add <4 x i32> %78, <i32 32, i32 32, i32 32, i32 32>
  %80 = lshr <4 x i32> %79, <i32 6, i32 6, i32 6, i32 6>
  %81 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> <i16 39, i16 25, i16 50, i16 14, i16 59, i16 5, i16 64, i16 0>) #4
  %82 = add <4 x i32> %81, <i32 32, i32 32, i32 32, i32 32>
  %83 = lshr <4 x i32> %82, <i32 6, i32 6, i32 6, i32 6>
  %84 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %80, <4 x i32> %83) #4
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  store i64 %86, i64* %56, align 1
  %87 = bitcast <8 x i16> %84 to <4 x float>
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  store <2 x float> %88, <2 x float>* %61, align 1
  %89 = getelementptr inbounds i16, i16* %55, i64 %50
  %90 = getelementptr inbounds i16, i16* %54, i64 %51
  %91 = add nsw i32 %53, -2
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %175, label %52

93:                                               ; preds = %6
  %94 = sext i32 %2 to i64
  %95 = getelementptr inbounds [62 x i8], [62 x i8]* @_ZN7libgav13dsp13high_bitdepth12_GLOBAL__N_19kObmcMaskE, i64 0, i64 %94
  %96 = getelementptr inbounds i8, i8* %95, i64 -2
  %97 = and i32 %3, 1
  %98 = icmp eq i32 %97, 0
  %99 = add nsw i32 %3, -1
  %100 = icmp eq i32 %3, 1
  br label %101

101:                                              ; preds = %172, %93
  %102 = phi i64 [ %173, %172 ], [ 0, %93 ]
  %103 = getelementptr inbounds i16, i16* %7, i64 %102
  %104 = getelementptr inbounds i16, i16* %8, i64 %102
  %105 = getelementptr inbounds i8, i8* %96, i64 %102
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %107, i32 0
  %109 = bitcast <2 x i64> %108 to <16 x i8>
  %110 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, %109
  %111 = shufflevector <16 x i8> %109, <16 x i8> %110, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %113 = sext <8 x i8> %112 to <8 x i16>
  %114 = shufflevector <16 x i8> %111, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %115 = sext <8 x i8> %114 to <8 x i16>
  br i1 %98, label %132, label %116

116:                                              ; preds = %101
  %117 = bitcast i16* %103 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 1
  %119 = bitcast i16* %104 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = shufflevector <8 x i16> %118, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = shufflevector <8 x i16> %118, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %113) #4
  %124 = add <4 x i32> %123, <i32 32, i32 32, i32 32, i32 32>
  %125 = lshr <4 x i32> %124, <i32 6, i32 6, i32 6, i32 6>
  %126 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %115) #4
  %127 = add <4 x i32> %126, <i32 32, i32 32, i32 32, i32 32>
  %128 = lshr <4 x i32> %127, <i32 6, i32 6, i32 6, i32 6>
  %129 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %125, <4 x i32> %128) #4
  store <8 x i16> %129, <8 x i16>* %117, align 1
  %130 = getelementptr inbounds i16, i16* %103, i64 %9
  %131 = getelementptr inbounds i16, i16* %104, i64 %10
  br label %132

132:                                              ; preds = %116, %101
  %133 = phi i32 [ %99, %116 ], [ %3, %101 ]
  %134 = phi i16* [ %131, %116 ], [ %104, %101 ]
  %135 = phi i16* [ %130, %116 ], [ %103, %101 ]
  br i1 %100, label %172, label %136

136:                                              ; preds = %132, %136
  %137 = phi i32 [ %170, %136 ], [ %133, %132 ]
  %138 = phi i16* [ %169, %136 ], [ %134, %132 ]
  %139 = phi i16* [ %168, %136 ], [ %135, %132 ]
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 1
  %142 = bitcast i16* %138 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 1
  %144 = shufflevector <8 x i16> %141, <8 x i16> %143, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %145 = shufflevector <8 x i16> %141, <8 x i16> %143, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %144, <8 x i16> %113) #4
  %147 = add <4 x i32> %146, <i32 32, i32 32, i32 32, i32 32>
  %148 = lshr <4 x i32> %147, <i32 6, i32 6, i32 6, i32 6>
  %149 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %115) #4
  %150 = add <4 x i32> %149, <i32 32, i32 32, i32 32, i32 32>
  %151 = lshr <4 x i32> %150, <i32 6, i32 6, i32 6, i32 6>
  %152 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %148, <4 x i32> %151) #4
  store <8 x i16> %152, <8 x i16>* %140, align 1
  %153 = getelementptr inbounds i16, i16* %139, i64 %9
  %154 = getelementptr inbounds i16, i16* %138, i64 %10
  %155 = bitcast i16* %153 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 1
  %157 = bitcast i16* %154 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 1
  %159 = shufflevector <8 x i16> %156, <8 x i16> %158, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %160 = shufflevector <8 x i16> %156, <8 x i16> %158, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %159, <8 x i16> %113) #4
  %162 = add <4 x i32> %161, <i32 32, i32 32, i32 32, i32 32>
  %163 = lshr <4 x i32> %162, <i32 6, i32 6, i32 6, i32 6>
  %164 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %160, <8 x i16> %115) #4
  %165 = add <4 x i32> %164, <i32 32, i32 32, i32 32, i32 32>
  %166 = lshr <4 x i32> %165, <i32 6, i32 6, i32 6, i32 6>
  %167 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %163, <4 x i32> %166) #4
  store <8 x i16> %167, <8 x i16>* %155, align 1
  %168 = getelementptr inbounds i16, i16* %153, i64 %9
  %169 = getelementptr inbounds i16, i16* %154, i64 %10
  %170 = add nsw i32 %137, -2
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %136

172:                                              ; preds = %136, %132
  %173 = add nuw nsw i64 %102, 8
  %174 = icmp slt i64 %173, %94
  br i1 %174, label %101, label %175

175:                                              ; preds = %52, %14, %172
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
