; ModuleID = '../../media/cast/net/rtp/rtp_packetizer.cc'
source_filename = "../../media/cast/net/rtp/rtp_packetizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::cast::RtpPacketizerConfig" = type { i32, i16, i16, i32 }
%"class.media::cast::RtpPacketizer" = type { %"struct.media::cast::RtpPacketizerConfig", %"class.media::cast::PacedSender"*, %"class.media::cast::PacketStorage"*, i16, i64, i64 }
%"class.media::cast::PacedSender" = type { %"class.media::cast::PacedPacketSender", %"class.base::TickClock"*, %"class.std::__1::vector"*, %"class.media::cast::PacketTransport"*, %class.scoped_refptr, %"class.std::__1::vector.1", %"class.std::__1::map", %"class.std::__1::map", %"class.std::__1::map.11", %"class.std::__1::map.11", %"class.std::__1::map.20", i64, i64, i64, i64, i64, i64, i64, %"class.base::TimeTicks", i32, %"class.base::WeakPtrFactory" }
%"class.media::cast::PacedPacketSender" = type { i32 (...)** }
%"class.base::TickClock" = type { i32 (...)** }
%"class.std::__1::vector" = type opaque
%"class.media::cast::PacketTransport" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.3", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::map.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.13", %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::map.20" = type { %"class.std::__1::__tree.21" }
%"class.std::__1::__tree.21" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.31 }
%class.scoped_refptr.31 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.32", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.32" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.33" }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i8 }
%"class.media::cast::PacketStorage" = type { i32 (...)**, %"class.base::circular_deque", %"class.media::cast::FrameId", i64 }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.std::__1::vector.38"*, i64 }
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.49" }
%"struct.std::__1::pair" = type { %"struct.media::cast::PacketKey", %class.scoped_refptr.40 }
%"struct.media::cast::PacketKey" = type <{ %"class.base::TimeTicks", i32, [4 x i8], %"class.media::cast::FrameId", i16, [6 x i8] }>
%class.scoped_refptr.40 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.41", %"class.std::__1::vector.42" }
%"class.base::RefCountedThreadSafe.41" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i8*, i8*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i8* }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::pair"* }
%"class.media::cast::FrameId" = type { %"class.media::cast::ExpandedValueBase" }
%"class.media::cast::ExpandedValueBase" = type { i64 }
%"struct.media::cast::EncodedFrame" = type { i32 (...)**, i32, %"class.media::cast::FrameId", %"class.media::cast::FrameId", %"class.media::cast::RtpTimeTicks", %"class.base::TimeTicks", i16, %"class.std::__1::basic_string" }
%"class.media::cast::RtpTimeTicks" = type { %"class.media::cast::ExpandedValueBase.54" }
%"class.media::cast::ExpandedValueBase.54" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::BigEndianWriter" = type { i8*, i8* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorINS_4pairIN5media4cast9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS0_IhNS_9allocatorIhEEEEEEEEENS8_ISD_EEE21__push_back_slow_pathISD_EEvOT_ = comdat any

@_ZN5media4cast19RtpPacketizerConfigC1Ev = hidden unnamed_addr alias void (%"struct.media::cast::RtpPacketizerConfig"*), void (%"struct.media::cast::RtpPacketizerConfig"*)* @_ZN5media4cast19RtpPacketizerConfigC2Ev
@_ZN5media4cast19RtpPacketizerConfigD1Ev = hidden unnamed_addr alias void (%"struct.media::cast::RtpPacketizerConfig"*), void (%"struct.media::cast::RtpPacketizerConfig"*)* @_ZN5media4cast19RtpPacketizerConfigD2Ev
@_ZN5media4cast13RtpPacketizerC1EPNS0_11PacedSenderEPNS0_13PacketStorageENS0_19RtpPacketizerConfigE = hidden unnamed_addr alias void (%"class.media::cast::RtpPacketizer"*, %"class.media::cast::PacedSender"*, %"class.media::cast::PacketStorage"*, %"struct.media::cast::RtpPacketizerConfig"*), void (%"class.media::cast::RtpPacketizer"*, %"class.media::cast::PacedSender"*, %"class.media::cast::PacketStorage"*, %"struct.media::cast::RtpPacketizerConfig"*)* @_ZN5media4cast13RtpPacketizerC2EPNS0_11PacedSenderEPNS0_13PacketStorageENS0_19RtpPacketizerConfigE
@_ZN5media4cast13RtpPacketizerD1Ev = hidden unnamed_addr alias void (%"class.media::cast::RtpPacketizer"*), void (%"class.media::cast::RtpPacketizer"*)* @_ZN5media4cast13RtpPacketizerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media4cast19RtpPacketizerConfigC2Ev(%"struct.media::cast::RtpPacketizerConfig"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.media::cast::RtpPacketizerConfig", %"struct.media::cast::RtpPacketizerConfig"* %0, i64 0, i32 0
  store i32 -1, i32* %2, align 4
  %3 = getelementptr inbounds %"struct.media::cast::RtpPacketizerConfig", %"struct.media::cast::RtpPacketizerConfig"* %0, i64 0, i32 1
  store i16 1472, i16* %3, align 4
  %4 = getelementptr inbounds %"struct.media::cast::RtpPacketizerConfig", %"struct.media::cast::RtpPacketizerConfig"* %0, i64 0, i32 2
  store i16 0, i16* %4, align 2
  %5 = getelementptr inbounds %"struct.media::cast::RtpPacketizerConfig", %"struct.media::cast::RtpPacketizerConfig"* %0, i64 0, i32 3
  store i32 0, i32* %5, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media4cast19RtpPacketizerConfigD2Ev(%"struct.media::cast::RtpPacketizerConfig"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast13RtpPacketizerC2EPNS0_11PacedSenderEPNS0_13PacketStorageENS0_19RtpPacketizerConfigE(%"class.media::cast::RtpPacketizer"* nocapture, %"class.media::cast::PacedSender"*, %"class.media::cast::PacketStorage"*, %"struct.media::cast::RtpPacketizerConfig"* nocapture readonly) unnamed_addr #2 align 2 {
  %5 = bitcast %"class.media::cast::RtpPacketizer"* %0 to i8*
  %6 = bitcast %"struct.media::cast::RtpPacketizerConfig"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 4 %6, i64 12, i1 false)
  %7 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 1
  store %"class.media::cast::PacedSender"* %1, %"class.media::cast::PacedSender"** %7, align 8
  %8 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 2
  store %"class.media::cast::PacketStorage"* %2, %"class.media::cast::PacketStorage"** %8, align 8
  %9 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 0, i32 2
  %11 = load i16, i16* %10, align 2
  store i16 %11, i16* %9, align 8
  %12 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 4
  %13 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media4cast13RtpPacketizerD2Ev(%"class.media::cast::RtpPacketizer"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i16 @_ZN5media4cast13RtpPacketizer18NextSequenceNumberEv(%"class.media::cast::RtpPacketizer"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 3
  %3 = load i16, i16* %2, align 8
  %4 = add i16 %3, 1
  store i16 %4, i16* %2, align 8
  ret i16 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast13RtpPacketizer18SendFrameAsPacketsERKNS0_12EncodedFrameE(%"class.media::cast::RtpPacketizer"* nocapture, %"struct.media::cast::EncodedFrame"* dereferenceable(80)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::vector.38", align 8
  %4 = alloca %"class.base::BigEndianWriter", align 8
  %5 = alloca %"struct.std::__1::pair", align 8
  %6 = alloca %"struct.media::cast::PacketKey", align 8
  %7 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 0, i32 1
  %8 = load i16, i16* %7, align 4
  %9 = add i16 %8, -20
  %10 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 7
  %11 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i16 %9 to i64
  %19 = add i64 %17, %18
  %20 = udiv i64 %19, %18
  %21 = zext i8 %13 to i64
  br label %31

22:                                               ; preds = %2
  %23 = zext i8 %13 to i32
  %24 = zext i16 %9 to i32
  %25 = add nuw nsw i32 %23, %24
  %26 = udiv i32 %25, %24
  %27 = zext i32 %26 to i64
  %28 = zext i8 %13 to i64
  %29 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  br label %31

31:                                               ; preds = %15, %22
  %32 = phi i64 [ %21, %15 ], [ %28, %22 ]
  %33 = phi i64 [ %17, %15 ], [ %30, %22 ]
  %34 = phi i64 [ %20, %15 ], [ %27, %22 ]
  %35 = phi i64 [ %17, %15 ], [ %28, %22 ]
  %36 = bitcast %"class.std::__1::vector.38"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #11
  %37 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %3, i64 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %3, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false) #11
  %40 = select i1 %14, i64 %33, i64 %32
  %41 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 6
  %42 = load i16, i16* %41, align 8
  %43 = icmp ne i16 %42, 0
  %44 = icmp eq i64 %40, 0
  br i1 %44, label %522, label %45

45:                                               ; preds = %31
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %49 = select i1 %14, i8* %47, i8* %48
  %50 = add i64 %35, %34
  %51 = udiv i64 %50, %34
  %52 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 4, i32 0, i32 0
  %53 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 1
  %54 = bitcast %"struct.std::__1::pair"** %38 to i64*
  %55 = bitcast %"class.std::__1::vector.38"* %3 to i64*
  %56 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 2, i32 0, i32 0
  %57 = bitcast %"class.base::BigEndianWriter"* %4 to i8*
  %58 = trunc i64 %34 to i16
  %59 = add i16 %58, -1
  %60 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 3, i32 0, i32 0
  %61 = bitcast %"struct.std::__1::pair"* %5 to i8*
  %62 = bitcast %"struct.media::cast::PacketKey"* %6 to i8*
  %63 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 5, i32 0, i32 0
  %64 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 0, i32 3
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 0
  %66 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 1, i32 0
  %67 = bitcast %"class.base::RefCountedData"** %66 to i8**
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 1
  %69 = getelementptr inbounds %class.scoped_refptr.40, %class.scoped_refptr.40* %68, i64 0, i32 0
  %70 = bitcast %class.scoped_refptr.40* %68 to i64*
  %71 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 4
  %72 = bitcast %"class.base::BigEndianWriter"* %4 to i8*
  %73 = bitcast i64* %71 to <2 x i64>*
  %74 = bitcast i64* %71 to <2 x i64>*
  br label %75

75:                                               ; preds = %45, %521
  %76 = phi i64 [ %51, %45 ], [ %85, %521 ]
  %77 = phi i64 [ %40, %45 ], [ %86, %521 ]
  %78 = phi i8* [ %49, %45 ], [ %474, %521 ]
  %79 = call i8* @_Znwm(i64 32) #12
  %80 = bitcast i8* %79 to i32*
  store i32 0, i32* %80, align 4
  %81 = getelementptr inbounds i8, i8* %79, i64 8
  %82 = bitcast i8* %81 to %"class.std::__1::vector.42"*
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #11
  %83 = atomicrmw add i32* %80, i32 1 monotonic
  %84 = icmp ult i64 %77, %76
  %85 = select i1 %84, i64 %77, i64 %76
  %86 = sub i64 %77, %85
  %87 = icmp eq i64 %86, 0
  %88 = load i64, i64* %52, align 8
  call void @_ZN5media4cast13RtpPacketizer20BuildCommonRTPheaderEPNSt3__16vectorIhNS2_9allocatorIhEEEEbNS0_12RtpTimeTicksE(%"class.media::cast::RtpPacketizer"* %0, %"class.std::__1::vector.42"* %82, i1 zeroext %87, i64 %88)
  %89 = load i32, i32* %53, align 8
  %90 = icmp eq i32 %89, 3
  %91 = select i1 %90, i8 -64, i8 64
  %92 = load i64, i64* %54, align 8
  %93 = load i64, i64* %55, align 8
  %94 = sub i64 %92, %93
  %95 = sdiv exact i64 %94, 40
  %96 = trunc i64 %95 to i16
  %97 = and i64 %95, 65535
  %98 = icmp eq i64 %97, 0
  %99 = and i1 %43, %98
  %100 = zext i1 %99 to i8
  %101 = or i8 %91, %100
  %102 = getelementptr inbounds i8, i8* %79, i64 16
  %103 = bitcast i8* %102 to i8**
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds i8, i8* %79, i64 24
  %106 = bitcast i8* %105 to i8**
  %107 = load i8*, i8** %106, align 8
  %108 = icmp eq i8* %104, %107
  %109 = ptrtoint i8* %107 to i64
  br i1 %108, label %114, label %110

110:                                              ; preds = %75
  store i8 %101, i8* %104, align 1
  %111 = getelementptr inbounds i8, i8* %104, i64 1
  %112 = ptrtoint i8* %111 to i64
  %113 = bitcast i8* %102 to i64*
  store i64 %112, i64* %113, align 8
  br label %153

114:                                              ; preds = %75
  %115 = ptrtoint i8* %104 to i64
  %116 = bitcast i8* %102 to i64*
  %117 = bitcast i8* %81 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %115, %118
  %120 = add i64 %119, 1
  %121 = icmp slt i64 %120, 0
  %122 = inttoptr i64 %118 to i8*
  br i1 %121, label %123, label %125

123:                                              ; preds = %114
  %124 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %124) #13
  unreachable

125:                                              ; preds = %114
  %126 = bitcast i8* %105 to i64*
  %127 = sub i64 %109, %118
  %128 = icmp ult i64 %127, 4611686018427387903
  br i1 %128, label %129, label %134

129:                                              ; preds = %125
  %130 = shl i64 %127, 1
  %131 = icmp ult i64 %130, %120
  %132 = select i1 %131, i64 %120, i64 %130
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %137, label %134

134:                                              ; preds = %129, %125
  %135 = phi i64 [ %132, %129 ], [ 9223372036854775807, %125 ]
  %136 = call i8* @_Znwm(i64 %135) #12
  br label %137

137:                                              ; preds = %134, %129
  %138 = phi i64 [ %135, %134 ], [ 0, %129 ]
  %139 = phi i8* [ %136, %134 ], [ null, %129 ]
  %140 = getelementptr inbounds i8, i8* %139, i64 %119
  %141 = getelementptr inbounds i8, i8* %139, i64 %138
  %142 = ptrtoint i8* %141 to i64
  store i8 %101, i8* %140, align 1
  %143 = getelementptr inbounds i8, i8* %140, i64 1
  %144 = ptrtoint i8* %143 to i64
  %145 = ptrtoint i8* %139 to i64
  %146 = icmp sgt i64 %119, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %137
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 %122, i64 %119, i1 false) #11
  br label %148

148:                                              ; preds = %147, %137
  store i64 %145, i64* %117, align 8
  store i64 %144, i64* %116, align 8
  store i64 %142, i64* %126, align 8
  %149 = icmp eq i64 %118, 0
  br i1 %149, label %153, label %150

150:                                              ; preds = %148
  call void @_ZdlPv(i8* nonnull %122) #12
  %151 = load i8*, i8** %103, align 8
  %152 = ptrtoint i8* %151 to i64
  br label %153

153:                                              ; preds = %110, %148, %150
  %154 = phi i64 [ %112, %110 ], [ %144, %148 ], [ %152, %150 ]
  %155 = phi i8* [ %111, %110 ], [ %143, %148 ], [ %151, %150 ]
  %156 = load i64, i64* %56, align 8
  %157 = trunc i64 %156 to i8
  %158 = load i8*, i8** %106, align 8
  %159 = icmp ult i8* %155, %158
  %160 = ptrtoint i8* %158 to i64
  br i1 %159, label %161, label %166

161:                                              ; preds = %153
  store i8 %157, i8* %155, align 1
  %162 = getelementptr inbounds i8, i8* %155, i64 1
  %163 = ptrtoint i8* %162 to i64
  %164 = bitcast i8* %102 to i64*
  store i64 %163, i64* %164, align 8
  %165 = bitcast i8* %81 to i64*
  br label %207

166:                                              ; preds = %153
  %167 = ptrtoint i8* %155 to i64
  %168 = bitcast i8* %102 to i64*
  %169 = bitcast i8* %81 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = sub i64 %167, %170
  %172 = add i64 %171, 1
  %173 = icmp slt i64 %172, 0
  %174 = inttoptr i64 %170 to i8*
  br i1 %173, label %175, label %177

175:                                              ; preds = %166
  %176 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %176) #13
  unreachable

177:                                              ; preds = %166
  %178 = bitcast i8* %105 to i64*
  %179 = sub i64 %160, %170
  %180 = icmp ult i64 %179, 4611686018427387903
  br i1 %180, label %181, label %186

181:                                              ; preds = %177
  %182 = shl i64 %179, 1
  %183 = icmp ult i64 %182, %172
  %184 = select i1 %183, i64 %172, i64 %182
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %189, label %186

186:                                              ; preds = %181, %177
  %187 = phi i64 [ %184, %181 ], [ 9223372036854775807, %177 ]
  %188 = call i8* @_Znwm(i64 %187) #12
  br label %189

189:                                              ; preds = %186, %181
  %190 = phi i64 [ %187, %186 ], [ 0, %181 ]
  %191 = phi i8* [ %188, %186 ], [ null, %181 ]
  %192 = getelementptr inbounds i8, i8* %191, i64 %171
  %193 = getelementptr inbounds i8, i8* %191, i64 %190
  %194 = ptrtoint i8* %193 to i64
  store i8 %157, i8* %192, align 1
  %195 = getelementptr inbounds i8, i8* %192, i64 1
  %196 = ptrtoint i8* %195 to i64
  %197 = sub i64 %154, %170
  %198 = sub i64 0, %197
  %199 = getelementptr inbounds i8, i8* %192, i64 %198
  %200 = ptrtoint i8* %199 to i64
  %201 = icmp sgt i64 %197, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %189
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %199, i8* align 1 %174, i64 %197, i1 false) #11
  br label %203

203:                                              ; preds = %202, %189
  store i64 %200, i64* %169, align 8
  store i64 %196, i64* %168, align 8
  store i64 %194, i64* %178, align 8
  %204 = icmp eq i64 %170, 0
  br i1 %204, label %207, label %205

205:                                              ; preds = %203
  call void @_ZdlPv(i8* nonnull %174) #12
  %206 = load i64, i64* %168, align 8
  br label %207

207:                                              ; preds = %161, %203, %205
  %208 = phi i64* [ %165, %161 ], [ %169, %203 ], [ %169, %205 ]
  %209 = phi i64* [ %164, %161 ], [ %168, %203 ], [ %168, %205 ]
  %210 = phi i64 [ %163, %161 ], [ %196, %203 ], [ %206, %205 ]
  %211 = load i64, i64* %208, align 8
  %212 = sub i64 %210, %211
  %213 = icmp ult i64 %212, -4
  %214 = inttoptr i64 %211 to i8*
  br i1 %213, label %215, label %218

215:                                              ; preds = %207
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.42"* %82, i64 4) #11
  %216 = bitcast i8* %81 to i8**
  %217 = load i8*, i8** %216, align 8
  br label %222

218:                                              ; preds = %207
  %219 = add nsw i64 %212, 4
  %220 = getelementptr inbounds i8, i8* %214, i64 %219
  store i8* %220, i8** %103, align 8
  %221 = bitcast i8* %81 to i8**
  br label %222

222:                                              ; preds = %215, %218
  %223 = phi i8** [ %216, %215 ], [ %221, %218 ]
  %224 = phi i8* [ %217, %215 ], [ %214, %218 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #11
  %225 = getelementptr inbounds i8, i8* %224, i64 %212
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 16, i1 false)
  call void @_ZN4base15BigEndianWriterC1EPcm(%"class.base::BigEndianWriter"* nonnull %4, i8* %225, i64 4) #11
  %226 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %4, i16 zeroext %96) #11
  %227 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %4, i16 zeroext %59) #11
  %228 = load i64, i64* %60, align 8
  %229 = trunc i64 %228 to i8
  %230 = load i8*, i8** %103, align 8
  %231 = load i8*, i8** %106, align 8
  %232 = icmp ult i8* %230, %231
  %233 = ptrtoint i8* %231 to i64
  br i1 %232, label %234, label %237

234:                                              ; preds = %222
  store i8 %229, i8* %230, align 1
  %235 = getelementptr inbounds i8, i8* %230, i64 1
  %236 = ptrtoint i8* %235 to i64
  store i64 %236, i64* %209, align 8
  br label %272

237:                                              ; preds = %222
  %238 = ptrtoint i8* %230 to i64
  %239 = load i64, i64* %208, align 8
  %240 = sub i64 %238, %239
  %241 = add i64 %240, 1
  %242 = icmp slt i64 %241, 0
  %243 = inttoptr i64 %239 to i8*
  br i1 %242, label %244, label %246

244:                                              ; preds = %237
  %245 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %245) #13
  unreachable

246:                                              ; preds = %237
  %247 = bitcast i8* %105 to i64*
  %248 = sub i64 %233, %239
  %249 = icmp ult i64 %248, 4611686018427387903
  br i1 %249, label %250, label %255

250:                                              ; preds = %246
  %251 = shl i64 %248, 1
  %252 = icmp ult i64 %251, %241
  %253 = select i1 %252, i64 %241, i64 %251
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %258, label %255

255:                                              ; preds = %250, %246
  %256 = phi i64 [ %253, %250 ], [ 9223372036854775807, %246 ]
  %257 = call i8* @_Znwm(i64 %256) #12
  br label %258

258:                                              ; preds = %255, %250
  %259 = phi i64 [ %256, %255 ], [ 0, %250 ]
  %260 = phi i8* [ %257, %255 ], [ null, %250 ]
  %261 = getelementptr inbounds i8, i8* %260, i64 %240
  %262 = getelementptr inbounds i8, i8* %260, i64 %259
  %263 = ptrtoint i8* %262 to i64
  store i8 %229, i8* %261, align 1
  %264 = getelementptr inbounds i8, i8* %261, i64 1
  %265 = ptrtoint i8* %264 to i64
  %266 = ptrtoint i8* %260 to i64
  %267 = icmp sgt i64 %240, 0
  br i1 %267, label %268, label %269

268:                                              ; preds = %258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %260, i8* align 1 %243, i64 %240, i1 false) #11
  br label %269

269:                                              ; preds = %268, %258
  store i64 %266, i64* %208, align 8
  store i64 %265, i64* %209, align 8
  store i64 %263, i64* %247, align 8
  %270 = icmp eq i64 %239, 0
  br i1 %270, label %272, label %271

271:                                              ; preds = %269
  call void @_ZdlPv(i8* nonnull %243) #12
  br label %272

272:                                              ; preds = %234, %269, %271
  %273 = xor i1 %98, true
  %274 = load i16, i16* %41, align 8
  %275 = icmp eq i16 %274, 0
  %276 = or i1 %275, %273
  br i1 %276, label %472, label %277

277:                                              ; preds = %272
  %278 = load i8*, i8** %103, align 8
  %279 = load i8*, i8** %106, align 8
  %280 = icmp ult i8* %278, %279
  %281 = ptrtoint i8* %279 to i64
  br i1 %280, label %282, label %285

282:                                              ; preds = %277
  store i8 4, i8* %278, align 1
  %283 = getelementptr inbounds i8, i8* %278, i64 1
  %284 = ptrtoint i8* %283 to i64
  store i64 %284, i64* %209, align 8
  br label %322

285:                                              ; preds = %277
  %286 = ptrtoint i8* %278 to i64
  %287 = load i64, i64* %208, align 8
  %288 = sub i64 %286, %287
  %289 = add i64 %288, 1
  %290 = icmp slt i64 %289, 0
  %291 = inttoptr i64 %287 to i8*
  br i1 %290, label %292, label %294

292:                                              ; preds = %285
  %293 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %293) #13
  unreachable

294:                                              ; preds = %285
  %295 = bitcast i8* %105 to i64*
  %296 = sub i64 %281, %287
  %297 = icmp ult i64 %296, 4611686018427387903
  br i1 %297, label %298, label %303

298:                                              ; preds = %294
  %299 = shl i64 %296, 1
  %300 = icmp ult i64 %299, %289
  %301 = select i1 %300, i64 %289, i64 %299
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %306, label %303

303:                                              ; preds = %298, %294
  %304 = phi i64 [ %301, %298 ], [ 9223372036854775807, %294 ]
  %305 = call i8* @_Znwm(i64 %304) #12
  br label %306

306:                                              ; preds = %303, %298
  %307 = phi i64 [ %304, %303 ], [ 0, %298 ]
  %308 = phi i8* [ %305, %303 ], [ null, %298 ]
  %309 = getelementptr inbounds i8, i8* %308, i64 %288
  %310 = getelementptr inbounds i8, i8* %308, i64 %307
  %311 = ptrtoint i8* %310 to i64
  store i8 4, i8* %309, align 1
  %312 = getelementptr inbounds i8, i8* %309, i64 1
  %313 = ptrtoint i8* %312 to i64
  %314 = ptrtoint i8* %308 to i64
  %315 = icmp sgt i64 %288, 0
  br i1 %315, label %316, label %317

316:                                              ; preds = %306
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %308, i8* align 1 %291, i64 %288, i1 false) #11
  br label %317

317:                                              ; preds = %316, %306
  store i64 %314, i64* %208, align 8
  store i64 %313, i64* %209, align 8
  store i64 %311, i64* %295, align 8
  %318 = icmp eq i64 %287, 0
  br i1 %318, label %322, label %319

319:                                              ; preds = %317
  call void @_ZdlPv(i8* nonnull %291) #12
  %320 = load i8*, i8** %103, align 8
  %321 = ptrtoint i8* %320 to i64
  br label %322

322:                                              ; preds = %282, %317, %319
  %323 = phi i64 [ %284, %282 ], [ %313, %317 ], [ %321, %319 ]
  %324 = phi i8* [ %283, %282 ], [ %312, %317 ], [ %320, %319 ]
  %325 = load i8*, i8** %106, align 8
  %326 = icmp ult i8* %324, %325
  %327 = ptrtoint i8* %325 to i64
  br i1 %326, label %328, label %331

328:                                              ; preds = %322
  store i8 2, i8* %324, align 1
  %329 = getelementptr inbounds i8, i8* %324, i64 1
  %330 = ptrtoint i8* %329 to i64
  store i64 %330, i64* %209, align 8
  br label %371

331:                                              ; preds = %322
  %332 = ptrtoint i8* %324 to i64
  %333 = load i64, i64* %208, align 8
  %334 = sub i64 %332, %333
  %335 = add i64 %334, 1
  %336 = icmp slt i64 %335, 0
  %337 = inttoptr i64 %333 to i8*
  br i1 %336, label %338, label %340

338:                                              ; preds = %331
  %339 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %339) #13
  unreachable

340:                                              ; preds = %331
  %341 = bitcast i8* %105 to i64*
  %342 = sub i64 %327, %333
  %343 = icmp ult i64 %342, 4611686018427387903
  br i1 %343, label %344, label %349

344:                                              ; preds = %340
  %345 = shl i64 %342, 1
  %346 = icmp ult i64 %345, %335
  %347 = select i1 %346, i64 %335, i64 %345
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %352, label %349

349:                                              ; preds = %344, %340
  %350 = phi i64 [ %347, %344 ], [ 9223372036854775807, %340 ]
  %351 = call i8* @_Znwm(i64 %350) #12
  br label %352

352:                                              ; preds = %349, %344
  %353 = phi i64 [ %350, %349 ], [ 0, %344 ]
  %354 = phi i8* [ %351, %349 ], [ null, %344 ]
  %355 = getelementptr inbounds i8, i8* %354, i64 %334
  %356 = getelementptr inbounds i8, i8* %354, i64 %353
  %357 = ptrtoint i8* %356 to i64
  store i8 2, i8* %355, align 1
  %358 = getelementptr inbounds i8, i8* %355, i64 1
  %359 = ptrtoint i8* %358 to i64
  %360 = sub i64 %323, %333
  %361 = sub i64 0, %360
  %362 = getelementptr inbounds i8, i8* %355, i64 %361
  %363 = ptrtoint i8* %362 to i64
  %364 = icmp sgt i64 %360, 0
  br i1 %364, label %365, label %366

365:                                              ; preds = %352
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %362, i8* align 1 %337, i64 %360, i1 false) #11
  br label %366

366:                                              ; preds = %365, %352
  store i64 %363, i64* %208, align 8
  store i64 %359, i64* %209, align 8
  store i64 %357, i64* %341, align 8
  %367 = icmp eq i64 %333, 0
  br i1 %367, label %371, label %368

368:                                              ; preds = %366
  call void @_ZdlPv(i8* nonnull %337) #12
  %369 = load i8*, i8** %103, align 8
  %370 = ptrtoint i8* %369 to i64
  br label %371

371:                                              ; preds = %328, %366, %368
  %372 = phi i64 [ %330, %328 ], [ %359, %366 ], [ %370, %368 ]
  %373 = phi i8* [ %329, %328 ], [ %358, %366 ], [ %369, %368 ]
  %374 = load i16, i16* %41, align 8
  %375 = lshr i16 %374, 8
  %376 = trunc i16 %375 to i8
  %377 = load i8*, i8** %106, align 8
  %378 = icmp ult i8* %373, %377
  %379 = ptrtoint i8* %377 to i64
  br i1 %378, label %380, label %383

380:                                              ; preds = %371
  store i8 %376, i8* %373, align 1
  %381 = getelementptr inbounds i8, i8* %373, i64 1
  %382 = ptrtoint i8* %381 to i64
  store i64 %382, i64* %209, align 8
  br label %423

383:                                              ; preds = %371
  %384 = ptrtoint i8* %373 to i64
  %385 = load i64, i64* %208, align 8
  %386 = sub i64 %384, %385
  %387 = add i64 %386, 1
  %388 = icmp slt i64 %387, 0
  %389 = inttoptr i64 %385 to i8*
  br i1 %388, label %390, label %392

390:                                              ; preds = %383
  %391 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %391) #13
  unreachable

392:                                              ; preds = %383
  %393 = bitcast i8* %105 to i64*
  %394 = sub i64 %379, %385
  %395 = icmp ult i64 %394, 4611686018427387903
  br i1 %395, label %396, label %401

396:                                              ; preds = %392
  %397 = shl i64 %394, 1
  %398 = icmp ult i64 %397, %387
  %399 = select i1 %398, i64 %387, i64 %397
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %404, label %401

401:                                              ; preds = %396, %392
  %402 = phi i64 [ %399, %396 ], [ 9223372036854775807, %392 ]
  %403 = call i8* @_Znwm(i64 %402) #12
  br label %404

404:                                              ; preds = %401, %396
  %405 = phi i64 [ %402, %401 ], [ 0, %396 ]
  %406 = phi i8* [ %403, %401 ], [ null, %396 ]
  %407 = getelementptr inbounds i8, i8* %406, i64 %386
  %408 = getelementptr inbounds i8, i8* %406, i64 %405
  %409 = ptrtoint i8* %408 to i64
  store i8 %376, i8* %407, align 1
  %410 = getelementptr inbounds i8, i8* %407, i64 1
  %411 = ptrtoint i8* %410 to i64
  %412 = sub i64 %372, %385
  %413 = sub i64 0, %412
  %414 = getelementptr inbounds i8, i8* %407, i64 %413
  %415 = ptrtoint i8* %414 to i64
  %416 = icmp sgt i64 %412, 0
  br i1 %416, label %417, label %418

417:                                              ; preds = %404
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %414, i8* align 1 %389, i64 %412, i1 false) #11
  br label %418

418:                                              ; preds = %417, %404
  store i64 %415, i64* %208, align 8
  store i64 %411, i64* %209, align 8
  store i64 %409, i64* %393, align 8
  %419 = icmp eq i64 %385, 0
  br i1 %419, label %423, label %420

420:                                              ; preds = %418
  call void @_ZdlPv(i8* nonnull %389) #12
  %421 = load i8*, i8** %103, align 8
  %422 = ptrtoint i8* %421 to i64
  br label %423

423:                                              ; preds = %380, %418, %420
  %424 = phi i64 [ %382, %380 ], [ %411, %418 ], [ %422, %420 ]
  %425 = phi i8* [ %381, %380 ], [ %410, %418 ], [ %421, %420 ]
  %426 = load i16, i16* %41, align 8
  %427 = trunc i16 %426 to i8
  %428 = load i8*, i8** %106, align 8
  %429 = icmp ult i8* %425, %428
  %430 = ptrtoint i8* %428 to i64
  br i1 %429, label %431, label %434

431:                                              ; preds = %423
  store i8 %427, i8* %425, align 1
  %432 = getelementptr inbounds i8, i8* %425, i64 1
  %433 = ptrtoint i8* %432 to i64
  store i64 %433, i64* %209, align 8
  br label %472

434:                                              ; preds = %423
  %435 = ptrtoint i8* %425 to i64
  %436 = load i64, i64* %208, align 8
  %437 = sub i64 %435, %436
  %438 = add i64 %437, 1
  %439 = icmp slt i64 %438, 0
  %440 = inttoptr i64 %436 to i8*
  br i1 %439, label %441, label %443

441:                                              ; preds = %434
  %442 = bitcast i8* %81 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %442) #13
  unreachable

443:                                              ; preds = %434
  %444 = bitcast i8* %105 to i64*
  %445 = sub i64 %430, %436
  %446 = icmp ult i64 %445, 4611686018427387903
  br i1 %446, label %447, label %452

447:                                              ; preds = %443
  %448 = shl i64 %445, 1
  %449 = icmp ult i64 %448, %438
  %450 = select i1 %449, i64 %438, i64 %448
  %451 = icmp eq i64 %450, 0
  br i1 %451, label %455, label %452

452:                                              ; preds = %447, %443
  %453 = phi i64 [ %450, %447 ], [ 9223372036854775807, %443 ]
  %454 = call i8* @_Znwm(i64 %453) #12
  br label %455

455:                                              ; preds = %452, %447
  %456 = phi i64 [ %453, %452 ], [ 0, %447 ]
  %457 = phi i8* [ %454, %452 ], [ null, %447 ]
  %458 = getelementptr inbounds i8, i8* %457, i64 %437
  %459 = getelementptr inbounds i8, i8* %457, i64 %456
  %460 = ptrtoint i8* %459 to i64
  store i8 %427, i8* %458, align 1
  %461 = getelementptr inbounds i8, i8* %458, i64 1
  %462 = ptrtoint i8* %461 to i64
  %463 = sub i64 %424, %436
  %464 = sub i64 0, %463
  %465 = getelementptr inbounds i8, i8* %458, i64 %464
  %466 = ptrtoint i8* %465 to i64
  %467 = icmp sgt i64 %463, 0
  br i1 %467, label %468, label %469

468:                                              ; preds = %455
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %465, i8* align 1 %440, i64 %463, i1 false) #11
  br label %469

469:                                              ; preds = %468, %455
  store i64 %466, i64* %208, align 8
  store i64 %462, i64* %209, align 8
  store i64 %460, i64* %444, align 8
  %470 = icmp eq i64 %436, 0
  br i1 %470, label %472, label %471

471:                                              ; preds = %469
  call void @_ZdlPv(i8* nonnull %440) #12
  br label %472

472:                                              ; preds = %471, %469, %431, %272
  %473 = load i8*, i8** %103, align 8
  %474 = getelementptr inbounds i8, i8* %78, i64 %85
  %475 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_(%"class.std::__1::vector.42"* %82, i8* %473, i8* %78, i8* %474)
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %61) #11
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %62) #11
  %476 = load i64, i64* %63, align 8
  %477 = load i32, i32* %64, align 8
  %478 = load i64, i64* %56, align 8
  call void @_ZN5media4cast9PacketKeyC1EN4base9TimeTicksEjNS0_7FrameIdEt(%"struct.media::cast::PacketKey"* nonnull %6, i64 %476, i32 %477, i64 %478, i16 zeroext %96) #11
  call void @_ZN5media4cast9PacketKeyC1ERKS1_(%"struct.media::cast::PacketKey"* nonnull %65, %"struct.media::cast::PacketKey"* nonnull dereferenceable(32) %6) #11
  store i8* %79, i8** %67, align 8, !alias.scope !2
  %479 = atomicrmw add i32* %80, i32 1 monotonic
  %480 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %38, align 8
  %481 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %39, align 8
  %482 = icmp ult %"struct.std::__1::pair"* %480, %481
  br i1 %482, label %483, label %490

483:                                              ; preds = %472
  %484 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %480, i64 0, i32 0
  call void @_ZN5media4cast9PacketKeyC1ERKS1_(%"struct.media::cast::PacketKey"* %484, %"struct.media::cast::PacketKey"* nonnull dereferenceable(32) %65) #11
  %485 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %480, i64 0, i32 1
  %486 = load i64, i64* %70, align 8
  %487 = bitcast %class.scoped_refptr.40* %485 to i64*
  store i64 %486, i64* %487, align 8
  store %"class.base::RefCountedData"* null, %"class.base::RefCountedData"** %69, align 8
  %488 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %480, i64 1
  %489 = ptrtoint %"struct.std::__1::pair"* %488 to i64
  store i64 %489, i64* %54, align 8
  br label %509

490:                                              ; preds = %472
  call void @_ZNSt3__16vectorINS_4pairIN5media4cast9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS0_IhNS_9allocatorIhEEEEEEEEENS8_ISD_EEE21__push_back_slow_pathISD_EEvOT_(%"class.std::__1::vector.38"* nonnull %3, %"struct.std::__1::pair"* nonnull dereferenceable(40) %5) #11
  %491 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %66, align 8
  %492 = bitcast %"class.base::RefCountedData"* %491 to i8*
  %493 = icmp eq %"class.base::RefCountedData"* %491, null
  br i1 %493, label %509, label %494

494:                                              ; preds = %490
  %495 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %491, i64 0, i32 0
  %496 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %491, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %497 = atomicrmw sub i32* %496, i32 1 acq_rel
  %498 = icmp eq i32 %497, 1
  br i1 %498, label %499, label %509

499:                                              ; preds = %494
  %500 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %495, i64 2
  %501 = bitcast %"class.base::RefCountedThreadSafe.41"* %500 to i8**
  %502 = load i8*, i8** %501, align 8
  %503 = icmp eq i8* %502, null
  br i1 %503, label %508, label %504

504:                                              ; preds = %499
  %505 = ptrtoint i8* %502 to i64
  %506 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %495, i64 4
  %507 = bitcast %"class.base::RefCountedThreadSafe.41"* %506 to i64*
  store i64 %505, i64* %507, align 8
  call void @_ZdlPv(i8* nonnull %502) #12
  br label %508

508:                                              ; preds = %504, %499
  call void @_ZdlPv(i8* %492) #12
  br label %509

509:                                              ; preds = %483, %508, %494, %490
  call void @_ZN5media4cast9PacketKeyD1Ev(%"struct.media::cast::PacketKey"* nonnull %65) #11
  call void @_ZN5media4cast9PacketKeyD1Ev(%"struct.media::cast::PacketKey"* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %61) #11
  %510 = load <2 x i64>, <2 x i64>* %73, align 8
  %511 = insertelement <2 x i64> <i64 1, i64 undef>, i64 %85, i32 1
  %512 = add <2 x i64> %510, %511
  store <2 x i64> %512, <2 x i64>* %74, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #11
  %513 = atomicrmw sub i32* %80, i32 1 acq_rel
  %514 = icmp eq i32 %513, 1
  br i1 %514, label %515, label %521

515:                                              ; preds = %509
  %516 = load i8*, i8** %223, align 8
  %517 = icmp eq i8* %516, null
  br i1 %517, label %520, label %518

518:                                              ; preds = %515
  %519 = ptrtoint i8* %516 to i64
  store i64 %519, i64* %209, align 8
  call void @_ZdlPv(i8* nonnull %516) #12
  br label %520

520:                                              ; preds = %518, %515
  call void @_ZdlPv(i8* nonnull %79) #12
  br label %521

521:                                              ; preds = %509, %520
  br i1 %87, label %522, label %75

522:                                              ; preds = %521, %31
  %523 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 2
  %524 = load %"class.media::cast::PacketStorage"*, %"class.media::cast::PacketStorage"** %523, align 8
  %525 = getelementptr inbounds %"struct.media::cast::EncodedFrame", %"struct.media::cast::EncodedFrame"* %1, i64 0, i32 2, i32 0, i32 0
  %526 = load i64, i64* %525, align 8
  call void @_ZN5media4cast13PacketStorage10StoreFrameENS0_7FrameIdERKNSt3__16vectorINS3_4pairINS0_9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS4_IhNS3_9allocatorIhEEEEEEEEENSA_ISF_EEEE(%"class.media::cast::PacketStorage"* %524, i64 %526, %"class.std::__1::vector.38"* nonnull dereferenceable(24) %3) #11
  %527 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 1
  %528 = load %"class.media::cast::PacedSender"*, %"class.media::cast::PacedSender"** %527, align 8
  %529 = call zeroext i1 @_ZN5media4cast11PacedSender11SendPacketsERKNSt3__16vectorINS2_4pairINS0_9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS3_IhNS2_9allocatorIhEEEEEEEEENS9_ISE_EEEE(%"class.media::cast::PacedSender"* %528, %"class.std::__1::vector.38"* nonnull dereferenceable(24) %3) #11
  %530 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %37, align 8
  %531 = icmp eq %"struct.std::__1::pair"* %530, null
  br i1 %531, label %566, label %532

532:                                              ; preds = %522
  %533 = bitcast %"struct.std::__1::pair"* %530 to i8*
  %534 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %38, align 8
  %535 = icmp eq %"struct.std::__1::pair"* %534, %530
  br i1 %535, label %564, label %536

536:                                              ; preds = %532, %558
  %537 = phi %"struct.std::__1::pair"* [ %538, %558 ], [ %534, %532 ]
  %538 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %537, i64 -1
  %539 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %537, i64 -1, i32 1, i32 0
  %540 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %539, align 8
  %541 = icmp eq %"class.base::RefCountedData"* %540, null
  br i1 %541, label %558, label %542

542:                                              ; preds = %536
  %543 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %540, i64 0, i32 0
  %544 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %540, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %545 = atomicrmw sub i32* %544, i32 1 acq_rel
  %546 = icmp eq i32 %545, 1
  br i1 %546, label %547, label %558

547:                                              ; preds = %542
  %548 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %543, i64 2
  %549 = bitcast %"class.base::RefCountedThreadSafe.41"* %548 to i8**
  %550 = load i8*, i8** %549, align 8
  %551 = icmp eq i8* %550, null
  br i1 %551, label %556, label %552

552:                                              ; preds = %547
  %553 = ptrtoint i8* %550 to i64
  %554 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %543, i64 4
  %555 = bitcast %"class.base::RefCountedThreadSafe.41"* %554 to i64*
  store i64 %553, i64* %555, align 8
  call void @_ZdlPv(i8* nonnull %550) #12
  br label %556

556:                                              ; preds = %552, %547
  %557 = bitcast %"class.base::RefCountedData"* %540 to i8*
  call void @_ZdlPv(i8* %557) #12
  br label %558

558:                                              ; preds = %556, %542, %536
  %559 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %538, i64 0, i32 0
  call void @_ZN5media4cast9PacketKeyD1Ev(%"struct.media::cast::PacketKey"* %559) #11
  %560 = icmp eq %"struct.std::__1::pair"* %538, %530
  br i1 %560, label %561, label %536

561:                                              ; preds = %558
  %562 = bitcast %"class.std::__1::vector.38"* %3 to i8**
  %563 = load i8*, i8** %562, align 8
  br label %564

564:                                              ; preds = %561, %532
  %565 = phi i8* [ %563, %561 ], [ %533, %532 ]
  store %"struct.std::__1::pair"* %530, %"struct.std::__1::pair"** %38, align 8
  call void @_ZdlPv(i8* %565) #12
  br label %566

566:                                              ; preds = %522, %564
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media4cast13RtpPacketizer20BuildCommonRTPheaderEPNSt3__16vectorIhNS2_9allocatorIhEEEEbNS0_12RtpTimeTicksE(%"class.media::cast::RtpPacketizer"* nocapture, %"class.std::__1::vector.42"*, i1 zeroext, i64) local_unnamed_addr #2 align 2 {
  %5 = alloca %"class.base::BigEndianWriter", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %1, i64 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ult i8* %7, %9
  %11 = ptrtoint i8* %9 to i64
  br i1 %10, label %12, label %16

12:                                               ; preds = %4
  store i8 -128, i8* %7, align 1
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = ptrtoint i8* %13 to i64
  %15 = bitcast i8** %6 to i64*
  store i64 %14, i64* %15, align 8
  br label %62

16:                                               ; preds = %4
  %17 = ptrtoint i8* %7 to i64
  %18 = bitcast i8** %6 to i64*
  %19 = bitcast %"class.std::__1::vector.42"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = add i64 %21, 1
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = bitcast %"class.std::__1::vector.42"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #13
  unreachable

26:                                               ; preds = %16
  %27 = bitcast i8** %8 to i64*
  %28 = sub i64 %11, %20
  %29 = icmp ult i64 %28, 4611686018427387903
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = shl i64 %28, 1
  %32 = icmp ult i64 %31, %22
  %33 = select i1 %32, i64 %22, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %30, %26
  %36 = phi i64 [ %33, %30 ], [ 9223372036854775807, %26 ]
  %37 = tail call i8* @_Znwm(i64 %36) #12
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i64 [ %36, %35 ], [ 0, %30 ]
  %40 = phi i8* [ %37, %35 ], [ null, %30 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 %21
  %42 = getelementptr inbounds i8, i8* %40, i64 %39
  %43 = ptrtoint i8* %42 to i64
  store i8 -128, i8* %41, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 1
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %1, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i64, i64* %18, align 8
  %49 = ptrtoint i8* %47 to i64
  %50 = sub i64 %48, %49
  %51 = sub i64 0, %50
  %52 = getelementptr inbounds i8, i8* %41, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = icmp sgt i64 %50, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %47, i64 %50, i1 false) #11
  %56 = load i8*, i8** %46, align 8
  br label %57

57:                                               ; preds = %55, %38
  %58 = phi i8* [ %47, %38 ], [ %56, %55 ]
  store i64 %53, i64* %19, align 8
  store i64 %45, i64* %18, align 8
  store i64 %43, i64* %27, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  tail call void @_ZdlPv(i8* nonnull %58) #12
  %61 = load i8*, i8** %6, align 8
  br label %62

62:                                               ; preds = %12, %57, %60
  %63 = phi i8* [ %13, %12 ], [ %44, %57 ], [ %61, %60 ]
  %64 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = select i1 %2, i32 128, i32 0
  %67 = or i32 %65, %66
  %68 = trunc i32 %67 to i8
  %69 = load i8*, i8** %8, align 8
  %70 = icmp ult i8* %63, %69
  %71 = ptrtoint i8* %69 to i64
  br i1 %70, label %72, label %77

72:                                               ; preds = %62
  store i8 %68, i8* %63, align 1
  %73 = getelementptr inbounds i8, i8* %63, i64 1
  %74 = ptrtoint i8* %73 to i64
  %75 = bitcast i8** %6 to i64*
  store i64 %74, i64* %75, align 8
  %76 = bitcast %"class.std::__1::vector.42"* %1 to i64*
  br label %123

77:                                               ; preds = %62
  %78 = ptrtoint i8* %63 to i64
  %79 = bitcast i8** %6 to i64*
  %80 = bitcast %"class.std::__1::vector.42"* %1 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = sub i64 %78, %81
  %83 = add i64 %82, 1
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %77
  %86 = bitcast %"class.std::__1::vector.42"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %86) #13
  unreachable

87:                                               ; preds = %77
  %88 = bitcast i8** %8 to i64*
  %89 = sub i64 %71, %81
  %90 = icmp ult i64 %89, 4611686018427387903
  br i1 %90, label %91, label %96

91:                                               ; preds = %87
  %92 = shl i64 %89, 1
  %93 = icmp ult i64 %92, %83
  %94 = select i1 %93, i64 %83, i64 %92
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %91, %87
  %97 = phi i64 [ %94, %91 ], [ 9223372036854775807, %87 ]
  %98 = tail call i8* @_Znwm(i64 %97) #12
  br label %99

99:                                               ; preds = %96, %91
  %100 = phi i64 [ %97, %96 ], [ 0, %91 ]
  %101 = phi i8* [ %98, %96 ], [ null, %91 ]
  %102 = getelementptr inbounds i8, i8* %101, i64 %82
  %103 = getelementptr inbounds i8, i8* %101, i64 %100
  %104 = ptrtoint i8* %103 to i64
  store i8 %68, i8* %102, align 1
  %105 = getelementptr inbounds i8, i8* %102, i64 1
  %106 = ptrtoint i8* %105 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %1, i64 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = load i64, i64* %79, align 8
  %110 = ptrtoint i8* %108 to i64
  %111 = sub i64 %109, %110
  %112 = sub i64 0, %111
  %113 = getelementptr inbounds i8, i8* %102, i64 %112
  %114 = ptrtoint i8* %113 to i64
  %115 = icmp sgt i64 %111, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %99
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %108, i64 %111, i1 false) #11
  %117 = load i8*, i8** %107, align 8
  br label %118

118:                                              ; preds = %116, %99
  %119 = phi i8* [ %108, %99 ], [ %117, %116 ]
  store i64 %114, i64* %80, align 8
  store i64 %106, i64* %79, align 8
  store i64 %104, i64* %88, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %118
  tail call void @_ZdlPv(i8* nonnull %119) #12
  %122 = load i64, i64* %79, align 8
  br label %123

123:                                              ; preds = %72, %118, %121
  %124 = phi i64* [ %76, %72 ], [ %80, %118 ], [ %80, %121 ]
  %125 = phi i64 [ %74, %72 ], [ %106, %118 ], [ %122, %121 ]
  %126 = load i64, i64* %124, align 8
  %127 = sub i64 %125, %126
  %128 = icmp ult i64 %127, -10
  %129 = inttoptr i64 %126 to i8*
  br i1 %128, label %130, label %133

130:                                              ; preds = %123
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.42"* %1, i64 10) #11
  %131 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %1, i64 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  br label %136

133:                                              ; preds = %123
  %134 = add nsw i64 %127, 10
  %135 = getelementptr inbounds i8, i8* %129, i64 %134
  store i8* %135, i8** %6, align 8
  br label %136

136:                                              ; preds = %130, %133
  %137 = phi i8* [ %132, %130 ], [ %129, %133 ]
  %138 = bitcast %"class.base::BigEndianWriter"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %138) #11
  %139 = getelementptr inbounds i8, i8* %137, i64 %127
  %140 = bitcast %"class.base::BigEndianWriter"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 16, i1 false)
  call void @_ZN4base15BigEndianWriterC1EPcm(%"class.base::BigEndianWriter"* nonnull %5, i8* %139, i64 10) #11
  %141 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 3
  %142 = load i16, i16* %141, align 8
  %143 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"* nonnull %5, i16 zeroext %142) #11
  %144 = trunc i64 %3 to i32
  %145 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU32Ej(%"class.base::BigEndianWriter"* nonnull %5, i32 %144) #11
  %146 = getelementptr inbounds %"class.media::cast::RtpPacketizer", %"class.media::cast::RtpPacketizer"* %0, i64 0, i32 0, i32 3
  %147 = load i32, i32* %146, align 8
  %148 = call zeroext i1 @_ZN4base15BigEndianWriter8WriteU32Ej(%"class.base::BigEndianWriter"* nonnull %5, i32 %147) #11
  %149 = load i16, i16* %141, align 8
  %150 = add i16 %149, 1
  store i16 %150, i16* %141, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %138) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN4base15BigEndianWriterC1EPcm(%"class.base::BigEndianWriter"*, i8*, i64) unnamed_addr #6

declare zeroext i1 @_ZN4base15BigEndianWriter8WriteU16Et(%"class.base::BigEndianWriter"*, i16 zeroext) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertINS_11__wrap_iterIPKcEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPhEEE4typeENS5_IPKhEESA_SA_(%"class.std::__1::vector.42"*, i8*, i8*, i8*) local_unnamed_addr #2 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !5
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !5
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !8, !noalias !5
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !8, !noalias !5
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !5
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !5
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !8, !noalias !5
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !8, !noalias !5
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !5
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !5
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !8, !noalias !5
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !8, !noalias !5
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !5
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !5
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !8, !noalias !5
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !8, !noalias !5
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !10

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !5
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !5
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !8, !noalias !5
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !8, !noalias !5
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !12

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !14

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !15
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !15
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !18, !noalias !15
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !18, !noalias !15
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !15
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !15
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !18, !noalias !15
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !18, !noalias !15
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !15
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !15
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !18, !noalias !15
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !18, !noalias !15
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !15
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !15
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !18, !noalias !15
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !18, !noalias !15
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !20

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !15
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !15
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !18, !noalias !15
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !18, !noalias !15
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !21

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #11
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !22

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !23
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !23
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !26, !noalias !23
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !26, !noalias !23
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !23
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !23
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !26, !noalias !23
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !26, !noalias !23
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !23
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !23
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !26, !noalias !23
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !26, !noalias !23
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !23
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !23
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !26, !noalias !23
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !26, !noalias !23
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !28

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !23
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !23
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !26, !noalias !23
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !26, !noalias !23
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !29

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !30

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector.42"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector.42"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #13
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #12
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !31
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !31
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !34, !noalias !31
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !34, !noalias !31
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !31
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !31
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !34, !noalias !31
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !34, !noalias !31
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !31
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !31
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !34, !noalias !31
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !34, !noalias !31
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !31
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !31
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !34, !noalias !31
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !34, !noalias !31
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !36

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !31
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !31
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !34, !noalias !31
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !34, !noalias !31
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !37

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !38

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #11
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !39
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !39
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !42, !noalias !39
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !42, !noalias !39
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !39
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !39
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !42, !noalias !39
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !42, !noalias !39
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !39
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !39
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !42, !noalias !39
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !42, !noalias !39
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !39
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !39
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !42, !noalias !39
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !42, !noalias !39
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !44

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !39
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !39
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !42, !noalias !39
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !42, !noalias !39
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !45

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !46

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #12
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

declare void @_ZN5media4cast9PacketKeyC1EN4base9TimeTicksEjNS0_7FrameIdEt(%"struct.media::cast::PacketKey"*, i64, i32, i64, i16 zeroext) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN5media4cast9PacketKeyD1Ev(%"struct.media::cast::PacketKey"*) unnamed_addr #7

declare void @_ZN5media4cast13PacketStorage10StoreFrameENS0_7FrameIdERKNSt3__16vectorINS3_4pairINS0_9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS4_IhNS3_9allocatorIhEEEEEEEEENSA_ISF_EEEE(%"class.media::cast::PacketStorage"*, i64, %"class.std::__1::vector.38"* dereferenceable(24)) local_unnamed_addr #6

declare zeroext i1 @_ZN5media4cast11PacedSender11SendPacketsERKNSt3__16vectorINS2_4pairINS0_9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS3_IhNS2_9allocatorIhEEEEEEEEENS9_ISE_EEEE(%"class.media::cast::PacedSender"*, %"class.std::__1::vector.38"* dereferenceable(24)) unnamed_addr #6

declare zeroext i1 @_ZN4base15BigEndianWriter8WriteU32Ej(%"class.base::BigEndianWriter"*, i32) local_unnamed_addr #6

declare void @_ZN5media4cast9PacketKeyC1ERKS1_(%"struct.media::cast::PacketKey"*, %"struct.media::cast::PacketKey"* dereferenceable(32)) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.42"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #11
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.42"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.42"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #13
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #11
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.42", %"class.std::__1::vector.42"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #11
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #12
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIN5media4cast9PacketKeyE13scoped_refptrIN4base14RefCountedDataINS0_IhNS_9allocatorIhEEEEEEEEENS8_ISD_EEE21__push_back_slow_pathISD_EEvOT_(%"class.std::__1::vector.38"*, %"struct.std::__1::pair"* dereferenceable(40)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.38"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 461168601842738790
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.38"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.std::__1::pair"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 230584300921369395
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 461168601842738790, %14 ]
  %28 = mul i64 %27, 40
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = bitcast i8* %29 to %"struct.std::__1::pair"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.std::__1::pair"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %32
  %36 = ptrtoint %"struct.std::__1::pair"* %35 to i64
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 0
  tail call void @_ZN5media4cast9PacketKeyC1ERKS1_(%"struct.media::cast::PacketKey"* %37, %"struct.media::cast::PacketKey"* dereferenceable(32) %38) #11
  %39 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %9, i32 1
  %40 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %41 = getelementptr inbounds %class.scoped_refptr.40, %class.scoped_refptr.40* %40, i64 0, i32 0
  %42 = bitcast %class.scoped_refptr.40* %40 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %class.scoped_refptr.40* %39 to i64*
  store i64 %43, i64* %44, align 8
  store %"class.base::RefCountedData"* null, %"class.base::RefCountedData"** %41, align 8
  %45 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 1
  %46 = ptrtoint %"struct.std::__1::pair"* %45 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector.38", %"class.std::__1::vector.38"* %0, i64 0, i32 0, i32 0
  %48 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %47, align 8
  %49 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %50 = icmp eq %"struct.std::__1::pair"* %49, %48
  br i1 %50, label %51, label %53

51:                                               ; preds = %31
  %52 = ptrtoint %"struct.std::__1::pair"* %48 to i64
  br label %70

53:                                               ; preds = %31, %53
  %54 = phi %"struct.std::__1::pair"* [ %65, %53 ], [ %34, %31 ]
  %55 = phi %"struct.std::__1::pair"* [ %56, %53 ], [ %49, %31 ]
  %56 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 -1
  %57 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %54, i64 -1, i32 0
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %56, i64 0, i32 0
  tail call void @_ZN5media4cast9PacketKeyC1ERKS1_(%"struct.media::cast::PacketKey"* %57, %"struct.media::cast::PacketKey"* dereferenceable(32) %58) #11
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %54, i64 -1, i32 1
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %55, i64 -1, i32 1
  %61 = getelementptr inbounds %class.scoped_refptr.40, %class.scoped_refptr.40* %60, i64 0, i32 0
  %62 = bitcast %class.scoped_refptr.40* %60 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %class.scoped_refptr.40* %59 to i64*
  store i64 %63, i64* %64, align 8
  store %"class.base::RefCountedData"* null, %"class.base::RefCountedData"** %61, align 8
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %54, i64 -1
  %66 = icmp eq %"struct.std::__1::pair"* %56, %48
  br i1 %66, label %67, label %53

67:                                               ; preds = %53
  %68 = load i64, i64* %6, align 8
  %69 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  br label %70

70:                                               ; preds = %51, %67
  %71 = phi %"struct.std::__1::pair"* [ %48, %51 ], [ %69, %67 ]
  %72 = phi %"struct.std::__1::pair"* [ %34, %51 ], [ %65, %67 ]
  %73 = phi i64 [ %52, %51 ], [ %68, %67 ]
  %74 = ptrtoint %"struct.std::__1::pair"* %72 to i64
  store i64 %74, i64* %6, align 8
  store i64 %46, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %75 = inttoptr i64 %73 to %"struct.std::__1::pair"*
  %76 = icmp eq %"struct.std::__1::pair"* %71, %75
  br i1 %76, label %102, label %77

77:                                               ; preds = %70, %99
  %78 = phi %"struct.std::__1::pair"* [ %79, %99 ], [ %71, %70 ]
  %79 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %78, i64 -1
  %80 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %78, i64 -1, i32 1, i32 0
  %81 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %80, align 8
  %82 = icmp eq %"class.base::RefCountedData"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %81, i64 0, i32 0
  %85 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %81, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = atomicrmw sub i32* %85, i32 1 acq_rel
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %99

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %84, i64 2
  %90 = bitcast %"class.base::RefCountedThreadSafe.41"* %89 to i8**
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %97, label %93

93:                                               ; preds = %88
  %94 = ptrtoint i8* %91 to i64
  %95 = getelementptr inbounds %"class.base::RefCountedThreadSafe.41", %"class.base::RefCountedThreadSafe.41"* %84, i64 4
  %96 = bitcast %"class.base::RefCountedThreadSafe.41"* %95 to i64*
  store i64 %94, i64* %96, align 8
  tail call void @_ZdlPv(i8* nonnull %91) #12
  br label %97

97:                                               ; preds = %93, %88
  %98 = bitcast %"class.base::RefCountedData"* %81 to i8*
  tail call void @_ZdlPv(i8* %98) #12
  br label %99

99:                                               ; preds = %97, %83, %77
  %100 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %79, i64 0, i32 0
  tail call void @_ZN5media4cast9PacketKeyD1Ev(%"struct.media::cast::PacketKey"* %100) #11
  %101 = icmp eq %"struct.std::__1::pair"* %79, %75
  br i1 %101, label %102, label %77

102:                                              ; preds = %99, %70
  %103 = icmp eq i64 %73, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = inttoptr i64 %73 to i8*
  tail call void @_ZdlPv(i8* %105) #12
  br label %106

106:                                              ; preds = %102, %104
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__19make_pairIN5media4cast9PacketKeyER13scoped_refptrIN4base14RefCountedDataINS_6vectorIhNS_9allocatorIhEEEEEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSF_IT0_E4typeEEEOSG_OSJ_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__19make_pairIN5media4cast9PacketKeyER13scoped_refptrIN4base14RefCountedDataINS_6vectorIhNS_9allocatorIhEEEEEEEEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENSF_IT0_E4typeEEEOSG_OSJ_"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !11}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !11}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !11}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !11}
!37 = distinct !{!37, !13}
!38 = distinct !{!38, !11}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !13}
!46 = distinct !{!46, !11}
