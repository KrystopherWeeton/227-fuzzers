; ModuleID = '../../third_party/opus/src/silk/A2NLSF.c'
source_filename = "../../third_party/opus/src/silk/A2NLSF.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@silk_LSFCosTab_FIX_Q12 = external local_unnamed_addr constant [129 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_A2NLSF(i16* nocapture, i32*, i32) local_unnamed_addr #0 {
  %4 = alloca [13 x i32], align 16
  %5 = alloca [13 x i32], align 16
  %6 = alloca [2 x i32*], align 16
  %7 = bitcast [13 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %7) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 52, i1 false)
  %8 = bitcast [13 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 52, i1 false)
  %9 = bitcast [2 x i32*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #3
  %10 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 0
  %11 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 1
  %12 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 0
  store i32* %12, i32** %10, align 16
  %13 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 0
  store i32* %13, i32** %11, align 8
  %14 = ashr i32 %2, 1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %15
  store i32 65536, i32* %16, align 4
  %17 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %15
  store i32 65536, i32* %17, align 4
  %18 = icmp sgt i32 %2, 1
  br i1 %18, label %19, label %337

19:                                               ; preds = %3
  %20 = zext i32 %14 to i64
  %21 = icmp ult i32 %14, 4
  br i1 %21, label %112, label %22

22:                                               ; preds = %19
  %23 = add nsw i64 %20, -1
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, -1
  %26 = add i32 %14, %25
  %27 = icmp sge i32 %26, %14
  %28 = icmp ugt i64 %23, 4294967295
  %29 = or i1 %27, %28
  br i1 %29, label %112, label %30

30:                                               ; preds = %22
  %31 = and i64 %20, 4294967292
  %32 = add nsw i64 %31, -4
  %33 = lshr exact i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 1
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %86, label %37

37:                                               ; preds = %30
  %38 = sub nuw nsw i64 %34, %35
  %39 = getelementptr inbounds i32, i32* %1, i64 -3
  %40 = getelementptr inbounds i32, i32* %1, i64 -3
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi i64 [ 0, %37 ], [ %83, %41 ]
  %43 = phi i64 [ %38, %37 ], [ %84, %41 ]
  %44 = trunc i64 %42 to i32
  %45 = xor i32 %44, -1
  %46 = add i32 %14, %45
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %39, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %52 = add nsw i64 %42, %15
  %53 = getelementptr inbounds i32, i32* %1, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = add <4 x i32> %51, %55
  %57 = sub <4 x i32> zeroinitializer, %56
  %58 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %42
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %59, align 16
  %60 = sub <4 x i32> %55, %51
  %61 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %42
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %62, align 16
  %63 = or i64 %42, 4
  %64 = trunc i64 %63 to i32
  %65 = xor i32 %64, -1
  %66 = add i32 %14, %65
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, i32* %40, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %72 = add nsw i64 %63, %15
  %73 = getelementptr inbounds i32, i32* %1, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4
  %76 = add <4 x i32> %71, %75
  %77 = sub <4 x i32> zeroinitializer, %76
  %78 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %63
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %79, align 16
  %80 = sub <4 x i32> %75, %71
  %81 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %63
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %82, align 16
  %83 = add i64 %42, 8
  %84 = add i64 %43, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %41, !llvm.loop !2

86:                                               ; preds = %41, %30
  %87 = phi i64 [ 0, %30 ], [ %83, %41 ]
  %88 = icmp eq i64 %35, 0
  br i1 %88, label %110, label %89

89:                                               ; preds = %86
  %90 = trunc i64 %87 to i32
  %91 = xor i32 %90, -1
  %92 = add i32 %14, %91
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %1, i64 -3
  %95 = getelementptr inbounds i32, i32* %94, i64 %93
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 4
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %99 = add nsw i64 %87, %15
  %100 = getelementptr inbounds i32, i32* %1, i64 %99
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4
  %103 = add <4 x i32> %98, %102
  %104 = sub <4 x i32> zeroinitializer, %103
  %105 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %87
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %106, align 16
  %107 = sub <4 x i32> %102, %98
  %108 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %87
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 16
  br label %110

110:                                              ; preds = %86, %89
  %111 = icmp eq i64 %31, %20
  br i1 %111, label %132, label %112

112:                                              ; preds = %110, %22, %19
  %113 = phi i64 [ 0, %22 ], [ 0, %19 ], [ %31, %110 ]
  br label %114

114:                                              ; preds = %112, %114
  %115 = phi i64 [ %130, %114 ], [ %113, %112 ]
  %116 = trunc i64 %115 to i32
  %117 = xor i32 %116, -1
  %118 = add i32 %14, %117
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %1, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = add nsw i64 %115, %15
  %123 = getelementptr inbounds i32, i32* %1, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = add i32 %121, %124
  %126 = sub i32 0, %125
  %127 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %115
  store i32 %126, i32* %127, align 4
  %128 = sub i32 %124, %121
  %129 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %115
  store i32 %128, i32* %129, align 4
  %130 = add nuw nsw i64 %115, 1
  %131 = icmp eq i64 %130, %20
  br i1 %131, label %132, label %114, !llvm.loop !4

132:                                              ; preds = %114, %110
  %133 = load i32, i32* %16, align 4
  %134 = load i32, i32* %17, align 4
  br label %135

135:                                              ; preds = %132, %135
  %136 = phi i32 [ %145, %135 ], [ %134, %132 ]
  %137 = phi i32 [ %142, %135 ], [ %133, %132 ]
  %138 = phi i64 [ %139, %135 ], [ %15, %132 ]
  %139 = add nsw i64 %138, -1
  %140 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = sub nsw i32 %141, %137
  store i32 %142, i32* %140, align 4
  %143 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %139
  %144 = load i32, i32* %143, align 4
  %145 = add nsw i32 %144, %136
  store i32 %145, i32* %143, align 4
  %146 = icmp sgt i64 %139, 0
  br i1 %146, label %135, label %147

147:                                              ; preds = %135
  %148 = icmp slt i32 %2, 4
  br i1 %148, label %149, label %151

149:                                              ; preds = %147
  %150 = load i32, i32* %16, align 4
  br label %337

151:                                              ; preds = %147
  %152 = add nuw nsw i32 %14, 1
  %153 = zext i32 %152 to i64
  %154 = add nsw i64 %15, -2
  br label %155

155:                                              ; preds = %234, %151
  %156 = phi i64 [ %244, %234 ], [ 0, %151 ]
  %157 = phi i64 [ %242, %234 ], [ 2, %151 ]
  %158 = sub i64 %154, %156
  %159 = add i64 %158, -2
  %160 = lshr i64 %159, 1
  %161 = add nuw i64 %160, 1
  %162 = sub i64 %154, %156
  %163 = icmp slt i64 %157, %15
  br i1 %163, label %164, label %234

164:                                              ; preds = %155
  %165 = icmp ult i64 %162, 2
  br i1 %165, label %222, label %166

166:                                              ; preds = %164
  %167 = and i64 %162, -2
  %168 = sub i64 %15, %167
  %169 = and i64 %161, 1
  %170 = icmp eq i64 %160, 0
  br i1 %170, label %204, label %171

171:                                              ; preds = %166
  %172 = sub nuw i64 %161, %169
  br label %173

173:                                              ; preds = %173, %171
  %174 = phi i64 [ 0, %171 ], [ %201, %173 ]
  %175 = phi i64 [ %172, %171 ], [ %202, %173 ]
  %176 = sub i64 %15, %174
  %177 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %176
  %178 = getelementptr inbounds i32, i32* %177, i64 -1
  %179 = bitcast i32* %178 to <2 x i32>*
  %180 = load <2 x i32>, <2 x i32>* %179, align 4
  %181 = add nsw i64 %176, -2
  %182 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %181
  %183 = getelementptr inbounds i32, i32* %182, i64 -1
  %184 = bitcast i32* %183 to <2 x i32>*
  %185 = load <2 x i32>, <2 x i32>* %184, align 4
  %186 = sub nsw <2 x i32> %185, %180
  %187 = bitcast i32* %183 to <2 x i32>*
  store <2 x i32> %186, <2 x i32>* %187, align 4
  %188 = or i64 %174, 2
  %189 = sub i64 %15, %188
  %190 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %189
  %191 = getelementptr inbounds i32, i32* %190, i64 -1
  %192 = bitcast i32* %191 to <2 x i32>*
  %193 = load <2 x i32>, <2 x i32>* %192, align 4
  %194 = add nsw i64 %189, -2
  %195 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %194
  %196 = getelementptr inbounds i32, i32* %195, i64 -1
  %197 = bitcast i32* %196 to <2 x i32>*
  %198 = load <2 x i32>, <2 x i32>* %197, align 4
  %199 = sub nsw <2 x i32> %198, %193
  %200 = bitcast i32* %196 to <2 x i32>*
  store <2 x i32> %199, <2 x i32>* %200, align 4
  %201 = add i64 %174, 4
  %202 = add i64 %175, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %173, !llvm.loop !5

204:                                              ; preds = %173, %166
  %205 = phi i64 [ 0, %166 ], [ %201, %173 ]
  %206 = icmp eq i64 %169, 0
  br i1 %206, label %220, label %207

207:                                              ; preds = %204
  %208 = sub i64 %15, %205
  %209 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %208
  %210 = getelementptr inbounds i32, i32* %209, i64 -1
  %211 = bitcast i32* %210 to <2 x i32>*
  %212 = load <2 x i32>, <2 x i32>* %211, align 4
  %213 = add nsw i64 %208, -2
  %214 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %213
  %215 = getelementptr inbounds i32, i32* %214, i64 -1
  %216 = bitcast i32* %215 to <2 x i32>*
  %217 = load <2 x i32>, <2 x i32>* %216, align 4
  %218 = sub nsw <2 x i32> %217, %212
  %219 = bitcast i32* %215 to <2 x i32>*
  store <2 x i32> %218, <2 x i32>* %219, align 4
  br label %220

220:                                              ; preds = %204, %207
  %221 = icmp eq i64 %162, %167
  br i1 %221, label %234, label %222

222:                                              ; preds = %220, %164
  %223 = phi i64 [ %15, %164 ], [ %168, %220 ]
  br label %224

224:                                              ; preds = %222, %224
  %225 = phi i64 [ %232, %224 ], [ %223, %222 ]
  %226 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = add nsw i64 %225, -2
  %229 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = sub nsw i32 %230, %227
  store i32 %231, i32* %229, align 4
  %232 = add nsw i64 %225, -1
  %233 = icmp sgt i64 %232, %157
  br i1 %233, label %224, label %234, !llvm.loop !6

234:                                              ; preds = %224, %220, %155
  %235 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %157
  %236 = load i32, i32* %235, align 4
  %237 = shl i32 %236, 1
  %238 = add nsw i64 %157, -2
  %239 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = sub nsw i32 %240, %237
  store i32 %241, i32* %239, align 4
  %242 = add nuw nsw i64 %157, 1
  %243 = icmp eq i64 %242, %153
  %244 = add i64 %156, 1
  br i1 %243, label %245, label %155

245:                                              ; preds = %234
  %246 = add nsw i64 %15, -2
  br label %247

247:                                              ; preds = %245, %326
  %248 = phi i64 [ 0, %245 ], [ %336, %326 ]
  %249 = phi i64 [ 2, %245 ], [ %334, %326 ]
  %250 = sub i64 %246, %248
  %251 = add i64 %250, -2
  %252 = lshr i64 %251, 1
  %253 = add nuw i64 %252, 1
  %254 = sub i64 %246, %248
  %255 = icmp slt i64 %249, %15
  br i1 %255, label %256, label %326

256:                                              ; preds = %247
  %257 = icmp ult i64 %254, 2
  br i1 %257, label %314, label %258

258:                                              ; preds = %256
  %259 = and i64 %254, -2
  %260 = sub i64 %15, %259
  %261 = and i64 %253, 1
  %262 = icmp eq i64 %252, 0
  br i1 %262, label %296, label %263

263:                                              ; preds = %258
  %264 = sub nuw i64 %253, %261
  br label %265

265:                                              ; preds = %265, %263
  %266 = phi i64 [ 0, %263 ], [ %293, %265 ]
  %267 = phi i64 [ %264, %263 ], [ %294, %265 ]
  %268 = sub i64 %15, %266
  %269 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %268
  %270 = getelementptr inbounds i32, i32* %269, i64 -1
  %271 = bitcast i32* %270 to <2 x i32>*
  %272 = load <2 x i32>, <2 x i32>* %271, align 4
  %273 = add nsw i64 %268, -2
  %274 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %273
  %275 = getelementptr inbounds i32, i32* %274, i64 -1
  %276 = bitcast i32* %275 to <2 x i32>*
  %277 = load <2 x i32>, <2 x i32>* %276, align 4
  %278 = sub nsw <2 x i32> %277, %272
  %279 = bitcast i32* %275 to <2 x i32>*
  store <2 x i32> %278, <2 x i32>* %279, align 4
  %280 = or i64 %266, 2
  %281 = sub i64 %15, %280
  %282 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %281
  %283 = getelementptr inbounds i32, i32* %282, i64 -1
  %284 = bitcast i32* %283 to <2 x i32>*
  %285 = load <2 x i32>, <2 x i32>* %284, align 4
  %286 = add nsw i64 %281, -2
  %287 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %286
  %288 = getelementptr inbounds i32, i32* %287, i64 -1
  %289 = bitcast i32* %288 to <2 x i32>*
  %290 = load <2 x i32>, <2 x i32>* %289, align 4
  %291 = sub nsw <2 x i32> %290, %285
  %292 = bitcast i32* %288 to <2 x i32>*
  store <2 x i32> %291, <2 x i32>* %292, align 4
  %293 = add i64 %266, 4
  %294 = add i64 %267, -2
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %265, !llvm.loop !8

296:                                              ; preds = %265, %258
  %297 = phi i64 [ 0, %258 ], [ %293, %265 ]
  %298 = icmp eq i64 %261, 0
  br i1 %298, label %312, label %299

299:                                              ; preds = %296
  %300 = sub i64 %15, %297
  %301 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %300
  %302 = getelementptr inbounds i32, i32* %301, i64 -1
  %303 = bitcast i32* %302 to <2 x i32>*
  %304 = load <2 x i32>, <2 x i32>* %303, align 4
  %305 = add nsw i64 %300, -2
  %306 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %305
  %307 = getelementptr inbounds i32, i32* %306, i64 -1
  %308 = bitcast i32* %307 to <2 x i32>*
  %309 = load <2 x i32>, <2 x i32>* %308, align 4
  %310 = sub nsw <2 x i32> %309, %304
  %311 = bitcast i32* %307 to <2 x i32>*
  store <2 x i32> %310, <2 x i32>* %311, align 4
  br label %312

312:                                              ; preds = %296, %299
  %313 = icmp eq i64 %254, %259
  br i1 %313, label %326, label %314

314:                                              ; preds = %312, %256
  %315 = phi i64 [ %15, %256 ], [ %260, %312 ]
  br label %316

316:                                              ; preds = %314, %316
  %317 = phi i64 [ %324, %316 ], [ %315, %314 ]
  %318 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = add nsw i64 %317, -2
  %321 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = sub nsw i32 %322, %319
  store i32 %323, i32* %321, align 4
  %324 = add nsw i64 %317, -1
  %325 = icmp sgt i64 %324, %249
  br i1 %325, label %316, label %326, !llvm.loop !9

326:                                              ; preds = %316, %312, %247
  %327 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %249
  %328 = load i32, i32* %327, align 4
  %329 = shl i32 %328, 1
  %330 = add nsw i64 %249, -2
  %331 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = sub nsw i32 %332, %329
  store i32 %333, i32* %331, align 4
  %334 = add nuw nsw i64 %249, 1
  %335 = icmp eq i64 %334, %153
  %336 = add i64 %248, 1
  br i1 %335, label %342, label %247

337:                                              ; preds = %149, %3
  %338 = phi i32 [ %150, %149 ], [ 65536, %3 ]
  %339 = load i16, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 0), align 16
  %340 = sext i16 %339 to i32
  %341 = shl nsw i32 %340, 4
  br label %348

342:                                              ; preds = %326
  %343 = load i16, i16* getelementptr inbounds ([129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 0), align 16
  %344 = sext i16 %343 to i32
  %345 = load i32, i32* %16, align 4
  %346 = shl nsw i32 %344, 4
  %347 = icmp eq i32 %14, 8
  br i1 %347, label %354, label %348, !prof !10

348:                                              ; preds = %337, %342
  %349 = phi i32 [ %341, %337 ], [ %346, %342 ]
  %350 = phi i32 [ %338, %337 ], [ %345, %342 ]
  %351 = phi i32 [ %340, %337 ], [ %344, %342 ]
  br i1 %18, label %352, label %423

352:                                              ; preds = %348
  %353 = sext i32 %349 to i64
  br label %411

354:                                              ; preds = %342
  %355 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 7
  %356 = load i32, i32* %355, align 4
  %357 = sext i32 %345 to i64
  %358 = sext i32 %346 to i64
  %359 = mul nsw i64 %358, %357
  %360 = lshr i64 %359, 16
  %361 = trunc i64 %360 to i32
  %362 = add i32 %356, %361
  %363 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 6
  %364 = load i32, i32* %363, align 8
  %365 = sext i32 %362 to i64
  %366 = mul nsw i64 %365, %358
  %367 = lshr i64 %366, 16
  %368 = trunc i64 %367 to i32
  %369 = add i32 %364, %368
  %370 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 5
  %371 = load i32, i32* %370, align 4
  %372 = sext i32 %369 to i64
  %373 = mul nsw i64 %372, %358
  %374 = lshr i64 %373, 16
  %375 = trunc i64 %374 to i32
  %376 = add i32 %371, %375
  %377 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 4
  %378 = load i32, i32* %377, align 16
  %379 = sext i32 %376 to i64
  %380 = mul nsw i64 %379, %358
  %381 = lshr i64 %380, 16
  %382 = trunc i64 %381 to i32
  %383 = add i32 %378, %382
  %384 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 3
  %385 = load i32, i32* %384, align 4
  %386 = sext i32 %383 to i64
  %387 = mul nsw i64 %386, %358
  %388 = lshr i64 %387, 16
  %389 = trunc i64 %388 to i32
  %390 = add i32 %385, %389
  %391 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 2
  %392 = load i32, i32* %391, align 8
  %393 = sext i32 %390 to i64
  %394 = mul nsw i64 %393, %358
  %395 = lshr i64 %394, 16
  %396 = trunc i64 %395 to i32
  %397 = add i32 %392, %396
  %398 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 1
  %399 = load i32, i32* %398, align 4
  %400 = sext i32 %397 to i64
  %401 = mul nsw i64 %400, %358
  %402 = lshr i64 %401, 16
  %403 = trunc i64 %402 to i32
  %404 = add i32 %399, %403
  %405 = load i32, i32* %12, align 16
  %406 = sext i32 %404 to i64
  %407 = mul nsw i64 %406, %358
  %408 = lshr i64 %407, 16
  %409 = trunc i64 %408 to i32
  %410 = add i32 %405, %409
  br label %423

411:                                              ; preds = %411, %352
  %412 = phi i64 [ %15, %352 ], [ %414, %411 ]
  %413 = phi i32 [ %350, %352 ], [ %421, %411 ]
  %414 = add nsw i64 %412, -1
  %415 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %414
  %416 = load i32, i32* %415, align 4
  %417 = sext i32 %413 to i64
  %418 = mul nsw i64 %417, %353
  %419 = lshr i64 %418, 16
  %420 = trunc i64 %419 to i32
  %421 = add i32 %416, %420
  %422 = icmp sgt i64 %414, 0
  br i1 %422, label %411, label %423

423:                                              ; preds = %411, %348, %354
  %424 = phi i1 [ true, %354 ], [ false, %348 ], [ false, %411 ]
  %425 = phi i32 [ %346, %354 ], [ %349, %348 ], [ %349, %411 ]
  %426 = phi i32 [ %344, %354 ], [ %351, %348 ], [ %351, %411 ]
  %427 = phi i32 [ %410, %354 ], [ %350, %348 ], [ %421, %411 ]
  %428 = icmp slt i32 %427, 0
  br i1 %428, label %429, label %503

429:                                              ; preds = %423
  store i16 0, i16* %0, align 2
  %430 = load i32, i32* %17, align 4
  br i1 %424, label %434, label %431, !prof !10

431:                                              ; preds = %429
  br i1 %18, label %432, label %503

432:                                              ; preds = %431
  %433 = sext i32 %425 to i64
  br label %491

434:                                              ; preds = %429
  %435 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 7
  %436 = load i32, i32* %435, align 4
  %437 = sext i32 %430 to i64
  %438 = sext i32 %425 to i64
  %439 = mul nsw i64 %437, %438
  %440 = lshr i64 %439, 16
  %441 = trunc i64 %440 to i32
  %442 = add i32 %436, %441
  %443 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 6
  %444 = load i32, i32* %443, align 8
  %445 = sext i32 %442 to i64
  %446 = mul nsw i64 %445, %438
  %447 = lshr i64 %446, 16
  %448 = trunc i64 %447 to i32
  %449 = add i32 %444, %448
  %450 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 5
  %451 = load i32, i32* %450, align 4
  %452 = sext i32 %449 to i64
  %453 = mul nsw i64 %452, %438
  %454 = lshr i64 %453, 16
  %455 = trunc i64 %454 to i32
  %456 = add i32 %451, %455
  %457 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 4
  %458 = load i32, i32* %457, align 16
  %459 = sext i32 %456 to i64
  %460 = mul nsw i64 %459, %438
  %461 = lshr i64 %460, 16
  %462 = trunc i64 %461 to i32
  %463 = add i32 %458, %462
  %464 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 3
  %465 = load i32, i32* %464, align 4
  %466 = sext i32 %463 to i64
  %467 = mul nsw i64 %466, %438
  %468 = lshr i64 %467, 16
  %469 = trunc i64 %468 to i32
  %470 = add i32 %465, %469
  %471 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 2
  %472 = load i32, i32* %471, align 8
  %473 = sext i32 %470 to i64
  %474 = mul nsw i64 %473, %438
  %475 = lshr i64 %474, 16
  %476 = trunc i64 %475 to i32
  %477 = add i32 %472, %476
  %478 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 1
  %479 = load i32, i32* %478, align 4
  %480 = sext i32 %477 to i64
  %481 = mul nsw i64 %480, %438
  %482 = lshr i64 %481, 16
  %483 = trunc i64 %482 to i32
  %484 = add i32 %479, %483
  %485 = load i32, i32* %13, align 16
  %486 = sext i32 %484 to i64
  %487 = mul nsw i64 %486, %438
  %488 = lshr i64 %487, 16
  %489 = trunc i64 %488 to i32
  %490 = add i32 %485, %489
  br label %503

491:                                              ; preds = %491, %432
  %492 = phi i64 [ %15, %432 ], [ %494, %491 ]
  %493 = phi i32 [ %430, %432 ], [ %501, %491 ]
  %494 = add nsw i64 %492, -1
  %495 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %494
  %496 = load i32, i32* %495, align 4
  %497 = sext i32 %493 to i64
  %498 = mul nsw i64 %497, %433
  %499 = lshr i64 %498, 16
  %500 = trunc i64 %499 to i32
  %501 = add i32 %496, %500
  %502 = icmp sgt i64 %494, 0
  br i1 %502, label %491, label %503

503:                                              ; preds = %491, %434, %431, %423
  %504 = phi i1 [ %424, %423 ], [ false, %431 ], [ true, %434 ], [ false, %491 ]
  %505 = phi i32 [ 0, %423 ], [ 1, %431 ], [ 1, %434 ], [ 1, %491 ]
  %506 = phi i32 [ %427, %423 ], [ %430, %431 ], [ %490, %434 ], [ %501, %491 ]
  %507 = phi i32* [ %12, %423 ], [ %13, %431 ], [ %13, %434 ], [ %13, %491 ]
  %508 = zext i32 %14 to i64
  %509 = icmp slt i32 %2, 4
  %510 = add nuw nsw i32 %14, 1
  %511 = zext i32 %510 to i64
  %512 = sext i32 %425 to i64
  %513 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 7
  %514 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 6
  %515 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 5
  %516 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 4
  %517 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 3
  %518 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 2
  %519 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 1
  %520 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 7
  %521 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 6
  %522 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 5
  %523 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 4
  %524 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 3
  %525 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 2
  %526 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 1
  %527 = add nsw i64 %15, -2
  %528 = add nsw i64 %15, -2
  %529 = add nsw i64 %508, -1
  %530 = and i64 %508, 4294967292
  %531 = add nsw i64 %530, -4
  %532 = lshr exact i64 %531, 2
  %533 = add nuw nsw i64 %532, 1
  %534 = icmp ult i32 %14, 4
  %535 = trunc i64 %529 to i32
  %536 = xor i32 %535, -1
  %537 = add i32 %14, %536
  %538 = icmp sge i32 %537, %14
  %539 = icmp ugt i64 %529, 4294967295
  %540 = or i1 %538, %539
  %541 = and i64 %508, 4294967292
  %542 = and i64 %533, 1
  %543 = icmp eq i64 %531, 0
  %544 = sub nuw nsw i64 %533, %542
  %545 = getelementptr inbounds i32, i32* %1, i64 -3
  %546 = getelementptr inbounds i32, i32* %1, i64 -3
  %547 = icmp eq i64 %542, 0
  %548 = getelementptr inbounds i32, i32* %1, i64 -3
  %549 = icmp eq i64 %541, %508
  br label %550

550:                                              ; preds = %1276, %503
  %551 = phi i32 [ 0, %503 ], [ %880, %1276 ]
  %552 = phi i32 [ %505, %503 ], [ %1277, %1276 ]
  %553 = phi i32 [ %506, %503 ], [ %1278, %1276 ]
  %554 = phi i32* [ %507, %503 ], [ %1279, %1276 ]
  br label %555

555:                                              ; preds = %550, %875
  %556 = phi i32 [ 1, %550 ], [ %877, %875 ]
  %557 = phi i32 [ %552, %550 ], [ %573, %875 ]
  %558 = phi i32 [ %426, %550 ], [ %876, %875 ]
  %559 = phi i32 [ %553, %550 ], [ %650, %875 ]
  %560 = phi i32* [ %554, %550 ], [ %577, %875 ]
  %561 = zext i32 %556 to i64
  %562 = getelementptr inbounds [129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 %561
  %563 = load i16, i16* %562, align 2
  %564 = sext i16 %563 to i32
  %565 = shl nsw i32 %564, 4
  %566 = sext i32 %565 to i64
  %567 = sext i32 %565 to i64
  %568 = shl i32 %556, 8
  %569 = add nsw i32 %556, -1
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds [129 x i16], [129 x i16]* @silk_LSFCosTab_FIX_Q12, i64 0, i64 %570
  br label %572

572:                                              ; preds = %555, %865
  %573 = phi i32 [ %863, %865 ], [ %557, %555 ]
  %574 = phi i32 [ %871, %865 ], [ %558, %555 ]
  %575 = phi i32 [ %874, %865 ], [ %559, %555 ]
  %576 = phi i32 [ %661, %865 ], [ 0, %555 ]
  %577 = phi i32* [ %869, %865 ], [ %560, %555 ]
  %578 = getelementptr inbounds i32, i32* %577, i64 %15
  %579 = load i32, i32* %578, align 4
  br i1 %504, label %581, label %580, !prof !10

580:                                              ; preds = %572
  br i1 %18, label %637, label %649

581:                                              ; preds = %572
  %582 = getelementptr inbounds i32, i32* %577, i64 7
  %583 = load i32, i32* %582, align 4
  %584 = sext i32 %579 to i64
  %585 = mul nsw i64 %567, %584
  %586 = lshr i64 %585, 16
  %587 = trunc i64 %586 to i32
  %588 = add i32 %583, %587
  %589 = getelementptr inbounds i32, i32* %577, i64 6
  %590 = load i32, i32* %589, align 4
  %591 = sext i32 %588 to i64
  %592 = mul nsw i64 %591, %567
  %593 = lshr i64 %592, 16
  %594 = trunc i64 %593 to i32
  %595 = add i32 %590, %594
  %596 = getelementptr inbounds i32, i32* %577, i64 5
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %595 to i64
  %599 = mul nsw i64 %598, %567
  %600 = lshr i64 %599, 16
  %601 = trunc i64 %600 to i32
  %602 = add i32 %597, %601
  %603 = getelementptr inbounds i32, i32* %577, i64 4
  %604 = load i32, i32* %603, align 4
  %605 = sext i32 %602 to i64
  %606 = mul nsw i64 %605, %567
  %607 = lshr i64 %606, 16
  %608 = trunc i64 %607 to i32
  %609 = add i32 %604, %608
  %610 = getelementptr inbounds i32, i32* %577, i64 3
  %611 = load i32, i32* %610, align 4
  %612 = sext i32 %609 to i64
  %613 = mul nsw i64 %612, %567
  %614 = lshr i64 %613, 16
  %615 = trunc i64 %614 to i32
  %616 = add i32 %611, %615
  %617 = getelementptr inbounds i32, i32* %577, i64 2
  %618 = load i32, i32* %617, align 4
  %619 = sext i32 %616 to i64
  %620 = mul nsw i64 %619, %567
  %621 = lshr i64 %620, 16
  %622 = trunc i64 %621 to i32
  %623 = add i32 %618, %622
  %624 = getelementptr inbounds i32, i32* %577, i64 1
  %625 = load i32, i32* %624, align 4
  %626 = sext i32 %623 to i64
  %627 = mul nsw i64 %626, %567
  %628 = lshr i64 %627, 16
  %629 = trunc i64 %628 to i32
  %630 = add i32 %625, %629
  %631 = load i32, i32* %577, align 4
  %632 = sext i32 %630 to i64
  %633 = mul nsw i64 %632, %567
  %634 = lshr i64 %633, 16
  %635 = trunc i64 %634 to i32
  %636 = add i32 %631, %635
  br label %649

637:                                              ; preds = %580, %637
  %638 = phi i64 [ %640, %637 ], [ %15, %580 ]
  %639 = phi i32 [ %647, %637 ], [ %579, %580 ]
  %640 = add nsw i64 %638, -1
  %641 = getelementptr inbounds i32, i32* %577, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = sext i32 %639 to i64
  %644 = mul nsw i64 %643, %566
  %645 = lshr i64 %644, 16
  %646 = trunc i64 %645 to i32
  %647 = add i32 %642, %646
  %648 = icmp sgt i64 %640, 0
  br i1 %648, label %637, label %649

649:                                              ; preds = %637, %580, %581
  %650 = phi i32 [ %636, %581 ], [ %579, %580 ], [ %647, %637 ]
  %651 = icmp sgt i32 %575, 0
  %652 = icmp slt i32 %650, %576
  %653 = or i1 %651, %652
  br i1 %653, label %654, label %659

654:                                              ; preds = %649
  %655 = icmp slt i32 %575, 0
  %656 = sub nsw i32 0, %576
  %657 = icmp sgt i32 %650, %656
  %658 = or i1 %655, %657
  br i1 %658, label %875, label %659

659:                                              ; preds = %654, %649
  %660 = icmp eq i32 %650, 0
  %661 = zext i1 %660 to i32
  %662 = sext i32 %579 to i64
  br i1 %504, label %668, label %663, !prof !10

663:                                              ; preds = %659
  %664 = add nsw i32 %574, %564
  %665 = ashr i32 %664, 1
  %666 = and i32 %664, 1
  %667 = add nsw i32 %665, %666
  br i1 %18, label %795, label %810

668:                                              ; preds = %659
  %669 = getelementptr inbounds i32, i32* %577, i64 1
  %670 = getelementptr inbounds i32, i32* %577, i64 2
  %671 = getelementptr inbounds i32, i32* %577, i64 3
  %672 = getelementptr inbounds i32, i32* %577, i64 4
  %673 = getelementptr inbounds i32, i32* %577, i64 5
  %674 = getelementptr inbounds i32, i32* %577, i64 6
  %675 = getelementptr inbounds i32, i32* %577, i64 7
  %676 = add nsw i32 %574, %564
  %677 = ashr i32 %676, 1
  %678 = and i32 %676, 1
  %679 = add nsw i32 %677, %678
  %680 = shl i32 %679, 4
  %681 = load i32, i32* %675, align 4
  %682 = sext i32 %680 to i64
  %683 = mul nsw i64 %682, %662
  %684 = lshr i64 %683, 16
  %685 = trunc i64 %684 to i32
  %686 = add i32 %681, %685
  %687 = load i32, i32* %674, align 4
  %688 = sext i32 %686 to i64
  %689 = mul nsw i64 %688, %682
  %690 = lshr i64 %689, 16
  %691 = trunc i64 %690 to i32
  %692 = add i32 %687, %691
  %693 = load i32, i32* %673, align 4
  %694 = sext i32 %692 to i64
  %695 = mul nsw i64 %694, %682
  %696 = lshr i64 %695, 16
  %697 = trunc i64 %696 to i32
  %698 = add i32 %693, %697
  %699 = load i32, i32* %672, align 4
  %700 = sext i32 %698 to i64
  %701 = mul nsw i64 %700, %682
  %702 = lshr i64 %701, 16
  %703 = trunc i64 %702 to i32
  %704 = add i32 %699, %703
  %705 = load i32, i32* %671, align 4
  %706 = sext i32 %704 to i64
  %707 = mul nsw i64 %706, %682
  %708 = lshr i64 %707, 16
  %709 = trunc i64 %708 to i32
  %710 = add i32 %705, %709
  %711 = load i32, i32* %670, align 4
  %712 = sext i32 %710 to i64
  %713 = mul nsw i64 %712, %682
  %714 = lshr i64 %713, 16
  %715 = trunc i64 %714 to i32
  %716 = add i32 %711, %715
  %717 = load i32, i32* %669, align 4
  %718 = sext i32 %716 to i64
  %719 = mul nsw i64 %718, %682
  %720 = lshr i64 %719, 16
  %721 = trunc i64 %720 to i32
  %722 = add i32 %717, %721
  %723 = load i32, i32* %577, align 4
  %724 = sext i32 %722 to i64
  %725 = mul nsw i64 %724, %682
  %726 = lshr i64 %725, 16
  %727 = trunc i64 %726 to i32
  %728 = add i32 %723, %727
  %729 = icmp slt i32 %575, 1
  %730 = icmp sgt i32 %728, -1
  %731 = and i1 %729, %730
  br i1 %731, label %741, label %732

732:                                              ; preds = %668
  %733 = icmp sgt i32 %575, -1
  %734 = icmp slt i32 %728, 1
  %735 = and i1 %733, %734
  %736 = select i1 %735, i32 -256, i32 -128
  %737 = select i1 %735, i32 %574, i32 %679
  %738 = select i1 %735, i32 %679, i32 %564
  %739 = select i1 %735, i32 %575, i32 %728
  %740 = select i1 %735, i32 %728, i32 %650
  br label %741

741:                                              ; preds = %732, %668
  %742 = phi i32 [ -256, %668 ], [ %736, %732 ]
  %743 = phi i32 [ %574, %668 ], [ %737, %732 ]
  %744 = phi i32 [ %679, %668 ], [ %738, %732 ]
  %745 = phi i32 [ %575, %668 ], [ %739, %732 ]
  %746 = phi i32 [ %728, %668 ], [ %740, %732 ]
  %747 = add nsw i32 %744, %743
  %748 = ashr i32 %747, 1
  %749 = and i32 %747, 1
  %750 = add nsw i32 %748, %749
  %751 = shl i32 %750, 4
  %752 = sext i32 %751 to i64
  %753 = mul nsw i64 %752, %662
  %754 = lshr i64 %753, 16
  %755 = trunc i64 %754 to i32
  %756 = add i32 %681, %755
  %757 = sext i32 %756 to i64
  %758 = mul nsw i64 %757, %752
  %759 = lshr i64 %758, 16
  %760 = trunc i64 %759 to i32
  %761 = add i32 %687, %760
  %762 = sext i32 %761 to i64
  %763 = mul nsw i64 %762, %752
  %764 = lshr i64 %763, 16
  %765 = trunc i64 %764 to i32
  %766 = add i32 %693, %765
  %767 = sext i32 %766 to i64
  %768 = mul nsw i64 %767, %752
  %769 = lshr i64 %768, 16
  %770 = trunc i64 %769 to i32
  %771 = add i32 %699, %770
  %772 = sext i32 %771 to i64
  %773 = mul nsw i64 %772, %752
  %774 = lshr i64 %773, 16
  %775 = trunc i64 %774 to i32
  %776 = add i32 %705, %775
  %777 = sext i32 %776 to i64
  %778 = mul nsw i64 %777, %752
  %779 = lshr i64 %778, 16
  %780 = trunc i64 %779 to i32
  %781 = add i32 %711, %780
  %782 = sext i32 %781 to i64
  %783 = mul nsw i64 %782, %752
  %784 = lshr i64 %783, 16
  %785 = trunc i64 %784 to i32
  %786 = add i32 %717, %785
  %787 = sext i32 %786 to i64
  %788 = mul nsw i64 %787, %752
  %789 = lshr i64 %788, 16
  %790 = trunc i64 %789 to i32
  %791 = add i32 %723, %790
  %792 = icmp slt i32 %745, 1
  %793 = icmp sgt i32 %791, -1
  %794 = and i1 %792, %793
  br i1 %794, label %1437, label %1427

795:                                              ; preds = %663
  %796 = shl i32 %667, 4
  %797 = sext i32 %796 to i64
  br label %798

798:                                              ; preds = %798, %795
  %799 = phi i64 [ %15, %795 ], [ %801, %798 ]
  %800 = phi i32 [ %579, %795 ], [ %808, %798 ]
  %801 = add nsw i64 %799, -1
  %802 = getelementptr inbounds i32, i32* %577, i64 %801
  %803 = load i32, i32* %802, align 4
  %804 = sext i32 %800 to i64
  %805 = mul nsw i64 %804, %797
  %806 = lshr i64 %805, 16
  %807 = trunc i64 %806 to i32
  %808 = add i32 %803, %807
  %809 = icmp sgt i64 %801, 0
  br i1 %809, label %798, label %810

810:                                              ; preds = %798, %663
  %811 = phi i32 [ %579, %663 ], [ %808, %798 ]
  %812 = icmp slt i32 %575, 1
  %813 = icmp sgt i32 %811, -1
  %814 = and i1 %812, %813
  br i1 %814, label %824, label %815

815:                                              ; preds = %810
  %816 = icmp sgt i32 %575, -1
  %817 = icmp slt i32 %811, 1
  %818 = and i1 %816, %817
  %819 = select i1 %818, i32 -256, i32 -128
  %820 = select i1 %818, i32 %574, i32 %667
  %821 = select i1 %818, i32 %667, i32 %564
  %822 = select i1 %818, i32 %575, i32 %811
  %823 = select i1 %818, i32 %811, i32 %650
  br label %824

824:                                              ; preds = %815, %810
  %825 = phi i32 [ -256, %810 ], [ %819, %815 ]
  %826 = phi i32 [ %574, %810 ], [ %820, %815 ]
  %827 = phi i32 [ %667, %810 ], [ %821, %815 ]
  %828 = phi i32 [ %575, %810 ], [ %822, %815 ]
  %829 = phi i32 [ %811, %810 ], [ %823, %815 ]
  %830 = add nsw i32 %827, %826
  %831 = ashr i32 %830, 1
  %832 = and i32 %830, 1
  %833 = add nsw i32 %831, %832
  br i1 %18, label %1359, label %1374

834:                                              ; preds = %1491, %1419, %1437, %1414
  %835 = phi i32 [ %1390, %1414 ], [ %1438, %1437 ], [ %1424, %1419 ], [ %1496, %1491 ]
  %836 = phi i32 [ %1393, %1414 ], [ %1441, %1437 ], [ %1425, %1419 ], [ %1497, %1491 ]
  %837 = phi i32 [ %1415, %1414 ], [ %1487, %1437 ], [ %1426, %1419 ], [ %1498, %1491 ]
  %838 = icmp slt i32 %836, 0
  %839 = sub nsw i32 0, %836
  %840 = select i1 %838, i32 %839, i32 %836
  %841 = icmp slt i32 %840, 65536
  %842 = sub nsw i32 %836, %837
  br i1 %841, label %843, label %851

843:                                              ; preds = %834
  %844 = icmp eq i32 %842, 0
  br i1 %844, label %855, label %845

845:                                              ; preds = %843
  %846 = shl i32 %836, 5
  %847 = ashr i32 %842, 1
  %848 = add nsw i32 %847, %846
  %849 = sdiv i32 %848, %842
  %850 = add nsw i32 %849, %835
  br label %855

851:                                              ; preds = %834
  %852 = ashr i32 %842, 5
  %853 = sdiv i32 %836, %852
  %854 = add nsw i32 %853, %835
  br label %855

855:                                              ; preds = %843, %845, %851
  %856 = phi i32 [ %850, %845 ], [ %835, %843 ], [ %854, %851 ]
  %857 = add nsw i32 %856, %568
  %858 = icmp slt i32 %857, 32767
  %859 = select i1 %858, i32 %857, i32 32767
  %860 = trunc i32 %859 to i16
  %861 = sext i32 %573 to i64
  %862 = getelementptr inbounds i16, i16* %0, i64 %861
  store i16 %860, i16* %862, align 2
  %863 = add nsw i32 %573, 1
  %864 = icmp slt i32 %863, %2
  br i1 %864, label %865, label %1358

865:                                              ; preds = %855
  %866 = and i32 %863, 1
  %867 = zext i32 %866 to i64
  %868 = getelementptr inbounds [2 x i32*], [2 x i32*]* %6, i64 0, i64 %867
  %869 = load i32*, i32** %868, align 8
  %870 = load i16, i16* %571, align 2
  %871 = sext i16 %870 to i32
  %872 = shl i32 %863, 12
  %873 = and i32 %872, 8192
  %874 = sub nsw i32 4096, %873
  br label %572

875:                                              ; preds = %654
  %876 = sext i16 %563 to i32
  %877 = add nuw nsw i32 %556, 1
  %878 = icmp ugt i32 %556, 127
  br i1 %878, label %879, label %555

879:                                              ; preds = %875
  %880 = add nuw nsw i32 %551, 1
  %881 = icmp ugt i32 %551, 15
  br i1 %881, label %882, label %919

882:                                              ; preds = %879
  %883 = add nsw i32 %2, 1
  %884 = sdiv i32 32768, %883
  %885 = trunc i32 %884 to i16
  store i16 %885, i16* %0, align 2
  br i1 %18, label %886, label %1358

886:                                              ; preds = %882
  %887 = zext i32 %2 to i64
  %888 = shl i16 %885, 1
  %889 = getelementptr inbounds i16, i16* %0, i64 1
  store i16 %888, i16* %889, align 2
  %890 = icmp eq i32 %2, 2
  br i1 %890, label %1358, label %891

891:                                              ; preds = %886
  %892 = add nsw i64 %887, -2
  %893 = add nsw i64 %887, -3
  %894 = and i64 %892, 3
  %895 = icmp ult i64 %893, 3
  br i1 %895, label %1344, label %896

896:                                              ; preds = %891
  %897 = sub nsw i64 %892, %894
  br label %898

898:                                              ; preds = %898, %896
  %899 = phi i64 [ 2, %896 ], [ %916, %898 ]
  %900 = phi i16 [ %888, %896 ], [ %914, %898 ]
  %901 = phi i64 [ %897, %896 ], [ %917, %898 ]
  %902 = load i16, i16* %0, align 2
  %903 = add i16 %902, %900
  %904 = getelementptr inbounds i16, i16* %0, i64 %899
  store i16 %903, i16* %904, align 2
  %905 = or i64 %899, 1
  %906 = load i16, i16* %0, align 2
  %907 = add i16 %906, %903
  %908 = getelementptr inbounds i16, i16* %0, i64 %905
  store i16 %907, i16* %908, align 2
  %909 = add nuw nsw i64 %899, 2
  %910 = add i16 %906, %907
  %911 = getelementptr inbounds i16, i16* %0, i64 %909
  store i16 %910, i16* %911, align 2
  %912 = add nuw nsw i64 %899, 3
  %913 = load i16, i16* %0, align 2
  %914 = add i16 %913, %910
  %915 = getelementptr inbounds i16, i16* %0, i64 %912
  store i16 %914, i16* %915, align 2
  %916 = add nuw nsw i64 %899, 4
  %917 = add i64 %901, -4
  %918 = icmp eq i64 %917, 0
  br i1 %918, label %1344, label %898

919:                                              ; preds = %879
  %920 = shl i32 2, %551
  %921 = sub nsw i32 65536, %920
  call void @silk_bwexpander_32(i32* %1, i32 %2, i32 %921) #3
  store i32 65536, i32* %16, align 4
  store i32 65536, i32* %17, align 4
  br i1 %18, label %922, label %1209

922:                                              ; preds = %919
  %923 = or i1 %534, %540
  br i1 %923, label %993, label %924

924:                                              ; preds = %922
  br i1 %543, label %970, label %925

925:                                              ; preds = %924, %925
  %926 = phi i64 [ %967, %925 ], [ 0, %924 ]
  %927 = phi i64 [ %968, %925 ], [ %544, %924 ]
  %928 = trunc i64 %926 to i32
  %929 = xor i32 %928, -1
  %930 = add i32 %14, %929
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds i32, i32* %545, i64 %931
  %933 = bitcast i32* %932 to <4 x i32>*
  %934 = load <4 x i32>, <4 x i32>* %933, align 4
  %935 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %936 = add nsw i64 %926, %15
  %937 = getelementptr inbounds i32, i32* %1, i64 %936
  %938 = bitcast i32* %937 to <4 x i32>*
  %939 = load <4 x i32>, <4 x i32>* %938, align 4
  %940 = add <4 x i32> %935, %939
  %941 = sub <4 x i32> zeroinitializer, %940
  %942 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %926
  %943 = bitcast i32* %942 to <4 x i32>*
  store <4 x i32> %941, <4 x i32>* %943, align 16
  %944 = sub <4 x i32> %939, %935
  %945 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %926
  %946 = bitcast i32* %945 to <4 x i32>*
  store <4 x i32> %944, <4 x i32>* %946, align 16
  %947 = or i64 %926, 4
  %948 = trunc i64 %947 to i32
  %949 = xor i32 %948, -1
  %950 = add i32 %14, %949
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i32, i32* %546, i64 %951
  %953 = bitcast i32* %952 to <4 x i32>*
  %954 = load <4 x i32>, <4 x i32>* %953, align 4
  %955 = shufflevector <4 x i32> %954, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %956 = add nsw i64 %947, %15
  %957 = getelementptr inbounds i32, i32* %1, i64 %956
  %958 = bitcast i32* %957 to <4 x i32>*
  %959 = load <4 x i32>, <4 x i32>* %958, align 4
  %960 = add <4 x i32> %955, %959
  %961 = sub <4 x i32> zeroinitializer, %960
  %962 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %947
  %963 = bitcast i32* %962 to <4 x i32>*
  store <4 x i32> %961, <4 x i32>* %963, align 16
  %964 = sub <4 x i32> %959, %955
  %965 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %947
  %966 = bitcast i32* %965 to <4 x i32>*
  store <4 x i32> %964, <4 x i32>* %966, align 16
  %967 = add i64 %926, 8
  %968 = add i64 %927, -2
  %969 = icmp eq i64 %968, 0
  br i1 %969, label %970, label %925, !llvm.loop !11

970:                                              ; preds = %925, %924
  %971 = phi i64 [ 0, %924 ], [ %967, %925 ]
  br i1 %547, label %992, label %972

972:                                              ; preds = %970
  %973 = trunc i64 %971 to i32
  %974 = xor i32 %973, -1
  %975 = add i32 %14, %974
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds i32, i32* %548, i64 %976
  %978 = bitcast i32* %977 to <4 x i32>*
  %979 = load <4 x i32>, <4 x i32>* %978, align 4
  %980 = shufflevector <4 x i32> %979, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %981 = add nsw i64 %971, %15
  %982 = getelementptr inbounds i32, i32* %1, i64 %981
  %983 = bitcast i32* %982 to <4 x i32>*
  %984 = load <4 x i32>, <4 x i32>* %983, align 4
  %985 = add <4 x i32> %980, %984
  %986 = sub <4 x i32> zeroinitializer, %985
  %987 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %971
  %988 = bitcast i32* %987 to <4 x i32>*
  store <4 x i32> %986, <4 x i32>* %988, align 16
  %989 = sub <4 x i32> %984, %980
  %990 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %971
  %991 = bitcast i32* %990 to <4 x i32>*
  store <4 x i32> %989, <4 x i32>* %991, align 16
  br label %992

992:                                              ; preds = %970, %972
  br i1 %549, label %1013, label %993

993:                                              ; preds = %922, %992
  %994 = phi i64 [ 0, %922 ], [ %541, %992 ]
  br label %995

995:                                              ; preds = %993, %995
  %996 = phi i64 [ %1011, %995 ], [ %994, %993 ]
  %997 = trunc i64 %996 to i32
  %998 = xor i32 %997, -1
  %999 = add i32 %14, %998
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds i32, i32* %1, i64 %1000
  %1002 = load i32, i32* %1001, align 4
  %1003 = add nsw i64 %996, %15
  %1004 = getelementptr inbounds i32, i32* %1, i64 %1003
  %1005 = load i32, i32* %1004, align 4
  %1006 = add i32 %1002, %1005
  %1007 = sub i32 0, %1006
  %1008 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %996
  store i32 %1007, i32* %1008, align 4
  %1009 = sub i32 %1005, %1002
  %1010 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %996
  store i32 %1009, i32* %1010, align 4
  %1011 = add nuw nsw i64 %996, 1
  %1012 = icmp eq i64 %1011, %508
  br i1 %1012, label %1013, label %995, !llvm.loop !12

1013:                                             ; preds = %995, %992
  %1014 = load i32, i32* %16, align 4
  %1015 = load i32, i32* %17, align 4
  br label %1016

1016:                                             ; preds = %1013, %1016
  %1017 = phi i32 [ %1026, %1016 ], [ %1015, %1013 ]
  %1018 = phi i32 [ %1023, %1016 ], [ %1014, %1013 ]
  %1019 = phi i64 [ %1020, %1016 ], [ %15, %1013 ]
  %1020 = add nsw i64 %1019, -1
  %1021 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1020
  %1022 = load i32, i32* %1021, align 4
  %1023 = sub nsw i32 %1022, %1018
  store i32 %1023, i32* %1021, align 4
  %1024 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1020
  %1025 = load i32, i32* %1024, align 4
  %1026 = add nsw i32 %1025, %1017
  store i32 %1026, i32* %1024, align 4
  %1027 = icmp sgt i64 %1020, 0
  br i1 %1027, label %1016, label %1028

1028:                                             ; preds = %1016
  br i1 %509, label %1209, label %1029

1029:                                             ; preds = %1028, %1108
  %1030 = phi i64 [ %1118, %1108 ], [ 0, %1028 ]
  %1031 = phi i64 [ %1116, %1108 ], [ 2, %1028 ]
  %1032 = sub i64 %528, %1030
  %1033 = add i64 %1032, -2
  %1034 = lshr i64 %1033, 1
  %1035 = add nuw i64 %1034, 1
  %1036 = sub i64 %528, %1030
  %1037 = icmp slt i64 %1031, %15
  br i1 %1037, label %1038, label %1108

1038:                                             ; preds = %1029
  %1039 = icmp ult i64 %1036, 2
  br i1 %1039, label %1096, label %1040

1040:                                             ; preds = %1038
  %1041 = and i64 %1036, -2
  %1042 = sub i64 %15, %1041
  %1043 = and i64 %1035, 1
  %1044 = icmp eq i64 %1034, 0
  br i1 %1044, label %1078, label %1045

1045:                                             ; preds = %1040
  %1046 = sub nuw i64 %1035, %1043
  br label %1047

1047:                                             ; preds = %1047, %1045
  %1048 = phi i64 [ 0, %1045 ], [ %1075, %1047 ]
  %1049 = phi i64 [ %1046, %1045 ], [ %1076, %1047 ]
  %1050 = sub i64 %15, %1048
  %1051 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1050
  %1052 = getelementptr inbounds i32, i32* %1051, i64 -1
  %1053 = bitcast i32* %1052 to <2 x i32>*
  %1054 = load <2 x i32>, <2 x i32>* %1053, align 4
  %1055 = add nsw i64 %1050, -2
  %1056 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1055
  %1057 = getelementptr inbounds i32, i32* %1056, i64 -1
  %1058 = bitcast i32* %1057 to <2 x i32>*
  %1059 = load <2 x i32>, <2 x i32>* %1058, align 4
  %1060 = sub nsw <2 x i32> %1059, %1054
  %1061 = bitcast i32* %1057 to <2 x i32>*
  store <2 x i32> %1060, <2 x i32>* %1061, align 4
  %1062 = or i64 %1048, 2
  %1063 = sub i64 %15, %1062
  %1064 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1063
  %1065 = getelementptr inbounds i32, i32* %1064, i64 -1
  %1066 = bitcast i32* %1065 to <2 x i32>*
  %1067 = load <2 x i32>, <2 x i32>* %1066, align 4
  %1068 = add nsw i64 %1063, -2
  %1069 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1068
  %1070 = getelementptr inbounds i32, i32* %1069, i64 -1
  %1071 = bitcast i32* %1070 to <2 x i32>*
  %1072 = load <2 x i32>, <2 x i32>* %1071, align 4
  %1073 = sub nsw <2 x i32> %1072, %1067
  %1074 = bitcast i32* %1070 to <2 x i32>*
  store <2 x i32> %1073, <2 x i32>* %1074, align 4
  %1075 = add i64 %1048, 4
  %1076 = add i64 %1049, -2
  %1077 = icmp eq i64 %1076, 0
  br i1 %1077, label %1078, label %1047, !llvm.loop !13

1078:                                             ; preds = %1047, %1040
  %1079 = phi i64 [ 0, %1040 ], [ %1075, %1047 ]
  %1080 = icmp eq i64 %1043, 0
  br i1 %1080, label %1094, label %1081

1081:                                             ; preds = %1078
  %1082 = sub i64 %15, %1079
  %1083 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1082
  %1084 = getelementptr inbounds i32, i32* %1083, i64 -1
  %1085 = bitcast i32* %1084 to <2 x i32>*
  %1086 = load <2 x i32>, <2 x i32>* %1085, align 4
  %1087 = add nsw i64 %1082, -2
  %1088 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1087
  %1089 = getelementptr inbounds i32, i32* %1088, i64 -1
  %1090 = bitcast i32* %1089 to <2 x i32>*
  %1091 = load <2 x i32>, <2 x i32>* %1090, align 4
  %1092 = sub nsw <2 x i32> %1091, %1086
  %1093 = bitcast i32* %1089 to <2 x i32>*
  store <2 x i32> %1092, <2 x i32>* %1093, align 4
  br label %1094

1094:                                             ; preds = %1078, %1081
  %1095 = icmp eq i64 %1036, %1041
  br i1 %1095, label %1108, label %1096

1096:                                             ; preds = %1094, %1038
  %1097 = phi i64 [ %15, %1038 ], [ %1042, %1094 ]
  br label %1098

1098:                                             ; preds = %1096, %1098
  %1099 = phi i64 [ %1106, %1098 ], [ %1097, %1096 ]
  %1100 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1099
  %1101 = load i32, i32* %1100, align 4
  %1102 = add nsw i64 %1099, -2
  %1103 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1102
  %1104 = load i32, i32* %1103, align 4
  %1105 = sub nsw i32 %1104, %1101
  store i32 %1105, i32* %1103, align 4
  %1106 = add nsw i64 %1099, -1
  %1107 = icmp sgt i64 %1106, %1031
  br i1 %1107, label %1098, label %1108, !llvm.loop !14

1108:                                             ; preds = %1098, %1094, %1029
  %1109 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1031
  %1110 = load i32, i32* %1109, align 4
  %1111 = shl i32 %1110, 1
  %1112 = add nsw i64 %1031, -2
  %1113 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1112
  %1114 = load i32, i32* %1113, align 4
  %1115 = sub nsw i32 %1114, %1111
  store i32 %1115, i32* %1113, align 4
  %1116 = add nuw nsw i64 %1031, 1
  %1117 = icmp eq i64 %1116, %511
  %1118 = add i64 %1030, 1
  br i1 %1117, label %1119, label %1029

1119:                                             ; preds = %1108, %1198
  %1120 = phi i64 [ %1208, %1198 ], [ 0, %1108 ]
  %1121 = phi i64 [ %1206, %1198 ], [ 2, %1108 ]
  %1122 = sub i64 %528, %1120
  %1123 = add i64 %1122, -2
  %1124 = lshr i64 %1123, 1
  %1125 = add nuw i64 %1124, 1
  %1126 = sub i64 %527, %1120
  %1127 = icmp slt i64 %1121, %15
  br i1 %1127, label %1128, label %1198

1128:                                             ; preds = %1119
  %1129 = icmp ult i64 %1126, 2
  br i1 %1129, label %1186, label %1130

1130:                                             ; preds = %1128
  %1131 = and i64 %1126, -2
  %1132 = sub i64 %15, %1131
  %1133 = and i64 %1125, 1
  %1134 = icmp eq i64 %1124, 0
  br i1 %1134, label %1168, label %1135

1135:                                             ; preds = %1130
  %1136 = sub nuw i64 %1125, %1133
  br label %1137

1137:                                             ; preds = %1137, %1135
  %1138 = phi i64 [ 0, %1135 ], [ %1165, %1137 ]
  %1139 = phi i64 [ %1136, %1135 ], [ %1166, %1137 ]
  %1140 = sub i64 %15, %1138
  %1141 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1140
  %1142 = getelementptr inbounds i32, i32* %1141, i64 -1
  %1143 = bitcast i32* %1142 to <2 x i32>*
  %1144 = load <2 x i32>, <2 x i32>* %1143, align 4
  %1145 = add nsw i64 %1140, -2
  %1146 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1145
  %1147 = getelementptr inbounds i32, i32* %1146, i64 -1
  %1148 = bitcast i32* %1147 to <2 x i32>*
  %1149 = load <2 x i32>, <2 x i32>* %1148, align 4
  %1150 = sub nsw <2 x i32> %1149, %1144
  %1151 = bitcast i32* %1147 to <2 x i32>*
  store <2 x i32> %1150, <2 x i32>* %1151, align 4
  %1152 = or i64 %1138, 2
  %1153 = sub i64 %15, %1152
  %1154 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1153
  %1155 = getelementptr inbounds i32, i32* %1154, i64 -1
  %1156 = bitcast i32* %1155 to <2 x i32>*
  %1157 = load <2 x i32>, <2 x i32>* %1156, align 4
  %1158 = add nsw i64 %1153, -2
  %1159 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1158
  %1160 = getelementptr inbounds i32, i32* %1159, i64 -1
  %1161 = bitcast i32* %1160 to <2 x i32>*
  %1162 = load <2 x i32>, <2 x i32>* %1161, align 4
  %1163 = sub nsw <2 x i32> %1162, %1157
  %1164 = bitcast i32* %1160 to <2 x i32>*
  store <2 x i32> %1163, <2 x i32>* %1164, align 4
  %1165 = add i64 %1138, 4
  %1166 = add i64 %1139, -2
  %1167 = icmp eq i64 %1166, 0
  br i1 %1167, label %1168, label %1137, !llvm.loop !15

1168:                                             ; preds = %1137, %1130
  %1169 = phi i64 [ 0, %1130 ], [ %1165, %1137 ]
  %1170 = icmp eq i64 %1133, 0
  br i1 %1170, label %1184, label %1171

1171:                                             ; preds = %1168
  %1172 = sub i64 %15, %1169
  %1173 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1172
  %1174 = getelementptr inbounds i32, i32* %1173, i64 -1
  %1175 = bitcast i32* %1174 to <2 x i32>*
  %1176 = load <2 x i32>, <2 x i32>* %1175, align 4
  %1177 = add nsw i64 %1172, -2
  %1178 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1177
  %1179 = getelementptr inbounds i32, i32* %1178, i64 -1
  %1180 = bitcast i32* %1179 to <2 x i32>*
  %1181 = load <2 x i32>, <2 x i32>* %1180, align 4
  %1182 = sub nsw <2 x i32> %1181, %1176
  %1183 = bitcast i32* %1179 to <2 x i32>*
  store <2 x i32> %1182, <2 x i32>* %1183, align 4
  br label %1184

1184:                                             ; preds = %1168, %1171
  %1185 = icmp eq i64 %1126, %1131
  br i1 %1185, label %1198, label %1186

1186:                                             ; preds = %1184, %1128
  %1187 = phi i64 [ %15, %1128 ], [ %1132, %1184 ]
  br label %1188

1188:                                             ; preds = %1186, %1188
  %1189 = phi i64 [ %1196, %1188 ], [ %1187, %1186 ]
  %1190 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1189
  %1191 = load i32, i32* %1190, align 4
  %1192 = add nsw i64 %1189, -2
  %1193 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = sub nsw i32 %1194, %1191
  store i32 %1195, i32* %1193, align 4
  %1196 = add nsw i64 %1189, -1
  %1197 = icmp sgt i64 %1196, %1121
  br i1 %1197, label %1188, label %1198, !llvm.loop !16

1198:                                             ; preds = %1188, %1184, %1119
  %1199 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1121
  %1200 = load i32, i32* %1199, align 4
  %1201 = shl i32 %1200, 1
  %1202 = add nsw i64 %1121, -2
  %1203 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1202
  %1204 = load i32, i32* %1203, align 4
  %1205 = sub nsw i32 %1204, %1201
  store i32 %1205, i32* %1203, align 4
  %1206 = add nuw nsw i64 %1121, 1
  %1207 = icmp eq i64 %1206, %511
  %1208 = add i64 %1120, 1
  br i1 %1207, label %1209, label %1119

1209:                                             ; preds = %1198, %919, %1028
  %1210 = load i32, i32* %16, align 4
  br i1 %504, label %1212, label %1211, !prof !10

1211:                                             ; preds = %1209
  br i1 %18, label %1261, label %1273

1212:                                             ; preds = %1209
  %1213 = load i32, i32* %513, align 4
  %1214 = sext i32 %1210 to i64
  %1215 = mul nsw i64 %1214, %512
  %1216 = lshr i64 %1215, 16
  %1217 = trunc i64 %1216 to i32
  %1218 = add i32 %1213, %1217
  %1219 = load i32, i32* %514, align 8
  %1220 = sext i32 %1218 to i64
  %1221 = mul nsw i64 %1220, %512
  %1222 = lshr i64 %1221, 16
  %1223 = trunc i64 %1222 to i32
  %1224 = add i32 %1219, %1223
  %1225 = load i32, i32* %515, align 4
  %1226 = sext i32 %1224 to i64
  %1227 = mul nsw i64 %1226, %512
  %1228 = lshr i64 %1227, 16
  %1229 = trunc i64 %1228 to i32
  %1230 = add i32 %1225, %1229
  %1231 = load i32, i32* %516, align 16
  %1232 = sext i32 %1230 to i64
  %1233 = mul nsw i64 %1232, %512
  %1234 = lshr i64 %1233, 16
  %1235 = trunc i64 %1234 to i32
  %1236 = add i32 %1231, %1235
  %1237 = load i32, i32* %517, align 4
  %1238 = sext i32 %1236 to i64
  %1239 = mul nsw i64 %1238, %512
  %1240 = lshr i64 %1239, 16
  %1241 = trunc i64 %1240 to i32
  %1242 = add i32 %1237, %1241
  %1243 = load i32, i32* %518, align 8
  %1244 = sext i32 %1242 to i64
  %1245 = mul nsw i64 %1244, %512
  %1246 = lshr i64 %1245, 16
  %1247 = trunc i64 %1246 to i32
  %1248 = add i32 %1243, %1247
  %1249 = load i32, i32* %519, align 4
  %1250 = sext i32 %1248 to i64
  %1251 = mul nsw i64 %1250, %512
  %1252 = lshr i64 %1251, 16
  %1253 = trunc i64 %1252 to i32
  %1254 = add i32 %1249, %1253
  %1255 = load i32, i32* %12, align 16
  %1256 = sext i32 %1254 to i64
  %1257 = mul nsw i64 %1256, %512
  %1258 = lshr i64 %1257, 16
  %1259 = trunc i64 %1258 to i32
  %1260 = add i32 %1255, %1259
  br label %1273

1261:                                             ; preds = %1211, %1261
  %1262 = phi i64 [ %1264, %1261 ], [ %15, %1211 ]
  %1263 = phi i32 [ %1271, %1261 ], [ %1210, %1211 ]
  %1264 = add nsw i64 %1262, -1
  %1265 = getelementptr inbounds [13 x i32], [13 x i32]* %4, i64 0, i64 %1264
  %1266 = load i32, i32* %1265, align 4
  %1267 = sext i32 %1263 to i64
  %1268 = mul nsw i64 %1267, %512
  %1269 = lshr i64 %1268, 16
  %1270 = trunc i64 %1269 to i32
  %1271 = add i32 %1266, %1270
  %1272 = icmp sgt i64 %1264, 0
  br i1 %1272, label %1261, label %1273

1273:                                             ; preds = %1261, %1211, %1212
  %1274 = phi i32 [ %1260, %1212 ], [ %1210, %1211 ], [ %1271, %1261 ]
  %1275 = icmp slt i32 %1274, 0
  br i1 %1275, label %1280, label %1276

1276:                                             ; preds = %1332, %1273, %1282, %1283
  %1277 = phi i32 [ 1, %1283 ], [ 1, %1282 ], [ 0, %1273 ], [ 1, %1332 ]
  %1278 = phi i32 [ %1331, %1283 ], [ %1281, %1282 ], [ %1274, %1273 ], [ %1342, %1332 ]
  %1279 = phi i32* [ %13, %1283 ], [ %13, %1282 ], [ %12, %1273 ], [ %13, %1332 ]
  br label %550

1280:                                             ; preds = %1273
  store i16 0, i16* %0, align 2
  %1281 = load i32, i32* %17, align 4
  br i1 %504, label %1283, label %1282, !prof !10

1282:                                             ; preds = %1280
  br i1 %18, label %1332, label %1276

1283:                                             ; preds = %1280
  %1284 = load i32, i32* %520, align 4
  %1285 = sext i32 %1281 to i64
  %1286 = mul nsw i64 %1285, %512
  %1287 = lshr i64 %1286, 16
  %1288 = trunc i64 %1287 to i32
  %1289 = add i32 %1284, %1288
  %1290 = load i32, i32* %521, align 8
  %1291 = sext i32 %1289 to i64
  %1292 = mul nsw i64 %1291, %512
  %1293 = lshr i64 %1292, 16
  %1294 = trunc i64 %1293 to i32
  %1295 = add i32 %1290, %1294
  %1296 = load i32, i32* %522, align 4
  %1297 = sext i32 %1295 to i64
  %1298 = mul nsw i64 %1297, %512
  %1299 = lshr i64 %1298, 16
  %1300 = trunc i64 %1299 to i32
  %1301 = add i32 %1296, %1300
  %1302 = load i32, i32* %523, align 16
  %1303 = sext i32 %1301 to i64
  %1304 = mul nsw i64 %1303, %512
  %1305 = lshr i64 %1304, 16
  %1306 = trunc i64 %1305 to i32
  %1307 = add i32 %1302, %1306
  %1308 = load i32, i32* %524, align 4
  %1309 = sext i32 %1307 to i64
  %1310 = mul nsw i64 %1309, %512
  %1311 = lshr i64 %1310, 16
  %1312 = trunc i64 %1311 to i32
  %1313 = add i32 %1308, %1312
  %1314 = load i32, i32* %525, align 8
  %1315 = sext i32 %1313 to i64
  %1316 = mul nsw i64 %1315, %512
  %1317 = lshr i64 %1316, 16
  %1318 = trunc i64 %1317 to i32
  %1319 = add i32 %1314, %1318
  %1320 = load i32, i32* %526, align 4
  %1321 = sext i32 %1319 to i64
  %1322 = mul nsw i64 %1321, %512
  %1323 = lshr i64 %1322, 16
  %1324 = trunc i64 %1323 to i32
  %1325 = add i32 %1320, %1324
  %1326 = load i32, i32* %13, align 16
  %1327 = sext i32 %1325 to i64
  %1328 = mul nsw i64 %1327, %512
  %1329 = lshr i64 %1328, 16
  %1330 = trunc i64 %1329 to i32
  %1331 = add i32 %1326, %1330
  br label %1276

1332:                                             ; preds = %1282, %1332
  %1333 = phi i64 [ %1335, %1332 ], [ %15, %1282 ]
  %1334 = phi i32 [ %1342, %1332 ], [ %1281, %1282 ]
  %1335 = add nsw i64 %1333, -1
  %1336 = getelementptr inbounds [13 x i32], [13 x i32]* %5, i64 0, i64 %1335
  %1337 = load i32, i32* %1336, align 4
  %1338 = sext i32 %1334 to i64
  %1339 = mul nsw i64 %1338, %512
  %1340 = lshr i64 %1339, 16
  %1341 = trunc i64 %1340 to i32
  %1342 = add i32 %1337, %1341
  %1343 = icmp sgt i64 %1335, 0
  br i1 %1343, label %1332, label %1276

1344:                                             ; preds = %898, %891
  %1345 = phi i64 [ 2, %891 ], [ %916, %898 ]
  %1346 = phi i16 [ %888, %891 ], [ %914, %898 ]
  %1347 = icmp eq i64 %894, 0
  br i1 %1347, label %1358, label %1348

1348:                                             ; preds = %1344, %1348
  %1349 = phi i64 [ %1355, %1348 ], [ %1345, %1344 ]
  %1350 = phi i16 [ %1353, %1348 ], [ %1346, %1344 ]
  %1351 = phi i64 [ %1356, %1348 ], [ %894, %1344 ]
  %1352 = load i16, i16* %0, align 2
  %1353 = add i16 %1352, %1350
  %1354 = getelementptr inbounds i16, i16* %0, i64 %1349
  store i16 %1353, i16* %1354, align 2
  %1355 = add nuw nsw i64 %1349, 1
  %1356 = add i64 %1351, -1
  %1357 = icmp eq i64 %1356, 0
  br i1 %1357, label %1358, label %1348, !llvm.loop !17

1358:                                             ; preds = %855, %1344, %1348, %886, %882
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %8) #3
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %7) #3
  ret void

1359:                                             ; preds = %824
  %1360 = shl i32 %833, 4
  %1361 = sext i32 %1360 to i64
  br label %1362

1362:                                             ; preds = %1362, %1359
  %1363 = phi i64 [ %15, %1359 ], [ %1365, %1362 ]
  %1364 = phi i32 [ %579, %1359 ], [ %1372, %1362 ]
  %1365 = add nsw i64 %1363, -1
  %1366 = getelementptr inbounds i32, i32* %577, i64 %1365
  %1367 = load i32, i32* %1366, align 4
  %1368 = sext i32 %1364 to i64
  %1369 = mul nsw i64 %1368, %1361
  %1370 = lshr i64 %1369, 16
  %1371 = trunc i64 %1370 to i32
  %1372 = add i32 %1367, %1371
  %1373 = icmp sgt i64 %1365, 0
  br i1 %1373, label %1362, label %1374

1374:                                             ; preds = %1362, %824
  %1375 = phi i32 [ %579, %824 ], [ %1372, %1362 ]
  %1376 = icmp slt i32 %828, 1
  %1377 = icmp sgt i32 %1375, -1
  %1378 = and i1 %1376, %1377
  br i1 %1378, label %1389, label %1379

1379:                                             ; preds = %1374
  %1380 = icmp sgt i32 %828, -1
  %1381 = icmp slt i32 %1375, 1
  %1382 = and i1 %1380, %1381
  %1383 = or i32 %825, 64
  %1384 = select i1 %1382, i32 %825, i32 %1383
  %1385 = select i1 %1382, i32 %826, i32 %833
  %1386 = select i1 %1382, i32 %833, i32 %827
  %1387 = select i1 %1382, i32 %828, i32 %1375
  %1388 = select i1 %1382, i32 %1375, i32 %829
  br label %1389

1389:                                             ; preds = %1379, %1374
  %1390 = phi i32 [ %825, %1374 ], [ %1384, %1379 ]
  %1391 = phi i32 [ %826, %1374 ], [ %1385, %1379 ]
  %1392 = phi i32 [ %833, %1374 ], [ %1386, %1379 ]
  %1393 = phi i32 [ %828, %1374 ], [ %1387, %1379 ]
  %1394 = phi i32 [ %1375, %1374 ], [ %1388, %1379 ]
  %1395 = add nsw i32 %1392, %1391
  br i1 %18, label %1396, label %1414

1396:                                             ; preds = %1389
  %1397 = lshr i32 %1395, 1
  %1398 = and i32 %1395, 1
  %1399 = add nuw i32 %1397, %1398
  %1400 = shl i32 %1399, 4
  %1401 = sext i32 %1400 to i64
  br label %1402

1402:                                             ; preds = %1402, %1396
  %1403 = phi i64 [ %15, %1396 ], [ %1405, %1402 ]
  %1404 = phi i32 [ %579, %1396 ], [ %1412, %1402 ]
  %1405 = add nsw i64 %1403, -1
  %1406 = getelementptr inbounds i32, i32* %577, i64 %1405
  %1407 = load i32, i32* %1406, align 4
  %1408 = sext i32 %1404 to i64
  %1409 = mul nsw i64 %1408, %1401
  %1410 = lshr i64 %1409, 16
  %1411 = trunc i64 %1410 to i32
  %1412 = add i32 %1407, %1411
  %1413 = icmp sgt i64 %1405, 0
  br i1 %1413, label %1402, label %1414

1414:                                             ; preds = %1402, %1389
  %1415 = phi i32 [ %579, %1389 ], [ %1412, %1402 ]
  %1416 = icmp slt i32 %1393, 1
  %1417 = icmp sgt i32 %1415, -1
  %1418 = and i1 %1416, %1417
  br i1 %1418, label %834, label %1419

1419:                                             ; preds = %1414
  %1420 = icmp sgt i32 %1393, -1
  %1421 = icmp slt i32 %1415, 1
  %1422 = and i1 %1420, %1421
  %1423 = add nsw i32 %1390, 32
  %1424 = select i1 %1422, i32 %1390, i32 %1423
  %1425 = select i1 %1422, i32 %1393, i32 %1415
  %1426 = select i1 %1422, i32 %1415, i32 %1394
  br label %834

1427:                                             ; preds = %741
  %1428 = icmp sgt i32 %745, -1
  %1429 = icmp slt i32 %791, 1
  %1430 = and i1 %1428, %1429
  %1431 = or i32 %742, 64
  %1432 = select i1 %1430, i32 %742, i32 %1431
  %1433 = select i1 %1430, i32 %743, i32 %750
  %1434 = select i1 %1430, i32 %750, i32 %744
  %1435 = select i1 %1430, i32 %745, i32 %791
  %1436 = select i1 %1430, i32 %791, i32 %746
  br label %1437

1437:                                             ; preds = %1427, %741
  %1438 = phi i32 [ %742, %741 ], [ %1432, %1427 ]
  %1439 = phi i32 [ %743, %741 ], [ %1433, %1427 ]
  %1440 = phi i32 [ %750, %741 ], [ %1434, %1427 ]
  %1441 = phi i32 [ %745, %741 ], [ %1435, %1427 ]
  %1442 = phi i32 [ %791, %741 ], [ %1436, %1427 ]
  %1443 = add nsw i32 %1440, %1439
  %1444 = lshr i32 %1443, 1
  %1445 = and i32 %1443, 1
  %1446 = add nuw i32 %1444, %1445
  %1447 = shl i32 %1446, 4
  %1448 = sext i32 %1447 to i64
  %1449 = mul nsw i64 %1448, %662
  %1450 = lshr i64 %1449, 16
  %1451 = trunc i64 %1450 to i32
  %1452 = add i32 %681, %1451
  %1453 = sext i32 %1452 to i64
  %1454 = mul nsw i64 %1453, %1448
  %1455 = lshr i64 %1454, 16
  %1456 = trunc i64 %1455 to i32
  %1457 = add i32 %687, %1456
  %1458 = sext i32 %1457 to i64
  %1459 = mul nsw i64 %1458, %1448
  %1460 = lshr i64 %1459, 16
  %1461 = trunc i64 %1460 to i32
  %1462 = add i32 %693, %1461
  %1463 = sext i32 %1462 to i64
  %1464 = mul nsw i64 %1463, %1448
  %1465 = lshr i64 %1464, 16
  %1466 = trunc i64 %1465 to i32
  %1467 = add i32 %699, %1466
  %1468 = sext i32 %1467 to i64
  %1469 = mul nsw i64 %1468, %1448
  %1470 = lshr i64 %1469, 16
  %1471 = trunc i64 %1470 to i32
  %1472 = add i32 %705, %1471
  %1473 = sext i32 %1472 to i64
  %1474 = mul nsw i64 %1473, %1448
  %1475 = lshr i64 %1474, 16
  %1476 = trunc i64 %1475 to i32
  %1477 = add i32 %711, %1476
  %1478 = sext i32 %1477 to i64
  %1479 = mul nsw i64 %1478, %1448
  %1480 = lshr i64 %1479, 16
  %1481 = trunc i64 %1480 to i32
  %1482 = add i32 %717, %1481
  %1483 = sext i32 %1482 to i64
  %1484 = mul nsw i64 %1483, %1448
  %1485 = lshr i64 %1484, 16
  %1486 = trunc i64 %1485 to i32
  %1487 = add i32 %723, %1486
  %1488 = icmp slt i32 %1441, 1
  %1489 = icmp sgt i32 %1487, -1
  %1490 = and i1 %1488, %1489
  br i1 %1490, label %834, label %1491

1491:                                             ; preds = %1437
  %1492 = icmp sgt i32 %1441, -1
  %1493 = icmp slt i32 %1487, 1
  %1494 = and i1 %1492, %1493
  %1495 = add nsw i32 %1438, 32
  %1496 = select i1 %1494, i32 %1438, i32 %1495
  %1497 = select i1 %1494, i32 %1441, i32 %1487
  %1498 = select i1 %1494, i32 %1487, i32 %1442
  br label %834
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @silk_bwexpander_32(i32*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !7, !3}
!10 = !{!"branch_weights", i32 2000, i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !7, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !7, !3}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
