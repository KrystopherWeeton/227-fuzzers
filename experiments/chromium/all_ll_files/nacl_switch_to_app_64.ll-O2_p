; ModuleID = '../../native_client/src/trusted/service_runtime/arch/x86_64/nacl_switch_to_app_64.c'
source_filename = "../../native_client/src/trusted/service_runtime/arch/x86_64/nacl_switch_to_app_64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClThreadContext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i16, i16, i64, i32, i32 }
%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClAppThread = type { %struct.NaClThreadContext, %struct.NaClMutex, %struct.NaClApp*, i32, i32, %struct.NaClThread, %struct.NaClMutex, i32, %struct.NaClAppThreadSuspendedRegisters*, i32, i64, i8*, i32, i32, i32, %struct.NaClListNode, i32, %struct.NaClCondVar }
%struct.NaClThread = type { i64 }
%struct.NaClAppThreadSuspendedRegisters = type opaque
%struct.NaClListNode = type { %struct.NaClListNode*, %struct.NaClListNode* }
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type opaque
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type opaque
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque
%struct.cpu_feature_struct_X86 = type { [39 x i8] }

@NaClSwitch = common hidden local_unnamed_addr global void (%struct.NaClThreadContext*)* null, align 8
@.str = private unnamed_addr constant [45 x i8] c"NaClStartThreadInApp: secure stack:   0x%lx\0A\00", align 1
@.str.1 = private unnamed_addr constant [45 x i8] c"NaClStartThreadInApp: adjusted stack: 0x%lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"NaClStackThreadInApp: user stack: 0x%lx\0A\00", align 1
@.str.3 = private unnamed_addr constant [51 x i8] c"NaClStartThreadInApp: switching to untrusted code\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NaClInitSwitchToApp(%struct.NaClApp* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 40
  %3 = bitcast %struct.NaClCPUFeaturesAbstract** %2 to %struct.cpu_feature_struct_X86**
  %4 = load %struct.cpu_feature_struct_X86*, %struct.cpu_feature_struct_X86** %3, align 8
  %5 = getelementptr inbounds %struct.cpu_feature_struct_X86, %struct.cpu_feature_struct_X86* %4, i64 0, i32 0, i64 4
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  %8 = select i1 %7, void (%struct.NaClThreadContext*)* @NaClSwitchSSE, void (%struct.NaClThreadContext*)* @NaClSwitchAVX
  store void (%struct.NaClThreadContext*)* %8, void (%struct.NaClThreadContext*)** @NaClSwitch, align 8
  ret void
}

; Function Attrs: noreturn
declare void @NaClSwitchAVX(%struct.NaClThreadContext*) #1

; Function Attrs: noreturn
declare void @NaClSwitchSSE(%struct.NaClThreadContext*) #1

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @NaClStartThreadInApp(%struct.NaClAppThread*, i64) local_unnamed_addr #2 {
  %3 = tail call i64 @NaClGetStackPtr() #4
  tail call void (i32, i8*, ...) @NaClLog(i32 6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i64 %3) #4
  %4 = and i64 %3, -32
  tail call void (i32, i8*, ...) @NaClLog(i32 6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i64 %4) #4
  %5 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0, i32 24
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 2
  %8 = load %struct.NaClApp*, %struct.NaClApp** %7, align 8
  %9 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0, i32 17
  store i64 %1, i64* %9, align 8
  %10 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0, i32 18
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %8, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0, i32 15
  store i64 %12, i64* %13, align 8
  %14 = getelementptr inbounds %struct.NaClAppThread, %struct.NaClAppThread* %0, i64 0, i32 0, i32 7
  %15 = load i64, i64* %14, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 6, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i64 %15) #4
  tail call void (i32, i8*, ...) @NaClLog(i32 6, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.3, i64 0, i64 0)) #4
  %16 = load void (%struct.NaClThreadContext*)*, void (%struct.NaClThreadContext*)** @NaClSwitch, align 8
  tail call void %16(%struct.NaClThreadContext* %5) #5
  unreachable
}

declare i64 @NaClGetStackPtr() local_unnamed_addr #3

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
