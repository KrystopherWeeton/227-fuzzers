; ModuleID = '../../third_party/abseil-cpp/absl/hash/internal/wyhash.cc'
source_filename = "../../third_party/abseil-cpp/absl/hash/internal/wyhash.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4absl13hash_internal6WyhashEPKvmmPKm(i8* nocapture readonly, i64, i64, i64* nocapture readonly) local_unnamed_addr #0 {
  %5 = load i64, i64* %3, align 8
  %6 = xor i64 %5, %2
  %7 = icmp ugt i64 %1, 64
  br i1 %7, label %8, label %89

8:                                                ; preds = %4
  %9 = getelementptr inbounds i64, i64* %3, i64 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i64, i64* %3, i64 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds i64, i64* %3, i64 3
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i64, i64* %3, i64 4
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %1, -65
  %18 = and i64 %17, -64
  %19 = add nuw i64 %18, 64
  %20 = add i64 %1, -64
  br label %21

21:                                               ; preds = %8, %21
  %22 = phi i64 [ %80, %21 ], [ %6, %8 ]
  %23 = phi i64 [ %64, %21 ], [ %6, %8 ]
  %24 = phi i8* [ %81, %21 ], [ %0, %8 ]
  %25 = phi i64 [ %82, %21 ], [ %1, %8 ]
  %26 = bitcast i8* %24 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = getelementptr inbounds i8, i8* %24, i64 8
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = getelementptr inbounds i8, i8* %24, i64 16
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = getelementptr inbounds i8, i8* %24, i64 24
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = getelementptr inbounds i8, i8* %24, i64 32
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = getelementptr inbounds i8, i8* %24, i64 40
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = getelementptr inbounds i8, i8* %24, i64 48
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = getelementptr inbounds i8, i8* %24, i64 56
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = xor i64 %10, %27
  %50 = xor i64 %30, %23
  %51 = zext i64 %49 to i128
  %52 = zext i64 %50 to i128
  %53 = mul nuw i128 %51, %52
  %54 = lshr i128 %53, 64
  %55 = xor i64 %12, %33
  %56 = xor i64 %36, %23
  %57 = zext i64 %55 to i128
  %58 = zext i64 %56 to i128
  %59 = mul nuw i128 %57, %58
  %60 = lshr i128 %59, 64
  %61 = xor i128 %54, %53
  %62 = xor i128 %61, %59
  %63 = xor i128 %62, %60
  %64 = trunc i128 %63 to i64
  %65 = xor i64 %14, %39
  %66 = xor i64 %42, %22
  %67 = zext i64 %65 to i128
  %68 = zext i64 %66 to i128
  %69 = mul nuw i128 %67, %68
  %70 = lshr i128 %69, 64
  %71 = xor i64 %16, %45
  %72 = xor i64 %48, %22
  %73 = zext i64 %71 to i128
  %74 = zext i64 %72 to i128
  %75 = mul nuw i128 %73, %74
  %76 = lshr i128 %75, 64
  %77 = xor i128 %70, %69
  %78 = xor i128 %77, %75
  %79 = xor i128 %78, %76
  %80 = trunc i128 %79 to i64
  %81 = getelementptr inbounds i8, i8* %24, i64 64
  %82 = add i64 %25, -64
  %83 = icmp ugt i64 %82, 64
  br i1 %83, label %21, label %84

84:                                               ; preds = %21
  %85 = getelementptr i8, i8* %0, i64 %19
  %86 = sub i64 %20, %18
  %87 = xor i128 %79, %63
  %88 = trunc i128 %87 to i64
  br label %89

89:                                               ; preds = %84, %4
  %90 = phi i64 [ %88, %84 ], [ %6, %4 ]
  %91 = phi i8* [ %85, %84 ], [ %0, %4 ]
  %92 = phi i64 [ %86, %84 ], [ %1, %4 ]
  %93 = icmp ugt i64 %92, 16
  br i1 %93, label %94, label %166

94:                                               ; preds = %89
  %95 = getelementptr inbounds i64, i64* %3, i64 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %92, -17
  %98 = and i64 %97, -16
  %99 = add nuw i64 %98, 16
  %100 = add i64 %92, -16
  %101 = and i64 %97, 16
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %120

103:                                              ; preds = %94
  %104 = bitcast i8* %91 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = getelementptr inbounds i8, i8* %91, i64 8
  %107 = bitcast i8* %106 to i64*
  %108 = load i64, i64* %107, align 1
  %109 = xor i64 %96, %105
  %110 = xor i64 %108, %90
  %111 = zext i64 %109 to i128
  %112 = zext i64 %110 to i128
  %113 = mul nuw i128 %111, %112
  %114 = lshr i128 %113, 64
  %115 = xor i128 %114, %113
  %116 = trunc i128 %115 to i64
  %117 = getelementptr inbounds i8, i8* %91, i64 16
  %118 = add i64 %92, -16
  %119 = trunc i128 %115 to i64
  br label %120

120:                                              ; preds = %103, %94
  %121 = phi i64 [ %92, %94 ], [ %118, %103 ]
  %122 = phi i8* [ %91, %94 ], [ %117, %103 ]
  %123 = phi i64 [ %90, %94 ], [ %116, %103 ]
  %124 = phi i64 [ undef, %94 ], [ %119, %103 ]
  %125 = icmp ult i64 %97, 16
  br i1 %125, label %162, label %126

126:                                              ; preds = %120, %126
  %127 = phi i64 [ %158, %126 ], [ %121, %120 ]
  %128 = phi i8* [ %157, %126 ], [ %122, %120 ]
  %129 = phi i64 [ %156, %126 ], [ %123, %120 ]
  %130 = bitcast i8* %128 to i64*
  %131 = load i64, i64* %130, align 1
  %132 = getelementptr inbounds i8, i8* %128, i64 8
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = xor i64 %96, %131
  %136 = xor i64 %134, %129
  %137 = zext i64 %135 to i128
  %138 = zext i64 %136 to i128
  %139 = mul nuw i128 %137, %138
  %140 = lshr i128 %139, 64
  %141 = xor i128 %140, %139
  %142 = trunc i128 %141 to i64
  %143 = getelementptr inbounds i8, i8* %128, i64 16
  %144 = bitcast i8* %143 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = getelementptr inbounds i8, i8* %128, i64 24
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 1
  %149 = xor i64 %96, %145
  %150 = xor i64 %148, %142
  %151 = zext i64 %149 to i128
  %152 = zext i64 %150 to i128
  %153 = mul nuw i128 %151, %152
  %154 = lshr i128 %153, 64
  %155 = xor i128 %154, %153
  %156 = trunc i128 %155 to i64
  %157 = getelementptr inbounds i8, i8* %128, i64 32
  %158 = add i64 %127, -32
  %159 = icmp ugt i64 %158, 16
  br i1 %159, label %126, label %160

160:                                              ; preds = %126
  %161 = trunc i128 %155 to i64
  br label %162

162:                                              ; preds = %120, %160
  %163 = phi i64 [ %124, %120 ], [ %161, %160 ]
  %164 = getelementptr i8, i8* %91, i64 %99
  %165 = sub i64 %100, %98
  br label %166

166:                                              ; preds = %162, %89
  %167 = phi i64 [ %163, %162 ], [ %90, %89 ]
  %168 = phi i8* [ %164, %162 ], [ %91, %89 ]
  %169 = phi i64 [ %165, %162 ], [ %92, %89 ]
  %170 = icmp ugt i64 %169, 8
  br i1 %170, label %171, label %178

171:                                              ; preds = %166
  %172 = bitcast i8* %168 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = getelementptr inbounds i8, i8* %168, i64 %169
  %175 = getelementptr inbounds i8, i8* %174, i64 -8
  %176 = bitcast i8* %175 to i64*
  %177 = load i64, i64* %176, align 1
  br label %206

178:                                              ; preds = %166
  %179 = icmp ugt i64 %169, 3
  br i1 %179, label %180, label %189

180:                                              ; preds = %178
  %181 = bitcast i8* %168 to i32*
  %182 = load i32, i32* %181, align 1
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %168, i64 %169
  %185 = getelementptr inbounds i8, i8* %184, i64 -4
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = zext i32 %187 to i64
  br label %206

189:                                              ; preds = %178
  %190 = icmp eq i64 %169, 0
  br i1 %190, label %206, label %191

191:                                              ; preds = %189
  %192 = load i8, i8* %168, align 1
  %193 = zext i8 %192 to i64
  %194 = shl nuw nsw i64 %193, 16
  %195 = lshr i64 %169, 1
  %196 = getelementptr inbounds i8, i8* %168, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = shl nuw nsw i64 %198, 8
  %200 = or i64 %199, %194
  %201 = add nsw i64 %169, -1
  %202 = getelementptr inbounds i8, i8* %168, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i64
  %205 = or i64 %200, %204
  br label %206

206:                                              ; preds = %189, %180, %191, %171
  %207 = phi i64 [ %173, %171 ], [ %183, %180 ], [ %205, %191 ], [ 0, %189 ]
  %208 = phi i64 [ %177, %171 ], [ %188, %180 ], [ 0, %191 ], [ 0, %189 ]
  %209 = getelementptr inbounds i64, i64* %3, i64 1
  %210 = load i64, i64* %209, align 8
  %211 = xor i64 %210, %207
  %212 = xor i64 %208, %167
  %213 = zext i64 %211 to i128
  %214 = zext i64 %212 to i128
  %215 = mul nuw i128 %213, %214
  %216 = lshr i128 %215, 64
  %217 = xor i64 %210, %1
  %218 = and i128 %215, 18446744073709551615
  %219 = xor i128 %216, %218
  %220 = zext i64 %217 to i128
  %221 = mul nuw i128 %219, %220
  %222 = lshr i128 %221, 64
  %223 = xor i128 %222, %221
  %224 = trunc i128 %223 to i64
  ret i64 %224
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
