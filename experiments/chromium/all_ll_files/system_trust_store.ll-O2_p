; ModuleID = '../../net/cert/internal/system_trust_store.cc'
source_filename = "../../net/cert/internal/system_trust_store.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::SystemTrustStore" = type { i32 (...)** }
%"class.net::TrustStoreNSS" = type { %"class.net::TrustStore", i32, i8, %"class.std::__1::unique_ptr.7" }
%"class.net::TrustStore" = type { %"class.net::CertIssuerSource" }
%"class.net::CertIssuerSource" = type { i32 (...)** }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %struct.PK11SlotInfoStr* }
%struct.PK11SlotInfoStr = type opaque
%"class.net::TrustStoreCollection" = type { %"class.net::TrustStore", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::TrustStore"**, %"class.net::TrustStore"**, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.net::TrustStore"** }
%"class.net::(anonymous namespace)::SystemTrustStoreNSS" = type { %"class.net::SystemTrustStore", %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.net::TrustStoreNSS"* }
%"class.net::ParsedCertificate" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr.27", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::BitString", %"struct.net::ParsedTbsCertificate", %"class.std::__1::unique_ptr.31", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"struct.net::ParsedBasicConstraints", i8, [3 x i8], %"class.net::der::BitString", i8, %"class.std::__1::vector.42", %"struct.net::ParsedExtension", %"class.std::__1::unique_ptr.49", %"class.std::__1::unique_ptr.55", i8, [7 x i8], %"struct.net::ParsedExtension", %"class.std::__1::vector.61", %"class.std::__1::vector.61", i8, %"class.std::__1::vector.42", i8, %"struct.net::ParsedPolicyConstraints", i8, %"class.std::__1::vector.68", i8, i8, %"class.absl::optional", %"class.absl::optional.76", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.net::der::Input" = type { i8*, i64 }
%"struct.net::ParsedTbsCertificate" = type { i32, %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"struct.net::der::GeneralizedTime", %"struct.net::der::GeneralizedTime", %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8], %"class.net::der::BitString", i8, [7 x i8], %"class.net::der::BitString", i8, %"class.net::der::Input" }
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.net::SignatureAlgorithm"* }
%"class.net::SignatureAlgorithm" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.net::ParsedBasicConstraints" = type { i8, i8, i8 }
%"class.net::der::BitString" = type <{ %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.net::GeneralNames"* }
%"struct.net::GeneralNames" = type opaque
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.net::NameConstraints"* }
%"class.net::NameConstraints" = type opaque
%"struct.net::ParsedExtension" = type <{ %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.63" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.net::der::Input"* }
%"struct.net::ParsedPolicyConstraints" = type { i8, i8, i8, i8 }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"struct.net::ParsedPolicyMapping"*, %"struct.net::ParsedPolicyMapping"*, %"class.std::__1::__compressed_pair.70" }
%"struct.net::ParsedPolicyMapping" = type { %"class.net::der::Input", %"class.net::der::Input" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.net::ParsedPolicyMapping"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.75 }
%union.anon.75 = type { %"struct.net::ParsedAuthorityKeyIdentifier" }
%"struct.net::ParsedAuthorityKeyIdentifier" = type { %"class.absl::optional.76", %"class.absl::optional.76", %"class.absl::optional.76" }
%"class.absl::optional.76" = type { %"class.absl::optional_internal::optional_data.77" }
%"class.absl::optional_internal::optional_data.77" = type { %"class.absl::optional_internal::optional_data_base.78" }
%"class.absl::optional_internal::optional_data_base.78" = type { %"class.absl::optional_internal::optional_data_dtor_base.79" }
%"class.absl::optional_internal::optional_data_dtor_base.79" = type { i8, %union.anon.80 }
%union.anon.80 = type { %"class.net::der::Input" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.85", %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { i64 }
%struct.SECItemStr = type { i32, i8*, i32 }
%struct.NSSTrustDomainStr = type opaque
%struct.CERTCertificateStr = type { %struct.PLArenaPool*, i8*, i8*, %struct.CERTSignedDataStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.CERTNameStr, %struct.CERTValidityStr, %struct.CERTNameStr, %struct.CERTSubjectPublicKeyInfoStr, %struct.SECItemStr, %struct.SECItemStr, %struct.CERTCertExtensionStr**, i8*, %struct.NSSTrustDomainStr*, %struct.SECItemStr, i32, i32, i32, i32, i32, i32, i32, %struct.CERTOKDomainNameStr*, i32, i32, i8*, i8*, %struct.NSSCertificateStr*, %struct.CERTCertTrustStr*, i32, %struct.CERTSubjectListStr*, %struct.CERTAuthKeyIDStr*, i32, %union.anon.97, i32, %struct.PK11SlotInfoStr*, i64, i32, %struct.CERTCertDistrustStr* }
%struct.PLArenaPool = type { %struct.PLArena, %struct.PLArena*, i32, i64 }
%struct.PLArena = type { %struct.PLArena*, i64, i64, i64 }
%struct.CERTSignedDataStr = type { %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.SECAlgorithmIDStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTValidityStr = type { %struct.PLArenaPool*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTNameStr = type { %struct.PLArenaPool*, %struct.CERTRDNStr** }
%struct.CERTRDNStr = type { %struct.CERTAVAStr** }
%struct.CERTAVAStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTSubjectPublicKeyInfoStr = type { %struct.PLArenaPool*, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.CERTCertExtensionStr = type { %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTOKDomainNameStr = type { %struct.CERTOKDomainNameStr*, i8* }
%struct.NSSCertificateStr = type opaque
%struct.CERTCertTrustStr = type { i32, i32, i32 }
%struct.CERTSubjectListStr = type { %struct.PLArenaPool*, i32, i8*, %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, i8* }
%struct.CERTSubjectNodeStr = type { %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTAuthKeyIDStr = type { %struct.SECItemStr, %struct.CERTGeneralNameStr*, %struct.SECItemStr, %struct.SECItemStr** }
%struct.CERTGeneralNameStr = type { i32, %union.anon.96, %struct.SECItemStr, %struct.PRCListStr }
%union.anon.96 = type { %struct.OtherNameStr }
%struct.OtherNameStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.PRCListStr = type { %struct.PRCListStr*, %struct.PRCListStr* }
%union.anon.97 = type { i8* }
%struct.CERTCertDistrustStr = type { %struct.SECItemStr, %struct.SECItemStr }
%"class.net::(anonymous namespace)::DummySystemTrustStore" = type { %"class.net::SystemTrustStore", %"class.net::TrustStoreCollection" }

@_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*)* @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSSD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*)* @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSSD0Ev to i8*), i8* bitcast (%"class.net::TrustStore"* (%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*)* @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSS13GetTrustStoreEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*)* @_ZNK3net12_GLOBAL__N_119SystemTrustStoreNSS20UsesSystemTrustStoreEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*, %"class.net::ParsedCertificate"*)* @_ZNK3net12_GLOBAL__N_119SystemTrustStoreNSS11IsKnownRootEPKNS_17ParsedCertificateE to i8*)] }, align 8
@_ZTVN3net12_GLOBAL__N_121DummySystemTrustStoreE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::DummySystemTrustStore"*)* @_ZN3net12_GLOBAL__N_121DummySystemTrustStoreD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DummySystemTrustStore"*)* @_ZN3net12_GLOBAL__N_121DummySystemTrustStoreD0Ev to i8*), i8* bitcast (%"class.net::TrustStore"* (%"class.net::(anonymous namespace)::DummySystemTrustStore"*)* @_ZN3net12_GLOBAL__N_121DummySystemTrustStore13GetTrustStoreEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DummySystemTrustStore"*)* @_ZNK3net12_GLOBAL__N_121DummySystemTrustStore20UsesSystemTrustStoreEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DummySystemTrustStore"*, %"class.net::ParsedCertificate"*)* @_ZNK3net12_GLOBAL__N_121DummySystemTrustStore11IsKnownRootEPKNS_17ParsedCertificateE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::SystemTrustStore"* @_ZN3net25CreateSslSystemTrustStoreEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znwm(i64 24) #9
  %2 = bitcast i8* %1 to %"class.net::TrustStoreNSS"*
  tail call void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnum(%"class.net::TrustStoreNSS"* nonnull %2, i32 0) #10
  %3 = ptrtoint i8* %1 to i64
  %4 = tail call i8* @_Znwm(i64 16) #9
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = bitcast i8* %4 to %"class.net::SystemTrustStore"*
  ret %"class.net::SystemTrustStore"* %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::SystemTrustStore"* @_ZN3net51CreateSslSystemTrustStoreNSSWithUserSlotRestrictionENSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS2_XadL_Z13PK11_FreeSlotEEEEEE(%struct.PK11SlotInfoStr*) local_unnamed_addr #0 {
  %2 = tail call i8* @_Znwm(i64 24) #9
  %3 = bitcast i8* %2 to %"class.net::TrustStoreNSS"*
  tail call void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS4_XadL_Z13PK11_FreeSlotEEEEEE(%"class.net::TrustStoreNSS"* nonnull %3, i32 0, %struct.PK11SlotInfoStr* %0) #10
  %4 = ptrtoint i8* %2 to i64
  %5 = tail call i8* @_Znwm(i64 16) #9
  %6 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = bitcast i8* %5 to %"class.net::SystemTrustStore"*
  ret %"class.net::SystemTrustStore"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::SystemTrustStore"* @_ZN3net43CreateSslSystemTrustStoreNSSWithNoUserSlotsEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znwm(i64 24) #9
  %2 = bitcast i8* %1 to %"class.net::TrustStoreNSS"*
  tail call void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNS0_32DisallowTrustForCertsOnUserSlotsE(%"class.net::TrustStoreNSS"* nonnull %2, i32 0) #10
  %3 = ptrtoint i8* %1 to i64
  %4 = tail call i8* @_Znwm(i64 16) #9
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = bitcast i8* %4 to %"class.net::SystemTrustStore"*
  ret %"class.net::SystemTrustStore"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::SystemTrustStore"* @_ZN3net27CreateEmptySystemTrustStoreEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znwm(i64 40) #9
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1, i8 0, i64 40, i1 false) #10
  %2 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_121DummySystemTrustStoreE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to %"class.net::TrustStoreCollection"*
  tail call void @_ZN3net20TrustStoreCollectionC1Ev(%"class.net::TrustStoreCollection"* %4) #10
  %5 = bitcast i8* %1 to %"class.net::SystemTrustStore"*
  ret %"class.net::SystemTrustStore"* %5
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

declare void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnum(%"class.net::TrustStoreNSS"*, i32) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSSD2Ev(%"class.net::(anonymous namespace)::SystemTrustStoreNSS"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::SystemTrustStoreNSS", %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::SystemTrustStoreNSS", %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.net::TrustStoreNSS"*, %"class.net::TrustStoreNSS"** %3, align 8
  store %"class.net::TrustStoreNSS"* null, %"class.net::TrustStoreNSS"** %3, align 8
  %5 = icmp eq %"class.net::TrustStoreNSS"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.net::TrustStoreNSS"* %4 to void (%"class.net::TrustStoreNSS"*)***
  %8 = load void (%"class.net::TrustStoreNSS"*)**, void (%"class.net::TrustStoreNSS"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.net::TrustStoreNSS"*)*, void (%"class.net::TrustStoreNSS"*)** %8, i64 1
  %10 = load void (%"class.net::TrustStoreNSS"*)*, void (%"class.net::TrustStoreNSS"*)** %9, align 8
  tail call void %10(%"class.net::TrustStoreNSS"* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSSD0Ev(%"class.net::(anonymous namespace)::SystemTrustStoreNSS"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::SystemTrustStoreNSS", %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_119SystemTrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::SystemTrustStoreNSS", %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.net::TrustStoreNSS"*, %"class.net::TrustStoreNSS"** %3, align 8
  store %"class.net::TrustStoreNSS"* null, %"class.net::TrustStoreNSS"** %3, align 8
  %5 = icmp eq %"class.net::TrustStoreNSS"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.net::TrustStoreNSS"* %4 to void (%"class.net::TrustStoreNSS"*)***
  %8 = load void (%"class.net::TrustStoreNSS"*)**, void (%"class.net::TrustStoreNSS"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.net::TrustStoreNSS"*)*, void (%"class.net::TrustStoreNSS"*)** %8, i64 1
  %10 = load void (%"class.net::TrustStoreNSS"*)*, void (%"class.net::TrustStoreNSS"*)** %9, align 8
  tail call void %10(%"class.net::TrustStoreNSS"* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %"class.net::TrustStore"* @_ZN3net12_GLOBAL__N_119SystemTrustStoreNSS13GetTrustStoreEv(%"class.net::(anonymous namespace)::SystemTrustStoreNSS"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::SystemTrustStoreNSS", %"class.net::(anonymous namespace)::SystemTrustStoreNSS"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.net::TrustStoreNSS"*, %"class.net::TrustStoreNSS"** %2, align 8
  %4 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %3, i64 0, i32 0
  ret %"class.net::TrustStore"* %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_119SystemTrustStoreNSS20UsesSystemTrustStoreEv(%"class.net::(anonymous namespace)::SystemTrustStoreNSS"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_119SystemTrustStoreNSS11IsKnownRootEPKNS_17ParsedCertificateE(%"class.net::(anonymous namespace)::SystemTrustStoreNSS"* nocapture readnone, %"class.net::ParsedCertificate"*) unnamed_addr #0 align 2 {
  %3 = alloca %struct.SECItemStr, align 8
  %4 = alloca %"class.net::der::Input", align 8
  %5 = bitcast %struct.SECItemStr* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 24, i1 false)
  %6 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 2
  %7 = bitcast %"class.net::der::Input"* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.SECItemStr, %struct.SECItemStr* %3, i64 0, i32 1
  %10 = bitcast i8** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 2, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = getelementptr inbounds %struct.SECItemStr, %struct.SECItemStr* %3, i64 0, i32 2
  store i32 %13, i32* %14, align 8
  %15 = getelementptr inbounds %struct.SECItemStr, %struct.SECItemStr* %3, i64 0, i32 0
  store i32 3, i32* %15, align 8
  %16 = tail call %struct.NSSTrustDomainStr* @CERT_GetDefaultCertDB() #10
  %17 = call %struct.CERTCertificateStr* @CERT_FindCertByDERCert(%struct.NSSTrustDomainStr* %16, %struct.SECItemStr* nonnull %3) #10
  %18 = icmp eq %struct.CERTCertificateStr* %17, null
  br i1 %18, label %31, label %19

19:                                               ; preds = %2
  %20 = call zeroext i1 @_ZN3net11IsKnownRootEP18CERTCertificateStr(%struct.CERTCertificateStr* nonnull %17) #10
  br i1 %20, label %21, label %29

21:                                               ; preds = %19
  %22 = bitcast %"class.net::der::Input"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #10
  %23 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %17, i64 0, i32 4, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %17, i64 0, i32 4, i32 2
  %26 = load i32, i32* %25, align 8
  %27 = zext i32 %26 to i64
  call void @_ZN3net3der5InputC1EPKhm(%"class.net::der::Input"* nonnull %4, i8* %24, i64 %27) #10
  %28 = call zeroext i1 @_ZN3net3dereqERKNS0_5InputES3_(%"class.net::der::Input"* dereferenceable(16) %6, %"class.net::der::Input"* nonnull dereferenceable(16) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #10
  br label %29

29:                                               ; preds = %19, %21
  %30 = phi i1 [ false, %19 ], [ %28, %21 ]
  call void @CERT_DestroyCertificate(%struct.CERTCertificateStr* nonnull %17) #10
  br label %31

31:                                               ; preds = %2, %29
  %32 = phi i1 [ %30, %29 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret i1 %32
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare %struct.CERTCertificateStr* @CERT_FindCertByDERCert(%struct.NSSTrustDomainStr*, %struct.SECItemStr*) local_unnamed_addr #3

declare %struct.NSSTrustDomainStr* @CERT_GetDefaultCertDB() local_unnamed_addr #3

declare zeroext i1 @_ZN3net11IsKnownRootEP18CERTCertificateStr(%struct.CERTCertificateStr*) local_unnamed_addr #3

declare zeroext i1 @_ZN3net3dereqERKNS0_5InputES3_(%"class.net::der::Input"* dereferenceable(16), %"class.net::der::Input"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN3net3der5InputC1EPKhm(%"class.net::der::Input"*, i8*, i64) unnamed_addr #3

declare void @CERT_DestroyCertificate(%struct.CERTCertificateStr*) local_unnamed_addr #3

declare void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS4_XadL_Z13PK11_FreeSlotEEEEEE(%"class.net::TrustStoreNSS"*, i32, %struct.PK11SlotInfoStr*) unnamed_addr #3

declare void @_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNS0_32DisallowTrustForCertsOnUserSlotsE(%"class.net::TrustStoreNSS"*, i32) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3net20TrustStoreCollectionC1Ev(%"class.net::TrustStoreCollection"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_121DummySystemTrustStoreD2Ev(%"class.net::(anonymous namespace)::DummySystemTrustStore"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DummySystemTrustStore", %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_121DummySystemTrustStoreE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DummySystemTrustStore", %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0, i64 0, i32 1
  tail call void @_ZN3net20TrustStoreCollectionD1Ev(%"class.net::TrustStoreCollection"* %3) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_121DummySystemTrustStoreD0Ev(%"class.net::(anonymous namespace)::DummySystemTrustStore"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DummySystemTrustStore", %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_121DummySystemTrustStoreE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DummySystemTrustStore", %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0, i64 0, i32 1
  tail call void @_ZN3net20TrustStoreCollectionD1Ev(%"class.net::TrustStoreCollection"* %3) #10
  %4 = bitcast %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal %"class.net::TrustStore"* @_ZN3net12_GLOBAL__N_121DummySystemTrustStore13GetTrustStoreEv(%"class.net::(anonymous namespace)::DummySystemTrustStore"* readnone) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DummySystemTrustStore", %"class.net::(anonymous namespace)::DummySystemTrustStore"* %0, i64 0, i32 1, i32 0
  ret %"class.net::TrustStore"* %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_121DummySystemTrustStore20UsesSystemTrustStoreEv(%"class.net::(anonymous namespace)::DummySystemTrustStore"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_121DummySystemTrustStore11IsKnownRootEPKNS_17ParsedCertificateE(%"class.net::(anonymous namespace)::DummySystemTrustStore"* nocapture readnone, %"class.net::ParsedCertificate"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 false
}

; Function Attrs: nounwind
declare void @_ZN3net20TrustStoreCollectionD1Ev(%"class.net::TrustStoreCollection"*) unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
