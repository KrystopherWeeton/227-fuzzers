; ModuleID = '../../net/base/network_interfaces_posix.cc'
source_filename = "../../net/base/network_interfaces_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.sockaddr = type { i16, [14 x i8] }
%"class.net::ScopedWifiOptions" = type { i32 (...)** }

@.str = private unnamed_addr constant [6 x i8] c"vmnet\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"vnic\00", align 1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3net8internal21ShouldIgnoreInterfaceERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.std::__1::basic_string"* dereferenceable(24), i32) local_unnamed_addr #0 {
  %3 = and i32 %1, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %68, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %13 = select i1 %9, i8* %11, i8* %12
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %8 to i64
  %17 = select i1 %9, i64 %15, i64 %16
  %18 = getelementptr inbounds i8, i8* %13, i64 %17
  %19 = ptrtoint i8* %18 to i64
  %20 = ptrtoint i8* %13 to i64
  %21 = icmp slt i64 %17, 5
  br i1 %21, label %44, label %22

22:                                               ; preds = %5, %33
  %23 = phi i64 [ %36, %33 ], [ %17, %5 ]
  %24 = phi i8* [ %34, %33 ], [ %13, %5 ]
  %25 = add nsw i64 %23, -4
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %44, label %27

27:                                               ; preds = %22
  %28 = tail call i8* @memchr(i8* %24, i32 118, i64 %25) #5
  %29 = icmp eq i8* %28, null
  br i1 %29, label %44, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @bcmp(i8* nonnull %28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5) #5
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  %35 = ptrtoint i8* %34 to i64
  %36 = sub i64 %19, %35
  %37 = icmp slt i64 %36, 5
  br i1 %37, label %44, label %22

38:                                               ; preds = %30
  %39 = ptrtoint i8* %28 to i64
  %40 = icmp eq i8* %28, %18
  %41 = sub i64 %39, %20
  %42 = icmp eq i64 %41, -1
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %69

44:                                               ; preds = %33, %27, %22, %5, %38
  %45 = icmp slt i64 %17, 4
  br i1 %45, label %68, label %46

46:                                               ; preds = %44, %57
  %47 = phi i64 [ %60, %57 ], [ %17, %44 ]
  %48 = phi i8* [ %58, %57 ], [ %13, %44 ]
  %49 = add nsw i64 %47, -3
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %68, label %51

51:                                               ; preds = %46
  %52 = tail call i8* @memchr(i8* %48, i32 118, i64 %49) #5
  %53 = icmp eq i8* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %51
  %55 = tail call i32 @bcmp(i8* nonnull %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #5
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds i8, i8* %52, i64 1
  %59 = ptrtoint i8* %58 to i64
  %60 = sub i64 %19, %59
  %61 = icmp slt i64 %60, 4
  br i1 %61, label %68, label %46

62:                                               ; preds = %54
  %63 = ptrtoint i8* %52 to i64
  %64 = icmp eq i8* %52, %18
  %65 = sub i64 %63, %20
  %66 = icmp eq i64 %65, -1
  %67 = or i1 %64, %66
  br i1 %67, label %68, label %69

68:                                               ; preds = %57, %51, %46, %44, %62, %2
  br label %69

69:                                               ; preds = %62, %38, %68
  %70 = phi i1 [ false, %68 ], [ true, %38 ], [ true, %62 ]
  ret i1 %70
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN3net8internal30IsLoopbackOrUnspecifiedAddressEPK8sockaddr(%struct.sockaddr* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 0
  %3 = load i16, i16* %2, align 2
  switch i16 %3, label %40 [
    i16 10, label %4
    i16 2, label %35
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 6
  %6 = bitcast i8* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 10
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %34

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 14
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 18
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 16777216
  br i1 %23, label %40, label %24

24:                                               ; preds = %14, %19
  %25 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 14
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 18
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %9, %4, %24, %29
  br label %40

35:                                               ; preds = %1
  %36 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %0, i64 0, i32 1, i64 2
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 4
  switch i32 %38, label %39 [
    i32 2130706433, label %40
    i32 0, label %40
  ]

39:                                               ; preds = %35
  br label %40

40:                                               ; preds = %34, %39, %1, %35, %35, %29, %19
  %41 = phi i1 [ true, %19 ], [ true, %29 ], [ true, %35 ], [ true, %35 ], [ true, %1 ], [ false, %39 ], [ false, %34 ]
  ret i1 %41
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN3net23GetWifiPHYLayerProtocolEv() local_unnamed_addr #2 {
  ret i32 6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.net::ScopedWifiOptions"* @_ZN3net14SetWifiOptionsEi(i32) local_unnamed_addr #2 {
  ret %"class.net::ScopedWifiOptions"* null
}

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
