; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/subtractor_output_analyzer.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/subtractor_output_analyzer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::SubtractorOutputAnalyzer" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { i64*, i64, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.webrtc::SubtractorOutput" = type { %"struct.std::__1::array", %"struct.std::__1::array", %"struct.std::__1::array", %"struct.std::__1::array", %"struct.webrtc::FftData", %"struct.std::__1::array.1", %"struct.std::__1::array.1", float, float, float, float, float, float, float }
%"struct.std::__1::array" = type { [64 x float] }
%"struct.webrtc::FftData" = type { %"struct.std::__1::array.1", %"struct.std::__1::array.1" }
%"struct.std::__1::array.1" = type { [65 x float] }

$_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb = comdat any

@_ZN6webrtc24SubtractorOutputAnalyzerC1Em = hidden unnamed_addr alias void (%"class.webrtc::SubtractorOutputAnalyzer"*, i64), void (%"class.webrtc::SubtractorOutputAnalyzer"*, i64)* @_ZN6webrtc24SubtractorOutputAnalyzerC2Em

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc24SubtractorOutputAnalyzerC2Em(%"class.webrtc::SubtractorOutputAnalyzer"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"class.webrtc::SubtractorOutputAnalyzer", %"class.webrtc::SubtractorOutputAnalyzer"* %0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #4
  store i8 0, i8* %3, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"* %4, i64 %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"*, i64, i8* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = icmp eq i64 %1, 0
  %7 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  br i1 %6, label %48, label %8

8:                                                ; preds = %3
  %9 = icmp slt i64 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %11) #5
  unreachable

12:                                               ; preds = %8
  %13 = add nsw i64 %1, -1
  %14 = lshr i64 %13, 6
  %15 = add nuw nsw i64 %14, 1
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call i8* @_Znwm(i64 %16) #6
  %18 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %17, i8** %18, align 8
  store i64 0, i64* %4, align 8
  store i64 %15, i64* %5, align 8
  %19 = load i8, i8* %2, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  store i64 %1, i64* %4, align 8
  %21 = icmp ult i64 %1, 65
  %22 = bitcast i8* %17 to i64*
  %23 = getelementptr inbounds i64, i64* %22, i64 %14
  %24 = select i1 %21, i64* %22, i64* %23
  store i64 0, i64* %24, align 8
  %25 = lshr i64 %1, 6
  %26 = shl nuw nsw i64 %25, 3
  br i1 %20, label %37, label %27

27:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 %26, i1 false) #4
  %28 = and i64 %1, 63
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %27
  %31 = bitcast i8* %17 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 %25
  %33 = sub nuw nsw i64 64, %28
  %34 = lshr i64 -1, %33
  %35 = load i64, i64* %32, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* %32, align 8
  br label %48

37:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %26, i1 false) #4
  %38 = and i64 %1, 63
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = bitcast i8* %17 to i64*
  %42 = getelementptr inbounds i64, i64* %41, i64 %25
  %43 = sub nuw nsw i64 64, %38
  %44 = lshr i64 -1, %43
  %45 = xor i64 %44, -1
  %46 = load i64, i64* %42, align 8
  %47 = and i64 %46, %45
  store i64 %47, i64* %42, align 8
  br label %48

48:                                               ; preds = %40, %37, %30, %27, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc24SubtractorOutputAnalyzer6UpdateEN3rtc9ArrayViewIKNS_16SubtractorOutputELln4711EEEPbS6_S6_(%"class.webrtc::SubtractorOutputAnalyzer"* nocapture readonly, %"struct.webrtc::SubtractorOutput"*, i64, i8* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  store i8 0, i8* %3, align 1
  store i8 0, i8* %4, align 1
  store i8 1, i8* %5, align 1
  %7 = icmp eq i64 %2, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.webrtc::SubtractorOutputAnalyzer", %"class.webrtc::SubtractorOutputAnalyzer"* %0, i64 0, i32 0, i32 0
  br label %11

10:                                               ; preds = %58, %6
  ret void

11:                                               ; preds = %58, %8
  %12 = phi i64 [ 0, %8 ], [ %69, %58 ]
  %13 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1, i64 %12, i32 11
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1, i64 %12, i32 9
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"struct.webrtc::SubtractorOutput", %"struct.webrtc::SubtractorOutput"* %1, i64 %12, i32 10
  %18 = load float, float* %17, align 4
  %19 = fmul float %14, 5.000000e-01
  %20 = fcmp olt float %16, %19
  %21 = fcmp ogt float %14, 1.600000e+05
  %22 = fmul float %14, 0x3FA99999A0000000
  %23 = fcmp olt float %18, %22
  %24 = fmul float %14, 0x3FC99999A0000000
  %25 = fcmp olt float %18, %24
  %26 = fcmp ogt float %14, 2.560000e+04
  %27 = and i1 %26, %25
  %28 = fcmp olt float %18, %16
  %29 = select i1 %28, float %18, float %16
  %30 = fmul float %14, 1.500000e+00
  %31 = fcmp ogt float %29, %30
  %32 = fcmp ogt float %14, 5.760000e+04
  %33 = and i1 %32, %31
  %34 = or i1 %20, %23
  %35 = and i1 %21, %34
  %36 = load i64*, i64** %9, align 8
  %37 = lshr i64 %12, 6
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  %39 = and i64 %12, 63
  %40 = shl i64 1, %39
  br i1 %35, label %41, label %44

41:                                               ; preds = %11
  %42 = load i64, i64* %38, align 8
  %43 = or i64 %42, %40
  br label %48

44:                                               ; preds = %11
  %45 = xor i64 %40, -1
  %46 = load i64, i64* %38, align 8
  %47 = and i64 %46, %45
  br label %48

48:                                               ; preds = %41, %44
  %49 = phi i64 [ %47, %44 ], [ %43, %41 ]
  store i64 %49, i64* %38, align 8
  %50 = load i8, i8* %3, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = load i64*, i64** %9, align 8
  %54 = getelementptr inbounds i64, i64* %53, i64 %37
  %55 = load i64, i64* %54, align 8
  %56 = and i64 %55, %40
  %57 = icmp ne i64 %56, 0
  br label %58

58:                                               ; preds = %48, %52
  %59 = phi i1 [ true, %48 ], [ %57, %52 ]
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %3, align 1
  %61 = load i8, i8* %4, align 1, !range !2
  %62 = icmp ne i8 %61, 0
  %63 = or i1 %27, %62
  %64 = zext i1 %63 to i8
  store i8 %64, i8* %4, align 1
  %65 = load i8, i8* %5, align 1, !range !2
  %66 = icmp ne i8 %65, 0
  %67 = and i1 %33, %66
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %5, align 1
  %69 = add nuw i64 %12, 1
  %70 = icmp eq i64 %69, %2
  br i1 %70, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc24SubtractorOutputAnalyzer20HandleEchoPathChangeEv(%"class.webrtc::SubtractorOutputAnalyzer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.webrtc::SubtractorOutputAnalyzer"* %0 to i64*
  %3 = load i64, i64* %2, align 8, !noalias !3
  %4 = getelementptr inbounds %"class.webrtc::SubtractorOutputAnalyzer", %"class.webrtc::SubtractorOutputAnalyzer"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8, !noalias !4
  %6 = inttoptr i64 %3 to i64*
  %7 = lshr i64 %5, 6
  %8 = getelementptr inbounds i64, i64* %6, i64 %7
  %9 = and i64 %5, 63
  %10 = ptrtoint i64* %8 to i64
  %11 = sub i64 %10, %3
  %12 = shl i64 %11, 3
  %13 = add i64 %12, %9
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %1
  %16 = inttoptr i64 %3 to i8*
  %17 = lshr i64 %13, 6
  %18 = shl nuw nsw i64 %17, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 %18, i1 false) #4
  %19 = and i64 %13, 63
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds i64, i64* %6, i64 %17
  %23 = sub nuw nsw i64 64, %19
  %24 = lshr i64 -1, %23
  %25 = xor i64 %24, -1
  %26 = load i64, i64* %22, align 8
  %27 = and i64 %26, %25
  store i64 %27, i64* %22, align 8
  br label %28

28:                                               ; preds = %1, %15, %21
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
