; ModuleID = '../../third_party/lzma_sdk/7zCrcOpt.c'
source_filename = "../../third_party/lzma_sdk/7zCrcOpt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @CrcUpdateT4(i32, i8*, i64, i32* nocapture readonly) local_unnamed_addr #0 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %120, label %6

6:                                                ; preds = %4, %13
  %7 = phi i8* [ %24, %13 ], [ %1, %4 ]
  %8 = phi i32 [ %22, %13 ], [ %0, %4 ]
  %9 = phi i64 [ %23, %13 ], [ %2, %4 ]
  %10 = ptrtoint i8* %7 to i64
  %11 = and i64 %10, 3
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %6
  %14 = load i8, i8* %7, align 1
  %15 = zext i8 %14 to i32
  %16 = and i32 %8, 255
  %17 = xor i32 %16, %15
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %3, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = lshr i32 %8, 8
  %22 = xor i32 %20, %21
  %23 = add i64 %9, -1
  %24 = getelementptr inbounds i8, i8* %7, i64 1
  %25 = icmp eq i64 %23, 0
  br i1 %25, label %120, label %6

26:                                               ; preds = %6
  %27 = icmp ugt i64 %9, 3
  br i1 %27, label %28, label %36

28:                                               ; preds = %26
  %29 = add i64 %9, -4
  %30 = and i64 %29, -4
  %31 = add nuw i64 %30, 4
  br label %60

32:                                               ; preds = %60
  %33 = sub i64 %29, %30
  %34 = getelementptr i8, i8* %7, i64 %31
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %120, label %36

36:                                               ; preds = %26, %32
  %37 = phi i8* [ %7, %26 ], [ %34, %32 ]
  %38 = phi i32 [ %8, %26 ], [ %90, %32 ]
  %39 = phi i64 [ %9, %26 ], [ %33, %32 ]
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = load i8, i8* %37, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %38, 255
  %46 = xor i32 %45, %44
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %3, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %38, 8
  %51 = xor i32 %49, %50
  %52 = add i64 %39, -1
  %53 = getelementptr inbounds i8, i8* %37, i64 1
  br label %54

54:                                               ; preds = %36, %42
  %55 = phi i32 [ undef, %36 ], [ %51, %42 ]
  %56 = phi i8* [ %37, %36 ], [ %53, %42 ]
  %57 = phi i32 [ %38, %36 ], [ %51, %42 ]
  %58 = phi i64 [ %39, %36 ], [ %52, %42 ]
  %59 = icmp eq i64 %39, 1
  br i1 %59, label %120, label %94

60:                                               ; preds = %28, %60
  %61 = phi i8* [ %92, %60 ], [ %7, %28 ]
  %62 = phi i32 [ %90, %60 ], [ %8, %28 ]
  %63 = phi i64 [ %91, %60 ], [ %9, %28 ]
  %64 = bitcast i8* %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = xor i32 %65, %62
  %67 = and i32 %66, 255
  %68 = or i32 %67, 768
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %3, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %66, 8
  %73 = and i32 %72, 255
  %74 = or i32 %73, 512
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %3, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = xor i32 %77, %71
  %79 = lshr i32 %66, 16
  %80 = and i32 %79, 255
  %81 = or i32 %80, 256
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %3, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = xor i32 %78, %84
  %86 = lshr i32 %66, 24
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %3, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = xor i32 %85, %89
  %91 = add i64 %63, -4
  %92 = getelementptr inbounds i8, i8* %61, i64 4
  %93 = icmp ugt i64 %91, 3
  br i1 %93, label %60, label %32

94:                                               ; preds = %54, %94
  %95 = phi i8* [ %118, %94 ], [ %56, %54 ]
  %96 = phi i32 [ %116, %94 ], [ %57, %54 ]
  %97 = phi i64 [ %117, %94 ], [ %58, %54 ]
  %98 = load i8, i8* %95, align 1
  %99 = zext i8 %98 to i32
  %100 = and i32 %96, 255
  %101 = xor i32 %100, %99
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %3, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %96, 8
  %106 = xor i32 %104, %105
  %107 = getelementptr inbounds i8, i8* %95, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = and i32 %106, 255
  %111 = xor i32 %110, %109
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32* %3, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = lshr i32 %106, 8
  %116 = xor i32 %114, %115
  %117 = add i64 %97, -2
  %118 = getelementptr inbounds i8, i8* %95, i64 2
  %119 = icmp eq i64 %117, 0
  br i1 %119, label %120, label %94

120:                                              ; preds = %13, %54, %94, %4, %32
  %121 = phi i32 [ %90, %32 ], [ %0, %4 ], [ %55, %54 ], [ %116, %94 ], [ %22, %13 ]
  ret i32 %121
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @CrcUpdateT8(i32, i8*, i64, i32* nocapture readonly) local_unnamed_addr #0 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %149, label %6

6:                                                ; preds = %4, %13
  %7 = phi i32 [ %22, %13 ], [ %0, %4 ]
  %8 = phi i8* [ %24, %13 ], [ %1, %4 ]
  %9 = phi i64 [ %23, %13 ], [ %2, %4 ]
  %10 = ptrtoint i8* %8 to i64
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %6
  %14 = load i8, i8* %8, align 1
  %15 = zext i8 %14 to i32
  %16 = and i32 %7, 255
  %17 = xor i32 %16, %15
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %3, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = lshr i32 %7, 8
  %22 = xor i32 %20, %21
  %23 = add i64 %9, -1
  %24 = getelementptr inbounds i8, i8* %8, i64 1
  %25 = icmp eq i64 %23, 0
  br i1 %25, label %149, label %6

26:                                               ; preds = %6
  %27 = icmp ugt i64 %9, 7
  br i1 %27, label %28, label %36

28:                                               ; preds = %26
  %29 = add i64 %9, -8
  %30 = and i64 %29, -8
  %31 = add nuw i64 %30, 8
  br label %60

32:                                               ; preds = %60
  %33 = sub i64 %29, %30
  %34 = getelementptr i8, i8* %8, i64 %31
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %149, label %36

36:                                               ; preds = %26, %32
  %37 = phi i32 [ %7, %26 ], [ %119, %32 ]
  %38 = phi i8* [ %8, %26 ], [ %34, %32 ]
  %39 = phi i64 [ %9, %26 ], [ %33, %32 ]
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = load i8, i8* %38, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %37, 255
  %46 = xor i32 %45, %44
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %3, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %37, 8
  %51 = xor i32 %49, %50
  %52 = add i64 %39, -1
  %53 = getelementptr inbounds i8, i8* %38, i64 1
  br label %54

54:                                               ; preds = %36, %42
  %55 = phi i32 [ undef, %36 ], [ %51, %42 ]
  %56 = phi i32 [ %37, %36 ], [ %51, %42 ]
  %57 = phi i8* [ %38, %36 ], [ %53, %42 ]
  %58 = phi i64 [ %39, %36 ], [ %52, %42 ]
  %59 = icmp eq i64 %39, 1
  br i1 %59, label %149, label %123

60:                                               ; preds = %28, %60
  %61 = phi i32 [ %119, %60 ], [ %7, %28 ]
  %62 = phi i8* [ %121, %60 ], [ %8, %28 ]
  %63 = phi i64 [ %120, %60 ], [ %9, %28 ]
  %64 = bitcast i8* %62 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = xor i32 %65, %61
  %67 = and i32 %66, 255
  %68 = or i32 %67, 1792
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %3, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %66, 8
  %73 = and i32 %72, 255
  %74 = or i32 %73, 1536
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %3, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = lshr i32 %66, 16
  %79 = and i32 %78, 255
  %80 = or i32 %79, 1280
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %3, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = lshr i32 %66, 24
  %85 = or i32 %84, 1024
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %3, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds i8, i8* %62, i64 4
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = and i32 %91, 255
  %93 = or i32 %92, 768
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %3, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = lshr i32 %91, 8
  %98 = and i32 %97, 255
  %99 = or i32 %98, 512
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %3, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = lshr i32 %91, 16
  %104 = and i32 %103, 255
  %105 = or i32 %104, 256
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %3, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = lshr i32 %91, 24
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %3, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = xor i32 %77, %71
  %114 = xor i32 %113, %83
  %115 = xor i32 %114, %88
  %116 = xor i32 %115, %96
  %117 = xor i32 %116, %102
  %118 = xor i32 %117, %108
  %119 = xor i32 %118, %112
  %120 = add i64 %63, -8
  %121 = getelementptr inbounds i8, i8* %62, i64 8
  %122 = icmp ugt i64 %120, 7
  br i1 %122, label %60, label %32

123:                                              ; preds = %54, %123
  %124 = phi i32 [ %145, %123 ], [ %56, %54 ]
  %125 = phi i8* [ %147, %123 ], [ %57, %54 ]
  %126 = phi i64 [ %146, %123 ], [ %58, %54 ]
  %127 = load i8, i8* %125, align 1
  %128 = zext i8 %127 to i32
  %129 = and i32 %124, 255
  %130 = xor i32 %129, %128
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i32, i32* %3, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = lshr i32 %124, 8
  %135 = xor i32 %133, %134
  %136 = getelementptr inbounds i8, i8* %125, i64 1
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = and i32 %135, 255
  %140 = xor i32 %139, %138
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %3, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = lshr i32 %135, 8
  %145 = xor i32 %143, %144
  %146 = add i64 %126, -2
  %147 = getelementptr inbounds i8, i8* %125, i64 2
  %148 = icmp eq i64 %146, 0
  br i1 %148, label %149, label %123

149:                                              ; preds = %13, %54, %123, %4, %32
  %150 = phi i32 [ %119, %32 ], [ %0, %4 ], [ %55, %54 ], [ %145, %123 ], [ %22, %13 ]
  ret i32 %150
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
