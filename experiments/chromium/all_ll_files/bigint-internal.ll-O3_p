; ModuleID = '../../v8/src/bigint/bigint-internal.cc'
source_filename = "../../v8/src/bigint/bigint-internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.v8::bigint::ProcessorImpl" = type { i64, i32, %"class.v8::bigint::Platform"* }
%"class.v8::bigint::Platform" = type { i32 (...)** }
%"class.v8::bigint::Processor" = type { i8 }
%"class.v8::bigint::Digits" = type <{ i64*, i32, [4 x i8] }>

@_ZN2v86bigint13ProcessorImplC1EPNS0_8PlatformE = hidden unnamed_addr alias void (%"class.v8::bigint::ProcessorImpl"*, %"class.v8::bigint::Platform"*), void (%"class.v8::bigint::ProcessorImpl"*, %"class.v8::bigint::Platform"*)* @_ZN2v86bigint13ProcessorImplC2EPNS0_8PlatformE
@_ZN2v86bigint13ProcessorImplD1Ev = hidden unnamed_addr alias void (%"class.v8::bigint::ProcessorImpl"*), void (%"class.v8::bigint::ProcessorImpl"*)* @_ZN2v86bigint13ProcessorImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v86bigint13ProcessorImplC2EPNS0_8PlatformE(%"class.v8::bigint::ProcessorImpl"* nocapture, %"class.v8::bigint::Platform"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 2
  store %"class.v8::bigint::Platform"* %1, %"class.v8::bigint::Platform"** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v86bigint13ProcessorImplD2Ev(%"class.v8::bigint::ProcessorImpl"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 2
  %3 = load %"class.v8::bigint::Platform"*, %"class.v8::bigint::Platform"** %2, align 8
  %4 = icmp eq %"class.v8::bigint::Platform"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::bigint::Platform"* %3 to void (%"class.v8::bigint::Platform"*)***
  %7 = load void (%"class.v8::bigint::Platform"*)**, void (%"class.v8::bigint::Platform"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.v8::bigint::Platform"*)*, void (%"class.v8::bigint::Platform"*)** %7, i64 1
  %9 = load void (%"class.v8::bigint::Platform"*)*, void (%"class.v8::bigint::Platform"*)** %8, align 8
  tail call void %9(%"class.v8::bigint::Platform"* nonnull %3) #8
  br label %10

10:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v86bigint13ProcessorImpl20get_and_clear_statusEv(%"class.v8::bigint::ProcessorImpl"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::bigint::ProcessorImpl", %"class.v8::bigint::ProcessorImpl"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  store i32 0, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.v8::bigint::Processor"* @_ZN2v86bigint9Processor3NewEPNS0_8PlatformE(%"class.v8::bigint::Platform"*) local_unnamed_addr #4 align 2 {
  %2 = tail call i8* @_Znwm(i64 24) #9
  %3 = bitcast i8* %2 to i64*
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 16
  %7 = bitcast i8* %6 to %"class.v8::bigint::Platform"**
  store %"class.v8::bigint::Platform"* %0, %"class.v8::bigint::Platform"** %7, align 8
  %8 = bitcast i8* %2 to %"class.v8::bigint::Processor"*
  ret %"class.v8::bigint::Processor"* %8
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v86bigint9Processor7DestroyEv(%"class.v8::bigint::Processor"*) local_unnamed_addr #1 align 2 {
  %2 = icmp eq %"class.v8::bigint::Processor"* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.v8::bigint::Processor", %"class.v8::bigint::Processor"* %0, i64 16
  %5 = bitcast %"class.v8::bigint::Processor"* %4 to %"class.v8::bigint::Platform"**
  %6 = load %"class.v8::bigint::Platform"*, %"class.v8::bigint::Platform"** %5, align 8
  %7 = icmp eq %"class.v8::bigint::Platform"* %6, null
  br i1 %7, label %13, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.v8::bigint::Platform"* %6 to void (%"class.v8::bigint::Platform"*)***
  %10 = load void (%"class.v8::bigint::Platform"*)**, void (%"class.v8::bigint::Platform"*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.v8::bigint::Platform"*)*, void (%"class.v8::bigint::Platform"*)** %10, i64 1
  %12 = load void (%"class.v8::bigint::Platform"*)*, void (%"class.v8::bigint::Platform"*)** %11, align 8
  tail call void %12(%"class.v8::bigint::Platform"* nonnull %6) #8
  br label %13

13:                                               ; preds = %3, %8
  %14 = getelementptr inbounds %"class.v8::bigint::Processor", %"class.v8::bigint::Processor"* %0, i64 0, i32 0
  tail call void @_ZdlPv(i8* %14) #9
  br label %15

15:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v86bigint13ProcessorImpl8MultiplyENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::ProcessorImpl"*, i64*, i32, i64*, i32, %"class.v8::bigint::Digits"* nocapture byval(%"class.v8::bigint::Digits") align 8) local_unnamed_addr #1 align 2 {
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds i64, i64* %3, i64 %10
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %19, label %26

14:                                               ; preds = %19
  %15 = add nsw i64 %20, -1
  %16 = getelementptr inbounds i64, i64* %3, i64 %15
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %8, %14
  %20 = phi i64 [ %15, %14 ], [ %10, %8 ]
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %14, label %22

22:                                               ; preds = %19
  %23 = trunc i64 %20 to i32
  br label %26

24:                                               ; preds = %14
  %25 = trunc i64 %20 to i32
  br label %26

26:                                               ; preds = %24, %8, %22, %6
  %27 = phi i32 [ %4, %6 ], [ %23, %22 ], [ %4, %8 ], [ %25, %24 ]
  %28 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %52

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 0
  %33 = sext i32 %29 to i64
  %34 = load i64*, i64** %32, align 8
  %35 = add nsw i64 %33, -1
  %36 = getelementptr inbounds i64, i64* %34, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %44, label %52

39:                                               ; preds = %44
  %40 = add nsw i64 %45, -1
  %41 = getelementptr inbounds i64, i64* %34, i64 %40
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %50

44:                                               ; preds = %31, %39
  %45 = phi i64 [ %40, %39 ], [ %35, %31 ]
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %28, align 8
  %47 = icmp sgt i64 %45, 0
  br i1 %47, label %39, label %48

48:                                               ; preds = %44
  %49 = trunc i64 %45 to i32
  br label %52

50:                                               ; preds = %39
  %51 = trunc i64 %45 to i32
  br label %52

52:                                               ; preds = %50, %31, %48, %26
  %53 = phi i32 [ %29, %26 ], [ %49, %48 ], [ %29, %31 ], [ %51, %50 ]
  %54 = icmp eq i32 %27, 0
  %55 = icmp eq i32 %53, 0
  %56 = or i1 %54, %55
  br i1 %56, label %57, label %61

57:                                               ; preds = %52
  %58 = bitcast i64* %1 to i8*
  %59 = sext i32 %2 to i64
  %60 = shl nsw i64 %59, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 %60, i1 false) #8
  br label %76

61:                                               ; preds = %52
  %62 = icmp slt i32 %27, %53
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 0
  %65 = load i64*, i64** %64, align 8
  store i64* %3, i64** %64, align 8
  store i32 %27, i32* %28, align 8
  br label %66

66:                                               ; preds = %63, %61
  %67 = phi i32 [ %27, %63 ], [ %53, %61 ]
  %68 = phi i32 [ %53, %63 ], [ %27, %61 ]
  %69 = phi i64* [ %65, %63 ], [ %3, %61 ]
  %70 = icmp eq i32 %67, 1
  br i1 %70, label %71, label %75

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %5, i64 0, i32 0
  %73 = load i64*, i64** %72, align 8
  %74 = load i64, i64* %73, align 8
  tail call void @_ZN2v86bigint13ProcessorImpl14MultiplySingleENS0_8RWDigitsENS0_6DigitsEm(%"class.v8::bigint::ProcessorImpl"* %0, i64* %1, i32 %2, i64* %69, i32 %68, i64 %74) #8
  br label %76

75:                                               ; preds = %66
  tail call void @_ZN2v86bigint13ProcessorImpl18MultiplySchoolbookENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::ProcessorImpl"* %0, i64* %1, i32 %2, i64* %69, i32 %68, %"class.v8::bigint::Digits"* nonnull byval(%"class.v8::bigint::Digits") align 8 %5) #8
  br label %76

76:                                               ; preds = %75, %71, %57
  ret void
}

declare void @_ZN2v86bigint13ProcessorImpl14MultiplySingleENS0_8RWDigitsENS0_6DigitsEm(%"class.v8::bigint::ProcessorImpl"*, i64*, i32, i64*, i32, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN2v86bigint13ProcessorImpl18MultiplySchoolbookENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::ProcessorImpl"*, i64*, i32, i64*, i32, %"class.v8::bigint::Digits"* byval(%"class.v8::bigint::Digits") align 8) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v86bigint9Processor8MultiplyENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::Processor"*, i64*, i32, i64*, i32, %"class.v8::bigint::Digits"* nocapture readonly byval(%"class.v8::bigint::Digits") align 8) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.v8::bigint::Digits", align 8
  %8 = bitcast %"class.v8::bigint::Processor"* %0 to %"class.v8::bigint::ProcessorImpl"*
  %9 = bitcast %"class.v8::bigint::Digits"* %5 to i8*
  %10 = bitcast %"class.v8::bigint::Digits"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %9, i64 16, i1 false)
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %6
  %13 = sext i32 %4 to i64
  %14 = add nsw i64 %13, -1
  %15 = getelementptr inbounds i64, i64* %3, i64 %14
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %23, label %30

18:                                               ; preds = %23
  %19 = add nsw i64 %24, -1
  %20 = getelementptr inbounds i64, i64* %3, i64 %19
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %12, %18
  %24 = phi i64 [ %19, %18 ], [ %14, %12 ]
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %18, label %26

26:                                               ; preds = %23
  %27 = trunc i64 %24 to i32
  br label %30

28:                                               ; preds = %18
  %29 = trunc i64 %24 to i32
  br label %30

30:                                               ; preds = %28, %26, %12, %6
  %31 = phi i32 [ %4, %6 ], [ %27, %26 ], [ %4, %12 ], [ %29, %28 ]
  %32 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %7, i64 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %54

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %7, i64 0, i32 0
  %37 = sext i32 %33 to i64
  %38 = load i64*, i64** %36, align 8
  %39 = add nsw i64 %37, -1
  %40 = getelementptr inbounds i64, i64* %38, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %54

43:                                               ; preds = %48
  %44 = add nsw i64 %49, -1
  %45 = getelementptr inbounds i64, i64* %38, i64 %44
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %35, %43
  %49 = phi i64 [ %44, %43 ], [ %39, %35 ]
  %50 = trunc i64 %49 to i32
  store i32 %50, i32* %32, align 8
  %51 = icmp sgt i64 %49, 0
  br i1 %51, label %43, label %52

52:                                               ; preds = %48, %43
  %53 = trunc i64 %49 to i32
  br label %54

54:                                               ; preds = %52, %35, %30
  %55 = phi i32 [ %33, %30 ], [ %33, %35 ], [ %53, %52 ]
  %56 = icmp eq i32 %31, 0
  %57 = icmp eq i32 %55, 0
  %58 = or i1 %56, %57
  br i1 %58, label %59, label %63

59:                                               ; preds = %54
  %60 = bitcast i64* %1 to i8*
  %61 = sext i32 %2 to i64
  %62 = shl nsw i64 %61, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 %62, i1 false) #8
  br label %78

63:                                               ; preds = %54
  %64 = icmp slt i32 %31, %55
  br i1 %64, label %65, label %68

65:                                               ; preds = %63
  %66 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %7, i64 0, i32 0
  %67 = load i64*, i64** %66, align 8
  store i64* %3, i64** %66, align 8
  store i32 %31, i32* %32, align 8
  br label %68

68:                                               ; preds = %65, %63
  %69 = phi i32 [ %31, %65 ], [ %55, %63 ]
  %70 = phi i32 [ %55, %65 ], [ %31, %63 ]
  %71 = phi i64* [ %67, %65 ], [ %3, %63 ]
  %72 = icmp eq i32 %69, 1
  br i1 %72, label %73, label %77

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.v8::bigint::Digits", %"class.v8::bigint::Digits"* %7, i64 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = load i64, i64* %75, align 8
  tail call void @_ZN2v86bigint13ProcessorImpl14MultiplySingleENS0_8RWDigitsENS0_6DigitsEm(%"class.v8::bigint::ProcessorImpl"* %8, i64* %1, i32 %2, i64* %71, i32 %70, i64 %76) #8
  br label %78

77:                                               ; preds = %68
  tail call void @_ZN2v86bigint13ProcessorImpl18MultiplySchoolbookENS0_8RWDigitsENS0_6DigitsES3_(%"class.v8::bigint::ProcessorImpl"* %8, i64* %1, i32 %2, i64* %71, i32 %70, %"class.v8::bigint::Digits"* nonnull byval(%"class.v8::bigint::Digits") align 8 %7) #8
  br label %78

78:                                               ; preds = %59, %73, %77
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10)
  %79 = getelementptr inbounds %"class.v8::bigint::Processor", %"class.v8::bigint::Processor"* %0, i64 8
  %80 = bitcast %"class.v8::bigint::Processor"* %79 to i32*
  %81 = load i32, i32* %80, align 8
  store i32 0, i32* %80, align 8
  ret i32 %81
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
