; ModuleID = '../../v8/src/compiler/value-numbering-reducer.cc'
source_filename = "../../v8/src/compiler/value-numbering-reducer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::ValueNumberingReducer" = type { %"class.v8::internal::compiler::Reducer", %"class.v8::internal::compiler::Node"**, i64, i64, %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::Reducer" = type { i32 (...)** }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"struct.v8::internal::compiler::Node::OutOfLineInputs" = type { %"class.v8::internal::compiler::Node"*, i32, i32 }

$_ZNK2v88internal8compiler21ValueNumberingReducer12reducer_nameEv = comdat any

@_ZTVN2v88internal8compiler21ValueNumberingReducerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::compiler::ValueNumberingReducer"*)* @_ZN2v88internal8compiler21ValueNumberingReducerD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::compiler::ValueNumberingReducer"*)* @_ZN2v88internal8compiler21ValueNumberingReducerD0Ev to i8*), i8* bitcast (i8* (%"class.v8::internal::compiler::ValueNumberingReducer"*)* @_ZNK2v88internal8compiler21ValueNumberingReducer12reducer_nameEv to i8*), i8* bitcast (void (%"class.v8::internal::compiler::Reducer"*)* @_ZN2v88internal8compiler7Reducer8FinalizeEv to i8*), i8* bitcast (%"class.v8::internal::compiler::Node"* (%"class.v8::internal::compiler::ValueNumberingReducer"*, %"class.v8::internal::compiler::Node"*)* @_ZN2v88internal8compiler21ValueNumberingReducer6ReduceEPNS1_4NodeE to i8*)] }, align 8
@.str = private unnamed_addr constant [22 x i8] c"ValueNumberingReducer\00", align 1

@_ZN2v88internal8compiler21ValueNumberingReducerC1EPNS0_4ZoneES4_ = hidden unnamed_addr alias void (%"class.v8::internal::compiler::ValueNumberingReducer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::compiler::ValueNumberingReducer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal8compiler21ValueNumberingReducerC2EPNS0_4ZoneES4_
@_ZN2v88internal8compiler21ValueNumberingReducerD1Ev = hidden unnamed_addr alias void (%"class.v8::internal::compiler::ValueNumberingReducer"*), void (%"class.v8::internal::compiler::ValueNumberingReducer"*)* @_ZN2v88internal8compiler21ValueNumberingReducerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal8compiler21ValueNumberingReducerC2EPNS0_4ZoneES4_(%"class.v8::internal::compiler::ValueNumberingReducer"* nocapture, %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2v88internal8compiler21ValueNumberingReducerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 4
  %7 = bitcast %"class.v8::internal::compiler::Node"*** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 5
  store %"class.v8::internal::Zone"* %2, %"class.v8::internal::Zone"** %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2v88internal8compiler21ValueNumberingReducerD2Ev(%"class.v8::internal::compiler::ValueNumberingReducer"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler21ValueNumberingReducerD0Ev(%"class.v8::internal::compiler::ValueNumberingReducer"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::compiler::ValueNumberingReducer"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler21ValueNumberingReducer6ReduceEPNS1_4NodeE(%"class.v8::internal::compiler::ValueNumberingReducer"* nocapture, %"class.v8::internal::compiler::Node"*) unnamed_addr #2 align 2 {
  %3 = alloca %"class.v8::internal::compiler::Type", align 8
  %4 = alloca %"class.v8::internal::compiler::Type", align 8
  %5 = alloca %"class.v8::internal::compiler::Type", align 8
  %6 = alloca %"class.v8::internal::compiler::Type", align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %8 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %8, i64 0, i32 3, i32 0
  %10 = load i8, i8* %9, align 2
  %11 = and i8 %10, 4
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %228, label %13

13:                                               ; preds = %2
  %14 = tail call i64 @_ZN2v88internal8compiler14NodeProperties8HashCodeEPNS1_4NodeE(%"class.v8::internal::compiler::Node"* %1) #7
  %15 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 1
  %16 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"** %16, null
  %18 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 2
  br i1 %17, label %19, label %40

19:                                               ; preds = %13
  store i64 256, i64* %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 4
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %21, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %25, %23
  %27 = icmp ult i64 %26, 2048
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %19
  %29 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %21, i64 2048) #7
  br label %32

30:                                               ; preds = %19
  %31 = add i64 %23, 2048
  store i64 %31, i64* %22, align 8
  br label %32

32:                                               ; preds = %28, %30
  %33 = phi i64 [ %29, %28 ], [ %23, %30 ]
  %34 = inttoptr i64 %33 to %"class.v8::internal::compiler::Node"**
  store %"class.v8::internal::compiler::Node"** %34, %"class.v8::internal::compiler::Node"*** %15, align 8
  %35 = inttoptr i64 %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 2048, i1 false)
  %36 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  %37 = and i64 %14, 255
  %38 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %36, i64 %37
  store %"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Node"** %38, align 8
  %39 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 3
  store i64 1, i64* %39, align 8
  br label %228

40:                                               ; preds = %13
  %41 = load i64, i64* %18, align 8
  %42 = add i64 %41, -1
  %43 = and i64 %14, %42
  %44 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %16, i64 %43
  %45 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %44, align 8
  %46 = icmp eq %"class.v8::internal::compiler::Node"* %45, null
  br i1 %46, label %53, label %63

47:                                               ; preds = %220
  %48 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %221, i64 %224
  %49 = load i64, i64* %18, align 8
  %50 = icmp eq i64 %222, %49
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %221, i64 %222
  store %"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Node"** %52, align 8
  br label %228

53:                                               ; preds = %40, %47
  %54 = phi %"class.v8::internal::compiler::Node"** [ %48, %47 ], [ %44, %40 ]
  store %"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Node"** %54, align 8
  %55 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 3
  %56 = load i64, i64* %55, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %55, align 8
  %58 = lshr i64 %57, 2
  %59 = add i64 %58, %57
  %60 = load i64, i64* %18, align 8
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %228, label %62

62:                                               ; preds = %53
  tail call void @_ZN2v88internal8compiler21ValueNumberingReducer4GrowEv(%"class.v8::internal::compiler::ValueNumberingReducer"* %0)
  br label %228

63:                                               ; preds = %40, %220
  %64 = phi %"class.v8::internal::compiler::Node"** [ %221, %220 ], [ %16, %40 ]
  %65 = phi %"class.v8::internal::compiler::Node"* [ %226, %220 ], [ %45, %40 ]
  %66 = phi i64 [ %224, %220 ], [ %43, %40 ]
  %67 = phi i64 [ %222, %220 ], [ %41, %40 ]
  %68 = icmp eq %"class.v8::internal::compiler::Node"* %65, %1
  br i1 %68, label %69, label %166

69:                                               ; preds = %63
  %70 = add i64 %66, 1
  %71 = and i64 %70, %42
  %72 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %64, i64 %71
  %73 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %72, align 8
  %74 = icmp eq %"class.v8::internal::compiler::Node"* %73, null
  br i1 %74, label %228, label %75

75:                                               ; preds = %69, %159
  %76 = phi %"class.v8::internal::compiler::Node"** [ %160, %159 ], [ %64, %69 ]
  %77 = phi %"class.v8::internal::compiler::Node"* [ %164, %159 ], [ %73, %69 ]
  %78 = phi %"class.v8::internal::compiler::Node"** [ %163, %159 ], [ %72, %69 ]
  %79 = phi i64 [ %162, %159 ], [ %71, %69 ]
  %80 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %77, i64 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 24
  %83 = and i32 %82, 15
  %84 = icmp eq i32 %83, 15
  %85 = ptrtoint %"class.v8::internal::compiler::Node"* %77 to i64
  %86 = add i64 %85, 32
  br i1 %84, label %87, label %94

87:                                               ; preds = %75
  %88 = inttoptr i64 %86 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %89 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %88, align 8
  %90 = ptrtoint %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %89 to i64
  %91 = add i64 %90, 16
  %92 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %89, i64 0, i32 1
  %93 = load i32, i32* %92, align 8
  br label %94

94:                                               ; preds = %87, %75
  %95 = phi i32 [ %93, %87 ], [ %83, %75 ]
  %96 = phi i64 [ %91, %87 ], [ %86, %75 ]
  %97 = icmp sgt i32 %95, 0
  br i1 %97, label %98, label %102

98:                                               ; preds = %94
  %99 = inttoptr i64 %96 to %"class.v8::internal::compiler::Node"**
  %100 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %99, align 8
  %101 = icmp eq %"class.v8::internal::compiler::Node"* %100, null
  br i1 %101, label %159, label %102

102:                                              ; preds = %94, %98
  %103 = icmp eq %"class.v8::internal::compiler::Node"* %77, %1
  br i1 %103, label %104, label %114

104:                                              ; preds = %102
  %105 = add i64 %79, 1
  %106 = and i64 %105, %42
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %76, i64 %106
  %108 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %107, align 8
  %109 = icmp eq %"class.v8::internal::compiler::Node"* %108, null
  br i1 %109, label %110, label %159

110:                                              ; preds = %104
  store %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"** %78, align 8
  %111 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 3
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %112, -1
  store i64 %113, i64* %111, align 8
  br label %228

114:                                              ; preds = %102
  %115 = tail call zeroext i1 @_ZN2v88internal8compiler14NodeProperties6EqualsEPNS1_4NodeES4_(%"class.v8::internal::compiler::Node"* nonnull %77, %"class.v8::internal::compiler::Node"* %1) #7
  br i1 %115, label %118, label %116

116:                                              ; preds = %114
  %117 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  br label %159

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %77, i64 0, i32 1, i32 0
  %120 = load i64, i64* %119, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %145, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 1, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %145, label %126

126:                                              ; preds = %122
  %127 = bitcast %"class.v8::internal::compiler::Type"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #7
  %128 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %3, i64 0, i32 0
  store i64 %120, i64* %128, align 8
  %129 = bitcast %"class.v8::internal::compiler::Type"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %129) #7
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %4, i64 0, i32 0
  store i64 %124, i64* %130, align 8
  %131 = icmp eq i64 %120, %124
  br i1 %131, label %143, label %132

132:                                              ; preds = %126
  %133 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %3, i64 %124) #7
  br i1 %133, label %143, label %134

134:                                              ; preds = %132
  %135 = load i64, i64* %128, align 8
  %136 = icmp eq i64 %124, %135
  br i1 %136, label %141, label %137

137:                                              ; preds = %134
  %138 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %4, i64 %135) #7
  br i1 %138, label %139, label %144

139:                                              ; preds = %137
  %140 = load i64, i64* %130, align 8
  br label %141

141:                                              ; preds = %139, %134
  %142 = phi i64 [ %140, %139 ], [ %124, %134 ]
  store i64 %142, i64* %119, align 8
  br label %143

143:                                              ; preds = %141, %132, %126
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %129) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #7
  br label %145

144:                                              ; preds = %137
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %129) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #7
  br label %228

145:                                              ; preds = %143, %122, %118
  %146 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %146, i64 %66
  store %"class.v8::internal::compiler::Node"* %77, %"class.v8::internal::compiler::Node"** %147, align 8
  %148 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  %149 = add i64 %79, 1
  %150 = and i64 %149, %42
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %148, i64 %150
  %152 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %151, align 8
  %153 = icmp eq %"class.v8::internal::compiler::Node"* %152, null
  br i1 %153, label %154, label %228

154:                                              ; preds = %145
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %148, i64 %79
  store %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"** %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 3
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, -1
  store i64 %158, i64* %156, align 8
  br label %228

159:                                              ; preds = %116, %98, %104
  %160 = phi %"class.v8::internal::compiler::Node"** [ %117, %116 ], [ %76, %98 ], [ %76, %104 ]
  %161 = add i64 %79, 1
  %162 = and i64 %161, %42
  %163 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %160, i64 %162
  %164 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %163, align 8
  %165 = icmp eq %"class.v8::internal::compiler::Node"* %164, null
  br i1 %165, label %228, label %75

166:                                              ; preds = %63
  %167 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %65, i64 0, i32 3
  %168 = load i32, i32* %167, align 4
  %169 = lshr i32 %168, 24
  %170 = and i32 %169, 15
  %171 = icmp eq i32 %170, 15
  %172 = ptrtoint %"class.v8::internal::compiler::Node"* %65 to i64
  %173 = add i64 %172, 32
  br i1 %171, label %174, label %181

174:                                              ; preds = %166
  %175 = inttoptr i64 %173 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %176 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %175, align 8
  %177 = ptrtoint %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %176 to i64
  %178 = add i64 %177, 16
  %179 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %176, i64 0, i32 1
  %180 = load i32, i32* %179, align 8
  br label %181

181:                                              ; preds = %174, %166
  %182 = phi i32 [ %180, %174 ], [ %170, %166 ]
  %183 = phi i64 [ %178, %174 ], [ %173, %166 ]
  %184 = icmp sgt i32 %182, 0
  br i1 %184, label %185, label %189

185:                                              ; preds = %181
  %186 = inttoptr i64 %183 to %"class.v8::internal::compiler::Node"**
  %187 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %186, align 8
  %188 = icmp eq %"class.v8::internal::compiler::Node"* %187, null
  br i1 %188, label %220, label %189

189:                                              ; preds = %181, %185
  %190 = tail call zeroext i1 @_ZN2v88internal8compiler14NodeProperties6EqualsEPNS1_4NodeES4_(%"class.v8::internal::compiler::Node"* nonnull %65, %"class.v8::internal::compiler::Node"* %1) #7
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %15, align 8
  br label %220

193:                                              ; preds = %189
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %65, i64 0, i32 1, i32 0
  %195 = load i64, i64* %194, align 8
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %228, label %197

197:                                              ; preds = %193
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 1, i32 0
  %199 = load i64, i64* %198, align 8
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %228, label %201

201:                                              ; preds = %197
  %202 = bitcast %"class.v8::internal::compiler::Type"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #7
  %203 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %5, i64 0, i32 0
  store i64 %195, i64* %203, align 8
  %204 = bitcast %"class.v8::internal::compiler::Type"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %204) #7
  %205 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %6, i64 0, i32 0
  store i64 %199, i64* %205, align 8
  %206 = icmp eq i64 %195, %199
  br i1 %206, label %218, label %207

207:                                              ; preds = %201
  %208 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %5, i64 %199) #7
  br i1 %208, label %218, label %209

209:                                              ; preds = %207
  %210 = load i64, i64* %203, align 8
  %211 = icmp eq i64 %199, %210
  br i1 %211, label %216, label %212

212:                                              ; preds = %209
  %213 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %6, i64 %210) #7
  br i1 %213, label %214, label %219

214:                                              ; preds = %212
  %215 = load i64, i64* %205, align 8
  br label %216

216:                                              ; preds = %214, %209
  %217 = phi i64 [ %215, %214 ], [ %199, %209 ]
  store i64 %217, i64* %194, align 8
  br label %218

218:                                              ; preds = %216, %207, %201
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #7
  br label %228

219:                                              ; preds = %212
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %204) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #7
  br label %228

220:                                              ; preds = %191, %185
  %221 = phi %"class.v8::internal::compiler::Node"** [ %64, %185 ], [ %192, %191 ]
  %222 = phi i64 [ %66, %185 ], [ %67, %191 ]
  %223 = add i64 %66, 1
  %224 = and i64 %223, %42
  %225 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %221, i64 %224
  %226 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %225, align 8
  %227 = icmp eq %"class.v8::internal::compiler::Node"* %226, null
  br i1 %227, label %47, label %63

228:                                              ; preds = %159, %69, %2, %144, %154, %145, %110, %219, %218, %197, %193, %51, %62, %53, %32
  %229 = phi %"class.v8::internal::compiler::Node"* [ null, %32 ], [ null, %2 ], [ %65, %193 ], [ %65, %197 ], [ %65, %218 ], [ null, %219 ], [ null, %51 ], [ null, %62 ], [ null, %53 ], [ null, %144 ], [ %77, %145 ], [ %77, %154 ], [ null, %110 ], [ null, %69 ], [ null, %159 ]
  ret %"class.v8::internal::compiler::Node"* %229
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @_ZN2v88internal8compiler14NodeProperties8HashCodeEPNS1_4NodeE(%"class.v8::internal::compiler::Node"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler21ValueNumberingReducer4GrowEv(%"class.v8::internal::compiler::ValueNumberingReducer"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 1
  %3 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = shl i64 %5, 1
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 4
  %8 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %7, align 8
  %9 = shl i64 %5, 4
  %10 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %11
  %15 = icmp ugt i64 %9, %14
  br i1 %15, label %16, label %18, !prof !2

16:                                               ; preds = %1
  %17 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %8, i64 %9) #7
  br label %20

18:                                               ; preds = %1
  %19 = add i64 %11, %9
  store i64 %19, i64* %10, align 8
  br label %20

20:                                               ; preds = %16, %18
  %21 = phi i64 [ %17, %16 ], [ %11, %18 ]
  %22 = inttoptr i64 %21 to %"class.v8::internal::compiler::Node"**
  store %"class.v8::internal::compiler::Node"** %22, %"class.v8::internal::compiler::Node"*** %2, align 8
  %23 = inttoptr i64 %21 to i8*
  %24 = load i64, i64* %4, align 8
  %25 = shl i64 %24, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 %25, i1 false)
  %26 = getelementptr inbounds %"class.v8::internal::compiler::ValueNumberingReducer", %"class.v8::internal::compiler::ValueNumberingReducer"* %0, i64 0, i32 3
  store i64 0, i64* %26, align 8
  %27 = load i64, i64* %4, align 8
  %28 = add i64 %27, -1
  %29 = icmp eq i64 %5, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %83, %20
  ret void

31:                                               ; preds = %20, %83
  %32 = phi i64 [ %84, %83 ], [ 0, %20 ]
  %33 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %3, i64 %32
  %34 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %33, align 8
  %35 = icmp eq %"class.v8::internal::compiler::Node"* %34, null
  br i1 %35, label %83, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %34, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = lshr i32 %38, 24
  %40 = and i32 %39, 15
  %41 = icmp eq i32 %40, 15
  %42 = ptrtoint %"class.v8::internal::compiler::Node"* %34 to i64
  %43 = add i64 %42, 32
  br i1 %41, label %44, label %51

44:                                               ; preds = %36
  %45 = inttoptr i64 %43 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %46 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %45, align 8
  %47 = ptrtoint %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %46 to i64
  %48 = add i64 %47, 16
  %49 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %46, i64 0, i32 1
  %50 = load i32, i32* %49, align 8
  br label %51

51:                                               ; preds = %44, %36
  %52 = phi i32 [ %50, %44 ], [ %40, %36 ]
  %53 = phi i64 [ %48, %44 ], [ %43, %36 ]
  %54 = icmp sgt i32 %52, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = inttoptr i64 %53 to %"class.v8::internal::compiler::Node"**
  %57 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %56, align 8
  %58 = icmp eq %"class.v8::internal::compiler::Node"* %57, null
  br i1 %58, label %83, label %59

59:                                               ; preds = %51, %55
  %60 = tail call i64 @_ZN2v88internal8compiler14NodeProperties8HashCodeEPNS1_4NodeE(%"class.v8::internal::compiler::Node"* nonnull %34) #7
  %61 = and i64 %60, %28
  %62 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %2, align 8
  %63 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %62, i64 %61
  %64 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %63, align 8
  %65 = icmp eq %"class.v8::internal::compiler::Node"* %64, %34
  br i1 %65, label %83, label %66

66:                                               ; preds = %59
  %67 = icmp eq %"class.v8::internal::compiler::Node"* %64, null
  br i1 %67, label %79, label %68

68:                                               ; preds = %66, %75
  %69 = phi i64 [ %71, %75 ], [ %61, %66 ]
  %70 = add i64 %69, 1
  %71 = and i64 %70, %28
  %72 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %62, i64 %71
  %73 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %72, align 8
  %74 = icmp eq %"class.v8::internal::compiler::Node"* %73, %34
  br i1 %74, label %83, label %75

75:                                               ; preds = %68
  %76 = icmp eq %"class.v8::internal::compiler::Node"* %73, null
  br i1 %76, label %77, label %68

77:                                               ; preds = %75
  %78 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %62, i64 %71
  br label %79

79:                                               ; preds = %77, %66
  %80 = phi %"class.v8::internal::compiler::Node"** [ %63, %66 ], [ %78, %77 ]
  store %"class.v8::internal::compiler::Node"* %34, %"class.v8::internal::compiler::Node"** %80, align 8
  %81 = load i64, i64* %26, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %26, align 8
  br label %83

83:                                               ; preds = %68, %59, %79, %55, %31
  %84 = add nuw i64 %32, 1
  %85 = icmp eq i64 %84, %5
  br i1 %85, label %30, label %31
}

declare zeroext i1 @_ZN2v88internal8compiler14NodeProperties6EqualsEPNS1_4NodeES4_(%"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler21ValueNumberingReducer19ReplaceIfTypesMatchEPNS1_4NodeES4_(%"class.v8::internal::compiler::ValueNumberingReducer"* nocapture readnone, %"class.v8::internal::compiler::Node"* nocapture readonly, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.v8::internal::compiler::Type", align 8
  %5 = alloca %"class.v8::internal::compiler::Type", align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %2, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %32, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %32, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.v8::internal::compiler::Type"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #7
  %15 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %4, i64 0, i32 0
  store i64 %7, i64* %15, align 8
  %16 = bitcast %"class.v8::internal::compiler::Type"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.v8::internal::compiler::Type", %"class.v8::internal::compiler::Type"* %5, i64 0, i32 0
  store i64 %11, i64* %17, align 8
  %18 = icmp eq i64 %7, %11
  br i1 %18, label %30, label %19

19:                                               ; preds = %13
  %20 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %4, i64 %11) #7
  br i1 %20, label %30, label %21

21:                                               ; preds = %19
  %22 = load i64, i64* %15, align 8
  %23 = icmp eq i64 %11, %22
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = call zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"* nonnull %5, i64 %22) #7
  br i1 %25, label %26, label %31

26:                                               ; preds = %24
  %27 = load i64, i64* %17, align 8
  br label %28

28:                                               ; preds = %26, %21
  %29 = phi i64 [ %27, %26 ], [ %11, %21 ]
  store i64 %29, i64* %6, align 8
  br label %30

30:                                               ; preds = %28, %19, %13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #7
  br label %32

31:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #7
  br label %32

32:                                               ; preds = %9, %3, %30, %31
  %33 = phi %"class.v8::internal::compiler::Node"* [ null, %31 ], [ %2, %30 ], [ %2, %9 ], [ %2, %3 ]
  ret %"class.v8::internal::compiler::Node"* %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK2v88internal8compiler21ValueNumberingReducer12reducer_nameEv(%"class.v8::internal::compiler::ValueNumberingReducer"*) unnamed_addr #2 comdat align 2 {
  ret i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0)
}

declare void @_ZN2v88internal8compiler7Reducer8FinalizeEv(%"class.v8::internal::compiler::Reducer"*) unnamed_addr #5

declare zeroext i1 @_ZNK2v88internal8compiler4Type6SlowIsES2_(%"class.v8::internal::compiler::Type"*, i64) local_unnamed_addr #5

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
