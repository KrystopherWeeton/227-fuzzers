; ModuleID = '../../net/third_party/quiche/src/quic/core/congestion_control/rtt_stats.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/congestion_control/rtt_stats.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.quic::RttStats" = type <{ %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta", %"struct.quic::RttStats::StandardDeviationCaculator", i8, [7 x i8], %"class.quic::QuicTime::Delta", %"class.quic::QuicTime", i8, [7 x i8] }>
%"struct.quic::RttStats::StandardDeviationCaculator" = type { i8, double }
%"class.quic::QuicTime::Delta" = type { i64 }
%"class.quic::QuicTime" = type { i64 }

@_ZN4quic8RttStatsC1Ev = hidden unnamed_addr alias void (%"class.quic::RttStats"*), void (%"class.quic::RttStats"*)* @_ZN4quic8RttStatsC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic8RttStatsC2Ev(%"class.quic::RttStats"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 1
  store double 0.000000e+00, double* %2, align 8
  %3 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 6
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 8, i32 0
  %5 = bitcast %"class.quic::RttStats"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 41, i1 false)
  %6 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> <i64 100000, i64 0>, <2 x i64>* %6, align 8
  %7 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 10
  store i8 0, i8* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8RttStats21ExpireSmoothedMetricsEv(%"class.quic::RttStats"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = alloca i64, align 8
  %3 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4)
  %5 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 2, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sub nsw i64 %6, %8
  %10 = sub nsw i64 0, %9
  %11 = icmp slt i64 %9, 0
  %12 = select i1 %11, i64 %10, i64 %9
  store i64 %12, i64* %2, align 8
  %13 = getelementptr inbounds %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta"* %3, i64 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp slt i64 %14, %12
  %16 = bitcast i64* %2 to %"class.quic::QuicTime::Delta"*
  %17 = select i1 %15, %"class.quic::QuicTime::Delta"* %16, %"class.quic::QuicTime::Delta"* %3
  %18 = getelementptr inbounds %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta"* %17, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4)
  %20 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 2
  %21 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta"* %20, i64 0, i32 0
  %23 = icmp slt i64 %6, %8
  %24 = select i1 %23, %"class.quic::QuicTime::Delta"* %21, %"class.quic::QuicTime::Delta"* %20
  %25 = getelementptr inbounds %"class.quic::QuicTime::Delta", %"class.quic::QuicTime::Delta"* %24, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %22, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8RttStats9UpdateRttENS_8QuicTime5DeltaES2_S1_(%"class.quic::RttStats"* nocapture, i64, i64, i64) local_unnamed_addr #1 align 2 {
  %5 = icmp eq i64 %1, 9223372036854775807
  %6 = icmp slt i64 %1, 1
  %7 = or i1 %5, %6
  br i1 %7, label %74, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 9, i32 0
  store i64 %3, i64* %9, align 8
  %10 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  %13 = icmp sgt i64 %11, %1
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %8
  store i64 %1, i64* %10, align 8
  br label %16

16:                                               ; preds = %8, %15
  %17 = phi i64 [ %1, %15 ], [ %11, %8 ]
  %18 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 2, i32 0
  %19 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 3, i32 0
  %20 = load i64, i64* %18, align 8
  store i64 %20, i64* %19, align 8
  %21 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 10
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = select i1 %23, i64 %2, i64 0
  %25 = icmp slt i64 %24, %1
  br i1 %25, label %26, label %31

26:                                               ; preds = %16
  %27 = sub nsw i64 %1, %17
  %28 = icmp slt i64 %27, %24
  %29 = select i1 %28, i64 0, i64 %24
  %30 = sub nsw i64 %1, %29
  br label %31

31:                                               ; preds = %26, %16
  %32 = phi i64 [ %1, %16 ], [ %30, %26 ]
  %33 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 6
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  %37 = icmp eq i64 %20, 0
  br i1 %36, label %50, label %38

38:                                               ; preds = %31
  br i1 %37, label %51, label %39

39:                                               ; preds = %38
  %40 = sitofp i64 %32 to double
  %41 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 0
  store i8 1, i8* %41, align 8
  %42 = sitofp i64 %20 to double
  %43 = fsub double %40, %42
  %44 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 1
  %45 = load double, double* %44, align 8
  %46 = fmul double %45, 7.500000e-01
  %47 = fmul double %43, %43
  %48 = fmul double %47, 2.500000e-01
  %49 = fadd double %48, %46
  store double %49, double* %44, align 8
  br label %54

50:                                               ; preds = %31
  br i1 %37, label %51, label %54

51:                                               ; preds = %38, %50
  store i64 %32, i64* %18, align 8
  %52 = sdiv i64 %32, 2
  %53 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4, i32 0
  store i64 %52, i64* %53, align 8
  br label %74

54:                                               ; preds = %39, %50
  %55 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = sitofp i64 %56 to float
  %58 = fmul float %57, 7.500000e-01
  %59 = sub nsw i64 %20, %32
  %60 = sub nsw i64 0, %59
  %61 = icmp slt i64 %59, 0
  %62 = select i1 %61, i64 %60, i64 %59
  %63 = sitofp i64 %62 to float
  %64 = fmul float %63, 2.500000e-01
  %65 = fadd float %58, %64
  %66 = fptosi float %65 to i64
  store i64 %66, i64* %55, align 8
  %67 = sitofp i64 %20 to double
  %68 = fmul double %67, 8.750000e-01
  %69 = tail call i64 @llround(double %68) #6
  %70 = sitofp i64 %32 to double
  %71 = fmul double %70, 1.250000e-01
  %72 = tail call i64 @llround(double %71) #6
  %73 = add nsw i64 %72, %69
  store i64 %73, i64* %18, align 8
  br label %74

74:                                               ; preds = %51, %54, %4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN4quic8RttStats26StandardDeviationCaculator14OnNewRttSampleENS_8QuicTime5DeltaES3_(%"struct.quic::RttStats::StandardDeviationCaculator"* nocapture, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = sitofp i64 %1 to double
  %7 = getelementptr inbounds %"struct.quic::RttStats::StandardDeviationCaculator", %"struct.quic::RttStats::StandardDeviationCaculator"* %0, i64 0, i32 0
  store i8 1, i8* %7, align 8
  %8 = sitofp i64 %2 to double
  %9 = fsub double %6, %8
  %10 = getelementptr inbounds %"struct.quic::RttStats::StandardDeviationCaculator", %"struct.quic::RttStats::StandardDeviationCaculator"* %0, i64 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 7.500000e-01
  %13 = fmul double %9, %9
  %14 = fmul double %13, 2.500000e-01
  %15 = fadd double %14, %12
  store double %15, double* %10, align 8
  br label %16

16:                                               ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4quic8RttStats21OnConnectionMigrationEv(%"class.quic::RttStats"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4, i32 0
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 8, i32 0
  %4 = bitcast %"class.quic::RttStats"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false)
  store i64 100000, i64* %3, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZNK4quic8RttStats26GetStandardOrMeanDeviationEv(%"class.quic::RttStats"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4, i32 0
  %7 = load i64, i64* %6, align 8
  br label %13

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 1
  %10 = load double, double* %9, align 8
  %11 = tail call double @sqrt(double %10) #6
  %12 = fptosi double %11 to i64
  br label %13

13:                                               ; preds = %8, %5
  %14 = phi i64 [ %12, %8 ], [ %7, %5 ]
  ret i64 %14
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZNK4quic8RttStats26StandardDeviationCaculator26CalculateStandardDeviationEv(%"struct.quic::RttStats::StandardDeviationCaculator"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.quic::RttStats::StandardDeviationCaculator", %"struct.quic::RttStats::StandardDeviationCaculator"* %0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  %4 = tail call double @sqrt(double %3) #6
  %5 = fptosi double %4 to i64
  ret i64 %5
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4quic8RttStats9CloneFromERKS0_(%"class.quic::RttStats"* nocapture, %"class.quic::RttStats"* nocapture readonly dereferenceable(88)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 0, i32 0
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 1, i32 0
  %7 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 1, i32 0
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  %9 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 2, i32 0
  %10 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 2, i32 0
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 3, i32 0
  %13 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 3, i32 0
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  %15 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 4, i32 0
  %16 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 4, i32 0
  %17 = load i64, i64* %15, align 8
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 5, i32 0
  %19 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 5, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false)
  %20 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 6
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 6
  store i8 %21, i8* %22, align 8
  %23 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 8, i32 0
  %24 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 8, i32 0
  %25 = load i64, i64* %23, align 8
  store i64 %25, i64* %24, align 8
  %26 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 9, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 9, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %1, i64 0, i32 10
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = getelementptr inbounds %"class.quic::RttStats", %"class.quic::RttStats"* %0, i64 0, i32 10
  store i8 %30, i8* %31, align 8
  ret void
}

; Function Attrs: nounwind
declare i64 @llround(double) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
