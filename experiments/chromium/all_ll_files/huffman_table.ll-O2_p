; ModuleID = '../../third_party/libjxl/src/lib/jxl/huffman_table.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/huffman_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17BuildHuffmanTableEPNS_11HuffmanCodeEiPKhmPt(%"struct.jxl::HuffmanCode"*, i32, i8* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #0 {
  %6 = alloca [16 x i16], align 16
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 1
  %10 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 2
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 3
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 4
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 5
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 6
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 7
  %16 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 8
  %17 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 9
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 10
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 11
  %20 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 12
  %21 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 13
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 14
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 15
  %24 = icmp ugt i64 %3, 32768
  %25 = bitcast [16 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 32, i1 false)
  br i1 %24, label %378, label %26

26:                                               ; preds = %5
  %27 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #4
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #4
  %30 = icmp eq i64 %3, 0
  br i1 %30, label %47, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %33 = shl i64 %3, 1
  %34 = tail call i8* @_Znwm(i64 %33) #5
  %35 = bitcast i8* %34 to i16*
  %36 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %34, i8** %36, align 8
  %37 = getelementptr inbounds i16, i16* %35, i64 %3
  store i16* %37, i16** %32, align 8
  %38 = bitcast i16** %29 to i64*
  %39 = ptrtoint i8* %34 to i64
  %40 = add nsw i64 %3, -1
  %41 = getelementptr i16, i16* %35, i64 %40
  %42 = ptrtoint i16* %41 to i64
  %43 = sub i64 2, %39
  %44 = add i64 %43, %42
  %45 = and i64 %44, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %34, i8 0, i64 %45, i1 false) #4
  %46 = ptrtoint i16* %37 to i64
  store i64 %46, i64* %38, align 8
  br label %47

47:                                               ; preds = %26, %31
  %48 = phi i8* [ null, %26 ], [ %34, %31 ]
  %49 = phi i16* [ null, %26 ], [ %35, %31 ]
  store i16 0, i16* %9, align 2
  %50 = getelementptr inbounds i16, i16* %4, i64 1
  %51 = load i16, i16* %50, align 2
  store i16 %51, i16* %10, align 4
  %52 = getelementptr inbounds i16, i16* %4, i64 2
  %53 = load i16, i16* %52, align 2
  %54 = icmp eq i16 %53, 0
  %55 = add i16 %53, %51
  %56 = select i1 %54, i64 1, i64 2
  store i16 %55, i16* %11, align 2
  %57 = getelementptr inbounds i16, i16* %4, i64 3
  %58 = load i16, i16* %57, align 2
  %59 = icmp eq i16 %58, 0
  %60 = add i16 %58, %55
  %61 = select i1 %59, i64 %56, i64 3
  store i16 %60, i16* %12, align 8
  %62 = getelementptr inbounds i16, i16* %4, i64 4
  %63 = load i16, i16* %62, align 2
  %64 = icmp eq i16 %63, 0
  %65 = add i16 %63, %60
  %66 = select i1 %64, i64 %61, i64 4
  store i16 %65, i16* %13, align 2
  %67 = getelementptr inbounds i16, i16* %4, i64 5
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 0
  %70 = add i16 %68, %65
  %71 = select i1 %69, i64 %66, i64 5
  store i16 %70, i16* %14, align 4
  %72 = getelementptr inbounds i16, i16* %4, i64 6
  %73 = load i16, i16* %72, align 2
  %74 = icmp eq i16 %73, 0
  %75 = add i16 %73, %70
  %76 = select i1 %74, i64 %71, i64 6
  store i16 %75, i16* %15, align 2
  %77 = getelementptr inbounds i16, i16* %4, i64 7
  %78 = load i16, i16* %77, align 2
  %79 = icmp eq i16 %78, 0
  %80 = add i16 %78, %75
  %81 = select i1 %79, i64 %76, i64 7
  store i16 %80, i16* %16, align 16
  %82 = getelementptr inbounds i16, i16* %4, i64 8
  %83 = load i16, i16* %82, align 2
  %84 = icmp eq i16 %83, 0
  %85 = add i16 %83, %80
  %86 = select i1 %84, i64 %81, i64 8
  store i16 %85, i16* %17, align 2
  %87 = getelementptr inbounds i16, i16* %4, i64 9
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 0
  %90 = add i16 %88, %85
  %91 = select i1 %89, i64 %86, i64 9
  store i16 %90, i16* %18, align 4
  %92 = getelementptr inbounds i16, i16* %4, i64 10
  %93 = load i16, i16* %92, align 2
  %94 = icmp eq i16 %93, 0
  %95 = add i16 %93, %90
  %96 = select i1 %94, i64 %91, i64 10
  store i16 %95, i16* %19, align 2
  %97 = getelementptr inbounds i16, i16* %4, i64 11
  %98 = load i16, i16* %97, align 2
  %99 = icmp eq i16 %98, 0
  %100 = add i16 %98, %95
  %101 = select i1 %99, i64 %96, i64 11
  store i16 %100, i16* %20, align 8
  %102 = getelementptr inbounds i16, i16* %4, i64 12
  %103 = load i16, i16* %102, align 2
  %104 = icmp eq i16 %103, 0
  %105 = add i16 %103, %100
  %106 = select i1 %104, i64 %101, i64 12
  store i16 %105, i16* %21, align 2
  %107 = getelementptr inbounds i16, i16* %4, i64 13
  %108 = load i16, i16* %107, align 2
  %109 = icmp eq i16 %108, 0
  %110 = add i16 %108, %105
  %111 = select i1 %109, i64 %106, i64 13
  store i16 %110, i16* %22, align 4
  %112 = getelementptr inbounds i16, i16* %4, i64 14
  %113 = load i16, i16* %112, align 2
  %114 = icmp eq i16 %113, 0
  %115 = add i16 %113, %110
  %116 = select i1 %114, i64 %111, i64 14
  store i16 %115, i16* %23, align 2
  %117 = getelementptr inbounds i16, i16* %4, i64 15
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 0
  %120 = select i1 %119, i64 %116, i64 15
  br i1 %30, label %162, label %121

121:                                              ; preds = %47
  %122 = and i64 %3, 1
  %123 = icmp eq i64 %3, 1
  br i1 %123, label %145, label %124

124:                                              ; preds = %121
  %125 = sub i64 %3, %122
  br label %126

126:                                              ; preds = %388, %124
  %127 = phi i64 [ 0, %124 ], [ %389, %388 ]
  %128 = phi i64 [ %125, %124 ], [ %390, %388 ]
  %129 = getelementptr inbounds i8, i8* %2, i64 %127
  %130 = load i8, i8* %129, align 1
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %140, label %132

132:                                              ; preds = %126
  %133 = trunc i64 %127 to i16
  %134 = zext i8 %130 to i64
  %135 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = add i16 %136, 1
  store i16 %137, i16* %135, align 2
  %138 = zext i16 %136 to i64
  %139 = getelementptr inbounds i16, i16* %49, i64 %138
  store i16 %133, i16* %139, align 2
  br label %140

140:                                              ; preds = %126, %132
  %141 = or i64 %127, 1
  %142 = getelementptr inbounds i8, i8* %2, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %388, label %380

145:                                              ; preds = %388, %121
  %146 = phi i64 [ 0, %121 ], [ %389, %388 ]
  %147 = icmp eq i64 %122, 0
  br i1 %147, label %160, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds i8, i8* %2, i64 %146
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %148
  %153 = trunc i64 %146 to i16
  %154 = zext i8 %150 to i64
  %155 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = add i16 %156, 1
  store i16 %157, i16* %155, align 2
  %158 = zext i16 %156 to i64
  %159 = getelementptr inbounds i16, i16* %49, i64 %158
  store i16 %153, i16* %159, align 2
  br label %160

160:                                              ; preds = %152, %148, %145
  %161 = load i16, i16* %23, align 2
  br label %162

162:                                              ; preds = %160, %47
  %163 = phi i16 [ %161, %160 ], [ %115, %47 ]
  %164 = sext i32 %1 to i64
  %165 = shl i32 1, %1
  %166 = icmp eq i16 %163, 1
  br i1 %166, label %167, label %179

167:                                              ; preds = %162
  %168 = load i16, i16* %49, align 2
  %169 = icmp eq i32 %1, 31
  br i1 %169, label %369, label %170

170:                                              ; preds = %167
  %171 = sext i32 %165 to i64
  br label %172

172:                                              ; preds = %170, %172
  %173 = phi i64 [ 0, %170 ], [ %177, %172 ]
  %174 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %173, i32 0
  store i8 0, i8* %174, align 2
  %175 = getelementptr inbounds i8, i8* %174, i64 1
  store i8 -86, i8* %175, align 1
  %176 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %173, i32 1
  store i16 %168, i16* %176, align 2
  %177 = add nuw nsw i64 %173, 1
  %178 = icmp slt i64 %177, %171
  br i1 %178, label %172, label %369

179:                                              ; preds = %162
  %180 = icmp ult i64 %120, %164
  %181 = trunc i64 %120 to i32
  %182 = shl i32 1, %181
  %183 = select i1 %180, i64 %120, i64 %164
  %184 = select i1 %180, i32 %182, i32 %165
  br label %185

185:                                              ; preds = %229, %179
  %186 = phi i8 [ 1, %179 ], [ %233, %229 ]
  %187 = phi i64 [ 0, %179 ], [ %230, %229 ]
  %188 = phi i32 [ 0, %179 ], [ %231, %229 ]
  %189 = phi i32 [ 2, %179 ], [ %232, %229 ]
  %190 = zext i8 %186 to i64
  %191 = getelementptr inbounds i16, i16* %4, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = icmp eq i16 %192, 0
  br i1 %193, label %229, label %194

194:                                              ; preds = %185
  %195 = zext i8 %186 to i32
  %196 = add nsw i32 %195, -1
  %197 = shl i32 1, %196
  br label %198

198:                                              ; preds = %194, %221
  %199 = phi i32 [ %188, %194 ], [ %225, %221 ]
  %200 = phi i64 [ %187, %194 ], [ %222, %221 ]
  %201 = getelementptr inbounds i16, i16* %49, i64 %200
  %202 = load i16, i16* %201, align 2
  %203 = sext i32 %199 to i64
  %204 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %203
  %205 = zext i16 %202 to i32
  %206 = shl nuw i32 %205, 16
  %207 = or i32 %206, %195
  %208 = or i32 %207, 43520
  br label %209

209:                                              ; preds = %209, %198
  %210 = phi i32 [ %184, %198 ], [ %211, %209 ]
  %211 = sub nsw i32 %210, %189
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %204, i64 %212
  %214 = bitcast %"struct.jxl::HuffmanCode"* %213 to i32*
  store i32 %208, i32* %214, align 2
  %215 = icmp sgt i32 %211, 0
  br i1 %215, label %209, label %216

216:                                              ; preds = %209, %216
  %217 = phi i32 [ %220, %216 ], [ %197, %209 ]
  %218 = and i32 %217, %199
  %219 = icmp eq i32 %218, 0
  %220 = ashr i32 %217, 1
  br i1 %219, label %221, label %216

221:                                              ; preds = %216
  %222 = add i64 %200, 1
  %223 = add nsw i32 %217, -1
  %224 = and i32 %223, %199
  %225 = add nsw i32 %224, %217
  %226 = load i16, i16* %191, align 2
  %227 = add i16 %226, -1
  store i16 %227, i16* %191, align 2
  %228 = icmp eq i16 %227, 0
  br i1 %228, label %229, label %198

229:                                              ; preds = %221, %185
  %230 = phi i64 [ %187, %185 ], [ %222, %221 ]
  %231 = phi i32 [ %188, %185 ], [ %225, %221 ]
  %232 = shl i32 %189, 1
  %233 = add i8 %186, 1
  %234 = zext i8 %233 to i64
  %235 = icmp ult i64 %183, %234
  br i1 %235, label %236, label %185

236:                                              ; preds = %229
  %237 = icmp eq i32 %165, %184
  br i1 %237, label %247, label %238

238:                                              ; preds = %236
  %239 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 0, i32 0
  br label %240

240:                                              ; preds = %238, %240
  %241 = phi i32 [ %184, %238 ], [ %245, %240 ]
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %242, i32 0
  %244 = shl nsw i64 %242, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %243, i8* align 2 %239, i64 %244, i1 false)
  %245 = shl i32 %241, 1
  %246 = icmp eq i32 %165, %245
  br i1 %246, label %247, label %240

247:                                              ; preds = %240, %236
  %248 = add nsw i32 %165, -1
  %249 = add nsw i32 %1, 1
  %250 = sext i32 %249 to i64
  %251 = icmp ult i64 %120, %250
  br i1 %251, label %369, label %252

252:                                              ; preds = %247
  %253 = ptrtoint %"struct.jxl::HuffmanCode"* %0 to i64
  br label %254

254:                                              ; preds = %252, %356
  %255 = phi i32 [ %165, %252 ], [ %362, %356 ]
  %256 = phi i32 [ %165, %252 ], [ %361, %356 ]
  %257 = phi i32 [ -1, %252 ], [ %360, %356 ]
  %258 = phi i32 [ 2, %252 ], [ %364, %356 ]
  %259 = phi i32 [ %231, %252 ], [ %359, %356 ]
  %260 = phi i64 [ %230, %252 ], [ %358, %356 ]
  %261 = phi i64 [ %250, %252 ], [ %363, %356 ]
  %262 = phi %"struct.jxl::HuffmanCode"* [ %0, %252 ], [ %357, %356 ]
  %263 = getelementptr inbounds i16, i16* %4, i64 %261
  %264 = load i16, i16* %263, align 2
  %265 = icmp eq i16 %264, 0
  br i1 %265, label %356, label %266

266:                                              ; preds = %254
  %267 = icmp ult i64 %261, 15
  %268 = trunc i64 %261 to i32
  %269 = sub i32 %268, %1
  %270 = shl i32 1, %269
  %271 = zext i32 %270 to i64
  %272 = and i32 %269, 255
  %273 = add nsw i32 %268, -1
  %274 = shl i32 1, %273
  br label %275

275:                                              ; preds = %266, %348
  %276 = phi i16 [ %264, %266 ], [ %354, %348 ]
  %277 = phi i32 [ %255, %266 ], [ %326, %348 ]
  %278 = phi i32 [ %256, %266 ], [ %325, %348 ]
  %279 = phi i32 [ %257, %266 ], [ %324, %348 ]
  %280 = phi i32 [ %259, %266 ], [ %352, %348 ]
  %281 = phi i64 [ %260, %266 ], [ %349, %348 ]
  %282 = phi %"struct.jxl::HuffmanCode"* [ %262, %266 ], [ %323, %348 ]
  %283 = and i32 %280, %248
  %284 = icmp eq i32 %283, %279
  br i1 %284, label %322, label %285

285:                                              ; preds = %275
  %286 = sext i32 %278 to i64
  %287 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %282, i64 %286
  br i1 %267, label %288, label %309

288:                                              ; preds = %285
  %289 = zext i16 %276 to i64
  %290 = icmp ugt i64 %271, %289
  br i1 %290, label %291, label %304

291:                                              ; preds = %288, %297
  %292 = phi i64 [ %302, %297 ], [ %289, %288 ]
  %293 = phi i64 [ %295, %297 ], [ %261, %288 ]
  %294 = phi i64 [ %299, %297 ], [ %271, %288 ]
  %295 = add i64 %293, 1
  %296 = icmp eq i64 %295, 15
  br i1 %296, label %304, label %297

297:                                              ; preds = %291
  %298 = sub i64 %294, %292
  %299 = shl i64 %298, 1
  %300 = getelementptr inbounds i16, i16* %4, i64 %295
  %301 = load i16, i16* %300, align 2
  %302 = zext i16 %301 to i64
  %303 = icmp ugt i64 %299, %302
  br i1 %303, label %291, label %304

304:                                              ; preds = %297, %291, %288
  %305 = phi i64 [ %261, %288 ], [ %295, %297 ], [ 15, %291 ]
  %306 = trunc i64 %305 to i32
  %307 = sub i32 %306, %1
  %308 = shl i32 1, %307
  br label %309

309:                                              ; preds = %304, %285
  %310 = phi i32 [ %308, %304 ], [ %270, %285 ]
  %311 = phi i64 [ %305, %304 ], [ %261, %285 ]
  %312 = add nsw i32 %310, %277
  %313 = trunc i64 %311 to i8
  %314 = sext i32 %283 to i64
  %315 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %314, i32 0
  store i8 %313, i8* %315, align 2
  %316 = ptrtoint %"struct.jxl::HuffmanCode"* %287 to i64
  %317 = sub i64 %316, %253
  %318 = lshr exact i64 %317, 2
  %319 = sub nsw i64 %318, %314
  %320 = trunc i64 %319 to i16
  %321 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %0, i64 %314, i32 1
  store i16 %320, i16* %321, align 2
  br label %322

322:                                              ; preds = %275, %309
  %323 = phi %"struct.jxl::HuffmanCode"* [ %287, %309 ], [ %282, %275 ]
  %324 = phi i32 [ %283, %309 ], [ %279, %275 ]
  %325 = phi i32 [ %310, %309 ], [ %278, %275 ]
  %326 = phi i32 [ %312, %309 ], [ %277, %275 ]
  %327 = getelementptr inbounds i16, i16* %49, i64 %281
  %328 = load i16, i16* %327, align 2
  %329 = ashr i32 %280, %1
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %323, i64 %330
  %332 = zext i16 %328 to i32
  %333 = shl nuw i32 %332, 16
  %334 = or i32 %272, %333
  %335 = or i32 %334, 43520
  br label %336

336:                                              ; preds = %336, %322
  %337 = phi i32 [ %325, %322 ], [ %338, %336 ]
  %338 = sub nsw i32 %337, %258
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %331, i64 %339
  %341 = bitcast %"struct.jxl::HuffmanCode"* %340 to i32*
  store i32 %335, i32* %341, align 2
  %342 = icmp sgt i32 %338, 0
  br i1 %342, label %336, label %343

343:                                              ; preds = %336, %343
  %344 = phi i32 [ %347, %343 ], [ %274, %336 ]
  %345 = and i32 %344, %280
  %346 = icmp eq i32 %345, 0
  %347 = ashr i32 %344, 1
  br i1 %346, label %348, label %343

348:                                              ; preds = %343
  %349 = add i64 %281, 1
  %350 = add nsw i32 %344, -1
  %351 = and i32 %350, %280
  %352 = add nsw i32 %351, %344
  %353 = load i16, i16* %263, align 2
  %354 = add i16 %353, -1
  store i16 %354, i16* %263, align 2
  %355 = icmp eq i16 %354, 0
  br i1 %355, label %356, label %275

356:                                              ; preds = %348, %254
  %357 = phi %"struct.jxl::HuffmanCode"* [ %262, %254 ], [ %323, %348 ]
  %358 = phi i64 [ %260, %254 ], [ %349, %348 ]
  %359 = phi i32 [ %259, %254 ], [ %352, %348 ]
  %360 = phi i32 [ %257, %254 ], [ %324, %348 ]
  %361 = phi i32 [ %256, %254 ], [ %325, %348 ]
  %362 = phi i32 [ %255, %254 ], [ %326, %348 ]
  %363 = add i64 %261, 1
  %364 = shl i32 %258, 1
  %365 = icmp ugt i64 %363, %120
  br i1 %365, label %366, label %254

366:                                              ; preds = %356
  %367 = load i16*, i16** %28, align 8
  %368 = bitcast i16* %367 to i8*
  br label %369

369:                                              ; preds = %172, %366, %167, %247
  %370 = phi i8* [ %48, %167 ], [ %48, %247 ], [ %368, %366 ], [ %48, %172 ]
  %371 = phi i16* [ %49, %167 ], [ %49, %247 ], [ %367, %366 ], [ %49, %172 ]
  %372 = phi i32 [ -2147483648, %167 ], [ %165, %247 ], [ %362, %366 ], [ %165, %172 ]
  %373 = icmp eq i16* %371, null
  br i1 %373, label %377, label %374

374:                                              ; preds = %369
  %375 = ptrtoint i16* %371 to i64
  %376 = bitcast i16** %29 to i64*
  store i64 %375, i64* %376, align 8
  tail call void @_ZdlPv(i8* %370) #5
  br label %377

377:                                              ; preds = %369, %374
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #4
  br label %378

378:                                              ; preds = %5, %377
  %379 = phi i32 [ %372, %377 ], [ 0, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret i32 %379

380:                                              ; preds = %140
  %381 = trunc i64 %141 to i16
  %382 = zext i8 %143 to i64
  %383 = getelementptr inbounds [16 x i16], [16 x i16]* %6, i64 0, i64 %382
  %384 = load i16, i16* %383, align 2
  %385 = add i16 %384, 1
  store i16 %385, i16* %383, align 2
  %386 = zext i16 %384 to i64
  %387 = getelementptr inbounds i16, i16* %49, i64 %386
  store i16 %381, i16* %387, align 2
  br label %388

388:                                              ; preds = %380, %140
  %389 = add nuw i64 %127, 2
  %390 = add i64 %128, -2
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %145, label %126
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
