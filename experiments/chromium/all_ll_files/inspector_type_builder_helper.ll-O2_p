; ModuleID = '../../third_party/blink/renderer/modules/accessibility/inspector_type_builder_helper.cc'
source_filename = "../../third_party/blink/renderer/modules/accessibility/inspector_type_builder_helper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr.163 }
%class.scoped_refptr.163 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::protocol::Accessibility::AXProperty" = type { %"class.crdtp::ProtocolObject", %"class.WTF::String", %"class.std::__1::unique_ptr.1" }
%"class.crdtp::ProtocolObject" = type { %"class.crdtp::Serializable" }
%"class.crdtp::Serializable" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::protocol::Accessibility::AXValue"* }
%"class.blink::protocol::Accessibility::AXValue" = type { %"class.crdtp::ProtocolObject.4", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe", %"class.crdtp::detail::PtrMaybe.11", %"class.crdtp::detail::PtrMaybe.30" }
%"class.crdtp::ProtocolObject.4" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe" = type { %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.blink::protocol::Value"* }
%"class.blink::protocol::Value" = type <{ %"class.crdtp::Serializable", i32, [4 x i8] }>
%"class.crdtp::detail::PtrMaybe.11" = type { %"class.std::__1::unique_ptr.12" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.blink::protocol::Accessibility::AXRelatedNode"* }
%"class.blink::protocol::Accessibility::AXRelatedNode" = type { %"class.crdtp::ProtocolObject.18", i32, %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.18" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::ValueMaybe" = type { i8, %"class.WTF::String" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::unique_ptr.15"* }
%"class.crdtp::detail::PtrMaybe.30" = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.std::__1::vector.34"* }
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.825" }
%"class.std::__1::__vector_base.825" = type { %"class.std::__1::unique_ptr.807"*, %"class.std::__1::unique_ptr.807"*, %"class.std::__1::__compressed_pair.826" }
%"class.std::__1::unique_ptr.807" = type { %"class.std::__1::__compressed_pair.808" }
%"class.std::__1::__compressed_pair.808" = type { %"struct.std::__1::__compressed_pair_elem.809" }
%"struct.std::__1::__compressed_pair_elem.809" = type { %"class.blink::protocol::Accessibility::AXValueSource"* }
%"class.blink::protocol::Accessibility::AXValueSource" = type { %"class.crdtp::ProtocolObject.810", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.813", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.813", %"class.crdtp::detail::ValueMaybe.814", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.813", %"class.crdtp::detail::ValueMaybe.814", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.810" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.813" = type { %"class.std::__1::unique_ptr.1" }
%"class.crdtp::detail::ValueMaybe.814" = type { i8, i8 }
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.std::__1::unique_ptr.807"* }
%"class.blink::IgnoredReason" = type { i32, %"class.blink::Member" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::AXObject"* }
%"class.blink::AXObject" = type { i32 (...)**, i32, %"class.blink::Member.46", %"class.blink::HeapVector", i8, i32, %"class.blink::LayoutRect", i32, i32, i8, %"class.blink::Member.46", i32, i32, %"class.blink::FloatRect", %"class.blink::Member.50" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.46"*, i32, i32 }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::AXObject"* }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.50" = type { %"class.blink::MemberBase.51" }
%"class.blink::MemberBase.51" = type { %"class.blink::AXObjectCacheImpl"* }
%"class.blink::AXObjectCacheImpl" = type { %"class.blink::AXObjectCacheBase", %"class.blink::mojom::blink::PermissionObserver", %"class.blink::Member.54", %"class.ui::AXMode", [4 x i8], %"class.blink::HeapHashMap", %"class.blink::HeapHashMap.59", %"class.WTF::HashMap.66", %"class.blink::HeapHashMap.70", %"class.WTF::HashMap.77", i32, [4 x i8], %"class.WTF::HashSet", i32, %"class.blink::WeakMember", %"class.std::__1::unique_ptr.85", %"class.blink::HeapVector.91", i32, %"class.blink::HeapMojoRemote", %"class.blink::HeapMojoReceiver", %"class.blink::HeapHashSet", %"class.blink::HeapVector.109", %"class.blink::HeapHashSet.117", i32, i8, [3 x i8], %"class.WTF::HashMap.125", %"class.WTF::HashSet", %"class.WTF::HashSet", i32, i32, %"class.WTF::HashCountedSet", i8, [7 x i8], %"class.WTF::HashSet" }
%"class.blink::AXObjectCacheBase" = type { %"class.blink::AXObjectCache" }
%"class.blink::AXObjectCache" = type { i32 (...)** }
%"class.blink::mojom::blink::PermissionObserver" = type { i32 (...)** }
%"class.blink::Member.54" = type { %"class.blink::MemberBase.55" }
%"class.blink::MemberBase.55" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.248", %"class.WTF::Vector.248", i8, i32, %"class.blink::Member.259", %"class.blink::Member.261", %"class.blink::Member.263", %"class.blink::Member.265", %"class.blink::Member.267", %"class.blink::Member.269", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.277", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.283", %"class.blink::Member.285", %"class.blink::Member.204", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.288", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.180", %"class.blink::Member.161", %"class.blink::Member.499", %"class.blink::Member.161", %"class.blink::Member.161", %"class.blink::Member.161", %"class.blink::UserActionElementSet", %"class.blink::Member.508", double, double, i64, i64, %"class.blink::HeapHashSet.510", %"class.blink::HeapHashSet.517", i16, i8, %"class.blink::Member.524", %"class.blink::Member.526", %"class.blink::Member.528", %"class.blink::Member.530", %"class.blink::TextLinkColors", %"class.blink::Member.532", i8, [7 x i8], %"class.blink::HeapHashMap.534", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.161", %"class.WTF::Vector.541", %"class.blink::Member.546", %"class.blink::Member.548", i8, %"class.blink::Member.161", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.550", %"class.blink::HeapVector.552", %"class.std::__1::unique_ptr.560", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.566", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.579", %"class.WTF::Vector.581", i8, i8, %"class.std::__1::unique_ptr.586", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.180", %"class.blink::HeapVector.592", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.600", i8, i32, %"class.blink::Member.602", %"class.blink::Member.604", %"class.blink::Member.606", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.608", %"class.WTF::HashMap.610", %"class.blink::Member.615", %"class.blink::Member.617", %"class.blink::Member.619", %"class.blink::Member.621", %"class.blink::Member.54", %"class.blink::Member.54", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.623", i8, i32, %"class.blink::Member.630", %"class.blink::Member.632", i32, %"class.blink::Member.634", %"class.blink::Member.636", %"class.blink::Member.638", %"class.std::__1::unique_ptr.640", i64, %"class.std::__1::unique_ptr.646", i32, i32, %"class.blink::Member.652", %"class.blink::Member.654", %"class.blink::Member.656", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.658", %"class.WTF::Vector.660", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.665", %"class.blink::Member.672", %"class.std::__1::unique_ptr.674", %"class.blink::Member.680", i8, i8, %"class.WTF::String", %"class.blink::Member.682", i8, [7 x i8], %"class.blink::HeapHashMap.684", %"class.blink::HeapObserverSet", %"class.blink::Member.698", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.700", i32, i8, i8, %"class.blink::WeakMember.123", %"class.blink::Member.702" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.137", %"class.blink::Member.137" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.137", %"class.blink::Member.138", %"class.blink::Member.137", %"class.blink::Member.137", %"class.blink::Member.140" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.138" = type { %"class.blink::MemberBase.139" }
%"class.blink::MemberBase.139" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.140" = type { %"class.blink::MemberBase.141" }
%"class.blink::MemberBase.141" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.137" = type { %"class.blink::MemberBase.124" }
%"class.blink::MemberBase.124" = type { %"class.blink::Node"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.144", %"class.blink::Member.54", %"class.blink::Member.138", %"class.blink::Member.146", %"class.blink::Member.146", %"class.blink::Member.187", %"class.blink::Member.189", %"class.blink::Member.191", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.196", %"class.blink::HeapVector.198" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.144" = type { %"class.blink::MemberBase.145" }
%"class.blink::MemberBase.145" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.146" = type { %"class.blink::MemberBase.147" }
%"class.blink::MemberBase.147" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.150" }
%"class.blink::HeapHashMap.150" = type { %"class.WTF::HashMap.153" }
%"class.WTF::HashMap.153" = type { %"class.WTF::HashTable.154" }
%"class.WTF::HashTable.154" = type <{ %"struct.WTF::KeyValuePair.156"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.156" = type { %"class.WTF::AtomicString", %"class.blink::Member.157" }
%"class.blink::Member.157" = type { %"class.blink::MemberBase.158" }
%"class.blink::MemberBase.158" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.161", i32, %"class.blink::HeapVector.180" }
%"class.blink::Member.187" = type { %"class.blink::MemberBase.188" }
%"class.blink::MemberBase.188" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.189" = type { %"class.blink::MemberBase.190" }
%"class.blink::MemberBase.190" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.191" = type { %"class.blink::MemberBase.192" }
%"class.blink::MemberBase.192" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.193" }
%"class.blink::Member.193" = type { %"class.blink::MemberBase.194" }
%"class.blink::MemberBase.194" = type { %"class.blink::HeapHashMap.195"* }
%"class.blink::HeapHashMap.195" = type opaque
%"class.blink::Member.196" = type { %"class.blink::MemberBase.197" }
%"class.blink::MemberBase.197" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.198" = type { %"class.WTF::Vector.201" }
%"class.WTF::Vector.201" = type { %"class.WTF::VectorBuffer.202" }
%"class.WTF::VectorBuffer.202" = type { %"class.WTF::VectorBufferBase.203" }
%"class.WTF::VectorBufferBase.203" = type { %"class.blink::Member.204"*, i32, i32 }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.241" }
%"class.blink::HeapHashMap.241" = type { %"class.WTF::HashMap.244" }
%"class.WTF::HashMap.244" = type { %"class.WTF::HashTable.245" }
%"class.WTF::HashTable.245" = type <{ %"struct.WTF::KeyValuePair.247"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.247" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.248" = type { %"class.WTF::VectorBuffer.249" }
%"class.WTF::VectorBuffer.249" = type { %"class.WTF::VectorBufferBase.250" }
%"class.WTF::VectorBufferBase.250" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.251 }
%class.scoped_refptr.251 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.252" }
%"struct.std::__1::atomic.252" = type { %"struct.std::__1::__atomic_base.253" }
%"struct.std::__1::__atomic_base.253" = type { %"struct.std::__1::__atomic_base.254" }
%"struct.std::__1::__atomic_base.254" = type { %"struct.std::__1::__cxx_atomic_impl.255" }
%"struct.std::__1::__cxx_atomic_impl.255" = type { %"struct.std::__1::__cxx_atomic_base_impl.256" }
%"struct.std::__1::__cxx_atomic_base_impl.256" = type { i32 }
%"class.blink::Member.259" = type { %"class.blink::MemberBase.260" }
%"class.blink::MemberBase.260" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.261" = type { %"class.blink::MemberBase.262" }
%"class.blink::MemberBase.262" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.722", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.763", i32, i8, [3 x i8], %"class.blink::HeapVector.765", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.773", %"class.blink::Member.775", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.784", %"class.blink::Member.790", %"class.blink::Member.792", i8, [7 x i8] }>
%"class.blink::Supplementable.722" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.723" }
%"class.blink::HeapHashMap.723" = type { %"class.WTF::HashMap.726" }
%"class.WTF::HashMap.726" = type { %"class.WTF::HashTable.727" }
%"class.WTF::HashTable.727" = type <{ %"struct.WTF::KeyValuePair.729"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.729" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.738" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.730" }
%"class.blink::HeapObserverSet.730" = type { i32, [4 x i8], %"class.blink::HeapHashSet.731" }
%"class.blink::HeapHashSet.731" = type { %"class.WTF::HashSet.734" }
%"class.WTF::HashSet.734" = type { %"class.WTF::HashTable.735" }
%"class.WTF::HashTable.735" = type <{ %"class.blink::WeakMember.737"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.737" = type opaque
%"class.blink::Supplementable.738" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.739" }
%"class.blink::HeapHashMap.739" = type { %"class.WTF::HashMap.742" }
%"class.WTF::HashMap.742" = type { %"class.WTF::HashTable.743" }
%"class.WTF::HashTable.743" = type <{ %"struct.WTF::KeyValuePair.745"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.745" = type { i8*, %"class.blink::Member.831" }
%"class.blink::Member.831" = type { %"class.blink::MemberBase.832" }
%"class.blink::MemberBase.832" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.833" }
%"class.blink::Member.833" = type { %"class.blink::MemberBase.834" }
%"class.blink::MemberBase.834" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.v8::Isolate" = type { i8 }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.746, %"class.std::__1::unique_ptr.747", %"class.std::__1::unique_ptr.747", %"class.std::__1::unique_ptr.753", %"class.std::__1::unique_ptr.753", %"class.blink::Member.261", i32, [4 x i8], %"class.WTF::HashSet.759", i32, i32 }
%class.scoped_refptr.746 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.753" = type { %"class.std::__1::__compressed_pair.754" }
%"class.std::__1::__compressed_pair.754" = type { %"struct.std::__1::__compressed_pair_elem.755" }
%"struct.std::__1::__compressed_pair_elem.755" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.759" = type { %"class.WTF::HashTable.760" }
%"class.WTF::HashTable.760" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.763" = type { %"class.blink::MemberBase.764" }
%"class.blink::MemberBase.764" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.765" = type { %"class.WTF::Vector.768" }
%"class.WTF::Vector.768" = type { %"class.WTF::VectorBuffer.769" }
%"class.WTF::VectorBuffer.769" = type { %"class.WTF::VectorBufferBase.770" }
%"class.WTF::VectorBufferBase.770" = type { %"class.blink::Member.771"*, i32, i32 }
%"class.blink::Member.771" = type opaque
%"class.blink::Member.773" = type { %"class.blink::MemberBase.774" }
%"class.blink::MemberBase.774" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.775" = type { %"class.blink::MemberBase.776" }
%"class.blink::MemberBase.776" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.777", i32, i32 }
%"class.blink::HeapHashMap.777" = type { %"class.WTF::HashMap.780" }
%"class.WTF::HashMap.780" = type { %"class.WTF::HashTable.781" }
%"class.WTF::HashTable.781" = type <{ %"struct.WTF::KeyValuePair.783"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.783" = type opaque
%"class.std::__1::unique_ptr.784" = type { %"class.std::__1::__compressed_pair.785" }
%"class.std::__1::__compressed_pair.785" = type { %"struct.std::__1::__compressed_pair_elem.786" }
%"struct.std::__1::__compressed_pair_elem.786" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.790" = type { %"class.blink::MemberBase.791" }
%"class.blink::MemberBase.791" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.792" = type { %"class.blink::MemberBase.793" }
%"class.blink::MemberBase.793" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.263" = type { %"class.blink::MemberBase.264" }
%"class.blink::MemberBase.264" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.265" = type { %"class.blink::MemberBase.266" }
%"class.blink::MemberBase.266" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.267" = type { %"class.blink::MemberBase.268" }
%"class.blink::MemberBase.268" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.269" = type { %"class.blink::MemberBase.270" }
%"class.blink::MemberBase.270" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.277" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.271" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.blink::KURL"* }
%"class.blink::Member.283" = type { %"class.blink::MemberBase.284" }
%"class.blink::MemberBase.284" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.285" = type { %"class.blink::MemberBase.286" }
%"class.blink::MemberBase.286" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.204" = type { %"class.blink::MemberBase.205" }
%"class.blink::MemberBase.205" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.206", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.208, %"class.WTF::Vector.209", %"class.WTF::Vector.209", %"class.blink::Member.137", %"class.blink::Member.214", %"class.blink::HeapHashSet.218", %"class.blink::Member.54", %"class.WTF::HashSet.225", %"class.WTF::TextPosition", %"class.blink::Member.229", %"class.blink::HeapVector.231", %"class.blink::Member.238" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.206" = type { %"class.blink::MemberBase.207" }
%"class.blink::MemberBase.207" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.208 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type opaque
%"class.WTF::Vector.209" = type { %"class.WTF::VectorBuffer.210" }
%"class.WTF::VectorBuffer.210" = type { %"class.WTF::VectorBufferBase.211" }
%"class.WTF::VectorBufferBase.211" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type opaque
%"class.blink::Member.214" = type { %"class.blink::MemberBase.215" }
%"class.blink::MemberBase.215" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.216" }
%"class.blink::Member.216" = type { %"class.blink::MemberBase.217" }
%"class.blink::MemberBase.217" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.218" = type { %"class.WTF::HashSet.221" }
%"class.WTF::HashSet.221" = type { %"class.WTF::HashTable.222" }
%"class.WTF::HashTable.222" = type <{ %"class.blink::WeakMember.224"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.224" = type { %"class.blink::MemberBase.139" }
%"class.WTF::HashSet.225" = type { %"class.WTF::HashTable.226" }
%"class.WTF::HashTable.226" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.229" = type { %"class.blink::MemberBase.230" }
%"class.blink::MemberBase.230" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type opaque
%"class.blink::HeapVector.231" = type { %"class.WTF::Vector.234" }
%"class.WTF::Vector.234" = type { %"class.WTF::VectorBuffer.235" }
%"class.WTF::VectorBuffer.235" = type { %"class.WTF::VectorBufferBase.236" }
%"class.WTF::VectorBufferBase.236" = type { %"class.blink::Member.214"*, i32, i32 }
%"class.blink::Member.238" = type { %"class.blink::MemberBase.239" }
%"class.blink::MemberBase.239" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.287 }
%class.scoped_refptr.287 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.288" = type { %"class.WTF::VectorBuffer.289" }
%"class.WTF::VectorBuffer.289" = type { %"class.WTF::VectorBufferBase.290" }
%"class.WTF::VectorBufferBase.290" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.291 }
%class.scoped_refptr.291 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.292", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.292" = type { %"class.base::RefCounted.293" }
%"class.base::RefCounted.293" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.296" }
%"class.blink::HeapHashMap.296" = type { %"class.WTF::HashMap.299" }
%"class.WTF::HashMap.299" = type { %"class.WTF::HashTable.300" }
%"class.WTF::HashTable.300" = type <{ %"struct.WTF::KeyValuePair.302"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.302" = type { %"class.blink::WeakMember.303", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.303" = type { %"class.blink::MemberBase.304" }
%"class.blink::MemberBase.304" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.305", i32, [4 x i8], %"class.std::__1::unique_ptr.443", %"class.std::__1::unique_ptr.443", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.453", %"class.std::__1::unique_ptr.459", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.471", %"class.std::__1::unique_ptr.477", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.484", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.305" = type { %"class.std::__1::__compressed_pair.306" }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.307" }
%"struct.std::__1::__compressed_pair_elem.307" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.326", %"class.std::__1::unique_ptr.332", %"class.std::__1::unique_ptr.338", %"class.std::__1::unique_ptr.349", %"class.std::__1::unique_ptr.356", %"class.std::__1::unique_ptr.356", %"class.std::__1::unique_ptr.363", %"class.std::__1::unique_ptr.370", %"class.std::__1::unique_ptr.377", %"class.std::__1::unique_ptr.377", %"class.std::__1::unique_ptr.384", %"class.std::__1::unique_ptr.391", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.423", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.338" = type { %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.341" = type { %"struct.std::__1::__atomic_base.342" }
%"struct.std::__1::__atomic_base.342" = type { %"struct.std::__1::__atomic_base.343" }
%"struct.std::__1::__atomic_base.343" = type { %"struct.std::__1::__cxx_atomic_impl.344" }
%"struct.std::__1::__cxx_atomic_impl.344" = type { %"struct.std::__1::__cxx_atomic_base_impl.345" }
%"struct.std::__1::__cxx_atomic_base_impl.345" = type { i64 }
%"class.std::__1::unique_ptr.349" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.blink::Worklist.352"* }
%"class.blink::Worklist.352" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.356" = type { %"class.std::__1::__compressed_pair.357" }
%"class.std::__1::__compressed_pair.357" = type { %"struct.std::__1::__compressed_pair_elem.358" }
%"struct.std::__1::__compressed_pair_elem.358" = type { %"class.blink::Worklist.359"* }
%"class.blink::Worklist.359" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.363" = type { %"class.std::__1::__compressed_pair.364" }
%"class.std::__1::__compressed_pair.364" = type { %"struct.std::__1::__compressed_pair_elem.365" }
%"struct.std::__1::__compressed_pair_elem.365" = type { %"class.blink::Worklist.366"* }
%"class.blink::Worklist.366" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.370" = type { %"class.std::__1::__compressed_pair.371" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"class.blink::Worklist.373"* }
%"class.blink::Worklist.373" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.377" = type { %"class.std::__1::__compressed_pair.378" }
%"class.std::__1::__compressed_pair.378" = type { %"struct.std::__1::__compressed_pair_elem.379" }
%"struct.std::__1::__compressed_pair_elem.379" = type { %"class.blink::Worklist.380"* }
%"class.blink::Worklist.380" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.384" = type { %"class.std::__1::__compressed_pair.385" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"class.blink::Worklist.387"* }
%"class.blink::Worklist.387" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %"class.blink::Worklist.394"* }
%"class.blink::Worklist.394" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.341" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.401", %"class.std::__1::__compressed_pair.410", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.417", [4 x i8] }>
%"class.std::__1::unique_ptr.401" = type { %"class.std::__1::__compressed_pair.402" }
%"class.std::__1::__compressed_pair.402" = type { %"struct.std::__1::__compressed_pair_elem.403", %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.403" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.405" }
%"class.std::__1::__compressed_pair.405" = type { %"struct.std::__1::__compressed_pair_elem.406" }
%"struct.std::__1::__compressed_pair_elem.406" = type { i64 }
%"class.std::__1::__compressed_pair.410" = type { %"struct.std::__1::__compressed_pair_elem.411" }
%"struct.std::__1::__compressed_pair_elem.411" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.406" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { float }
%"class.std::__1::unique_ptr.423" = type { %"class.std::__1::__compressed_pair.424" }
%"class.std::__1::__compressed_pair.424" = type { %"struct.std::__1::__compressed_pair_elem.425" }
%"struct.std::__1::__compressed_pair_elem.425" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.426", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.426" = type { %"class.std::__1::__compressed_pair.427" }
%"class.std::__1::__compressed_pair.427" = type { %"struct.std::__1::__compressed_pair_elem.428" }
%"struct.std::__1::__compressed_pair_elem.428" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.435" }
%"class.WTF::Vector.435" = type { %"class.WTF::VectorBuffer.436" }
%"class.WTF::VectorBuffer.436" = type { %"class.WTF::VectorBufferBase.437" }
%"class.WTF::VectorBufferBase.437" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.443" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.451" }
%"class.WTF::VectorBuffer.451" = type { %"class.WTF::VectorBufferBase.452" }
%"class.WTF::VectorBufferBase.452" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.453" = type { %"class.std::__1::__compressed_pair.454" }
%"class.std::__1::__compressed_pair.454" = type { %"struct.std::__1::__compressed_pair_elem.455" }
%"struct.std::__1::__compressed_pair_elem.455" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.459" = type { %"class.std::__1::__compressed_pair.460" }
%"class.std::__1::__compressed_pair.460" = type { %"struct.std::__1::__compressed_pair_elem.461" }
%"struct.std::__1::__compressed_pair_elem.461" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.465" }
%"class.std::__1::unique_ptr.465" = type { %"class.std::__1::__compressed_pair.466" }
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.352"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.359"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.366"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.373"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.380"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.715", i64 }
%"class.std::__1::vector.715" = type { %"class.std::__1::__vector_base.716" }
%"class.std::__1::__vector_base.716" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.717" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.471" = type { %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.477" = type { %"class.std::__1::__compressed_pair.478" }
%"class.std::__1::__compressed_pair.478" = type { %"struct.std::__1::__compressed_pair_elem.479" }
%"struct.std::__1::__compressed_pair_elem.479" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.483 }
%class.scoped_refptr.483 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.484" = type { %"struct.std::__1::__atomic_base.485" }
%"struct.std::__1::__atomic_base.485" = type { %"struct.std::__1::__cxx_atomic_impl.486" }
%"struct.std::__1::__cxx_atomic_impl.486" = type { %"struct.std::__1::__cxx_atomic_base_impl.487" }
%"struct.std::__1::__cxx_atomic_base_impl.487" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.499" = type { %"class.blink::MemberBase.500" }
%"class.blink::MemberBase.500" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.54", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.137", %"class.blink::Member.137", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.501" }
%"class.blink::HeapHashMap.501" = type { %"class.WTF::HashMap.504" }
%"class.WTF::HashMap.504" = type { %"class.WTF::HashTable.505" }
%"class.WTF::HashTable.505" = type <{ %"struct.WTF::KeyValuePair.507"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.507" = type opaque
%"class.blink::Member.508" = type { %"class.blink::MemberBase.509" }
%"class.blink::MemberBase.509" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.510" = type { %"class.WTF::HashSet.513" }
%"class.WTF::HashSet.513" = type { %"class.WTF::HashTable.514" }
%"class.WTF::HashTable.514" = type <{ %"class.blink::WeakMember.516"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.516" = type opaque
%"class.blink::HeapHashSet.517" = type { %"class.WTF::HashSet.520" }
%"class.WTF::HashSet.520" = type { %"class.WTF::HashTable.521" }
%"class.WTF::HashTable.521" = type <{ %"class.blink::WeakMember.523"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.523" = type opaque
%"class.blink::Member.524" = type { %"class.blink::MemberBase.525" }
%"class.blink::MemberBase.525" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.526" = type { %"class.blink::MemberBase.527" }
%"class.blink::MemberBase.527" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.528" = type { %"class.blink::MemberBase.529" }
%"class.blink::MemberBase.529" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.138", %"class.blink::HeapVector.198" }
%"class.blink::Member.530" = type { %"class.blink::MemberBase.531" }
%"class.blink::MemberBase.531" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.532" = type { %"class.blink::MemberBase.533" }
%"class.blink::MemberBase.533" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.534" = type { %"class.WTF::HashMap.537" }
%"class.WTF::HashMap.537" = type { %"class.WTF::HashTable.538" }
%"class.WTF::HashTable.538" = type <{ %"struct.WTF::KeyValuePair.540"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.540" = type opaque
%"class.WTF::Vector.541" = type { %"class.WTF::VectorBuffer.542" }
%"class.WTF::VectorBuffer.542" = type { %"class.WTF::VectorBufferBase.543" }
%"class.WTF::VectorBufferBase.543" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.546" = type { %"class.blink::MemberBase.547" }
%"class.blink::MemberBase.547" = type { %"class.blink::AXObjectCache"* }
%"class.blink::Member.548" = type { %"class.blink::MemberBase.549" }
%"class.blink::MemberBase.549" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.161" = type { %"class.blink::MemberBase.162" }
%"class.blink::MemberBase.162" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.164" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.164" = type { %"class.blink::MemberBase.165" }
%"class.blink::MemberBase.165" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.168", %"class.blink::Member.170", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.168" = type { %"class.WTF::SingleThreadedBitField.169" }
%"class.WTF::SingleThreadedBitField.169" = type { i32 }
%"class.blink::Member.170" = type { %"class.blink::MemberBase.171" }
%"class.blink::MemberBase.171" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.172 }
%class.scoped_refptr.172 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.173", %"class.WTF::AtomicString", %"class.WTF::Vector.175" }
%"class.WTF::RefCounted.173" = type { %"class.base::RefCounted.174" }
%"class.base::RefCounted.174" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.175" = type { %"class.WTF::VectorBuffer.176" }
%"class.WTF::VectorBuffer.176" = type { %"class.WTF::VectorBufferBase.177", [32 x i8] }
%"class.WTF::VectorBufferBase.177" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.550" = type { %"class.blink::MemberBase.551" }
%"class.blink::MemberBase.551" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.552" = type { %"class.WTF::Vector.555" }
%"class.WTF::Vector.555" = type { %"class.WTF::VectorBuffer.556" }
%"class.WTF::VectorBuffer.556" = type { %"class.WTF::VectorBufferBase.557" }
%"class.WTF::VectorBufferBase.557" = type { %"class.blink::Member.558"*, i32, i32 }
%"class.blink::Member.558" = type opaque
%"class.std::__1::unique_ptr.560" = type { %"class.std::__1::__compressed_pair.561" }
%"class.std::__1::__compressed_pair.561" = type { %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.566" = type { %"class.WTF::HashSet.569" }
%"class.WTF::HashSet.569" = type { %"class.WTF::HashTable.570" }
%"class.WTF::HashTable.570" = type <{ %"class.blink::WeakMember.572"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.572" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.573", i32, [4 x i8] }>
%"class.WTF::Vector.573" = type { %"class.WTF::VectorBuffer.574" }
%"class.WTF::VectorBuffer.574" = type { %"class.WTF::VectorBufferBase.575" }
%"class.WTF::VectorBufferBase.575" = type { %"struct.std::__1::pair.576"*, i32, i32 }
%"struct.std::__1::pair.576" = type opaque
%"class.blink::Member.579" = type { %"class.blink::MemberBase.580" }
%"class.blink::MemberBase.580" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.581" = type { %"class.WTF::VectorBuffer.582" }
%"class.WTF::VectorBuffer.582" = type { %"class.WTF::VectorBufferBase.583" }
%"class.WTF::VectorBufferBase.583" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.586" = type { %"class.std::__1::__compressed_pair.587" }
%"class.std::__1::__compressed_pair.587" = type { %"struct.std::__1::__compressed_pair_elem.588" }
%"struct.std::__1::__compressed_pair_elem.588" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.180" = type { %"class.WTF::Vector.183" }
%"class.WTF::Vector.183" = type { %"class.WTF::VectorBuffer.184" }
%"class.WTF::VectorBuffer.184" = type { %"class.WTF::VectorBufferBase.185" }
%"class.WTF::VectorBufferBase.185" = type { %"class.blink::Member.161"*, i32, i32 }
%"class.blink::HeapVector.592" = type { %"class.WTF::Vector.595" }
%"class.WTF::Vector.595" = type { %"class.WTF::VectorBuffer.596" }
%"class.WTF::VectorBuffer.596" = type { %"class.WTF::VectorBufferBase.597" }
%"class.WTF::VectorBufferBase.597" = type { %"class.blink::Member.598"*, i32, i32 }
%"class.blink::Member.598" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.54" }
%"class.blink::Member.600" = type { %"class.blink::MemberBase.601" }
%"class.blink::MemberBase.601" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.602" = type { %"class.blink::MemberBase.603" }
%"class.blink::MemberBase.603" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.604" = type { %"class.blink::MemberBase.605" }
%"class.blink::MemberBase.605" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.606" = type { %"class.blink::MemberBase.607" }
%"class.blink::MemberBase.607" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.608" = type { %"class.blink::MemberBase.609" }
%"class.blink::MemberBase.609" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.610" = type { %"class.WTF::HashTable.611" }
%"class.WTF::HashTable.611" = type <{ %"struct.WTF::KeyValuePair.614"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.614" = type opaque
%"class.blink::Member.615" = type { %"class.blink::MemberBase.616" }
%"class.blink::MemberBase.616" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.617" = type { %"class.blink::MemberBase.618" }
%"class.blink::MemberBase.618" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.619" = type { %"class.blink::MemberBase.620" }
%"class.blink::MemberBase.620" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.621" = type { %"class.blink::MemberBase.622" }
%"class.blink::MemberBase.622" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.108", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.490, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.490 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.491" }>
%"class.base::RefCountedThreadSafe.491" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.492 }
%class.scoped_refptr.492 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.493", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.493" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.494" }
%"struct.std::__1::atomic.494" = type { %"struct.std::__1::__atomic_base.495" }
%"struct.std::__1::__atomic_base.495" = type { %"struct.std::__1::__atomic_base.496" }
%"struct.std::__1::__atomic_base.496" = type { %"struct.std::__1::__cxx_atomic_impl.497" }
%"struct.std::__1::__cxx_atomic_impl.497" = type { %"struct.std::__1::__cxx_atomic_base_impl.498" }
%"struct.std::__1::__cxx_atomic_base_impl.498" = type { i8 }
%"class.blink::WeakMember.108" = type { %"class.blink::MemberBase.55" }
%"class.blink::HeapHashSet.623" = type { %"class.WTF::HashSet.626" }
%"class.WTF::HashSet.626" = type { %"class.WTF::HashTable.627" }
%"class.WTF::HashTable.627" = type <{ %"class.blink::Member.629"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.629" = type opaque
%"class.blink::Member.630" = type { %"class.blink::MemberBase.631" }
%"class.blink::MemberBase.631" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.632" = type { %"class.blink::MemberBase.633" }
%"class.blink::MemberBase.633" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.634" = type { %"class.blink::MemberBase.635" }
%"class.blink::MemberBase.635" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.636" = type { %"class.blink::MemberBase.637" }
%"class.blink::MemberBase.637" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.638" = type { %"class.blink::MemberBase.639" }
%"class.blink::MemberBase.639" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.640" = type { %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.642" }
%"struct.std::__1::__compressed_pair_elem.642" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.652" = type { %"class.blink::MemberBase.653" }
%"class.blink::MemberBase.653" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.654" = type { %"class.blink::MemberBase.655" }
%"class.blink::MemberBase.655" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.656" = type { %"class.blink::MemberBase.657" }
%"class.blink::MemberBase.657" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.658" = type { %"class.blink::MemberBase.659" }
%"class.blink::MemberBase.659" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.660" = type { %"class.WTF::VectorBuffer.661" }
%"class.WTF::VectorBuffer.661" = type { %"class.WTF::VectorBufferBase.662" }
%"class.WTF::VectorBufferBase.662" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.665" = type { %"class.WTF::HashMap.668" }
%"class.WTF::HashMap.668" = type { %"class.WTF::HashTable.669" }
%"class.WTF::HashTable.669" = type <{ %"struct.WTF::KeyValuePair.671"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.671" = type opaque
%"class.blink::Member.672" = type { %"class.blink::MemberBase.673" }
%"class.blink::MemberBase.673" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.674" = type { %"class.std::__1::__compressed_pair.675" }
%"class.std::__1::__compressed_pair.675" = type { %"struct.std::__1::__compressed_pair_elem.676" }
%"struct.std::__1::__compressed_pair_elem.676" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.680" = type { %"class.blink::MemberBase.681" }
%"class.blink::MemberBase.681" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.682" = type { %"class.blink::MemberBase.683" }
%"class.blink::MemberBase.683" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.684" = type { %"class.WTF::HashMap.687" }
%"class.WTF::HashMap.687" = type { %"class.WTF::HashTable.688" }
%"class.WTF::HashTable.688" = type <{ %"struct.WTF::KeyValuePair.690"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.690" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.691" }
%"class.blink::HeapHashSet.691" = type { %"class.WTF::HashSet.694" }
%"class.WTF::HashSet.694" = type { %"class.WTF::HashTable.695" }
%"class.WTF::HashTable.695" = type <{ %"class.blink::WeakMember.697"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.697" = type opaque
%"class.blink::Member.698" = type { %"class.blink::MemberBase.699" }
%"class.blink::MemberBase.699" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.700" = type { %"class.blink::MemberBase.701" }
%"class.blink::MemberBase.701" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.54", %"class.blink::HeapHashSet.706", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.713", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.706" = type { %"class.WTF::HashSet.709" }
%"class.WTF::HashSet.709" = type { %"class.WTF::HashTable.710" }
%"class.WTF::HashTable.710" = type <{ %"class.blink::Member.712"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.712" = type opaque
%"class.blink::HeapTaskRunnerTimer.713" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.714", { i64, i64 } }
%"class.blink::WeakMember.714" = type { %"class.blink::MemberBase.701" }
%"class.blink::WeakMember.123" = type { %"class.blink::MemberBase.124" }
%"class.blink::Member.702" = type { %"class.blink::MemberBase.703" }
%"class.blink::MemberBase.703" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.ui::AXMode" = type { i32 }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.blink::Member.46" }
%"class.blink::HeapHashMap.59" = type { %"class.WTF::HashMap.62" }
%"class.WTF::HashMap.62" = type { %"class.WTF::HashTable.63" }
%"class.WTF::HashTable.63" = type <{ %"struct.WTF::KeyValuePair.65"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.65" = type opaque
%"class.WTF::HashMap.66" = type { %"class.WTF::HashTable.67" }
%"class.WTF::HashTable.67" = type <{ %"struct.WTF::KeyValuePair.69"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.69" = type opaque
%"class.blink::HeapHashMap.70" = type { %"class.WTF::HashMap.73" }
%"class.WTF::HashMap.73" = type { %"class.WTF::HashTable.74" }
%"class.WTF::HashTable.74" = type <{ %"struct.WTF::KeyValuePair.76"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.76" = type opaque
%"class.WTF::HashMap.77" = type { %"class.WTF::HashTable.78" }
%"class.WTF::HashTable.78" = type <{ %"struct.WTF::KeyValuePair.81"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.81" = type opaque
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.47" }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::AXRelationCache"* }
%"class.blink::AXRelationCache" = type opaque
%"class.blink::HeapVector.91" = type { %"class.WTF::Vector.94" }
%"class.WTF::Vector.94" = type { %"class.WTF::VectorBuffer.95" }
%"class.WTF::VectorBuffer.95" = type { %"class.WTF::VectorBufferBase.96" }
%"class.WTF::VectorBufferBase.96" = type { %"class.blink::Member.97"*, i32, i32 }
%"class.blink::Member.97" = type opaque
%"class.blink::HeapMojoRemote" = type { %"class.blink::Member.99" }
%"class.blink::Member.99" = type { %"class.blink::MemberBase.100" }
%"class.blink::MemberBase.100" = type { %"class.blink::HeapMojoRemote<blink::mojom::blink::PermissionService, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoRemote<blink::mojom::blink::PermissionService, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::HeapMojoReceiver" = type { %"class.blink::Member.101" }
%"class.blink::Member.101" = type { %"class.blink::MemberBase.102" }
%"class.blink::MemberBase.102" = type { %"class.blink::HeapMojoReceiver<blink::mojom::blink::PermissionObserver, blink::AXObjectCacheImpl, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper"* }
%"class.blink::HeapMojoReceiver<blink::mojom::blink::PermissionObserver, blink::AXObjectCacheImpl, blink::HeapMojoWrapperMode::kWithContextObserver>::Wrapper" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.105" }
%"class.WTF::HashSet.105" = type { %"class.WTF::HashTable.106" }
%"class.WTF::HashTable.106" = type <{ %"class.blink::WeakMember.108"*, i32, i32, i32, [4 x i8] }>
%"class.blink::HeapVector.109" = type { %"class.WTF::Vector.112" }
%"class.WTF::Vector.112" = type { %"class.WTF::VectorBuffer.113" }
%"class.WTF::VectorBuffer.113" = type { %"class.WTF::VectorBufferBase.114" }
%"class.WTF::VectorBufferBase.114" = type { %"class.blink::Member.115"*, i32, i32 }
%"class.blink::Member.115" = type opaque
%"class.blink::HeapHashSet.117" = type { %"class.WTF::HashSet.120" }
%"class.WTF::HashSet.120" = type { %"class.WTF::HashTable.121" }
%"class.WTF::HashTable.121" = type <{ %"class.blink::WeakMember.123"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap.125" = type { %"class.WTF::HashTable.126" }
%"class.WTF::HashTable.126" = type <{ %"struct.WTF::KeyValuePair.129"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.129" = type opaque
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap.130" }
%"class.WTF::HashMap.130" = type { %"class.WTF::HashTable.131" }
%"class.WTF::HashTable.131" = type <{ %"struct.WTF::KeyValuePair.134"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.134" = type { %"class.blink::BlinkAXEventIntent", i32, [4 x i8] }
%"class.blink::BlinkAXEventIntent" = type <{ i32 (...)**, %"struct.ui::AXEventIntent", i8, i8, [6 x i8] }>
%"struct.ui::AXEventIntent" = type { i32 (...)**, i32, i32, i32, i32 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.82" }
%"class.WTF::HashTable.82" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.170", %"class.WTF::Vector.841" }
%"class.WTF::Vector.841" = type { %"class.WTF::VectorBuffer.842" }
%"class.WTF::VectorBuffer.842" = type { %"class.WTF::VectorBufferBase.843", [64 x i8] }
%"class.WTF::VectorBufferBase.843" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::HeapVector.796" = type { %"class.WTF::Vector.799" }
%"class.WTF::Vector.799" = type { %"class.WTF::VectorBuffer.800" }
%"class.WTF::VectorBuffer.800" = type { %"class.WTF::VectorBufferBase.801" }
%"class.WTF::VectorBufferBase.801" = type { %"class.blink::Member.802"*, i32, i32 }
%"class.blink::Member.802" = type { %"class.blink::MemberBase.803" }
%"class.blink::MemberBase.803" = type { %"class.blink::NameSourceRelatedObject"* }
%"class.blink::NameSourceRelatedObject" = type { %"class.blink::WeakMember", %"class.WTF::String" }
%"class.blink::NameSource" = type { %"class.WTF::String", i8, i8, i32, %"class.blink::QualifiedName"*, %"class.WTF::AtomicString", i32, %"class.blink::HeapVector.796" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.849" }
%"class.std::__1::__compressed_pair.849" = type { %"struct.std::__1::__compressed_pair_elem.850" }
%"struct.std::__1::__compressed_pair_elem.850" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.851 }
%union.anon.851 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN5blink8protocol13Accessibility13AXRelatedNodeENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE24__emplace_back_slow_pathIJS8_EEEvDpOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_23NameSourceRelatedObjectEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [18 x i8] c"activeModalDialog\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"activeAriaModalDialog\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"ariaHiddenElement\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"ariaHiddenSubtree\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"emptyAlt\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"emptyText\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"inertElement\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"inertSubtree\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"labelContainer\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"labelFor\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"notRendered\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"notVisible\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"presentationalRole\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"probablyPresentational\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"uninteresting\00", align 1
@.str.15 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum5IdrefE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum7BooleanE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum9AttributeE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum8ContentsE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum11PlaceholderE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum14RelatedElementE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum8ImplicitE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum10FigcaptionE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5LabelE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum8LabelforE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum12LabelwrappedE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum14RubyannotationE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum12TablecaptionE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum6LegendE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5TitleE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5OtherE = external constant [0 x i8], align 1
@_ZN5blink10html_names19kAriaLabelledbyAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink10html_names18kAriaLabeledbyAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum9IdrefListE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum8NodeListE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum6StringE = external constant [0 x i8], align 1
@_ZN5blink8protocol13Accessibility15AXValueTypeEnum14ComputedStringE = external constant [0 x i8], align 1
@_ZTVN5blink8protocol13Accessibility10AXPropertyE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol13Accessibility7AXValueE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol16FundamentalValueE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZTVN5blink8protocol13Accessibility13AXRelatedNodeE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZN5blink10html_names7kIdAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZTVN5blink8protocol13Accessibility13AXValueSourceE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol11StringValueE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZN5blink11g_null_nameE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str.17 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.18 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXProperty"* @_ZN5blink14CreatePropertyERKN3WTF6StringENSt3__110unique_ptrINS_8protocol13Accessibility7AXValueENS4_14default_deleteIS8_EEEE(%"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.blink::protocol::Accessibility::AXValue"*) local_unnamed_addr #0 {
  %3 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %1 to i64
  %4 = tail call i8* @_Znwm(i64 24) #12
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility10AXPropertyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #13
  %7 = bitcast i8* %4 to %"class.blink::protocol::Accessibility::AXProperty"*
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #13
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #13
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %2
  %29 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %30 = bitcast i8* %6 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds i8, i8* %4, i64 16
  %32 = bitcast i8* %31 to i64*
  store i64 %3, i64* %32, align 8
  ret %"class.blink::protocol::Accessibility::AXProperty"* %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17IgnoredReasonNameENS_15AXIgnoredReasonE(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %18 [
    i32 0, label %3
    i32 1, label %4
    i32 2, label %5
    i32 3, label %6
    i32 4, label %7
    i32 5, label %8
    i32 6, label %9
    i32 7, label %10
    i32 8, label %11
    i32 9, label %12
    i32 10, label %13
    i32 11, label %14
    i32 12, label %15
    i32 13, label %16
    i32 14, label %17
  ]

3:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i64 17) #13
  br label %19

4:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i64 21) #13
  br label %19

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i64 17) #13
  br label %19

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i64 17) #13
  br label %19

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i64 8) #13
  br label %19

8:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i64 9) #13
  br label %19

9:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i64 12) #13
  br label %19

10:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12) #13
  br label %19

11:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i64 14) #13
  br label %19

12:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i64 8) #13
  br label %19

13:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), i64 11) #13
  br label %19

14:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i64 10) #13
  br label %19

15:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0), i64 18) #13
  br label %19

16:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0), i64 22) #13
  br label %19

17:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i64 13) #13
  br label %19

18:                                               ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.15, i64 0, i64 0), i64 0) #13
  br label %19

19:                                               ; preds = %18, %17, %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5, %4, %3
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  ret %"class.WTF::StringImpl"* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %"class.blink::protocol::Accessibility::AXProperty"* @_ZN5blink14CreatePropertyENS_13IgnoredReasonE(%"class.blink::IgnoredReason"* nocapture readonly) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = getelementptr inbounds %"class.blink::IgnoredReason", %"class.blink::IgnoredReason"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %4, align 8
  %6 = icmp eq %"class.blink::AXObject"* %5, null
  %7 = getelementptr inbounds %"class.blink::IgnoredReason", %"class.blink::IgnoredReason"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = tail call %"class.WTF::StringImpl"* @_ZN5blink17IgnoredReasonNameENS_15AXIgnoredReasonE(i32 %8)
  br i1 %6, label %73, label %10

10:                                               ; preds = %1
  %11 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %4, align 8
  %12 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum5IdrefE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum5IdrefE, i64 0, i64 0), i64 %13) #13
  %14 = call %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERKNS_8AXObjectEPN3WTF6StringERKS4_(%"class.blink::AXObject"* dereferenceable(120) %11, %"class.WTF::String"* null, %"class.WTF::String"* nonnull dereferenceable(8) %2)
  %15 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %14 to i64
  %16 = call i8* @_Znwm(i64 24) #12
  %17 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility10AXPropertyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %16, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #13
  %19 = bitcast i8* %16 to %"class.blink::protocol::Accessibility::AXProperty"*
  %20 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %20, label %38, label %21

21:                                               ; preds = %10
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i33
  %30 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %29, i33 1) #13
  %31 = extractvalue { i33, i1 } %30, 1
  %32 = extractvalue { i33, i1 } %30, 0
  %33 = icmp slt i33 %32, 0
  %34 = or i1 %31, %33
  br i1 %34, label %35, label %36, !prof !2

35:                                               ; preds = %26
  call void @llvm.trap() #13
  unreachable

36:                                               ; preds = %26
  %37 = trunc i33 %32 to i32
  store i32 %37, i32* %27, align 4
  br label %38

38:                                               ; preds = %10, %21, %36
  %39 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %40 = bitcast i8* %18 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds i8, i8* %16, i64 16
  %42 = bitcast i8* %41 to i64*
  store i64 %15, i64* %42, align 8
  %43 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %44 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %43, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %59, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

53:                                               ; preds = %46
  %54 = add i32 %52, -1
  store i32 %54, i32* %51, align 4
  br label %55

55:                                               ; preds = %53, %46
  %56 = phi i32 [ %54, %53 ], [ %52, %46 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #13
  br label %59

59:                                               ; preds = %38, %55, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  br i1 %20, label %167, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %167

72:                                               ; preds = %69
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #13
  br label %167

73:                                               ; preds = %1
  %74 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #13
  %75 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum7BooleanE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum7BooleanE, i64 0, i64 0), i64 %75) #13
  %76 = call i8* @_Znwm(i64 40) #12
  %77 = bitcast i8* %76 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds i8, i8* %76, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 32, i1 false) #13
  %79 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %99, label %82

82:                                               ; preds = %73
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i33
  %91 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %90, i33 1) #13
  %92 = extractvalue { i33, i1 } %91, 1
  %93 = extractvalue { i33, i1 } %91, 0
  %94 = icmp slt i33 %93, 0
  %95 = or i1 %92, %94
  br i1 %95, label %96, label %97, !prof !2

96:                                               ; preds = %87
  call void @llvm.trap() #13
  unreachable

97:                                               ; preds = %87
  %98 = trunc i33 %93 to i32
  store i32 %98, i32* %88, align 4
  br label %99

99:                                               ; preds = %73, %82, %97
  %100 = ptrtoint %"class.WTF::StringImpl"* %80 to i64
  %101 = bitcast i8* %78 to i64*
  store i64 %100, i64* %101, align 8
  %102 = call i8* @_Znwm(i64 24) #12
  %103 = bitcast i8* %102 to i32 (...)***
  %104 = getelementptr inbounds i8, i8* %102, i64 8
  %105 = bitcast i8* %104 to i32*
  store i32 1, i32* %105, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol16FundamentalValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %103, align 8
  %106 = getelementptr inbounds i8, i8* %102, i64 16
  store i8 1, i8* %106, align 8
  %107 = ptrtoint i8* %102 to i64
  %108 = getelementptr inbounds i8, i8* %76, i64 16
  %109 = bitcast i8* %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = ptrtoint i8* %76 to i64
  %111 = call i8* @_Znwm(i64 24) #12
  %112 = bitcast i8* %111 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility10AXPropertyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %112, align 8
  %113 = getelementptr inbounds i8, i8* %111, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 16, i1 false) #13
  %114 = bitcast i8* %111 to %"class.blink::protocol::Accessibility::AXProperty"*
  %115 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %115, label %133, label %116

116:                                              ; preds = %99
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %133

121:                                              ; preds = %116
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = zext i32 %123 to i33
  %125 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %124, i33 1) #13
  %126 = extractvalue { i33, i1 } %125, 1
  %127 = extractvalue { i33, i1 } %125, 0
  %128 = icmp slt i33 %127, 0
  %129 = or i1 %126, %128
  br i1 %129, label %130, label %131, !prof !2

130:                                              ; preds = %121
  call void @llvm.trap() #13
  unreachable

131:                                              ; preds = %121
  %132 = trunc i33 %127 to i32
  store i32 %132, i32* %122, align 4
  br label %133

133:                                              ; preds = %99, %116, %131
  %134 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %135 = bitcast i8* %113 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds i8, i8* %111, i64 16
  %137 = bitcast i8* %136 to i64*
  store i64 %110, i64* %137, align 8
  %138 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %139 = icmp eq %"class.WTF::StringImpl"* %138, null
  br i1 %139, label %153, label %140

140:                                              ; preds = %133
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %138, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = load atomic i32, i32* %141 monotonic, align 4
  %143 = and i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %138, i64 0, i32 0
  %146 = load i32, i32* %145, align 4
  br i1 %144, label %147, label %149

147:                                              ; preds = %140
  %148 = add i32 %146, -1
  store i32 %148, i32* %145, align 4
  br label %149

149:                                              ; preds = %147, %140
  %150 = phi i32 [ %148, %147 ], [ %146, %140 ]
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %149
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %138) #13
  br label %153

153:                                              ; preds = %133, %149, %152
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #13
  br i1 %115, label %167, label %154

154:                                              ; preds = %153
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #13
  br label %167

167:                                              ; preds = %166, %163, %153, %72, %69, %59
  %168 = phi %"class.blink::protocol::Accessibility::AXProperty"* [ %19, %59 ], [ %19, %69 ], [ %19, %72 ], [ %114, %153 ], [ %114, %163 ], [ %114, %166 ]
  ret %"class.blink::protocol::Accessibility::AXProperty"* %168
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERKNS_8AXObjectEPN3WTF6StringERKS4_(%"class.blink::AXObject"* dereferenceable(120), %"class.WTF::String"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::unique_ptr.15", align 8
  %5 = tail call i8* @_Znwm(i64 24) #12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #13
  %6 = ptrtoint i8* %5 to i64
  %7 = bitcast %"class.std::__1::unique_ptr.15"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  %8 = tail call %"class.blink::protocol::Accessibility::AXRelatedNode"* @_ZN5blink22RelatedNodeForAXObjectERKNS_8AXObjectEPN3WTF6StringE(%"class.blink::AXObject"* dereferenceable(120) %0, %"class.WTF::String"* %1)
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* %8, %"class.blink::protocol::Accessibility::AXRelatedNode"** %9, align 8
  %10 = getelementptr inbounds i8, i8* %5, i64 8
  %11 = bitcast i8* %10 to %"class.std::__1::unique_ptr.15"**
  %12 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %11, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 16
  %14 = bitcast i8* %13 to %"class.std::__1::unique_ptr.15"**
  %15 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %14, align 8
  %16 = icmp ult %"class.std::__1::unique_ptr.15"* %12, %15
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = ptrtoint %"class.blink::protocol::Accessibility::AXRelatedNode"* %8 to i64
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %9, align 8
  %19 = bitcast %"class.std::__1::unique_ptr.15"* %12 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %12, i64 1
  %21 = ptrtoint %"class.std::__1::unique_ptr.15"* %20 to i64
  %22 = bitcast i8* %10 to i64*
  store i64 %21, i64* %22, align 8
  br label %25

23:                                               ; preds = %3
  %24 = bitcast i8* %5 to %"class.std::__1::vector"*
  call void @_ZNSt3__16vectorINS_10unique_ptrIN5blink8protocol13Accessibility13AXRelatedNodeENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE24__emplace_back_slow_pathIJS8_EEEvDpOT_(%"class.std::__1::vector"* nonnull %24, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %4) #13
  br label %25

25:                                               ; preds = %17, %23
  %26 = load %"class.blink::protocol::Accessibility::AXRelatedNode"*, %"class.blink::protocol::Accessibility::AXRelatedNode"** %9, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %9, align 8
  %27 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %25
  %29 = bitcast %"class.blink::protocol::Accessibility::AXRelatedNode"* %26 to void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)***
  %30 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)**, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %30, i64 2
  %32 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %31, align 8
  call void %32(%"class.blink::protocol::Accessibility::AXRelatedNode"* nonnull %26) #13
  br label %33

33:                                               ; preds = %25, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  %34 = call i8* @_Znwm(i64 40) #12
  %35 = bitcast i8* %34 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds i8, i8* %34, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 32, i1 false) #13
  %37 = bitcast i8* %34 to %"class.blink::protocol::Accessibility::AXValue"*
  %38 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %58, label %41

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %58

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i33
  %50 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %49, i33 1) #13
  %51 = extractvalue { i33, i1 } %50, 1
  %52 = extractvalue { i33, i1 } %50, 0
  %53 = icmp slt i33 %52, 0
  %54 = or i1 %51, %53
  br i1 %54, label %55, label %56, !prof !2

55:                                               ; preds = %46
  call void @llvm.trap() #13
  unreachable

56:                                               ; preds = %46
  %57 = trunc i33 %52 to i32
  store i32 %57, i32* %47, align 4
  br label %58

58:                                               ; preds = %56, %41, %33
  %59 = ptrtoint %"class.WTF::StringImpl"* %39 to i64
  %60 = bitcast i8* %36 to i64*
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds i8, i8* %34, i64 24
  %62 = bitcast i8* %61 to i64*
  store i64 %6, i64* %62, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %37
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink18CreateBooleanValueEbRKN3WTF6StringE(i1 zeroext, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = tail call i8* @_Znwm(i64 40) #12
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #13
  %6 = bitcast i8* %3 to %"class.blink::protocol::Accessibility::AXValue"*
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #13
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %25, %10, %2
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast i8* %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = tail call i8* @_Znwm(i64 24) #12
  %31 = zext i1 %0 to i8
  %32 = bitcast i8* %30 to i32 (...)***
  %33 = getelementptr inbounds i8, i8* %30, i64 8
  %34 = bitcast i8* %33 to i32*
  store i32 1, i32* %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol16FundamentalValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %35 = getelementptr inbounds i8, i8* %30, i64 16
  store i8 %31, i8* %35, align 8
  %36 = ptrtoint i8* %30 to i64
  %37 = getelementptr inbounds i8, i8* %3, i64 16
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink11CreateValueERKN3WTF6StringES3_(%"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = tail call i8* @_Znwm(i64 40) #12
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #13
  %6 = bitcast i8* %3 to %"class.blink::protocol::Accessibility::AXValue"*
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #13
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %2, %10, %25
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast i8* %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = tail call i8* @_Znwm(i64 24) #12
  %31 = bitcast i8* %30 to i32 (...)***
  %32 = getelementptr inbounds i8, i8* %30, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 4, i32* %33, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol11StringValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = getelementptr inbounds i8, i8* %30, i64 16
  %37 = bitcast i8* %36 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %35, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #13
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !2

53:                                               ; preds = %44
  tail call void @llvm.trap() #13
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %54, %39, %27
  %57 = ptrtoint i8* %30 to i64
  %58 = getelementptr inbounds i8, i8* %3, i64 16
  %59 = bitcast i8* %58 to i64*
  store i64 %57, i64* %59, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink11CreateValueEiRKN3WTF6StringE(i32, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = tail call i8* @_Znwm(i64 40) #12
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #13
  %6 = bitcast i8* %3 to %"class.blink::protocol::Accessibility::AXValue"*
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #13
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %25, %10, %2
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast i8* %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = tail call i8* @_Znwm(i64 24) #12
  %31 = bitcast i8* %30 to i32 (...)***
  %32 = getelementptr inbounds i8, i8* %30, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 2, i32* %33, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol16FundamentalValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 16
  %35 = bitcast i8* %34 to i32*
  store i32 %0, i32* %35, align 8
  %36 = ptrtoint i8* %30 to i64
  %37 = getelementptr inbounds i8, i8* %3, i64 16
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink11CreateValueEfRKN3WTF6StringE(float, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = tail call i8* @_Znwm(i64 40) #12
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #13
  %6 = bitcast i8* %3 to %"class.blink::protocol::Accessibility::AXValue"*
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #13
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %25, %10, %2
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast i8* %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = fpext float %0 to double
  %31 = tail call i8* @_Znwm(i64 24) #12
  %32 = bitcast i8* %31 to i32 (...)***
  %33 = getelementptr inbounds i8, i8* %31, i64 8
  %34 = bitcast i8* %33 to i32*
  store i32 3, i32* %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol16FundamentalValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %32, align 8
  %35 = getelementptr inbounds i8, i8* %31, i64 16
  %36 = bitcast i8* %35 to double*
  store double %30, double* %36, align 8
  %37 = ptrtoint i8* %31 to i64
  %38 = getelementptr inbounds i8, i8* %3, i64 16
  %39 = bitcast i8* %38 to i64*
  store i64 %37, i64* %39, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXRelatedNode"* @_ZN5blink22RelatedNodeForAXObjectERKNS_8AXObjectEPN3WTF6StringE(%"class.blink::AXObject"* dereferenceable(120), %"class.WTF::String"* readonly) local_unnamed_addr #0 {
  %3 = bitcast %"class.blink::AXObject"* %0 to %"class.blink::Node"* (%"class.blink::AXObject"*)***
  %4 = load %"class.blink::Node"* (%"class.blink::AXObject"*)**, %"class.blink::Node"* (%"class.blink::AXObject"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %4, i64 124
  %6 = load %"class.blink::Node"* (%"class.blink::AXObject"*)*, %"class.blink::Node"* (%"class.blink::AXObject"*)** %5, align 8
  %7 = tail call %"class.blink::Node"* %6(%"class.blink::AXObject"* %0) #13
  %8 = icmp eq %"class.blink::Node"* %7, null
  br i1 %8, label %175, label %9

9:                                                ; preds = %2
  %10 = tail call i32 @_ZN5blink18IdentifiersFactory12IntIdForNodeEPNS_4NodeE(%"class.blink::Node"* nonnull %7) #13
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %175, label %12

12:                                               ; preds = %9
  %13 = tail call i8* @_Znwm(i64 48) #12
  %14 = bitcast i8* %13 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility13AXRelatedNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 16
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds i8, i8* %13, i64 24
  %17 = bitcast i8* %16 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 32
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %13, i64 40
  %20 = bitcast i8* %19 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %20, align 8
  %21 = getelementptr inbounds i8, i8* %13, i64 8
  %22 = bitcast i8* %21 to i32*
  store i32 %10, i32* %22, align 8
  %23 = ptrtoint i8* %13 to i64
  %24 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %175

28:                                               ; preds = %12
  %29 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %7, i64 1, i32 3
  %30 = bitcast %"class.blink::Member.138"* %29 to %"class.blink::ElementData"**
  %31 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %30, align 8
  %32 = icmp eq %"class.blink::ElementData"* %31, null
  br i1 %32, label %90, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 0, i32 3, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %90, label %37

37:                                               ; preds = %33
  %38 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names7kIdAttrE, align 8
  %39 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 0, i32 0, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %50, label %43

43:                                               ; preds = %37
  %44 = bitcast %"class.blink::ElementData"* %31 to %"class.blink::UniqueElementData"*
  %45 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 1, i32 1
  %46 = bitcast %"class.blink::Member.170"* %45 to %"class.blink::Attribute"**
  %47 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %44, i64 0, i32 2, i32 0, i32 0, i32 2
  %49 = load i32, i32* %48, align 4
  br label %55

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %31, i64 1
  %52 = bitcast %"class.blink::ElementData"* %51 to %"class.blink::Attribute"*
  %53 = lshr i32 %40, 1
  %54 = and i32 %53, 268435455
  br label %55

55:                                               ; preds = %50, %43
  %56 = phi %"class.blink::Attribute"* [ %52, %50 ], [ %47, %43 ]
  %57 = phi i32 [ %54, %50 ], [ %49, %43 ]
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %56, i64 %58
  %60 = icmp eq i32 %57, 0
  br i1 %60, label %88, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %38, i64 0, i32 0, i32 0
  %63 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %63, i64 0, i32 3, i32 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %63, i64 0, i32 4, i32 0, i32 0, i32 0
  br label %66

66:                                               ; preds = %81, %61
  %67 = phi %"class.blink::Attribute"* [ %56, %61 ], [ %82, %81 ]
  %68 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %68, align 8
  %70 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %69, %63
  br i1 %70, label %84, label %71

71:                                               ; preds = %66
  %72 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %69, i64 0, i32 3, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %73, %74
  br i1 %75, label %76, label %81

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %69, i64 0, i32 4, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %78, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %76, %71
  %82 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %67, i64 1
  %83 = icmp eq %"class.blink::Attribute"* %82, %59
  br i1 %83, label %88, label %66

84:                                               ; preds = %76, %66
  %85 = icmp eq %"class.blink::Attribute"* %67, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %67, i64 0, i32 1
  br label %92

88:                                               ; preds = %81, %84, %55
  %89 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %92

90:                                               ; preds = %33, %28
  %91 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %92

92:                                               ; preds = %86, %88, %90
  %93 = phi %"class.WTF::AtomicString"* [ %91, %90 ], [ %89, %88 ], [ %87, %86 ]
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %136, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load atomic i32, i32* %98 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %114

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i33
  %106 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %105, i33 1) #13
  %107 = extractvalue { i33, i1 } %106, 1
  %108 = extractvalue { i33, i1 } %106, 0
  %109 = icmp slt i33 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %111, label %112, !prof !2

111:                                              ; preds = %102
  tail call void @llvm.trap() #13
  unreachable

112:                                              ; preds = %102
  %113 = trunc i33 %108 to i32
  store i32 %113, i32* %103, align 4
  br label %114

114:                                              ; preds = %112, %97
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %136, label %118

118:                                              ; preds = %114
  %119 = load atomic i32, i32* %98 monotonic, align 4
  %120 = and i32 %119, 2
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %134

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i33
  %126 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %125, i33 1) #13
  %127 = extractvalue { i33, i1 } %126, 1
  %128 = extractvalue { i33, i1 } %126, 0
  %129 = icmp slt i33 %128, 0
  %130 = or i1 %127, %129
  br i1 %130, label %131, label %132, !prof !2

131:                                              ; preds = %122
  tail call void @llvm.trap() #13
  unreachable

132:                                              ; preds = %122
  %133 = trunc i33 %128 to i32
  store i32 %133, i32* %123, align 4
  br label %134

134:                                              ; preds = %118, %132
  %135 = bitcast i8* %15 to %"class.crdtp::detail::ValueMaybe"*
  tail call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %135, %"class.WTF::StringImpl"* nonnull %95) #13
  br label %136

136:                                              ; preds = %92, %134, %114
  %137 = icmp eq %"class.WTF::String"* %1, null
  br i1 %137, label %161, label %138

138:                                              ; preds = %136
  %139 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %141 = icmp eq %"class.WTF::StringImpl"* %140, null
  br i1 %141, label %159, label %142

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = and i32 %144, 2
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %159

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = zext i32 %149 to i33
  %151 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %150, i33 1) #13
  %152 = extractvalue { i33, i1 } %151, 1
  %153 = extractvalue { i33, i1 } %151, 0
  %154 = icmp slt i33 %153, 0
  %155 = or i1 %152, %154
  br i1 %155, label %156, label %157, !prof !2

156:                                              ; preds = %147
  tail call void @llvm.trap() #13
  unreachable

157:                                              ; preds = %147
  %158 = trunc i33 %153 to i32
  store i32 %158, i32* %148, align 4
  br label %159

159:                                              ; preds = %138, %142, %157
  %160 = bitcast i8* %18 to %"class.crdtp::detail::ValueMaybe"*
  tail call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %160, %"class.WTF::StringImpl"* %140) #13
  br label %161

161:                                              ; preds = %136, %159
  br i1 %96, label %175, label %162

162:                                              ; preds = %161
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %95) #13
  br label %175

175:                                              ; preds = %12, %174, %171, %161, %9, %2
  %176 = phi i64 [ 0, %2 ], [ 0, %9 ], [ %23, %12 ], [ %23, %161 ], [ %23, %171 ], [ %23, %174 ]
  %177 = inttoptr i64 %176 to %"class.blink::protocol::Accessibility::AXRelatedNode"*
  ret %"class.blink::protocol::Accessibility::AXRelatedNode"* %177
}

declare i32 @_ZN5blink18IdentifiersFactory12IntIdForNodeEPNS_4NodeE(%"class.blink::Node"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERNS_10HeapVectorINS_6MemberINS_23NameSourceRelatedObjectEEELj0EEERKN3WTF6StringE(%"class.blink::HeapVector.796"* dereferenceable(16), %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::unique_ptr.15", align 8
  %4 = tail call i8* @_Znwm(i64 24) #12
  %5 = bitcast i8* %4 to %"class.std::__1::vector"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #13
  %6 = ptrtoint i8* %4 to i64
  %7 = getelementptr inbounds %"class.blink::HeapVector.796", %"class.blink::HeapVector.796"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.blink::HeapVector.796", %"class.blink::HeapVector.796"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.std::__1::unique_ptr.15"* %3 to i8*
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %3, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to %"class.std::__1::unique_ptr.15"**
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = bitcast i8* %16 to %"class.std::__1::unique_ptr.15"**
  %18 = bitcast i8* %14 to i64*
  br label %49

19:                                               ; preds = %81, %2
  %20 = call i8* @_Znwm(i64 40) #12
  %21 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 32, i1 false) #13
  %23 = bitcast i8* %20 to %"class.blink::protocol::Accessibility::AXValue"*
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #13
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %32
  call void @llvm.trap() #13
  unreachable

42:                                               ; preds = %32
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %33, align 4
  br label %44

44:                                               ; preds = %42, %27, %19
  %45 = ptrtoint %"class.WTF::StringImpl"* %25 to i64
  %46 = bitcast i8* %22 to i64*
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %20, i64 24
  %48 = bitcast i8* %47 to i64*
  store i64 %6, i64* %48, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %23

49:                                               ; preds = %11, %81
  %50 = phi i32 [ 0, %11 ], [ %82, %81 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* inttoptr (i64 -6148914691236517206 to %"class.blink::protocol::Accessibility::AXRelatedNode"*), %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %51 = call dereferenceable(8) %"class.blink::Member.802"* @_ZN3WTF6VectorIN5blink6MemberINS1_23NameSourceRelatedObjectEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.799"* %7, i32 %50) #13
  %52 = getelementptr inbounds %"class.blink::Member.802", %"class.blink::Member.802"* %51, i64 0, i32 0, i32 0
  %53 = load %"class.blink::NameSourceRelatedObject"*, %"class.blink::NameSourceRelatedObject"** %52, align 8
  %54 = getelementptr inbounds %"class.blink::NameSourceRelatedObject", %"class.blink::NameSourceRelatedObject"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %54, align 8
  %56 = call dereferenceable(8) %"class.blink::Member.802"* @_ZN3WTF6VectorIN5blink6MemberINS1_23NameSourceRelatedObjectEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.799"* %7, i32 %50) #13
  %57 = getelementptr inbounds %"class.blink::Member.802", %"class.blink::Member.802"* %56, i64 0, i32 0, i32 0
  %58 = load %"class.blink::NameSourceRelatedObject"*, %"class.blink::NameSourceRelatedObject"** %57, align 8
  %59 = getelementptr inbounds %"class.blink::NameSourceRelatedObject", %"class.blink::NameSourceRelatedObject"* %58, i64 0, i32 1
  %60 = call %"class.blink::protocol::Accessibility::AXRelatedNode"* @_ZN5blink22RelatedNodeForAXObjectERKNS_8AXObjectEPN3WTF6StringE(%"class.blink::AXObject"* dereferenceable(120) %55, %"class.WTF::String"* %59)
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* %60, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %61 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %60, null
  %62 = ptrtoint %"class.blink::protocol::Accessibility::AXRelatedNode"* %60 to i64
  br i1 %61, label %63, label %64

63:                                               ; preds = %49
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  br label %81

64:                                               ; preds = %49
  %65 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %15, align 8
  %66 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %17, align 8
  %67 = icmp ult %"class.std::__1::unique_ptr.15"* %65, %66
  br i1 %67, label %68, label %72

68:                                               ; preds = %64
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %69 = bitcast %"class.std::__1::unique_ptr.15"* %65 to i64*
  store i64 %62, i64* %69, align 8
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %65, i64 1
  %71 = ptrtoint %"class.std::__1::unique_ptr.15"* %70 to i64
  store i64 %71, i64* %18, align 8
  br label %73

72:                                               ; preds = %64
  call void @_ZNSt3__16vectorINS_10unique_ptrIN5blink8protocol13Accessibility13AXRelatedNodeENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE24__emplace_back_slow_pathIJS8_EEEvDpOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %3) #13
  br label %73

73:                                               ; preds = %72, %68
  %74 = load %"class.blink::protocol::Accessibility::AXRelatedNode"*, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %75 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %74, null
  br i1 %75, label %81, label %76

76:                                               ; preds = %73
  %77 = bitcast %"class.blink::protocol::Accessibility::AXRelatedNode"* %74 to void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)***
  %78 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)**, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*** %77, align 8
  %79 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %78, i64 2
  %80 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %79, align 8
  call void %80(%"class.blink::protocol::Accessibility::AXRelatedNode"* nonnull %74) #13
  br label %81

81:                                               ; preds = %63, %73, %76
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  %82 = add nuw i32 %50, 1
  %83 = load i32, i32* %8, align 4
  %84 = icmp ult i32 %82, %83
  br i1 %84, label %49, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERNS_10HeapVectorINS_6MemberINS_8AXObjectEEELj0EEERKN3WTF6StringE(%"class.blink::HeapVector"* dereferenceable(16), %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::unique_ptr.15", align 8
  %4 = tail call i8* @_Znwm(i64 24) #12
  %5 = bitcast i8* %4 to %"class.std::__1::vector"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #13
  %6 = ptrtoint i8* %4 to i64
  %7 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %0, i64 0, i32 0
  %12 = bitcast %"class.std::__1::unique_ptr.15"* %3 to i8*
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %3, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to %"class.std::__1::unique_ptr.15"**
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = bitcast i8* %16 to %"class.std::__1::unique_ptr.15"**
  %18 = bitcast i8* %14 to i64*
  br label %49

19:                                               ; preds = %75, %2
  %20 = call i8* @_Znwm(i64 40) #12
  %21 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility7AXValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 32, i1 false) #13
  %23 = bitcast i8* %20 to %"class.blink::protocol::Accessibility::AXValue"*
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #13
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %32
  call void @llvm.trap() #13
  unreachable

42:                                               ; preds = %32
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %33, align 4
  br label %44

44:                                               ; preds = %42, %27, %19
  %45 = ptrtoint %"class.WTF::StringImpl"* %25 to i64
  %46 = bitcast i8* %22 to i64*
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %20, i64 24
  %48 = bitcast i8* %47 to i64*
  store i64 %6, i64* %48, align 8
  ret %"class.blink::protocol::Accessibility::AXValue"* %23

49:                                               ; preds = %10, %75
  %50 = phi i32 [ 0, %10 ], [ %76, %75 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* inttoptr (i64 -6148914691236517206 to %"class.blink::protocol::Accessibility::AXRelatedNode"*), %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %51 = call dereferenceable(8) %"class.blink::Member.46"* @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"* %11, i32 %50) #13
  %52 = getelementptr inbounds %"class.blink::Member.46", %"class.blink::Member.46"* %51, i64 0, i32 0, i32 0
  %53 = load %"class.blink::AXObject"*, %"class.blink::AXObject"** %52, align 8
  %54 = call %"class.blink::protocol::Accessibility::AXRelatedNode"* @_ZN5blink22RelatedNodeForAXObjectERKNS_8AXObjectEPN3WTF6StringE(%"class.blink::AXObject"* dereferenceable(120) %53, %"class.WTF::String"* null)
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* %54, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %55 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %54, null
  %56 = ptrtoint %"class.blink::protocol::Accessibility::AXRelatedNode"* %54 to i64
  br i1 %55, label %57, label %58

57:                                               ; preds = %49
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  br label %75

58:                                               ; preds = %49
  %59 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %15, align 8
  %60 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %17, align 8
  %61 = icmp ult %"class.std::__1::unique_ptr.15"* %59, %60
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %63 = bitcast %"class.std::__1::unique_ptr.15"* %59 to i64*
  store i64 %56, i64* %63, align 8
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %59, i64 1
  %65 = ptrtoint %"class.std::__1::unique_ptr.15"* %64 to i64
  store i64 %65, i64* %18, align 8
  br label %67

66:                                               ; preds = %58
  call void @_ZNSt3__16vectorINS_10unique_ptrIN5blink8protocol13Accessibility13AXRelatedNodeENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE24__emplace_back_slow_pathIJS8_EEEvDpOT_(%"class.std::__1::vector"* nonnull %5, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %3) #13
  br label %67

67:                                               ; preds = %66, %62
  %68 = load %"class.blink::protocol::Accessibility::AXRelatedNode"*, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %13, align 8
  %69 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %68, null
  br i1 %69, label %75, label %70

70:                                               ; preds = %67
  %71 = bitcast %"class.blink::protocol::Accessibility::AXRelatedNode"* %68 to void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)***
  %72 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)**, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %72, i64 2
  %74 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %73, align 8
  call void %74(%"class.blink::protocol::Accessibility::AXRelatedNode"* nonnull %68) #13
  br label %75

75:                                               ; preds = %57, %67, %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  %76 = add nuw i32 %50, 1
  %77 = load i32, i32* %7, align 4
  %78 = icmp ult i32 %76, %77
  br i1 %78, label %49, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink15ValueSourceTypeEN2ax5mojom8NameFromE(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %6 [
    i32 2, label %7
    i32 3, label %7
    i32 8, label %7
    i32 9, label %7
    i32 5, label %3
    i32 6, label %4
    i32 4, label %5
    i32 7, label %5
  ]

3:                                                ; preds = %1
  br label %7

4:                                                ; preds = %1
  br label %7

5:                                                ; preds = %1, %1
  br label %7

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %1, %1, %1, %1, %6, %5, %4, %3
  %8 = phi i8* [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum8ImplicitE, i64 0, i64 0), %6 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum14RelatedElementE, i64 0, i64 0), %5 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum11PlaceholderE, i64 0, i64 0), %4 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum8ContentsE, i64 0, i64 0), %3 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum9AttributeE, i64 0, i64 0), %1 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum9AttributeE, i64 0, i64 0), %1 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum9AttributeE, i64 0, i64 0), %1 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility21AXValueSourceTypeEnum9AttributeE, i64 0, i64 0), %1 ]
  %9 = tail call i64 @strlen(i8* nonnull %8) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* %8, i64 %9) #13
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  ret %"class.WTF::StringImpl"* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink16NativeSourceTypeENS_20AXTextFromNativeHTMLE(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %10 [
    i32 0, label %11
    i32 1, label %3
    i32 2, label %4
    i32 3, label %5
    i32 5, label %6
    i32 6, label %7
    i32 4, label %8
    i32 7, label %9
  ]

3:                                                ; preds = %1
  br label %11

4:                                                ; preds = %1
  br label %11

5:                                                ; preds = %1
  br label %11

6:                                                ; preds = %1
  br label %11

7:                                                ; preds = %1
  br label %11

8:                                                ; preds = %1
  br label %11

9:                                                ; preds = %1
  br label %11

10:                                               ; preds = %1
  br label %11

11:                                               ; preds = %1, %10, %9, %8, %7, %6, %5, %4, %3
  %12 = phi i8* [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5OtherE, i64 0, i64 0), %10 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5TitleE, i64 0, i64 0), %9 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum6LegendE, i64 0, i64 0), %8 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum12TablecaptionE, i64 0, i64 0), %7 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum14RubyannotationE, i64 0, i64 0), %6 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum12LabelwrappedE, i64 0, i64 0), %5 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum8LabelforE, i64 0, i64 0), %4 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum5LabelE, i64 0, i64 0), %3 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility27AXValueNativeSourceTypeEnum10FigcaptionE, i64 0, i64 0), %1 ]
  %13 = tail call i64 @strlen(i8* nonnull %12) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* %12, i64 %13) #13
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  ret %"class.WTF::StringImpl"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.blink::protocol::Accessibility::AXValueSource"* @_ZN5blink17CreateValueSourceERNS_10NameSourceE(%"class.blink::NameSource"* dereferenceable(56)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = tail call %"class.WTF::StringImpl"* @_ZN5blink15ValueSourceTypeEN2ax5mojom8NameFromE(i32 %7)
  %9 = tail call i8* @_Znwm(i64 104) #12
  %10 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol13Accessibility13AXValueSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = getelementptr inbounds i8, i8* %9, i64 32
  %13 = getelementptr inbounds i8, i8* %9, i64 56
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds i8, i8* %9, i64 64
  %15 = getelementptr inbounds i8, i8* %9, i64 88
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds i8, i8* %9, i64 96
  %17 = bitcast i8* %16 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 17, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 18, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 18, i1 false) #13
  %18 = bitcast i8* %9 to %"class.blink::protocol::Accessibility::AXValueSource"*
  %19 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %19, label %35, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i33
  %29 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %28, i33 1) #13
  %30 = extractvalue { i33, i1 } %29, 1
  %31 = extractvalue { i33, i1 } %29, 0
  %32 = icmp slt i33 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %34, label %38, !prof !2

34:                                               ; preds = %25
  tail call void @llvm.trap() #13
  unreachable

35:                                               ; preds = %20, %1
  %36 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %37 = bitcast i8* %11 to i64*
  store i64 %36, i64* %37, align 8
  br label %58

38:                                               ; preds = %25
  %39 = trunc i33 %31 to i32
  store i32 %39, i32* %26, align 4
  %40 = bitcast i8* %11 to %"class.WTF::StringImpl"**
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %43 = bitcast i8* %11 to i64*
  store i64 %42, i64* %43, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %41) #13
  br label %58

58:                                               ; preds = %35, %57, %54, %38
  %59 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 7
  %60 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %186, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 4
  %65 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %64, align 8
  %66 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names19kAriaLabelledbyAttrE, align 8
  %67 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %65, i64 0, i32 0, i32 0
  %68 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %67, align 8
  %69 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %66, i64 0, i32 0, i32 0
  %70 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %69, align 8
  %71 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %68, %70
  br i1 %71, label %77, label %72

72:                                               ; preds = %63
  %73 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names18kAriaLabeledbyAttrE, align 8
  %74 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %73, i64 0, i32 0, i32 0
  %75 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %74, align 8
  %76 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %68, %75
  br i1 %76, label %77, label %148

77:                                               ; preds = %72, %63
  %78 = bitcast %"class.WTF::String"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #13
  %79 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum9IdrefListE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum9IdrefListE, i64 0, i64 0), i64 %79) #13
  %80 = call %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERNS_10HeapVectorINS_6MemberINS_23NameSourceRelatedObjectEEELj0EEERKN3WTF6StringE(%"class.blink::HeapVector.796"* dereferenceable(16) %59, %"class.WTF::String"* nonnull dereferenceable(8) %2)
  %81 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %80 to i64
  %82 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %84, label %98, label %85

85:                                               ; preds = %77
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = and i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  br i1 %89, label %92, label %94

92:                                               ; preds = %85
  %93 = add i32 %91, -1
  store i32 %93, i32* %90, align 4
  br label %94

94:                                               ; preds = %92, %85
  %95 = phi i32 [ %93, %92 ], [ %91, %85 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %83) #13
  br label %98

98:                                               ; preds = %77, %94, %97
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %78) #13
  %99 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %137, label %102

102:                                              ; preds = %98
  %103 = call i8* @_Znwm(i64 24) #12
  %104 = bitcast i8* %103 to i32 (...)***
  %105 = getelementptr inbounds i8, i8* %103, i64 8
  %106 = bitcast i8* %105 to i32*
  store i32 4, i32* %106, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8protocol11StringValueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %104, align 8
  %107 = getelementptr inbounds i8, i8* %103, i64 16
  %108 = bitcast i8* %107 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %100, %"class.WTF::StringImpl"** %108, align 8
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %102
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #13
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !2

122:                                              ; preds = %113
  call void @llvm.trap() #13
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %102, %123
  %126 = ptrtoint i8* %103 to i64
  %127 = getelementptr inbounds %"class.blink::protocol::Accessibility::AXValue", %"class.blink::protocol::Accessibility::AXValue"* %80, i64 0, i32 2
  %128 = getelementptr inbounds %"class.crdtp::detail::PtrMaybe", %"class.crdtp::detail::PtrMaybe"* %127, i64 0, i32 0, i32 0, i32 0, i32 0
  %129 = load %"class.blink::protocol::Value"*, %"class.blink::protocol::Value"** %128, align 8
  %130 = bitcast %"class.crdtp::detail::PtrMaybe"* %127 to i64*
  store i64 %126, i64* %130, align 8
  %131 = icmp eq %"class.blink::protocol::Value"* %129, null
  br i1 %131, label %137, label %132

132:                                              ; preds = %125
  %133 = bitcast %"class.blink::protocol::Value"* %129 to void (%"class.blink::protocol::Value"*)***
  %134 = load void (%"class.blink::protocol::Value"*)**, void (%"class.blink::protocol::Value"*)*** %133, align 8
  %135 = getelementptr inbounds void (%"class.blink::protocol::Value"*)*, void (%"class.blink::protocol::Value"*)** %134, i64 2
  %136 = load void (%"class.blink::protocol::Value"*)*, void (%"class.blink::protocol::Value"*)** %135, align 8
  call void %136(%"class.blink::protocol::Value"* nonnull %129) #13
  br label %137

137:                                              ; preds = %125, %132, %98
  %138 = getelementptr inbounds i8, i8* %9, i64 40
  %139 = bitcast i8* %138 to %"class.blink::protocol::Accessibility::AXValue"**
  %140 = load %"class.blink::protocol::Accessibility::AXValue"*, %"class.blink::protocol::Accessibility::AXValue"** %139, align 8
  %141 = bitcast i8* %138 to i64*
  store i64 %81, i64* %141, align 8
  %142 = icmp eq %"class.blink::protocol::Accessibility::AXValue"* %140, null
  br i1 %142, label %225, label %143

143:                                              ; preds = %137
  %144 = bitcast %"class.blink::protocol::Accessibility::AXValue"* %140 to void (%"class.blink::protocol::Accessibility::AXValue"*)***
  %145 = load void (%"class.blink::protocol::Accessibility::AXValue"*)**, void (%"class.blink::protocol::Accessibility::AXValue"*)*** %144, align 8
  %146 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %145, i64 2
  %147 = load void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %146, align 8
  call void %147(%"class.blink::protocol::Accessibility::AXValue"* nonnull %140) #13
  br label %225

148:                                              ; preds = %72
  %149 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink11g_null_nameE, align 8
  %150 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %149, i64 0, i32 0, i32 0
  %151 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %150, align 8
  %152 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %68, %151
  br i1 %152, label %153, label %225

153:                                              ; preds = %148
  %154 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %154) #13
  %155 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum8NodeListE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum8NodeListE, i64 0, i64 0), i64 %155) #13
  %156 = call %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink26CreateRelatedNodeListValueERNS_10HeapVectorINS_6MemberINS_23NameSourceRelatedObjectEEELj0EEERKN3WTF6StringE(%"class.blink::HeapVector.796"* dereferenceable(16) %59, %"class.WTF::String"* nonnull dereferenceable(8) %3)
  %157 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %156 to i64
  %158 = getelementptr inbounds i8, i8* %9, i64 72
  %159 = bitcast i8* %158 to %"class.blink::protocol::Accessibility::AXValue"**
  %160 = load %"class.blink::protocol::Accessibility::AXValue"*, %"class.blink::protocol::Accessibility::AXValue"** %159, align 8
  %161 = bitcast i8* %158 to i64*
  store i64 %157, i64* %161, align 8
  %162 = icmp eq %"class.blink::protocol::Accessibility::AXValue"* %160, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %153
  %164 = bitcast %"class.blink::protocol::Accessibility::AXValue"* %160 to void (%"class.blink::protocol::Accessibility::AXValue"*)***
  %165 = load void (%"class.blink::protocol::Accessibility::AXValue"*)**, void (%"class.blink::protocol::Accessibility::AXValue"*)*** %164, align 8
  %166 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %165, i64 2
  %167 = load void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %166, align 8
  call void %167(%"class.blink::protocol::Accessibility::AXValue"* nonnull %160) #13
  br label %168

168:                                              ; preds = %153, %163
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #13
  br label %185

185:                                              ; preds = %168, %181, %184
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %154) #13
  br label %225

186:                                              ; preds = %58
  %187 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 5
  %188 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %187, i64 0, i32 0, i32 0, i32 0
  %189 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %188, align 8
  %190 = icmp eq %"class.WTF::StringImpl"* %189, null
  br i1 %190, label %225, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %187, i64 0, i32 0
  %193 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %193) #13
  %194 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum6StringE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum6StringE, i64 0, i64 0), i64 %194) #13
  %195 = call %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink11CreateValueERKN3WTF6StringES3_(%"class.WTF::String"* dereferenceable(8) %192, %"class.WTF::String"* nonnull dereferenceable(8) %4)
  %196 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %195 to i64
  %197 = getelementptr inbounds i8, i8* %9, i64 40
  %198 = bitcast i8* %197 to %"class.blink::protocol::Accessibility::AXValue"**
  %199 = load %"class.blink::protocol::Accessibility::AXValue"*, %"class.blink::protocol::Accessibility::AXValue"** %198, align 8
  %200 = bitcast i8* %197 to i64*
  store i64 %196, i64* %200, align 8
  %201 = icmp eq %"class.blink::protocol::Accessibility::AXValue"* %199, null
  br i1 %201, label %207, label %202

202:                                              ; preds = %191
  %203 = bitcast %"class.blink::protocol::Accessibility::AXValue"* %199 to void (%"class.blink::protocol::Accessibility::AXValue"*)***
  %204 = load void (%"class.blink::protocol::Accessibility::AXValue"*)**, void (%"class.blink::protocol::Accessibility::AXValue"*)*** %203, align 8
  %205 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %204, i64 2
  %206 = load void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %205, align 8
  call void %206(%"class.blink::protocol::Accessibility::AXValue"* nonnull %199) #13
  br label %207

207:                                              ; preds = %191, %202
  %208 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %209 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %208, align 8
  %210 = icmp eq %"class.WTF::StringImpl"* %209, null
  br i1 %210, label %224, label %211

211:                                              ; preds = %207
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %209, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %213 = load atomic i32, i32* %212 monotonic, align 4
  %214 = and i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %209, i64 0, i32 0
  %217 = load i32, i32* %216, align 4
  br i1 %215, label %218, label %220

218:                                              ; preds = %211
  %219 = add i32 %217, -1
  store i32 %219, i32* %216, align 4
  br label %220

220:                                              ; preds = %218, %211
  %221 = phi i32 [ %219, %218 ], [ %217, %211 ]
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %220
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %209) #13
  br label %224

224:                                              ; preds = %207, %220, %223
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %193) #13
  br label %225

225:                                              ; preds = %137, %143, %186, %224, %185, %148
  %226 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 0, i32 0, i32 0
  %227 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %226, align 8
  %228 = icmp eq %"class.WTF::StringImpl"* %227, null
  br i1 %228, label %263, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 0
  %231 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %231) #13
  %232 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum14ComputedStringE, i64 0, i64 0)) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol13Accessibility15AXValueTypeEnum14ComputedStringE, i64 0, i64 0), i64 %232) #13
  %233 = call %"class.blink::protocol::Accessibility::AXValue"* @_ZN5blink11CreateValueERKN3WTF6StringES3_(%"class.WTF::String"* dereferenceable(8) %230, %"class.WTF::String"* nonnull dereferenceable(8) %5)
  %234 = ptrtoint %"class.blink::protocol::Accessibility::AXValue"* %233 to i64
  %235 = getelementptr inbounds i8, i8* %9, i64 16
  %236 = bitcast i8* %235 to %"class.blink::protocol::Accessibility::AXValue"**
  %237 = load %"class.blink::protocol::Accessibility::AXValue"*, %"class.blink::protocol::Accessibility::AXValue"** %236, align 8
  %238 = bitcast i8* %235 to i64*
  store i64 %234, i64* %238, align 8
  %239 = icmp eq %"class.blink::protocol::Accessibility::AXValue"* %237, null
  br i1 %239, label %245, label %240

240:                                              ; preds = %229
  %241 = bitcast %"class.blink::protocol::Accessibility::AXValue"* %237 to void (%"class.blink::protocol::Accessibility::AXValue"*)***
  %242 = load void (%"class.blink::protocol::Accessibility::AXValue"*)**, void (%"class.blink::protocol::Accessibility::AXValue"*)*** %241, align 8
  %243 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %242, i64 2
  %244 = load void (%"class.blink::protocol::Accessibility::AXValue"*)*, void (%"class.blink::protocol::Accessibility::AXValue"*)** %243, align 8
  call void %244(%"class.blink::protocol::Accessibility::AXValue"* nonnull %237) #13
  br label %245

245:                                              ; preds = %229, %240
  %246 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %247 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %246, align 8
  %248 = icmp eq %"class.WTF::StringImpl"* %247, null
  br i1 %248, label %262, label %249

249:                                              ; preds = %245
  %250 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %247, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %251 = load atomic i32, i32* %250 monotonic, align 4
  %252 = and i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %247, i64 0, i32 0
  %255 = load i32, i32* %254, align 4
  br i1 %253, label %256, label %258

256:                                              ; preds = %249
  %257 = add i32 %255, -1
  store i32 %257, i32* %254, align 4
  br label %258

258:                                              ; preds = %256, %249
  %259 = phi i32 [ %257, %256 ], [ %255, %249 ]
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

261:                                              ; preds = %258
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %247) #13
  br label %262

262:                                              ; preds = %245, %258, %261
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %231) #13
  br label %263

263:                                              ; preds = %262, %225
  %264 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 4
  %265 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %264, align 8
  %266 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink11g_null_nameE, align 8
  %267 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %265, i64 0, i32 0, i32 0
  %268 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %267, align 8
  %269 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %266, i64 0, i32 0, i32 0
  %270 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %269, align 8
  %271 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %268, %270
  br i1 %271, label %296, label %272

272:                                              ; preds = %263
  %273 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %268, i64 0, i32 3, i32 0, i32 0, i32 0
  %274 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  %275 = icmp eq %"class.WTF::StringImpl"* %274, null
  br i1 %275, label %293, label %276

276:                                              ; preds = %272
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = and i32 %278, 2
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %293

281:                                              ; preds = %276
  %282 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 0
  %283 = load i32, i32* %282, align 4
  %284 = zext i32 %283 to i33
  %285 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %284, i33 1) #13
  %286 = extractvalue { i33, i1 } %285, 1
  %287 = extractvalue { i33, i1 } %285, 0
  %288 = icmp slt i33 %287, 0
  %289 = or i1 %286, %288
  br i1 %289, label %290, label %291, !prof !2

290:                                              ; preds = %281
  call void @llvm.trap() #13
  unreachable

291:                                              ; preds = %281
  %292 = trunc i33 %287 to i32
  store i32 %292, i32* %282, align 4
  br label %293

293:                                              ; preds = %272, %276, %291
  %294 = getelementptr inbounds i8, i8* %9, i64 24
  %295 = bitcast i8* %294 to %"class.crdtp::detail::ValueMaybe"*
  call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %295, %"class.WTF::StringImpl"* %274) #13
  br label %296

296:                                              ; preds = %263, %293
  %297 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 1
  %298 = load i8, i8* %297, align 8, !range !3
  %299 = icmp eq i8 %298, 0
  br i1 %299, label %303, label %300

300:                                              ; preds = %296
  %301 = getelementptr inbounds i8, i8* %9, i64 49
  store i8 1, i8* %301, align 1
  %302 = getelementptr inbounds i8, i8* %9, i64 48
  store i8 1, i8* %302, align 1
  br label %303

303:                                              ; preds = %296, %300
  %304 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 2
  %305 = load i8, i8* %304, align 1, !range !3
  %306 = icmp eq i8 %305, 0
  br i1 %306, label %310, label %307

307:                                              ; preds = %303
  %308 = getelementptr inbounds i8, i8* %9, i64 81
  store i8 1, i8* %308, align 1
  %309 = getelementptr inbounds i8, i8* %9, i64 80
  store i8 1, i8* %309, align 1
  br label %310

310:                                              ; preds = %303, %307
  %311 = getelementptr inbounds %"class.blink::NameSource", %"class.blink::NameSource"* %0, i64 0, i32 6
  %312 = load i32, i32* %311, align 8
  %313 = icmp eq i32 %312, -1
  br i1 %313, label %412, label %314

314:                                              ; preds = %310
  %315 = call %"class.WTF::StringImpl"* @_ZN5blink16NativeSourceTypeENS_20AXTextFromNativeHTMLE(i32 %312)
  %316 = icmp eq %"class.WTF::StringImpl"* %315, null
  br i1 %316, label %334, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %319 = load atomic i32, i32* %318 monotonic, align 4
  %320 = and i32 %319, 2
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %353

322:                                              ; preds = %317
  %323 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 0
  %324 = load i32, i32* %323, align 4
  %325 = zext i32 %324 to i33
  %326 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %325, i33 1) #13
  %327 = extractvalue { i33, i1 } %326, 1
  %328 = extractvalue { i33, i1 } %326, 0
  %329 = icmp slt i33 %328, 0
  %330 = or i1 %327, %329
  br i1 %330, label %331, label %332, !prof !2

331:                                              ; preds = %322
  call void @llvm.trap() #13
  unreachable

332:                                              ; preds = %322
  %333 = trunc i33 %328 to i32
  store i32 %333, i32* %323, align 4
  br label %353

334:                                              ; preds = %314
  %335 = bitcast i8* %14 to i64*
  %336 = bitcast i8* %14 to %"class.WTF::StringImpl"**
  %337 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %336, align 8
  store i64 0, i64* %335, align 8
  %338 = icmp eq %"class.WTF::StringImpl"* %337, null
  br i1 %338, label %352, label %339

339:                                              ; preds = %334
  %340 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %337, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %341 = load atomic i32, i32* %340 monotonic, align 4
  %342 = and i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %337, i64 0, i32 0
  %345 = load i32, i32* %344, align 4
  br i1 %343, label %346, label %348

346:                                              ; preds = %339
  %347 = add i32 %345, -1
  store i32 %347, i32* %344, align 4
  br label %348

348:                                              ; preds = %346, %339
  %349 = phi i32 [ %347, %346 ], [ %345, %339 ]
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %352

351:                                              ; preds = %348
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %337) #13
  br label %352

352:                                              ; preds = %334, %348, %351
  store i8 1, i8* %13, align 8
  br label %412

353:                                              ; preds = %332, %317
  %354 = load atomic i32, i32* %318 monotonic, align 4
  %355 = and i32 %354, 2
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %369

357:                                              ; preds = %353
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 0
  %359 = load i32, i32* %358, align 4
  %360 = zext i32 %359 to i33
  %361 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %360, i33 1) #13
  %362 = extractvalue { i33, i1 } %361, 1
  %363 = extractvalue { i33, i1 } %361, 0
  %364 = icmp slt i33 %363, 0
  %365 = or i1 %362, %364
  br i1 %365, label %366, label %367, !prof !2

366:                                              ; preds = %357
  call void @llvm.trap() #13
  unreachable

367:                                              ; preds = %357
  %368 = trunc i33 %363 to i32
  store i32 %368, i32* %358, align 4
  br label %369

369:                                              ; preds = %367, %353
  %370 = ptrtoint %"class.WTF::StringImpl"* %315 to i64
  %371 = bitcast i8* %14 to i64*
  %372 = bitcast i8* %14 to %"class.WTF::StringImpl"**
  %373 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %372, align 8
  store i64 %370, i64* %371, align 8
  %374 = icmp eq %"class.WTF::StringImpl"* %373, null
  br i1 %374, label %388, label %375

375:                                              ; preds = %369
  %376 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %377 = load atomic i32, i32* %376 monotonic, align 4
  %378 = and i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 0
  %381 = load i32, i32* %380, align 4
  br i1 %379, label %382, label %384

382:                                              ; preds = %375
  %383 = add i32 %381, -1
  store i32 %383, i32* %380, align 4
  br label %384

384:                                              ; preds = %382, %375
  %385 = phi i32 [ %383, %382 ], [ %381, %375 ]
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %388

387:                                              ; preds = %384
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %373) #13
  br label %388

388:                                              ; preds = %369, %384, %387
  store i8 1, i8* %13, align 8
  %389 = load atomic i32, i32* %318 monotonic, align 4
  %390 = and i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 0
  %393 = load i32, i32* %392, align 4
  br i1 %391, label %394, label %396

394:                                              ; preds = %388
  %395 = add i32 %393, -1
  store i32 %395, i32* %392, align 4
  br label %396

396:                                              ; preds = %394, %388
  %397 = phi i32 [ %395, %394 ], [ %393, %388 ]
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %401

399:                                              ; preds = %396
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %315) #13
  %400 = load i32, i32* %392, align 4
  br label %401

401:                                              ; preds = %396, %399
  %402 = phi i32 [ %397, %396 ], [ %400, %399 ]
  %403 = load atomic i32, i32* %318 monotonic, align 4
  %404 = and i32 %403, 2
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %408

406:                                              ; preds = %401
  %407 = add i32 %402, -1
  store i32 %407, i32* %392, align 4
  br label %408

408:                                              ; preds = %406, %401
  %409 = phi i32 [ %407, %406 ], [ %402, %401 ]
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %411, label %412

411:                                              ; preds = %408
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %315) #13
  br label %412

412:                                              ; preds = %411, %408, %352, %310
  br i1 %19, label %426, label %413

413:                                              ; preds = %412
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = load atomic i32, i32* %414 monotonic, align 4
  %416 = and i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %419 = load i32, i32* %418, align 4
  br i1 %417, label %420, label %422

420:                                              ; preds = %413
  %421 = add i32 %419, -1
  store i32 %421, i32* %418, align 4
  br label %422

422:                                              ; preds = %420, %413
  %423 = phi i32 [ %421, %420 ], [ %419, %413 ]
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %425, label %426

425:                                              ; preds = %422
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #13
  br label %426

426:                                              ; preds = %412, %422, %425
  ret %"class.blink::protocol::Accessibility::AXValueSource"* %18
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe"* %0, i64 0, i32 1
  %4 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #13
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #13
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %20, %5, %2
  %23 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %24 = bitcast %"class.WTF::String"* %3 to i64*
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 %23, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #13
  br label %41

41:                                               ; preds = %22, %37, %40
  %42 = getelementptr inbounds %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe"* %0, i64 0, i32 0
  store i8 1, i8* %42, align 8
  br i1 %4, label %56, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %43
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %43
  %53 = phi i32 [ %51, %50 ], [ %49, %43 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #13
  br label %56

56:                                               ; preds = %41, %52, %55
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN5blink8protocol13Accessibility13AXRelatedNodeENS_14default_deleteIS5_EEEENS_9allocatorIS8_EEE24__emplace_back_slow_pathIJS8_EEEvDpOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr.15"* dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.15"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #15
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.15"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #15
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #12
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.15"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.15"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.15"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.15"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.15"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.15"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.15"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.15"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.blink::protocol::Accessibility::AXRelatedNode"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.15"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.15"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.15"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.15"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !4

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.15"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.15"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.15"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.15"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.15"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.15"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.15"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.15"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.15"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.15"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.15"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.15"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.15"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.15"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.15"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.15"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.15"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.15"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.15"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.15"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.15"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.15"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.15"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.15"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.15"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.15"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.15"*
  %138 = icmp eq %"class.std::__1::unique_ptr.15"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.15"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.blink::protocol::Accessibility::AXRelatedNode"*, %"class.blink::protocol::Accessibility::AXRelatedNode"** %142, align 8
  store %"class.blink::protocol::Accessibility::AXRelatedNode"* null, %"class.blink::protocol::Accessibility::AXRelatedNode"** %142, align 8
  %144 = icmp eq %"class.blink::protocol::Accessibility::AXRelatedNode"* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %"class.blink::protocol::Accessibility::AXRelatedNode"* %143 to void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)***
  %147 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)**, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %147, i64 2
  %149 = load void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)*, void (%"class.blink::protocol::Accessibility::AXRelatedNode"*)** %148, align 8
  tail call void %149(%"class.blink::protocol::Accessibility::AXRelatedNode"* nonnull %143) #13
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.15"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member.802"* @_ZN3WTF6VectorIN5blink6MemberINS1_23NameSourceRelatedObjectEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.799"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.799", %"class.WTF::Vector.799"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.18, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector.799", %"class.WTF::Vector.799"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.802"*, %"class.blink::Member.802"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member.802", %"class.blink::Member.802"* %24, i64 %25
  ret %"class.blink::Member.802"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #11

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member.46"* @_ZN3WTF6VectorIN5blink6MemberINS1_8AXObjectEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #13
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i8* %14, i8* %15) #13
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.18, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #13
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member.46"*, %"class.blink::Member.46"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member.46", %"class.blink::Member.46"* %24, i64 %25
  ret %"class.blink::Member.46"* %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { nounwind readonly }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
