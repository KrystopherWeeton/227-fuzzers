; ModuleID = '../../third_party/skia/src/gpu/GrDistanceFieldGenFromVector.cpp'
source_filename = "../../third_party/skia/src/gpu/GrDistanceFieldGenFromVector.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.PathSegment = type { i32, [3 x %struct.SkPoint], %struct.SkDPoint, %struct.SkDPoint, %class.DAffineMatrix, double, double, double, double, %struct.SkRect }
%struct.SkPoint = type { float, float }
%struct.SkDPoint = type { double, double }
%class.DAffineMatrix = type { [6 x double] }
%struct.SkRect = type { float, float, float, float }
%struct.RowData = type { i32, i32, i32, double, double, double }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkSTArray.13 = type { %class.SkAlignedSTStorage.14, %class.SkTArray.15 }
%class.SkAlignedSTStorage.14 = type { [120 x i8] }
%class.SkTArray.15 = type { %struct.SkPoint*, i64 }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%class.SkAutoSMalloc = type { i8*, i64, [256 x i32] }
%class.SkPathEdgeIter = type <{ i8*, i8*, %struct.SkPoint*, %struct.SkPoint*, float*, [2 x %struct.SkPoint], i8, i8, [6 x i8] }>
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [2400 x i8] }
%class.SkTArray = type { %class.PathSegment*, i64 }
%class.SkAutoConicToQuads = type <{ %class.SkAutoSTMalloc, i32, [4 x i8] }>
%class.SkAutoSTMalloc = type { %struct.SkPoint*, %union.anon }
%union.anon = type { [34 x i32] }
%struct.DFData = type { float, i32 }

$_ZN8SkTArrayI11PathSegmentLb1EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@__const._ZL29calculate_distance_field_dataP8SkTArrayI11PathSegmentLb1EEP6DFDataii.rowData = private unnamed_addr constant { i32, i32, i32, [4 x i8], double, double, double } { i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11PathSegment4initEv(%class.PathSegment*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 0, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = fpext <2 x float> %4 to <2 x double>
  %6 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 %9, i32 0
  %11 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 %9, i32 1
  %12 = bitcast float* %10 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fpext <2 x float> %13 to <2 x double>
  %15 = extractelement <2 x float> %13, i32 0
  %16 = extractelement <2 x float> %4, i32 0
  %17 = fcmp olt float %15, %16
  %18 = select i1 %17, float %15, float %16
  %19 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 9, i32 0
  store float %18, float* %19, align 4
  %20 = fcmp olt float %16, %15
  %21 = select i1 %20, float %15, float %16
  %22 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 9, i32 2
  store float %21, float* %22, align 4
  %23 = load float, float* %11, align 4
  %24 = extractelement <2 x float> %4, i32 1
  %25 = fcmp olt float %23, %24
  %26 = select i1 %25, float %23, float %24
  %27 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 9, i32 1
  store float %26, float* %27, align 4
  %28 = fcmp olt float %24, %23
  %29 = select i1 %28, float %23, float %24
  %30 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 9, i32 3
  store float %29, float* %30, align 4
  %31 = icmp eq i32 %7, 0
  br i1 %31, label %32, label %63

32:                                               ; preds = %1
  %33 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 5
  %34 = bitcast double* %33 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %34, align 8
  %35 = extractelement <2 x double> %14, i32 0
  %36 = extractelement <2 x double> %5, i32 0
  %37 = fsub double %36, %35
  %38 = extractelement <2 x double> %14, i32 1
  %39 = extractelement <2 x double> %5, i32 1
  %40 = fsub double %39, %38
  %41 = fmul double %37, %37
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #9
  %45 = fsub <2 x double> %14, %5
  %46 = insertelement <2 x double> undef, double %44, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = fdiv <2 x double> %45, %47
  %49 = extractelement <2 x double> %48, i32 0
  %50 = fmul double %49, %36
  %51 = fsub double -0.000000e+00, %50
  %52 = shufflevector <2 x double> %5, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %53 = fmul <2 x double> %48, %52
  %54 = extractelement <2 x double> %53, i32 1
  %55 = fsub double %51, %54
  %56 = extractelement <2 x double> %48, i32 1
  %57 = fsub double -0.000000e+00, %56
  %58 = fmul double %56, %36
  %59 = extractelement <2 x double> %53, i32 0
  %60 = fsub double %58, %59
  %61 = bitcast double* %33 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 8
  br label %242

63:                                               ; preds = %1
  %64 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 1, i32 0
  %65 = load float, float* %64, align 4
  %66 = fsub float %65, %16
  %67 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 1, i32 1
  %68 = load float, float* %67, align 4
  %69 = fsub float %68, %24
  %70 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 2, i32 0
  %71 = load float, float* %70, align 4
  %72 = fsub float %66, %71
  %73 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 2, i32 1
  %74 = load float, float* %73, align 4
  %75 = fsub float %69, %74
  %76 = fadd float %65, %72
  %77 = fadd float %68, %75
  %78 = fdiv float %66, %76
  %79 = fdiv float %69, %77
  %80 = fcmp ogt float %78, 1.000000e+00
  %81 = select i1 %80, float 1.000000e+00, float %78
  %82 = fcmp ogt float %81, 0.000000e+00
  %83 = select i1 %82, float %81, float 0.000000e+00
  %84 = fcmp ogt float %79, 1.000000e+00
  %85 = select i1 %84, float 1.000000e+00, float %79
  %86 = fcmp ogt float %85, 0.000000e+00
  %87 = select i1 %86, float %85, float 0.000000e+00
  %88 = fmul float %66, %83
  %89 = fmul float %69, %87
  %90 = fadd float %16, %88
  %91 = fadd float %24, %89
  %92 = fcmp olt float %18, %90
  %93 = select i1 %92, float %18, float %90
  store float %93, float* %19, align 4
  %94 = fcmp olt float %90, %21
  %95 = select i1 %94, float %21, float %90
  store float %95, float* %22, align 4
  %96 = fcmp olt float %26, %91
  %97 = select i1 %96, float %26, float %91
  store float %97, float* %27, align 4
  %98 = fcmp olt float %91, %29
  %99 = select i1 %98, float %29, float %91
  store float %99, float* %30, align 4
  %100 = fpext float %65 to double
  %101 = fpext float %68 to double
  %102 = extractelement <2 x double> %5, i32 0
  %103 = fmul double %102, %102
  %104 = extractelement <2 x double> %5, i32 1
  %105 = fmul double %104, %104
  %106 = extractelement <2 x double> %14, i32 0
  %107 = fmul double %106, %106
  %108 = extractelement <2 x double> %14, i32 1
  %109 = fmul double %108, %108
  %110 = fmul double %100, %100
  %111 = fmul double %101, %101
  %112 = fmul double %102, %100
  %113 = fmul double %102, %106
  %114 = fmul double %106, %100
  %115 = fmul double %104, %101
  %116 = fmul double %104, %108
  %117 = fmul double %108, %101
  %118 = fmul double %101, 2.000000e+00
  %119 = fsub double %104, %118
  %120 = fadd double %119, %108
  %121 = fmul double %120, %120
  %122 = fmul double %100, 2.000000e+00
  %123 = fsub double %102, %122
  %124 = fadd double %123, %106
  %125 = fmul double %124, %120
  %126 = fmul double %124, %124
  %127 = fmul double %103, %109
  %128 = fmul double %112, 4.000000e+00
  %129 = fmul double %128, %117
  %130 = fsub double %127, %129
  %131 = fmul double %113, 2.000000e+00
  %132 = fmul double %131, %116
  %133 = fsub double %130, %132
  %134 = fmul double %113, 4.000000e+00
  %135 = fmul double %134, %111
  %136 = fadd double %135, %133
  %137 = fmul double %110, 4.000000e+00
  %138 = fmul double %116, %137
  %139 = fadd double %138, %136
  %140 = fmul double %114, 4.000000e+00
  %141 = fmul double %140, %115
  %142 = fsub double %139, %141
  %143 = fmul double %105, %107
  %144 = fadd double %143, %142
  %145 = fmul double %116, %102
  %146 = fmul double %102, 2.000000e+00
  %147 = fmul double %146, %111
  %148 = fsub double %145, %147
  %149 = fmul double %146, %117
  %150 = fadd double %149, %148
  %151 = fmul double %109, %102
  %152 = fsub double %150, %151
  %153 = fmul double %122, %115
  %154 = fadd double %153, %152
  %155 = fmul double %100, 4.000000e+00
  %156 = fmul double %116, %155
  %157 = fsub double %154, %156
  %158 = fmul double %122, %117
  %159 = fadd double %158, %157
  %160 = fmul double %105, %106
  %161 = fsub double %159, %160
  %162 = fmul double %106, 2.000000e+00
  %163 = fmul double %162, %115
  %164 = fadd double %163, %161
  %165 = fmul double %116, %106
  %166 = fadd double %165, %164
  %167 = fmul double %162, %111
  %168 = fsub double %166, %167
  %169 = fmul double %103, %108
  %170 = fmul double %112, 2.000000e+00
  %171 = fmul double %170, %101
  %172 = fsub double %169, %171
  %173 = fmul double %170, %108
  %174 = fsub double %172, %173
  %175 = fmul double %113, %104
  %176 = fsub double %174, %175
  %177 = fmul double %134, %101
  %178 = fadd double %177, %176
  %179 = fmul double %113, %108
  %180 = fsub double %178, %179
  %181 = fmul double %110, 2.000000e+00
  %182 = fmul double %181, %104
  %183 = fadd double %182, %180
  %184 = fmul double %181, %108
  %185 = fadd double %184, %183
  %186 = fmul double %114, 2.000000e+00
  %187 = fmul double %186, %104
  %188 = fsub double %185, %187
  %189 = fmul double %186, %101
  %190 = fsub double %188, %189
  %191 = fmul double %107, %104
  %192 = fadd double %191, %190
  %193 = fadd double %126, %121
  %194 = fdiv double %121, %193
  %195 = tail call double @sqrt(double %194) #9
  %196 = fmul double %125, %193
  %197 = fsub double -0.000000e+00, %196
  %198 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %197) #9
  %199 = fdiv double %126, %193
  %200 = tail call double @sqrt(double %199) #9
  %201 = fmul double %200, %198
  %202 = fmul double %195, %168
  %203 = fmul double %201, %192
  %204 = fsub double %202, %203
  %205 = fmul double %201, %168
  %206 = fsub double -0.000000e+00, %205
  %207 = fmul double %195, %192
  %208 = fsub double %206, %207
  %209 = fdiv double %204, %193
  %210 = fmul double %208, 2.000000e+00
  %211 = fdiv double 1.000000e+00, %210
  %212 = fmul double %204, %204
  %213 = fdiv double %212, %193
  %214 = fsub double %144, %213
  %215 = fmul double %211, %214
  %216 = fdiv double %193, %210
  %217 = fdiv double -1.000000e+00, %216
  %218 = tail call double @llvm.fabs.f64(double %217)
  %219 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 5
  store double %218, double* %219, align 8
  %220 = fmul double %217, %217
  %221 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 6
  store double %220, double* %221, align 8
  %222 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %201, i32 1
  %223 = insertelement <2 x double> undef, double %216, i32 0
  %224 = shufflevector <2 x double> %223, <2 x double> undef, <2 x i32> zeroinitializer
  %225 = fsub <2 x double> %222, %224
  %226 = fmul <2 x double> %222, %224
  %227 = shufflevector <2 x double> %225, <2 x double> %226, <2 x i32> <i32 0, i32 3>
  %228 = insertelement <2 x double> <double undef, double -0.000000e+00>, double %195, i32 0
  %229 = fmul <2 x double> %228, %227
  %230 = fsub <2 x double> %228, %227
  %231 = shufflevector <2 x double> %229, <2 x double> %230, <2 x i32> <i32 0, i32 3>
  %232 = extractelement <2 x double> %225, i32 0
  %233 = fmul double %209, %232
  %234 = fmul double %215, %232
  %235 = extractelement <2 x double> %229, i32 0
  %236 = fmul double %235, %102
  %237 = shufflevector <2 x double> %5, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %238 = fmul <2 x double> %231, %237
  %239 = insertelement <2 x double> undef, double %218, i32 0
  %240 = insertelement <2 x double> %239, double %220, i32 1
  %241 = extractelement <2 x double> %226, i32 1
  br label %242

242:                                              ; preds = %63, %32
  %243 = phi double [ %236, %63 ], [ %50, %32 ]
  %244 = phi double [ %233, %63 ], [ %55, %32 ]
  %245 = phi double [ %241, %63 ], [ %57, %32 ]
  %246 = phi double [ %234, %63 ], [ %60, %32 ]
  %247 = phi <2 x double> [ %240, %63 ], [ %62, %32 ]
  %248 = phi <2 x double> [ %231, %63 ], [ %48, %32 ]
  %249 = phi <2 x double> [ %238, %63 ], [ %53, %32 ]
  %250 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 4, i32 0, i64 0
  %251 = bitcast double* %250 to <2 x double>*
  store <2 x double> %248, <2 x double>* %251, align 8
  %252 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 4, i32 0, i64 2
  store double %244, double* %252, align 8
  %253 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 4, i32 0, i64 3
  store double %245, double* %253, align 8
  %254 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 4, i32 0, i64 4
  %255 = extractelement <2 x double> %248, i32 0
  store double %255, double* %254, align 8
  %256 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 4, i32 0, i64 5
  store double %246, double* %256, align 8
  %257 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %258 = fdiv <2 x double> <double 0x3ED0000000000000, double 0x3E90000000000000>, %247
  %259 = bitcast double* %257 to <2 x double>*
  store <2 x double> %258, <2 x double>* %259, align 8
  %260 = extractelement <2 x double> %249, i32 1
  %261 = fadd double %243, %260
  %262 = fadd double %244, %261
  %263 = extractelement <2 x double> %5, i32 0
  %264 = fmul double %245, %263
  %265 = extractelement <2 x double> %249, i32 0
  %266 = fadd double %264, %265
  %267 = fadd double %246, %266
  %268 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 0
  store double %262, double* %268, align 8
  %269 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 1
  store double %267, double* %269, align 8
  %270 = extractelement <2 x double> %14, i32 0
  %271 = fmul double %255, %270
  %272 = extractelement <2 x double> %248, i32 1
  %273 = extractelement <2 x double> %14, i32 1
  %274 = fmul double %272, %273
  %275 = fadd double %271, %274
  %276 = fadd double %244, %275
  %277 = fmul double %245, %270
  %278 = fmul double %255, %273
  %279 = fadd double %277, %278
  %280 = fadd double %246, %279
  %281 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 0
  store double %276, double* %281, align 8
  %282 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 1
  store double %280, double* %282, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z22precomputation_for_rowP7RowDataRK11PathSegmentRK7SkPointS6_(%struct.RowData* nocapture, %class.PathSegment* nocapture readonly dereferenceable(160), %struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkPoint* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %119

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %10 = bitcast %struct.SkPoint* %2 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 4, i32 0, i64 0
  %14 = bitcast double* %13 to <2 x double>*
  %15 = load <2 x double>, <2 x double>* %14, align 8
  %16 = fmul <2 x double> %15, %12
  %17 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 4, i32 0, i64 2
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 4, i32 0, i64 3
  %20 = load double, double* %19, align 8
  %21 = extractelement <2 x double> %12, i32 0
  %22 = fmul double %20, %21
  %23 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 4, i32 0, i64 4
  %24 = load double, double* %23, align 8
  %25 = extractelement <2 x double> %12, i32 1
  %26 = fmul double %24, %25
  %27 = fadd double %22, %26
  %28 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 4, i32 0, i64 5
  %29 = load double, double* %28, align 8
  %30 = fadd double %29, %27
  %31 = bitcast %struct.SkPoint* %3 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = fpext <2 x float> %32 to <2 x double>
  %34 = fmul <2 x double> %15, %33
  %35 = shufflevector <2 x double> %16, <2 x double> %34, <2 x i32> <i32 0, i32 2>
  %36 = shufflevector <2 x double> %16, <2 x double> %34, <2 x i32> <i32 1, i32 3>
  %37 = fadd <2 x double> %35, %36
  %38 = insertelement <2 x double> undef, double %18, i32 0
  %39 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %40 = fadd <2 x double> %39, %37
  %41 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 3, i32 0
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 2, i32 0
  %44 = load double, double* %43, align 8
  %45 = fsub double %42, %44
  %46 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %45) #9
  %47 = fptosi double %46 to i32
  %48 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 1
  store i32 %47, i32* %48, align 4
  %49 = extractelement <2 x double> %40, i32 0
  %50 = extractelement <2 x double> %40, i32 1
  %51 = fsub double %50, %49
  %52 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %51) #9
  %53 = fptosi double %52 to i32
  %54 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 2
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 7
  %56 = load double, double* %55, align 8
  %57 = fmul double %50, 4.000000e+00
  %58 = fmul double %50, %57
  %59 = fadd double %58, 1.000000e+00
  %60 = tail call double @sqrt(double %59) #9
  %61 = fdiv double %56, %60
  %62 = fsub double %49, %50
  %63 = tail call double @llvm.fabs.f64(double %62) #9
  %64 = fcmp ugt double %63, %61
  br i1 %64, label %69, label %65

65:                                               ; preds = %8
  %66 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 0
  store i32 1, i32* %66, align 8
  %67 = fmul double %49, %49
  %68 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 3
  store double %67, double* %68, align 8
  store i32 0, i32* %54, align 8
  br label %119

69:                                               ; preds = %8
  %70 = extractelement <2 x double> %33, i32 0
  %71 = fmul double %20, %70
  %72 = extractelement <2 x double> %33, i32 1
  %73 = fmul double %24, %72
  %74 = fadd double %71, %73
  %75 = fadd double %29, %74
  %76 = fsub double %75, %30
  %77 = fdiv double %76, %51
  %78 = fmul double %49, %77
  %79 = fsub double %30, %78
  %80 = fmul double %77, %77
  %81 = fmul double %79, 4.000000e+00
  %82 = fadd double %80, %81
  %83 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 8
  %84 = load double, double* %83, align 8
  %85 = fmul double %84, 4.000000e+00
  %86 = fadd double %80, 1.000000e+00
  %87 = fdiv double %85, %86
  %88 = load i32, i32* %54, align 8
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %107

90:                                               ; preds = %69
  %91 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 1, i64 0, i32 1
  %92 = load float, float* %91, align 4
  %93 = load float, float* %9, align 4
  %94 = fcmp oeq float %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %1, i64 0, i32 1, i64 2, i32 1
  %97 = load float, float* %96, align 4
  %98 = fcmp oeq float %97, %93
  br i1 %98, label %99, label %107

99:                                               ; preds = %95, %90
  %100 = tail call double @llvm.fabs.f64(double %82) #9
  %101 = fcmp ugt double %100, %87
  br i1 %101, label %107, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 0
  store i32 2, i32* %103, align 8
  %104 = fmul double %77, 5.000000e-01
  %105 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 4
  store double %104, double* %105, align 8
  %106 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 5
  store double %104, double* %106, align 8
  br label %119

107:                                              ; preds = %99, %95, %69
  %108 = fcmp ugt double %82, 0.000000e+00
  %109 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 0
  br i1 %108, label %111, label %110

110:                                              ; preds = %107
  store i32 0, i32* %109, align 8
  br label %119

111:                                              ; preds = %107
  store i32 3, i32* %109, align 8
  %112 = tail call double @sqrt(double %82) #9
  %113 = fadd double %77, %112
  %114 = fmul double %113, 5.000000e-01
  %115 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 4
  store double %114, double* %115, align 8
  %116 = fsub double %77, %112
  %117 = fmul double %116, 5.000000e-01
  %118 = getelementptr inbounds %struct.RowData, %struct.RowData* %0, i64 0, i32 5
  store double %117, double* %118, align 8
  br label %119

119:                                              ; preds = %65, %102, %111, %110, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z22calculate_side_of_quadRK11PathSegmentRK7SkPointRK8SkDPointRK7RowData(%class.PathSegment* nocapture readonly dereferenceable(160), %struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkDPoint* nocapture readonly dereferenceable(16), %struct.RowData* nocapture readonly dereferenceable(40)) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %236 [
    i32 1, label %7
    i32 3, label %19
    i32 2, label %213
  ]

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 3
  %11 = load double, double* %10, align 8
  %12 = fsub double %9, %11
  %13 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %12) #9
  %14 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  %17 = fmul double %13, %16
  %18 = fptosi double %17 to i32
  br label %236

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 4
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 5
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %25 = load double, double* %24, align 8
  %26 = fsub double %21, %25
  %27 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %26) #9
  %28 = fptosi double %27 to i32
  %29 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %131

32:                                               ; preds = %19
  %33 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %57

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 0, i32 1
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fcmp ugt float %38, %40
  br i1 %41, label %80, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 0
  %44 = load double, double* %43, align 8
  %45 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %46 = load double, double* %45, align 8
  %47 = fmul double %21, 4.000000e+00
  %48 = fmul double %21, %47
  %49 = fadd double %48, 1.000000e+00
  %50 = tail call double @sqrt(double %49) #9
  %51 = fdiv double %46, %50
  %52 = fsub double %44, %21
  %53 = tail call double @llvm.fabs.f64(double %52) #9
  %54 = fcmp ugt double %53, %51
  br i1 %54, label %55, label %79

55:                                               ; preds = %42
  %56 = load i32, i32* %33, align 4
  br label %57

57:                                               ; preds = %55, %32
  %58 = phi i32 [ %34, %32 ], [ %56, %55 ]
  %59 = icmp eq i32 %58, 1
  br i1 %59, label %60, label %80

60:                                               ; preds = %57
  %61 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 2, i32 1
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = fcmp ugt float %62, %64
  br i1 %65, label %80, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 0
  %68 = load double, double* %67, align 8
  %69 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %70 = load double, double* %69, align 8
  %71 = fmul double %21, 4.000000e+00
  %72 = fmul double %21, %71
  %73 = fadd double %72, 1.000000e+00
  %74 = tail call double @sqrt(double %73) #9
  %75 = fdiv double %70, %74
  %76 = fsub double %68, %21
  %77 = tail call double @llvm.fabs.f64(double %76) #9
  %78 = fcmp ugt double %77, %75
  br i1 %78, label %80, label %79

79:                                               ; preds = %42, %66
  br label %80

80:                                               ; preds = %36, %66, %60, %79, %57
  %81 = phi i8 [ 0, %79 ], [ 1, %66 ], [ 1, %60 ], [ 1, %57 ], [ 1, %36 ]
  %82 = load i32, i32* %33, align 4
  %83 = icmp eq i32 %82, -1
  br i1 %83, label %84, label %105

84:                                               ; preds = %80
  %85 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 2, i32 1
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %88 = load float, float* %87, align 4
  %89 = fcmp ugt float %86, %88
  br i1 %89, label %128, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 0
  %92 = load double, double* %91, align 8
  %93 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %94 = load double, double* %93, align 8
  %95 = fmul double %23, 4.000000e+00
  %96 = fmul double %23, %95
  %97 = fadd double %96, 1.000000e+00
  %98 = tail call double @sqrt(double %97) #9
  %99 = fdiv double %94, %98
  %100 = fsub double %92, %23
  %101 = tail call double @llvm.fabs.f64(double %100) #9
  %102 = fcmp ugt double %101, %99
  br i1 %102, label %103, label %127

103:                                              ; preds = %90
  %104 = load i32, i32* %33, align 4
  br label %105

105:                                              ; preds = %103, %80
  %106 = phi i32 [ %82, %80 ], [ %104, %103 ]
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %128

108:                                              ; preds = %105
  %109 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 0, i32 1
  %110 = load float, float* %109, align 4
  %111 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %112 = load float, float* %111, align 4
  %113 = fcmp ugt float %110, %112
  br i1 %113, label %128, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 0
  %116 = load double, double* %115, align 8
  %117 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %118 = load double, double* %117, align 8
  %119 = fmul double %23, 4.000000e+00
  %120 = fmul double %23, %119
  %121 = fadd double %120, 1.000000e+00
  %122 = tail call double @sqrt(double %121) #9
  %123 = fdiv double %118, %122
  %124 = fsub double %116, %23
  %125 = tail call double @llvm.fabs.f64(double %124) #9
  %126 = fcmp ugt double %125, %123
  br i1 %126, label %128, label %127

127:                                              ; preds = %90, %114
  br label %128

128:                                              ; preds = %84, %114, %108, %105, %127
  %129 = phi i1 [ false, %127 ], [ true, %114 ], [ true, %108 ], [ true, %105 ], [ true, %84 ]
  %130 = icmp eq i8 %81, 0
  br i1 %130, label %167, label %131

131:                                              ; preds = %19, %128
  %132 = phi i1 [ %129, %128 ], [ true, %19 ]
  %133 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 0
  %134 = load double, double* %133, align 8
  %135 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 0
  %136 = load double, double* %135, align 8
  %137 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %138 = load double, double* %137, align 8
  %139 = fmul double %134, 4.000000e+00
  %140 = fmul double %134, %139
  %141 = fadd double %140, 1.000000e+00
  %142 = tail call double @sqrt(double %141) #9
  %143 = fdiv double %138, %142
  %144 = fmul double %136, 4.000000e+00
  %145 = fmul double %136, %144
  %146 = fadd double %145, 1.000000e+00
  %147 = tail call double @sqrt(double %146) #9
  %148 = fdiv double %138, %147
  %149 = fcmp olt double %134, %136
  br i1 %149, label %150, label %156

150:                                              ; preds = %131
  %151 = fsub double %134, %143
  %152 = fcmp ugt double %151, %21
  br i1 %152, label %159, label %153

153:                                              ; preds = %150
  %154 = fadd double %136, %148
  %155 = fcmp ult double %154, %21
  br i1 %155, label %167, label %163

156:                                              ; preds = %131
  %157 = fsub double %136, %148
  %158 = fcmp ugt double %157, %21
  br i1 %158, label %159, label %160

159:                                              ; preds = %150, %156
  br i1 %132, label %169, label %236

160:                                              ; preds = %156
  %161 = fadd double %134, %143
  %162 = fcmp ult double %161, %21
  br i1 %162, label %167, label %163

163:                                              ; preds = %153, %160
  %164 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 1
  %165 = load i32, i32* %164, align 4
  %166 = mul nsw i32 %165, %28
  br i1 %132, label %169, label %236

167:                                              ; preds = %153, %160, %128
  %168 = phi i1 [ %132, %160 ], [ %129, %128 ], [ %132, %153 ]
  br i1 %168, label %169, label %236

169:                                              ; preds = %159, %163, %167
  %170 = phi i32 [ %166, %163 ], [ 2, %167 ], [ 2, %159 ]
  %171 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 2, i32 0
  %172 = load double, double* %171, align 8
  %173 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 3, i32 0
  %174 = load double, double* %173, align 8
  %175 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 7
  %176 = load double, double* %175, align 8
  %177 = fmul double %172, 4.000000e+00
  %178 = fmul double %172, %177
  %179 = fadd double %178, 1.000000e+00
  %180 = tail call double @sqrt(double %179) #9
  %181 = fdiv double %176, %180
  %182 = fmul double %174, 4.000000e+00
  %183 = fmul double %174, %182
  %184 = fadd double %183, 1.000000e+00
  %185 = tail call double @sqrt(double %184) #9
  %186 = fdiv double %176, %185
  %187 = fcmp olt double %172, %174
  br i1 %187, label %188, label %194

188:                                              ; preds = %169
  %189 = fsub double %172, %181
  %190 = fcmp ole double %189, %23
  %191 = fadd double %174, %186
  %192 = fcmp oge double %191, %23
  %193 = and i1 %190, %192
  br i1 %193, label %200, label %236

194:                                              ; preds = %169
  %195 = fsub double %174, %186
  %196 = fcmp ole double %195, %23
  %197 = fadd double %172, %181
  %198 = fcmp oge double %197, %23
  %199 = and i1 %198, %196
  br i1 %199, label %200, label %236

200:                                              ; preds = %194, %188
  %201 = load double, double* %24, align 8
  %202 = fsub double %23, %201
  %203 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %202) #9
  %204 = fptosi double %203 to i32
  %205 = icmp eq i32 %170, 2
  %206 = icmp eq i32 %204, 1
  %207 = or i1 %205, %206
  br i1 %207, label %208, label %236

208:                                              ; preds = %200
  %209 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = mul i32 %210, %204
  %212 = sub i32 0, %211
  br label %236

213:                                              ; preds = %4
  %214 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 4
  %215 = load double, double* %214, align 8
  %216 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %217 = load double, double* %216, align 8
  %218 = fsub double %215, %217
  %219 = tail call double @llvm.copysign.f64(double 1.000000e+00, double %218) #9
  %220 = fptosi double %219 to i32
  %221 = getelementptr inbounds %struct.RowData, %struct.RowData* %3, i64 0, i32 2
  %222 = load i32, i32* %221, align 8
  %223 = icmp eq i32 %222, 1
  br i1 %223, label %224, label %236

224:                                              ; preds = %213
  %225 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 0, i32 1
  %226 = load float, float* %225, align 4
  %227 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %228 = load float, float* %227, align 4
  %229 = fcmp oeq float %226, %228
  br i1 %229, label %236, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %0, i64 0, i32 1, i64 2, i32 1
  %232 = load float, float* %231, align 4
  %233 = fcmp oeq float %232, %228
  br i1 %233, label %234, label %236

234:                                              ; preds = %230
  %235 = sub nsw i32 0, %220
  br label %236

236:                                              ; preds = %194, %188, %159, %163, %213, %230, %234, %224, %4, %167, %200, %208, %7
  %237 = phi i32 [ %18, %7 ], [ 2, %167 ], [ %212, %208 ], [ %170, %200 ], [ 2, %4 ], [ %235, %234 ], [ 2, %230 ], [ 2, %213 ], [ %220, %224 ], [ %166, %163 ], [ 2, %159 ], [ %170, %188 ], [ %170, %194 ]
  ret i32 %237
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z31GrGenerateDistanceFieldFromPathPhRK6SkPathRK8SkMatrixiim(i8* nocapture, %class.SkPath* dereferenceable(16), %class.SkMatrix* nocapture readonly dereferenceable(40), i32, i32, i64) local_unnamed_addr #0 {
  %7 = alloca %class.SkSTArray.13, align 8
  %8 = alloca %struct.SkConic, align 4
  %9 = alloca <2 x double>, align 16
  %10 = bitcast <2 x double>* %9 to %struct.SkDPoint*
  %11 = alloca %struct.RowData, align 8
  %12 = alloca <2 x float>, align 8
  %13 = alloca <2 x float>, align 8
  %14 = alloca <2 x float>, align 8
  %15 = alloca %class.SkMatrix, align 4
  %16 = alloca %class.SkPath, align 8
  %17 = alloca %class.SkAutoSMalloc, align 8
  %18 = alloca %class.SkPathEdgeIter, align 8
  %19 = alloca %class.SkSTArray, align 8
  %20 = alloca %class.SkAutoConicToQuads, align 8
  %21 = bitcast %class.SkMatrix* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #9
  %22 = bitcast %class.SkMatrix* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %22, i64 40, i1 false)
  %23 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* nonnull %15, float 4.000000e+00, float 4.000000e+00) #9
  %24 = bitcast %class.SkPath* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #9
  %25 = getelementptr inbounds %class.SkPath, %class.SkPath* %16, i64 0, i32 4
  %26 = bitcast %class.SkPath* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %16) #9
  %27 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* nonnull %16, %class.SkPath* dereferenceable(16) %1) #9
  %28 = load i8, i8* %25, align 2
  %29 = and i8 %28, 1
  %30 = or i8 %29, 2
  %31 = icmp eq i8 %30, 3
  br i1 %31, label %32, label %864

32:                                               ; preds = %6
  call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* nonnull %16, %class.SkMatrix* nonnull dereferenceable(40) %15, %class.SkPath* nonnull %16, i32 1) #9
  %33 = mul nsw i32 %4, %3
  %34 = sext i32 %33 to i64
  %35 = shl nsw i64 %34, 3
  %36 = bitcast %class.SkAutoSMalloc* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1040, i8* nonnull %36) #9
  %37 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %17, i64 0, i32 2
  %38 = bitcast [256 x i32]* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 -86, i64 1024, i1 false)
  %39 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %17, i64 0, i32 2, i64 0
  %40 = bitcast %class.SkAutoSMalloc* %17 to i32**
  store i32* %39, i32** %40, align 8
  %41 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %17, i64 0, i32 1
  store i64 1024, i64* %41, align 8
  %42 = icmp ult i64 %35, 1025
  %43 = bitcast i32* %39 to %struct.DFData*
  br i1 %42, label %48, label %44

44:                                               ; preds = %32
  %45 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %17, i64 0, i32 0
  %46 = call i8* @_Z15sk_malloc_flagsmj(i64 %35, i32 2) #9
  store i8* %46, i8** %45, align 8
  store i64 %35, i64* %41, align 8
  %47 = bitcast i8* %46 to %struct.DFData*
  br label %48

48:                                               ; preds = %32, %44
  %49 = phi %struct.DFData* [ %43, %32 ], [ %47, %44 ]
  %50 = getelementptr inbounds %class.SkAutoSMalloc, %class.SkAutoSMalloc* %17, i64 0, i32 0
  %51 = icmp sgt i32 %33, 0
  br i1 %51, label %52, label %92

52:                                               ; preds = %48
  %53 = mul i32 %4, %3
  %54 = add i32 %53, -1
  %55 = and i32 %53, 7
  %56 = icmp ult i32 %54, 7
  br i1 %56, label %81, label %57

57:                                               ; preds = %52
  %58 = sub i32 %53, %55
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi %struct.DFData* [ %49, %57 ], [ %78, %59 ]
  %61 = phi i32 [ %58, %57 ], [ %79, %59 ]
  %62 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 0, i32 0
  store float 1.600000e+01, float* %62, align 4
  %63 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 0, i32 1
  store i32 0, i32* %63, align 4
  %64 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 1, i32 0
  store float 1.600000e+01, float* %64, align 4
  %65 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 1, i32 1
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 2, i32 0
  store float 1.600000e+01, float* %66, align 4
  %67 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 2, i32 1
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 3, i32 0
  store float 1.600000e+01, float* %68, align 4
  %69 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 3, i32 1
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 4, i32 0
  store float 1.600000e+01, float* %70, align 4
  %71 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 4, i32 1
  store i32 0, i32* %71, align 4
  %72 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 5, i32 0
  store float 1.600000e+01, float* %72, align 4
  %73 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 5, i32 1
  store i32 0, i32* %73, align 4
  %74 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 6, i32 0
  store float 1.600000e+01, float* %74, align 4
  %75 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 6, i32 1
  store i32 0, i32* %75, align 4
  %76 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 7, i32 0
  store float 1.600000e+01, float* %76, align 4
  %77 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 7, i32 1
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %struct.DFData, %struct.DFData* %60, i64 8
  %79 = add i32 %61, -8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %59

81:                                               ; preds = %59, %52
  %82 = phi %struct.DFData* [ %49, %52 ], [ %78, %59 ]
  %83 = icmp eq i32 %55, 0
  br i1 %83, label %92, label %84

84:                                               ; preds = %81, %84
  %85 = phi %struct.DFData* [ %89, %84 ], [ %82, %81 ]
  %86 = phi i32 [ %90, %84 ], [ %55, %81 ]
  %87 = getelementptr inbounds %struct.DFData, %struct.DFData* %85, i64 0, i32 0
  store float 1.600000e+01, float* %87, align 4
  %88 = getelementptr inbounds %struct.DFData, %struct.DFData* %85, i64 0, i32 1
  store i32 0, i32* %88, align 4
  %89 = getelementptr inbounds %struct.DFData, %struct.DFData* %85, i64 1
  %90 = add i32 %86, -1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %84, !llvm.loop !2

92:                                               ; preds = %81, %84, %48
  %93 = bitcast %class.SkPathEdgeIter* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %93) #9
  %94 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 0
  %95 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 1
  %96 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 2
  %97 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 3
  %98 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 4
  %99 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 5, i64 0, i32 0
  %100 = bitcast %class.SkPathEdgeIter* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %100, i8 -86, i64 40, i1 false)
  %101 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 6
  %102 = bitcast float* %99 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 -1, i64 16, i1 false)
  %103 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 7
  %104 = bitcast i8* %101 to i64*
  store i64 -6148914691236517206, i64* %104, align 8
  call void @_ZN14SkPathEdgeIterC1ERK6SkPath(%class.SkPathEdgeIter* nonnull %18, %class.SkPath* nonnull dereferenceable(16) %16) #9
  %105 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %19, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2416, i8* nonnull %105) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 -86, i64 2400, i1 false)
  %106 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %19, i64 0, i32 0, i32 0, i64 2400
  %107 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %19, i64 0, i32 0, i32 0, i64 2408
  %108 = bitcast i8* %107 to i64*
  %109 = bitcast i8* %106 to i8**
  store i8* %105, i8** %109, align 8
  store i64 128849018880, i64* %108, align 8
  %110 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 5
  %111 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %110, i64 0, i64 0
  %112 = bitcast [2 x %struct.SkPoint]* %110 to i64*
  %113 = bitcast %struct.SkPoint** %97 to i64**
  %114 = getelementptr inbounds %class.SkPathEdgeIter, %class.SkPathEdgeIter* %18, i64 0, i32 5, i64 1
  %115 = bitcast %struct.SkPoint* %114 to i64*
  %116 = bitcast i8* %106 to %class.SkTArray*
  %117 = getelementptr inbounds %class.SkSTArray.13, %class.SkSTArray.13* %7, i64 0, i32 0, i32 0, i64 0
  %118 = getelementptr inbounds %class.SkSTArray.13, %class.SkSTArray.13* %7, i64 0, i32 0, i32 0, i64 120
  %119 = getelementptr inbounds %class.SkSTArray.13, %class.SkSTArray.13* %7, i64 0, i32 0, i32 0, i64 128
  %120 = bitcast i8* %119 to i64*
  %121 = bitcast i8* %118 to i8**
  %122 = bitcast i8* %118 to %class.SkTArray.15*
  %123 = bitcast i8* %118 to %struct.SkPoint**
  %124 = bitcast float** %98 to i32**
  %125 = bitcast %class.SkAutoConicToQuads* %20 to i8*
  %126 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %20, i64 0, i32 0, i32 1
  %127 = bitcast %class.SkAutoConicToQuads* %20 to %union.anon**
  %128 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %20, i64 0, i32 1
  %129 = bitcast %struct.SkConic* %8 to i8*
  %130 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %8, i64 0, i32 1
  %131 = bitcast float* %130 to i32*
  %132 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %20, i64 0, i32 0, i32 0
  %133 = bitcast %union.anon* %126 to %struct.SkPoint*
  %134 = bitcast %class.SkAutoConicToQuads* %20 to i8**
  %135 = bitcast i8* %106 to %class.PathSegment**
  %136 = getelementptr inbounds %class.SkAutoConicToQuads, %class.SkAutoConicToQuads* %20, i64 0, i32 0, i32 1
  %137 = bitcast %union.anon* %136 to i8*
  br label %138

138:                                              ; preds = %238, %92
  %139 = load i8*, i8** %94, align 8
  %140 = load i8*, i8** %95, align 8
  %141 = icmp eq i8* %139, %140
  br i1 %141, label %142, label %152

142:                                              ; preds = %138
  %143 = load i8, i8* %101, align 8, !range !4
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %300, label %145

145:                                              ; preds = %142
  %146 = load %struct.SkPoint*, %struct.SkPoint** %96, align 8
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %146, i64 -1
  %148 = bitcast %struct.SkPoint* %147 to i64*
  %149 = load i64, i64* %148, align 4
  store i64 %149, i64* %112, align 8
  %150 = load i64*, i64** %113, align 8
  %151 = load i64, i64* %150, align 4
  store i64 %151, i64* %115, align 8
  store i8 0, i8* %101, align 8
  store i8 1, i8* %103, align 1
  br label %197

152:                                              ; preds = %138, %195
  %153 = phi i8* [ %154, %195 ], [ %139, %138 ]
  %154 = getelementptr inbounds i8, i8* %153, i64 1
  store i8* %154, i8** %94, align 8
  %155 = load i8, i8* %153, align 1
  switch i8 %155, label %179 [
    i8 0, label %156
    i8 5, label %169
  ]

156:                                              ; preds = %152
  %157 = load i8, i8* %101, align 8, !range !4
  %158 = icmp eq i8 %157, 0
  %159 = load %struct.SkPoint*, %struct.SkPoint** %96, align 8
  br i1 %158, label %167, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %159, i64 -1
  %162 = bitcast %struct.SkPoint* %161 to i64*
  %163 = load i64, i64* %162, align 4
  store i64 %163, i64* %112, align 8
  %164 = load i64*, i64** %113, align 8
  %165 = load i64, i64* %164, align 4
  store i64 %165, i64* %115, align 8
  store i8 0, i8* %101, align 8
  store i8 1, i8* %103, align 1
  %166 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %159, i64 1
  store %struct.SkPoint* %166, %struct.SkPoint** %96, align 8
  store %struct.SkPoint* %159, %struct.SkPoint** %97, align 8
  br label %197

167:                                              ; preds = %156
  %168 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %159, i64 1
  store %struct.SkPoint* %168, %struct.SkPoint** %96, align 8
  store %struct.SkPoint* %159, %struct.SkPoint** %97, align 8
  store i8 1, i8* %103, align 1
  br label %195

169:                                              ; preds = %152
  %170 = load i8, i8* %101, align 8, !range !4
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %195, label %172

172:                                              ; preds = %169
  %173 = load %struct.SkPoint*, %struct.SkPoint** %96, align 8
  %174 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %173, i64 -1
  %175 = bitcast %struct.SkPoint* %174 to i64*
  %176 = load i64, i64* %175, align 4
  store i64 %176, i64* %112, align 8
  %177 = load i64*, i64** %113, align 8
  %178 = load i64, i64* %177, align 4
  store i64 %178, i64* %115, align 8
  store i8 0, i8* %101, align 8
  store i8 1, i8* %103, align 1
  br label %197

179:                                              ; preds = %152
  %180 = zext i8 %155 to i32
  %181 = add nuw nsw i32 %180, 2
  %182 = lshr i32 %181, 1
  %183 = add nuw nsw i32 %180, 255
  %184 = and i32 %183, %180
  %185 = lshr exact i32 %184, 1
  store i8 1, i8* %101, align 8
  %186 = load %struct.SkPoint*, %struct.SkPoint** %96, align 8
  %187 = zext i32 %182 to i64
  %188 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %186, i64 %187
  store %struct.SkPoint* %188, %struct.SkPoint** %96, align 8
  %189 = load float*, float** %98, align 8
  %190 = zext i32 %185 to i64
  %191 = getelementptr inbounds float, float* %189, i64 %190
  store float* %191, float** %98, align 8
  store i8 0, i8* %103, align 1
  %192 = xor i32 %182, -1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %188, i64 %193
  br label %197

195:                                              ; preds = %169, %167
  %196 = icmp eq i8* %154, %140
  br i1 %196, label %300, label %152

197:                                              ; preds = %145, %160, %172, %179
  %198 = phi %struct.SkPoint* [ %111, %145 ], [ %111, %160 ], [ %111, %172 ], [ %194, %179 ]
  %199 = phi i8 [ 1, %145 ], [ 1, %160 ], [ 1, %172 ], [ %155, %179 ]
  %200 = icmp eq %struct.SkPoint* %198, null
  br i1 %200, label %300, label %201

201:                                              ; preds = %197
  switch i8 %199, label %238 [
    i8 1, label %202
    i8 2, label %239
    i8 3, label %240
    i8 4, label %277
  ]

202:                                              ; preds = %201
  call void @_ZN8SkTArrayI11PathSegmentLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %116, i32 1, i32 1) #9
  %203 = load %class.PathSegment*, %class.PathSegment** %135, align 8
  %204 = load i64, i64* %108, align 8
  %205 = add i64 %204, 2
  %206 = and i64 %205, 4294967294
  %207 = and i64 %204, -4294967295
  %208 = or i64 %206, %207
  store i64 %208, i64* %108, align 8
  %209 = lshr i64 %205, 1
  %210 = and i64 %209, 2147483647
  %211 = add nsw i64 %210, -1
  %212 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %203, i64 %211, i32 0
  store i32 0, i32* %212, align 8
  %213 = load %class.PathSegment*, %class.PathSegment** %135, align 8
  %214 = load i64, i64* %108, align 8
  %215 = lshr i64 %214, 1
  %216 = and i64 %215, 2147483647
  %217 = add nsw i64 %216, -1
  %218 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %213, i64 %217, i32 1, i64 0
  %219 = bitcast %struct.SkPoint* %198 to i64*
  %220 = bitcast %struct.SkPoint* %218 to i64*
  %221 = load i64, i64* %219, align 4
  store i64 %221, i64* %220, align 4
  %222 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %198, i64 1
  %223 = load %class.PathSegment*, %class.PathSegment** %135, align 8
  %224 = load i64, i64* %108, align 8
  %225 = lshr i64 %224, 1
  %226 = and i64 %225, 2147483647
  %227 = add nsw i64 %226, -1
  %228 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %223, i64 %227, i32 1, i64 1
  %229 = bitcast %struct.SkPoint* %222 to i64*
  %230 = bitcast %struct.SkPoint* %228 to i64*
  %231 = load i64, i64* %229, align 4
  store i64 %231, i64* %230, align 4
  %232 = load %class.PathSegment*, %class.PathSegment** %135, align 8
  %233 = load i64, i64* %108, align 8
  %234 = lshr i64 %233, 1
  %235 = and i64 %234, 2147483647
  %236 = add nsw i64 %235, -1
  %237 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %232, i64 %236
  call void @_ZN11PathSegment4initEv(%class.PathSegment* %237) #9
  br label %238

238:                                              ; preds = %202, %239, %268, %299, %201
  br label %138

239:                                              ; preds = %201
  call fastcc void @_ZL8add_quadPK7SkPointP8SkTArrayI11PathSegmentLb1EE(%struct.SkPoint* nonnull %198, %class.SkTArray* %116)
  br label %238

240:                                              ; preds = %201
  %241 = load i32*, i32** %124, align 8
  %242 = load i32, i32* %241, align 4
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %125) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %137, i8 -86, i64 144, i1 false)
  store %union.anon* %126, %union.anon** %127, align 8
  store i32 0, i32* %128, align 8
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %129) #9
  %243 = bitcast %struct.SkPoint* %198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %129, i8* nonnull align 4 %243, i64 24, i1 false) #9
  store i32 %242, i32* %131, align 4
  %244 = call i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic* nonnull %8, float 2.500000e-01) #9
  %245 = shl i32 1, %244
  store i32 %245, i32* %128, align 8
  %246 = shl nsw i32 %245, 1
  %247 = or i32 %246, 1
  %248 = sext i32 %247 to i64
  %249 = load %struct.SkPoint*, %struct.SkPoint** %132, align 8
  %250 = icmp eq %struct.SkPoint* %249, %133
  br i1 %250, label %253, label %251

251:                                              ; preds = %240
  %252 = bitcast %struct.SkPoint* %249 to i8*
  call void @_Z7sk_freePv(i8* %252) #9
  br label %253

253:                                              ; preds = %251, %240
  %254 = icmp ugt i32 %247, 17
  br i1 %254, label %255, label %258

255:                                              ; preds = %253
  %256 = call i8* @_Z15sk_malloc_throwmm(i64 %248, i64 8) #9
  store i8* %256, i8** %134, align 8
  %257 = bitcast i8* %256 to %struct.SkPoint*
  br label %259

258:                                              ; preds = %253
  store %union.anon* %126, %union.anon** %127, align 8
  br label %259

259:                                              ; preds = %255, %258
  %260 = phi %struct.SkPoint* [ %133, %258 ], [ %257, %255 ]
  %261 = call i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic* nonnull %8, %struct.SkPoint* %260, i32 %244) #9
  store i32 %261, i32* %128, align 8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %129) #9
  %262 = icmp sgt i32 %261, 0
  br i1 %262, label %269, label %263

263:                                              ; preds = %269, %259
  %264 = load %struct.SkPoint*, %struct.SkPoint** %132, align 8
  %265 = icmp eq %struct.SkPoint* %264, %133
  br i1 %265, label %268, label %266

266:                                              ; preds = %263
  %267 = bitcast %struct.SkPoint* %264 to i8*
  call void @_Z7sk_freePv(i8* %267) #9
  br label %268

268:                                              ; preds = %263, %266
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %125) #9
  br label %238

269:                                              ; preds = %259, %269
  %270 = phi i64 [ %273, %269 ], [ 0, %259 ]
  %271 = shl nuw nsw i64 %270, 1
  %272 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %260, i64 %271
  call fastcc void @_ZL8add_quadPK7SkPointP8SkTArrayI11PathSegmentLb1EE(%struct.SkPoint* %272, %class.SkTArray* %116)
  %273 = add nuw nsw i64 %270, 1
  %274 = load i32, i32* %128, align 8
  %275 = sext i32 %274 to i64
  %276 = icmp slt i64 %273, %275
  br i1 %276, label %269, label %263

277:                                              ; preds = %201
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %117) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 -86, i64 120, i1 false) #9
  store i8* %117, i8** %121, align 8
  store i64 128849018880, i64* %120, align 8
  call void @_ZN11GrPathUtils19convertCubicToQuadsEPK7SkPointfP8SkTArrayIS0_Lb1EE(%struct.SkPoint* nonnull %198, float 1.000000e+00, %class.SkTArray.15* %122) #9
  %278 = load i64, i64* %120, align 8
  %279 = lshr i64 %278, 1
  %280 = trunc i64 %279 to i32
  %281 = and i32 %280, 2147483647
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %287, label %283

283:                                              ; preds = %277
  %284 = zext i32 %281 to i64
  br label %293

285:                                              ; preds = %293
  %286 = load i64, i64* %120, align 8
  br label %287

287:                                              ; preds = %285, %277
  %288 = phi i64 [ %286, %285 ], [ %278, %277 ]
  %289 = and i64 %288, 1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %299, label %291

291:                                              ; preds = %287
  %292 = load i8*, i8** %121, align 8
  call void @_Z7sk_freePv(i8* %292) #9
  br label %299

293:                                              ; preds = %293, %283
  %294 = phi i64 [ 0, %283 ], [ %297, %293 ]
  %295 = load %struct.SkPoint*, %struct.SkPoint** %123, align 8
  %296 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %295, i64 %294
  call fastcc void @_ZL8add_quadPK7SkPointP8SkTArrayI11PathSegmentLb1EE(%struct.SkPoint* %296, %class.SkTArray* %116) #9
  %297 = add nuw nsw i64 %294, 3
  %298 = icmp ult i64 %297, %284
  br i1 %298, label %293, label %285

299:                                              ; preds = %287, %291
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %117) #9
  br label %238

300:                                              ; preds = %197, %142, %195
  %301 = bitcast <2 x float>* %12 to %struct.SkPoint*
  %302 = bitcast <2 x float>* %13 to %struct.SkPoint*
  %303 = bitcast <2 x float>* %14 to %struct.SkPoint*
  %304 = load i64, i64* %108, align 8
  %305 = lshr i64 %304, 1
  %306 = trunc i64 %305 to i32
  %307 = and i32 %306, 2147483647
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %741, label %309

309:                                              ; preds = %300
  %310 = bitcast %struct.RowData* %11 to i8*
  %311 = bitcast <2 x float>* %12 to i8*
  %312 = bitcast <2 x float>* %13 to i8*
  %313 = bitcast <2 x float>* %14 to i8*
  %314 = bitcast <2 x double>* %9 to i8*
  %315 = sext i32 %3 to i64
  %316 = zext i32 %307 to i64
  br label %317

317:                                              ; preds = %378, %309
  %318 = phi i64 [ 0, %309 ], [ %379, %378 ]
  %319 = load %class.PathSegment*, %class.PathSegment** %135, align 8
  %320 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318
  %321 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 9, i32 0
  %322 = load float, float* %321, align 4
  %323 = fadd float %322, -4.000000e+00
  %324 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 9, i32 1
  %325 = load float, float* %324, align 4
  %326 = fadd float %325, -4.000000e+00
  %327 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 9, i32 2
  %328 = load float, float* %327, align 4
  %329 = fadd float %328, 4.000000e+00
  %330 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 9, i32 3
  %331 = load float, float* %330, align 4
  %332 = fadd float %331, 4.000000e+00
  %333 = fptosi float %323 to i32
  %334 = call float @llvm.ceil.f32(float %329) #9
  %335 = fcmp olt float %334, 0x41DFFFFFE0000000
  %336 = select i1 %335, float %334, float 0x41DFFFFFE0000000
  %337 = fcmp ogt float %336, 0xC1DFFFFFE0000000
  %338 = select i1 %337, float %336, float 0xC1DFFFFFE0000000
  %339 = fptosi float %338 to i32
  %340 = fptosi float %326 to i32
  %341 = call float @llvm.ceil.f32(float %332) #9
  %342 = fcmp olt float %341, 0x41DFFFFFE0000000
  %343 = select i1 %342, float %341, float 0x41DFFFFFE0000000
  %344 = fcmp ogt float %343, 0xC1DFFFFFE0000000
  %345 = select i1 %344, float %343, float 0xC1DFFFFFE0000000
  %346 = fptosi float %345 to i32
  %347 = icmp sgt i32 %333, 0
  %348 = select i1 %347, i32 %333, i32 0
  %349 = icmp sgt i32 %339, %3
  %350 = select i1 %349, i32 %3, i32 %339
  %351 = icmp sgt i32 %340, 0
  %352 = select i1 %351, i32 %340, i32 0
  %353 = icmp sgt i32 %346, %4
  %354 = select i1 %353, i32 %4, i32 %346
  %355 = icmp slt i32 %352, %354
  br i1 %355, label %356, label %378

356:                                              ; preds = %317
  %357 = sitofp i32 %348 to float
  %358 = insertelement <2 x float> undef, float %357, i32 0
  %359 = sitofp i32 %350 to float
  %360 = insertelement <2 x float> undef, float %359, i32 0
  %361 = icmp slt i32 %348, %350
  %362 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 0
  %363 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 1
  %364 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 2
  %365 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 3
  %366 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 4
  %367 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 4, i32 0, i64 5
  %368 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %320, i64 0, i32 0
  %369 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 2, i32 0
  %370 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 3, i32 0
  %371 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 2, i32 1
  %372 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 3, i32 1
  %373 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %319, i64 %318, i32 6
  %374 = zext i32 %348 to i64
  %375 = sext i32 %350 to i64
  %376 = zext i32 %352 to i64
  %377 = sext i32 %354 to i64
  br label %381

378:                                              ; preds = %406, %317
  %379 = add nuw nsw i64 %318, 1
  %380 = icmp eq i64 %379, %316
  br i1 %380, label %741, label %317

381:                                              ; preds = %409, %356
  %382 = phi float [ %331, %356 ], [ %411, %409 ]
  %383 = phi float [ %325, %356 ], [ %410, %409 ]
  %384 = phi i64 [ %376, %356 ], [ %407, %409 ]
  %385 = trunc i64 %384 to i32
  %386 = sitofp i32 %385 to float
  %387 = fadd float %386, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %310) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %310, i8* align 8 bitcast ({ i32, i32, i32, [4 x i8], double, double, double }* @__const._ZL29calculate_distance_field_dataP8SkTArrayI11PathSegmentLb1EEP6DFDataii.rowData to i8*), i64 40, i1 false) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %311) #9
  %388 = insertelement <2 x float> %358, float %387, i32 1
  store <2 x float> %388, <2 x float>* %12, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %312) #9
  %389 = insertelement <2 x float> %360, float %387, i32 1
  store <2 x float> %389, <2 x float>* %13, align 8
  %390 = fcmp olt float %383, %382
  br i1 %390, label %391, label %395

391:                                              ; preds = %381
  %392 = fcmp oge float %387, %383
  %393 = fcmp olt float %387, %382
  %394 = and i1 %392, %393
  br i1 %394, label %399, label %400

395:                                              ; preds = %381
  %396 = fcmp oge float %387, %382
  %397 = fcmp olt float %387, %383
  %398 = and i1 %397, %396
  br i1 %398, label %399, label %400

399:                                              ; preds = %395, %391
  call void @_Z22precomputation_for_rowP7RowDataRK11PathSegmentRK7SkPointS6_(%struct.RowData* nonnull %11, %class.PathSegment* dereferenceable(160) %320, %struct.SkPoint* nonnull dereferenceable(8) %301, %struct.SkPoint* nonnull dereferenceable(8) %302) #9
  br label %400

400:                                              ; preds = %399, %395, %391
  br i1 %361, label %401, label %406

401:                                              ; preds = %400
  %402 = mul nsw i64 %384, %315
  %403 = fpext float %387 to double
  %404 = insertelement <2 x double> undef, double %403, i32 0
  %405 = shufflevector <2 x double> %404, <2 x double> undef, <2 x i32> zeroinitializer
  br label %412

406:                                              ; preds = %737, %400
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %312) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %311) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %310) #9
  %407 = add nuw nsw i64 %384, 1
  %408 = icmp slt i64 %407, %377
  br i1 %408, label %409, label %378

409:                                              ; preds = %406
  %410 = load float, float* %324, align 4
  %411 = load float, float* %330, align 4
  br label %381

412:                                              ; preds = %737, %401
  %413 = phi i64 [ %374, %401 ], [ %739, %737 ]
  %414 = phi i32 [ 2, %401 ], [ %738, %737 ]
  %415 = add nsw i64 %413, %402
  %416 = trunc i64 %413 to i32
  %417 = sitofp i32 %416 to float
  %418 = fadd float %417, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %313) #9
  %419 = insertelement <2 x float> undef, float %418, i32 0
  %420 = insertelement <2 x float> %419, float %387, i32 1
  store <2 x float> %420, <2 x float>* %14, align 8
  %421 = getelementptr inbounds %struct.DFData, %struct.DFData* %49, i64 %415, i32 0
  %422 = load float, float* %421, align 4
  %423 = fcmp olt float %422, 2.250000e+00
  br i1 %423, label %428, label %424

424:                                              ; preds = %412
  %425 = fcmp olt float %422, 6.250000e+00
  br i1 %425, label %428, label %426

426:                                              ; preds = %424
  %427 = fcmp olt float %422, 1.225000e+01
  br i1 %427, label %428, label %489

428:                                              ; preds = %426, %424, %412
  %429 = phi i64 [ 2, %424 ], [ 1, %412 ], [ 3, %426 ]
  %430 = load float, float* %321, align 4
  %431 = call float @llvm.floor.f32(float %430) #9
  %432 = fcmp olt float %431, 0x41DFFFFFE0000000
  %433 = select i1 %432, float %431, float 0x41DFFFFFE0000000
  %434 = fcmp ogt float %433, 0xC1DFFFFFE0000000
  %435 = select i1 %434, float %433, float 0xC1DFFFFFE0000000
  %436 = fptosi float %435 to i32
  %437 = load float, float* %324, align 4
  %438 = call float @llvm.floor.f32(float %437) #9
  %439 = fcmp olt float %438, 0x41DFFFFFE0000000
  %440 = select i1 %439, float %438, float 0x41DFFFFFE0000000
  %441 = fcmp ogt float %440, 0xC1DFFFFFE0000000
  %442 = select i1 %441, float %440, float 0xC1DFFFFFE0000000
  %443 = fptosi float %442 to i32
  %444 = load float, float* %327, align 4
  %445 = call float @llvm.ceil.f32(float %444) #9
  %446 = fcmp olt float %445, 0x41DFFFFFE0000000
  %447 = select i1 %446, float %445, float 0x41DFFFFFE0000000
  %448 = fcmp ogt float %447, 0xC1DFFFFFE0000000
  %449 = select i1 %448, float %447, float 0xC1DFFFFFE0000000
  %450 = fptosi float %449 to i32
  %451 = load float, float* %330, align 4
  %452 = call float @llvm.ceil.f32(float %451) #9
  %453 = fcmp olt float %452, 0x41DFFFFFE0000000
  %454 = select i1 %453, float %452, float 0x41DFFFFFE0000000
  %455 = fcmp ogt float %454, 0xC1DFFFFFE0000000
  %456 = select i1 %455, float %454, float 0xC1DFFFFFE0000000
  %457 = fptosi float %456 to i32
  %458 = sext i32 %436 to i64
  %459 = sub nsw i64 %458, %429
  %460 = icmp slt i64 %459, 2147483647
  %461 = select i1 %460, i64 %459, i64 2147483647
  %462 = icmp sgt i64 %461, -2147483647
  %463 = select i1 %462, i64 %461, i64 -2147483647
  %464 = sext i32 %443 to i64
  %465 = sub nsw i64 %464, %429
  %466 = icmp slt i64 %465, 2147483647
  %467 = select i1 %466, i64 %465, i64 2147483647
  %468 = icmp sgt i64 %467, -2147483647
  %469 = select i1 %468, i64 %467, i64 -2147483647
  %470 = sext i32 %450 to i64
  %471 = add nsw i64 %429, %470
  %472 = icmp slt i64 %471, 2147483647
  %473 = select i1 %472, i64 %471, i64 2147483647
  %474 = icmp sgt i64 %473, -2147483647
  %475 = select i1 %474, i64 %473, i64 -2147483647
  %476 = sext i32 %457 to i64
  %477 = add nsw i64 %429, %476
  %478 = icmp slt i64 %477, 2147483647
  %479 = select i1 %478, i64 %477, i64 2147483647
  %480 = icmp slt i64 %413, %463
  %481 = icmp sge i64 %413, %475
  %482 = or i1 %480, %481
  %483 = icmp slt i64 %384, %469
  %484 = or i1 %483, %482
  br i1 %484, label %737, label %485

485:                                              ; preds = %428
  %486 = icmp sgt i64 %479, -2147483647
  %487 = select i1 %486, i64 %479, i64 -2147483647
  %488 = icmp slt i64 %384, %487
  br i1 %488, label %489, label %737

489:                                              ; preds = %485, %426
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %314) #9
  %490 = fpext float %418 to double
  %491 = load double, double* %362, align 8
  %492 = load double, double* %363, align 8
  %493 = load double, double* %364, align 8
  %494 = load double, double* %365, align 8
  %495 = insertelement <2 x double> undef, double %491, i32 0
  %496 = insertelement <2 x double> %495, double %494, i32 1
  %497 = insertelement <2 x double> undef, double %490, i32 0
  %498 = shufflevector <2 x double> %497, <2 x double> undef, <2 x i32> zeroinitializer
  %499 = fmul <2 x double> %496, %498
  %500 = load double, double* %366, align 8
  %501 = insertelement <2 x double> undef, double %492, i32 0
  %502 = insertelement <2 x double> %501, double %500, i32 1
  %503 = fmul <2 x double> %502, %405
  %504 = fadd <2 x double> %499, %503
  %505 = load double, double* %367, align 8
  %506 = insertelement <2 x double> undef, double %493, i32 0
  %507 = insertelement <2 x double> %506, double %505, i32 1
  %508 = fadd <2 x double> %507, %504
  store <2 x double> %508, <2 x double>* %9, align 16
  %509 = load i32, i32* %368, align 8
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %511, label %560

511:                                              ; preds = %489
  %512 = load double, double* %369, align 8
  %513 = load double, double* %370, align 8
  %514 = fcmp olt double %512, %513
  %515 = extractelement <2 x double> %508, i32 0
  br i1 %514, label %516, label %521

516:                                              ; preds = %511
  %517 = fcmp ole double %512, %515
  %518 = fadd double %513, 0.000000e+00
  %519 = fcmp oge double %518, %515
  %520 = and i1 %517, %519
  br i1 %520, label %526, label %529

521:                                              ; preds = %511
  %522 = fcmp ole double %513, %515
  %523 = fadd double %512, 0.000000e+00
  %524 = fcmp oge double %523, %515
  %525 = and i1 %522, %524
  br i1 %525, label %526, label %529

526:                                              ; preds = %521, %516
  %527 = extractelement <2 x double> %508, i32 1
  %528 = fmul double %527, %527
  br label %543

529:                                              ; preds = %521, %516
  %530 = extractelement <2 x double> %508, i32 0
  %531 = fcmp olt double %530, %512
  br i1 %531, label %532, label %537

532:                                              ; preds = %529
  %533 = fmul double %530, %530
  %534 = extractelement <2 x double> %508, i32 1
  %535 = fmul double %534, %534
  %536 = fadd double %533, %535
  br label %543

537:                                              ; preds = %529
  %538 = fsub double %530, %513
  %539 = fmul double %538, %538
  %540 = extractelement <2 x double> %508, i32 1
  %541 = fmul double %540, %540
  %542 = fadd double %541, %539
  br label %543

543:                                              ; preds = %537, %532, %526
  %544 = phi double [ %528, %526 ], [ %536, %532 ], [ %542, %537 ]
  %545 = load float, float* %324, align 4
  %546 = load float, float* %330, align 4
  %547 = fcmp olt float %545, %546
  br i1 %547, label %548, label %552

548:                                              ; preds = %543
  %549 = fcmp oge float %387, %545
  %550 = fcmp olt float %387, %546
  %551 = and i1 %549, %550
  br i1 %551, label %556, label %711

552:                                              ; preds = %543
  %553 = fcmp oge float %387, %546
  %554 = fcmp olt float %387, %545
  %555 = and i1 %554, %553
  br i1 %555, label %556, label %711

556:                                              ; preds = %552, %548
  %557 = extractelement <2 x double> %508, i32 1
  %558 = call double @llvm.copysign.f64(double 1.000000e+00, double %557) #9
  %559 = fptosi double %558 to i32
  br label %713

560:                                              ; preds = %489
  %561 = extractelement <2 x double> %508, i32 1
  %562 = fptrunc double %561 to float
  %563 = fsub float 5.000000e-01, %562
  %564 = extractelement <2 x double> %508, i32 0
  %565 = fptrunc double %564 to float
  %566 = insertelement <2 x float> undef, float %565, i32 0
  %567 = insertelement <2 x float> %566, float %563, i32 1
  %568 = insertelement <2 x float> <float -5.000000e-01, float undef>, float %563, i32 1
  %569 = fmul <2 x float> %567, %568
  %570 = extractelement <2 x float> %569, i32 0
  %571 = insertelement <2 x float> undef, float %570, i32 0
  %572 = insertelement <2 x float> %571, float %563, i32 1
  %573 = fmul <2 x float> %569, %572
  %574 = fmul <2 x float> %573, <float 2.500000e-01, float 0x3FA2F684C0000000>
  %575 = extractelement <2 x float> %574, i32 0
  %576 = extractelement <2 x float> %574, i32 1
  %577 = fadd float %575, %576
  %578 = fcmp ult float %577, 0.000000e+00
  br i1 %578, label %587, label %579

579:                                              ; preds = %560
  %580 = call float @sqrtf(float %577) #9
  %581 = fmul float %570, -5.000000e-01
  %582 = fadd float %581, %580
  %583 = call float @cbrtf(float %582) #10
  %584 = fsub float %581, %580
  %585 = call float @cbrtf(float %584) #10
  %586 = fadd float %583, %585
  br label %647

587:                                              ; preds = %560
  %588 = extractelement <2 x float> %573, i32 1
  %589 = fdiv float -2.700000e+01, %588
  %590 = fmul float %575, %589
  %591 = call float @sqrtf(float %590) #9
  %592 = fcmp ogt float %570, 0.000000e+00
  %593 = select i1 %592, float -1.000000e+00, float 1.000000e+00
  %594 = fmul float %593, %591
  %595 = call float @acosf(float %594) #9
  %596 = fcmp ogt double %564, 0.000000e+00
  %597 = fmul float %563, 0xBFD5555560000000
  %598 = call float @sqrtf(float %597) #9
  %599 = fmul float %598, 2.000000e+00
  %600 = fmul float %595, 0x3FD5555560000000
  br i1 %596, label %601, label %624

601:                                              ; preds = %587
  %602 = call float @cosf(float %600) #9
  %603 = fmul float %599, %602
  %604 = fpext float %603 to double
  %605 = load double, double* %369, align 8
  %606 = load double, double* %370, align 8
  %607 = fcmp olt double %605, %606
  br i1 %607, label %608, label %613

608:                                              ; preds = %601
  %609 = fcmp ole double %605, %604
  %610 = fadd double %606, 0.000000e+00
  %611 = fcmp oge double %610, %604
  %612 = and i1 %609, %611
  br i1 %612, label %647, label %618

613:                                              ; preds = %601
  %614 = fcmp ole double %606, %604
  %615 = fadd double %605, 0.000000e+00
  %616 = fcmp oge double %615, %604
  %617 = and i1 %614, %616
  br i1 %617, label %647, label %618

618:                                              ; preds = %613, %608
  %619 = call float @sqrtf(float %597) #9
  %620 = fmul float %619, 2.000000e+00
  %621 = fadd float %600, 0x4000C15240000000
  %622 = call float @cosf(float %621) #9
  %623 = fmul float %620, %622
  br label %647

624:                                              ; preds = %587
  %625 = fadd float %600, 0x4000C15240000000
  %626 = call float @cosf(float %625) #9
  %627 = fmul float %599, %626
  %628 = fpext float %627 to double
  %629 = load double, double* %369, align 8
  %630 = load double, double* %370, align 8
  %631 = fcmp olt double %629, %630
  br i1 %631, label %632, label %637

632:                                              ; preds = %624
  %633 = fcmp ole double %629, %628
  %634 = fadd double %630, 0.000000e+00
  %635 = fcmp oge double %634, %628
  %636 = and i1 %633, %635
  br i1 %636, label %647, label %642

637:                                              ; preds = %624
  %638 = fcmp ole double %630, %628
  %639 = fadd double %629, 0.000000e+00
  %640 = fcmp oge double %639, %628
  %641 = and i1 %638, %640
  br i1 %641, label %647, label %642

642:                                              ; preds = %637, %632
  %643 = call float @sqrtf(float %597) #9
  %644 = fmul float %643, 2.000000e+00
  %645 = call float @cosf(float %600) #9
  %646 = fmul float %644, %645
  br label %647

647:                                              ; preds = %642, %637, %632, %618, %613, %608, %579
  %648 = phi float [ %586, %579 ], [ %623, %618 ], [ %646, %642 ], [ %603, %608 ], [ %603, %613 ], [ %627, %632 ], [ %627, %637 ]
  %649 = fpext float %648 to double
  %650 = load double, double* %369, align 8
  %651 = load double, double* %370, align 8
  %652 = fcmp olt double %650, %651
  br i1 %652, label %653, label %658

653:                                              ; preds = %647
  %654 = fcmp ole double %650, %649
  %655 = fadd double %651, 0.000000e+00
  %656 = fcmp oge double %655, %649
  %657 = and i1 %654, %656
  br i1 %657, label %663, label %672

658:                                              ; preds = %647
  %659 = fcmp ole double %651, %649
  %660 = fadd double %650, 0.000000e+00
  %661 = fcmp oge double %660, %649
  %662 = and i1 %659, %661
  br i1 %662, label %663, label %672

663:                                              ; preds = %658, %653
  %664 = fmul float %648, %648
  %665 = fpext float %664 to double
  %666 = fsub double %564, %649
  %667 = fsub double %561, %665
  %668 = fmul double %666, %666
  %669 = fmul double %667, %667
  %670 = fadd double %668, %669
  %671 = fptrunc double %670 to float
  br label %691

672:                                              ; preds = %658, %653
  %673 = load double, double* %371, align 8
  %674 = shufflevector <2 x double> %508, <2 x double> undef, <2 x i32> zeroinitializer
  %675 = insertelement <2 x double> undef, double %650, i32 0
  %676 = insertelement <2 x double> %675, double %651, i32 1
  %677 = fsub <2 x double> %674, %676
  %678 = load double, double* %372, align 8
  %679 = shufflevector <2 x double> %508, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %680 = insertelement <2 x double> undef, double %673, i32 0
  %681 = insertelement <2 x double> %680, double %678, i32 1
  %682 = fsub <2 x double> %679, %681
  %683 = fmul <2 x double> %677, %677
  %684 = fmul <2 x double> %682, %682
  %685 = fadd <2 x double> %683, %684
  %686 = fptrunc <2 x double> %685 to <2 x float>
  %687 = extractelement <2 x float> %686, i32 0
  %688 = extractelement <2 x float> %686, i32 1
  %689 = fcmp olt float %687, %688
  %690 = select i1 %689, float %687, float %688
  br label %691

691:                                              ; preds = %672, %663
  %692 = phi float [ %671, %663 ], [ %690, %672 ]
  %693 = load float, float* %324, align 4
  %694 = load float, float* %330, align 4
  %695 = fcmp olt float %693, %694
  br i1 %695, label %696, label %700

696:                                              ; preds = %691
  %697 = fcmp oge float %387, %693
  %698 = fcmp olt float %387, %694
  %699 = and i1 %697, %698
  br i1 %699, label %704, label %706

700:                                              ; preds = %691
  %701 = fcmp oge float %387, %694
  %702 = fcmp olt float %387, %693
  %703 = and i1 %702, %701
  br i1 %703, label %704, label %706

704:                                              ; preds = %700, %696
  %705 = call i32 @_Z22calculate_side_of_quadRK11PathSegmentRK7SkPointRK8SkDPointRK7RowData(%class.PathSegment* dereferenceable(160) %320, %struct.SkPoint* nonnull dereferenceable(8) %303, %struct.SkDPoint* nonnull dereferenceable(16) %10, %struct.RowData* nonnull dereferenceable(40) %11) #9
  br label %706

706:                                              ; preds = %704, %700, %696
  %707 = phi i32 [ %705, %704 ], [ 2, %696 ], [ 2, %700 ]
  %708 = fpext float %692 to double
  %709 = load double, double* %373, align 8
  %710 = fmul double %709, %708
  br label %713

711:                                              ; preds = %552, %548
  %712 = fptrunc double %544 to float
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %314) #9
  br label %720

713:                                              ; preds = %706, %556
  %714 = phi i32 [ %707, %706 ], [ %559, %556 ]
  %715 = phi double [ %710, %706 ], [ %544, %556 ]
  %716 = fptrunc double %715 to float
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %314) #9
  %717 = icmp eq i32 %414, -1
  %718 = icmp eq i32 %714, 1
  %719 = and i1 %717, %718
  br i1 %719, label %727, label %720

720:                                              ; preds = %713, %711
  %721 = phi float [ %712, %711 ], [ %716, %713 ]
  %722 = phi i32 [ 2, %711 ], [ %714, %713 ]
  %723 = icmp eq i32 %414, 1
  %724 = icmp eq i32 %722, -1
  %725 = and i1 %723, %724
  %726 = zext i1 %725 to i32
  br label %727

727:                                              ; preds = %720, %713
  %728 = phi float [ %716, %713 ], [ %721, %720 ]
  %729 = phi i32 [ 1, %713 ], [ %722, %720 ]
  %730 = phi i32 [ -1, %713 ], [ %726, %720 ]
  %731 = fcmp olt float %728, %422
  br i1 %731, label %732, label %733

732:                                              ; preds = %727
  store float %728, float* %421, align 4
  br label %733

733:                                              ; preds = %732, %727
  %734 = getelementptr inbounds %struct.DFData, %struct.DFData* %49, i64 %415, i32 1
  %735 = load i32, i32* %734, align 4
  %736 = add nsw i32 %735, %730
  store i32 %736, i32* %734, align 4
  br label %737

737:                                              ; preds = %733, %485, %428
  %738 = phi i32 [ %729, %733 ], [ %414, %485 ], [ %414, %428 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %313) #9
  %739 = add nuw nsw i64 %413, 1
  %740 = icmp slt i64 %739, %375
  br i1 %740, label %412, label %406

741:                                              ; preds = %378, %300
  %742 = icmp sgt i32 %4, 0
  br i1 %742, label %743, label %759

743:                                              ; preds = %741
  %744 = icmp sgt i32 %3, 0
  %745 = add nsw i32 %3, -1
  %746 = zext i32 %745 to i64
  %747 = sext i32 %3 to i64
  %748 = zext i32 %4 to i64
  %749 = zext i32 %3 to i64
  br label %750

750:                                              ; preds = %771, %743
  %751 = phi i64 [ 0, %743 ], [ %772, %771 ]
  br i1 %744, label %752, label %771

752:                                              ; preds = %750
  %753 = mul nsw i64 %751, %747
  %754 = mul i64 %751, %5
  %755 = trunc i64 %751 to i32
  %756 = sitofp i32 %755 to double
  %757 = fadd double %756, 5.000000e-01
  %758 = fptrunc double %757 to float
  br label %774

759:                                              ; preds = %771, %741
  %760 = load i64, i64* %108, align 8
  %761 = and i64 %760, 1
  %762 = icmp eq i64 %761, 0
  br i1 %762, label %765, label %763

763:                                              ; preds = %759
  %764 = load i8*, i8** %109, align 8
  call void @_Z7sk_freePv(i8* %764) #9
  br label %765

765:                                              ; preds = %759, %763
  call void @llvm.lifetime.end.p0i8(i64 2416, i8* nonnull %105) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %93) #9
  %766 = load i8*, i8** %50, align 8
  %767 = bitcast i32* %39 to i8*
  %768 = icmp eq i8* %766, %767
  br i1 %768, label %770, label %769

769:                                              ; preds = %765
  call void @_Z7sk_freePv(i8* %766) #9
  br label %770

770:                                              ; preds = %765, %769
  call void @llvm.lifetime.end.p0i8(i64 1040, i8* nonnull %36) #9
  br label %864

771:                                              ; preds = %861, %750
  %772 = add nuw nsw i64 %751, 1
  %773 = icmp eq i64 %772, %748
  br i1 %773, label %759, label %750

774:                                              ; preds = %861, %752
  %775 = phi i64 [ 0, %752 ], [ %862, %861 ]
  %776 = phi i32 [ 0, %752 ], [ %780, %861 ]
  %777 = add nsw i64 %775, %753
  %778 = getelementptr inbounds %struct.DFData, %struct.DFData* %49, i64 %777, i32 1
  %779 = load i32, i32* %778, align 4
  %780 = add nsw i32 %779, %776
  %781 = load i8, i8* %25, align 2
  %782 = and i8 %781, 3
  %783 = zext i8 %782 to i32
  switch i32 %783, label %798 [
    i32 0, label %784
    i32 2, label %787
    i32 1, label %790
    i32 3, label %794
  ]

784:                                              ; preds = %774
  %785 = icmp eq i32 %780, 0
  %786 = select i1 %785, i32 1, i32 -1
  br label %799

787:                                              ; preds = %774
  %788 = icmp eq i32 %780, 0
  %789 = select i1 %788, i32 -1, i32 1
  br label %799

790:                                              ; preds = %774
  %791 = and i32 %780, 1
  %792 = icmp eq i32 %791, 0
  %793 = select i1 %792, i32 1, i32 -1
  br label %799

794:                                              ; preds = %774
  %795 = and i32 %780, 1
  %796 = icmp eq i32 %795, 0
  %797 = select i1 %796, i32 -1, i32 1
  br label %799

798:                                              ; preds = %774
  unreachable

799:                                              ; preds = %794, %790, %787, %784
  %800 = phi i32 [ %797, %794 ], [ %793, %790 ], [ %789, %787 ], [ %786, %784 ]
  %801 = icmp eq i64 %775, %746
  %802 = icmp ne i32 %780, 0
  %803 = and i1 %801, %802
  br i1 %803, label %804, label %837

804:                                              ; preds = %799, %804
  %805 = phi i64 [ %835, %804 ], [ 0, %799 ]
  %806 = add nsw i64 %805, %753
  %807 = trunc i64 %805 to i32
  %808 = sitofp i32 %807 to double
  %809 = fadd double %808, 5.000000e-01
  %810 = fptrunc double %809 to float
  %811 = call zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath* nonnull %16, float %810, float %758) #9
  %812 = getelementptr inbounds %struct.DFData, %struct.DFData* %49, i64 %806, i32 0
  %813 = load float, float* %812, align 4
  %814 = call float @sqrtf(float %813) #9
  %815 = select i1 %811, float -1.000000e+00, float 1.000000e+00
  %816 = fmul float %815, %814
  %817 = fsub float -0.000000e+00, %816
  %818 = fcmp ogt float %817, 3.968750e+00
  %819 = select i1 %818, float 3.968750e+00, float %817
  %820 = fcmp ogt float %819, -4.000000e+00
  %821 = select i1 %820, float %819, float -4.000000e+00
  %822 = fadd float %821, 4.000000e+00
  %823 = fmul float %822, 1.250000e-01
  %824 = fmul float %823, 2.560000e+02
  %825 = fadd float %824, 5.000000e-01
  %826 = call float @llvm.floor.f32(float %825) #9
  %827 = fcmp olt float %826, 0x41DFFFFFE0000000
  %828 = select i1 %827, float %826, float 0x41DFFFFFE0000000
  %829 = fcmp ogt float %828, 0xC1DFFFFFE0000000
  %830 = select i1 %829, float %828, float 0xC1DFFFFFE0000000
  %831 = fptosi float %830 to i32
  %832 = trunc i32 %831 to i8
  %833 = add i64 %754, %805
  %834 = getelementptr inbounds i8, i8* %0, i64 %833
  store i8 %832, i8* %834, align 1
  %835 = add nuw nsw i64 %805, 1
  %836 = icmp eq i64 %835, %749
  br i1 %836, label %861, label %804

837:                                              ; preds = %799
  %838 = getelementptr inbounds %struct.DFData, %struct.DFData* %49, i64 %777, i32 0
  %839 = load float, float* %838, align 4
  %840 = call float @sqrtf(float %839) #9
  %841 = sitofp i32 %800 to float
  %842 = fmul float %840, %841
  %843 = fsub float -0.000000e+00, %842
  %844 = fcmp ogt float %843, 3.968750e+00
  %845 = select i1 %844, float 3.968750e+00, float %843
  %846 = fcmp ogt float %845, -4.000000e+00
  %847 = select i1 %846, float %845, float -4.000000e+00
  %848 = fadd float %847, 4.000000e+00
  %849 = fmul float %848, 1.250000e-01
  %850 = fmul float %849, 2.560000e+02
  %851 = fadd float %850, 5.000000e-01
  %852 = call float @llvm.floor.f32(float %851) #9
  %853 = fcmp olt float %852, 0x41DFFFFFE0000000
  %854 = select i1 %853, float %852, float 0x41DFFFFFE0000000
  %855 = fcmp ogt float %854, 0xC1DFFFFFE0000000
  %856 = select i1 %855, float %854, float 0xC1DFFFFFE0000000
  %857 = fptosi float %856 to i32
  %858 = trunc i32 %857 to i8
  %859 = add i64 %754, %775
  %860 = getelementptr inbounds i8, i8* %0, i64 %859
  store i8 %858, i8* %860, align 1
  br label %861

861:                                              ; preds = %804, %837
  %862 = add nuw nsw i64 %775, 1
  %863 = icmp eq i64 %862, %749
  br i1 %863, label %771, label %774

864:                                              ; preds = %6, %770
  %865 = phi i1 [ true, %770 ], [ false, %6 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #9
  ret i1 %865
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #5

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #5

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #5

declare void @_ZN14SkPathEdgeIterC1ERK6SkPath(%class.SkPathEdgeIter*, %class.SkPath* dereferenceable(16)) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZL8add_quadPK7SkPointP8SkTArrayI11PathSegmentLb1EE(%struct.SkPoint* nocapture readonly, %class.SkTArray*) unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %4 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %struct.SkPoint* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = fmul <2 x float> %8, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = extractelement <2 x float> %9, i32 1
  %12 = fadd float %10, %11
  %13 = fcmp olt float %12, 3.906250e-03
  br i1 %13, label %14, label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %16 = load float, float* %15, align 4
  %17 = bitcast float %16 to i32
  br label %39

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %20 = bitcast %struct.SkPoint* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = fsub <2 x float> %7, %21
  %23 = fmul <2 x float> %22, %22
  %24 = extractelement <2 x float> %23, i32 1
  %25 = extractelement <2 x float> %23, i32 0
  %26 = fadd float %25, %24
  %27 = fcmp olt float %26, 3.906250e-03
  %28 = extractelement <2 x float> %21, i32 0
  %29 = bitcast float %28 to i32
  br i1 %27, label %39, label %30

30:                                               ; preds = %18
  %31 = shufflevector <2 x float> %22, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %32 = fsub <2 x float> %7, %5
  %33 = fmul <2 x float> %32, %31
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = fsub float %35, %34
  %37 = tail call float @llvm.fabs.f32(float %36) #9
  %38 = fcmp ugt float %37, 3.906250e-03
  br i1 %38, label %91, label %39

39:                                               ; preds = %14, %30, %18
  %40 = phi i32 [ %17, %14 ], [ %29, %30 ], [ %29, %18 ]
  %41 = phi float [ %16, %14 ], [ %28, %30 ], [ %28, %18 ]
  %42 = extractelement <2 x float> %5, i32 0
  %43 = fcmp une float %42, %41
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  br i1 %43, label %45, label %48

45:                                               ; preds = %39
  %46 = bitcast float* %44 to i32*
  %47 = load i32, i32* %46, align 4
  br label %54

48:                                               ; preds = %39
  %49 = load float, float* %44, align 4
  %50 = extractelement <2 x float> %5, i32 1
  %51 = fcmp une float %50, %49
  br i1 %51, label %52, label %137

52:                                               ; preds = %48
  %53 = bitcast float %49 to i32
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %47, %45 ], [ %53, %52 ]
  tail call void @_ZN8SkTArrayI11PathSegmentLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %1, i32 1, i32 1) #9
  %56 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  %57 = load %class.PathSegment*, %class.PathSegment** %56, align 8
  %58 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, 2
  %61 = and i64 %60, 4294967294
  %62 = and i64 %59, -4294967295
  %63 = or i64 %61, %62
  store i64 %63, i64* %58, align 8
  %64 = lshr i64 %60, 1
  %65 = and i64 %64, 2147483647
  %66 = add nsw i64 %65, -1
  %67 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %57, i64 %66, i32 0
  store i32 0, i32* %67, align 8
  %68 = load %class.PathSegment*, %class.PathSegment** %56, align 8
  %69 = load i64, i64* %58, align 8
  %70 = lshr i64 %69, 1
  %71 = and i64 %70, 2147483647
  %72 = add nsw i64 %71, -1
  %73 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %68, i64 %72, i32 1, i64 0, i32 0
  store float %42, float* %73, align 4
  %74 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %68, i64 %72, i32 1, i64 0, i32 1
  %75 = extractelement <2 x float> %5, i32 1
  store float %75, float* %74, align 4
  %76 = load %class.PathSegment*, %class.PathSegment** %56, align 8
  %77 = load i64, i64* %58, align 8
  %78 = lshr i64 %77, 1
  %79 = and i64 %78, 2147483647
  %80 = add nsw i64 %79, -1
  %81 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %76, i64 %80, i32 1, i64 1
  %82 = bitcast %struct.SkPoint* %81 to i32*
  store i32 %40, i32* %82, align 4
  %83 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %76, i64 %80, i32 1, i64 1, i32 1
  %84 = bitcast float* %83 to i32*
  store i32 %55, i32* %84, align 4
  %85 = load %class.PathSegment*, %class.PathSegment** %56, align 8
  %86 = load i64, i64* %58, align 8
  %87 = lshr i64 %86, 1
  %88 = and i64 %87, 2147483647
  %89 = add nsw i64 %88, -1
  %90 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %85, i64 %89
  tail call void @_ZN11PathSegment4initEv(%class.PathSegment* %90) #9
  br label %137

91:                                               ; preds = %30
  tail call void @_ZN8SkTArrayI11PathSegmentLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %1, i32 1, i32 1) #9
  %92 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  %93 = load %class.PathSegment*, %class.PathSegment** %92, align 8
  %94 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 2
  %97 = and i64 %96, 4294967294
  %98 = and i64 %95, -4294967295
  %99 = or i64 %97, %98
  store i64 %99, i64* %94, align 8
  %100 = lshr i64 %96, 1
  %101 = and i64 %100, 2147483647
  %102 = add nsw i64 %101, -1
  %103 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %93, i64 %102, i32 0
  store i32 1, i32* %103, align 8
  %104 = load %class.PathSegment*, %class.PathSegment** %92, align 8
  %105 = load i64, i64* %94, align 8
  %106 = lshr i64 %105, 1
  %107 = and i64 %106, 2147483647
  %108 = add nsw i64 %107, -1
  %109 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %104, i64 %108, i32 1, i64 0
  %110 = bitcast %struct.SkPoint* %0 to i64*
  %111 = bitcast %struct.SkPoint* %109 to i64*
  %112 = load i64, i64* %110, align 4
  store i64 %112, i64* %111, align 4
  %113 = load %class.PathSegment*, %class.PathSegment** %92, align 8
  %114 = load i64, i64* %94, align 8
  %115 = lshr i64 %114, 1
  %116 = and i64 %115, 2147483647
  %117 = add nsw i64 %116, -1
  %118 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %113, i64 %117, i32 1, i64 1
  %119 = bitcast %struct.SkPoint* %3 to i64*
  %120 = bitcast %struct.SkPoint* %118 to i64*
  %121 = load i64, i64* %119, align 4
  store i64 %121, i64* %120, align 4
  %122 = load %class.PathSegment*, %class.PathSegment** %92, align 8
  %123 = load i64, i64* %94, align 8
  %124 = lshr i64 %123, 1
  %125 = and i64 %124, 2147483647
  %126 = add nsw i64 %125, -1
  %127 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %122, i64 %126, i32 1, i64 2
  %128 = bitcast %struct.SkPoint* %19 to i64*
  %129 = bitcast %struct.SkPoint* %127 to i64*
  %130 = load i64, i64* %128, align 4
  store i64 %130, i64* %129, align 4
  %131 = load %class.PathSegment*, %class.PathSegment** %92, align 8
  %132 = load i64, i64* %94, align 8
  %133 = lshr i64 %132, 1
  %134 = and i64 %133, 2147483647
  %135 = add nsw i64 %134, -1
  %136 = getelementptr inbounds %class.PathSegment, %class.PathSegment* %131, i64 %135
  tail call void @_ZN11PathSegment4initEv(%class.PathSegment* %136)
  br label %137

137:                                              ; preds = %48, %54, %91
  ret void
}

declare zeroext i1 @_ZNK6SkPath8containsEff(%class.SkPath*, float, float) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #3

declare void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath*, %class.SkMatrix* dereferenceable(40), %class.SkPath*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI11PathSegmentLb1EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %66

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %66, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 160) #9
  %45 = load i64, i64* %4, align 8
  %46 = lshr i64 %45, 1
  %47 = and i64 %46, 2147483647
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %35
  %50 = mul nuw nsw i64 %47, 160
  %51 = bitcast %class.SkTArray* %0 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %52, i64 %50, i1 false) #9
  %53 = load i64, i64* %4, align 8
  br label %54

54:                                               ; preds = %35, %49
  %55 = phi i64 [ %45, %35 ], [ %53, %49 ]
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %56, 0
  %58 = bitcast %class.SkTArray* %0 to i8**
  br i1 %57, label %62, label %59

59:                                               ; preds = %54
  %60 = load i8*, i8** %58, align 8
  tail call void @_Z7sk_freePv(i8* %60) #9
  %61 = load i64, i64* %4, align 8
  br label %62

62:                                               ; preds = %54, %59
  %63 = phi i64 [ %61, %59 ], [ %55, %54 ]
  store i8* %44, i8** %58, align 8
  %64 = and i64 %63, -4294967298
  %65 = or i64 %64, 1
  store i64 %65, i64* %4, align 8
  br label %66

66:                                               ; preds = %62, %32, %21
  ret void
}

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #5

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #5

declare i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic*, float) local_unnamed_addr #5

declare i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic*, %struct.SkPoint*, i32) local_unnamed_addr #5

declare void @_ZN11GrPathUtils19convertCubicToQuadsEPK7SkPointfP8SkTArrayIS0_Lb1EE(%struct.SkPoint*, float, %class.SkTArray.15*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #3

; Function Attrs: nofree nounwind readnone
declare float @cbrtf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
