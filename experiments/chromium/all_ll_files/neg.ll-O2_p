; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/neg.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/neg.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [60 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/neg.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [63 x i8] c"Neg only currently supports int64, int32, and float32, got %d.\00", align 1
@_ZZN6tflite3ops7builtin12Register_NEGEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3neg7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3neg4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin3neg7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #6
  br label %50

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #6
  br label %50

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %45 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %44, align 8
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %47 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %46, align 8
  %48 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %47) #6
  %49 = tail call i32 %45(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteIntArray* %48) #6
  br label %50

50:                                               ; preds = %39, %17, %8
  %51 = phi i32 [ 1, %8 ], [ 1, %17 ], [ %49, %39 ]
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin3neg4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %22 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %21, align 8
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %22, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %19, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %19 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 0
  %34 = load i32, i32* %33, align 8
  switch i32 %34, label %975 [
    i32 4, label %35
    i32 2, label %349
    i32 1, label %661
  ]

35:                                               ; preds = %31
  %36 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #6
  %37 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %39, align 8, !alias.scope !2
  br label %69

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %42 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %41, align 8, !noalias !2
  %43 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 4, !noalias !2
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %42, i64 0, i32 1, i64 0
  %46 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %44, i32* %46, align 8, !alias.scope !2
  %47 = icmp sgt i32 %44, 5
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = sext i32 %44 to i64
  %50 = shl nsw i64 %49, 2
  %51 = tail call i8* @_Znam(i64 %50) #7, !noalias !2
  %52 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %53 = bitcast i32** %52 to i8**
  store i8* %51, i8** %53, align 8, !alias.scope !2
  %54 = bitcast i8* %51 to i32*
  br label %60

55:                                               ; preds = %40
  %56 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %57 = bitcast %union.anon* %56 to i32*
  %58 = sext i32 %44 to i64
  %59 = shl nsw i64 %58, 2
  br label %60

60:                                               ; preds = %55, %48
  %61 = phi i64 [ %50, %48 ], [ %59, %55 ]
  %62 = phi i32* [ %54, %48 ], [ %57, %55 ]
  %63 = bitcast i32* %62 to i8*
  %64 = bitcast i32* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %61, i1 false) #6
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %66 = bitcast %union.TfLitePtrUnion* %65 to i64**
  %67 = load i64*, i64** %66, align 8
  %68 = bitcast i64* %67 to i8*
  br label %69

69:                                               ; preds = %38, %60
  %70 = phi i32 [ %44, %60 ], [ 0, %38 ]
  %71 = phi i8* [ %68, %60 ], [ null, %38 ]
  %72 = phi i64* [ %67, %60 ], [ null, %38 ]
  %73 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #6
  %74 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %74, label %75, label %77

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %76, align 8, !alias.scope !5
  br label %106

77:                                               ; preds = %69
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %79 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8, !noalias !5
  %80 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 4, !noalias !5
  %82 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %79, i64 0, i32 1, i64 0
  %83 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %81, i32* %83, align 8, !alias.scope !5
  %84 = icmp sgt i32 %81, 5
  br i1 %84, label %85, label %92

85:                                               ; preds = %77
  %86 = sext i32 %81 to i64
  %87 = shl nsw i64 %86, 2
  %88 = tail call i8* @_Znam(i64 %87) #7, !noalias !5
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %90 = bitcast i32** %89 to i8**
  store i8* %88, i8** %90, align 8, !alias.scope !5
  %91 = bitcast i8* %88 to i32*
  br label %97

92:                                               ; preds = %77
  %93 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %94 = bitcast %union.anon* %93 to i32*
  %95 = sext i32 %81 to i64
  %96 = shl nsw i64 %95, 2
  br label %97

97:                                               ; preds = %92, %85
  %98 = phi i64 [ %87, %85 ], [ %96, %92 ]
  %99 = phi i32* [ %91, %85 ], [ %94, %92 ]
  %100 = bitcast i32* %99 to i8*
  %101 = bitcast i32* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %100, i8* align 4 %101, i64 %98, i1 false) #6
  %102 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %103 = bitcast %union.TfLitePtrUnion* %102 to i64**
  %104 = load i64*, i64** %103, align 8
  %105 = bitcast i64* %104 to i8*
  br label %106

106:                                              ; preds = %75, %97
  %107 = phi i32 [ %81, %97 ], [ 0, %75 ]
  %108 = phi i8* [ %105, %97 ], [ null, %75 ]
  %109 = phi i64* [ %104, %97 ], [ null, %75 ]
  %110 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %111 = icmp sgt i32 %70, 5
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  %113 = getelementptr inbounds %union.anon, %union.anon* %110, i64 0, i32 0
  %114 = load i32*, i32** %113, align 8
  br label %118

115:                                              ; preds = %106
  %116 = bitcast %union.anon* %110 to i32*
  %117 = icmp sgt i32 %70, 0
  br i1 %117, label %118, label %221

118:                                              ; preds = %115, %112
  %119 = phi i32* [ %114, %112 ], [ %116, %115 ]
  %120 = zext i32 %70 to i64
  %121 = icmp ult i32 %70, 8
  br i1 %121, label %207, label %122

122:                                              ; preds = %118
  %123 = and i64 %120, 4294967288
  %124 = add nsw i64 %123, -8
  %125 = lshr exact i64 %124, 3
  %126 = add nuw nsw i64 %125, 1
  %127 = and i64 %126, 3
  %128 = icmp ult i64 %124, 24
  br i1 %128, label %174, label %129

129:                                              ; preds = %122
  %130 = sub nsw i64 %126, %127
  br label %131

131:                                              ; preds = %131, %129
  %132 = phi i64 [ 0, %129 ], [ %171, %131 ]
  %133 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %129 ], [ %169, %131 ]
  %134 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %129 ], [ %170, %131 ]
  %135 = phi i64 [ %130, %129 ], [ %172, %131 ]
  %136 = getelementptr inbounds i32, i32* %119, i64 %132
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr inbounds i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = mul nsw <4 x i32> %138, %133
  %143 = mul nsw <4 x i32> %141, %134
  %144 = or i64 %132, 8
  %145 = getelementptr inbounds i32, i32* %119, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = mul nsw <4 x i32> %147, %142
  %152 = mul nsw <4 x i32> %150, %143
  %153 = or i64 %132, 16
  %154 = getelementptr inbounds i32, i32* %119, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = getelementptr inbounds i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = mul nsw <4 x i32> %156, %151
  %161 = mul nsw <4 x i32> %159, %152
  %162 = or i64 %132, 24
  %163 = getelementptr inbounds i32, i32* %119, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = getelementptr inbounds i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = mul nsw <4 x i32> %165, %160
  %170 = mul nsw <4 x i32> %168, %161
  %171 = add i64 %132, 32
  %172 = add i64 %135, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %131, !llvm.loop !8

174:                                              ; preds = %131, %122
  %175 = phi <4 x i32> [ undef, %122 ], [ %169, %131 ]
  %176 = phi <4 x i32> [ undef, %122 ], [ %170, %131 ]
  %177 = phi i64 [ 0, %122 ], [ %171, %131 ]
  %178 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %169, %131 ]
  %179 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %170, %131 ]
  %180 = icmp eq i64 %127, 0
  br i1 %180, label %197, label %181

181:                                              ; preds = %174, %181
  %182 = phi i64 [ %194, %181 ], [ %177, %174 ]
  %183 = phi <4 x i32> [ %192, %181 ], [ %178, %174 ]
  %184 = phi <4 x i32> [ %193, %181 ], [ %179, %174 ]
  %185 = phi i64 [ %195, %181 ], [ %127, %174 ]
  %186 = getelementptr inbounds i32, i32* %119, i64 %182
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = getelementptr inbounds i32, i32* %186, i64 4
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 4
  %192 = mul nsw <4 x i32> %188, %183
  %193 = mul nsw <4 x i32> %191, %184
  %194 = add i64 %182, 8
  %195 = add i64 %185, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %181, !llvm.loop !10

197:                                              ; preds = %181, %174
  %198 = phi <4 x i32> [ %175, %174 ], [ %192, %181 ]
  %199 = phi <4 x i32> [ %176, %174 ], [ %193, %181 ]
  %200 = mul <4 x i32> %199, %198
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %202 = mul <4 x i32> %200, %201
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %204 = mul <4 x i32> %202, %203
  %205 = extractelement <4 x i32> %204, i32 0
  %206 = icmp eq i64 %123, %120
  br i1 %206, label %218, label %207

207:                                              ; preds = %197, %118
  %208 = phi i64 [ 0, %118 ], [ %123, %197 ]
  %209 = phi i32 [ 1, %118 ], [ %205, %197 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi i64 [ %216, %210 ], [ %208, %207 ]
  %212 = phi i32 [ %215, %210 ], [ %209, %207 ]
  %213 = getelementptr inbounds i32, i32* %119, i64 %211
  %214 = load i32, i32* %213, align 4
  %215 = mul nsw i32 %214, %212
  %216 = add nuw nsw i64 %211, 1
  %217 = icmp eq i64 %216, %120
  br i1 %217, label %218, label %210, !llvm.loop !12

218:                                              ; preds = %210, %197
  %219 = phi i32 [ %205, %197 ], [ %215, %210 ]
  %220 = icmp sgt i32 %219, 0
  br i1 %220, label %221, label %333

221:                                              ; preds = %218, %115
  %222 = phi i32 [ %219, %218 ], [ 1, %115 ]
  %223 = zext i32 %222 to i64
  %224 = icmp ult i32 %222, 4
  br i1 %224, label %291, label %225

225:                                              ; preds = %221
  %226 = getelementptr i64, i64* %109, i64 %223
  %227 = bitcast i64* %226 to i8*
  %228 = getelementptr i64, i64* %72, i64 %223
  %229 = bitcast i64* %228 to i8*
  %230 = icmp ult i8* %108, %229
  %231 = icmp ult i8* %71, %227
  %232 = and i1 %230, %231
  br i1 %232, label %291, label %233

233:                                              ; preds = %225
  %234 = and i64 %223, 4294967292
  %235 = add nsw i64 %234, -4
  %236 = lshr exact i64 %235, 2
  %237 = add nuw nsw i64 %236, 1
  %238 = and i64 %237, 1
  %239 = icmp eq i64 %235, 0
  br i1 %239, label %273, label %240

240:                                              ; preds = %233
  %241 = sub nuw nsw i64 %237, %238
  br label %242

242:                                              ; preds = %242, %240
  %243 = phi i64 [ 0, %240 ], [ %270, %242 ]
  %244 = phi i64 [ %241, %240 ], [ %271, %242 ]
  %245 = getelementptr inbounds i64, i64* %72, i64 %243
  %246 = bitcast i64* %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 8, !alias.scope !14
  %248 = getelementptr inbounds i64, i64* %245, i64 2
  %249 = bitcast i64* %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 8, !alias.scope !14
  %251 = sub nsw <2 x i64> zeroinitializer, %247
  %252 = sub nsw <2 x i64> zeroinitializer, %250
  %253 = getelementptr inbounds i64, i64* %109, i64 %243
  %254 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %254, align 8, !alias.scope !17, !noalias !14
  %255 = getelementptr inbounds i64, i64* %253, i64 2
  %256 = bitcast i64* %255 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %256, align 8, !alias.scope !17, !noalias !14
  %257 = or i64 %243, 4
  %258 = getelementptr inbounds i64, i64* %72, i64 %257
  %259 = bitcast i64* %258 to <2 x i64>*
  %260 = load <2 x i64>, <2 x i64>* %259, align 8, !alias.scope !14
  %261 = getelementptr inbounds i64, i64* %258, i64 2
  %262 = bitcast i64* %261 to <2 x i64>*
  %263 = load <2 x i64>, <2 x i64>* %262, align 8, !alias.scope !14
  %264 = sub nsw <2 x i64> zeroinitializer, %260
  %265 = sub nsw <2 x i64> zeroinitializer, %263
  %266 = getelementptr inbounds i64, i64* %109, i64 %257
  %267 = bitcast i64* %266 to <2 x i64>*
  store <2 x i64> %264, <2 x i64>* %267, align 8, !alias.scope !17, !noalias !14
  %268 = getelementptr inbounds i64, i64* %266, i64 2
  %269 = bitcast i64* %268 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %269, align 8, !alias.scope !17, !noalias !14
  %270 = add i64 %243, 8
  %271 = add i64 %244, -2
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %242, !llvm.loop !19

273:                                              ; preds = %242, %233
  %274 = phi i64 [ 0, %233 ], [ %270, %242 ]
  %275 = icmp eq i64 %238, 0
  br i1 %275, label %289, label %276

276:                                              ; preds = %273
  %277 = getelementptr inbounds i64, i64* %72, i64 %274
  %278 = bitcast i64* %277 to <2 x i64>*
  %279 = load <2 x i64>, <2 x i64>* %278, align 8, !alias.scope !14
  %280 = getelementptr inbounds i64, i64* %277, i64 2
  %281 = bitcast i64* %280 to <2 x i64>*
  %282 = load <2 x i64>, <2 x i64>* %281, align 8, !alias.scope !14
  %283 = sub nsw <2 x i64> zeroinitializer, %279
  %284 = sub nsw <2 x i64> zeroinitializer, %282
  %285 = getelementptr inbounds i64, i64* %109, i64 %274
  %286 = bitcast i64* %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !17, !noalias !14
  %287 = getelementptr inbounds i64, i64* %285, i64 2
  %288 = bitcast i64* %287 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %288, align 8, !alias.scope !17, !noalias !14
  br label %289

289:                                              ; preds = %273, %276
  %290 = icmp eq i64 %234, %223
  br i1 %290, label %333, label %291

291:                                              ; preds = %289, %225, %221
  %292 = phi i64 [ 0, %225 ], [ 0, %221 ], [ %234, %289 ]
  %293 = xor i64 %292, -1
  %294 = add nsw i64 %293, %223
  %295 = and i64 %223, 3
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %307, label %297

297:                                              ; preds = %291, %297
  %298 = phi i64 [ %304, %297 ], [ %292, %291 ]
  %299 = phi i64 [ %305, %297 ], [ %295, %291 ]
  %300 = getelementptr inbounds i64, i64* %72, i64 %298
  %301 = load i64, i64* %300, align 8
  %302 = sub nsw i64 0, %301
  %303 = getelementptr inbounds i64, i64* %109, i64 %298
  store i64 %302, i64* %303, align 8
  %304 = add nuw nsw i64 %298, 1
  %305 = add i64 %299, -1
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %307, label %297, !llvm.loop !20

307:                                              ; preds = %297, %291
  %308 = phi i64 [ %292, %291 ], [ %304, %297 ]
  %309 = icmp ult i64 %294, 3
  br i1 %309, label %333, label %310

310:                                              ; preds = %307, %310
  %311 = phi i64 [ %331, %310 ], [ %308, %307 ]
  %312 = getelementptr inbounds i64, i64* %72, i64 %311
  %313 = load i64, i64* %312, align 8
  %314 = sub nsw i64 0, %313
  %315 = getelementptr inbounds i64, i64* %109, i64 %311
  store i64 %314, i64* %315, align 8
  %316 = add nuw nsw i64 %311, 1
  %317 = getelementptr inbounds i64, i64* %72, i64 %316
  %318 = load i64, i64* %317, align 8
  %319 = sub nsw i64 0, %318
  %320 = getelementptr inbounds i64, i64* %109, i64 %316
  store i64 %319, i64* %320, align 8
  %321 = add nuw nsw i64 %311, 2
  %322 = getelementptr inbounds i64, i64* %72, i64 %321
  %323 = load i64, i64* %322, align 8
  %324 = sub nsw i64 0, %323
  %325 = getelementptr inbounds i64, i64* %109, i64 %321
  store i64 %324, i64* %325, align 8
  %326 = add nuw nsw i64 %311, 3
  %327 = getelementptr inbounds i64, i64* %72, i64 %326
  %328 = load i64, i64* %327, align 8
  %329 = sub nsw i64 0, %328
  %330 = getelementptr inbounds i64, i64* %109, i64 %326
  store i64 %329, i64* %330, align 8
  %331 = add nuw nsw i64 %311, 4
  %332 = icmp eq i64 %331, %223
  br i1 %332, label %333, label %310, !llvm.loop !21

333:                                              ; preds = %307, %310, %289, %218
  %334 = icmp sgt i32 %107, 5
  br i1 %334, label %335, label %341

335:                                              ; preds = %333
  %336 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %337 = load i32*, i32** %336, align 8
  %338 = icmp eq i32* %337, null
  br i1 %338, label %341, label %339

339:                                              ; preds = %335
  %340 = bitcast i32* %337 to i8*
  tail call void @_ZdaPv(i8* %340) #7
  br label %341

341:                                              ; preds = %333, %335, %339
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #6
  br i1 %111, label %342, label %348

342:                                              ; preds = %341
  %343 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %344 = load i32*, i32** %343, align 8
  %345 = icmp eq i32* %344, null
  br i1 %345, label %348, label %346

346:                                              ; preds = %342
  %347 = bitcast i32* %344 to i8*
  tail call void @_ZdaPv(i8* %347) #7
  br label %348

348:                                              ; preds = %341, %342, %346
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #6
  br label %978

349:                                              ; preds = %31
  %350 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %350) #6
  %351 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %351, label %352, label %354

352:                                              ; preds = %349
  %353 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %353, align 8, !alias.scope !22
  br label %382

354:                                              ; preds = %349
  %355 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %356 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %355, align 8, !noalias !22
  %357 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %356, i64 0, i32 0
  %358 = load i32, i32* %357, align 4, !noalias !22
  %359 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %356, i64 0, i32 1, i64 0
  %360 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %358, i32* %360, align 8, !alias.scope !22
  %361 = icmp sgt i32 %358, 5
  br i1 %361, label %362, label %369

362:                                              ; preds = %354
  %363 = sext i32 %358 to i64
  %364 = shl nsw i64 %363, 2
  %365 = tail call i8* @_Znam(i64 %364) #7, !noalias !22
  %366 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %367 = bitcast i32** %366 to i8**
  store i8* %365, i8** %367, align 8, !alias.scope !22
  %368 = bitcast i8* %365 to i32*
  br label %374

369:                                              ; preds = %354
  %370 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %371 = bitcast %union.anon* %370 to i32*
  %372 = sext i32 %358 to i64
  %373 = shl nsw i64 %372, 2
  br label %374

374:                                              ; preds = %369, %362
  %375 = phi i64 [ %364, %362 ], [ %373, %369 ]
  %376 = phi i32* [ %368, %362 ], [ %371, %369 ]
  %377 = bitcast i32* %376 to i8*
  %378 = bitcast i32* %359 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %377, i8* align 4 %378, i64 %375, i1 false) #6
  %379 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1, i32 0
  %380 = load i32*, i32** %379, align 8
  %381 = bitcast i32* %380 to i8*
  br label %382

382:                                              ; preds = %352, %374
  %383 = phi i32 [ %358, %374 ], [ 0, %352 ]
  %384 = phi i8* [ %381, %374 ], [ null, %352 ]
  %385 = phi i32* [ %380, %374 ], [ null, %352 ]
  %386 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %386) #6
  %387 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %387, label %388, label %390

388:                                              ; preds = %382
  %389 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %389, align 8, !alias.scope !25
  br label %418

390:                                              ; preds = %382
  %391 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %392 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %391, align 8, !noalias !25
  %393 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %392, i64 0, i32 0
  %394 = load i32, i32* %393, align 4, !noalias !25
  %395 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %392, i64 0, i32 1, i64 0
  %396 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %394, i32* %396, align 8, !alias.scope !25
  %397 = icmp sgt i32 %394, 5
  br i1 %397, label %398, label %405

398:                                              ; preds = %390
  %399 = sext i32 %394 to i64
  %400 = shl nsw i64 %399, 2
  %401 = tail call i8* @_Znam(i64 %400) #7, !noalias !25
  %402 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %403 = bitcast i32** %402 to i8**
  store i8* %401, i8** %403, align 8, !alias.scope !25
  %404 = bitcast i8* %401 to i32*
  br label %410

405:                                              ; preds = %390
  %406 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %407 = bitcast %union.anon* %406 to i32*
  %408 = sext i32 %394 to i64
  %409 = shl nsw i64 %408, 2
  br label %410

410:                                              ; preds = %405, %398
  %411 = phi i64 [ %400, %398 ], [ %409, %405 ]
  %412 = phi i32* [ %404, %398 ], [ %407, %405 ]
  %413 = bitcast i32* %412 to i8*
  %414 = bitcast i32* %395 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %413, i8* align 4 %414, i64 %411, i1 false) #6
  %415 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1, i32 0
  %416 = load i32*, i32** %415, align 8
  %417 = bitcast i32* %416 to i8*
  br label %418

418:                                              ; preds = %388, %410
  %419 = phi i32 [ %394, %410 ], [ 0, %388 ]
  %420 = phi i8* [ %417, %410 ], [ null, %388 ]
  %421 = phi i32* [ %416, %410 ], [ null, %388 ]
  %422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %423 = icmp sgt i32 %383, 5
  br i1 %423, label %424, label %427

424:                                              ; preds = %418
  %425 = getelementptr inbounds %union.anon, %union.anon* %422, i64 0, i32 0
  %426 = load i32*, i32** %425, align 8
  br label %430

427:                                              ; preds = %418
  %428 = bitcast %union.anon* %422 to i32*
  %429 = icmp sgt i32 %383, 0
  br i1 %429, label %430, label %533

430:                                              ; preds = %427, %424
  %431 = phi i32* [ %426, %424 ], [ %428, %427 ]
  %432 = zext i32 %383 to i64
  %433 = icmp ult i32 %383, 8
  br i1 %433, label %519, label %434

434:                                              ; preds = %430
  %435 = and i64 %432, 4294967288
  %436 = add nsw i64 %435, -8
  %437 = lshr exact i64 %436, 3
  %438 = add nuw nsw i64 %437, 1
  %439 = and i64 %438, 3
  %440 = icmp ult i64 %436, 24
  br i1 %440, label %486, label %441

441:                                              ; preds = %434
  %442 = sub nsw i64 %438, %439
  br label %443

443:                                              ; preds = %443, %441
  %444 = phi i64 [ 0, %441 ], [ %483, %443 ]
  %445 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %441 ], [ %481, %443 ]
  %446 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %441 ], [ %482, %443 ]
  %447 = phi i64 [ %442, %441 ], [ %484, %443 ]
  %448 = getelementptr inbounds i32, i32* %431, i64 %444
  %449 = bitcast i32* %448 to <4 x i32>*
  %450 = load <4 x i32>, <4 x i32>* %449, align 4
  %451 = getelementptr inbounds i32, i32* %448, i64 4
  %452 = bitcast i32* %451 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 4
  %454 = mul nsw <4 x i32> %450, %445
  %455 = mul nsw <4 x i32> %453, %446
  %456 = or i64 %444, 8
  %457 = getelementptr inbounds i32, i32* %431, i64 %456
  %458 = bitcast i32* %457 to <4 x i32>*
  %459 = load <4 x i32>, <4 x i32>* %458, align 4
  %460 = getelementptr inbounds i32, i32* %457, i64 4
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 4
  %463 = mul nsw <4 x i32> %459, %454
  %464 = mul nsw <4 x i32> %462, %455
  %465 = or i64 %444, 16
  %466 = getelementptr inbounds i32, i32* %431, i64 %465
  %467 = bitcast i32* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4
  %469 = getelementptr inbounds i32, i32* %466, i64 4
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4
  %472 = mul nsw <4 x i32> %468, %463
  %473 = mul nsw <4 x i32> %471, %464
  %474 = or i64 %444, 24
  %475 = getelementptr inbounds i32, i32* %431, i64 %474
  %476 = bitcast i32* %475 to <4 x i32>*
  %477 = load <4 x i32>, <4 x i32>* %476, align 4
  %478 = getelementptr inbounds i32, i32* %475, i64 4
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 4
  %481 = mul nsw <4 x i32> %477, %472
  %482 = mul nsw <4 x i32> %480, %473
  %483 = add i64 %444, 32
  %484 = add i64 %447, -4
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %486, label %443, !llvm.loop !28

486:                                              ; preds = %443, %434
  %487 = phi <4 x i32> [ undef, %434 ], [ %481, %443 ]
  %488 = phi <4 x i32> [ undef, %434 ], [ %482, %443 ]
  %489 = phi i64 [ 0, %434 ], [ %483, %443 ]
  %490 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %434 ], [ %481, %443 ]
  %491 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %434 ], [ %482, %443 ]
  %492 = icmp eq i64 %439, 0
  br i1 %492, label %509, label %493

493:                                              ; preds = %486, %493
  %494 = phi i64 [ %506, %493 ], [ %489, %486 ]
  %495 = phi <4 x i32> [ %504, %493 ], [ %490, %486 ]
  %496 = phi <4 x i32> [ %505, %493 ], [ %491, %486 ]
  %497 = phi i64 [ %507, %493 ], [ %439, %486 ]
  %498 = getelementptr inbounds i32, i32* %431, i64 %494
  %499 = bitcast i32* %498 to <4 x i32>*
  %500 = load <4 x i32>, <4 x i32>* %499, align 4
  %501 = getelementptr inbounds i32, i32* %498, i64 4
  %502 = bitcast i32* %501 to <4 x i32>*
  %503 = load <4 x i32>, <4 x i32>* %502, align 4
  %504 = mul nsw <4 x i32> %500, %495
  %505 = mul nsw <4 x i32> %503, %496
  %506 = add i64 %494, 8
  %507 = add i64 %497, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %493, !llvm.loop !29

509:                                              ; preds = %493, %486
  %510 = phi <4 x i32> [ %487, %486 ], [ %504, %493 ]
  %511 = phi <4 x i32> [ %488, %486 ], [ %505, %493 ]
  %512 = mul <4 x i32> %511, %510
  %513 = shufflevector <4 x i32> %512, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %514 = mul <4 x i32> %512, %513
  %515 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %516 = mul <4 x i32> %514, %515
  %517 = extractelement <4 x i32> %516, i32 0
  %518 = icmp eq i64 %435, %432
  br i1 %518, label %530, label %519

519:                                              ; preds = %509, %430
  %520 = phi i64 [ 0, %430 ], [ %435, %509 ]
  %521 = phi i32 [ 1, %430 ], [ %517, %509 ]
  br label %522

522:                                              ; preds = %519, %522
  %523 = phi i64 [ %528, %522 ], [ %520, %519 ]
  %524 = phi i32 [ %527, %522 ], [ %521, %519 ]
  %525 = getelementptr inbounds i32, i32* %431, i64 %523
  %526 = load i32, i32* %525, align 4
  %527 = mul nsw i32 %526, %524
  %528 = add nuw nsw i64 %523, 1
  %529 = icmp eq i64 %528, %432
  br i1 %529, label %530, label %522, !llvm.loop !30

530:                                              ; preds = %522, %509
  %531 = phi i32 [ %517, %509 ], [ %527, %522 ]
  %532 = icmp sgt i32 %531, 0
  br i1 %532, label %533, label %645

533:                                              ; preds = %530, %427
  %534 = phi i32 [ %531, %530 ], [ 1, %427 ]
  %535 = zext i32 %534 to i64
  %536 = icmp ult i32 %534, 8
  br i1 %536, label %603, label %537

537:                                              ; preds = %533
  %538 = getelementptr i32, i32* %421, i64 %535
  %539 = bitcast i32* %538 to i8*
  %540 = getelementptr i32, i32* %385, i64 %535
  %541 = bitcast i32* %540 to i8*
  %542 = icmp ult i8* %420, %541
  %543 = icmp ult i8* %384, %539
  %544 = and i1 %542, %543
  br i1 %544, label %603, label %545

545:                                              ; preds = %537
  %546 = and i64 %535, 4294967288
  %547 = add nsw i64 %546, -8
  %548 = lshr exact i64 %547, 3
  %549 = add nuw nsw i64 %548, 1
  %550 = and i64 %549, 1
  %551 = icmp eq i64 %547, 0
  br i1 %551, label %585, label %552

552:                                              ; preds = %545
  %553 = sub nuw nsw i64 %549, %550
  br label %554

554:                                              ; preds = %554, %552
  %555 = phi i64 [ 0, %552 ], [ %582, %554 ]
  %556 = phi i64 [ %553, %552 ], [ %583, %554 ]
  %557 = getelementptr inbounds i32, i32* %385, i64 %555
  %558 = bitcast i32* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 4, !alias.scope !31
  %560 = getelementptr inbounds i32, i32* %557, i64 4
  %561 = bitcast i32* %560 to <4 x i32>*
  %562 = load <4 x i32>, <4 x i32>* %561, align 4, !alias.scope !31
  %563 = sub nsw <4 x i32> zeroinitializer, %559
  %564 = sub nsw <4 x i32> zeroinitializer, %562
  %565 = getelementptr inbounds i32, i32* %421, i64 %555
  %566 = bitcast i32* %565 to <4 x i32>*
  store <4 x i32> %563, <4 x i32>* %566, align 4, !alias.scope !34, !noalias !31
  %567 = getelementptr inbounds i32, i32* %565, i64 4
  %568 = bitcast i32* %567 to <4 x i32>*
  store <4 x i32> %564, <4 x i32>* %568, align 4, !alias.scope !34, !noalias !31
  %569 = or i64 %555, 8
  %570 = getelementptr inbounds i32, i32* %385, i64 %569
  %571 = bitcast i32* %570 to <4 x i32>*
  %572 = load <4 x i32>, <4 x i32>* %571, align 4, !alias.scope !31
  %573 = getelementptr inbounds i32, i32* %570, i64 4
  %574 = bitcast i32* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 4, !alias.scope !31
  %576 = sub nsw <4 x i32> zeroinitializer, %572
  %577 = sub nsw <4 x i32> zeroinitializer, %575
  %578 = getelementptr inbounds i32, i32* %421, i64 %569
  %579 = bitcast i32* %578 to <4 x i32>*
  store <4 x i32> %576, <4 x i32>* %579, align 4, !alias.scope !34, !noalias !31
  %580 = getelementptr inbounds i32, i32* %578, i64 4
  %581 = bitcast i32* %580 to <4 x i32>*
  store <4 x i32> %577, <4 x i32>* %581, align 4, !alias.scope !34, !noalias !31
  %582 = add i64 %555, 16
  %583 = add i64 %556, -2
  %584 = icmp eq i64 %583, 0
  br i1 %584, label %585, label %554, !llvm.loop !36

585:                                              ; preds = %554, %545
  %586 = phi i64 [ 0, %545 ], [ %582, %554 ]
  %587 = icmp eq i64 %550, 0
  br i1 %587, label %601, label %588

588:                                              ; preds = %585
  %589 = getelementptr inbounds i32, i32* %385, i64 %586
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 4, !alias.scope !31
  %592 = getelementptr inbounds i32, i32* %589, i64 4
  %593 = bitcast i32* %592 to <4 x i32>*
  %594 = load <4 x i32>, <4 x i32>* %593, align 4, !alias.scope !31
  %595 = sub nsw <4 x i32> zeroinitializer, %591
  %596 = sub nsw <4 x i32> zeroinitializer, %594
  %597 = getelementptr inbounds i32, i32* %421, i64 %586
  %598 = bitcast i32* %597 to <4 x i32>*
  store <4 x i32> %595, <4 x i32>* %598, align 4, !alias.scope !34, !noalias !31
  %599 = getelementptr inbounds i32, i32* %597, i64 4
  %600 = bitcast i32* %599 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %600, align 4, !alias.scope !34, !noalias !31
  br label %601

601:                                              ; preds = %585, %588
  %602 = icmp eq i64 %546, %535
  br i1 %602, label %645, label %603

603:                                              ; preds = %601, %537, %533
  %604 = phi i64 [ 0, %537 ], [ 0, %533 ], [ %546, %601 ]
  %605 = xor i64 %604, -1
  %606 = add nsw i64 %605, %535
  %607 = and i64 %535, 3
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %619, label %609

609:                                              ; preds = %603, %609
  %610 = phi i64 [ %616, %609 ], [ %604, %603 ]
  %611 = phi i64 [ %617, %609 ], [ %607, %603 ]
  %612 = getelementptr inbounds i32, i32* %385, i64 %610
  %613 = load i32, i32* %612, align 4
  %614 = sub nsw i32 0, %613
  %615 = getelementptr inbounds i32, i32* %421, i64 %610
  store i32 %614, i32* %615, align 4
  %616 = add nuw nsw i64 %610, 1
  %617 = add i64 %611, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %609, !llvm.loop !37

619:                                              ; preds = %609, %603
  %620 = phi i64 [ %604, %603 ], [ %616, %609 ]
  %621 = icmp ult i64 %606, 3
  br i1 %621, label %645, label %622

622:                                              ; preds = %619, %622
  %623 = phi i64 [ %643, %622 ], [ %620, %619 ]
  %624 = getelementptr inbounds i32, i32* %385, i64 %623
  %625 = load i32, i32* %624, align 4
  %626 = sub nsw i32 0, %625
  %627 = getelementptr inbounds i32, i32* %421, i64 %623
  store i32 %626, i32* %627, align 4
  %628 = add nuw nsw i64 %623, 1
  %629 = getelementptr inbounds i32, i32* %385, i64 %628
  %630 = load i32, i32* %629, align 4
  %631 = sub nsw i32 0, %630
  %632 = getelementptr inbounds i32, i32* %421, i64 %628
  store i32 %631, i32* %632, align 4
  %633 = add nuw nsw i64 %623, 2
  %634 = getelementptr inbounds i32, i32* %385, i64 %633
  %635 = load i32, i32* %634, align 4
  %636 = sub nsw i32 0, %635
  %637 = getelementptr inbounds i32, i32* %421, i64 %633
  store i32 %636, i32* %637, align 4
  %638 = add nuw nsw i64 %623, 3
  %639 = getelementptr inbounds i32, i32* %385, i64 %638
  %640 = load i32, i32* %639, align 4
  %641 = sub nsw i32 0, %640
  %642 = getelementptr inbounds i32, i32* %421, i64 %638
  store i32 %641, i32* %642, align 4
  %643 = add nuw nsw i64 %623, 4
  %644 = icmp eq i64 %643, %535
  br i1 %644, label %645, label %622, !llvm.loop !38

645:                                              ; preds = %619, %622, %601, %530
  %646 = icmp sgt i32 %419, 5
  br i1 %646, label %647, label %653

647:                                              ; preds = %645
  %648 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %649 = load i32*, i32** %648, align 8
  %650 = icmp eq i32* %649, null
  br i1 %650, label %653, label %651

651:                                              ; preds = %647
  %652 = bitcast i32* %649 to i8*
  tail call void @_ZdaPv(i8* %652) #7
  br label %653

653:                                              ; preds = %645, %647, %651
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %386) #6
  br i1 %423, label %654, label %660

654:                                              ; preds = %653
  %655 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %656 = load i32*, i32** %655, align 8
  %657 = icmp eq i32* %656, null
  br i1 %657, label %660, label %658

658:                                              ; preds = %654
  %659 = bitcast i32* %656 to i8*
  tail call void @_ZdaPv(i8* %659) #7
  br label %660

660:                                              ; preds = %653, %654, %658
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %350) #6
  br label %978

661:                                              ; preds = %31
  %662 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %662) #6
  %663 = icmp eq %struct.TfLiteTensor* %20, null
  br i1 %663, label %664, label %666

664:                                              ; preds = %661
  %665 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %665, align 8, !alias.scope !39
  br label %695

666:                                              ; preds = %661
  %667 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 2
  %668 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %667, align 8, !noalias !39
  %669 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %668, i64 0, i32 0
  %670 = load i32, i32* %669, align 4, !noalias !39
  %671 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %668, i64 0, i32 1, i64 0
  %672 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %670, i32* %672, align 8, !alias.scope !39
  %673 = icmp sgt i32 %670, 5
  br i1 %673, label %674, label %681

674:                                              ; preds = %666
  %675 = sext i32 %670 to i64
  %676 = shl nsw i64 %675, 2
  %677 = tail call i8* @_Znam(i64 %676) #7, !noalias !39
  %678 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %679 = bitcast i32** %678 to i8**
  store i8* %677, i8** %679, align 8, !alias.scope !39
  %680 = bitcast i8* %677 to i32*
  br label %686

681:                                              ; preds = %666
  %682 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %683 = bitcast %union.anon* %682 to i32*
  %684 = sext i32 %670 to i64
  %685 = shl nsw i64 %684, 2
  br label %686

686:                                              ; preds = %681, %674
  %687 = phi i64 [ %676, %674 ], [ %685, %681 ]
  %688 = phi i32* [ %680, %674 ], [ %683, %681 ]
  %689 = bitcast i32* %688 to i8*
  %690 = bitcast i32* %671 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %689, i8* align 4 %690, i64 %687, i1 false) #6
  %691 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %20, i64 0, i32 1
  %692 = bitcast %union.TfLitePtrUnion* %691 to float**
  %693 = load float*, float** %692, align 8
  %694 = bitcast float* %693 to i8*
  br label %695

695:                                              ; preds = %664, %686
  %696 = phi i32 [ %670, %686 ], [ 0, %664 ]
  %697 = phi i8* [ %694, %686 ], [ null, %664 ]
  %698 = phi float* [ %693, %686 ], [ null, %664 ]
  %699 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %699) #6
  %700 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %700, label %701, label %703

701:                                              ; preds = %695
  %702 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %702, align 8, !alias.scope !42
  br label %732

703:                                              ; preds = %695
  %704 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %705 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %704, align 8, !noalias !42
  %706 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %705, i64 0, i32 0
  %707 = load i32, i32* %706, align 4, !noalias !42
  %708 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %705, i64 0, i32 1, i64 0
  %709 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %707, i32* %709, align 8, !alias.scope !42
  %710 = icmp sgt i32 %707, 5
  br i1 %710, label %711, label %718

711:                                              ; preds = %703
  %712 = sext i32 %707 to i64
  %713 = shl nsw i64 %712, 2
  %714 = tail call i8* @_Znam(i64 %713) #7, !noalias !42
  %715 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %716 = bitcast i32** %715 to i8**
  store i8* %714, i8** %716, align 8, !alias.scope !42
  %717 = bitcast i8* %714 to i32*
  br label %723

718:                                              ; preds = %703
  %719 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %720 = bitcast %union.anon* %719 to i32*
  %721 = sext i32 %707 to i64
  %722 = shl nsw i64 %721, 2
  br label %723

723:                                              ; preds = %718, %711
  %724 = phi i64 [ %713, %711 ], [ %722, %718 ]
  %725 = phi i32* [ %717, %711 ], [ %720, %718 ]
  %726 = bitcast i32* %725 to i8*
  %727 = bitcast i32* %708 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %726, i8* align 4 %727, i64 %724, i1 false) #6
  %728 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 1
  %729 = bitcast %union.TfLitePtrUnion* %728 to float**
  %730 = load float*, float** %729, align 8
  %731 = bitcast float* %730 to i8*
  br label %732

732:                                              ; preds = %701, %723
  %733 = phi i32 [ %707, %723 ], [ 0, %701 ]
  %734 = phi i8* [ %731, %723 ], [ null, %701 ]
  %735 = phi float* [ %730, %723 ], [ null, %701 ]
  %736 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %737 = icmp sgt i32 %696, 5
  br i1 %737, label %738, label %741

738:                                              ; preds = %732
  %739 = getelementptr inbounds %union.anon, %union.anon* %736, i64 0, i32 0
  %740 = load i32*, i32** %739, align 8
  br label %744

741:                                              ; preds = %732
  %742 = bitcast %union.anon* %736 to i32*
  %743 = icmp sgt i32 %696, 0
  br i1 %743, label %744, label %847

744:                                              ; preds = %741, %738
  %745 = phi i32* [ %740, %738 ], [ %742, %741 ]
  %746 = zext i32 %696 to i64
  %747 = icmp ult i32 %696, 8
  br i1 %747, label %833, label %748

748:                                              ; preds = %744
  %749 = and i64 %746, 4294967288
  %750 = add nsw i64 %749, -8
  %751 = lshr exact i64 %750, 3
  %752 = add nuw nsw i64 %751, 1
  %753 = and i64 %752, 3
  %754 = icmp ult i64 %750, 24
  br i1 %754, label %800, label %755

755:                                              ; preds = %748
  %756 = sub nsw i64 %752, %753
  br label %757

757:                                              ; preds = %757, %755
  %758 = phi i64 [ 0, %755 ], [ %797, %757 ]
  %759 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %755 ], [ %795, %757 ]
  %760 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %755 ], [ %796, %757 ]
  %761 = phi i64 [ %756, %755 ], [ %798, %757 ]
  %762 = getelementptr inbounds i32, i32* %745, i64 %758
  %763 = bitcast i32* %762 to <4 x i32>*
  %764 = load <4 x i32>, <4 x i32>* %763, align 4
  %765 = getelementptr inbounds i32, i32* %762, i64 4
  %766 = bitcast i32* %765 to <4 x i32>*
  %767 = load <4 x i32>, <4 x i32>* %766, align 4
  %768 = mul nsw <4 x i32> %764, %759
  %769 = mul nsw <4 x i32> %767, %760
  %770 = or i64 %758, 8
  %771 = getelementptr inbounds i32, i32* %745, i64 %770
  %772 = bitcast i32* %771 to <4 x i32>*
  %773 = load <4 x i32>, <4 x i32>* %772, align 4
  %774 = getelementptr inbounds i32, i32* %771, i64 4
  %775 = bitcast i32* %774 to <4 x i32>*
  %776 = load <4 x i32>, <4 x i32>* %775, align 4
  %777 = mul nsw <4 x i32> %773, %768
  %778 = mul nsw <4 x i32> %776, %769
  %779 = or i64 %758, 16
  %780 = getelementptr inbounds i32, i32* %745, i64 %779
  %781 = bitcast i32* %780 to <4 x i32>*
  %782 = load <4 x i32>, <4 x i32>* %781, align 4
  %783 = getelementptr inbounds i32, i32* %780, i64 4
  %784 = bitcast i32* %783 to <4 x i32>*
  %785 = load <4 x i32>, <4 x i32>* %784, align 4
  %786 = mul nsw <4 x i32> %782, %777
  %787 = mul nsw <4 x i32> %785, %778
  %788 = or i64 %758, 24
  %789 = getelementptr inbounds i32, i32* %745, i64 %788
  %790 = bitcast i32* %789 to <4 x i32>*
  %791 = load <4 x i32>, <4 x i32>* %790, align 4
  %792 = getelementptr inbounds i32, i32* %789, i64 4
  %793 = bitcast i32* %792 to <4 x i32>*
  %794 = load <4 x i32>, <4 x i32>* %793, align 4
  %795 = mul nsw <4 x i32> %791, %786
  %796 = mul nsw <4 x i32> %794, %787
  %797 = add i64 %758, 32
  %798 = add i64 %761, -4
  %799 = icmp eq i64 %798, 0
  br i1 %799, label %800, label %757, !llvm.loop !45

800:                                              ; preds = %757, %748
  %801 = phi <4 x i32> [ undef, %748 ], [ %795, %757 ]
  %802 = phi <4 x i32> [ undef, %748 ], [ %796, %757 ]
  %803 = phi i64 [ 0, %748 ], [ %797, %757 ]
  %804 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %748 ], [ %795, %757 ]
  %805 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %748 ], [ %796, %757 ]
  %806 = icmp eq i64 %753, 0
  br i1 %806, label %823, label %807

807:                                              ; preds = %800, %807
  %808 = phi i64 [ %820, %807 ], [ %803, %800 ]
  %809 = phi <4 x i32> [ %818, %807 ], [ %804, %800 ]
  %810 = phi <4 x i32> [ %819, %807 ], [ %805, %800 ]
  %811 = phi i64 [ %821, %807 ], [ %753, %800 ]
  %812 = getelementptr inbounds i32, i32* %745, i64 %808
  %813 = bitcast i32* %812 to <4 x i32>*
  %814 = load <4 x i32>, <4 x i32>* %813, align 4
  %815 = getelementptr inbounds i32, i32* %812, i64 4
  %816 = bitcast i32* %815 to <4 x i32>*
  %817 = load <4 x i32>, <4 x i32>* %816, align 4
  %818 = mul nsw <4 x i32> %814, %809
  %819 = mul nsw <4 x i32> %817, %810
  %820 = add i64 %808, 8
  %821 = add i64 %811, -1
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %823, label %807, !llvm.loop !46

823:                                              ; preds = %807, %800
  %824 = phi <4 x i32> [ %801, %800 ], [ %818, %807 ]
  %825 = phi <4 x i32> [ %802, %800 ], [ %819, %807 ]
  %826 = mul <4 x i32> %825, %824
  %827 = shufflevector <4 x i32> %826, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %828 = mul <4 x i32> %826, %827
  %829 = shufflevector <4 x i32> %828, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %830 = mul <4 x i32> %828, %829
  %831 = extractelement <4 x i32> %830, i32 0
  %832 = icmp eq i64 %749, %746
  br i1 %832, label %844, label %833

833:                                              ; preds = %823, %744
  %834 = phi i64 [ 0, %744 ], [ %749, %823 ]
  %835 = phi i32 [ 1, %744 ], [ %831, %823 ]
  br label %836

836:                                              ; preds = %833, %836
  %837 = phi i64 [ %842, %836 ], [ %834, %833 ]
  %838 = phi i32 [ %841, %836 ], [ %835, %833 ]
  %839 = getelementptr inbounds i32, i32* %745, i64 %837
  %840 = load i32, i32* %839, align 4
  %841 = mul nsw i32 %840, %838
  %842 = add nuw nsw i64 %837, 1
  %843 = icmp eq i64 %842, %746
  br i1 %843, label %844, label %836, !llvm.loop !47

844:                                              ; preds = %836, %823
  %845 = phi i32 [ %831, %823 ], [ %841, %836 ]
  %846 = icmp sgt i32 %845, 0
  br i1 %846, label %847, label %959

847:                                              ; preds = %844, %741
  %848 = phi i32 [ %845, %844 ], [ 1, %741 ]
  %849 = zext i32 %848 to i64
  %850 = icmp ult i32 %848, 8
  br i1 %850, label %917, label %851

851:                                              ; preds = %847
  %852 = getelementptr float, float* %735, i64 %849
  %853 = bitcast float* %852 to i8*
  %854 = getelementptr float, float* %698, i64 %849
  %855 = bitcast float* %854 to i8*
  %856 = icmp ult i8* %734, %855
  %857 = icmp ult i8* %697, %853
  %858 = and i1 %856, %857
  br i1 %858, label %917, label %859

859:                                              ; preds = %851
  %860 = and i64 %849, 4294967288
  %861 = add nsw i64 %860, -8
  %862 = lshr exact i64 %861, 3
  %863 = add nuw nsw i64 %862, 1
  %864 = and i64 %863, 1
  %865 = icmp eq i64 %861, 0
  br i1 %865, label %899, label %866

866:                                              ; preds = %859
  %867 = sub nuw nsw i64 %863, %864
  br label %868

868:                                              ; preds = %868, %866
  %869 = phi i64 [ 0, %866 ], [ %896, %868 ]
  %870 = phi i64 [ %867, %866 ], [ %897, %868 ]
  %871 = getelementptr inbounds float, float* %698, i64 %869
  %872 = bitcast float* %871 to <4 x float>*
  %873 = load <4 x float>, <4 x float>* %872, align 4, !alias.scope !48
  %874 = getelementptr inbounds float, float* %871, i64 4
  %875 = bitcast float* %874 to <4 x float>*
  %876 = load <4 x float>, <4 x float>* %875, align 4, !alias.scope !48
  %877 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %873
  %878 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %876
  %879 = getelementptr inbounds float, float* %735, i64 %869
  %880 = bitcast float* %879 to <4 x float>*
  store <4 x float> %877, <4 x float>* %880, align 4, !alias.scope !51, !noalias !48
  %881 = getelementptr inbounds float, float* %879, i64 4
  %882 = bitcast float* %881 to <4 x float>*
  store <4 x float> %878, <4 x float>* %882, align 4, !alias.scope !51, !noalias !48
  %883 = or i64 %869, 8
  %884 = getelementptr inbounds float, float* %698, i64 %883
  %885 = bitcast float* %884 to <4 x float>*
  %886 = load <4 x float>, <4 x float>* %885, align 4, !alias.scope !48
  %887 = getelementptr inbounds float, float* %884, i64 4
  %888 = bitcast float* %887 to <4 x float>*
  %889 = load <4 x float>, <4 x float>* %888, align 4, !alias.scope !48
  %890 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %886
  %891 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %889
  %892 = getelementptr inbounds float, float* %735, i64 %883
  %893 = bitcast float* %892 to <4 x float>*
  store <4 x float> %890, <4 x float>* %893, align 4, !alias.scope !51, !noalias !48
  %894 = getelementptr inbounds float, float* %892, i64 4
  %895 = bitcast float* %894 to <4 x float>*
  store <4 x float> %891, <4 x float>* %895, align 4, !alias.scope !51, !noalias !48
  %896 = add i64 %869, 16
  %897 = add i64 %870, -2
  %898 = icmp eq i64 %897, 0
  br i1 %898, label %899, label %868, !llvm.loop !53

899:                                              ; preds = %868, %859
  %900 = phi i64 [ 0, %859 ], [ %896, %868 ]
  %901 = icmp eq i64 %864, 0
  br i1 %901, label %915, label %902

902:                                              ; preds = %899
  %903 = getelementptr inbounds float, float* %698, i64 %900
  %904 = bitcast float* %903 to <4 x float>*
  %905 = load <4 x float>, <4 x float>* %904, align 4, !alias.scope !48
  %906 = getelementptr inbounds float, float* %903, i64 4
  %907 = bitcast float* %906 to <4 x float>*
  %908 = load <4 x float>, <4 x float>* %907, align 4, !alias.scope !48
  %909 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %905
  %910 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %908
  %911 = getelementptr inbounds float, float* %735, i64 %900
  %912 = bitcast float* %911 to <4 x float>*
  store <4 x float> %909, <4 x float>* %912, align 4, !alias.scope !51, !noalias !48
  %913 = getelementptr inbounds float, float* %911, i64 4
  %914 = bitcast float* %913 to <4 x float>*
  store <4 x float> %910, <4 x float>* %914, align 4, !alias.scope !51, !noalias !48
  br label %915

915:                                              ; preds = %899, %902
  %916 = icmp eq i64 %860, %849
  br i1 %916, label %959, label %917

917:                                              ; preds = %915, %851, %847
  %918 = phi i64 [ 0, %851 ], [ 0, %847 ], [ %860, %915 ]
  %919 = xor i64 %918, -1
  %920 = add nsw i64 %919, %849
  %921 = and i64 %849, 3
  %922 = icmp eq i64 %921, 0
  br i1 %922, label %933, label %923

923:                                              ; preds = %917, %923
  %924 = phi i64 [ %930, %923 ], [ %918, %917 ]
  %925 = phi i64 [ %931, %923 ], [ %921, %917 ]
  %926 = getelementptr inbounds float, float* %698, i64 %924
  %927 = load float, float* %926, align 4
  %928 = fsub float -0.000000e+00, %927
  %929 = getelementptr inbounds float, float* %735, i64 %924
  store float %928, float* %929, align 4
  %930 = add nuw nsw i64 %924, 1
  %931 = add i64 %925, -1
  %932 = icmp eq i64 %931, 0
  br i1 %932, label %933, label %923, !llvm.loop !54

933:                                              ; preds = %923, %917
  %934 = phi i64 [ %918, %917 ], [ %930, %923 ]
  %935 = icmp ult i64 %920, 3
  br i1 %935, label %959, label %936

936:                                              ; preds = %933, %936
  %937 = phi i64 [ %957, %936 ], [ %934, %933 ]
  %938 = getelementptr inbounds float, float* %698, i64 %937
  %939 = load float, float* %938, align 4
  %940 = fsub float -0.000000e+00, %939
  %941 = getelementptr inbounds float, float* %735, i64 %937
  store float %940, float* %941, align 4
  %942 = add nuw nsw i64 %937, 1
  %943 = getelementptr inbounds float, float* %698, i64 %942
  %944 = load float, float* %943, align 4
  %945 = fsub float -0.000000e+00, %944
  %946 = getelementptr inbounds float, float* %735, i64 %942
  store float %945, float* %946, align 4
  %947 = add nuw nsw i64 %937, 2
  %948 = getelementptr inbounds float, float* %698, i64 %947
  %949 = load float, float* %948, align 4
  %950 = fsub float -0.000000e+00, %949
  %951 = getelementptr inbounds float, float* %735, i64 %947
  store float %950, float* %951, align 4
  %952 = add nuw nsw i64 %937, 3
  %953 = getelementptr inbounds float, float* %698, i64 %952
  %954 = load float, float* %953, align 4
  %955 = fsub float -0.000000e+00, %954
  %956 = getelementptr inbounds float, float* %735, i64 %952
  store float %955, float* %956, align 4
  %957 = add nuw nsw i64 %937, 4
  %958 = icmp eq i64 %957, %849
  br i1 %958, label %959, label %936, !llvm.loop !55

959:                                              ; preds = %933, %936, %915, %844
  %960 = icmp sgt i32 %733, 5
  br i1 %960, label %961, label %967

961:                                              ; preds = %959
  %962 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %963 = load i32*, i32** %962, align 8
  %964 = icmp eq i32* %963, null
  br i1 %964, label %967, label %965

965:                                              ; preds = %961
  %966 = bitcast i32* %963 to i8*
  tail call void @_ZdaPv(i8* %966) #7
  br label %967

967:                                              ; preds = %959, %961, %965
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %699) #6
  br i1 %737, label %968, label %974

968:                                              ; preds = %967
  %969 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %970 = load i32*, i32** %969, align 8
  %971 = icmp eq i32* %970, null
  br i1 %971, label %974, label %972

972:                                              ; preds = %968
  %973 = bitcast i32* %970 to i8*
  tail call void @_ZdaPv(i8* %973) #7
  br label %974

974:                                              ; preds = %967, %968, %972
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %662) #6
  br label %978

975:                                              ; preds = %31
  %976 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %977 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %976, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %977(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.7, i64 0, i64 0), i32 %34) #6
  br label %978

978:                                              ; preds = %348, %660, %974, %975
  %979 = phi i32 [ 1, %975 ], [ 0, %974 ], [ 0, %660 ], [ 0, %348 ]
  ret i32 %979
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin12Register_NEGEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin12Register_NEGEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !13, !9}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !9}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!24 = distinct !{!24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!27 = distinct !{!27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!28 = distinct !{!28, !9}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !13, !9}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !9}
!37 = distinct !{!37, !11}
!38 = distinct !{!38, !9}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!41 = distinct !{!41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!44 = distinct !{!44, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!45 = distinct !{!45, !9}
!46 = distinct !{!46, !11}
!47 = distinct !{!47, !13, !9}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !9}
!54 = distinct !{!54, !11}
!55 = distinct !{!55, !9}
