; ModuleID = '../../third_party/skia/src/lazy/SkDiscardableMemoryPool.cpp'
source_filename = "../../third_party/skia/src/lazy/SkDiscardableMemoryPool.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.SkDiscardableMemoryPool = type { %"class.SkDiscardableMemory::Factory.base", [4 x i8] }
%"class.SkDiscardableMemory::Factory.base" = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.SkDiscardableMemoryPool* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.(anonymous namespace)::DiscardableMemoryPool" = type { %class.SkDiscardableMemoryPool.base, %class.SkMutex, i64, i64, %class.SkTInternalLList }
%class.SkDiscardableMemoryPool.base = type { %"class.SkDiscardableMemory::Factory.base" }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%class.SkTInternalLList = type { %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"* }
%"class.(anonymous namespace)::PoolDiscardableMemory" = type { %class.SkDiscardableMemory, %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"*, %class.sk_sp.1, i8, %"class.std::__1::unique_ptr", i64 }
%class.SkDiscardableMemory = type { i32 (...)** }
%class.sk_sp.1 = type { %"class.(anonymous namespace)::DiscardableMemoryPool"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

@_ZZ32SkGetGlobalDiscardableMemoryPoolvE6global = internal unnamed_addr global %class.SkDiscardableMemoryPool* null, align 8
@_ZGVZ32SkGetGlobalDiscardableMemoryPoolvE6global = internal global i64 0, align 8
@_ZTVN12_GLOBAL__N_121DiscardableMemoryPoolE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.(anonymous namespace)::DiscardableMemoryPool"*)* @_ZN12_GLOBAL__N_121DiscardableMemoryPoolD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::DiscardableMemoryPool"*)* @_ZN12_GLOBAL__N_121DiscardableMemoryPoolD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (%class.SkDiscardableMemory* (%"class.(anonymous namespace)::DiscardableMemoryPool"*, i64)* @_ZN12_GLOBAL__N_121DiscardableMemoryPool6createEm to i8*), i8* bitcast (i64 (%"class.(anonymous namespace)::DiscardableMemoryPool"*)* @_ZN12_GLOBAL__N_121DiscardableMemoryPool10getRAMUsedEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::DiscardableMemoryPool"*, i64)* @_ZN12_GLOBAL__N_121DiscardableMemoryPool12setRAMBudgetEm to i8*), i8* bitcast (i64 (%"class.(anonymous namespace)::DiscardableMemoryPool"*)* @_ZN12_GLOBAL__N_121DiscardableMemoryPool12getRAMBudgetEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::DiscardableMemoryPool"*)* @_ZN12_GLOBAL__N_121DiscardableMemoryPool8dumpPoolEv to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_121PoolDiscardableMemoryE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.(anonymous namespace)::PoolDiscardableMemory"*)* @_ZN12_GLOBAL__N_121PoolDiscardableMemoryD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::PoolDiscardableMemory"*)* @_ZN12_GLOBAL__N_121PoolDiscardableMemoryD0Ev to i8*), i8* bitcast (i1 (%"class.(anonymous namespace)::PoolDiscardableMemory"*)* @_ZN12_GLOBAL__N_121PoolDiscardableMemory4lockEv to i8*), i8* bitcast (i8* (%"class.(anonymous namespace)::PoolDiscardableMemory"*)* @_ZN12_GLOBAL__N_121PoolDiscardableMemory4dataEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::PoolDiscardableMemory"*)* @_ZN12_GLOBAL__N_121PoolDiscardableMemory6unlockEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkDiscardableMemoryPool4MakeEm(%class.sk_sp* noalias nocapture sret, i64) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 64) #8, !noalias !2
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = bitcast i8* %4 to i32*
  store i32 1, i32* %5, align 4, !noalias !2
  %6 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_121DiscardableMemoryPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !noalias !2
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4, !noalias !2
  %9 = getelementptr inbounds i8, i8* %3, i64 20
  store i8 0, i8* %9, align 1, !noalias !2
  %10 = getelementptr inbounds i8, i8* %3, i64 24
  %11 = bitcast i8* %10 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %11, align 8, !noalias !2
  %12 = getelementptr inbounds i8, i8* %3, i64 32
  %13 = bitcast i8* %12 to i64*
  store i64 %1, i64* %13, align 8, !noalias !2
  %14 = getelementptr inbounds i8, i8* %3, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #9, !noalias !2
  %15 = ptrtoint i8* %3 to i64
  %16 = bitcast %class.sk_sp* %0 to i64*
  store i64 %15, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDiscardableMemoryPool* @_Z32SkGetGlobalDiscardableMemoryPoolv() local_unnamed_addr #0 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZ32SkGetGlobalDiscardableMemoryPoolvE6global to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %19, !prof !5

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZ32SkGetGlobalDiscardableMemoryPoolvE6global) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 64) #8
  %8 = getelementptr inbounds i8, i8* %7, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 1, i32* %9, align 4
  %10 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_121DiscardableMemoryPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %7, i64 20
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %7, i64 24
  %15 = bitcast i8* %14 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %15, align 8
  %16 = getelementptr inbounds i8, i8* %7, i64 32
  %17 = bitcast i8* %16 to i64*
  store i64 134217728, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %7, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #9
  store i8* %7, i8** bitcast (%class.SkDiscardableMemoryPool** @_ZZ32SkGetGlobalDiscardableMemoryPoolvE6global to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZ32SkGetGlobalDiscardableMemoryPoolvE6global) #9
  br label %19

19:                                               ; preds = %3, %6, %0
  %20 = load %class.SkDiscardableMemoryPool*, %class.SkDiscardableMemoryPool** @_ZZ32SkGetGlobalDiscardableMemoryPoolvE6global, align 8
  ret %class.SkDiscardableMemoryPool* %20
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121DiscardableMemoryPoolD2Ev(%"class.(anonymous namespace)::DiscardableMemoryPool"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_121DiscardableMemoryPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121DiscardableMemoryPoolD0Ev(%"class.(anonymous namespace)::DiscardableMemoryPool"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN12_GLOBAL__N_121DiscardableMemoryPoolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore* %3) #9
  %4 = bitcast %"class.(anonymous namespace)::DiscardableMemoryPool"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %class.SkDiscardableMemory* @_ZN12_GLOBAL__N_121DiscardableMemoryPool6createEm(%"class.(anonymous namespace)::DiscardableMemoryPool"*, i64) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %1, i32 0) #9
  %4 = ptrtoint i8* %3 to i64
  %5 = icmp eq i8* %3, null
  br i1 %5, label %120, label %6

6:                                                ; preds = %2
  %7 = icmp eq %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw add i32* %9, i32 1 monotonic, !noalias !6
  br label %11

11:                                               ; preds = %8, %6
  %12 = ptrtoint %"class.(anonymous namespace)::DiscardableMemoryPool"* %0 to i64
  %13 = tail call i8* @_Znwm(i64 56) #8
  %14 = bitcast i8* %13 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN12_GLOBAL__N_121PoolDiscardableMemoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 8
  %16 = getelementptr inbounds i8, i8* %13, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #9
  %17 = bitcast i8* %16 to i64*
  store i64 %12, i64* %17, align 8
  %18 = getelementptr inbounds i8, i8* %13, i64 32
  store i8 1, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %13, i64 40
  %20 = bitcast i8* %19 to i64*
  store i64 %4, i64* %20, align 8
  %21 = getelementptr inbounds i8, i8* %13, i64 48
  %22 = bitcast i8* %21 to i64*
  store i64 %1, i64* %22, align 8
  %23 = ptrtoint i8* %13 to i64
  %24 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 1
  %25 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw sub i32* %25, i32 1 acquire
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %28, label %30

28:                                               ; preds = %11
  %29 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %24, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %29) #9
  br label %30

30:                                               ; preds = %28, %11
  %31 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4
  %32 = bitcast i8* %15 to %"class.(anonymous namespace)::PoolDiscardableMemory"**
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* null, %"class.(anonymous namespace)::PoolDiscardableMemory"** %32, align 8
  %33 = bitcast %class.SkTInternalLList* %31 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds i8, i8* %13, i64 16
  %36 = bitcast i8* %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = icmp eq i64 %34, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %30
  %39 = inttoptr i64 %34 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %40 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %39, i64 0, i32 1
  %41 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %40 to i8**
  store i8* %13, i8** %41, align 8
  br label %42

42:                                               ; preds = %38, %30
  %43 = bitcast %class.SkTInternalLList* %31 to i8**
  store i8* %13, i8** %43, align 8
  %44 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 1
  %45 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %44, align 8
  %46 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %45, null
  %47 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %45 to i64
  br i1 %46, label %48, label %50

48:                                               ; preds = %42
  %49 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %44 to i8**
  store i8* %13, i8** %49, align 8
  br label %50

50:                                               ; preds = %48, %42
  %51 = phi i64 [ %47, %42 ], [ %23, %48 ]
  %52 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 3
  %53 = load i64, i64* %52, align 8
  %54 = add i64 %53, %1
  store i64 %54, i64* %52, align 8
  %55 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = icmp ule i64 %54, %56
  %58 = icmp eq i64 %51, 0
  %59 = or i1 %58, %57
  br i1 %59, label %115, label %60

60:                                               ; preds = %50
  %61 = inttoptr i64 %51 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %62 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 0
  br label %63

63:                                               ; preds = %108, %60
  %64 = phi i64 [ %54, %60 ], [ %109, %108 ]
  %65 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %61, %60 ], [ %111, %108 ]
  %66 = phi i64 [ %51, %60 ], [ %110, %108 ]
  %67 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %65, i64 0, i32 4
  %68 = load i8, i8* %67, align 8, !range !9
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %101

70:                                               ; preds = %63
  %71 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %65, i64 0, i32 5, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  store i8* null, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %70
  tail call void @_Z7sk_freePv(i8* nonnull %72) #9
  br label %75

75:                                               ; preds = %74, %70
  %76 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %65, i64 0, i32 6
  %77 = load i64, i64* %76, align 8
  %78 = load i64, i64* %52, align 8
  %79 = sub i64 %78, %77
  store i64 %79, i64* %52, align 8
  %80 = icmp eq i64 %66, 0
  br i1 %80, label %86, label %81

81:                                               ; preds = %75
  %82 = inttoptr i64 %66 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %83 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %82, i64 0, i32 1
  %84 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %83, align 8
  %85 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %84 to i64
  br label %86

86:                                               ; preds = %81, %75
  %87 = phi i64 [ 0, %75 ], [ %85, %81 ]
  %88 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ null, %75 ], [ %84, %81 ]
  %89 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %65, i64 0, i32 1
  %90 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %89, align 8
  %91 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %65, i64 0, i32 2
  %92 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %91, align 8
  %93 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %90, null
  %94 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %90, i64 0, i32 2
  %95 = select i1 %93, %"class.(anonymous namespace)::PoolDiscardableMemory"** %62, %"class.(anonymous namespace)::PoolDiscardableMemory"** %94
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %92, %"class.(anonymous namespace)::PoolDiscardableMemory"** %95, align 8
  %96 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %92, null
  %97 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %92, i64 0, i32 1
  %98 = select i1 %96, %"class.(anonymous namespace)::PoolDiscardableMemory"** %44, %"class.(anonymous namespace)::PoolDiscardableMemory"** %97
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %90, %"class.(anonymous namespace)::PoolDiscardableMemory"** %98, align 8
  %99 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 16, i1 false) #9
  %100 = load i64, i64* %52, align 8
  br label %108

101:                                              ; preds = %63
  %102 = icmp eq i64 %66, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %101
  %104 = inttoptr i64 %66 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %105 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %104, i64 0, i32 1
  %106 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %105, align 8
  %107 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %106 to i64
  br label %108

108:                                              ; preds = %103, %86
  %109 = phi i64 [ %100, %86 ], [ %64, %103 ]
  %110 = phi i64 [ %87, %86 ], [ %107, %103 ]
  %111 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %88, %86 ], [ %106, %103 ]
  %112 = icmp ugt i64 %109, %56
  %113 = icmp ne %"class.(anonymous namespace)::PoolDiscardableMemory"* %111, null
  %114 = and i1 %112, %113
  br i1 %114, label %63, label %115

115:                                              ; preds = %108, %101, %50
  %116 = atomicrmw add i32* %25, i32 1 release
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %118, label %120

118:                                              ; preds = %115
  %119 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %24, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %119, i32 1) #9
  br label %120

120:                                              ; preds = %118, %115, %2
  %121 = phi i64 [ %23, %118 ], [ %23, %115 ], [ 0, %2 ]
  %122 = inttoptr i64 %121 to %class.SkDiscardableMemory*
  ret %class.SkDiscardableMemory* %122
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @_ZN12_GLOBAL__N_121DiscardableMemoryPool10getRAMUsedEv(%"class.(anonymous namespace)::DiscardableMemoryPool"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121DiscardableMemoryPool12setRAMBudgetEm(%"class.(anonymous namespace)::DiscardableMemoryPool"*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = atomicrmw sub i32* %4, i32 1 acquire
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %8) #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 2
  store i64 %1, i64* %10, align 8
  %11 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, %1
  br i1 %13, label %14, label %74

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 1
  %16 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %74, label %19

19:                                               ; preds = %14
  %20 = inttoptr i64 %17 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %21 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 0
  br label %22

22:                                               ; preds = %67, %19
  %23 = phi i64 [ %12, %19 ], [ %68, %67 ]
  %24 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %20, %19 ], [ %70, %67 ]
  %25 = phi i64 [ %17, %19 ], [ %69, %67 ]
  %26 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 4
  %27 = load i8, i8* %26, align 8, !range !9
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %60

29:                                               ; preds = %22
  %30 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  store i8* null, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @_Z7sk_freePv(i8* nonnull %31) #9
  br label %34

34:                                               ; preds = %33, %29
  %35 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 6
  %36 = load i64, i64* %35, align 8
  %37 = load i64, i64* %11, align 8
  %38 = sub i64 %37, %36
  store i64 %38, i64* %11, align 8
  %39 = icmp eq i64 %25, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %34
  %41 = inttoptr i64 %25 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %42 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %41, i64 0, i32 1
  %43 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %42, align 8
  %44 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %43 to i64
  br label %45

45:                                               ; preds = %40, %34
  %46 = phi i64 [ 0, %34 ], [ %44, %40 ]
  %47 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ null, %34 ], [ %43, %40 ]
  %48 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 1
  %49 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %48, align 8
  %50 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 2
  %51 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %50, align 8
  %52 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, null
  %53 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, i64 0, i32 2
  %54 = select i1 %52, %"class.(anonymous namespace)::PoolDiscardableMemory"** %21, %"class.(anonymous namespace)::PoolDiscardableMemory"** %53
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %51, %"class.(anonymous namespace)::PoolDiscardableMemory"** %54, align 8
  %55 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %51, null
  %56 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %51, i64 0, i32 1
  %57 = select i1 %55, %"class.(anonymous namespace)::PoolDiscardableMemory"** %15, %"class.(anonymous namespace)::PoolDiscardableMemory"** %56
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, %"class.(anonymous namespace)::PoolDiscardableMemory"** %57, align 8
  %58 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #9
  %59 = load i64, i64* %11, align 8
  br label %67

60:                                               ; preds = %22
  %61 = icmp eq i64 %25, 0
  br i1 %61, label %74, label %62

62:                                               ; preds = %60
  %63 = inttoptr i64 %25 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %64 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %63, i64 0, i32 1
  %65 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %64, align 8
  %66 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %65 to i64
  br label %67

67:                                               ; preds = %62, %45
  %68 = phi i64 [ %59, %45 ], [ %23, %62 ]
  %69 = phi i64 [ %46, %45 ], [ %66, %62 ]
  %70 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %47, %45 ], [ %65, %62 ]
  %71 = icmp ugt i64 %68, %1
  %72 = icmp ne %"class.(anonymous namespace)::PoolDiscardableMemory"* %70, null
  %73 = and i1 %71, %72
  br i1 %73, label %22, label %74

74:                                               ; preds = %60, %67, %9, %14
  %75 = atomicrmw add i32* %4, i32 1 release
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %74
  %78 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %3, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %78, i32 1) #9
  br label %79

79:                                               ; preds = %74, %77
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i64 @_ZN12_GLOBAL__N_121DiscardableMemoryPool12getRAMBudgetEv(%"class.(anonymous namespace)::DiscardableMemoryPool"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121DiscardableMemoryPool8dumpPoolEv(%"class.(anonymous namespace)::DiscardableMemoryPool"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = atomicrmw sub i32* %3, i32 1 acquire
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %72, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 1
  %14 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %72, label %17

17:                                               ; preds = %12
  %18 = inttoptr i64 %15 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %19 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %0, i64 0, i32 4, i32 0
  br label %20

20:                                               ; preds = %65, %17
  %21 = phi i64 [ %10, %17 ], [ %66, %65 ]
  %22 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %18, %17 ], [ %68, %65 ]
  %23 = phi i64 [ %15, %17 ], [ %67, %65 ]
  %24 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 4
  %25 = load i8, i8* %24, align 8, !range !9
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %58

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 5, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  store i8* null, i8** %28, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %27
  tail call void @_Z7sk_freePv(i8* nonnull %29) #9
  br label %32

32:                                               ; preds = %31, %27
  %33 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 6
  %34 = load i64, i64* %33, align 8
  %35 = load i64, i64* %9, align 8
  %36 = sub i64 %35, %34
  store i64 %36, i64* %9, align 8
  %37 = icmp eq i64 %23, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %32
  %39 = inttoptr i64 %23 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %40 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %39, i64 0, i32 1
  %41 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %40, align 8
  %42 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %41 to i64
  br label %43

43:                                               ; preds = %38, %32
  %44 = phi i64 [ 0, %32 ], [ %42, %38 ]
  %45 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ null, %32 ], [ %41, %38 ]
  %46 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 1
  %47 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %46, align 8
  %48 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 2
  %49 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %48, align 8
  %50 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %47, null
  %51 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %47, i64 0, i32 2
  %52 = select i1 %50, %"class.(anonymous namespace)::PoolDiscardableMemory"** %19, %"class.(anonymous namespace)::PoolDiscardableMemory"** %51
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, %"class.(anonymous namespace)::PoolDiscardableMemory"** %52, align 8
  %53 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, null
  %54 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %49, i64 0, i32 1
  %55 = select i1 %53, %"class.(anonymous namespace)::PoolDiscardableMemory"** %13, %"class.(anonymous namespace)::PoolDiscardableMemory"** %54
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %47, %"class.(anonymous namespace)::PoolDiscardableMemory"** %55, align 8
  %56 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false) #9
  %57 = load i64, i64* %9, align 8
  br label %65

58:                                               ; preds = %20
  %59 = icmp eq i64 %23, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %58
  %61 = inttoptr i64 %23 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %62 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %61, i64 0, i32 1
  %63 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %62, align 8
  %64 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %63 to i64
  br label %65

65:                                               ; preds = %60, %43
  %66 = phi i64 [ %57, %43 ], [ %21, %60 ]
  %67 = phi i64 [ %44, %43 ], [ %64, %60 ]
  %68 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %45, %43 ], [ %63, %60 ]
  %69 = icmp ne i64 %66, 0
  %70 = icmp ne %"class.(anonymous namespace)::PoolDiscardableMemory"* %68, null
  %71 = and i1 %69, %70
  br i1 %71, label %20, label %72

72:                                               ; preds = %58, %65, %8, %12
  %73 = atomicrmw add i32* %3, i32 1 release
  %74 = icmp slt i32 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %72
  %76 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %2, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %76, i32 1) #9
  br label %77

77:                                               ; preds = %72, %75
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN11SkSemaphoreD1Ev(%class.SkSemaphore*) unnamed_addr #5

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121PoolDiscardableMemoryD2Ev(%"class.(anonymous namespace)::PoolDiscardableMemory"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN12_GLOBAL__N_121PoolDiscardableMemoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.(anonymous namespace)::DiscardableMemoryPool"*, %"class.(anonymous namespace)::DiscardableMemoryPool"** %3, align 8
  %5 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %4, i64 0, i32 1
  %6 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acquire
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %5, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %10) #9
  br label %11

11:                                               ; preds = %9, %1
  %12 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %34, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 6
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %4, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %17
  store i64 %20, i64* %18, align 8
  %21 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 1
  %22 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %21, align 8
  %23 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 2
  %24 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %23, align 8
  %25 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, null
  %26 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %4, i64 0, i32 4, i32 0
  %27 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, i64 0, i32 2
  %28 = select i1 %25, %"class.(anonymous namespace)::PoolDiscardableMemory"** %26, %"class.(anonymous namespace)::PoolDiscardableMemory"** %27
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, %"class.(anonymous namespace)::PoolDiscardableMemory"** %28, align 8
  %29 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, null
  %30 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %4, i64 0, i32 4, i32 1
  %31 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %24, i64 0, i32 1
  %32 = select i1 %29, %"class.(anonymous namespace)::PoolDiscardableMemory"** %30, %"class.(anonymous namespace)::PoolDiscardableMemory"** %31
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %22, %"class.(anonymous namespace)::PoolDiscardableMemory"** %32, align 8
  %33 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 16, i1 false) #9
  br label %34

34:                                               ; preds = %15, %11
  %35 = atomicrmw add i32* %6, i32 1 release
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %5, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %38, i32 1) #9
  br label %39

39:                                               ; preds = %34, %37
  %40 = load i8*, i8** %12, align 8
  store i8* null, i8** %12, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %39
  tail call void @_Z7sk_freePv(i8* nonnull %40) #9
  br label %43

43:                                               ; preds = %39, %42
  %44 = load %"class.(anonymous namespace)::DiscardableMemoryPool"*, %"class.(anonymous namespace)::DiscardableMemoryPool"** %3, align 8
  %45 = icmp eq %"class.(anonymous namespace)::DiscardableMemoryPool"* %44, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i32* %47, i32 -1 acq_rel
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %56

50:                                               ; preds = %46
  %51 = bitcast %"class.(anonymous namespace)::DiscardableMemoryPool"* %44 to %class.SkRefCntBase*
  %52 = bitcast %"class.(anonymous namespace)::DiscardableMemoryPool"* %44 to void (%class.SkRefCntBase*)***
  %53 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %52, align 8
  %54 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %53, i64 2
  %55 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %54, align 8
  tail call void %55(%class.SkRefCntBase* nonnull %51) #9
  br label %56

56:                                               ; preds = %43, %46, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121PoolDiscardableMemoryD0Ev(%"class.(anonymous namespace)::PoolDiscardableMemory"*) unnamed_addr #0 align 2 {
  tail call void @_ZN12_GLOBAL__N_121PoolDiscardableMemoryD2Ev(%"class.(anonymous namespace)::PoolDiscardableMemory"* %0) #9
  %2 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN12_GLOBAL__N_121PoolDiscardableMemory4lockEv(%"class.(anonymous namespace)::PoolDiscardableMemory"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 3, i32 0
  %3 = load %"class.(anonymous namespace)::DiscardableMemoryPool"*, %"class.(anonymous namespace)::DiscardableMemoryPool"** %2, align 8
  %4 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 1
  %5 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = atomicrmw sub i32* %5, i32 1 acquire
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %9) #9
  br label %10

10:                                               ; preds = %8, %1
  %11 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %43, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 4
  store i8 1, i8* %15, align 8
  %16 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 4
  %17 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 1
  %18 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %17, align 8
  %19 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 2
  %20 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %19, align 8
  %21 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %18, null
  %22 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %16, i64 0, i32 0
  %23 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %18, i64 0, i32 2
  %24 = select i1 %21, %"class.(anonymous namespace)::PoolDiscardableMemory"** %22, %"class.(anonymous namespace)::PoolDiscardableMemory"** %23
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %20, %"class.(anonymous namespace)::PoolDiscardableMemory"** %24, align 8
  %25 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %20, null
  %26 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 4, i32 1
  %27 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %20, i64 0, i32 1
  %28 = select i1 %25, %"class.(anonymous namespace)::PoolDiscardableMemory"** %26, %"class.(anonymous namespace)::PoolDiscardableMemory"** %27
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %18, %"class.(anonymous namespace)::PoolDiscardableMemory"** %28, align 8
  %29 = getelementptr inbounds %class.SkTInternalLList, %class.SkTInternalLList* %16, i64 0, i32 0
  %30 = bitcast %class.SkTInternalLList* %16 to i64*
  %31 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 16, i1 false) #9
  %32 = load i64, i64* %30, align 8
  %33 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %19 to i64*
  store i64 %32, i64* %33, align 8
  %34 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %29, align 8
  %35 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %14
  %37 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %34, i64 0, i32 1
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, %"class.(anonymous namespace)::PoolDiscardableMemory"** %37, align 8
  br label %38

38:                                               ; preds = %36, %14
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, %"class.(anonymous namespace)::PoolDiscardableMemory"** %29, align 8
  %39 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 4, i32 1
  %40 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %39, align 8
  %41 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %40, null
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, %"class.(anonymous namespace)::PoolDiscardableMemory"** %39, align 8
  br label %43

43:                                               ; preds = %42, %38, %10
  %44 = phi i1 [ false, %10 ], [ true, %38 ], [ true, %42 ]
  %45 = atomicrmw add i32* %5, i32 1 release
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  %48 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %48, i32 1) #9
  br label %49

49:                                               ; preds = %43, %47
  ret i1 %44
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZN12_GLOBAL__N_121PoolDiscardableMemory4dataEv(%"class.(anonymous namespace)::PoolDiscardableMemory"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_121PoolDiscardableMemory6unlockEv(%"class.(anonymous namespace)::PoolDiscardableMemory"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 3, i32 0
  %3 = load %"class.(anonymous namespace)::DiscardableMemoryPool"*, %"class.(anonymous namespace)::DiscardableMemoryPool"** %2, align 8
  %4 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 1
  %5 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = atomicrmw sub i32* %5, i32 1 acquire
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %9) #9
  br label %10

10:                                               ; preds = %8, %1
  %11 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %0, i64 0, i32 4
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp ugt i64 %15, %13
  br i1 %16, label %17, label %77

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 4, i32 1
  %19 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %77, label %22

22:                                               ; preds = %17
  %23 = inttoptr i64 %20 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %24 = getelementptr inbounds %"class.(anonymous namespace)::DiscardableMemoryPool", %"class.(anonymous namespace)::DiscardableMemoryPool"* %3, i64 0, i32 4, i32 0
  br label %25

25:                                               ; preds = %70, %22
  %26 = phi i64 [ %15, %22 ], [ %71, %70 ]
  %27 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %23, %22 ], [ %73, %70 ]
  %28 = phi i64 [ %20, %22 ], [ %72, %70 ]
  %29 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %27, i64 0, i32 4
  %30 = load i8, i8* %29, align 8, !range !9
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %63

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %27, i64 0, i32 5, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  store i8* null, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_Z7sk_freePv(i8* nonnull %34) #9
  br label %37

37:                                               ; preds = %36, %32
  %38 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %27, i64 0, i32 6
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* %14, align 8
  %41 = sub i64 %40, %39
  store i64 %41, i64* %14, align 8
  %42 = icmp eq i64 %28, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %37
  %44 = inttoptr i64 %28 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %45 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %44, i64 0, i32 1
  %46 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %45, align 8
  %47 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %46 to i64
  br label %48

48:                                               ; preds = %43, %37
  %49 = phi i64 [ 0, %37 ], [ %47, %43 ]
  %50 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ null, %37 ], [ %46, %43 ]
  %51 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %27, i64 0, i32 1
  %52 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %51, align 8
  %53 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %27, i64 0, i32 2
  %54 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %53, align 8
  %55 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %52, null
  %56 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %52, i64 0, i32 2
  %57 = select i1 %55, %"class.(anonymous namespace)::PoolDiscardableMemory"** %24, %"class.(anonymous namespace)::PoolDiscardableMemory"** %56
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %54, %"class.(anonymous namespace)::PoolDiscardableMemory"** %57, align 8
  %58 = icmp eq %"class.(anonymous namespace)::PoolDiscardableMemory"* %54, null
  %59 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %54, i64 0, i32 1
  %60 = select i1 %58, %"class.(anonymous namespace)::PoolDiscardableMemory"** %18, %"class.(anonymous namespace)::PoolDiscardableMemory"** %59
  store %"class.(anonymous namespace)::PoolDiscardableMemory"* %52, %"class.(anonymous namespace)::PoolDiscardableMemory"** %60, align 8
  %61 = bitcast %"class.(anonymous namespace)::PoolDiscardableMemory"** %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 16, i1 false) #9
  %62 = load i64, i64* %14, align 8
  br label %70

63:                                               ; preds = %25
  %64 = icmp eq i64 %28, 0
  br i1 %64, label %77, label %65

65:                                               ; preds = %63
  %66 = inttoptr i64 %28 to %"class.(anonymous namespace)::PoolDiscardableMemory"*
  %67 = getelementptr inbounds %"class.(anonymous namespace)::PoolDiscardableMemory", %"class.(anonymous namespace)::PoolDiscardableMemory"* %66, i64 0, i32 1
  %68 = load %"class.(anonymous namespace)::PoolDiscardableMemory"*, %"class.(anonymous namespace)::PoolDiscardableMemory"** %67, align 8
  %69 = ptrtoint %"class.(anonymous namespace)::PoolDiscardableMemory"* %68 to i64
  br label %70

70:                                               ; preds = %65, %48
  %71 = phi i64 [ %62, %48 ], [ %26, %65 ]
  %72 = phi i64 [ %49, %48 ], [ %69, %65 ]
  %73 = phi %"class.(anonymous namespace)::PoolDiscardableMemory"* [ %50, %48 ], [ %68, %65 ]
  %74 = icmp ugt i64 %71, %13
  %75 = icmp ne %"class.(anonymous namespace)::PoolDiscardableMemory"* %73, null
  %76 = and i1 %74, %75
  br i1 %76, label %25, label %77

77:                                               ; preds = %70, %63, %17, %10
  %78 = atomicrmw add i32* %5, i32 1 release
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %4, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %81, i32 1) #9
  br label %82

82:                                               ; preds = %77, %80
  ret void
}

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #6

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #6

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z10sk_make_spIN12_GLOBAL__N_121DiscardableMemoryPoolEJRmEE5sk_spIT_EDpOT0_: argument 0"}
!4 = distinct !{!4, !"_Z10sk_make_spIN12_GLOBAL__N_121DiscardableMemoryPoolEJRmEE5sk_spIT_EDpOT0_"}
!5 = !{!"branch_weights", i32 1, i32 1048575}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_Z9sk_ref_spIN12_GLOBAL__N_121DiscardableMemoryPoolEE5sk_spIT_EPS3_: argument 0"}
!8 = distinct !{!8, !"_Z9sk_ref_spIN12_GLOBAL__N_121DiscardableMemoryPoolEE5sk_spIT_EPS3_"}
!9 = !{i8 0, i8 2}
