; ModuleID = '../../third_party/swiftshader/third_party/marl/src/memory.cpp'
source_filename = "../../third_party/swiftshader/third_party/marl/src/memory.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.marl::Allocator" = type { i32 (...)** }
%"class.(anonymous namespace)::DefaultAllocator" = type { %"class.marl::Allocator" }
%"struct.marl::Allocation" = type { i8*, %"struct.marl::Allocation::Request" }
%"struct.marl::Allocation::Request" = type <{ i64, i64, i8, i8, [6 x i8] }>

$_ZN4marl9AllocatorD2Ev = comdat any

@_ZN12_GLOBAL__N_19kPageSizeE = internal global i64 0, align 8
@_ZTVN12_GLOBAL__N_116DefaultAllocatorE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.marl::Allocator"*)* @_ZN4marl9AllocatorD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::DefaultAllocator"*)* @_ZN12_GLOBAL__N_116DefaultAllocatorD0Ev to i8*), i8* bitcast (void (%"struct.marl::Allocation"*, %"class.(anonymous namespace)::DefaultAllocator"*, %"struct.marl::Allocation::Request"*)* @_ZN12_GLOBAL__N_116DefaultAllocator8allocateERKN4marl10Allocation7RequestE to i8*), i8* bitcast (void (%"class.(anonymous namespace)::DefaultAllocator"*, %"struct.marl::Allocation"*)* @_ZN12_GLOBAL__N_116DefaultAllocator4freeERKN4marl10AllocationE to i8*)] }, align 8
@_ZN12_GLOBAL__N_116DefaultAllocator8instanceE = internal global { i8** } { i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_116DefaultAllocatorE, i32 0, inrange i32 0, i32 2) }, align 8
@_ZN4marl9Allocator7DefaultE = local_unnamed_addr global %"class.marl::Allocator"* bitcast ({ i8** }* @_ZN12_GLOBAL__N_116DefaultAllocator8instanceE to %"class.marl::Allocator"*), align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_memory.cpp, i8* null }]

; Function Attrs: nounwind optsize
declare i64 @sysconf(i32) local_unnamed_addr #0

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4marl9AllocatorD2Ev(%"class.marl::Allocator"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define i64 @_ZN4marl8pageSizeEv() local_unnamed_addr #3 {
  %1 = load i64, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  ret i64 %1
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_116DefaultAllocatorD0Ev(%"class.(anonymous namespace)::DefaultAllocator"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::DefaultAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_116DefaultAllocator8allocateERKN4marl10Allocation7RequestE(%"struct.marl::Allocation"* noalias nocapture sret, %"class.(anonymous namespace)::DefaultAllocator"* nocapture readnone, %"struct.marl::Allocation::Request"* nocapture readonly dereferenceable(24)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %2, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %2, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  br i1 %6, label %28, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %2, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  %13 = add i64 %11, -1
  %14 = add i64 %13, %12
  %15 = udiv i64 %14, %12
  %16 = add i64 %15, 2
  %17 = mul i64 %16, %12
  %18 = tail call i8* @mmap64(i8* null, i64 %17, i32 3, i32 34, i32 -1, i64 0) #8
  %19 = icmp eq i8* %18, inttoptr (i64 -1 to i8*)
  %20 = select i1 %19, i8* null, i8* %18
  %21 = load i64, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  %22 = tail call i32 @mprotect(i8* %20, i64 %21, i32 0) #8
  %23 = load i64, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  %25 = mul i64 %23, %15
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = tail call i32 @mprotect(i8* %26, i64 %23, i32 0) #8
  br label %46

28:                                               ; preds = %3
  %29 = icmp ugt i64 %8, 1
  %30 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %2, i64 0, i32 0
  %31 = load i64, i64* %30, align 8
  br i1 %29, label %32, label %44

32:                                               ; preds = %28
  %33 = add i64 %8, 8
  %34 = add i64 %33, %31
  %35 = tail call noalias i8* @malloc(i64 %34) #8
  %36 = ptrtoint i8* %35 to i64
  %37 = add i64 %8, -1
  %38 = add i64 %37, %36
  %39 = urem i64 %38, %8
  %40 = sub i64 %38, %39
  %41 = inttoptr i64 %40 to i8*
  %42 = getelementptr inbounds i8, i8* %41, i64 %31
  %43 = bitcast i8* %42 to i8**
  store i8* %35, i8** %43, align 1
  br label %46

44:                                               ; preds = %28
  %45 = tail call noalias i8* @malloc(i64 %31) #8
  br label %46

46:                                               ; preds = %32, %44, %9
  %47 = phi i8* [ %24, %9 ], [ %41, %32 ], [ %45, %44 ]
  %48 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %0, i64 0, i32 0
  %49 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %0, i64 0, i32 1
  %50 = bitcast %"struct.marl::Allocation"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 -86, i64 32, i1 false)
  store i8* %47, i8** %48, align 8
  %51 = bitcast %"struct.marl::Allocation::Request"* %49 to i8*
  %52 = bitcast %"struct.marl::Allocation::Request"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 18, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define internal void @_ZN12_GLOBAL__N_116DefaultAllocator4freeERKN4marl10AllocationE(%"class.(anonymous namespace)::DefaultAllocator"* nocapture readnone, %"struct.marl::Allocation"* nocapture readonly dereferenceable(32)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %1, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %1, i64 0, i32 1, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %1, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %3, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  %13 = add i64 %11, -1
  %14 = add i64 %13, %12
  %15 = udiv i64 %14, %12
  %16 = add i64 %15, 2
  %17 = sub i64 0, %12
  %18 = getelementptr inbounds i8, i8* %9, i64 %17
  %19 = mul i64 %16, %12
  %20 = tail call i32 @munmap(i8* %18, i64 %19) #8
  br label %34

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %1, i64 0, i32 1, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %23, 1
  %25 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %1, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br i1 %24, label %27, label %33

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %3, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds i8, i8* %26, i64 %29
  %31 = bitcast i8* %30 to i8**
  %32 = load i8*, i8** %31, align 1
  tail call void @free(i8* %32) #8
  br label %34

33:                                               ; preds = %21
  tail call void @free(i8* %26) #8
  br label %34

34:                                               ; preds = %27, %33, %7
  ret void
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind optsize
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #0

; Function Attrs: nounwind optsize
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #0

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #0

; Function Attrs: nounwind optsize
declare i32 @munmap(i8*, i64) local_unnamed_addr #0

; Function Attrs: nounwind optsize ssp uwtable
define internal void @_GLOBAL__sub_I_memory.cpp() #2 section ".text.startup" {
  %1 = tail call i64 @sysconf(i32 30) #8
  store i64 %1, i64* @_ZN12_GLOBAL__N_19kPageSizeE, align 8
  %2 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (i64* @_ZN12_GLOBAL__N_19kPageSizeE to i8*)) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind optsize }
attributes #8 = { nounwind optsize }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
