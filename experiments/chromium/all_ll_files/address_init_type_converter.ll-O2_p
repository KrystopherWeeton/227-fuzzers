; ModuleID = '../../third_party/blink/renderer/modules/payments/address_init_type_converter.cc'
source_filename = "../../third_party/blink/renderer/modules/payments/address_init_type_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.payments::mojom::blink::PaymentAddress"* }
%"class.payments::mojom::blink::PaymentAddress" = type { %"class.WTF::String", %"class.WTF::Vector", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::AddressInit" = type { %"class.blink::IDLDictionaryBase", i8, %"class.WTF::Vector", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

@_ZN3WTF14g_empty_stringE = external local_unnamed_addr constant %"class.WTF::String"*, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo13TypeConverterINS_9StructPtrIN8payments5mojom5blink14PaymentAddressEEEPN5blink11AddressInitEE7ConvertEPKS8_(%"class.mojo::StructPtr"* noalias nocapture sret, %"class.blink::AddressInit"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector", align 8
  %4 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = tail call i8* @_Znwm(i64 88) #7, !noalias !2
  %6 = bitcast i8* %5 to %"class.payments::mojom::blink::PaymentAddress"*
  tail call void @_ZN8payments5mojom5blink14PaymentAddressC1Ev(%"class.payments::mojom::blink::PaymentAddress"* nonnull %6) #8, !noalias !2
  %7 = ptrtoint i8* %5 to i64
  %8 = bitcast %"class.mojo::StructPtr"* %0 to i64*
  store i64 %7, i64* %8, align 8, !alias.scope !2
  %9 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 4, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  %12 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 4
  %13 = load %"class.WTF::String"*, %"class.WTF::String"** @_ZN3WTF14g_empty_stringE, align 8
  %14 = select i1 %11, %"class.WTF::String"* %13, %"class.WTF::String"* %12
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %35, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #8
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !5

32:                                               ; preds = %23
  tail call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %35

35:                                               ; preds = %33, %18, %2
  %36 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %37 = bitcast i8* %5 to i64*
  %38 = bitcast i8* %5 to %"class.WTF::StringImpl"**
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  store i64 %36, i64* %37, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #8
  br label %54

54:                                               ; preds = %35, %50, %53
  %55 = bitcast %"class.WTF::Vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55) #8
  %56 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 1
  %57 = load i8, i8* %56, align 8, !range !6
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %112, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::String"* null, %"class.WTF::String"** %62, align 8
  %63 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %63, align 8
  %64 = icmp eq i32 %61, 0
  br i1 %64, label %74, label %65

65:                                               ; preds = %59
  %66 = zext i32 %61 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %66) #8
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %67, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  %69 = ptrtoint i8* %68 to i64
  %70 = bitcast %"class.WTF::Vector"* %3 to i64*
  store atomic i64 %69, i64* %70 monotonic, align 8
  %71 = lshr i64 %67, 3
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %63, align 8
  %73 = bitcast i8* %68 to %"class.WTF::String"*
  br label %74

74:                                               ; preds = %65, %59
  %75 = phi %"class.WTF::String"* [ null, %59 ], [ %73, %65 ]
  %76 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %80 = load %"class.WTF::String"*, %"class.WTF::String"** %79, align 8
  %81 = zext i32 %77 to i64
  %82 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %80, i64 %81
  %83 = icmp eq i32 %77, 0
  br i1 %83, label %113, label %84

84:                                               ; preds = %74, %108
  %85 = phi %"class.WTF::String"* [ %109, %108 ], [ %75, %74 ]
  %86 = phi %"class.WTF::String"* [ %110, %108 ], [ %80, %74 ]
  %87 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %86, i64 0, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %85, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %88, %"class.WTF::StringImpl"** %89, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %90, label %108, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %108

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i33
  %100 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %99, i33 1) #8
  %101 = extractvalue { i33, i1 } %100, 1
  %102 = extractvalue { i33, i1 } %100, 0
  %103 = icmp slt i33 %102, 0
  %104 = or i1 %101, %103
  br i1 %104, label %105, label %106, !prof !5

105:                                              ; preds = %96
  tail call void @llvm.trap() #8
  unreachable

106:                                              ; preds = %96
  %107 = trunc i33 %102 to i32
  store i32 %107, i32* %97, align 4
  br label %108

108:                                              ; preds = %106, %91, %84
  %109 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %85, i64 1
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %86, i64 1
  %111 = icmp eq %"class.WTF::String"* %110, %82
  br i1 %111, label %113, label %84

112:                                              ; preds = %54
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 16, i1 false) #8
  br label %113

113:                                              ; preds = %108, %74, %112
  %114 = load %"class.payments::mojom::blink::PaymentAddress"*, %"class.payments::mojom::blink::PaymentAddress"** %4, align 8
  %115 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 1
  %116 = call dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"* %115, %"class.WTF::Vector"* nonnull dereferenceable(16) %3)
  %117 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %118 = load %"class.WTF::String"*, %"class.WTF::String"** %117, align 8
  %119 = icmp eq %"class.WTF::String"* %118, null
  br i1 %119, label %154, label %120, !prof !7

120:                                              ; preds = %113
  %121 = bitcast %"class.WTF::String"* %118 to i8*
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %152, label %125, !prof !5

125:                                              ; preds = %120
  %126 = zext i32 %123 to i64
  %127 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %118, i64 %126
  br label %128

128:                                              ; preds = %146, %125
  %129 = phi %"class.WTF::String"* [ %147, %146 ], [ %118, %125 ]
  %130 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %146, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  br i1 %137, label %140, label %142

140:                                              ; preds = %133
  %141 = add i32 %139, -1
  store i32 %141, i32* %138, align 4
  br label %142

142:                                              ; preds = %140, %133
  %143 = phi i32 [ %141, %140 ], [ %139, %133 ]
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %131) #8
  br label %146

146:                                              ; preds = %145, %142, %128
  %147 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %129, i64 1
  %148 = icmp eq %"class.WTF::String"* %147, %127
  br i1 %148, label %149, label %128

149:                                              ; preds = %146
  store i32 0, i32* %122, align 4
  %150 = bitcast %"class.WTF::Vector"* %3 to i8**
  %151 = load i8*, i8** %150, align 8
  br label %152

152:                                              ; preds = %149, %120
  %153 = phi i8* [ %151, %149 ], [ %121, %120 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %153) #8
  store %"class.WTF::String"* null, %"class.WTF::String"** %117, align 8
  br label %154

154:                                              ; preds = %113, %152
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55) #8
  %155 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 10, i32 0, i32 0
  %156 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %155, align 8
  %157 = icmp eq %"class.WTF::StringImpl"* %156, null
  %158 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 10
  %159 = select i1 %157, %"class.WTF::String"* %13, %"class.WTF::String"* %158
  %160 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 2
  %161 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %159, i64 0, i32 0, i32 0
  %162 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %161, align 8
  %163 = icmp eq %"class.WTF::StringImpl"* %162, null
  br i1 %163, label %181, label %164

164:                                              ; preds = %154
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %162, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, 2
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %164
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %162, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i33
  %173 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %172, i33 1) #8
  %174 = extractvalue { i33, i1 } %173, 1
  %175 = extractvalue { i33, i1 } %173, 0
  %176 = icmp slt i33 %175, 0
  %177 = or i1 %174, %176
  br i1 %177, label %178, label %179, !prof !5

178:                                              ; preds = %169
  call void @llvm.trap() #8
  unreachable

179:                                              ; preds = %169
  %180 = trunc i33 %175 to i32
  store i32 %180, i32* %170, align 4
  br label %181

181:                                              ; preds = %179, %164, %154
  %182 = ptrtoint %"class.WTF::StringImpl"* %162 to i64
  %183 = bitcast %"class.WTF::String"* %160 to i64*
  %184 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %160, i64 0, i32 0, i32 0
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  store i64 %182, i64* %183, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %200, label %187

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #8
  br label %200

200:                                              ; preds = %181, %196, %199
  %201 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 3, i32 0, i32 0
  %202 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %201, align 8
  %203 = icmp eq %"class.WTF::StringImpl"* %202, null
  %204 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 3
  %205 = select i1 %203, %"class.WTF::String"* %13, %"class.WTF::String"* %204
  %206 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 3
  %207 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %205, i64 0, i32 0, i32 0
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %207, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %208, null
  br i1 %209, label %227, label %210

210:                                              ; preds = %200
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %227

215:                                              ; preds = %210
  %216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %217 to i33
  %219 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %218, i33 1) #8
  %220 = extractvalue { i33, i1 } %219, 1
  %221 = extractvalue { i33, i1 } %219, 0
  %222 = icmp slt i33 %221, 0
  %223 = or i1 %220, %222
  br i1 %223, label %224, label %225, !prof !5

224:                                              ; preds = %215
  call void @llvm.trap() #8
  unreachable

225:                                              ; preds = %215
  %226 = trunc i33 %221 to i32
  store i32 %226, i32* %216, align 4
  br label %227

227:                                              ; preds = %225, %210, %200
  %228 = ptrtoint %"class.WTF::StringImpl"* %208 to i64
  %229 = bitcast %"class.WTF::String"* %206 to i64*
  %230 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %206, i64 0, i32 0, i32 0
  %231 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %230, align 8
  store i64 %228, i64* %229, align 8
  %232 = icmp eq %"class.WTF::StringImpl"* %231, null
  br i1 %232, label %246, label %233

233:                                              ; preds = %227
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %231, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %235 = load atomic i32, i32* %234 monotonic, align 4
  %236 = and i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %231, i64 0, i32 0
  %239 = load i32, i32* %238, align 4
  br i1 %237, label %240, label %242

240:                                              ; preds = %233
  %241 = add i32 %239, -1
  store i32 %241, i32* %238, align 4
  br label %242

242:                                              ; preds = %240, %233
  %243 = phi i32 [ %241, %240 ], [ %239, %233 ]
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %245, label %246

245:                                              ; preds = %242
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %231) #8
  br label %246

246:                                              ; preds = %227, %242, %245
  %247 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 5, i32 0, i32 0
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %247, align 8
  %249 = icmp eq %"class.WTF::StringImpl"* %248, null
  %250 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 5
  %251 = select i1 %249, %"class.WTF::String"* %13, %"class.WTF::String"* %250
  %252 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 4
  %253 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %251, i64 0, i32 0, i32 0
  %254 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %253, align 8
  %255 = icmp eq %"class.WTF::StringImpl"* %254, null
  br i1 %255, label %273, label %256

256:                                              ; preds = %246
  %257 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %254, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %258 = load atomic i32, i32* %257 monotonic, align 4
  %259 = and i32 %258, 2
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %273

261:                                              ; preds = %256
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %254, i64 0, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = zext i32 %263 to i33
  %265 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %264, i33 1) #8
  %266 = extractvalue { i33, i1 } %265, 1
  %267 = extractvalue { i33, i1 } %265, 0
  %268 = icmp slt i33 %267, 0
  %269 = or i1 %266, %268
  br i1 %269, label %270, label %271, !prof !5

270:                                              ; preds = %261
  call void @llvm.trap() #8
  unreachable

271:                                              ; preds = %261
  %272 = trunc i33 %267 to i32
  store i32 %272, i32* %262, align 4
  br label %273

273:                                              ; preds = %271, %256, %246
  %274 = ptrtoint %"class.WTF::StringImpl"* %254 to i64
  %275 = bitcast %"class.WTF::String"* %252 to i64*
  %276 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %252, i64 0, i32 0, i32 0
  %277 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %276, align 8
  store i64 %274, i64* %275, align 8
  %278 = icmp eq %"class.WTF::StringImpl"* %277, null
  br i1 %278, label %292, label %279

279:                                              ; preds = %273
  %280 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %277, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = load atomic i32, i32* %280 monotonic, align 4
  %282 = and i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %277, i64 0, i32 0
  %285 = load i32, i32* %284, align 4
  br i1 %283, label %286, label %288

286:                                              ; preds = %279
  %287 = add i32 %285, -1
  store i32 %287, i32* %284, align 4
  br label %288

288:                                              ; preds = %286, %279
  %289 = phi i32 [ %287, %286 ], [ %285, %279 ]
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %292

291:                                              ; preds = %288
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %277) #8
  br label %292

292:                                              ; preds = %273, %288, %291
  %293 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 8, i32 0, i32 0
  %294 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %293, align 8
  %295 = icmp eq %"class.WTF::StringImpl"* %294, null
  %296 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 8
  %297 = select i1 %295, %"class.WTF::String"* %13, %"class.WTF::String"* %296
  %298 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 5
  %299 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %297, i64 0, i32 0, i32 0
  %300 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %299, align 8
  %301 = icmp eq %"class.WTF::StringImpl"* %300, null
  br i1 %301, label %319, label %302

302:                                              ; preds = %292
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load atomic i32, i32* %303 monotonic, align 4
  %305 = and i32 %304, 2
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %319

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %300, i64 0, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = zext i32 %309 to i33
  %311 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %310, i33 1) #8
  %312 = extractvalue { i33, i1 } %311, 1
  %313 = extractvalue { i33, i1 } %311, 0
  %314 = icmp slt i33 %313, 0
  %315 = or i1 %312, %314
  br i1 %315, label %316, label %317, !prof !5

316:                                              ; preds = %307
  call void @llvm.trap() #8
  unreachable

317:                                              ; preds = %307
  %318 = trunc i33 %313 to i32
  store i32 %318, i32* %308, align 4
  br label %319

319:                                              ; preds = %317, %302, %292
  %320 = ptrtoint %"class.WTF::StringImpl"* %300 to i64
  %321 = bitcast %"class.WTF::String"* %298 to i64*
  %322 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %298, i64 0, i32 0, i32 0
  %323 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %322, align 8
  store i64 %320, i64* %321, align 8
  %324 = icmp eq %"class.WTF::StringImpl"* %323, null
  br i1 %324, label %338, label %325

325:                                              ; preds = %319
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %327 = load atomic i32, i32* %326 monotonic, align 4
  %328 = and i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %323, i64 0, i32 0
  %331 = load i32, i32* %330, align 4
  br i1 %329, label %332, label %334

332:                                              ; preds = %325
  %333 = add i32 %331, -1
  store i32 %333, i32* %330, align 4
  br label %334

334:                                              ; preds = %332, %325
  %335 = phi i32 [ %333, %332 ], [ %331, %325 ]
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %338

337:                                              ; preds = %334
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %323) #8
  br label %338

338:                                              ; preds = %319, %334, %337
  %339 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 11, i32 0, i32 0
  %340 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %339, align 8
  %341 = icmp eq %"class.WTF::StringImpl"* %340, null
  %342 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 11
  %343 = select i1 %341, %"class.WTF::String"* %13, %"class.WTF::String"* %342
  %344 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 6
  %345 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %343, i64 0, i32 0, i32 0
  %346 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %345, align 8
  %347 = icmp eq %"class.WTF::StringImpl"* %346, null
  br i1 %347, label %365, label %348

348:                                              ; preds = %338
  %349 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %346, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %350 = load atomic i32, i32* %349 monotonic, align 4
  %351 = and i32 %350, 2
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %365

353:                                              ; preds = %348
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %346, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = zext i32 %355 to i33
  %357 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %356, i33 1) #8
  %358 = extractvalue { i33, i1 } %357, 1
  %359 = extractvalue { i33, i1 } %357, 0
  %360 = icmp slt i33 %359, 0
  %361 = or i1 %358, %360
  br i1 %361, label %362, label %363, !prof !5

362:                                              ; preds = %353
  call void @llvm.trap() #8
  unreachable

363:                                              ; preds = %353
  %364 = trunc i33 %359 to i32
  store i32 %364, i32* %354, align 4
  br label %365

365:                                              ; preds = %363, %348, %338
  %366 = ptrtoint %"class.WTF::StringImpl"* %346 to i64
  %367 = bitcast %"class.WTF::String"* %344 to i64*
  %368 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %344, i64 0, i32 0, i32 0
  %369 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %368, align 8
  store i64 %366, i64* %367, align 8
  %370 = icmp eq %"class.WTF::StringImpl"* %369, null
  br i1 %370, label %384, label %371

371:                                              ; preds = %365
  %372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %369, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %373 = load atomic i32, i32* %372 monotonic, align 4
  %374 = and i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %369, i64 0, i32 0
  %377 = load i32, i32* %376, align 4
  br i1 %375, label %378, label %380

378:                                              ; preds = %371
  %379 = add i32 %377, -1
  store i32 %379, i32* %376, align 4
  br label %380

380:                                              ; preds = %378, %371
  %381 = phi i32 [ %379, %378 ], [ %377, %371 ]
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %384

383:                                              ; preds = %380
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %369) #8
  br label %384

384:                                              ; preds = %365, %380, %383
  %385 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 6, i32 0, i32 0
  %386 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %385, align 8
  %387 = icmp eq %"class.WTF::StringImpl"* %386, null
  %388 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 6
  %389 = select i1 %387, %"class.WTF::String"* %13, %"class.WTF::String"* %388
  %390 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 7
  %391 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %389, i64 0, i32 0, i32 0
  %392 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %391, align 8
  %393 = icmp eq %"class.WTF::StringImpl"* %392, null
  br i1 %393, label %411, label %394

394:                                              ; preds = %384
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %396 = load atomic i32, i32* %395 monotonic, align 4
  %397 = and i32 %396, 2
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %411

399:                                              ; preds = %394
  %400 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 0
  %401 = load i32, i32* %400, align 4
  %402 = zext i32 %401 to i33
  %403 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %402, i33 1) #8
  %404 = extractvalue { i33, i1 } %403, 1
  %405 = extractvalue { i33, i1 } %403, 0
  %406 = icmp slt i33 %405, 0
  %407 = or i1 %404, %406
  br i1 %407, label %408, label %409, !prof !5

408:                                              ; preds = %399
  call void @llvm.trap() #8
  unreachable

409:                                              ; preds = %399
  %410 = trunc i33 %405 to i32
  store i32 %410, i32* %400, align 4
  br label %411

411:                                              ; preds = %409, %394, %384
  %412 = ptrtoint %"class.WTF::StringImpl"* %392 to i64
  %413 = bitcast %"class.WTF::String"* %390 to i64*
  %414 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %390, i64 0, i32 0, i32 0
  %415 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %414, align 8
  store i64 %412, i64* %413, align 8
  %416 = icmp eq %"class.WTF::StringImpl"* %415, null
  br i1 %416, label %430, label %417

417:                                              ; preds = %411
  %418 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %415, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %419 = load atomic i32, i32* %418 monotonic, align 4
  %420 = and i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %415, i64 0, i32 0
  %423 = load i32, i32* %422, align 4
  br i1 %421, label %424, label %426

424:                                              ; preds = %417
  %425 = add i32 %423, -1
  store i32 %425, i32* %422, align 4
  br label %426

426:                                              ; preds = %424, %417
  %427 = phi i32 [ %425, %424 ], [ %423, %417 ]
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %429, label %430

429:                                              ; preds = %426
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %415) #8
  br label %430

430:                                              ; preds = %411, %426, %429
  %431 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 9, i32 0, i32 0
  %432 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %431, align 8
  %433 = icmp eq %"class.WTF::StringImpl"* %432, null
  %434 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 9
  %435 = select i1 %433, %"class.WTF::String"* %13, %"class.WTF::String"* %434
  %436 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 8
  %437 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %435, i64 0, i32 0, i32 0
  %438 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %437, align 8
  %439 = icmp eq %"class.WTF::StringImpl"* %438, null
  br i1 %439, label %457, label %440

440:                                              ; preds = %430
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %438, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %442 = load atomic i32, i32* %441 monotonic, align 4
  %443 = and i32 %442, 2
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %457

445:                                              ; preds = %440
  %446 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %438, i64 0, i32 0
  %447 = load i32, i32* %446, align 4
  %448 = zext i32 %447 to i33
  %449 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %448, i33 1) #8
  %450 = extractvalue { i33, i1 } %449, 1
  %451 = extractvalue { i33, i1 } %449, 0
  %452 = icmp slt i33 %451, 0
  %453 = or i1 %450, %452
  br i1 %453, label %454, label %455, !prof !5

454:                                              ; preds = %445
  call void @llvm.trap() #8
  unreachable

455:                                              ; preds = %445
  %456 = trunc i33 %451 to i32
  store i32 %456, i32* %446, align 4
  br label %457

457:                                              ; preds = %455, %440, %430
  %458 = ptrtoint %"class.WTF::StringImpl"* %438 to i64
  %459 = bitcast %"class.WTF::String"* %436 to i64*
  %460 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %436, i64 0, i32 0, i32 0
  %461 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %460, align 8
  store i64 %458, i64* %459, align 8
  %462 = icmp eq %"class.WTF::StringImpl"* %461, null
  br i1 %462, label %476, label %463

463:                                              ; preds = %457
  %464 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %461, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %465 = load atomic i32, i32* %464 monotonic, align 4
  %466 = and i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %461, i64 0, i32 0
  %469 = load i32, i32* %468, align 4
  br i1 %467, label %470, label %472

470:                                              ; preds = %463
  %471 = add i32 %469, -1
  store i32 %471, i32* %468, align 4
  br label %472

472:                                              ; preds = %470, %463
  %473 = phi i32 [ %471, %470 ], [ %469, %463 ]
  %474 = icmp eq i32 %473, 0
  br i1 %474, label %475, label %476

475:                                              ; preds = %472
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %461) #8
  br label %476

476:                                              ; preds = %457, %472, %475
  %477 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 7, i32 0, i32 0
  %478 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %477, align 8
  %479 = icmp eq %"class.WTF::StringImpl"* %478, null
  %480 = getelementptr inbounds %"class.blink::AddressInit", %"class.blink::AddressInit"* %1, i64 0, i32 7
  %481 = select i1 %479, %"class.WTF::String"* %13, %"class.WTF::String"* %480
  %482 = getelementptr inbounds %"class.payments::mojom::blink::PaymentAddress", %"class.payments::mojom::blink::PaymentAddress"* %114, i64 0, i32 9
  %483 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %481, i64 0, i32 0, i32 0
  %484 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %483, align 8
  %485 = icmp eq %"class.WTF::StringImpl"* %484, null
  br i1 %485, label %503, label %486

486:                                              ; preds = %476
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %488 = load atomic i32, i32* %487 monotonic, align 4
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  br i1 %490, label %491, label %503

491:                                              ; preds = %486
  %492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %484, i64 0, i32 0
  %493 = load i32, i32* %492, align 4
  %494 = zext i32 %493 to i33
  %495 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %494, i33 1) #8
  %496 = extractvalue { i33, i1 } %495, 1
  %497 = extractvalue { i33, i1 } %495, 0
  %498 = icmp slt i33 %497, 0
  %499 = or i1 %496, %498
  br i1 %499, label %500, label %501, !prof !5

500:                                              ; preds = %491
  call void @llvm.trap() #8
  unreachable

501:                                              ; preds = %491
  %502 = trunc i33 %497 to i32
  store i32 %502, i32* %492, align 4
  br label %503

503:                                              ; preds = %501, %486, %476
  %504 = ptrtoint %"class.WTF::StringImpl"* %484 to i64
  %505 = bitcast %"class.WTF::String"* %482 to i64*
  %506 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %482, i64 0, i32 0, i32 0
  %507 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %506, align 8
  store i64 %504, i64* %505, align 8
  %508 = icmp eq %"class.WTF::StringImpl"* %507, null
  br i1 %508, label %522, label %509

509:                                              ; preds = %503
  %510 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %507, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %511 = load atomic i32, i32* %510 monotonic, align 4
  %512 = and i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %507, i64 0, i32 0
  %515 = load i32, i32* %514, align 4
  br i1 %513, label %516, label %518

516:                                              ; preds = %509
  %517 = add i32 %515, -1
  store i32 %517, i32* %514, align 4
  br label %518

518:                                              ; preds = %516, %509
  %519 = phi i32 [ %517, %516 ], [ %515, %509 ]
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %521, label %522

521:                                              ; preds = %518
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %507) #8
  br label %522

522:                                              ; preds = %503, %518, %521
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector"* @_ZN3WTF6VectorINS_6StringELj0ENS_18PartitionAllocatorEEaSERKS3_(%"class.WTF::Vector"*, %"class.WTF::Vector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector"* %1, %0
  br i1 %3, label %219, label %4, !prof !5

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %39

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::String"*, %"class.WTF::String"** %11, align 8
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %13
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 %15
  br label %17

17:                                               ; preds = %35, %10
  %18 = phi %"class.WTF::String"* [ %36, %35 ], [ %16, %10 ]
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #8
  br label %35

35:                                               ; preds = %34, %31, %17
  %36 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %37 = icmp eq %"class.WTF::String"* %36, %14
  br i1 %37, label %38, label %17

38:                                               ; preds = %35
  store i32 %8, i32* %5, align 4
  br label %116

39:                                               ; preds = %4
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %8, %41
  br i1 %42, label %43, label %114

43:                                               ; preds = %39
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %80, label %45

45:                                               ; preds = %43
  %46 = icmp eq i32 %6, 0
  br i1 %46, label %74, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = zext i32 %6 to i64
  %51 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %50
  br label %52

52:                                               ; preds = %70, %47
  %53 = phi %"class.WTF::String"* [ %71, %70 ], [ %49, %47 ]
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #8
  br label %70

70:                                               ; preds = %69, %66, %52
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %53, i64 1
  %72 = icmp eq %"class.WTF::String"* %71, %51
  br i1 %72, label %73, label %52

73:                                               ; preds = %70
  store i32 0, i32* %5, align 4
  br label %74

74:                                               ; preds = %73, %45
  %75 = bitcast %"class.WTF::Vector"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store i32 0, i32* %40, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #8
  %78 = load i32, i32* %7, align 4
  %79 = load i32, i32* %40, align 8
  br label %80

80:                                               ; preds = %43, %74
  %81 = phi i32 [ 0, %43 ], [ %79, %74 ]
  %82 = phi i32 [ %8, %43 ], [ %78, %74 ]
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %84, label %114, !prof !7

84:                                               ; preds = %80
  %85 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %87 = icmp eq %"class.WTF::String"* %86, null
  %88 = zext i32 %82 to i64
  %89 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %88) #8
  %90 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %89, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #8
  br i1 %87, label %91, label %96

91:                                               ; preds = %84
  %92 = ptrtoint i8* %90 to i64
  %93 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %92, i64* %93 monotonic, align 8
  %94 = lshr i64 %89, 3
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %40, align 8
  br label %114

96:                                               ; preds = %84
  %97 = lshr i64 %89, 3
  %98 = ptrtoint i8* %90 to i64
  %99 = load %"class.WTF::String"*, %"class.WTF::String"** %85, align 8
  %100 = icmp ne i8* %90, null
  %101 = icmp ne %"class.WTF::String"* %99, null
  %102 = and i1 %100, %101
  %103 = bitcast %"class.WTF::String"* %99 to i8*
  br i1 %102, label %104, label %110, !prof !7

104:                                              ; preds = %96
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %103, i64 %107, i1 false) #8
  %108 = bitcast %"class.WTF::Vector"* %0 to i8**
  %109 = load i8*, i8** %108, align 8
  br label %110

110:                                              ; preds = %104, %96
  %111 = phi i8* [ %109, %104 ], [ %103, %96 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %111) #8
  %112 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %98, i64* %112 monotonic, align 8
  %113 = trunc i64 %97 to i32
  store i32 %113, i32* %40, align 8
  br label %114

114:                                              ; preds = %39, %80, %91, %110
  %115 = load i32, i32* %5, align 4
  br label %116

116:                                              ; preds = %114, %38
  %117 = phi i32 [ %115, %114 ], [ %8, %38 ]
  %118 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %120 = zext i32 %117 to i64
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %119, i64 %120
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  %124 = icmp eq i32 %117, 0
  br i1 %124, label %175, label %125

125:                                              ; preds = %116, %167
  %126 = phi %"class.WTF::String"* [ %169, %167 ], [ %123, %116 ]
  %127 = phi %"class.WTF::String"* [ %168, %167 ], [ %119, %116 ]
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %128, align 8
  %130 = icmp eq %"class.WTF::StringImpl"* %129, null
  br i1 %130, label %148, label %131

131:                                              ; preds = %125
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %133 = load atomic i32, i32* %132 monotonic, align 4
  %134 = and i32 %133, 2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %129, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #8
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !5

145:                                              ; preds = %136
  tail call void @llvm.trap() #8
  unreachable

146:                                              ; preds = %136
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %137, align 4
  br label %148

148:                                              ; preds = %146, %131, %125
  %149 = ptrtoint %"class.WTF::StringImpl"* %129 to i64
  %150 = bitcast %"class.WTF::String"* %126 to i64*
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 0, i32 0, i32 0
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %151, align 8
  store i64 %149, i64* %150, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #8
  br label %167

167:                                              ; preds = %166, %163, %148
  %168 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 1
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %126, i64 1
  %170 = icmp eq %"class.WTF::String"* %168, %121
  br i1 %170, label %171, label %125

171:                                              ; preds = %167
  %172 = load %"class.WTF::String"*, %"class.WTF::String"** %118, align 8
  %173 = load i32, i32* %5, align 4
  %174 = load %"class.WTF::String"*, %"class.WTF::String"** %122, align 8
  br label %175

175:                                              ; preds = %171, %116
  %176 = phi %"class.WTF::String"* [ %174, %171 ], [ %123, %116 ]
  %177 = phi i32 [ %173, %171 ], [ 0, %116 ]
  %178 = phi %"class.WTF::String"* [ %172, %171 ], [ %119, %116 ]
  %179 = zext i32 %177 to i64
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %181
  %183 = icmp eq i32 %177, %180
  br i1 %183, label %217, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %176, i64 %179
  %186 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %178, i64 %179
  br label %187

187:                                              ; preds = %184, %211
  %188 = phi %"class.WTF::String"* [ %212, %211 ], [ %185, %184 ]
  %189 = phi %"class.WTF::String"* [ %213, %211 ], [ %186, %184 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %191, %"class.WTF::StringImpl"** %192, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %193, label %211, label %194

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = and i32 %196, 2
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i33
  %203 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %202, i33 1) #8
  %204 = extractvalue { i33, i1 } %203, 1
  %205 = extractvalue { i33, i1 } %203, 0
  %206 = icmp slt i33 %205, 0
  %207 = or i1 %204, %206
  br i1 %207, label %208, label %209, !prof !5

208:                                              ; preds = %199
  tail call void @llvm.trap() #8
  unreachable

209:                                              ; preds = %199
  %210 = trunc i33 %205 to i32
  store i32 %210, i32* %200, align 4
  br label %211

211:                                              ; preds = %209, %194, %187
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %188, i64 1
  %213 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %214 = icmp eq %"class.WTF::String"* %213, %182
  br i1 %214, label %215, label %187

215:                                              ; preds = %211
  %216 = load i32, i32* %7, align 4
  br label %217

217:                                              ; preds = %215, %175
  %218 = phi i32 [ %216, %215 ], [ %177, %175 ]
  store i32 %218, i32* %5, align 4
  br label %219

219:                                              ; preds = %2, %217
  ret %"class.WTF::Vector"* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN8payments5mojom5blink14PaymentAddressC1Ev(%"class.payments::mojom::blink::PaymentAddress"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8payments5mojom5blink14PaymentAddress3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZN8payments5mojom5blink14PaymentAddress3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{i8 0, i8 2}
!7 = !{!"branch_weights", i32 2000, i32 1}
