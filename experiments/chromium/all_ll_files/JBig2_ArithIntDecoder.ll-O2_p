; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_ArithIntDecoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::ArithIntDecodeData" = type { i32, i32 }
%class.CJBig2_ArithIntDecoder = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.JBig2ArithCtx*, %class.JBig2ArithCtx*, %"class.std::__1::__compressed_pair" }
%class.JBig2ArithCtx = type { i8, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.JBig2ArithCtx* }
%class.CJBig2_ArithIaidDecoder = type <{ %"class.std::__1::vector", i8, [7 x i8] }>
%class.CJBig2_ArithDecoder = type { i8, i8, i8, i32, i32, i32, %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { %class.CJBig2_BitStream* }
%class.CJBig2_BitStream = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorI13JBig2ArithCtxNS_9allocatorIS1_EEE8__appendEm = comdat any

@_ZN12_GLOBAL__N_120g_ArithIntDecodeDataE = internal unnamed_addr constant [6 x %"struct.(anonymous namespace)::ArithIntDecodeData"] [%"struct.(anonymous namespace)::ArithIntDecodeData" { i32 2, i32 0 }, %"struct.(anonymous namespace)::ArithIntDecodeData" { i32 4, i32 4 }, %"struct.(anonymous namespace)::ArithIntDecodeData" { i32 6, i32 20 }, %"struct.(anonymous namespace)::ArithIntDecodeData" { i32 8, i32 84 }, %"struct.(anonymous namespace)::ArithIntDecodeData" { i32 12, i32 340 }, %"struct.(anonymous namespace)::ArithIntDecodeData" { i32 32, i32 4436 }], align 16

@_ZN22CJBig2_ArithIntDecoderC1Ev = hidden unnamed_addr alias void (%class.CJBig2_ArithIntDecoder*), void (%class.CJBig2_ArithIntDecoder*)* @_ZN22CJBig2_ArithIntDecoderC2Ev
@_ZN22CJBig2_ArithIntDecoderD1Ev = hidden unnamed_addr alias void (%class.CJBig2_ArithIntDecoder*), void (%class.CJBig2_ArithIntDecoder*)* @_ZN22CJBig2_ArithIntDecoderD2Ev
@_ZN23CJBig2_ArithIaidDecoderC1Eh = hidden unnamed_addr alias void (%class.CJBig2_ArithIaidDecoder*, i8), void (%class.CJBig2_ArithIaidDecoder*, i8)* @_ZN23CJBig2_ArithIaidDecoderC2Eh
@_ZN23CJBig2_ArithIaidDecoderD1Ev = hidden unnamed_addr alias void (%class.CJBig2_ArithIaidDecoder*), void (%class.CJBig2_ArithIaidDecoder*)* @_ZN23CJBig2_ArithIaidDecoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CJBig2_ArithIntDecoderC2Ev(%class.CJBig2_ArithIntDecoder*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CJBig2_ArithIntDecoder* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #8
  %3 = getelementptr inbounds %class.CJBig2_ArithIntDecoder, %class.CJBig2_ArithIntDecoder* %0, i64 0, i32 0
  tail call void @_ZNSt3__16vectorI13JBig2ArithCtxNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %3, i64 512) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CJBig2_ArithIntDecoderD2Ev(%class.CJBig2_ArithIntDecoder* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_ArithIntDecoder, %class.CJBig2_ArithIntDecoder* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %2, align 8
  %4 = icmp eq %class.JBig2ArithCtx* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %class.JBig2ArithCtx* %3 to i64
  %7 = getelementptr inbounds %class.CJBig2_ArithIntDecoder, %class.CJBig2_ArithIntDecoder* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.JBig2ArithCtx** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN22CJBig2_ArithIntDecoder6DecodeEP19CJBig2_ArithDecoderPi(%class.CJBig2_ArithIntDecoder* nocapture readonly, %class.CJBig2_ArithDecoder*, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_ArithIntDecoder, %class.CJBig2_ArithIntDecoder* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %6 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %5, i64 1
  %7 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %6) #8
  %8 = or i32 %7, 2
  %9 = sext i32 %8 to i64
  %10 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %11 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %10, i64 %9
  %12 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %11) #8
  %13 = shl i32 %8, 1
  %14 = or i32 %12, %13
  %15 = icmp eq i32 %12, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %3
  %17 = sext i32 %14 to i64
  %18 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %19 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %18, i64 %17
  %20 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %19) #8
  %21 = shl i32 %14, 1
  %22 = or i32 %20, %21
  %23 = icmp eq i32 %20, 0
  br i1 %23, label %24, label %65

24:                                               ; preds = %81, %3, %16, %65, %73
  %25 = phi i32 [ %14, %3 ], [ %22, %16 ], [ %71, %65 ], [ %79, %73 ], [ %87, %81 ]
  %26 = phi i64 [ 0, %3 ], [ 1, %16 ], [ 2, %65 ], [ 3, %73 ], [ %89, %81 ]
  %27 = getelementptr inbounds [6 x %"struct.(anonymous namespace)::ArithIntDecodeData"], [6 x %"struct.(anonymous namespace)::ArithIntDecodeData"]* @_ZN12_GLOBAL__N_120g_ArithIntDecodeDataE, i64 0, i64 %26, i32 0
  br label %34

28:                                               ; preds = %34
  %29 = getelementptr inbounds [6 x %"struct.(anonymous namespace)::ArithIntDecodeData"], [6 x %"struct.(anonymous namespace)::ArithIntDecodeData"]* @_ZN12_GLOBAL__N_120g_ArithIntDecodeDataE, i64 0, i64 %26, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %30, i32 %49) #8
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  br i1 %32, label %53, label %54

34:                                               ; preds = %24, %34
  %35 = phi i32 [ %50, %34 ], [ 0, %24 ]
  %36 = phi i32 [ %49, %34 ], [ 0, %24 ]
  %37 = phi i32 [ %47, %34 ], [ %25, %24 ]
  %38 = sext i32 %37 to i64
  %39 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %40 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %39, i64 %38
  %41 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %40) #8
  %42 = shl i32 %37, 1
  %43 = or i32 %41, %42
  %44 = icmp sgt i32 %43, 255
  %45 = and i32 %43, 255
  %46 = or i32 %45, 256
  %47 = select i1 %44, i32 %46, i32 %43
  %48 = shl i32 %36, 1
  %49 = or i32 %41, %48
  %50 = add nuw nsw i32 %35, 1
  %51 = load i32, i32* %27, align 8
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %34, label %28

53:                                               ; preds = %28
  store i32 0, i32* %2, align 4
  br label %63

54:                                               ; preds = %28
  %55 = icmp eq i32 %7, 1
  %56 = icmp sgt i32 %33, 0
  %57 = and i1 %55, %56
  %58 = sub nsw i32 0, %33
  %59 = select i1 %57, i32 %58, i32 %33
  store i32 %59, i32* %2, align 4
  %60 = icmp ne i32 %7, 1
  %61 = icmp ne i32 %33, 0
  %62 = or i1 %60, %61
  br label %63

63:                                               ; preds = %54, %53
  %64 = phi i1 [ %62, %54 ], [ false, %53 ]
  ret i1 %64

65:                                               ; preds = %16
  %66 = sext i32 %22 to i64
  %67 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %68 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %67, i64 %66
  %69 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %68) #8
  %70 = shl i32 %22, 1
  %71 = or i32 %69, %70
  %72 = icmp eq i32 %69, 0
  br i1 %72, label %24, label %73

73:                                               ; preds = %65
  %74 = sext i32 %71 to i64
  %75 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %76 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %75, i64 %74
  %77 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %76) #8
  %78 = shl i32 %71, 1
  %79 = or i32 %77, %78
  %80 = icmp eq i32 %77, 0
  br i1 %80, label %24, label %81

81:                                               ; preds = %73
  %82 = sext i32 %79 to i64
  %83 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %4, align 8
  %84 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %83, i64 %82
  %85 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %84) #8
  %86 = shl i32 %79, 1
  %87 = or i32 %85, %86
  %88 = icmp eq i32 %85, 0
  %89 = select i1 %88, i64 4, i64 5
  br label %24
}

declare i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder*, %class.JBig2ArithCtx*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CJBig2_ArithIaidDecoderC2Eh(%class.CJBig2_ArithIaidDecoder*, i8 zeroext) unnamed_addr #0 align 2 {
  %3 = bitcast %class.CJBig2_ArithIaidDecoder* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8
  %4 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 1
  store i8 %1, i8* %4, align 8
  %5 = zext i8 %1 to i64
  %6 = shl i64 1, %5
  %7 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 0
  tail call void @_ZNSt3__16vectorI13JBig2ArithCtxNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"* %7, i64 %6) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CJBig2_ArithIaidDecoderD2Ev(%class.CJBig2_ArithIaidDecoder* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %2, align 8
  %4 = icmp eq %class.JBig2ArithCtx* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %class.JBig2ArithCtx* %3 to i64
  %7 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.JBig2ArithCtx** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23CJBig2_ArithIaidDecoder6DecodeEP19CJBig2_ArithDecoderPj(%class.CJBig2_ArithIaidDecoder* nocapture readonly, %class.CJBig2_ArithDecoder*, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.CJBig2_ArithIaidDecoder, %class.CJBig2_ArithIaidDecoder* %0, i64 0, i32 0, i32 0, i32 0
  br label %16

9:                                                ; preds = %16
  %10 = zext i8 %26 to i32
  br label %11

11:                                               ; preds = %9, %3
  %12 = phi i32 [ 1, %3 ], [ %24, %9 ]
  %13 = phi i32 [ 0, %3 ], [ %10, %9 ]
  %14 = shl i32 1, %13
  %15 = sub nsw i32 %12, %14
  store i32 %15, i32* %2, align 4
  ret void

16:                                               ; preds = %7, %16
  %17 = phi i32 [ 1, %7 ], [ %24, %16 ]
  %18 = phi i8 [ 0, %7 ], [ %25, %16 ]
  %19 = sext i32 %17 to i64
  %20 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %8, align 8
  %21 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %20, i64 %19
  %22 = tail call i32 @_ZN19CJBig2_ArithDecoder6DecodeEP13JBig2ArithCtx(%class.CJBig2_ArithDecoder* %1, %class.JBig2ArithCtx* %21) #8
  %23 = shl i32 %17, 1
  %24 = or i32 %22, %23
  %25 = add nuw i8 %18, 1
  %26 = load i8, i8* %4, align 8
  %27 = icmp ult i8 %25, %26
  br i1 %27, label %16, label %9
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13JBig2ArithCtxNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %class.JBig2ArithCtx** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %class.JBig2ArithCtx** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %class.JBig2ArithCtx*
  %14 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %class.JBig2ArithCtx* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %class.JBig2ArithCtx* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN13JBig2ArithCtxC1Ev(%class.JBig2ArithCtx* %19) #8
  %20 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %19, i64 1
  %21 = icmp eq %class.JBig2ArithCtx* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %82

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = ashr exact i64 %27, 3
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 2305843009213693951
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #10
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = ashr exact i64 %34, 3
  %36 = icmp ult i64 %35, 1152921504606846975
  br i1 %36, label %37, label %45

37:                                               ; preds = %33
  %38 = ashr exact i64 %34, 2
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = icmp ugt i64 %40, 2305843009213693951
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #10
  unreachable

45:                                               ; preds = %33, %42
  %46 = phi i64 [ %40, %42 ], [ 2305843009213693951, %33 ]
  %47 = shl i64 %46, 3
  %48 = tail call i8* @_Znwm(i64 %47) #9
  %49 = bitcast i8* %48 to %class.JBig2ArithCtx*
  br label %50

50:                                               ; preds = %37, %45
  %51 = phi i64 [ %46, %45 ], [ 0, %37 ]
  %52 = phi %class.JBig2ArithCtx* [ %49, %45 ], [ null, %37 ]
  %53 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %52, i64 %28
  %54 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %52, i64 %51
  %55 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %53, i64 %1
  br label %56

56:                                               ; preds = %50, %56
  %57 = phi %class.JBig2ArithCtx* [ %58, %56 ], [ %53, %50 ]
  tail call void @_ZN13JBig2ArithCtxC1Ev(%class.JBig2ArithCtx* %57) #8
  %58 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %57, i64 1
  %59 = icmp eq %class.JBig2ArithCtx* %55, %58
  br i1 %59, label %60, label %56

60:                                               ; preds = %56
  %61 = ptrtoint %class.JBig2ArithCtx* %54 to i64
  %62 = ptrtoint %class.JBig2ArithCtx* %55 to i64
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %64 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %63, align 8
  %65 = load i64, i64* %7, align 8
  %66 = ptrtoint %class.JBig2ArithCtx* %64 to i64
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 3
  %69 = sub nsw i64 0, %68
  %70 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %53, i64 %69
  %71 = ptrtoint %class.JBig2ArithCtx* %70 to i64
  %72 = icmp sgt i64 %67, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %60
  %74 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %70, i64 0, i32 0
  %75 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %64, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %67, i1 false) #8
  %76 = load %class.JBig2ArithCtx*, %class.JBig2ArithCtx** %63, align 8
  br label %77

77:                                               ; preds = %60, %73
  %78 = phi %class.JBig2ArithCtx* [ %64, %60 ], [ %76, %73 ]
  store i64 %71, i64* %25, align 8
  store i64 %62, i64* %7, align 8
  store i64 %61, i64* %4, align 8
  %79 = icmp eq %class.JBig2ArithCtx* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %class.JBig2ArithCtx, %class.JBig2ArithCtx* %78, i64 0, i32 0
  tail call void @_ZdlPv(i8* %81) #9
  br label %82

82:                                               ; preds = %80, %77, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN13JBig2ArithCtxC1Ev(%class.JBig2ArithCtx*) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
