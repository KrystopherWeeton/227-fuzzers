; ModuleID = '../../third_party/pdfium/core/fpdfapi/font/cfx_stockfontarray.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/font/cfx_stockfontarray.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_StockFontArray = type { [14 x %"class.fxcrt::RetainPtr"] }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CPDF_Font* }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.50", %"class.fxcrt::RetainPtr.58", %"class.fxcrt::RetainPtr.97", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.103", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.0", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr.6", %"class.std::__1::unique_ptr.11", %"class.fxcrt::RetainPtr.15", %"class.fxcrt::RetainPtr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::vector", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr.6" = type { %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.15" = type { %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.19", %"class.fxcrt::RetainPtr.23" }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.23" = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.31" = type { %"class.std::__1::unique_ptr.32" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.49", i64 }
%"class.fxcrt::UnownedPtr.49" = type { i8* }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { %"class.std::__1::unique_ptr.52"*, %"class.std::__1::unique_ptr.52"*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::unique_ptr.52" = type opaque
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::unique_ptr.52"* }
%"class.fxcrt::RetainPtr.58" = type { %"class.std::__1::unique_ptr.59" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.68", %"class.fxcrt::RetainPtr.89" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.43", %"class.fxcrt::UnownedPtr.49" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.72" }
%"class.fxcrt::RetainPtr.72" = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.111" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.114", %"class.std::__1::__compressed_pair.122", %"class.std::__1::__compressed_pair.127", %"class.std::__1::__compressed_pair.129", [4 x i8] }>
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.78" }
%"class.std::__1::__tree.78" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.fxcrt::RetainPtr.89" = type { %"class.std::__1::unique_ptr.90" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type opaque
%"class.fxcrt::RetainPtr.97" = type { %"class.std::__1::unique_ptr.98" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.62" }
%"class.fxcrt::RetainPtr.62" = type { %"class.std::__1::unique_ptr.63" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }

@_ZN18CFX_StockFontArrayC1Ev = hidden unnamed_addr alias void (%class.CFX_StockFontArray*), void (%class.CFX_StockFontArray*)* @_ZN18CFX_StockFontArrayC2Ev
@_ZN18CFX_StockFontArrayD1Ev = hidden unnamed_addr alias void (%class.CFX_StockFontArray*), void (%class.CFX_StockFontArray*)* @_ZN18CFX_StockFontArrayD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN18CFX_StockFontArrayC2Ev(%class.CFX_StockFontArray*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFX_StockFontArray* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 112, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_StockFontArrayD2Ev(%class.CFX_StockFontArray*) unnamed_addr #1 align 2 {
  br label %5

2:                                                ; preds = %47
  %3 = getelementptr inbounds %class.CFX_StockFontArray, %class.CFX_StockFontArray* %0, i64 0, i32 0, i64 0
  %4 = getelementptr inbounds %class.CFX_StockFontArray, %class.CFX_StockFontArray* %0, i64 0, i32 0, i64 14
  br label %50

5:                                                ; preds = %47, %1
  %6 = phi i64 [ 0, %1 ], [ %48, %47 ]
  %7 = getelementptr inbounds %class.CFX_StockFontArray, %class.CFX_StockFontArray* %0, i64 0, i32 0, i64 %6, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_Font*, %class.CPDF_Font** %7, align 8
  %9 = icmp eq %class.CPDF_Font* %8, null
  br i1 %9, label %47, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %8, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CPDF_Dictionary*, %class.CPDF_Dictionary** %11, align 8
  %13 = icmp eq %class.CPDF_Dictionary* %12, null
  br i1 %13, label %34, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.CPDF_Dictionary, %class.CPDF_Dictionary* %12, i64 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* %15, align 8
  %18 = load %class.CPDF_Font*, %class.CPDF_Font** %7, align 8
  %19 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %18, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %20 = load %class.CPDF_Dictionary*, %class.CPDF_Dictionary** %19, align 8
  %21 = bitcast %class.CPDF_Dictionary* %20 to void (%"class.fxcrt::Retainable"*)***
  %22 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %18, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store %class.CPDF_Dictionary* null, %class.CPDF_Dictionary** %22, align 8
  %23 = icmp eq %class.CPDF_Dictionary* %20, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %14
  %25 = getelementptr inbounds %class.CPDF_Dictionary, %class.CPDF_Dictionary* %20, i64 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, -1
  store i64 %27, i64* %25, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %36

29:                                               ; preds = %24
  %30 = getelementptr inbounds %class.CPDF_Dictionary, %class.CPDF_Dictionary* %20, i64 0, i32 0, i32 0
  %31 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %21, align 8
  %32 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %31, i64 1
  %33 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %32, align 8
  tail call void %33(%"class.fxcrt::Retainable"* nonnull %30) #4
  br label %36

34:                                               ; preds = %10
  %35 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %8, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store %class.CPDF_Dictionary* null, %class.CPDF_Dictionary** %35, align 8
  br label %47

36:                                               ; preds = %14, %24, %29
  %37 = getelementptr inbounds %class.CPDF_Dictionary, %class.CPDF_Dictionary* %12, i64 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = add nsw i64 %38, -1
  store i64 %39, i64* %37, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = getelementptr inbounds %class.CPDF_Dictionary, %class.CPDF_Dictionary* %12, i64 0, i32 0, i32 0
  %43 = bitcast %class.CPDF_Dictionary* %12 to void (%"class.fxcrt::Retainable"*)***
  %44 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %44, i64 1
  %46 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %45, align 8
  tail call void %46(%"class.fxcrt::Retainable"* nonnull %42) #4
  br label %47

47:                                               ; preds = %34, %5, %41, %36
  %48 = add nuw nsw i64 %6, 1
  %49 = icmp eq i64 %48, 14
  br i1 %49, label %2, label %5

50:                                               ; preds = %67, %2
  %51 = phi %"class.fxcrt::RetainPtr"* [ %4, %2 ], [ %52, %67 ]
  %52 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %51, i64 -1
  %53 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load %class.CPDF_Font*, %class.CPDF_Font** %53, align 8
  store %class.CPDF_Font* null, %class.CPDF_Font** %53, align 8
  %55 = icmp eq %class.CPDF_Font* %54, null
  br i1 %55, label %67, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %54, i64 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = add nsw i64 %58, -1
  store i64 %59, i64* %57, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %54, i64 0, i32 0
  %63 = bitcast %class.CPDF_Font* %54 to void (%"class.fxcrt::Retainable"*)***
  %64 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %64, i64 1
  %66 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %65, align 8
  tail call void %66(%"class.fxcrt::Retainable"* nonnull %62) #4
  br label %67

67:                                               ; preds = %50, %56, %61
  %68 = icmp eq %"class.fxcrt::RetainPtr"* %52, %3
  br i1 %68, label %69, label %50

69:                                               ; preds = %67
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK18CFX_StockFontArray7GetFontEN14CFX_FontMapper12StandardFontE(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_StockFontArray* nocapture readonly, i8 zeroext) local_unnamed_addr #2 align 2 {
  %4 = icmp ult i8 %2, 14
  br i1 %4, label %5, label %16

5:                                                ; preds = %3
  %6 = zext i8 %2 to i64
  %7 = getelementptr inbounds %class.CFX_StockFontArray, %class.CFX_StockFontArray* %1, i64 0, i32 0, i64 %6, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_Font*, %class.CPDF_Font** %7, align 8
  %9 = ptrtoint %class.CPDF_Font* %8 to i64
  %10 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %9, i64* %10, align 8
  %11 = icmp eq %class.CPDF_Font* %8, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %8, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add nsw i64 %14, 1
  store i64 %15, i64* %13, align 8
  br label %18

16:                                               ; preds = %3
  %17 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %17, align 8
  br label %18

18:                                               ; preds = %12, %5, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_StockFontArray7SetFontEN14CFX_FontMapper12StandardFontERKN5fxcrt9RetainPtrI9CPDF_FontEE(%class.CFX_StockFontArray* nocapture, i8 zeroext, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = icmp ult i8 %1, 14
  br i1 %4, label %5, label %33

5:                                                ; preds = %3
  %6 = zext i8 %1 to i64
  %7 = getelementptr inbounds %class.CFX_StockFontArray, %class.CFX_StockFontArray* %0, i64 0, i32 0, i64 %6, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_Font*, %class.CPDF_Font** %7, align 8
  %9 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %class.CPDF_Font*, %class.CPDF_Font** %9, align 8
  %11 = icmp eq %class.CPDF_Font* %8, %10
  br i1 %11, label %33, label %12

12:                                               ; preds = %5
  %13 = icmp eq %class.CPDF_Font* %10, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %10, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* %15, align 8
  %18 = load %class.CPDF_Font*, %class.CPDF_Font** %7, align 8
  br label %19

19:                                               ; preds = %14, %12
  %20 = phi %class.CPDF_Font* [ %18, %14 ], [ %8, %12 ]
  store %class.CPDF_Font* %10, %class.CPDF_Font** %7, align 8
  %21 = icmp eq %class.CPDF_Font* %20, null
  br i1 %21, label %33, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %20, i64 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = add nsw i64 %24, -1
  store i64 %25, i64* %23, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %22
  %28 = getelementptr inbounds %class.CPDF_Font, %class.CPDF_Font* %20, i64 0, i32 0
  %29 = bitcast %class.CPDF_Font* %20 to void (%"class.fxcrt::Retainable"*)***
  %30 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %30, i64 1
  %32 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %31, align 8
  tail call void %32(%"class.fxcrt::Retainable"* nonnull %28) #4
  br label %33

33:                                               ; preds = %27, %22, %19, %5, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
