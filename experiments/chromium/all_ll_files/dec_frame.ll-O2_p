; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_frame.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.18" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::PassesDecoderState" = type { %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"*, [3 x %"struct.jxl::Upsampler"], %"class.jxl::Image3", %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.std::__1::vector.177", %"class.std::__1::vector.108", float, float, %"class.jxl::Image3", %"class.std::__1::vector.169", %"class.jxl::Image3", %"class.jxl::Image3", i8*, i64, i8, i8, %"class.std::__1::function", %"class.std::__1::vector.205", %"class.std::__1::vector.211", i64, %"struct.std::__1::atomic", %"class.std::__1::unique_ptr.219", %"class.std::__1::vector.225", %"struct.jxl::FilterWeights", %"class.jxl::GroupBorderAssigner", %"class.std::__1::vector.239", %"class.std::__1::vector.239", %"class.std::__1::vector.239", [4 x %"class.std::__1::vector.239"], %"class.std::__1::vector.169", %"class.std::__1::vector.239", %"struct.jxl::OutputEncodingInfo" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.60", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.30", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.34" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32", %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.32" = type { float* }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.35" }
%"class.std::__1::__vector_base.35" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.55" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.37, %"struct.jxl::DctQuantWeightParams", %union.anon.54 }>
%union.anon.37 = type { %"struct.std::__1::array.44", [4 x i8] }
%"struct.std::__1::array.44" = type { [3 x %"struct.std::__1::array.45"] }
%"struct.std::__1::array.45" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.36"] }
%"struct.std::__1::array.36" = type { [17 x float] }
%union.anon.54 = type { i8 }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.60" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.61", %"class.jxl::Plane.61", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.61" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.62", %"class.std::__1::vector.23", %"class.std::__1::vector.23" }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.71" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.64", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.66" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.jxl::PatchPosition"* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.76", %"class.std::__1::vector.90" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.85" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.78", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.92" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.47"], %"class.std::__1::vector", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { i32*, i32*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { i32* }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::Upsampler" = type { i64, [4 x [4 x [5 x [5 x float]]]] }
%"class.std::__1::vector.177" = type { %"class.std::__1::__vector_base.178" }
%"class.std::__1::__vector_base.178" = type { %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"*, %"class.std::__1::__compressed_pair.200" }
%"struct.jxl::ANSCode" = type { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.47", i8, i8, %"struct.jxl::LZ77Params", i64 }
%"class.std::__1::vector.179" = type { %"class.std::__1::__vector_base.180" }
%"class.std::__1::__vector_base.180" = type { %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"*, %"class.std::__1::__compressed_pair.188" }
%"struct.jxl::HuffmanDecodingData" = type { %"class.std::__1::vector.181" }
%"class.std::__1::vector.181" = type { %"class.std::__1::__vector_base.182" }
%"class.std::__1::__vector_base.182" = type { %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"*, %"class.std::__1::__compressed_pair.183" }
%"struct.jxl::HuffmanCode" = type { i8, i16 }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"struct.jxl::HuffmanCode"* }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.jxl::HuffmanDecodingData"* }
%"class.std::__1::vector.193" = type { %"class.std::__1::__vector_base.194" }
%"class.std::__1::__vector_base.194" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.195" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.jxl::ANSCode"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.97"] }
%"class.jxl::Plane.97" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { float*, float*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"*, %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.std::__1::vector.205"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.218" }
%"struct.std::__1::__atomic_base.218" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.227" }
%"class.jxl::FilterPipeline" = type { %"class.jxl::Image3", i64, [4 x %"struct.jxl::FilterPipeline::FilterStep"], i64, i8, i64 }
%"struct.jxl::FilterPipeline::FilterStep" = type { %"class.jxl::Image3"*, i64, %"class.jxl::Image3"*, i64, %"class.jxl::Rect", %"class.jxl::Rect", %"class.jxl::Rect", i64, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, void (%"struct.jxl::FilterPipeline::FilterStep"*, %"struct.jxl::FilterRows"*, i64)*, %"struct.jxl::FilterDefinition", i64 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::FilterRows" = type <{ [3 x float*], [7 x i64], [3 x float*], float*, i32, [4 x i8] }>
%"struct.jxl::FilterDefinition" = type { void (%"struct.jxl::FilterRows"*, %"struct.jxl::LoopFilter"*, %"struct.jxl::FilterWeights"*, i64, i64, i64, i64)*, i64 }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.jxl::FilterPipeline"* }
%"struct.jxl::FilterWeights" = type { [9 x float], %"class.jxl::Plane.97" }
%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr.232" }
%"class.std::__1::unique_ptr.232" = type { %"class.std::__1::__compressed_pair.233" }
%"class.std::__1::__compressed_pair.233" = type { %"struct.std::__1::__compressed_pair_elem.234" }
%"struct.std::__1::__compressed_pair_elem.234" = type { %"struct.std::__1::atomic.235"* }
%"struct.std::__1::atomic.235" = type opaque
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane.97"* }
%"class.std::__1::vector.239" = type { %"class.std::__1::__vector_base.240" }
%"class.std::__1::__vector_base.240" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.jxl::Image3"* }
%"struct.jxl::OutputEncodingInfo" = type <{ %"struct.jxl::ColorEncoding", float, %"struct.jxl::OpsinParams", i8, i8, [2 x i8] }>
%"struct.jxl::OpsinParams" = type { [36 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { i64*, i64*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64* }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.246", %"class.std::__1::vector.253", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.246" = type { %"class.std::__1::__vector_base.247" }
%"class.std::__1::__vector_base.247" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.248" }
%"class.jxl::Channel" = type { %"class.jxl::Plane.60", i64, i64, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.253" = type { %"class.std::__1::__vector_base.254" }
%"class.std::__1::__vector_base.254" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.262" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.255", i32, i32, i8, i8, [6 x i8] }>
%"class.std::__1::vector.255" = type { %"class.std::__1::__vector_base.256" }
%"class.std::__1::__vector_base.256" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.257" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.jxl::Transform"* }
%"class.std::__1::vector.267" = type { %"class.std::__1::__vector_base.268" }
%"class.std::__1::__vector_base.268" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.269" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"class.std::__1::vector.274" = type { %"class.std::__1::__vector_base.275" }
%"class.std::__1::__vector_base.275" = type { %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"*, %"class.std::__1::__compressed_pair.281" }
%"struct.jxl::GroupDecCache" = type { float*, i32*, i16*, float*, [11 x %"class.jxl::Image3.276"], %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.279", i64 }
%"class.jxl::Image3.276" = type { [3 x %"class.jxl::Plane.60"] }
%"class.std::__1::unique_ptr.277" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.50", %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::unique_ptr.279" = type { %"class.std::__1::__compressed_pair.280" }
%"class.std::__1::__compressed_pair.280" = type { %"struct.std::__1::__compressed_pair_elem.144", %"struct.std::__1::__compressed_pair_elem.33" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"struct.jxl::GroupDecCache"* }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"struct.jxl::WeightsSymmetric5" = type { [4 x float], [4 x float], [4 x float], [4 x float], [4 x float], [4 x float] }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.jxl::DecompressParams" = type <{ i8, i8, i8, i8, i32, i32, [4 x i8], i64, i8, i8, [6 x i8] }>
%"class.jxl::FrameDecoder" = type <{ %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.std::__1::vector.23", %"class.std::__1::vector", i64, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::ImageBundle"*, %"class.jxl::ModularFrameDecoder", i8, i8, i8, [5 x i8], %"class.std::__1::vector.98", %"class.std::__1::vector.98", %"class.std::__1::vector.98", i8, i8, i8, i8, [4 x i8], i64, %"class.std::__1::vector.274", %"struct.jxl::SizeConstraints"*, i8, [7 x i8] }>
%"class.jxl::ModularFrameDecoder" = type { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, %"class.std::__1::vector.267", %"struct.jxl::ANSCode", %"class.std::__1::vector.98", %"struct.jxl::GroupHeader" }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.253" }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"class.jxl::Status" = type { i32 }
%"class.std::__1::vector.286" = type { %"class.std::__1::__vector_base.287" }
%"class.std::__1::__vector_base.287" = type { %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"*, %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::unique_ptr.288" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { %"class.jxl::BitReader"* }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.std::__1::unique_ptr.288"* }
%"class.std::__1::vector.299" = type { %"class.std::__1::__vector_base.300" }
%"class.std::__1::__vector_base.300" = type { %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"*, %"class.std::__1::__compressed_pair.307" }
%"class.std::__1::unique_ptr.301" = type { %"class.std::__1::__compressed_pair.302" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.jxl::BitReaderScopedCloser"* }
%"class.jxl::BitReaderScopedCloser" = type { %"class.jxl::BitReader"*, %"class.jxl::Status"* }
%"class.std::__1::__compressed_pair.307" = type { %"struct.std::__1::__compressed_pair_elem.308" }
%"struct.std::__1::__compressed_pair_elem.308" = type { %"class.std::__1::unique_ptr.301"* }
%"class.std::__1::vector.312" = type { %"class.std::__1::__vector_base.313" }
%"class.std::__1::__vector_base.313" = type { %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"*, %"class.std::__1::__compressed_pair.314" }
%"struct.jxl::FrameDecoder::SectionInfo" = type { %"class.jxl::BitReader"*, i64 }
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.315" }
%"struct.std::__1::__compressed_pair_elem.315" = type { %"struct.jxl::FrameDecoder::SectionInfo"* }
%"class.std::__1::vector.319" = type { %"class.std::__1::__vector_base.320" }
%"class.std::__1::__vector_base.320" = type { i32*, i32*, %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.408" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::FrameDecoder"*, %"class.std::__1::vector.23"*, i64*, %"struct.jxl::FrameDecoder::SectionInfo"**, i32**, %"struct.std::__1::atomic.350"* }
%"struct.std::__1::atomic.350" = type { %"struct.std::__1::__atomic_base.351" }
%"struct.std::__1::__atomic_base.351" = type { %"struct.std::__1::__cxx_atomic_impl.352" }
%"struct.std::__1::__cxx_atomic_impl.352" = type { %"struct.std::__1::__cxx_atomic_base_impl.353" }
%"struct.std::__1::__cxx_atomic_base_impl.353" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.409" = type { %class.anon.355*, %class.anon.356* }
%class.anon.355 = type { %"class.jxl::FrameDecoder"* }
%class.anon.356 = type { %"class.jxl::FrameDecoder"*, %"class.std::__1::vector.343"*, %"class.std::__1::vector.23"*, i64*, %"struct.jxl::FrameDecoder::SectionInfo"**, i32**, %"struct.std::__1::atomic.350"* }
%"class.std::__1::vector.343" = type { %"class.std::__1::__vector_base.344" }
%"class.std::__1::__vector_base.344" = type { %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"*, %"class.std::__1::__compressed_pair.345" }
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.std::__1::vector.23"* }
%"struct.jxl::ModularStreamId" = type { i32, i64, i64, i64 }
%"struct.std::__1::array.342" = type { [3 x i32] }
%"class.std::__1::allocator.203" = type { i8 }
%"class.jxl::ACImageT" = type { %"class.jxl::ACImage", %"class.jxl::Image3.330" }
%"class.jxl::Image3.330" = type { [3 x %"class.jxl::Plane.331"] }
%"class.jxl::Plane.331" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::ACImageT.338" = type { %"class.jxl::ACImage", %"class.jxl::Image3.276" }
%class.anon.373 = type { i64*, %"struct.jxl::PassesDecoderState"* }
%"struct.jxl::ThreadPool::SkipInit" = type { i8 }
%"class.jxl::ThreadPool::RunCallState.425" = type { %class.anon.358*, %class.anon.359* }
%class.anon.358 = type { %"class.jxl::FrameDecoder"* }
%class.anon.359 = type { %"class.jxl::FrameDecoder"*, %"struct.std::__1::atomic.350"* }
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon.373* }
%"class.std::__1::allocator.166" = type { i8 }
%"struct.std::__1::__split_buffer.413" = type { %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"*, %"class.std::__1::__compressed_pair.414" }
%"class.std::__1::__compressed_pair.414" = type { %"struct.std::__1::__compressed_pair_elem.228", %"struct.std::__1::__compressed_pair_elem.415" }
%"struct.std::__1::__compressed_pair_elem.415" = type { %"class.std::__1::allocator.230"* }
%"class.std::__1::allocator.230" = type { i8 }
%"struct.std::__1::__split_buffer.416" = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.242", %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"class.std::__1::allocator.244"* }
%"class.std::__1::allocator.244" = type { i8 }

$_ZNK3jxl11FrameHeader17ToFrameDimensionsEv = comdat any

$_ZN3jxl12FrameDecoderD2Ev = comdat any

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZN3jxl18PassesDecoderState4InitEv = comdat any

$_ZN3jxl13GroupDecCache8InitOnceEmm = comdat any

$_ZNSt3__16vectorINS0_ImNS_9allocatorImEEEENS1_IS3_EEEC2EmRKS3_ = comdat any

$_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv = comdat any

$_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE = comdat any

$_ZNK3jxl11ImageBundle4CopyEv = comdat any

$_ZN3jxl11ImageBundleaSEOS0_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZN3jxl13GroupDecCacheD2Ev = comdat any

$_ZN3jxl11GroupHeaderD2Ev = comdat any

$_ZN3jxl11GroupHeaderD0Ev = comdat any

$_ZNK3jxl11GroupHeader4NameEv = comdat any

$_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl9TransformD2Ev = comdat any

$_ZN3jxl9TransformD0Ev = comdat any

$_ZNK3jxl9Transform4NameEv = comdat any

$_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl13SqueezeParamsD0Ev = comdat any

$_ZNK3jxl13SqueezeParams4NameEv = comdat any

$_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZN3jxl19ColorCorrelationMap8DecodeDCEPNS_9BitReaderE = comdat any

$_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm = comdat any

$_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl4jpeg8JPEGDataC2ERKS1_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_ = comdat any

$_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_ = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl21BitReaderScopedCloserENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitReaderENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl12FrameDecoder13SectionStatusENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl7ANSCodeENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZN3jxl8ACImageTIsEC2Emm = comdat any

$_ZN3jxl8ACImageTIsED2Ev = comdat any

$_ZN3jxl8ACImageTIsED0Ev = comdat any

$_ZNK3jxl8ACImageTIsE4TypeEv = comdat any

$_ZN3jxl8ACImageTIsE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIsE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIsE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIsE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIsE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIsE7IsEmptyEv = comdat any

$_ZN3jxl8ACImageTIiEC2Emm = comdat any

$_ZN3jxl8ACImageTIiED2Ev = comdat any

$_ZN3jxl8ACImageTIiED0Ev = comdat any

$_ZNK3jxl8ACImageTIiE4TypeEv = comdat any

$_ZN3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE8PlaneRowEmmm = comdat any

$_ZNK3jxl8ACImageTIiE12PixelsPerRowEv = comdat any

$_ZN3jxl8ACImageTIiE8ZeroFillEv = comdat any

$_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm = comdat any

$_ZNK3jxl8ACImageTIiE7IsEmptyEv = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm = comdat any

$_ZN3jxl18PassesDecoderState13EnsureStorageEm = comdat any

$_ZNSt3__16vectorIN3jxl13GroupDecCacheENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl13GroupDecCacheC2EOS0_ = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf = comdat any

$_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZTVN3jxl11GroupHeaderE = comdat any

$_ZTVN3jxl9TransformE = comdat any

$_ZTVN3jxl13SqueezeParamsE = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = comdat any

$_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = comdat any

$_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = comdat any

$_ZTVN3jxl8ACImageTIsEE = comdat any

$_ZTVN3jxl8ACImageTIiEE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_frame.cc\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"frame_header->nonserialized_metadata != nullptr\00", align 1
@__const._ZN3jxl9SkipFrameERKNS_13CodecMetadataEPNS_9BitReaderEb.header = private unnamed_addr constant { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::Passes" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::FrameSize" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, %"struct.jxl::BlendingInfo" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"class.std::__1::vector.6" { %"class.std::__1::__vector_base.7" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"class.std::__1::__compressed_pair.8" { %"struct.std::__1::__compressed_pair_elem.9" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*) } } } }, %"struct.jxl::AnimationFrame" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), %"struct.jxl::LoopFilter" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, i8 -86, i8 -86, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, align 8
@__const._ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb.frame_decoder = private unnamed_addr constant <{ %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.std::__1::vector.23", %"class.std::__1::vector", i64, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::ImageBundle"*, { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, [6 x i8], %"class.std::__1::vector.267", { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.47", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, %"struct.jxl::HybridUintConfig", [4 x i8], i64 }, i64 }, %"class.std::__1::vector.98", { %"class.jxl::Fields", i8, [7 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i32] }, %"class.std::__1::vector.253" } }, i8, i8, i8, [5 x i8], %"class.std::__1::vector.98", %"class.std::__1::vector.98", %"class.std::__1::vector.98", i8, i8, i8, i8, [4 x i8], i64, %"class.std::__1::vector.274", %"struct.jxl::SizeConstraints"*, i8, [7 x i8] }> <{ %"struct.jxl::PassesDecoderState"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesDecoderState"*), %"class.jxl::ThreadPool"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ThreadPool"*), %"class.std::__1::vector.23" { %"class.std::__1::__vector_base.24" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64* inttoptr (i64 -6148914691236517206 to i64*), %"class.std::__1::__compressed_pair.25" { %"struct.std::__1::__compressed_pair_elem.26" { i64* inttoptr (i64 -6148914691236517206 to i64*) } } } }, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i64 -6148914691236517206, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::Passes" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::FrameSize" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, %"struct.jxl::BlendingInfo" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"class.std::__1::vector.6" { %"class.std::__1::__vector_base.7" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"class.std::__1::__compressed_pair.8" { %"struct.std::__1::__compressed_pair_elem.9" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*) } } } }, %"struct.jxl::AnimationFrame" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), %"struct.jxl::LoopFilter" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, i8 -86, i8 -86, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, %"struct.jxl::FrameDimensions" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, [6 x i8], %"class.std::__1::vector.267", { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.47", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, %"struct.jxl::HybridUintConfig", [4 x i8], i64 }, i64 }, %"class.std::__1::vector.98", { %"class.jxl::Fields", i8, [7 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i32] }, %"class.std::__1::vector.253" } } { %"class.jxl::Image" <{ %"class.std::__1::vector.246" { %"class.std::__1::__vector_base.247" { %"class.jxl::Channel"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Channel"*), %"class.jxl::Channel"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Channel"*), %"class.std::__1::__compressed_pair.248" { %"struct.std::__1::__compressed_pair_elem.249" { %"class.jxl::Channel"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Channel"*) } } } }, %"class.std::__1::vector.253" { %"class.std::__1::__vector_base.254" { %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*), %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*), %"class.std::__1::__compressed_pair.262" { %"struct.std::__1::__compressed_pair_elem.263" { %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*) } } } }, i64 -6148914691236517206, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"struct.jxl::FrameDimensions" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"class.std::__1::vector.267" { %"class.std::__1::__vector_base.268" { %"struct.jxl::PropertyDecisionNode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PropertyDecisionNode"*), %"struct.jxl::PropertyDecisionNode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PropertyDecisionNode"*), %"class.std::__1::__compressed_pair.269" { %"struct.std::__1::__compressed_pair_elem.270" { %"struct.jxl::PropertyDecisionNode"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PropertyDecisionNode"*) } } } }, { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.47", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, %"struct.jxl::HybridUintConfig", [4 x i8], i64 }, i64 } { %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair.13" { %"struct.std::__1::__compressed_pair_elem.14" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } }, %"class.std::__1::vector.179" { %"class.std::__1::__vector_base.180" { %"struct.jxl::HuffmanDecodingData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HuffmanDecodingData"*), %"struct.jxl::HuffmanDecodingData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HuffmanDecodingData"*), %"class.std::__1::__compressed_pair.188" { %"struct.std::__1::__compressed_pair_elem.189" { %"struct.jxl::HuffmanDecodingData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HuffmanDecodingData"*) } } } }, %"class.std::__1::vector.193" { %"class.std::__1::__vector_base.194" { %"struct.jxl::HybridUintConfig"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HybridUintConfig"*), %"struct.jxl::HybridUintConfig"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HybridUintConfig"*), %"class.std::__1::__compressed_pair.195" { %"struct.std::__1::__compressed_pair_elem.196" { %"struct.jxl::HybridUintConfig"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::HybridUintConfig"*) } } } }, %"class.std::__1::vector.47" { %"class.std::__1::__vector_base.48" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.49" { %"struct.std::__1::__compressed_pair_elem.50" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, %"struct.jxl::HybridUintConfig", [4 x i8], i64 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, %"struct.jxl::HybridUintConfig" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206 }, i64 -6148914691236517206 }, %"class.std::__1::vector.98" { %"class.std::__1::__vector_base.99" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.100" { %"struct.std::__1::__compressed_pair_elem.14" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, { %"class.jxl::Fields", i8, [7 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i32] }, %"class.std::__1::vector.253" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i32] } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, %"class.std::__1::vector.253" { %"class.std::__1::__vector_base.254" { %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*), %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*), %"class.std::__1::__compressed_pair.262" { %"struct.std::__1::__compressed_pair_elem.263" { %"class.jxl::Transform"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Transform"*) } } } } } }, i8 -86, i8 -86, i8 -86, [5 x i8] c"\AA\AA\AA\AA\AA", %"class.std::__1::vector.98" { %"class.std::__1::__vector_base.99" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.100" { %"struct.std::__1::__compressed_pair_elem.14" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.std::__1::vector.98" { %"class.std::__1::__vector_base.99" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.100" { %"struct.std::__1::__compressed_pair_elem.14" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.std::__1::vector.98" { %"class.std::__1::__vector_base.99" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.100" { %"struct.std::__1::__compressed_pair_elem.14" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i8 -86, i8 -86, i8 -86, i8 -86, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, %"class.std::__1::vector.274" { %"class.std::__1::__vector_base.275" { %"struct.jxl::GroupDecCache"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::GroupDecCache"*), %"struct.jxl::GroupDecCache"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::GroupDecCache"*), %"class.std::__1::__compressed_pair.281" { %"struct.std::__1::__compressed_pair_elem.282" { %"struct.jxl::GroupDecCache"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::GroupDecCache"*) } } } }, %"struct.jxl::SizeConstraints"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::SizeConstraints"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@.str.14 = private unnamed_addr constant [14 x i8] c"is_finalized_\00", align 1
@.str.33 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c"finalized_dc_\00", align 1
@.str.35 = private unnamed_addr constant [90 x i8] c"decoded_->HasColor() || dec_state_->rgb_output != nullptr || !!dec_state_->pixel_callback\00", align 1
@.str.40 = private unnamed_addr constant [42 x i8] c"qpos != decoded_->jpeg_data->quant.size()\00", align 1
@.str.44 = private unnamed_addr constant [9 x i8] c"num == 1\00", align 1
@.str.45 = private unnamed_addr constant [20 x i8] c"sections[0].id == 0\00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"sections[i].id < processed_section_.size()\00", align 1
@.str.48 = private unnamed_addr constant [14 x i8] c"DecodeDCGroup\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"DecodeGroup\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"ForceDrawGroup\00", align 1
@_ZTVN3jxl11FrameHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl11GroupHeaderE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD2Ev to i8*), i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::GroupHeader"*)* @_ZNK3jxl11GroupHeader4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"*)* @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.61 = private unnamed_addr constant [12 x i8] c"GroupHeader\00", align 1
@_ZTVN3jxl9TransformE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD2Ev to i8*), i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD0Ev to i8*), i8* bitcast (i8* (%"class.jxl::Transform"*)* @_ZNK3jxl9Transform4NameEv to i8*), i8* bitcast (i32 (%"class.jxl::Transform"*, %"class.jxl::Visitor"*)* @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.63 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1
@_ZTVN3jxl13SqueezeParamsE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::SqueezeParams"*)* @_ZN3jxl13SqueezeParamsD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::SqueezeParams"*)* @_ZNK3jxl13SqueezeParams4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"*)* @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.68 = private unnamed_addr constant [14 x i8] c"SqueezeParams\00", align 1
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.69 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const = private unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@.str.80 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/frame_header.h\00", align 1
@.str.81 = private unnamed_addr constant [27 x i8] c"ct != ColorTransform::kXYB\00", align 1
@_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\01\02\01\04\02\04\01\01\01\01\01\01\08\04\08\10\08\10 \10 ", comdat, align 16
@_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut = linkonce_odr hidden local_unnamed_addr constant [27 x i8] c"\01\01\01\01\02\04\02\01\04\01\04\02\01\01\01\01\01\01\08\08\04\10\10\08  \10", comdat, align 16
@_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter = linkonce_odr hidden local_unnamed_addr constant [4 x i64] [i64 0, i64 2, i64 3, i64 6], comdat, align 16
@_ZN3jxlL14kStrategyOrderE = internal unnamed_addr constant [27 x i8] c"\00\01\01\01\02\03\04\04\05\05\06\06\01\01\01\01\01\01\07\08\08\09\0A\0A\0B\0C\0C", align 16
@_ZN3jxlL17kCoeffOrderOffsetE = internal unnamed_addr constant [40 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 10, i64 14, i64 18, i64 34, i64 50, i64 66, i64 68, i64 70, i64 72, i64 76, i64 80, i64 84, i64 92, i64 100, i64 108, i64 172, i64 236, i64 300, i64 332, i64 364, i64 396, i64 652, i64 908, i64 1164, i64 1292, i64 1420, i64 1548, i64 2572, i64 3596, i64 4620, i64 5132, i64 5644, i64 6156], align 16
@.str.82 = private unnamed_addr constant [15 x i8] c"Generate noise\00", align 1
@__const._ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE.weights = private unnamed_addr constant %"struct.jxl::WeightsSymmetric5" { [4 x float] [float 0xC00EB851E0000000, float 0xC00EB851E0000000, float 0xC00EB851E0000000, float 0xC00EB851E0000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000], [4 x float] [float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000, float 0x3FC47AE140000000] }, align 4
@.str.83 = private unnamed_addr constant [58 x i8] c"../../third_party/libjxl/src/lib/jxl/base/data_parallel.h\00", align 1
@.str.84 = private unnamed_addr constant [13 x i8] c"begin <= end\00", align 1
@.str.85 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.86 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@_ZTVN3jxl4jpeg8JPEGDataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.87 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@.str.88 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_bit_reader.h\00", align 1
@.str.89 = private unnamed_addr constant [30 x i8] c"close_called_ || !first_byte_\00", align 1
@_ZTVN3jxl10LZ77ParamsE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8ACImageTIsEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIsED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIsED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIsE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZN3jxl8ACImageTIsE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIsE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIsE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*)* @_ZN3jxl8ACImageTIsE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT"*, i64)* @_ZN3jxl8ACImageTIsE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT"*)* @_ZNK3jxl8ACImageTIsE7IsEmptyEv to i8*)] }, comdat, align 8
@_ZTVN3jxl8ACImageTIiEE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::ACImageT.338"*)* @_ZN3jxl8ACImageTIiED2Ev to i8*), i8* bitcast (void (%"class.jxl::ACImageT.338"*)* @_ZN3jxl8ACImageTIiED0Ev to i8*), i8* bitcast (i32 (%"class.jxl::ACImageT.338"*)* @_ZNK3jxl8ACImageTIiE4TypeEv to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT.338"*, i64, i64, i64)* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i32* (%"class.jxl::ACImageT.338"*, i64, i64, i64)* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm to i8*), i8* bitcast (i64 (%"class.jxl::ACImageT.338"*)* @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT.338"*)* @_ZN3jxl8ACImageTIiE8ZeroFillEv to i8*), i8* bitcast (void (%"class.jxl::ACImageT.338"*, i64)* @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm to i8*), i8* bitcast (i1 (%"class.jxl::ACImageT.338"*)* @_ZNK3jxl8ACImageTIiE7IsEmptyEv to i8*)] }, comdat, align 8
@.str.96 = private unnamed_addr constant [39 x i8] c"ac_group_sec[g][first_pass + i] != num\00", align 1
@switch.table._ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb.97 = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 3, i32 2, i32 3, i32 3, i32 3, i32 3], align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"* noalias, %"struct.jxl::FrameHeader"* noalias) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 25
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)) #12
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

9:                                                ; preds = %2
  %10 = tail call i32 @_ZN3jxl15ReadFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"* %0, %"struct.jxl::FrameHeader"* %1) #12
  ret i32 %10
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

declare i32 @_ZN3jxl15ReadFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"*, %"struct.jxl::FrameHeader"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl9SkipFrameERKNS_13CodecMetadataEPNS_9BitReaderEb(%"struct.jxl::CodecMetadata"* dereferenceable(2856), %"class.jxl::BitReader"* noalias, i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %"struct.jxl::FrameHeader", align 8
  %5 = alloca %"class.std::__1::vector.23", align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.jxl::FrameDimensions", align 8
  %9 = zext i1 %2 to i8
  %10 = bitcast %"struct.jxl::FrameHeader"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %10) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 bitcast ({ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }* @__const._ZN3jxl9SkipFrameERKNS_13CodecMetadataEPNS_9BitReaderEb.header to i8*), i64 576, i1 false)
  call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* nonnull %4, %"struct.jxl::CodecMetadata"* %0) #12
  %11 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 27
  store i8 %9, i8* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 25
  %13 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %12, align 8, !alias.scope !2, !noalias !5
  %14 = icmp eq %"struct.jxl::CodecMetadata"* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)) #12
  %17 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

18:                                               ; preds = %3
  %19 = call i32 @_ZN3jxl15ReadFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"* %1, %"struct.jxl::FrameHeader"* nonnull %4) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %123

21:                                               ; preds = %18
  %22 = bitcast %"class.std::__1::vector.23"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %5, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #12
  %25 = bitcast %"class.std::__1::vector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 0, i64 24, i1 false) #12
  %28 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #12
  store i64 -6148914691236517206, i64* %7, align 8
  %29 = bitcast %"struct.jxl::FrameDimensions"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 -86, i64 144, i1 false)
  call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* nonnull sret %8, %"struct.jxl::FrameHeader"* nonnull %4)
  %30 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %8, i64 0, i32 14
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 12, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i64 %31, 1
  %35 = icmp eq i32 %33, 1
  %36 = and i1 %34, %35
  br i1 %36, label %44, label %37

37:                                               ; preds = %21
  %38 = zext i32 %33 to i64
  %39 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %8, i64 0, i32 15
  %40 = load i64, i64* %39, align 8
  %41 = mul i64 %31, %38
  %42 = add i64 %41, 2
  %43 = add i64 %42, %40
  br label %44

44:                                               ; preds = %21, %37
  %45 = phi i64 [ %43, %37 ], [ 1, %21 ]
  %46 = call i32 @_ZN3jxl16ReadGroupOffsetsEmPNS_9BitReaderEPNSt3__16vectorImNS2_9allocatorImEEEEPNS3_IjNS4_IjEEEEPm(i64 %45, %"class.jxl::BitReader"* %1, %"class.std::__1::vector.23"* nonnull %5, %"class.std::__1::vector"* nonnull %6, i64* nonnull %7) #12
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %107

48:                                               ; preds = %44
  %49 = load i64, i64* %7, align 8
  %50 = shl i64 %49, 3
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %59, label %54, !prof !7

54:                                               ; preds = %48
  %55 = sub i64 %52, %50
  store i64 %55, i64* %51, align 8
  %56 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = lshr i64 %57, %50
  br label %83

59:                                               ; preds = %48
  %60 = sub i64 %50, %52
  %61 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %62 = lshr i64 %60, 3
  %63 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %64 = bitcast %"class.jxl::BitReader"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 16, i1 false) #12
  %65 = load i8*, i8** %63, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %62
  store i8* %66, i8** %63, align 8
  %67 = and i64 %60, 7
  %68 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %69 = load i8*, i8** %68, align 8
  %70 = icmp ugt i8* %66, %69
  br i1 %70, label %71, label %74, !prof !8

71:                                               ; preds = %59
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %72 = load i64, i64* %51, align 8
  %73 = load i64, i64* %61, align 8
  br label %78

74:                                               ; preds = %59
  %75 = bitcast i8* %66 to i64*
  %76 = load i64, i64* %75, align 1
  store i64 %76, i64* %61, align 8
  %77 = getelementptr inbounds i8, i8* %66, i64 7
  store i8* %77, i8** %63, align 8
  store i64 56, i64* %51, align 8
  br label %78

78:                                               ; preds = %74, %71
  %79 = phi i64 [ %73, %71 ], [ %76, %74 ]
  %80 = phi i64 [ %72, %71 ], [ 56, %74 ]
  %81 = sub i64 %80, %67
  store i64 %81, i64* %51, align 8
  %82 = lshr i64 %79, %67
  br label %83

83:                                               ; preds = %54, %78
  %84 = phi i64* [ %56, %54 ], [ %61, %78 ]
  %85 = phi i64 [ %58, %54 ], [ %82, %78 ]
  %86 = phi i64 [ %55, %54 ], [ %81, %78 ]
  store i64 %85, i64* %84, align 8
  %87 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %88 = bitcast i8** %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %89, %92
  %94 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %93, %95
  %97 = shl i64 %96, 3
  %98 = sub i64 %97, %86
  %99 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 8
  %102 = ptrtoint i8* %101 to i64
  %103 = sub i64 %102, %92
  %104 = shl i64 %103, 3
  %105 = icmp ugt i64 %98, %104
  %106 = zext i1 %105 to i32
  br label %107

107:                                              ; preds = %83, %44
  %108 = phi i32 [ %46, %44 ], [ %106, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %29) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #12
  %109 = load i32*, i32** %26, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %115, label %111

111:                                              ; preds = %107
  %112 = ptrtoint i32* %109 to i64
  %113 = bitcast i32** %27 to i64*
  store i64 %112, i64* %113, align 8
  %114 = bitcast i32* %109 to i8*
  call void @_ZdlPv(i8* %114) #15
  br label %115

115:                                              ; preds = %107, %111
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #12
  %116 = load i64*, i64** %23, align 8
  %117 = icmp eq i64* %116, null
  br i1 %117, label %122, label %118

118:                                              ; preds = %115
  %119 = ptrtoint i64* %116 to i64
  %120 = bitcast i64** %24 to i64*
  store i64 %119, i64* %120, align 8
  %121 = bitcast i64* %116 to i8*
  call void @_ZdlPv(i8* %121) #15
  br label %122

122:                                              ; preds = %115, %118
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #12
  br label %123

123:                                              ; preds = %18, %122
  %124 = phi i32 [ %108, %122 ], [ %19, %18 ]
  %125 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 19
  %127 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %126, i64 0, i32 0, i32 0
  %128 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %127, align 8
  %129 = icmp eq %"struct.jxl::BlendingInfo"* %128, null
  br i1 %129, label %147, label %130

130:                                              ; preds = %123
  %131 = bitcast %"struct.jxl::BlendingInfo"* %128 to i8*
  %132 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 19, i32 0, i32 1
  %133 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %132, align 8
  %134 = icmp eq %"struct.jxl::BlendingInfo"* %133, %128
  br i1 %134, label %145, label %135

135:                                              ; preds = %130, %135
  %136 = phi %"struct.jxl::BlendingInfo"* [ %137, %135 ], [ %133, %130 ]
  %137 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %136, i64 -1
  %138 = bitcast %"struct.jxl::BlendingInfo"* %137 to void (%"struct.jxl::BlendingInfo"*)***
  %139 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %138, align 8
  %140 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %139, align 8
  call void %140(%"struct.jxl::BlendingInfo"* %137) #12
  %141 = icmp eq %"struct.jxl::BlendingInfo"* %137, %128
  br i1 %141, label %142, label %135

142:                                              ; preds = %135
  %143 = bitcast %"class.std::__1::vector.6"* %126 to i8**
  %144 = load i8*, i8** %143, align 8
  br label %145

145:                                              ; preds = %142, %130
  %146 = phi i8* [ %144, %142 ], [ %131, %130 ]
  store %"struct.jxl::BlendingInfo"* %128, %"struct.jxl::BlendingInfo"** %132, align 8
  call void @_ZdlPv(i8* %146) #15
  br label %147

147:                                              ; preds = %145, %123
  %148 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 16, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = icmp eq i32* %149, null
  br i1 %150, label %156, label %151

151:                                              ; preds = %147
  %152 = ptrtoint i32* %149 to i64
  %153 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 16, i32 0, i32 1
  %154 = bitcast i32** %153 to i64*
  store i64 %152, i64* %154, align 8
  %155 = bitcast i32* %149 to i8*
  call void @_ZdlPv(i8* %155) #15
  br label %156

156:                                              ; preds = %151, %147
  %157 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %4, i64 0, i32 11
  %158 = bitcast %"class.std::__1::basic_string"* %157 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %159 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %158, i64 0, i32 1, i32 0
  %160 = load i8, i8* %159, align 1
  %161 = icmp slt i8 %160, 0
  br i1 %161, label %162, label %165

162:                                              ; preds = %156
  %163 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %157, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  call void @_ZdlPv(i8* %164) #15
  br label %165

165:                                              ; preds = %156, %162
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %10) #12
  ret i32 %124
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* noalias sret, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 25
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %46, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 27
  %8 = load i8, i8* %7, align 8, !range !9
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 0, i32 19
  %12 = tail call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %11) #12
  br label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 1
  %15 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %14) #12
  br label %16

16:                                               ; preds = %10, %13
  %17 = phi i64 [ %15, %13 ], [ %12, %10 ]
  %18 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %19 = icmp eq %"struct.jxl::CodecMetadata"* %18, null
  br i1 %19, label %46, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %7, align 8, !range !9
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 1
  %25 = load i8, i8* %24, align 8, !range !9
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = shl i32 %29, 3
  br label %46

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 3
  %33 = load i32, i32* %32, align 8
  br label %46

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 8, !range !9
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 3
  %42 = add i32 %41, 8
  br label %46

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 3
  %45 = load i32, i32* %44, align 8
  br label %46

46:                                               ; preds = %2, %16, %27, %31, %38, %43
  %47 = phi i64 [ %17, %16 ], [ %17, %27 ], [ %17, %31 ], [ %17, %38 ], [ %17, %43 ], [ 0, %2 ]
  %48 = phi i32 [ 0, %16 ], [ %30, %27 ], [ %33, %31 ], [ %42, %38 ], [ %45, %43 ], [ 0, %2 ]
  %49 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  %52 = zext i32 %50 to i64
  %53 = select i1 %51, i64 %47, i64 %52
  %54 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 %48, i32 %55
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 24
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %46
  %63 = mul i32 %60, 3
  %64 = shl i32 1, %63
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, -1
  %67 = add i64 %66, %53
  %68 = udiv i64 %67, %65
  %69 = add nsw i64 %66, %58
  %70 = udiv i64 %69, %65
  br label %71

71:                                               ; preds = %46, %62
  %72 = phi i64 [ %68, %62 ], [ %53, %46 ]
  %73 = phi i64 [ %70, %62 ], [ %58, %46 ]
  %74 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  %75 = bitcast i64* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 -86, i64 96, i1 false)
  %76 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 8
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 2
  %80 = load i8, i8* %79, align 4
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 1
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 15
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = shl i64 128, %78
  %92 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 16
  store i64 %91, i64* %92, align 8
  %93 = shl i64 %91, 3
  %94 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 17
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 2
  store i64 %72, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 3
  store i64 %73, i64* %96, align 8
  %97 = add nsw i64 %90, -1
  %98 = add i64 %97, %72
  %99 = udiv i64 %98, %90
  %100 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 0
  store i64 %99, i64* %100, align 8
  %101 = add i64 %97, %73
  %102 = udiv i64 %101, %90
  %103 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 1
  store i64 %102, i64* %103, align 8
  %104 = shl i64 8, %81
  %105 = add i64 %99, -1
  %106 = add i64 %105, %104
  %107 = add nuw nsw i64 %81, 3
  %108 = lshr i64 %106, %107
  %109 = shl i64 %108, %81
  %110 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 8
  store i64 %109, i64* %110, align 8
  %111 = shl i64 8, %84
  %112 = add i64 %102, -1
  %113 = add i64 %112, %111
  %114 = add nuw nsw i64 %84, 3
  %115 = lshr i64 %113, %114
  %116 = shl i64 %115, %84
  %117 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 9
  store i64 %116, i64* %117, align 8
  %118 = shl i64 %109, 3
  %119 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 6
  store i64 %118, i64* %119, align 8
  %120 = shl i64 %116, 3
  %121 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 7
  store i64 %120, i64* %121, align 8
  br i1 %87, label %122, label %123

122:                                              ; preds = %71
  store i64 %99, i64* %119, align 8
  store i64 %102, i64* %121, align 8
  br label %123

123:                                              ; preds = %71, %122
  %124 = phi i64 [ %102, %122 ], [ %120, %71 ]
  %125 = phi i64 [ %99, %122 ], [ %118, %71 ]
  %126 = mul i64 %125, %90
  %127 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  store i64 %126, i64* %127, align 8
  %128 = mul i64 %124, %90
  %129 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 5
  store i64 %128, i64* %129, align 8
  %130 = add i64 %105, %91
  %131 = add nuw nsw i64 %78, 7
  %132 = lshr i64 %130, %131
  %133 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 10
  store i64 %132, i64* %133, align 8
  %134 = add i64 %112, %91
  %135 = lshr i64 %134, %131
  %136 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 11
  store i64 %135, i64* %136, align 8
  %137 = add i64 %91, -1
  %138 = add i64 %109, %137
  %139 = lshr i64 %138, %131
  %140 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 12
  store i64 %139, i64* %140, align 8
  %141 = add i64 %116, %137
  %142 = lshr i64 %141, %131
  %143 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 13
  store i64 %142, i64* %143, align 8
  %144 = mul i64 %135, %132
  %145 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 14
  store i64 %144, i64* %145, align 8
  %146 = mul i64 %142, %139
  %147 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 15
  store i64 %146, i64* %147, align 8
  ret void
}

declare i32 @_ZN3jxl16ReadGroupOffsetsEmPNS_9BitReaderEPNSt3__16vectorImNS2_9allocatorImEEEEPNS3_IjNS4_IjEEEEPm(i64, %"class.jxl::BitReader"*, %"class.std::__1::vector.23"*, %"class.std::__1::vector"*, i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb(%"struct.jxl::DecompressParams"* nocapture readonly dereferenceable(32), %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"* noalias, %"class.jxl::BitReader"* noalias, %"class.jxl::ImageBundle"*, %"struct.jxl::CodecMetadata"* dereferenceable(2856), %"struct.jxl::SizeConstraints"*, i1 zeroext) local_unnamed_addr #0 {
  %9 = alloca %"class.jxl::FrameDecoder", align 8
  %10 = alloca %"class.jxl::Status", align 4
  %11 = alloca %"class.std::__1::vector.286", align 8
  %12 = alloca %"class.std::__1::vector.299", align 8
  %13 = alloca %"class.std::__1::vector.312", align 8
  %14 = alloca %"class.std::__1::vector.319", align 8
  %15 = alloca %"class.std::__1::unique_ptr.288", align 8
  %16 = alloca %"class.std::__1::unique_ptr.301", align 8
  %17 = bitcast %"class.jxl::FrameDecoder"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1480, i8* nonnull %17) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast (<{ %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.std::__1::vector.23", %"class.std::__1::vector", i64, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::ImageBundle"*, { %"class.jxl::Image", %"struct.jxl::FrameDimensions", i8, i8, [6 x i8], %"class.std::__1::vector.267", { %"class.std::__1::unique_ptr", %"class.std::__1::vector.179", %"class.std::__1::vector.193", %"class.std::__1::vector.47", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, %"struct.jxl::HybridUintConfig", [4 x i8], i64 }, i64 }, %"class.std::__1::vector.98", { %"class.jxl::Fields", i8, [7 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i32] }, %"class.std::__1::vector.253" } }, i8, i8, i8, [5 x i8], %"class.std::__1::vector.98", %"class.std::__1::vector.98", %"class.std::__1::vector.98", i8, i8, i8, i8, [4 x i8], i64, %"class.std::__1::vector.274", %"struct.jxl::SizeConstraints"*, i8, [7 x i8] }>* @__const._ZN3jxl11DecodeFrameERKNS_16DecompressParamsEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_9BitReaderEPNS_11ImageBundleERKNS_13CodecMetadataEPKNS_15SizeConstraintsEb.frame_decoder to i8*), i64 1480, i1 false)
  %18 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 0
  store %"struct.jxl::PassesDecoderState"* %1, %"struct.jxl::PassesDecoderState"** %18, align 8
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 1
  store %"class.jxl::ThreadPool"* %2, %"class.jxl::ThreadPool"** %19, align 8
  %20 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 2
  %21 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5
  %22 = bitcast %"class.std::__1::vector.23"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 48, i1 false) #12
  call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* %21, %"struct.jxl::CodecMetadata"* %5) #12
  %23 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 8, i32 0
  call void @_ZN3jxl5ImageC1Ev(%"class.jxl::Image"* %23) #12
  %24 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 8, i32 4
  %25 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 8, i32 5, i32 6
  %26 = bitcast %"class.std::__1::vector.267"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 104, i1 false) #12
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %25) #12
  %27 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 8, i32 5, i32 7
  %28 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 8, i32 7
  %29 = bitcast i64* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 32, i1 false) #12
  call void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"* %28) #12
  %30 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 11
  store i8 1, i8* %30, align 2
  %31 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 13
  %32 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 18
  %33 = bitcast %"class.std::__1::vector.98"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 72, i1 false) #12
  store i8 1, i8* %32, align 2
  %34 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 19
  store i8 1, i8* %34, align 1
  %35 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 21
  %36 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 41, i1 false) #12
  %37 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 23
  store %"struct.jxl::SizeConstraints"* %6, %"struct.jxl::SizeConstraints"** %37, align 8
  %38 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 8
  %39 = load i8, i8* %38, align 8, !range !9
  %40 = icmp ne i8 %39, 0
  %41 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 9
  %42 = load i8, i8* %41, align 1
  %43 = icmp ne i8 %42, 0
  %44 = and i1 %40, %43
  %45 = call i32 @_ZN3jxl12FrameDecoder9InitFrameEPNS_9BitReaderEPNS_11ImageBundleEbbb(%"class.jxl::FrameDecoder"* nonnull %9, %"class.jxl::BitReader"* %3, %"class.jxl::ImageBundle"* %4, i1 zeroext %7, i1 zeroext %40, i1 zeroext %44)
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %622

47:                                               ; preds = %8
  %48 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 7
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 24
  %54 = load i32, i32* %53, align 4
  %55 = mul i32 %54, 3
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %52, %56
  %58 = icmp eq i64 %57, 0
  %59 = select i1 %58, i64 1, i64 %57
  %60 = icmp ugt i64 %59, 7
  br i1 %60, label %112, label %61

61:                                               ; preds = %47
  %62 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %112, label %65

65:                                               ; preds = %61
  %66 = zext i32 %63 to i64
  %67 = and i64 %66, 1
  %68 = icmp eq i32 %63, 1
  br i1 %68, label %94, label %69

69:                                               ; preds = %65
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %632, %69
  %72 = phi i64 [ 0, %69 ], [ %634, %632 ]
  %73 = phi i64 [ %50, %69 ], [ %633, %632 ]
  %74 = phi i64 [ %70, %69 ], [ %635, %632 ]
  %75 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 3, i64 %72
  %76 = load i32, i32* %75, align 8
  %77 = zext i32 %76 to i64
  %78 = icmp ult i64 %59, %77
  br i1 %78, label %87, label %79

79:                                               ; preds = %71
  %80 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 4, i64 %72
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  %83 = icmp ugt i64 %73, %82
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = add i32 %81, 1
  %86 = zext i32 %85 to i64
  br label %87

87:                                               ; preds = %71, %79, %84
  %88 = phi i64 [ %73, %71 ], [ %86, %84 ], [ %73, %79 ]
  %89 = or i64 %72, 1
  %90 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 3, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = icmp ult i64 %59, %92
  br i1 %93, label %632, label %624

94:                                               ; preds = %632, %65
  %95 = phi i64 [ undef, %65 ], [ %633, %632 ]
  %96 = phi i64 [ 0, %65 ], [ %634, %632 ]
  %97 = phi i64 [ %50, %65 ], [ %633, %632 ]
  %98 = icmp eq i64 %67, 0
  br i1 %98, label %112, label %99

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 3, i64 %96
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = icmp ult i64 %59, %102
  br i1 %103, label %112, label %104

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 4, i64 %96
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %106 to i64
  %108 = icmp ugt i64 %97, %107
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = add i32 %106, 1
  %111 = zext i32 %110 to i64
  br label %112

112:                                              ; preds = %94, %99, %104, %109, %61, %47
  %113 = phi i64 [ 0, %47 ], [ %50, %61 ], [ %95, %94 ], [ %97, %99 ], [ %111, %109 ], [ %97, %104 ]
  %114 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 3
  %115 = load i32, i32* %114, align 8
  %116 = icmp eq i32 %115, 2
  %117 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 1
  %118 = load i32, i32* %117, align 8
  %119 = zext i32 %118 to i64
  %120 = select i1 %116, i64 %119, i64 %113
  %121 = icmp ugt i64 %120, %119
  %122 = select i1 %121, i64 %119, i64 %120
  %123 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 4
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"struct.jxl::DecompressParams", %"struct.jxl::DecompressParams"* %0, i64 0, i32 2
  %125 = load i8, i8* %124, align 2, !range !9
  store i8 %125, i8* %30, align 2
  %126 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 2
  %127 = bitcast i8** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 4
  %130 = bitcast i8** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %128, %131
  %133 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 5
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %132, %134
  %136 = shl i64 %135, 3
  %137 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 1
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %136, %138
  %140 = lshr i64 %139, 3
  %141 = bitcast %"class.jxl::Status"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %141) #12
  %142 = getelementptr inbounds %"class.jxl::Status", %"class.jxl::Status"* %10, i64 0, i32 0
  store i32 0, i32* %142, align 4
  %143 = bitcast %"class.std::__1::vector.286"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #12
  %144 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %11, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %11, i64 0, i32 0, i32 1
  %146 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #12
  %147 = bitcast %"class.std::__1::vector.299"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #12
  %148 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %12, i64 0, i32 0, i32 0
  %149 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %12, i64 0, i32 0, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %147, i8 0, i64 24, i1 false) #12
  %151 = bitcast %"class.std::__1::vector.312"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %151) #12
  %152 = getelementptr inbounds %"class.std::__1::vector.312", %"class.std::__1::vector.312"* %13, i64 0, i32 0, i32 0
  %153 = getelementptr inbounds %"class.std::__1::vector.312", %"class.std::__1::vector.312"* %13, i64 0, i32 0, i32 1
  %154 = getelementptr inbounds %"class.std::__1::vector.312", %"class.std::__1::vector.312"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 24, i1 false) #12
  %155 = bitcast %"class.std::__1::vector.319"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #12
  %156 = getelementptr inbounds %"class.std::__1::vector.319", %"class.std::__1::vector.319"* %14, i64 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.std::__1::vector.319", %"class.std::__1::vector.319"* %14, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 0, i64 24, i1 false) #12
  %158 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 3
  %159 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 3, i32 0, i32 1
  %160 = bitcast i32** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast %"class.std::__1::vector"* %158 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = icmp eq i64 %161, %163
  br i1 %164, label %395, label %165

165:                                              ; preds = %112
  %166 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %20, i64 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 3
  %168 = bitcast %"class.std::__1::unique_ptr.288"* %15 to i8*
  %169 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %15, i64 0, i32 0, i32 0, i32 0
  %170 = bitcast %"class.std::__1::unique_ptr.288"* %15 to i8**
  %171 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"** %153 to i64*
  %172 = bitcast %"class.std::__1::vector.312"* %13 to i64*
  %173 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"** %154 to i64*
  %174 = bitcast %"class.std::__1::unique_ptr.301"* %16 to i8*
  %175 = bitcast %"class.std::__1::unique_ptr.288"* %15 to i64*
  %176 = ptrtoint %"class.jxl::Status"* %10 to i64
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %16, i64 0, i32 0, i32 0, i32 0
  %178 = bitcast %"class.std::__1::unique_ptr.301"* %16 to i8**
  %179 = bitcast %"class.std::__1::unique_ptr.301"** %149 to i64*
  %180 = bitcast %"class.std::__1::unique_ptr.288"** %145 to i64*
  br label %181

181:                                              ; preds = %388, %165
  %182 = phi i64 [ %163, %165 ], [ %382, %388 ]
  %183 = phi i64 [ %161, %165 ], [ %383, %388 ]
  %184 = phi i64 [ %131, %165 ], [ %390, %388 ]
  %185 = phi i64 [ %138, %165 ], [ %392, %388 ]
  %186 = phi i64 [ %134, %165 ], [ %391, %388 ]
  %187 = phi i64 [ %128, %165 ], [ %389, %388 ]
  %188 = phi i64 [ 0, %165 ], [ %198, %388 ]
  %189 = phi i64 [ 0, %165 ], [ %384, %388 ]
  %190 = inttoptr i64 %182 to i32*
  %191 = load i64*, i64** %166, align 8
  %192 = getelementptr inbounds i64, i64* %191, i64 %189
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds i32, i32* %190, i64 %189
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  %197 = add i64 %193, %196
  %198 = add i64 %188, %196
  %199 = sub i64 %187, %184
  %200 = add i64 %199, %186
  %201 = shl i64 %200, 3
  %202 = sub i64 %201, %185
  %203 = lshr i64 %202, 3
  %204 = add i64 %197, %203
  %205 = load i8*, i8** %167, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 8
  %207 = ptrtoint i8* %206 to i64
  %208 = sub i64 %207, %184
  %209 = icmp ugt i64 %204, %208
  br i1 %209, label %378, label %210

210:                                              ; preds = %181
  %211 = inttoptr i64 %184 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %168) #12
  store %"class.jxl::BitReader"* inttoptr (i64 -6148914691236517206 to %"class.jxl::BitReader"*), %"class.jxl::BitReader"** %169, align 8
  %212 = getelementptr inbounds i8, i8* %211, i64 %193
  %213 = getelementptr inbounds i8, i8* %212, i64 %203
  %214 = call i8* @_Znwm(i64 64) #15
  %215 = getelementptr inbounds i8, i8* %214, i64 16
  %216 = bitcast i8* %215 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %214, i8 0, i64 16, i1 false) #12
  store i8* %213, i8** %216, align 8
  %217 = getelementptr inbounds i8, i8* %214, i64 24
  %218 = bitcast i8* %217 to i8**
  %219 = getelementptr inbounds i8, i8* %213, i64 -8
  %220 = getelementptr inbounds i8, i8* %219, i64 %196
  store i8* %220, i8** %218, align 8
  %221 = getelementptr inbounds i8, i8* %214, i64 32
  %222 = ptrtoint i8* %213 to i64
  %223 = bitcast i8* %221 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds i8, i8* %214, i64 40
  %225 = bitcast i8* %224 to i64*
  store i64 0, i64* %225, align 8
  %226 = getelementptr inbounds i8, i8* %214, i64 48
  store i8 0, i8* %226, align 8
  %227 = getelementptr inbounds i8, i8* %214, i64 56
  %228 = bitcast i8* %227 to i64*
  store i64 0, i64* %228, align 8
  %229 = icmp ugt i8* %213, %220
  br i1 %229, label %230, label %232, !prof !8

230:                                              ; preds = %210
  %231 = bitcast i8* %214 to %"class.jxl::BitReader"*
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* nonnull %231) #12
  br label %239

232:                                              ; preds = %210
  %233 = bitcast i8* %214 to i64*
  %234 = getelementptr inbounds i8, i8* %214, i64 8
  %235 = bitcast i8* %234 to i64*
  %236 = bitcast i8* %213 to i64*
  %237 = load i64, i64* %236, align 1
  store i64 %237, i64* %233, align 8
  %238 = getelementptr inbounds i8, i8* %213, i64 7
  store i8* %238, i8** %216, align 8
  store i64 56, i64* %235, align 8
  br label %239

239:                                              ; preds = %230, %232
  store i8* %214, i8** %170, align 8
  %240 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %153, align 8
  %241 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %154, align 8
  %242 = icmp ult %"struct.jxl::FrameDecoder::SectionInfo"* %240, %241
  %243 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %241 to i64
  br i1 %242, label %244, label %249

244:                                              ; preds = %239
  %245 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"* %240 to i8**
  store i8* %214, i8** %245, align 8
  %246 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %240, i64 0, i32 1
  store i64 %189, i64* %246, align 8
  %247 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %240, i64 1
  %248 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %247 to i64
  store i64 %248, i64* %171, align 8
  br label %294

249:                                              ; preds = %239
  %250 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %240 to i64
  %251 = load i64, i64* %172, align 8
  %252 = sub i64 %250, %251
  %253 = ashr exact i64 %252, 4
  %254 = add nsw i64 %253, 1
  %255 = icmp ugt i64 %254, 1152921504606846975
  br i1 %255, label %256, label %258

256:                                              ; preds = %249
  %257 = bitcast %"class.std::__1::vector.312"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %257) #14
  unreachable

258:                                              ; preds = %249
  %259 = sub i64 %243, %251
  %260 = ashr exact i64 %259, 4
  %261 = icmp ult i64 %260, 576460752303423487
  br i1 %261, label %262, label %270

262:                                              ; preds = %258
  %263 = ashr exact i64 %259, 3
  %264 = icmp ult i64 %263, %254
  %265 = select i1 %264, i64 %254, i64 %263
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %275, label %267

267:                                              ; preds = %262
  %268 = icmp ugt i64 %265, 1152921504606846975
  br i1 %268, label %269, label %270

269:                                              ; preds = %267
  call void @abort() #14
  unreachable

270:                                              ; preds = %267, %258
  %271 = phi i64 [ %265, %267 ], [ 1152921504606846975, %258 ]
  %272 = shl i64 %271, 4
  %273 = call i8* @_Znwm(i64 %272) #15
  %274 = bitcast i8* %273 to %"struct.jxl::FrameDecoder::SectionInfo"*
  br label %275

275:                                              ; preds = %270, %262
  %276 = phi i64 [ %271, %270 ], [ 0, %262 ]
  %277 = phi i8* [ %273, %270 ], [ null, %262 ]
  %278 = phi %"struct.jxl::FrameDecoder::SectionInfo"* [ %274, %270 ], [ null, %262 ]
  %279 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %278, i64 %253
  %280 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %278, i64 %276
  %281 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %280 to i64
  %282 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"* %279 to i8**
  store i8* %214, i8** %282, align 8
  %283 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %278, i64 %253, i32 1
  store i64 %189, i64* %283, align 8
  %284 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %279, i64 1
  %285 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %284 to i64
  %286 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %278 to i64
  %287 = icmp sgt i64 %252, 0
  br i1 %287, label %288, label %290

288:                                              ; preds = %275
  %289 = inttoptr i64 %251 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %277, i8* align 8 %289, i64 %252, i1 false) #12
  br label %290

290:                                              ; preds = %288, %275
  store i64 %286, i64* %172, align 8
  store i64 %285, i64* %171, align 8
  store i64 %281, i64* %173, align 8
  %291 = icmp eq i64 %251, 0
  br i1 %291, label %294, label %292

292:                                              ; preds = %290
  %293 = inttoptr i64 %251 to i8*
  call void @_ZdlPv(i8* %293) #15
  br label %294

294:                                              ; preds = %244, %290, %292
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %174) #12
  %295 = load i64, i64* %175, align 8
  %296 = call i8* @_Znwm(i64 16) #15
  %297 = bitcast i8* %296 to i64*
  store i64 %295, i64* %297, align 8
  %298 = getelementptr inbounds i8, i8* %296, i64 8
  %299 = bitcast i8* %298 to i64*
  store i64 %176, i64* %299, align 8
  store i8* %296, i8** %178, align 8
  %300 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %149, align 8
  %301 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %150, align 8
  %302 = icmp ult %"class.std::__1::unique_ptr.301"* %300, %301
  br i1 %302, label %303, label %308

303:                                              ; preds = %294
  %304 = ptrtoint i8* %296 to i64
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %177, align 8
  %305 = bitcast %"class.std::__1::unique_ptr.301"* %300 to i64*
  store i64 %304, i64* %305, align 8
  %306 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %300, i64 1
  %307 = ptrtoint %"class.std::__1::unique_ptr.301"* %306 to i64
  store i64 %307, i64* %179, align 8
  br label %309

308:                                              ; preds = %294
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl21BitReaderScopedCloserENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.299"* nonnull %12, %"class.std::__1::unique_ptr.301"* nonnull dereferenceable(8) %16) #12
  br label %309

309:                                              ; preds = %303, %308
  %310 = load %"class.jxl::BitReaderScopedCloser"*, %"class.jxl::BitReaderScopedCloser"** %177, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %177, align 8
  %311 = icmp eq %"class.jxl::BitReaderScopedCloser"* %310, null
  br i1 %311, label %349, label %312

312:                                              ; preds = %309
  %313 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %310, i64 0, i32 0
  %314 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %313, align 8
  %315 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 6
  store i8 1, i8* %315, align 8
  %316 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 4
  %317 = load i8*, i8** %316, align 8
  %318 = icmp eq i8* %317, null
  %319 = ptrtoint i8* %317 to i64
  br i1 %318, label %347, label %320

320:                                              ; preds = %312
  %321 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 2
  %322 = bitcast i8** %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = sub i64 %323, %319
  %325 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 5
  %326 = load i64, i64* %325, align 8
  %327 = add i64 %324, %326
  %328 = shl i64 %327, 3
  %329 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 1
  %330 = load i64, i64* %329, align 8
  %331 = sub i64 %328, %330
  %332 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 7
  %333 = load i64, i64* %332, align 8
  %334 = icmp ugt i64 %331, %333
  br i1 %334, label %335, label %347

335:                                              ; preds = %320
  %336 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %314, i64 0, i32 3
  %337 = load i8*, i8** %336, align 8
  %338 = getelementptr inbounds i8, i8* %337, i64 8
  %339 = ptrtoint i8* %338 to i64
  %340 = sub i64 %339, %319
  %341 = shl i64 %340, 3
  %342 = icmp ugt i64 %331, %341
  br i1 %342, label %343, label %347

343:                                              ; preds = %335
  %344 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %310, i64 0, i32 1
  %345 = bitcast %"class.jxl::Status"** %344 to i32**
  %346 = load i32*, i32** %345, align 8
  store i32 1, i32* %346, align 4
  br label %347

347:                                              ; preds = %343, %335, %320, %312
  %348 = bitcast %"class.jxl::BitReaderScopedCloser"* %310 to i8*
  call void @_ZdlPv(i8* %348) #15
  br label %349

349:                                              ; preds = %309, %347
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %174) #12
  %350 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %145, align 8
  %351 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %146, align 8
  %352 = icmp ult %"class.std::__1::unique_ptr.288"* %350, %351
  br i1 %352, label %353, label %358

353:                                              ; preds = %349
  %354 = load i64, i64* %175, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %169, align 8
  %355 = bitcast %"class.std::__1::unique_ptr.288"* %350 to i64*
  store i64 %354, i64* %355, align 8
  %356 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %350, i64 1
  %357 = ptrtoint %"class.std::__1::unique_ptr.288"* %356 to i64
  store i64 %357, i64* %180, align 8
  br label %359

358:                                              ; preds = %349
  call void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitReaderENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.286"* nonnull %11, %"class.std::__1::unique_ptr.288"* nonnull dereferenceable(8) %15) #12
  br label %359

359:                                              ; preds = %353, %358
  %360 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %169, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %169, align 8
  %361 = icmp eq %"class.jxl::BitReader"* %360, null
  br i1 %361, label %375, label %362

362:                                              ; preds = %359
  %363 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %360, i64 0, i32 6
  %364 = load i8, i8* %363, align 8, !range !9
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %366, label %373

366:                                              ; preds = %362
  %367 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %360, i64 0, i32 4
  %368 = load i8*, i8** %367, align 8
  %369 = icmp eq i8* %368, null
  br i1 %369, label %373, label %370

370:                                              ; preds = %366
  %371 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.88, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.89, i64 0, i64 0)) #12
  %372 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

373:                                              ; preds = %366, %362
  %374 = bitcast %"class.jxl::BitReader"* %360 to i8*
  call void @_ZdlPv(i8* %374) #15
  br label %375

375:                                              ; preds = %359, %373
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %168) #12
  %376 = load i64, i64* %160, align 8
  %377 = load i64, i64* %162, align 8
  br label %381

378:                                              ; preds = %181
  %379 = load i8, i8* %38, align 8, !range !9
  %380 = icmp eq i8 %379, 0
  br i1 %380, label %499, label %381

381:                                              ; preds = %378, %375
  %382 = phi i64 [ %182, %378 ], [ %377, %375 ]
  %383 = phi i64 [ %183, %378 ], [ %376, %375 ]
  %384 = add nuw i64 %189, 1
  %385 = sub i64 %383, %382
  %386 = ashr exact i64 %385, 2
  %387 = icmp ult i64 %384, %386
  br i1 %387, label %388, label %393

388:                                              ; preds = %381
  %389 = load i64, i64* %127, align 8
  %390 = load i64, i64* %130, align 8
  %391 = load i64, i64* %133, align 8
  %392 = load i64, i64* %137, align 8
  br label %181

393:                                              ; preds = %381
  %394 = load i64, i64* %137, align 8
  br label %395

395:                                              ; preds = %393, %112
  %396 = phi i64 [ %138, %112 ], [ %394, %393 ]
  %397 = phi i64 [ 0, %112 ], [ %198, %393 ]
  %398 = shl i64 %397, 3
  %399 = icmp ult i64 %396, %398
  br i1 %399, label %405, label %400, !prof !7

400:                                              ; preds = %395
  %401 = sub i64 %396, %398
  store i64 %401, i64* %137, align 8
  %402 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 0
  %403 = load i64, i64* %402, align 8
  %404 = lshr i64 %403, %398
  br label %428

405:                                              ; preds = %395
  %406 = sub i64 %398, %396
  %407 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 0
  %408 = lshr i64 %406, 3
  %409 = bitcast %"class.jxl::BitReader"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %409, i8 0, i64 16, i1 false) #12
  %410 = load i8*, i8** %126, align 8
  %411 = getelementptr inbounds i8, i8* %410, i64 %408
  store i8* %411, i8** %126, align 8
  %412 = and i64 %406, 7
  %413 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %3, i64 0, i32 3
  %414 = load i8*, i8** %413, align 8
  %415 = icmp ugt i8* %411, %414
  br i1 %415, label %416, label %419, !prof !8

416:                                              ; preds = %405
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %3) #12
  %417 = load i64, i64* %137, align 8
  %418 = load i64, i64* %407, align 8
  br label %423

419:                                              ; preds = %405
  %420 = bitcast i8* %411 to i64*
  %421 = load i64, i64* %420, align 1
  store i64 %421, i64* %407, align 8
  %422 = getelementptr inbounds i8, i8* %411, i64 7
  store i8* %422, i8** %126, align 8
  store i64 56, i64* %137, align 8
  br label %423

423:                                              ; preds = %419, %416
  %424 = phi i64 [ %418, %416 ], [ %421, %419 ]
  %425 = phi i64 [ %417, %416 ], [ 56, %419 ]
  %426 = sub i64 %425, %412
  store i64 %426, i64* %137, align 8
  %427 = lshr i64 %424, %412
  br label %428

428:                                              ; preds = %400, %423
  %429 = phi i64* [ %402, %400 ], [ %407, %423 ]
  %430 = phi i64 [ %404, %400 ], [ %427, %423 ]
  store i64 %430, i64* %429, align 8
  %431 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"** %153 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = bitcast %"class.std::__1::vector.312"* %13 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = sub i64 %432, %434
  %436 = ashr exact i64 %435, 4
  %437 = bitcast i32** %157 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.std::__1::vector.319"* %14 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = sub i64 %438, %440
  %442 = ashr exact i64 %441, 2
  %443 = icmp ugt i64 %436, %442
  %444 = inttoptr i64 %440 to i32*
  %445 = inttoptr i64 %434 to %"struct.jxl::FrameDecoder::SectionInfo"*
  br i1 %443, label %446, label %451

446:                                              ; preds = %428
  %447 = sub nsw i64 %436, %442
  call void @_ZNSt3__16vectorIN3jxl12FrameDecoder13SectionStatusENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.319"* nonnull %14, i64 %447) #12
  %448 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %152, align 8
  %449 = load i64, i64* %431, align 8
  %450 = load i32*, i32** %156, align 8
  br label %455

451:                                              ; preds = %428
  %452 = icmp ult i64 %436, %442
  br i1 %452, label %453, label %455

453:                                              ; preds = %451
  %454 = getelementptr inbounds i32, i32* %444, i64 %436
  store i32* %454, i32** %157, align 8
  br label %455

455:                                              ; preds = %446, %451, %453
  %456 = phi i32* [ %450, %446 ], [ %444, %451 ], [ %444, %453 ]
  %457 = phi i64 [ %449, %446 ], [ %432, %451 ], [ %432, %453 ]
  %458 = phi %"struct.jxl::FrameDecoder::SectionInfo"* [ %448, %446 ], [ %445, %451 ], [ %445, %453 ]
  %459 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %458 to i64
  %460 = sub i64 %457, %459
  %461 = ashr exact i64 %460, 4
  %462 = call i32 @_ZN3jxl12FrameDecoder15ProcessSectionsEPKNS0_11SectionInfoEmPNS0_13SectionStatusE(%"class.jxl::FrameDecoder"* nonnull %9, %"struct.jxl::FrameDecoder::SectionInfo"* %458, i64 %461, i32* %456)
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %464, label %499

464:                                              ; preds = %455
  %465 = load i64, i64* %437, align 8
  %466 = load i64, i64* %439, align 8
  %467 = icmp eq i64 %465, %466
  %468 = inttoptr i64 %466 to i32*
  br i1 %467, label %503, label %469

469:                                              ; preds = %464
  %470 = load i8, i8* %41, align 1
  %471 = icmp ne i8 %470, 0
  %472 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %158, i64 0, i32 0, i32 0
  %473 = sub i64 %465, %466
  %474 = ashr exact i64 %473, 2
  %475 = load i32*, i32** %472, align 8
  br label %476

476:                                              ; preds = %469, %495
  %477 = phi i64 [ %140, %469 ], [ %496, %495 ]
  %478 = phi i64 [ 0, %469 ], [ %497, %495 ]
  %479 = getelementptr inbounds i32, i32* %468, i64 %478
  %480 = load i32, i32* %479, align 4
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %482, label %487

482:                                              ; preds = %476
  %483 = getelementptr inbounds i32, i32* %475, i64 %478
  %484 = load i32, i32* %483, align 4
  %485 = zext i32 %484 to i64
  %486 = add i64 %477, %485
  br label %495

487:                                              ; preds = %476
  %488 = icmp eq i32 %480, 3
  %489 = and i1 %488, %471
  br i1 %489, label %495, label %490

490:                                              ; preds = %487
  %491 = load i64, i64* %51, align 8
  %492 = icmp ugt i64 %491, 1
  %493 = icmp eq i32 %480, 1
  %494 = and i1 %493, %492
  br i1 %494, label %495, label %499

495:                                              ; preds = %482, %487, %490
  %496 = phi i64 [ %477, %490 ], [ %477, %487 ], [ %486, %482 ]
  %497 = add nuw i64 %478, 1
  %498 = icmp ult i64 %497, %474
  br i1 %498, label %476, label %503

499:                                              ; preds = %378, %490, %455
  %500 = phi i32 [ %462, %455 ], [ 1, %490 ], [ 1, %378 ]
  %501 = phi i64 [ %140, %455 ], [ %477, %490 ], [ %140, %378 ]
  %502 = load i32*, i32** %156, align 8
  br label %503

503:                                              ; preds = %495, %464, %499
  %504 = phi i32* [ %502, %499 ], [ %468, %464 ], [ %468, %495 ]
  %505 = phi i32 [ %500, %499 ], [ 0, %464 ], [ 0, %495 ]
  %506 = phi i64 [ %501, %499 ], [ %140, %464 ], [ %496, %495 ]
  %507 = phi i32 [ 1, %499 ], [ 0, %464 ], [ 0, %495 ]
  %508 = icmp eq i32* %504, null
  br i1 %508, label %513, label %509

509:                                              ; preds = %503
  %510 = ptrtoint i32* %504 to i64
  %511 = bitcast i32** %157 to i64*
  store i64 %510, i64* %511, align 8
  %512 = bitcast i32* %504 to i8*
  call void @_ZdlPv(i8* %512) #15
  br label %513

513:                                              ; preds = %503, %509
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #12
  %514 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %152, align 8
  %515 = icmp eq %"struct.jxl::FrameDecoder::SectionInfo"* %514, null
  br i1 %515, label %520, label %516

516:                                              ; preds = %513
  %517 = ptrtoint %"struct.jxl::FrameDecoder::SectionInfo"* %514 to i64
  %518 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"** %153 to i64*
  store i64 %517, i64* %518, align 8
  %519 = bitcast %"struct.jxl::FrameDecoder::SectionInfo"* %514 to i8*
  call void @_ZdlPv(i8* %519) #15
  br label %520

520:                                              ; preds = %513, %516
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %151) #12
  %521 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %148, align 8
  %522 = icmp eq %"class.std::__1::unique_ptr.301"* %521, null
  br i1 %522, label %577, label %523

523:                                              ; preds = %520
  %524 = bitcast %"class.std::__1::unique_ptr.301"* %521 to i8*
  %525 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %149, align 8
  %526 = icmp eq %"class.std::__1::unique_ptr.301"* %525, %521
  br i1 %526, label %575, label %527

527:                                              ; preds = %523, %570
  %528 = phi %"class.std::__1::unique_ptr.301"* [ %529, %570 ], [ %525, %523 ]
  %529 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %528, i64 -1
  %530 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %529, i64 0, i32 0, i32 0, i32 0
  %531 = load %"class.jxl::BitReaderScopedCloser"*, %"class.jxl::BitReaderScopedCloser"** %530, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %530, align 8
  %532 = icmp eq %"class.jxl::BitReaderScopedCloser"* %531, null
  br i1 %532, label %570, label %533

533:                                              ; preds = %527
  %534 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %531, i64 0, i32 0
  %535 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %534, align 8
  %536 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 6
  store i8 1, i8* %536, align 8
  %537 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 4
  %538 = load i8*, i8** %537, align 8
  %539 = icmp eq i8* %538, null
  %540 = ptrtoint i8* %538 to i64
  br i1 %539, label %568, label %541

541:                                              ; preds = %533
  %542 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 2
  %543 = bitcast i8** %542 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = sub i64 %544, %540
  %546 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 5
  %547 = load i64, i64* %546, align 8
  %548 = add i64 %545, %547
  %549 = shl i64 %548, 3
  %550 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 1
  %551 = load i64, i64* %550, align 8
  %552 = sub i64 %549, %551
  %553 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 7
  %554 = load i64, i64* %553, align 8
  %555 = icmp ugt i64 %552, %554
  br i1 %555, label %556, label %568

556:                                              ; preds = %541
  %557 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %535, i64 0, i32 3
  %558 = load i8*, i8** %557, align 8
  %559 = getelementptr inbounds i8, i8* %558, i64 8
  %560 = ptrtoint i8* %559 to i64
  %561 = sub i64 %560, %540
  %562 = shl i64 %561, 3
  %563 = icmp ugt i64 %552, %562
  br i1 %563, label %564, label %568

564:                                              ; preds = %556
  %565 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %531, i64 0, i32 1
  %566 = bitcast %"class.jxl::Status"** %565 to i32**
  %567 = load i32*, i32** %566, align 8
  store i32 1, i32* %567, align 4
  br label %568

568:                                              ; preds = %564, %556, %541, %533
  %569 = bitcast %"class.jxl::BitReaderScopedCloser"* %531 to i8*
  call void @_ZdlPv(i8* %569) #15
  br label %570

570:                                              ; preds = %568, %527
  %571 = icmp eq %"class.std::__1::unique_ptr.301"* %529, %521
  br i1 %571, label %572, label %527

572:                                              ; preds = %570
  %573 = bitcast %"class.std::__1::vector.299"* %12 to i8**
  %574 = load i8*, i8** %573, align 8
  br label %575

575:                                              ; preds = %572, %523
  %576 = phi i8* [ %574, %572 ], [ %524, %523 ]
  store %"class.std::__1::unique_ptr.301"* %521, %"class.std::__1::unique_ptr.301"** %149, align 8
  call void @_ZdlPv(i8* %576) #15
  br label %577

577:                                              ; preds = %520, %575
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #12
  %578 = icmp eq i32 %507, 0
  br i1 %578, label %579, label %587

579:                                              ; preds = %577
  %580 = load i32, i32* %142, align 4
  %581 = icmp eq i32 %580, 0
  br i1 %581, label %582, label %587

582:                                              ; preds = %579
  %583 = call i32 @_ZN3jxl12FrameDecoder13FinalizeFrameEv(%"class.jxl::FrameDecoder"* nonnull %9)
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %587

585:                                              ; preds = %582
  %586 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %4, i64 0, i32 13
  store i64 %506, i64* %586, align 8
  br label %587

587:                                              ; preds = %582, %579, %577, %585
  %588 = phi i32 [ 0, %585 ], [ %505, %577 ], [ %580, %579 ], [ %583, %582 ]
  %589 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %144, align 8
  %590 = icmp eq %"class.std::__1::unique_ptr.288"* %589, null
  br i1 %590, label %621, label %591

591:                                              ; preds = %587
  %592 = bitcast %"class.std::__1::unique_ptr.288"* %589 to i8*
  %593 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %145, align 8
  %594 = icmp eq %"class.std::__1::unique_ptr.288"* %593, %589
  br i1 %594, label %619, label %595

595:                                              ; preds = %591, %614
  %596 = phi %"class.std::__1::unique_ptr.288"* [ %597, %614 ], [ %593, %591 ]
  %597 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %596, i64 -1
  %598 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %597, i64 0, i32 0, i32 0, i32 0
  %599 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %598, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %598, align 8
  %600 = icmp eq %"class.jxl::BitReader"* %599, null
  br i1 %600, label %614, label %601

601:                                              ; preds = %595
  %602 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %599, i64 0, i32 6
  %603 = load i8, i8* %602, align 8, !range !9
  %604 = icmp eq i8 %603, 0
  br i1 %604, label %605, label %612

605:                                              ; preds = %601
  %606 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %599, i64 0, i32 4
  %607 = load i8*, i8** %606, align 8
  %608 = icmp eq i8* %607, null
  br i1 %608, label %612, label %609

609:                                              ; preds = %605
  %610 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.88, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.89, i64 0, i64 0)) #12
  %611 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

612:                                              ; preds = %605, %601
  %613 = bitcast %"class.jxl::BitReader"* %599 to i8*
  call void @_ZdlPv(i8* %613) #15
  br label %614

614:                                              ; preds = %612, %595
  %615 = icmp eq %"class.std::__1::unique_ptr.288"* %597, %589
  br i1 %615, label %616, label %595

616:                                              ; preds = %614
  %617 = bitcast %"class.std::__1::vector.286"* %11 to i8**
  %618 = load i8*, i8** %617, align 8
  br label %619

619:                                              ; preds = %616, %591
  %620 = phi i8* [ %618, %616 ], [ %592, %591 ]
  store %"class.std::__1::unique_ptr.288"* %589, %"class.std::__1::unique_ptr.288"** %145, align 8
  call void @_ZdlPv(i8* %620) #15
  br label %621

621:                                              ; preds = %587, %619
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %141) #12
  br label %622

622:                                              ; preds = %8, %621
  %623 = phi i32 [ %588, %621 ], [ %45, %8 ]
  call void @_ZN3jxl12FrameDecoderD2Ev(%"class.jxl::FrameDecoder"* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 1480, i8* nonnull %17) #12
  ret i32 %623

624:                                              ; preds = %87
  %625 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %9, i64 0, i32 5, i32 12, i32 4, i64 %89
  %626 = load i32, i32* %625, align 4
  %627 = zext i32 %626 to i64
  %628 = icmp ugt i64 %88, %627
  br i1 %628, label %629, label %632

629:                                              ; preds = %624
  %630 = add i32 %626, 1
  %631 = zext i32 %630 to i64
  br label %632

632:                                              ; preds = %629, %624, %87
  %633 = phi i64 [ %88, %87 ], [ %631, %629 ], [ %88, %624 ]
  %634 = add nuw nsw i64 %72, 2
  %635 = add i64 %74, -2
  %636 = icmp eq i64 %635, 0
  br i1 %636, label %94, label %71
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder9InitFrameEPNS_9BitReaderEPNS_11ImageBundleEbbb(%"class.jxl::FrameDecoder"*, %"class.jxl::BitReader"* noalias, %"class.jxl::ImageBundle"*, i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca { i32, i32, i32, i32, i64 }, align 8
  %8 = alloca { i32, i32, i32, i32, i64 }, align 8
  %9 = alloca %"class.jxl::DequantMatrices", align 8
  %10 = alloca %"struct.jxl::FrameDimensions", align 8
  %11 = alloca i64, align 8
  %12 = alloca i8, align 1
  %13 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  store %"class.jxl::ImageBundle"* %2, %"class.jxl::ImageBundle"** %13, align 8
  %14 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 19
  %15 = load i8, i8* %14, align 1, !range !9
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %6
  %18 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 247, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0)) #12
  %19 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

20:                                               ; preds = %6
  %21 = zext i1 %5 to i8
  %22 = zext i1 %4 to i8
  %23 = zext i1 %3 to i8
  %24 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 9
  store i8 %22, i8* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 10
  store i8 %21, i8* %25, align 1
  %26 = bitcast %"class.jxl::DequantMatrices"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 736, i8* nonnull %26) #12
  call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* nonnull %9)
  %27 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %28 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.jxl::DequantMatrices"* %9 to i64*
  %32 = load i64, i64* %31, align 8
  store float* null, float** %30, align 8
  %33 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %29, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load float*, float** %33, align 8
  %35 = bitcast %"class.jxl::DequantMatrices"* %29 to i64*
  store i64 %32, i64* %35, align 8
  %36 = icmp eq float* %34, null
  br i1 %36, label %43, label %37

37:                                               ; preds = %20
  %38 = bitcast float* %34 to i8*
  %39 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %40 = load void (i8*, i8*)*, void (i8*, i8*)** %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %38, void (i8*, i8*)* %40, i8* %42) #12
  br label %43

43:                                               ; preds = %37, %20
  %44 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 0, i32 0, i32 1, i32 0
  %45 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 0, i32 0, i32 1, i32 0
  %46 = bitcast %"class.hwy::AlignedFreer"* %45 to i8*
  %47 = bitcast %"class.hwy::AlignedFreer"* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false) #12
  %48 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 1
  %49 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 1
  %50 = bitcast float** %48 to i8*
  %51 = bitcast float** %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 688, i1 false) #12
  %52 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 6
  %53 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 6
  %54 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %52, i64 0, i32 0, i32 0
  %55 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %54, align 8
  %56 = icmp eq %"class.jxl::QuantEncoding"* %55, null
  br i1 %56, label %92, label %57

57:                                               ; preds = %43
  %58 = bitcast %"class.jxl::QuantEncoding"* %55 to i8*
  %59 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 6, i32 0, i32 1
  %60 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %59, align 8
  %61 = icmp eq %"class.jxl::QuantEncoding"* %60, %55
  br i1 %61, label %89, label %62

62:                                               ; preds = %57, %84
  %63 = phi %"class.jxl::QuantEncoding"* [ %64, %84 ], [ %60, %57 ]
  %64 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %63, i64 -1
  %65 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %64, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, 7
  br i1 %67, label %68, label %84

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %63, i64 -1, i32 0, i32 3
  %70 = bitcast %union.anon.37* %69 to %"class.std::__1::vector.47"**
  %71 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %70, align 8
  %72 = icmp eq %"class.std::__1::vector.47"* %71, null
  br i1 %72, label %84, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %71, i64 0, i32 0, i32 0
  %75 = load i32*, i32** %74, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = ptrtoint i32* %75 to i64
  %79 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %71, i64 0, i32 0, i32 1
  %80 = bitcast i32** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast i32* %75 to i8*
  call void @_ZdlPv(i8* %81) #15
  br label %82

82:                                               ; preds = %77, %73
  %83 = bitcast %"class.std::__1::vector.47"* %71 to i8*
  call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %68, %62
  %85 = icmp eq %"class.jxl::QuantEncoding"* %64, %55
  br i1 %85, label %86, label %62

86:                                               ; preds = %84
  %87 = bitcast %"class.std::__1::vector.34"* %52 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %86, %57
  %90 = phi i8* [ %88, %86 ], [ %58, %57 ]
  store %"class.jxl::QuantEncoding"* %55, %"class.jxl::QuantEncoding"** %59, align 8
  call void @_ZdlPv(i8* %90) #15
  %91 = bitcast %"class.std::__1::vector.34"* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #12
  br label %92

92:                                               ; preds = %43, %89
  %93 = bitcast %"class.std::__1::vector.34"* %53 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8
  %95 = bitcast %"class.std::__1::vector.34"* %52 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %95, align 8
  %96 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %97 = bitcast %"class.jxl::QuantEncoding"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %28, i64 0, i32 0, i32 4, i32 6, i32 0, i32 2, i32 0, i32 0
  %100 = bitcast %"class.jxl::QuantEncoding"** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = bitcast %"class.std::__1::vector.34"* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 24, i1 false) #12
  %102 = load float*, float** %30, align 8
  store float* null, float** %30, align 8
  %103 = icmp eq float* %102, null
  br i1 %103, label %110, label %104

104:                                              ; preds = %92
  %105 = bitcast float* %102 to i8*
  %106 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %107 = load void (i8*, i8*)*, void (i8*, i8*)** %106, align 8
  %108 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %9, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %109 = load i8*, i8** %108, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %105, void (i8*, i8*)* %107, i8* %109) #12
  br label %110

110:                                              ; preds = %92, %104
  call void @llvm.lifetime.end.p0i8(i64 736, i8* nonnull %26) #12
  %111 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5
  %112 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 27
  store i8 %23, i8* %112, align 8
  %113 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 25
  %114 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %113, align 8, !alias.scope !10, !noalias !13
  %115 = icmp eq %"struct.jxl::CodecMetadata"* %114, null
  br i1 %115, label %116, label %119

116:                                              ; preds = %110
  %117 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)) #12
  %118 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

119:                                              ; preds = %110
  %120 = call i32 @_ZN3jxl15ReadFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"* %1, %"struct.jxl::FrameHeader"* %111) #12
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %506

122:                                              ; preds = %119
  %123 = bitcast %"struct.jxl::FrameDimensions"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %123) #12
  call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* nonnull sret %10, %"struct.jxl::FrameHeader"* %111)
  %124 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6
  %125 = bitcast %"struct.jxl::FrameDimensions"* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* nonnull align 8 %123, i64 144, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %123) #12
  %126 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %127 = load i32, i32* %126, align 8
  %128 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %124, i64 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 14
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 23
  %135 = load %"struct.jxl::SizeConstraints"*, %"struct.jxl::SizeConstraints"** %134, align 8
  %136 = icmp eq %"struct.jxl::SizeConstraints"* %135, null
  br i1 %136, label %156, label %137

137:                                              ; preds = %122
  %138 = icmp eq i64 %129, 0
  %139 = icmp eq i64 %131, 0
  %140 = or i1 %138, %139
  br i1 %140, label %506, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %"struct.jxl::SizeConstraints", %"struct.jxl::SizeConstraints"* %135, i64 0, i32 0
  %143 = load i32, i32* %142, align 8
  %144 = zext i32 %143 to i64
  %145 = icmp ugt i64 %129, %144
  br i1 %145, label %506, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"struct.jxl::SizeConstraints", %"struct.jxl::SizeConstraints"* %135, i64 0, i32 1
  %148 = load i32, i32* %147, align 4
  %149 = zext i32 %148 to i64
  %150 = icmp ugt i64 %131, %149
  br i1 %150, label %506, label %151

151:                                              ; preds = %146
  %152 = mul i64 %131, %129
  %153 = getelementptr inbounds %"struct.jxl::SizeConstraints", %"struct.jxl::SizeConstraints"* %135, i64 0, i32 2
  %154 = load i64, i64* %153, align 8
  %155 = icmp ugt i64 %152, %154
  br i1 %155, label %506, label %156

156:                                              ; preds = %151, %122
  %157 = zext i32 %127 to i64
  %158 = bitcast { i32, i32, i32, i32, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %158)
  %159 = bitcast { i32, i32, i32, i32, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %159)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %158, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %159, i8 0, i64 24, i1 false)
  %160 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10
  %161 = bitcast %"class.jxl::Image3"* %160 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %161, i8 0, i64 24, i1 false) #12
  %162 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %163 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %162, i64 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast %"class.std::__1::unique_ptr"* %162 to i64*
  store i64 0, i64* %165, align 8
  %166 = icmp eq i8* %164, null
  br i1 %166, label %168, label %167

167:                                              ; preds = %156
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %164) #12
  br label %168

168:                                              ; preds = %167, %156
  %169 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10, i32 0, i64 1
  %170 = bitcast %"class.jxl::Plane.97"* %169 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* nonnull align 8 %158, i64 24, i1 false) #12
  %171 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %171, i64 0, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  %174 = bitcast %"class.std::__1::unique_ptr"* %171 to i64*
  store i64 0, i64* %174, align 8
  %175 = icmp eq i8* %173, null
  br i1 %175, label %177, label %176

176:                                              ; preds = %168
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %173) #12
  br label %177

177:                                              ; preds = %176, %168
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10, i32 0, i64 2
  %179 = bitcast %"class.jxl::Plane.97"* %178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %179, i8* nonnull align 8 %159, i64 24, i1 false) #12
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %181 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %180, i64 0, i32 0, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = bitcast %"class.std::__1::unique_ptr"* %180 to i64*
  store i64 0, i64* %183, align 8
  %184 = icmp eq i8* %182, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %177
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %182) #12
  br label %186

186:                                              ; preds = %177, %185
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %158)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %159)
  %187 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 12, i32 0, i32 0
  %188 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %187, align 8
  %189 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 12, i32 0, i32 1
  %190 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %189, align 8
  %191 = icmp eq %"class.jxl::Plane.97"* %190, %188
  br i1 %191, label %201, label %192

192:                                              ; preds = %186, %199
  %193 = phi %"class.jxl::Plane.97"* [ %194, %199 ], [ %190, %186 ]
  %194 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %193, i64 -1
  %195 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %193, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  store i8* null, i8** %195, align 8
  %197 = icmp eq i8* %196, null
  br i1 %197, label %199, label %198

198:                                              ; preds = %192
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %196) #12
  br label %199

199:                                              ; preds = %198, %192
  %200 = icmp eq %"class.jxl::Plane.97"* %194, %188
  br i1 %200, label %201, label %192

201:                                              ; preds = %199, %186
  store %"class.jxl::Plane.97"* %188, %"class.jxl::Plane.97"** %189, align 8
  %202 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #12
  store i64 -6148914691236517206, i64* %11, align 8
  %203 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 15
  %204 = icmp eq i64 %133, 1
  %205 = icmp eq i32 %127, 1
  %206 = and i1 %205, %204
  br i1 %206, label %212, label %207

207:                                              ; preds = %201
  %208 = load i64, i64* %203, align 8
  %209 = mul i64 %133, %157
  %210 = add i64 %209, 2
  %211 = add i64 %210, %208
  br label %212

212:                                              ; preds = %201, %207
  %213 = phi i64 [ %211, %207 ], [ 1, %201 ]
  %214 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 2
  %215 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 3
  %216 = call i32 @_ZN3jxl16ReadGroupOffsetsEmPNS_9BitReaderEPNSt3__16vectorImNS2_9allocatorImEEEEPNS3_IjNS4_IjEEEEPm(i64 %213, %"class.jxl::BitReader"* %1, %"class.std::__1::vector.23"* %214, %"class.std::__1::vector"* %215, i64* nonnull %11) #12
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %504

218:                                              ; preds = %212
  %219 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %220 = bitcast i8** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %223 = bitcast i8** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = sub i64 %221, %224
  %226 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %227 = load i64, i64* %226, align 8
  %228 = add i64 %225, %227
  %229 = shl i64 %228, 3
  %230 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = sub i64 %229, %231
  %233 = lshr i64 %232, 3
  %234 = load i64, i64* %11, align 8
  %235 = xor i64 %233, -1
  %236 = icmp ugt i64 %234, %235
  br i1 %236, label %504, label %237

237:                                              ; preds = %218
  %238 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1, i64 1
  %239 = load i32, i32* %238, align 4
  %240 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1, i64 0
  %241 = load i32, i32* %240, align 4
  %242 = icmp eq i32 %241, %239
  br i1 %242, label %243, label %247

243:                                              ; preds = %237
  %244 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1, i64 2
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %245, %239
  br i1 %246, label %256, label %247

247:                                              ; preds = %237, %243
  %248 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 4
  %249 = load i64, i64* %248, align 8
  %250 = trunc i64 %249 to i8
  %251 = icmp slt i8 %250, 0
  br i1 %251, label %256, label %252

252:                                              ; preds = %247
  %253 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %254 = load i32, i32* %253, align 4
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %504, label %256

256:                                              ; preds = %243, %247, %252
  %257 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %27, align 8
  %258 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %257, i64 0, i32 0
  %259 = call i32 @_ZN3jxl27InitializePassesSharedStateERKNS_11FrameHeaderEPNS_17PassesSharedStateEb(%"struct.jxl::FrameHeader"* dereferenceable(576) %111, %"struct.jxl::PassesSharedState"* %258, i1 zeroext false) #12
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %504

261:                                              ; preds = %256
  %262 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %27, align 8
  call void @_ZN3jxl18PassesDecoderState4InitEv(%"struct.jxl::PassesDecoderState"* %262)
  %263 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 1
  %264 = bitcast %"struct.jxl::FrameDimensions"* %263 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %264, i8* align 8 %125, i64 144, i1 false) #12
  %265 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %266 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %265, align 8
  %267 = icmp eq %"struct.jxl::jpeg::JPEGData"* %266, null
  br i1 %267, label %464, label %268

268:                                              ; preds = %261
  %269 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %270 = load i32, i32* %269, align 4
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %504, label %272

272:                                              ; preds = %268
  %273 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %266, i64 0, i32 9
  %274 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %266, i64 0, i32 9, i32 0, i32 1
  %275 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.std::__1::vector.139"* %273 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = sub i64 %276, %278
  %280 = sdiv exact i64 %279, 48
  switch i64 %280, label %504 [
    i64 1, label %281
    i64 3, label %281
  ]

281:                                              ; preds = %272, %272
  %282 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %113, align 8
  %283 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %282, i64 0, i32 0, i32 5
  %284 = load i8, i8* %283, align 1, !range !9
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %286, label %504

286:                                              ; preds = %281
  %287 = load i64, i64* %128, align 8
  %288 = trunc i64 %287 to i32
  %289 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %266, i64 0, i32 1
  store i32 %288, i32* %289, align 8
  %290 = load i64, i64* %130, align 8
  %291 = trunc i64 %290 to i32
  %292 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %265, align 8
  %293 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %292, i64 0, i32 2
  store i32 %291, i32* %293, align 4
  %294 = load i64, i64* %275, align 8
  %295 = load i64, i64* %277, align 8
  %296 = sub i64 %294, %295
  %297 = icmp eq i64 %296, 48
  %298 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 8
  %299 = inttoptr i64 %295 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %297, label %380, label %300

300:                                              ; preds = %286
  %301 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 2
  %302 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %273, i64 0, i32 0, i32 0
  %303 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 9
  %304 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 3
  %305 = load i64, i64* %298, align 8
  %306 = load i8, i8* %301, align 4
  %307 = zext i8 %306 to i64
  %308 = load i32, i32* %240, align 4
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %309
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i64
  %313 = sub nsw i64 %307, %312
  %314 = lshr i64 %305, %313
  %315 = trunc i64 %314 to i32
  %316 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %299, i64 1, i32 4
  store i32 %315, i32* %316, align 8
  %317 = load i64, i64* %303, align 8
  %318 = load i8, i8* %304, align 1
  %319 = zext i8 %318 to i64
  %320 = load i32, i32* %240, align 4
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %321
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i64
  %325 = sub nsw i64 %319, %324
  %326 = lshr i64 %317, %325
  %327 = trunc i64 %326 to i32
  %328 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %302, align 8
  %329 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %328, i64 1, i32 5
  store i32 %327, i32* %329, align 4
  %330 = load i64, i64* %298, align 8
  %331 = load i8, i8* %301, align 4
  %332 = zext i8 %331 to i64
  %333 = load i32, i32* %238, align 4
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %334
  %336 = load i8, i8* %335, align 1
  %337 = zext i8 %336 to i64
  %338 = sub nsw i64 %332, %337
  %339 = lshr i64 %330, %338
  %340 = trunc i64 %339 to i32
  %341 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %302, align 8
  %342 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %341, i64 0, i32 4
  store i32 %340, i32* %342, align 8
  %343 = load i64, i64* %303, align 8
  %344 = load i8, i8* %304, align 1
  %345 = zext i8 %344 to i64
  %346 = load i32, i32* %238, align 4
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %347
  %349 = load i8, i8* %348, align 1
  %350 = zext i8 %349 to i64
  %351 = sub nsw i64 %345, %350
  %352 = lshr i64 %343, %351
  %353 = trunc i64 %352 to i32
  %354 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %302, align 8
  %355 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %354, i64 0, i32 5
  store i32 %353, i32* %355, align 4
  %356 = load i64, i64* %298, align 8
  %357 = load i8, i8* %301, align 4
  %358 = zext i8 %357 to i64
  %359 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1, i64 2
  %360 = load i32, i32* %359, align 4
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i64
  %365 = sub nsw i64 %358, %364
  %366 = lshr i64 %356, %365
  %367 = trunc i64 %366 to i32
  %368 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %302, align 8
  %369 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %368, i64 2, i32 4
  store i32 %367, i32* %369, align 8
  %370 = load i64, i64* %303, align 8
  %371 = load i8, i8* %304, align 1
  %372 = zext i8 %371 to i64
  %373 = load i32, i32* %359, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %374
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i64
  %378 = sub nsw i64 %372, %377
  %379 = lshr i64 %370, %378
  br label %387

380:                                              ; preds = %286
  %381 = load i64, i64* %298, align 8
  %382 = trunc i64 %381 to i32
  %383 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %273, i64 0, i32 0, i32 0
  %384 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %299, i64 0, i32 4
  store i32 %382, i32* %384, align 8
  %385 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 9
  %386 = load i64, i64* %385, align 8
  br label %387

387:                                              ; preds = %300, %380
  %388 = phi i64 [ %379, %300 ], [ %386, %380 ]
  %389 = phi %"struct.jxl::jpeg::JPEGComponent"** [ %302, %300 ], [ %383, %380 ]
  %390 = phi i64 [ 2, %300 ], [ 0, %380 ]
  %391 = trunc i64 %388 to i32
  %392 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %389, align 8
  %393 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %392, i64 %390, i32 5
  store i32 %391, i32* %393, align 4
  %394 = load i64, i64* %275, align 8
  %395 = load i64, i64* %277, align 8
  %396 = icmp eq i64 %394, %395
  %397 = inttoptr i64 %395 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %396, label %402, label %398

398:                                              ; preds = %387
  %399 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %273, i64 0, i32 0, i32 0
  br label %407

400:                                              ; preds = %407
  %401 = inttoptr i64 %431 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %402

402:                                              ; preds = %400, %387
  %403 = phi i64 [ %394, %387 ], [ %430, %400 ]
  %404 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %397, %387 ], [ %401, %400 ]
  %405 = inttoptr i64 %403 to %"struct.jxl::jpeg::JPEGComponent"*
  %406 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %404, %405
  br i1 %406, label %464, label %436

407:                                              ; preds = %398, %407
  %408 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %397, %398 ], [ %435, %407 ]
  %409 = phi i64 [ 0, %398 ], [ %429, %407 ]
  %410 = icmp ult i64 %409, 2
  %411 = zext i1 %410 to i64
  %412 = xor i64 %409, %411
  %413 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1, i64 %412
  %414 = load i32, i32* %413, align 4
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE.const, i64 0, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = shl i32 1, %418
  %420 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %408, i64 %409, i32 1
  store i32 %419, i32* %420, align 4
  %421 = load i32, i32* %413, align 4
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE.const, i64 0, i64 %422
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = shl i32 1, %425
  %427 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %399, align 8
  %428 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %427, i64 %409, i32 2
  store i32 %426, i32* %428, align 8
  %429 = add nuw i64 %409, 1
  %430 = load i64, i64* %275, align 8
  %431 = load i64, i64* %277, align 8
  %432 = sub i64 %430, %431
  %433 = sdiv exact i64 %432, 48
  %434 = icmp ult i64 %429, %433
  %435 = inttoptr i64 %431 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %434, label %407, label %400

436:                                              ; preds = %402, %461
  %437 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %462, %461 ], [ %404, %402 ]
  %438 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %437, i64 0, i32 6
  %439 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %437, i64 0, i32 4
  %440 = load i32, i32* %439, align 8
  %441 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %437, i64 0, i32 5
  %442 = load i32, i32* %441, align 4
  %443 = mul i32 %442, %440
  %444 = zext i32 %443 to i64
  %445 = shl nuw nsw i64 %444, 6
  %446 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %437, i64 0, i32 6, i32 0, i32 1
  %447 = bitcast i16** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.std::__1::vector.141"* %438 to i64*
  %450 = load i64, i64* %449, align 8
  %451 = sub i64 %448, %450
  %452 = ashr exact i64 %451, 1
  %453 = icmp ugt i64 %445, %452
  %454 = inttoptr i64 %450 to i16*
  br i1 %453, label %455, label %457

455:                                              ; preds = %436
  %456 = sub nsw i64 %445, %452
  call void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.141"* %438, i64 %456) #12
  br label %461

457:                                              ; preds = %436
  %458 = icmp ult i64 %445, %452
  br i1 %458, label %459, label %461

459:                                              ; preds = %457
  %460 = getelementptr inbounds i16, i16* %454, i64 %445
  store i16* %460, i16** %446, align 8
  br label %461

461:                                              ; preds = %455, %457, %459
  %462 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %437, i64 1
  %463 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %462, %405
  br i1 %463, label %464, label %436

464:                                              ; preds = %461, %402, %261
  %465 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 16
  %466 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15
  %467 = bitcast %"class.std::__1::vector.98"* %466 to i64*
  %468 = bitcast i8* %465 to i32*
  store i32 0, i32* %468, align 8
  %469 = load i64, i64* %467, align 8
  %470 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 1
  %471 = bitcast i8** %470 to i64*
  store i64 %469, i64* %471, align 8
  %472 = load i64, i64* %203, align 8
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %475, label %474

474:                                              ; preds = %464
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"* %466, i64 %472) #12
  br label %475

475:                                              ; preds = %464, %474
  %476 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14
  %477 = bitcast %"class.std::__1::vector.98"* %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 1
  %480 = bitcast i8** %479 to i64*
  store i64 %478, i64* %480, align 8
  %481 = load i64, i64* %132, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #12
  store i8 0, i8* %12, align 1
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %484, label %483

483:                                              ; preds = %475
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh(%"class.std::__1::vector.98"* %476, i64 %481, i8* nonnull dereferenceable(1) %12) #12
  br label %484

484:                                              ; preds = %475, %483
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #12
  %485 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13
  %486 = bitcast %"class.std::__1::vector.98"* %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 1
  %489 = bitcast i8** %488 to i64*
  store i64 %487, i64* %489, align 8
  %490 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 2, i32 0, i32 1
  %491 = bitcast i64** %490 to i64*
  %492 = load i64, i64* %491, align 8
  %493 = bitcast %"class.std::__1::vector.23"* %214 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = sub i64 %492, %494
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %499, label %497

497:                                              ; preds = %484
  %498 = ashr exact i64 %495, 3
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"* %485, i64 %498) #12
  br label %499

499:                                              ; preds = %484, %497
  %500 = load i32, i32* %126, align 8
  %501 = zext i32 %500 to i64
  %502 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 4
  store i64 %501, i64* %502, align 8
  %503 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 21
  store i64 0, i64* %503, align 8
  br label %504

504:                                              ; preds = %272, %281, %268, %256, %252, %218, %212, %499
  %505 = phi i32 [ 0, %499 ], [ %216, %212 ], [ 1, %218 ], [ 1, %252 ], [ %259, %256 ], [ 1, %268 ], [ 1, %281 ], [ 1, %272 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #12
  br label %506

506:                                              ; preds = %151, %146, %141, %137, %119, %504
  %507 = phi i32 [ %505, %504 ], [ %120, %119 ], [ 1, %151 ], [ 1, %137 ], [ 1, %141 ], [ 1, %146 ]
  ret i32 %507
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder15ProcessSectionsEPKNS0_11SectionInfoEmPNS0_13SectionStatusE(%"class.jxl::FrameDecoder"*, %"struct.jxl::FrameDecoder::SectionInfo"*, i64, i32*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.408", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.408", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.409", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.409", align 8
  %11 = alloca double, align 8
  %12 = alloca %"class.jxl::ThreadPool", align 8
  %13 = alloca %"struct.jxl::FrameDecoder::SectionInfo"*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32*, align 8
  %16 = alloca %"class.std::__1::vector.23", align 8
  %17 = alloca %"class.std::__1::vector.343", align 8
  %18 = alloca %"class.std::__1::vector.23", align 8
  %19 = alloca %"class.std::__1::vector.23", align 8
  %20 = alloca %"struct.std::__1::atomic.350", align 1
  %21 = alloca %class.anon, align 8
  %22 = alloca %class.anon.355, align 8
  %23 = alloca %class.anon.356, align 8
  store %"struct.jxl::FrameDecoder::SectionInfo"* %1, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  store i64 %2, i64* %14, align 8
  store i32* %3, i32** %15, align 8
  %24 = icmp eq i64 %2, 0
  br i1 %24, label %836, label %25

25:                                               ; preds = %4
  %26 = shl nuw i64 %2, 2
  %27 = icmp sgt i64 %26, 0
  br i1 %27, label %28, label %116

28:                                               ; preds = %25
  %29 = icmp slt i64 %2, 1
  %30 = select i1 %29, i64 %2, i64 1
  %31 = add nsw i64 %30, -1
  %32 = sub i64 %2, %31
  %33 = icmp ult i64 %32, 8
  br i1 %33, label %105, label %34

34:                                               ; preds = %28
  %35 = and i64 %32, -8
  %36 = getelementptr i32, i32* %3, i64 %35
  %37 = sub i64 %2, %35
  %38 = add i64 %35, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 7
  %42 = icmp ult i64 %38, 56
  br i1 %42, label %90, label %43

43:                                               ; preds = %34
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %87, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %88, %45 ]
  %48 = getelementptr i32, i32* %3, i64 %46
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 4
  %50 = getelementptr i32, i32* %48, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 4
  %52 = or i64 %46, 8
  %53 = getelementptr i32, i32* %3, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 4
  %55 = getelementptr i32, i32* %53, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %56, align 4
  %57 = or i64 %46, 16
  %58 = getelementptr i32, i32* %3, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 4
  %60 = getelementptr i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %61, align 4
  %62 = or i64 %46, 24
  %63 = getelementptr i32, i32* %3, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 4
  %65 = getelementptr i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %66, align 4
  %67 = or i64 %46, 32
  %68 = getelementptr i32, i32* %3, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 4
  %70 = getelementptr i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %71, align 4
  %72 = or i64 %46, 40
  %73 = getelementptr i32, i32* %3, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %74, align 4
  %75 = getelementptr i32, i32* %73, i64 4
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %76, align 4
  %77 = or i64 %46, 48
  %78 = getelementptr i32, i32* %3, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %79, align 4
  %80 = getelementptr i32, i32* %78, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %81, align 4
  %82 = or i64 %46, 56
  %83 = getelementptr i32, i32* %3, i64 %82
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %84, align 4
  %85 = getelementptr i32, i32* %83, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %86, align 4
  %87 = add i64 %46, 64
  %88 = add i64 %47, -8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %45, !llvm.loop !15

90:                                               ; preds = %45, %34
  %91 = phi i64 [ 0, %34 ], [ %87, %45 ]
  %92 = icmp eq i64 %41, 0
  br i1 %92, label %103, label %93

93:                                               ; preds = %90, %93
  %94 = phi i64 [ %100, %93 ], [ %91, %90 ]
  %95 = phi i64 [ %101, %93 ], [ %41, %90 ]
  %96 = getelementptr i32, i32* %3, i64 %94
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %97, align 4
  %98 = getelementptr i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %99, align 4
  %100 = add i64 %94, 8
  %101 = add i64 %95, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %93, !llvm.loop !17

103:                                              ; preds = %93, %90
  %104 = icmp eq i64 %32, %35
  br i1 %104, label %114, label %105

105:                                              ; preds = %103, %28
  %106 = phi i32* [ %3, %28 ], [ %36, %103 ]
  %107 = phi i64 [ %2, %28 ], [ %37, %103 ]
  br label %108

108:                                              ; preds = %105, %108
  %109 = phi i32* [ %111, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %112, %108 ], [ %107, %105 ]
  store i32 1, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %109, i64 1
  %112 = add nsw i64 %110, -1
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %108, label %114, !llvm.loop !19

114:                                              ; preds = %108, %103
  %115 = load i64, i64* %14, align 8
  br label %116

116:                                              ; preds = %114, %25
  %117 = phi i64 [ %115, %114 ], [ %2, %25 ]
  %118 = bitcast %"class.std::__1::vector.23"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %118) #12
  %119 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %16, i64 0, i32 0, i32 0
  %120 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %16, i64 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  %122 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 15
  %123 = load i64, i64* %122, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 24, i1 false) #12
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %224, label %125

125:                                              ; preds = %116
  %126 = icmp ugt i64 %123, 2305843009213693951
  br i1 %126, label %127, label %129

127:                                              ; preds = %125
  %128 = bitcast %"class.std::__1::vector.23"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %128) #14
  unreachable

129:                                              ; preds = %125
  %130 = shl i64 %123, 3
  %131 = tail call i8* @_Znwm(i64 %130) #15
  %132 = bitcast i8* %131 to i64*
  %133 = bitcast i64** %120 to i8**
  store i8* %131, i8** %133, align 8
  %134 = bitcast %"class.std::__1::vector.23"* %16 to i8**
  store i8* %131, i8** %134, align 8
  %135 = getelementptr inbounds i64, i64* %132, i64 %123
  store i64* %135, i64** %121, align 8
  %136 = shl nsw i64 %123, 3
  %137 = add i64 %136, -8
  %138 = lshr exact i64 %137, 3
  %139 = add nuw nsw i64 %138, 1
  %140 = icmp ult i64 %139, 4
  br i1 %140, label %215, label %141

141:                                              ; preds = %129
  %142 = and i64 %139, 4611686018427387900
  %143 = getelementptr i64, i64* %132, i64 %142
  %144 = insertelement <2 x i64> undef, i64 %117, i32 0
  %145 = shufflevector <2 x i64> %144, <2 x i64> undef, <2 x i32> zeroinitializer
  %146 = insertelement <2 x i64> undef, i64 %117, i32 0
  %147 = shufflevector <2 x i64> %146, <2 x i64> undef, <2 x i32> zeroinitializer
  %148 = add nsw i64 %142, -4
  %149 = lshr exact i64 %148, 2
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 7
  %152 = icmp ult i64 %148, 28
  br i1 %152, label %200, label %153

153:                                              ; preds = %141
  %154 = sub nsw i64 %150, %151
  br label %155

155:                                              ; preds = %155, %153
  %156 = phi i64 [ 0, %153 ], [ %197, %155 ]
  %157 = phi i64 [ %154, %153 ], [ %198, %155 ]
  %158 = getelementptr i64, i64* %132, i64 %156
  %159 = bitcast i64* %158 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %159, align 8
  %160 = getelementptr i64, i64* %158, i64 2
  %161 = bitcast i64* %160 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %161, align 8
  %162 = or i64 %156, 4
  %163 = getelementptr i64, i64* %132, i64 %162
  %164 = bitcast i64* %163 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %164, align 8
  %165 = getelementptr i64, i64* %163, i64 2
  %166 = bitcast i64* %165 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %166, align 8
  %167 = or i64 %156, 8
  %168 = getelementptr i64, i64* %132, i64 %167
  %169 = bitcast i64* %168 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %169, align 8
  %170 = getelementptr i64, i64* %168, i64 2
  %171 = bitcast i64* %170 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %171, align 8
  %172 = or i64 %156, 12
  %173 = getelementptr i64, i64* %132, i64 %172
  %174 = bitcast i64* %173 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %174, align 8
  %175 = getelementptr i64, i64* %173, i64 2
  %176 = bitcast i64* %175 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %176, align 8
  %177 = or i64 %156, 16
  %178 = getelementptr i64, i64* %132, i64 %177
  %179 = bitcast i64* %178 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %179, align 8
  %180 = getelementptr i64, i64* %178, i64 2
  %181 = bitcast i64* %180 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %181, align 8
  %182 = or i64 %156, 20
  %183 = getelementptr i64, i64* %132, i64 %182
  %184 = bitcast i64* %183 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %184, align 8
  %185 = getelementptr i64, i64* %183, i64 2
  %186 = bitcast i64* %185 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %186, align 8
  %187 = or i64 %156, 24
  %188 = getelementptr i64, i64* %132, i64 %187
  %189 = bitcast i64* %188 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %189, align 8
  %190 = getelementptr i64, i64* %188, i64 2
  %191 = bitcast i64* %190 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %191, align 8
  %192 = or i64 %156, 28
  %193 = getelementptr i64, i64* %132, i64 %192
  %194 = bitcast i64* %193 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %194, align 8
  %195 = getelementptr i64, i64* %193, i64 2
  %196 = bitcast i64* %195 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %196, align 8
  %197 = add i64 %156, 32
  %198 = add i64 %157, -8
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %155, !llvm.loop !21

200:                                              ; preds = %155, %141
  %201 = phi i64 [ 0, %141 ], [ %197, %155 ]
  %202 = icmp eq i64 %151, 0
  br i1 %202, label %213, label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %210, %203 ], [ %201, %200 ]
  %205 = phi i64 [ %211, %203 ], [ %151, %200 ]
  %206 = getelementptr i64, i64* %132, i64 %204
  %207 = bitcast i64* %206 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %207, align 8
  %208 = getelementptr i64, i64* %206, i64 2
  %209 = bitcast i64* %208 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %209, align 8
  %210 = add i64 %204, 4
  %211 = add i64 %205, -1
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %213, label %203, !llvm.loop !22

213:                                              ; preds = %203, %200
  %214 = icmp eq i64 %139, %142
  br i1 %214, label %221, label %215

215:                                              ; preds = %213, %129
  %216 = phi i64* [ %132, %129 ], [ %143, %213 ]
  br label %217

217:                                              ; preds = %215, %217
  %218 = phi i64* [ %219, %217 ], [ %216, %215 ]
  store i64 %117, i64* %218, align 8
  %219 = getelementptr inbounds i64, i64* %218, i64 1
  %220 = icmp eq i64* %219, %135
  br i1 %220, label %221, label %217, !llvm.loop !23

221:                                              ; preds = %217, %213
  %222 = bitcast i64** %120 to i64*
  %223 = ptrtoint i64* %135 to i64
  store i64 %223, i64* %222, align 8
  br label %224

224:                                              ; preds = %116, %221
  %225 = bitcast %"class.std::__1::vector.343"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #12
  %226 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %17, i64 0, i32 0, i32 0
  %227 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %17, i64 0, i32 0, i32 1
  %228 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 14
  %229 = bitcast %"class.std::__1::vector.343"* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 -86, i64 24, i1 false)
  %230 = load i64, i64* %228, align 8
  %231 = bitcast %"class.std::__1::vector.23"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %231) #12
  %232 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %233 = load i32, i32* %232, align 8
  %234 = zext i32 %233 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %231, i8 0, i64 24, i1 false) #12
  %235 = icmp eq i32 %233, 0
  br i1 %235, label %333, label %236

236:                                              ; preds = %224
  %237 = shl nuw nsw i64 %234, 3
  %238 = tail call i8* @_Znwm(i64 %237) #15
  %239 = bitcast i8* %238 to i64*
  %240 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %18, i64 0, i32 0, i32 1
  %241 = bitcast i64** %240 to i8**
  store i8* %238, i8** %241, align 8
  %242 = bitcast %"class.std::__1::vector.23"* %18 to i8**
  store i8* %238, i8** %242, align 8
  %243 = getelementptr inbounds i64, i64* %239, i64 %234
  %244 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %18, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* %243, i64** %244, align 8
  %245 = shl nuw nsw i64 %234, 3
  %246 = add nsw i64 %245, -8
  %247 = lshr exact i64 %246, 3
  %248 = add nuw nsw i64 %247, 1
  %249 = icmp ult i64 %248, 4
  br i1 %249, label %324, label %250

250:                                              ; preds = %236
  %251 = and i64 %248, 4611686018427387900
  %252 = getelementptr i64, i64* %239, i64 %251
  %253 = insertelement <2 x i64> undef, i64 %117, i32 0
  %254 = shufflevector <2 x i64> %253, <2 x i64> undef, <2 x i32> zeroinitializer
  %255 = insertelement <2 x i64> undef, i64 %117, i32 0
  %256 = shufflevector <2 x i64> %255, <2 x i64> undef, <2 x i32> zeroinitializer
  %257 = add nsw i64 %251, -4
  %258 = lshr exact i64 %257, 2
  %259 = add nuw nsw i64 %258, 1
  %260 = and i64 %259, 7
  %261 = icmp ult i64 %257, 28
  br i1 %261, label %309, label %262

262:                                              ; preds = %250
  %263 = sub nsw i64 %259, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i64 [ 0, %262 ], [ %306, %264 ]
  %266 = phi i64 [ %263, %262 ], [ %307, %264 ]
  %267 = getelementptr i64, i64* %239, i64 %265
  %268 = bitcast i64* %267 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %268, align 8
  %269 = getelementptr i64, i64* %267, i64 2
  %270 = bitcast i64* %269 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %270, align 8
  %271 = or i64 %265, 4
  %272 = getelementptr i64, i64* %239, i64 %271
  %273 = bitcast i64* %272 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %273, align 8
  %274 = getelementptr i64, i64* %272, i64 2
  %275 = bitcast i64* %274 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %275, align 8
  %276 = or i64 %265, 8
  %277 = getelementptr i64, i64* %239, i64 %276
  %278 = bitcast i64* %277 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %278, align 8
  %279 = getelementptr i64, i64* %277, i64 2
  %280 = bitcast i64* %279 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %280, align 8
  %281 = or i64 %265, 12
  %282 = getelementptr i64, i64* %239, i64 %281
  %283 = bitcast i64* %282 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %283, align 8
  %284 = getelementptr i64, i64* %282, i64 2
  %285 = bitcast i64* %284 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %285, align 8
  %286 = or i64 %265, 16
  %287 = getelementptr i64, i64* %239, i64 %286
  %288 = bitcast i64* %287 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %288, align 8
  %289 = getelementptr i64, i64* %287, i64 2
  %290 = bitcast i64* %289 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %290, align 8
  %291 = or i64 %265, 20
  %292 = getelementptr i64, i64* %239, i64 %291
  %293 = bitcast i64* %292 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %293, align 8
  %294 = getelementptr i64, i64* %292, i64 2
  %295 = bitcast i64* %294 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %295, align 8
  %296 = or i64 %265, 24
  %297 = getelementptr i64, i64* %239, i64 %296
  %298 = bitcast i64* %297 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %298, align 8
  %299 = getelementptr i64, i64* %297, i64 2
  %300 = bitcast i64* %299 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %300, align 8
  %301 = or i64 %265, 28
  %302 = getelementptr i64, i64* %239, i64 %301
  %303 = bitcast i64* %302 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %303, align 8
  %304 = getelementptr i64, i64* %302, i64 2
  %305 = bitcast i64* %304 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %305, align 8
  %306 = add i64 %265, 32
  %307 = add i64 %266, -8
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %309, label %264, !llvm.loop !24

309:                                              ; preds = %264, %250
  %310 = phi i64 [ 0, %250 ], [ %306, %264 ]
  %311 = icmp eq i64 %260, 0
  br i1 %311, label %322, label %312

312:                                              ; preds = %309, %312
  %313 = phi i64 [ %319, %312 ], [ %310, %309 ]
  %314 = phi i64 [ %320, %312 ], [ %260, %309 ]
  %315 = getelementptr i64, i64* %239, i64 %313
  %316 = bitcast i64* %315 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %316, align 8
  %317 = getelementptr i64, i64* %315, i64 2
  %318 = bitcast i64* %317 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %318, align 8
  %319 = add i64 %313, 4
  %320 = add i64 %314, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %312, !llvm.loop !25

322:                                              ; preds = %312, %309
  %323 = icmp eq i64 %248, %251
  br i1 %323, label %330, label %324

324:                                              ; preds = %322, %236
  %325 = phi i64* [ %239, %236 ], [ %252, %322 ]
  br label %326

326:                                              ; preds = %324, %326
  %327 = phi i64* [ %328, %326 ], [ %325, %324 ]
  store i64 %117, i64* %327, align 8
  %328 = getelementptr inbounds i64, i64* %327, i64 1
  %329 = icmp eq i64* %328, %243
  br i1 %329, label %330, label %326, !llvm.loop !26

330:                                              ; preds = %326, %322
  %331 = bitcast i64** %240 to i64*
  %332 = ptrtoint i64* %243 to i64
  store i64 %332, i64* %331, align 8
  br label %333

333:                                              ; preds = %224, %330
  call void @_ZNSt3__16vectorINS0_ImNS_9allocatorImEEEENS1_IS3_EEEC2EmRKS3_(%"class.std::__1::vector.343"* nonnull %17, i64 %230, %"class.std::__1::vector.23"* nonnull dereferenceable(24) %18)
  %334 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %18, i64 0, i32 0, i32 0
  %335 = load i64*, i64** %334, align 8
  %336 = icmp eq i64* %335, null
  br i1 %336, label %342, label %337

337:                                              ; preds = %333
  %338 = ptrtoint i64* %335 to i64
  %339 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %18, i64 0, i32 0, i32 1
  %340 = bitcast i64** %339 to i64*
  store i64 %338, i64* %340, align 8
  %341 = bitcast i64* %335 to i8*
  call void @_ZdlPv(i8* %341) #15
  br label %342

342:                                              ; preds = %333, %337
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %231) #12
  %343 = bitcast %"class.std::__1::vector.23"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %343) #12
  %344 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %19, i64 0, i32 0, i32 0
  %345 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %19, i64 0, i32 0, i32 1
  %346 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  %347 = load i64, i64* %228, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %343, i8 0, i64 24, i1 false) #12
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %417, label %349

349:                                              ; preds = %342
  %350 = icmp ugt i64 %347, 2305843009213693951
  br i1 %350, label %351, label %353

351:                                              ; preds = %349
  %352 = bitcast %"class.std::__1::vector.23"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %352) #14
  unreachable

353:                                              ; preds = %349
  %354 = shl i64 %347, 3
  %355 = call i8* @_Znwm(i64 %354) #15
  %356 = bitcast i8* %355 to i64*
  %357 = bitcast %"class.std::__1::vector.23"* %19 to i8**
  store i8* %355, i8** %357, align 8
  %358 = getelementptr inbounds i64, i64* %356, i64 %347
  store i64* %358, i64** %346, align 8
  %359 = bitcast i64** %345 to i64*
  %360 = ptrtoint i8* %355 to i64
  %361 = add nsw i64 %347, -1
  %362 = getelementptr i64, i64* %356, i64 %361
  %363 = ptrtoint i64* %362 to i64
  %364 = sub i64 8, %360
  %365 = add i64 %364, %363
  %366 = and i64 %365, -8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %355, i8 0, i64 %366, i1 false) #12
  %367 = ptrtoint i64* %358 to i64
  store i64 %367, i64* %359, align 8
  %368 = icmp eq i64 %347, 1
  br i1 %368, label %369, label %417

369:                                              ; preds = %353
  %370 = load i32, i32* %232, align 8
  %371 = icmp eq i32 %370, 1
  br i1 %371, label %372, label %417

372:                                              ; preds = %369
  %373 = load i64, i64* %14, align 8
  %374 = icmp eq i64 %373, 1
  br i1 %374, label %378, label %375

375:                                              ; preds = %372
  %376 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 615, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i64 0, i64 0)) #12
  %377 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

378:                                              ; preds = %372
  %379 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %380 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %379, i64 0, i32 1
  %381 = load i64, i64* %380, align 8
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %386, label %383

383:                                              ; preds = %378
  %384 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 616, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45, i64 0, i64 0)) #12
  %385 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

386:                                              ; preds = %378
  %387 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 0
  %388 = load i8*, i8** %387, align 8
  %389 = load i8, i8* %388, align 1
  %390 = icmp eq i8 %389, 0
  br i1 %390, label %391, label %415

391:                                              ; preds = %386
  store i8 1, i8* %388, align 1
  %392 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %226, align 8
  %393 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %392, i64 0, i32 0, i32 1
  %394 = bitcast i64** %393 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = bitcast %"class.std::__1::vector.23"* %392 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = sub i64 %395, %397
  %399 = ashr exact i64 %398, 3
  %400 = icmp eq i64 %398, 0
  %401 = inttoptr i64 %397 to i64*
  br i1 %400, label %402, label %405

402:                                              ; preds = %391
  %403 = sub nuw nsw i64 1, %399
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.23"* %392, i64 %403) #12
  %404 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %226, align 8
  br label %409

405:                                              ; preds = %391
  %406 = icmp ugt i64 %399, 1
  br i1 %406, label %407, label %409

407:                                              ; preds = %405
  %408 = getelementptr inbounds i64, i64* %401, i64 1
  store i64* %408, i64** %393, align 8
  br label %409

409:                                              ; preds = %402, %405, %407
  %410 = phi %"class.std::__1::vector.23"* [ %404, %402 ], [ %392, %405 ], [ %392, %407 ]
  %411 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %410, i64 0, i32 0, i32 0
  %412 = load i64*, i64** %411, align 8
  store i64 0, i64* %412, align 8
  %413 = load i64*, i64** %119, align 8
  store i64 0, i64* %413, align 8
  %414 = load i64*, i64** %344, align 8
  store i64 1, i64* %414, align 8
  br label %537

415:                                              ; preds = %386
  %416 = load i32*, i32** %15, align 8
  store i32 2, i32* %416, align 4
  br label %537

417:                                              ; preds = %342, %369, %353
  %418 = load i64, i64* %122, align 8
  %419 = add i64 %418, 1
  %420 = load i64, i64* %14, align 8
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %430, label %422

422:                                              ; preds = %417
  %423 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13
  %424 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 1
  %425 = bitcast i8** %424 to i64*
  %426 = bitcast %"class.std::__1::vector.98"* %423 to i64*
  %427 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %423, i64 0, i32 0, i32 0
  %428 = sub i64 -2, %418
  %429 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 4
  br label %441

430:                                              ; preds = %497, %417
  %431 = phi i64 [ %117, %417 ], [ %498, %497 ]
  %432 = phi i64 [ %117, %417 ], [ %499, %497 ]
  %433 = bitcast %"class.std::__1::vector.23"** %227 to i64*
  %434 = load i64, i64* %433, align 8
  %435 = bitcast %"class.std::__1::vector.343"* %17 to i64*
  %436 = load i64, i64* %435, align 8
  %437 = icmp eq i64 %434, %436
  br i1 %437, label %537, label %438

438:                                              ; preds = %430
  %439 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %440 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 4
  br label %503

441:                                              ; preds = %422, %497
  %442 = phi i64 [ %117, %422 ], [ %499, %497 ]
  %443 = phi i64 [ %117, %422 ], [ %498, %497 ]
  %444 = phi i64 [ 0, %422 ], [ %500, %497 ]
  %445 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %446 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %445, i64 %444, i32 1
  %447 = load i64, i64* %446, align 8
  %448 = load i64, i64* %425, align 8
  %449 = load i64, i64* %426, align 8
  %450 = sub i64 %448, %449
  %451 = icmp ult i64 %447, %450
  br i1 %451, label %455, label %452

452:                                              ; preds = %441
  %453 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 628, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)) #12
  %454 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

455:                                              ; preds = %441
  %456 = inttoptr i64 %449 to i8*
  %457 = getelementptr inbounds i8, i8* %456, i64 %447
  %458 = load i8, i8* %457, align 1
  %459 = icmp eq i8 %458, 0
  br i1 %459, label %463, label %460

460:                                              ; preds = %455
  %461 = load i32*, i32** %15, align 8
  %462 = getelementptr inbounds i32, i32* %461, i64 %444
  store i32 2, i32* %462, align 4
  br label %497

463:                                              ; preds = %455
  %464 = icmp eq i64 %447, 0
  br i1 %464, label %489, label %465

465:                                              ; preds = %463
  %466 = icmp ult i64 %447, %419
  br i1 %466, label %467, label %471

467:                                              ; preds = %465
  %468 = add i64 %447, -1
  %469 = load i64*, i64** %119, align 8
  %470 = getelementptr inbounds i64, i64* %469, i64 %468
  store i64 %444, i64* %470, align 8
  br label %489

471:                                              ; preds = %465
  %472 = icmp eq i64 %447, %419
  br i1 %472, label %489, label %473

473:                                              ; preds = %471
  %474 = add i64 %447, %428
  %475 = load i64, i64* %228, align 8
  %476 = urem i64 %474, %475
  %477 = udiv i64 %474, %475
  %478 = load i32, i32* %232, align 8
  %479 = zext i32 %478 to i64
  %480 = icmp ult i64 %477, %479
  br i1 %480, label %481, label %795

481:                                              ; preds = %473
  %482 = load i64, i64* %429, align 8
  %483 = icmp ult i64 %477, %482
  br i1 %483, label %484, label %497

484:                                              ; preds = %481
  %485 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %226, align 8
  %486 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %485, i64 %476, i32 0, i32 0
  %487 = load i64*, i64** %486, align 8
  %488 = getelementptr inbounds i64, i64* %487, i64 %477
  store i64 %444, i64* %488, align 8
  br label %489

489:                                              ; preds = %484, %471, %463, %467
  %490 = phi i64 [ %443, %467 ], [ %443, %463 ], [ %444, %471 ], [ %443, %484 ]
  %491 = phi i64 [ %442, %467 ], [ %444, %463 ], [ %442, %471 ], [ %442, %484 ]
  %492 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %493 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %492, i64 %444, i32 1
  %494 = load i64, i64* %493, align 8
  %495 = load i8*, i8** %427, align 8
  %496 = getelementptr inbounds i8, i8* %495, i64 %494
  store i8 1, i8* %496, align 1
  br label %497

497:                                              ; preds = %481, %489, %460
  %498 = phi i64 [ %443, %460 ], [ %490, %489 ], [ %443, %481 ]
  %499 = phi i64 [ %442, %460 ], [ %491, %489 ], [ %442, %481 ]
  %500 = add nuw i64 %444, 1
  %501 = load i64, i64* %14, align 8
  %502 = icmp ult i64 %500, %501
  br i1 %502, label %441, label %430

503:                                              ; preds = %438, %527
  %504 = phi i64 [ %436, %438 ], [ %533, %527 ]
  %505 = phi i64 [ 0, %438 ], [ %531, %527 ]
  %506 = load i8*, i8** %439, align 8
  %507 = getelementptr inbounds i8, i8* %506, i64 %505
  %508 = load i8, i8* %507, align 1
  %509 = zext i8 %508 to i64
  %510 = load i64, i64* %440, align 8
  %511 = icmp ugt i64 %510, %509
  br i1 %511, label %512, label %527

512:                                              ; preds = %503
  %513 = inttoptr i64 %504 to %"class.std::__1::vector.23"*
  %514 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %513, i64 %505, i32 0, i32 0
  %515 = load i64*, i64** %514, align 8
  %516 = load i64, i64* %14, align 8
  br label %517

517:                                              ; preds = %512, %523
  %518 = phi i64 [ %509, %512 ], [ %525, %523 ]
  %519 = phi i64 [ 0, %512 ], [ %524, %523 ]
  %520 = getelementptr inbounds i64, i64* %515, i64 %518
  %521 = load i64, i64* %520, align 8
  %522 = icmp eq i64 %521, %516
  br i1 %522, label %527, label %523

523:                                              ; preds = %517
  %524 = add i64 %519, 1
  %525 = add i64 %524, %509
  %526 = icmp ult i64 %525, %510
  br i1 %526, label %517, label %527

527:                                              ; preds = %523, %517, %503
  %528 = phi i64 [ 0, %503 ], [ %519, %517 ], [ %524, %523 ]
  %529 = load i64*, i64** %344, align 8
  %530 = getelementptr inbounds i64, i64* %529, i64 %505
  store i64 %528, i64* %530, align 8
  %531 = add nuw i64 %505, 1
  %532 = load i64, i64* %433, align 8
  %533 = load i64, i64* %435, align 8
  %534 = sub i64 %532, %533
  %535 = sdiv exact i64 %534, 24
  %536 = icmp ult i64 %531, %535
  br i1 %536, label %503, label %537

537:                                              ; preds = %527, %430, %409, %415
  %538 = phi i64 [ 0, %409 ], [ %117, %415 ], [ %431, %430 ], [ %431, %527 ]
  %539 = phi i64 [ 0, %409 ], [ %117, %415 ], [ %432, %430 ], [ %432, %527 ]
  %540 = load i64, i64* %14, align 8
  %541 = icmp eq i64 %539, %540
  br i1 %541, label %553, label %542

542:                                              ; preds = %537
  %543 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %544 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %543, i64 %539, i32 0
  %545 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %544, align 8
  %546 = call i32 @_ZN3jxl12FrameDecoder15ProcessDCGlobalEPNS_9BitReaderE(%"class.jxl::FrameDecoder"* %0, %"class.jxl::BitReader"* %545)
  %547 = icmp sgt i32 %546, 0
  br i1 %547, label %795, label %548

548:                                              ; preds = %542
  %549 = icmp eq i32 %546, 0
  %550 = load i32*, i32** %15, align 8
  %551 = getelementptr inbounds i32, i32* %550, i64 %539
  %552 = select i1 %549, i32 0, i32 3
  store i32 %552, i32* %551, align 4
  br label %553

553:                                              ; preds = %548, %537
  %554 = getelementptr inbounds %"struct.std::__1::atomic.350", %"struct.std::__1::atomic.350"* %20, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %554) #12
  store i8 0, i8* %554, align 1
  %555 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 16
  %556 = load i8, i8* %555, align 8, !range !9
  %557 = icmp eq i8 %556, 0
  br i1 %557, label %603, label %558

558:                                              ; preds = %553
  %559 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %560 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %559, align 8
  %561 = bitcast i64** %120 to i64*
  %562 = load i64, i64* %561, align 8
  %563 = bitcast %"class.std::__1::vector.23"* %16 to i64*
  %564 = load i64, i64* %563, align 8
  %565 = sub i64 %562, %564
  %566 = lshr exact i64 %565, 3
  %567 = trunc i64 %566 to i32
  %568 = bitcast %class.anon* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %568) #12
  %569 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 0
  store %"class.jxl::FrameDecoder"* %0, %"class.jxl::FrameDecoder"** %569, align 8
  %570 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 1
  store %"class.std::__1::vector.23"* %16, %"class.std::__1::vector.23"** %570, align 8
  %571 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 2
  store i64* %14, i64** %571, align 8
  %572 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 3
  store %"struct.jxl::FrameDecoder::SectionInfo"** %13, %"struct.jxl::FrameDecoder::SectionInfo"*** %572, align 8
  %573 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 4
  store i32** %15, i32*** %573, align 8
  %574 = getelementptr inbounds %class.anon, %class.anon* %21, i64 0, i32 5
  store %"struct.std::__1::atomic.350"* %20, %"struct.std::__1::atomic.350"** %574, align 8
  %575 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %575) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.48, i64 0, i64 0), double* nonnull %7) #12
  %576 = icmp eq %"class.jxl::ThreadPool"* %560, null
  br i1 %576, label %577, label %588

577:                                              ; preds = %558
  %578 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %578) #12
  %579 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %580 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %579, align 8
  %581 = bitcast i8** %580 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %581, align 8
  %582 = icmp eq i32 %567, 0
  br i1 %582, label %599, label %583

583:                                              ; preds = %577
  %584 = bitcast %"class.jxl::ThreadPool::RunCallState.408"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %584) #12
  %585 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.408", %"class.jxl::ThreadPool::RunCallState.408"* %5, i64 0, i32 0
  %586 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.408", %"class.jxl::ThreadPool::RunCallState.408"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %585, align 8
  store %class.anon* %21, %class.anon** %586, align 8
  %587 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %578, i8* nonnull %584, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %567) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %584) #12
  br label %599

588:                                              ; preds = %558
  %589 = icmp eq i32 %567, 0
  br i1 %589, label %601, label %590

590:                                              ; preds = %588
  %591 = bitcast %"class.jxl::ThreadPool::RunCallState.408"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %591) #12
  %592 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.408", %"class.jxl::ThreadPool::RunCallState.408"* %6, i64 0, i32 0
  %593 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.408", %"class.jxl::ThreadPool::RunCallState.408"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %592, align 8
  store %class.anon* %21, %class.anon** %593, align 8
  %594 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %560, i64 0, i32 0
  %595 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %594, align 8
  %596 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %560, i64 0, i32 1
  %597 = load i8*, i8** %596, align 8
  %598 = call i32 %595(i8* %597, i8* nonnull %591, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallDataFuncEPvjm", i32 0, i32 %567) #12
  br label %599

599:                                              ; preds = %577, %583, %590
  %600 = phi i8* [ %591, %590 ], [ %578, %583 ], [ %578, %577 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %600) #12
  br label %601

601:                                              ; preds = %599, %588
  %602 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.48, i64 0, i64 0), double %602) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %575) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %568) #12
  br label %603

603:                                              ; preds = %553, %601
  %604 = load atomic i8, i8* %554 seq_cst, align 1
  %605 = and i8 %604, 1
  %606 = icmp eq i8 %605, 0
  br i1 %606, label %607, label %793

607:                                              ; preds = %603
  %608 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 0
  %609 = load i8*, i8** %608, align 8
  %610 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 1
  %611 = load i8*, i8** %610, align 8
  %612 = ptrtoint i8* %609 to i64
  %613 = icmp eq i8* %609, %611
  br i1 %613, label %628, label %614

614:                                              ; preds = %607
  %615 = getelementptr inbounds i8, i8* %609, i64 1
  %616 = icmp eq i8* %615, %611
  br i1 %616, label %628, label %617

617:                                              ; preds = %614, %617
  %618 = phi i8* [ %626, %617 ], [ %615, %614 ]
  %619 = phi i64 [ %625, %617 ], [ %612, %614 ]
  %620 = ptrtoint i8* %618 to i64
  %621 = inttoptr i64 %619 to i8*
  %622 = load i8, i8* %618, align 1
  %623 = load i8, i8* %621, align 1
  %624 = icmp ult i8 %622, %623
  %625 = select i1 %624, i64 %620, i64 %619
  %626 = getelementptr inbounds i8, i8* %618, i64 1
  %627 = icmp eq i8* %626, %611
  br i1 %627, label %628, label %617

628:                                              ; preds = %617, %607, %614
  %629 = phi i64 [ %612, %607 ], [ %612, %614 ], [ %625, %617 ]
  %630 = inttoptr i64 %629 to i8*
  %631 = load i8, i8* %630, align 1
  %632 = icmp eq i8 %631, 1
  br i1 %632, label %633, label %656

633:                                              ; preds = %628
  %634 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 18
  %635 = load i8, i8* %634, align 2, !range !9
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %637, label %656

637:                                              ; preds = %633
  %638 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %639 = load i32, i32* %638, align 4
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %641, label %655

641:                                              ; preds = %637
  %642 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 4
  %643 = load i64, i64* %642, align 8
  %644 = and i64 %643, 160
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %646, label %655

646:                                              ; preds = %641
  %647 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %648 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %647, align 8
  %649 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %648, i64 0, i32 1
  %650 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %649, align 8
  %651 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %650, i64 0, i32 5, i32 0, i64 0
  %652 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %648, i64 0, i32 0, i32 13
  %653 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %654 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %653, align 8
  call void @_ZN3jxl19AdaptiveDCSmoothingEPKfPNS_6Image3IfEEPNS_10ThreadPoolE(float* %651, %"class.jxl::Image3"* %652, %"class.jxl::ThreadPool"* %654) #12
  br label %655

655:                                              ; preds = %637, %641, %646
  store i8 1, i8* %634, align 2
  call void @_ZN3jxl12FrameDecoder14AllocateOutputEv(%"class.jxl::FrameDecoder"* %0)
  br label %656

656:                                              ; preds = %628, %655, %633
  %657 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 18
  %658 = load i8, i8* %657, align 2, !range !9
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %685, label %660

660:                                              ; preds = %656
  %661 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %662 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %661, align 8
  call void @_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv(%"struct.jxl::PassesDecoderState"* %662)
  %663 = load i8, i8* %657, align 2, !range !9
  %664 = icmp eq i8 %663, 0
  %665 = load i64, i64* %14, align 8
  %666 = icmp eq i64 %538, %665
  %667 = or i1 %664, %666
  br i1 %667, label %685, label %668

668:                                              ; preds = %660
  %669 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 17
  %670 = load i8, i8* %669, align 1, !range !9
  %671 = icmp eq i8 %670, 0
  br i1 %671, label %672, label %685

672:                                              ; preds = %668
  %673 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %674 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %673, align 8
  %675 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %676 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %675, align 8
  call void @_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE(%"struct.jxl::PassesDecoderState"* %674, %"class.jxl::ThreadPool"* %676)
  %677 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %678 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %677, i64 %538, i32 0
  %679 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %678, align 8
  %680 = call i32 @_ZN3jxl12FrameDecoder15ProcessACGlobalEPNS_9BitReaderE(%"class.jxl::FrameDecoder"* %0, %"class.jxl::BitReader"* %679)
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %682, label %793

682:                                              ; preds = %672
  %683 = load i32*, i32** %15, align 8
  %684 = getelementptr inbounds i32, i32* %683, i64 %538
  store i32 0, i32* %684, align 4
  br label %685

685:                                              ; preds = %656, %668, %660, %682
  %686 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 17
  %687 = load i8, i8* %686, align 1, !range !9
  %688 = icmp eq i8 %687, 0
  br i1 %688, label %767, label %689

689:                                              ; preds = %685
  %690 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %691 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %690, align 8
  %692 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 4
  %693 = load i64, i64* %692, align 8
  %694 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 5
  %695 = load i64, i64* %694, align 8
  call void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"* %691, i64 %693, i64 %695) #12
  %696 = bitcast %"class.std::__1::vector.23"** %227 to i64*
  %697 = load i64, i64* %696, align 8
  %698 = bitcast %"class.std::__1::vector.343"* %17 to i64*
  %699 = load i64, i64* %698, align 8
  %700 = icmp eq i64 %697, %699
  br i1 %700, label %705, label %701

701:                                              ; preds = %689
  %702 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  br label %747

703:                                              ; preds = %760
  %704 = trunc i64 %765 to i32
  br label %705

705:                                              ; preds = %703, %689
  %706 = phi i32 [ 0, %689 ], [ %704, %703 ]
  %707 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %708 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %707, align 8
  %709 = bitcast %class.anon.355* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %709) #12
  %710 = getelementptr inbounds %class.anon.355, %class.anon.355* %22, i64 0, i32 0
  store %"class.jxl::FrameDecoder"* %0, %"class.jxl::FrameDecoder"** %710, align 8
  %711 = bitcast %class.anon.356* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %711) #12
  %712 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 0
  store %"class.jxl::FrameDecoder"* %0, %"class.jxl::FrameDecoder"** %712, align 8
  %713 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 1
  store %"class.std::__1::vector.343"* %17, %"class.std::__1::vector.343"** %713, align 8
  %714 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 2
  store %"class.std::__1::vector.23"* %19, %"class.std::__1::vector.23"** %714, align 8
  %715 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 3
  store i64* %14, i64** %715, align 8
  %716 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 4
  store %"struct.jxl::FrameDecoder::SectionInfo"** %13, %"struct.jxl::FrameDecoder::SectionInfo"*** %716, align 8
  %717 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 5
  store i32** %15, i32*** %717, align 8
  %718 = getelementptr inbounds %class.anon.356, %class.anon.356* %23, i64 0, i32 6
  store %"struct.std::__1::atomic.350"* %20, %"struct.std::__1::atomic.350"** %718, align 8
  %719 = bitcast double* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %719) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %11, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0), double* nonnull %11) #12
  %720 = icmp eq %"class.jxl::ThreadPool"* %708, null
  br i1 %720, label %721, label %732

721:                                              ; preds = %705
  %722 = bitcast %"class.jxl::ThreadPool"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %722) #12
  %723 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 0
  %724 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %723, align 8
  %725 = bitcast i8** %724 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %12, %"class.jxl::ThreadPool"** %725, align 8
  %726 = icmp eq i32 %706, 0
  br i1 %726, label %743, label %727

727:                                              ; preds = %721
  %728 = bitcast %"class.jxl::ThreadPool::RunCallState.409"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %728) #12
  %729 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.409", %"class.jxl::ThreadPool::RunCallState.409"* %9, i64 0, i32 0
  %730 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.409", %"class.jxl::ThreadPool::RunCallState.409"* %9, i64 0, i32 1
  store %class.anon.355* %22, %class.anon.355** %729, align 8
  store %class.anon.356* %23, %class.anon.356** %730, align 8
  %731 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %722, i8* nonnull %728, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %706) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %728) #12
  br label %743

732:                                              ; preds = %705
  %733 = icmp eq i32 %706, 0
  br i1 %733, label %745, label %734

734:                                              ; preds = %732
  %735 = bitcast %"class.jxl::ThreadPool::RunCallState.409"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %735) #12
  %736 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.409", %"class.jxl::ThreadPool::RunCallState.409"* %10, i64 0, i32 0
  %737 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.409", %"class.jxl::ThreadPool::RunCallState.409"* %10, i64 0, i32 1
  store %class.anon.355* %22, %class.anon.355** %736, align 8
  store %class.anon.356* %23, %class.anon.356** %737, align 8
  %738 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %708, i64 0, i32 0
  %739 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %738, align 8
  %740 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %708, i64 0, i32 1
  %741 = load i8*, i8** %740, align 8
  %742 = call i32 %739(i8* %741, i8* nonnull %735, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %706) #12
  br label %743

743:                                              ; preds = %721, %727, %734
  %744 = phi i8* [ %735, %734 ], [ %722, %727 ], [ %722, %721 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %744) #12
  br label %745

745:                                              ; preds = %743, %732
  %746 = load double, double* %11, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0), double %746) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %719) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %711) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %709) #12
  br label %767

747:                                              ; preds = %701, %760
  %748 = phi i64 [ %699, %701 ], [ %761, %760 ]
  %749 = phi i64 [ %697, %701 ], [ %762, %760 ]
  %750 = phi i64 [ 0, %701 ], [ %763, %760 ]
  %751 = load i64*, i64** %344, align 8
  %752 = getelementptr inbounds i64, i64* %751, i64 %750
  %753 = load i64, i64* %752, align 8
  %754 = icmp eq i64 %753, 0
  br i1 %754, label %760, label %755

755:                                              ; preds = %747
  %756 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %702, align 8
  %757 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %756, i64 0, i32 26
  call void @_ZN3jxl19GroupBorderAssigner9ClearDoneEm(%"class.jxl::GroupBorderAssigner"* %757, i64 %750) #12
  %758 = load i64, i64* %696, align 8
  %759 = load i64, i64* %698, align 8
  br label %760

760:                                              ; preds = %747, %755
  %761 = phi i64 [ %748, %747 ], [ %759, %755 ]
  %762 = phi i64 [ %749, %747 ], [ %758, %755 ]
  %763 = add nuw i64 %750, 1
  %764 = sub i64 %762, %761
  %765 = sdiv exact i64 %764, 24
  %766 = icmp ult i64 %763, %765
  br i1 %766, label %747, label %703

767:                                              ; preds = %685, %745
  %768 = load atomic i8, i8* %554 seq_cst, align 1
  %769 = and i8 %768, 1
  %770 = icmp eq i8 %769, 0
  br i1 %770, label %771, label %793

771:                                              ; preds = %767
  %772 = load i64, i64* %14, align 8
  %773 = icmp eq i64 %772, 0
  br i1 %773, label %793, label %774

774:                                              ; preds = %771
  %775 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 0
  br label %776

776:                                              ; preds = %774, %789
  %777 = phi i64 [ %772, %774 ], [ %790, %789 ]
  %778 = phi i64 [ 0, %774 ], [ %791, %789 ]
  %779 = load i32*, i32** %15, align 8
  %780 = getelementptr inbounds i32, i32* %779, i64 %778
  %781 = load i32, i32* %780, align 4
  switch i32 %781, label %789 [
    i32 1, label %782
    i32 3, label %782
  ]

782:                                              ; preds = %776, %776
  %783 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %13, align 8
  %784 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %783, i64 %778, i32 1
  %785 = load i64, i64* %784, align 8
  %786 = load i8*, i8** %775, align 8
  %787 = getelementptr inbounds i8, i8* %786, i64 %785
  store i8 0, i8* %787, align 1
  %788 = load i64, i64* %14, align 8
  br label %789

789:                                              ; preds = %776, %782
  %790 = phi i64 [ %777, %776 ], [ %788, %782 ]
  %791 = add nuw i64 %778, 1
  %792 = icmp ult i64 %791, %790
  br i1 %792, label %776, label %793

793:                                              ; preds = %789, %771, %767, %603, %672
  %794 = phi i32 [ 1, %603 ], [ %680, %672 ], [ 1, %767 ], [ 0, %771 ], [ 0, %789 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %554) #12
  br label %795

795:                                              ; preds = %473, %542, %793
  %796 = phi i32 [ %794, %793 ], [ %546, %542 ], [ 1, %473 ]
  %797 = load i64*, i64** %344, align 8
  %798 = icmp eq i64* %797, null
  br i1 %798, label %803, label %799

799:                                              ; preds = %795
  %800 = ptrtoint i64* %797 to i64
  %801 = bitcast i64** %345 to i64*
  store i64 %800, i64* %801, align 8
  %802 = bitcast i64* %797 to i8*
  call void @_ZdlPv(i8* %802) #15
  br label %803

803:                                              ; preds = %795, %799
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %343) #12
  %804 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %226, align 8
  %805 = icmp eq %"class.std::__1::vector.23"* %804, null
  br i1 %805, label %828, label %806

806:                                              ; preds = %803
  %807 = bitcast %"class.std::__1::vector.23"* %804 to i8*
  %808 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %227, align 8
  %809 = icmp eq %"class.std::__1::vector.23"* %808, %804
  br i1 %809, label %826, label %810

810:                                              ; preds = %806, %821
  %811 = phi %"class.std::__1::vector.23"* [ %812, %821 ], [ %808, %806 ]
  %812 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %811, i64 -1
  %813 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %812, i64 0, i32 0, i32 0
  %814 = load i64*, i64** %813, align 8
  %815 = icmp eq i64* %814, null
  br i1 %815, label %821, label %816

816:                                              ; preds = %810
  %817 = ptrtoint i64* %814 to i64
  %818 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %811, i64 -1, i32 0, i32 1
  %819 = bitcast i64** %818 to i64*
  store i64 %817, i64* %819, align 8
  %820 = bitcast i64* %814 to i8*
  call void @_ZdlPv(i8* %820) #15
  br label %821

821:                                              ; preds = %816, %810
  %822 = icmp eq %"class.std::__1::vector.23"* %812, %804
  br i1 %822, label %823, label %810

823:                                              ; preds = %821
  %824 = bitcast %"class.std::__1::vector.343"* %17 to i8**
  %825 = load i8*, i8** %824, align 8
  br label %826

826:                                              ; preds = %823, %806
  %827 = phi i8* [ %825, %823 ], [ %807, %806 ]
  store %"class.std::__1::vector.23"* %804, %"class.std::__1::vector.23"** %227, align 8
  call void @_ZdlPv(i8* %827) #15
  br label %828

828:                                              ; preds = %803, %826
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #12
  %829 = load i64*, i64** %119, align 8
  %830 = icmp eq i64* %829, null
  br i1 %830, label %835, label %831

831:                                              ; preds = %828
  %832 = ptrtoint i64* %829 to i64
  %833 = bitcast i64** %120 to i64*
  store i64 %832, i64* %833, align 8
  %834 = bitcast i64* %829 to i8*
  call void @_ZdlPv(i8* %834) #15
  br label %835

835:                                              ; preds = %828, %831
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118) #12
  br label %836

836:                                              ; preds = %4, %835
  %837 = phi i32 [ %796, %835 ], [ 0, %4 ]
  ret i32 %837
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder13FinalizeFrameEv(%"class.jxl::FrameDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca { i32, i32, i32, i32, i64 }, align 8
  %3 = alloca { i32, i32, i32, i32, i64 }, align 8
  %4 = alloca %"class.jxl::ImageBundle", align 8
  %5 = alloca %"class.jxl::ImageBundle", align 8
  %6 = alloca %"class.std::__1::vector.169", align 8
  %7 = alloca %"class.jxl::Plane.97", align 8
  %8 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 19
  %9 = load i8, i8* %8, align 1, !range !9
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %405

11:                                               ; preds = %1
  store i8 1, i8* %8, align 1
  %12 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %13 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %14, align 8
  %16 = icmp eq %"struct.jxl::jpeg::JPEGData"* %15, null
  br i1 %16, label %17, label %405

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 18
  %19 = load i8, i8* %18, align 2, !range !9
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %23 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %23, i64 0, i32 0, i32 1, i32 26, i32 11
  store i32 0, i32* %24, align 4
  br label %25

25:                                               ; preds = %17, %21
  %26 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 16
  %27 = load i8, i8* %26, align 8, !range !9
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %88, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 17
  %31 = load i8, i8* %30, align 1, !range !9
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %88, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = ptrtoint i8* %35 to i64
  %39 = icmp eq i8* %35, %37
  br i1 %39, label %54, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds i8, i8* %35, i64 1
  %42 = icmp eq i8* %41, %37
  br i1 %42, label %54, label %43

43:                                               ; preds = %40, %43
  %44 = phi i8* [ %52, %43 ], [ %41, %40 ]
  %45 = phi i64 [ %51, %43 ], [ %38, %40 ]
  %46 = ptrtoint i8* %44 to i64
  %47 = inttoptr i64 %45 to i8*
  %48 = load i8, i8* %44, align 1
  %49 = load i8, i8* %47, align 1
  %50 = icmp ult i8 %48, %49
  %51 = select i1 %50, i64 %46, i64 %45
  %52 = getelementptr inbounds i8, i8* %44, i64 1
  %53 = icmp eq i8* %52, %37
  br i1 %53, label %54, label %43

54:                                               ; preds = %43, %33, %40
  %55 = phi i64 [ %38, %33 ], [ %38, %40 ], [ %51, %43 ]
  %56 = inttoptr i64 %55 to i8*
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 1
  br i1 %58, label %59, label %88

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 1
  %63 = load i8*, i8** %62, align 8
  %64 = ptrtoint i8* %61 to i64
  %65 = icmp eq i8* %61, %63
  br i1 %65, label %80, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds i8, i8* %61, i64 1
  %68 = icmp eq i8* %67, %63
  br i1 %68, label %80, label %69

69:                                               ; preds = %66, %69
  %70 = phi i8* [ %78, %69 ], [ %67, %66 ]
  %71 = phi i64 [ %77, %69 ], [ %64, %66 ]
  %72 = ptrtoint i8* %70 to i64
  %73 = inttoptr i64 %71 to i8*
  %74 = load i8, i8* %70, align 1
  %75 = load i8, i8* %73, align 1
  %76 = icmp ult i8 %74, %75
  %77 = select i1 %76, i64 %72, i64 %71
  %78 = getelementptr inbounds i8, i8* %70, i64 1
  %79 = icmp eq i8* %78, %63
  br i1 %79, label %80, label %69

80:                                               ; preds = %69, %59, %66
  %81 = phi i64 [ %64, %59 ], [ %64, %66 ], [ %77, %69 ]
  %82 = inttoptr i64 %81 to i8*
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 4
  %86 = load i64, i64* %85, align 8
  %87 = icmp ugt i64 %86, %84
  br i1 %87, label %88, label %92

88:                                               ; preds = %54, %29, %25, %80
  %89 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 9
  %90 = load i8, i8* %89, align 8, !range !9
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %405, label %92

92:                                               ; preds = %80, %88
  %93 = tail call i32 @_ZN3jxl12FrameDecoder5FlushEv(%"class.jxl::FrameDecoder"* %0)
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %405

95:                                               ; preds = %92
  %96 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %97 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %98 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %97, i64 0, i32 1
  %99 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %98, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %99, i64 0, i32 1, i32 21
  %101 = load i8, i8* %100, align 8, !range !9
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %245

103:                                              ; preds = %95
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %99, i64 0, i32 1, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %245, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %99, i64 0, i32 1, i32 20, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = icmp ne i32 %109, 0
  %111 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %99, i64 0, i32 1, i32 22
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  %114 = and i1 %110, %113
  br i1 %114, label %245, label %115

115:                                              ; preds = %107
  %116 = zext i32 %112 to i64
  %117 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %97, i64 0, i32 4, i32 0, i64 0, i32 0, i32 0
  %118 = load i32, i32* %117, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %126

120:                                              ; preds = %115
  %121 = bitcast %"class.jxl::ImageBundle"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %121) #12
  %122 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %4, %"class.jxl::ImageBundle"* %122)
  %123 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %124 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %123, i64 0, i32 0, i32 17, i64 %116, i32 0
  %125 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %124, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %4) #12
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %121) #12
  br label %232

126:                                              ; preds = %115
  %127 = bitcast %"class.jxl::ImageBundle"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %127) #12
  %128 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %129 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %128, i64 0, i32 9
  %130 = bitcast %"struct.jxl::ImageMetadata"** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.jxl::ImageBundle"* %5 to i64*
  store i64 0, i64* %132, align 8
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 1
  store i32 1, i32* %133, align 8
  %134 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %134) #12
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 4, i32 0
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 8
  %137 = bitcast %"class.std::__1::basic_string"* %136 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 24, i1 false) #12
  %138 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 9
  %139 = bitcast i32* %135 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 14, i1 false) #12
  %140 = bitcast %"struct.jxl::ImageMetadata"** %138 to i64*
  store i64 %131, i64* %140, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 10
  %142 = bitcast %"class.jxl::Image3"* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 96, i1 false) #12
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %143) #12
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %5, i64 0, i32 12
  %145 = bitcast %"class.std::__1::vector.169"* %144 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 32, i1 false) #12
  %146 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %147 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %146, i64 0, i32 0, i32 17, i64 %116, i32 0
  %148 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %147, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %5) #12
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %127) #12
  %149 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %150 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %149, i64 0, i32 0, i32 17, i64 %116, i32 0
  %151 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %149, i64 0, i32 4
  %152 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %152, i64 0, i32 11
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %150, %"class.jxl::Image3"* dereferenceable(96) %151, %"struct.jxl::ColorEncoding"* dereferenceable(152) %153) #12
  %154 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %155 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %154, i64 0, i32 12, i32 0, i32 0
  %156 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %155, align 8
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %154, i64 0, i32 12, i32 0, i32 1
  %158 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %157, align 8
  %159 = icmp eq %"class.jxl::Plane.97"* %156, %158
  br i1 %159, label %232, label %160

160:                                              ; preds = %126
  %161 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %162 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %161, i64 0, i32 5
  %163 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %162, i64 0, i32 0, i32 0
  %164 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %163, align 8
  %165 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %161, i64 0, i32 5, i32 0, i32 1
  %166 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %165, align 8
  %167 = icmp eq %"class.jxl::Plane.97"* %164, %166
  %168 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %154, i64 0, i32 12
  %169 = select i1 %167, %"class.std::__1::vector.169"* %168, %"class.std::__1::vector.169"* %162
  %170 = bitcast %"class.std::__1::vector.169"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %170) #12
  %171 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %6, i64 0, i32 0, i32 0
  %172 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %6, i64 0, i32 0, i32 1
  %173 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %170, i8 0, i64 24, i1 false) #12
  %174 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %169, i64 0, i32 0, i32 0
  %175 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %174, align 8
  %176 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %169, i64 0, i32 0, i32 1
  %177 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %176, align 8
  %178 = icmp eq %"class.jxl::Plane.97"* %175, %177
  br i1 %178, label %188, label %179

179:                                              ; preds = %160
  %180 = bitcast %"class.jxl::Plane.97"* %7 to i8*
  %181 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %7, i64 0, i32 0, i32 5
  %182 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %181, i64 0, i32 0, i32 0, i32 0
  %183 = bitcast %"class.std::__1::unique_ptr"* %181 to i64*
  %184 = bitcast %"class.jxl::Plane.97"** %172 to i64*
  %185 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %212

186:                                              ; preds = %229
  %187 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  br label %188

188:                                              ; preds = %186, %160
  %189 = phi %"struct.jxl::PassesDecoderState"* [ %187, %186 ], [ %161, %160 ]
  %190 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %189, i64 0, i32 0, i32 17, i64 %116, i32 0
  call void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"* %190, %"class.std::__1::vector.169"* nonnull dereferenceable(24) %6) #12
  %191 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %171, align 8
  %192 = icmp eq %"class.jxl::Plane.97"* %191, null
  br i1 %192, label %211, label %193

193:                                              ; preds = %188
  %194 = bitcast %"class.jxl::Plane.97"* %191 to i8*
  %195 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %172, align 8
  %196 = icmp eq %"class.jxl::Plane.97"* %195, %191
  br i1 %196, label %209, label %197

197:                                              ; preds = %193, %204
  %198 = phi %"class.jxl::Plane.97"* [ %199, %204 ], [ %195, %193 ]
  %199 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %198, i64 -1
  %200 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %198, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %201 = load i8*, i8** %200, align 8
  store i8* null, i8** %200, align 8
  %202 = icmp eq i8* %201, null
  br i1 %202, label %204, label %203

203:                                              ; preds = %197
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %201) #12
  br label %204

204:                                              ; preds = %203, %197
  %205 = icmp eq %"class.jxl::Plane.97"* %199, %191
  br i1 %205, label %206, label %197

206:                                              ; preds = %204
  %207 = bitcast %"class.std::__1::vector.169"* %6 to i8**
  %208 = load i8*, i8** %207, align 8
  br label %209

209:                                              ; preds = %206, %193
  %210 = phi i8* [ %208, %206 ], [ %194, %193 ]
  store %"class.jxl::Plane.97"* %191, %"class.jxl::Plane.97"** %172, align 8
  call void @_ZdlPv(i8* %210) #15
  br label %211

211:                                              ; preds = %188, %209
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %170) #12
  br label %232

212:                                              ; preds = %179, %229
  %213 = phi %"class.jxl::Plane.97"* [ %175, %179 ], [ %230, %229 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %180) #12
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.97"* nonnull sret %7, %"class.jxl::Plane.97"* dereferenceable(32) %213)
  %214 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %172, align 8
  %215 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %173, align 8
  %216 = icmp ult %"class.jxl::Plane.97"* %214, %215
  br i1 %216, label %217, label %224

217:                                              ; preds = %212
  %218 = bitcast %"class.jxl::Plane.97"* %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %218, i8* nonnull align 8 %180, i64 24, i1 false) #12
  %219 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %214, i64 0, i32 0, i32 5
  %220 = load i64, i64* %183, align 8
  store i8* null, i8** %182, align 8
  %221 = bitcast %"class.std::__1::unique_ptr"* %219 to i64*
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %214, i64 1
  %223 = ptrtoint %"class.jxl::Plane.97"* %222 to i64
  store i64 %223, i64* %184, align 8
  br label %225

224:                                              ; preds = %212
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.169"* nonnull %6, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %7) #12
  br label %225

225:                                              ; preds = %217, %224
  %226 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %229, label %228

228:                                              ; preds = %225
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %226) #12
  br label %229

229:                                              ; preds = %225, %228
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %180) #12
  %230 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %213, i64 1
  %231 = icmp eq %"class.jxl::Plane.97"* %230, %177
  br i1 %231, label %186, label %212

232:                                              ; preds = %126, %211, %120
  %233 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %234 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %233, i64 0, i32 0, i32 17, i64 %116, i32 0
  %235 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %233, i64 0, i32 0, i32 17, i64 %116, i32 1
  store %"class.jxl::ImageBundle"* %234, %"class.jxl::ImageBundle"** %235, align 8
  %236 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %237 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %236, i64 0, i32 1
  %238 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %237, align 8
  %239 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %238, i64 0, i32 1, i32 23
  %240 = load i8, i8* %239, align 8, !range !9
  %241 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %236, i64 0, i32 0, i32 17, i64 %116, i32 2
  store i8 %240, i8* %241, align 8
  %242 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %243 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %242, i64 0, i32 1
  %244 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %243, align 8
  br label %245

245:                                              ; preds = %107, %95, %103, %232
  %246 = phi %"struct.jxl::PassesSharedState"* [ %99, %95 ], [ %99, %103 ], [ %244, %232 ], [ %99, %107 ]
  %247 = phi %"struct.jxl::PassesDecoderState"* [ %97, %95 ], [ %97, %103 ], [ %242, %232 ], [ %97, %107 ]
  %248 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %246, i64 0, i32 1, i32 24
  %249 = load i32, i32* %248, align 4
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %330, label %251

251:                                              ; preds = %245
  %252 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %253 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10
  %254 = add i32 %249, -1
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255
  %257 = bitcast %"class.jxl::Image3"* %256 to i8*
  %258 = bitcast %"class.jxl::Image3"* %253 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %257, i8* align 8 %258, i64 24, i1 false) #12
  %259 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255, i32 0, i64 0, i32 0, i32 5
  %260 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %261 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %260, i64 0, i32 0, i32 0, i32 0
  %262 = bitcast %"class.std::__1::unique_ptr"* %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i8* null, i8** %261, align 8
  %264 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %259, i64 0, i32 0, i32 0, i32 0
  %265 = load i8*, i8** %264, align 8
  %266 = bitcast %"class.std::__1::unique_ptr"* %259 to i64*
  store i64 %263, i64* %266, align 8
  %267 = icmp eq i8* %265, null
  br i1 %267, label %269, label %268

268:                                              ; preds = %251
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %265) #12
  br label %269

269:                                              ; preds = %268, %251
  %270 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10, i32 0, i64 1
  %271 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255, i32 0, i64 1
  %272 = bitcast %"class.jxl::Plane.97"* %271 to i8*
  %273 = bitcast %"class.jxl::Plane.97"* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 24, i1 false) #12
  %274 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255, i32 0, i64 1, i32 0, i32 5
  %275 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %276 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %275, i64 0, i32 0, i32 0, i32 0
  %277 = bitcast %"class.std::__1::unique_ptr"* %275 to i64*
  %278 = load i64, i64* %277, align 8
  store i8* null, i8** %276, align 8
  %279 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %274, i64 0, i32 0, i32 0, i32 0
  %280 = load i8*, i8** %279, align 8
  %281 = bitcast %"class.std::__1::unique_ptr"* %274 to i64*
  store i64 %278, i64* %281, align 8
  %282 = icmp eq i8* %280, null
  br i1 %282, label %284, label %283

283:                                              ; preds = %269
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %280) #12
  br label %284

284:                                              ; preds = %283, %269
  %285 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10, i32 0, i64 2
  %286 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255, i32 0, i64 2
  %287 = bitcast %"class.jxl::Plane.97"* %286 to i8*
  %288 = bitcast %"class.jxl::Plane.97"* %285 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %287, i8* align 8 %288, i64 24, i1 false) #12
  %289 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %247, i64 0, i32 0, i32 16, i64 %255, i32 0, i64 2, i32 0, i32 5
  %290 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %252, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %291 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %290, i64 0, i32 0, i32 0, i32 0
  %292 = bitcast %"class.std::__1::unique_ptr"* %290 to i64*
  %293 = load i64, i64* %292, align 8
  store i8* null, i8** %291, align 8
  %294 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %289, i64 0, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  %296 = bitcast %"class.std::__1::unique_ptr"* %289 to i64*
  store i64 %293, i64* %296, align 8
  %297 = icmp eq i8* %295, null
  br i1 %297, label %299, label %298

298:                                              ; preds = %284
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %295) #12
  br label %299

299:                                              ; preds = %284, %298
  %300 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %301 = bitcast { i32, i32, i32, i32, i64 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %301)
  %302 = bitcast { i32, i32, i32, i32, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %302)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %301, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %302, i8 0, i64 24, i1 false)
  %303 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10
  %304 = bitcast %"class.jxl::Image3"* %303 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %304, i8 0, i64 24, i1 false) #12
  %305 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %306 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %305, i64 0, i32 0, i32 0, i32 0
  %307 = load i8*, i8** %306, align 8
  %308 = bitcast %"class.std::__1::unique_ptr"* %305 to i64*
  store i64 0, i64* %308, align 8
  %309 = icmp eq i8* %307, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %299
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %307) #12
  br label %311

311:                                              ; preds = %310, %299
  %312 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10, i32 0, i64 1
  %313 = bitcast %"class.jxl::Plane.97"* %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %313, i8* nonnull align 8 %301, i64 24, i1 false) #12
  %314 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %315 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %314, i64 0, i32 0, i32 0, i32 0
  %316 = load i8*, i8** %315, align 8
  %317 = bitcast %"class.std::__1::unique_ptr"* %314 to i64*
  store i64 0, i64* %317, align 8
  %318 = icmp eq i8* %316, null
  br i1 %318, label %320, label %319

319:                                              ; preds = %311
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %316) #12
  br label %320

320:                                              ; preds = %319, %311
  %321 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10, i32 0, i64 2
  %322 = bitcast %"class.jxl::Plane.97"* %321 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %322, i8* nonnull align 8 %302, i64 24, i1 false) #12
  %323 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %300, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %324 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %323, i64 0, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  %326 = bitcast %"class.std::__1::unique_ptr"* %323 to i64*
  store i64 0, i64* %326, align 8
  %327 = icmp eq i8* %325, null
  br i1 %327, label %329, label %328

328:                                              ; preds = %320
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #12
  br label %329

329:                                              ; preds = %320, %328
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %301)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %302)
  br label %330

330:                                              ; preds = %245, %329
  %331 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 27
  %332 = load i8, i8* %331, align 8, !range !9
  %333 = icmp eq i8 %332, 0
  %334 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  br i1 %333, label %340, label %335

335:                                              ; preds = %330
  %336 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 0
  %337 = load i64, i64* %336, align 8
  %338 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 1
  %339 = load i64, i64* %338, align 8
  call void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"* %334, i64 %337, i64 %339) #12
  br label %379

340:                                              ; preds = %330
  %341 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %334, i64 0, i32 0, i32 0, i32 0, i32 0
  %342 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %341, align 8
  %343 = icmp eq %"struct.jxl::jpeg::JPEGData"* %342, null
  br i1 %343, label %344, label %379

344:                                              ; preds = %340
  %345 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 3
  %346 = load i32, i32* %345, align 8
  switch i32 %346, label %374 [
    i32 0, label %347
    i32 3, label %347
  ]

347:                                              ; preds = %344, %344
  %348 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %349 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %348, i64 0, i32 1
  %350 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %349, align 8
  %351 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %350, i64 0, i32 1, i32 25
  %352 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %351, align 8
  %353 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %352, i64 0, i32 1
  %354 = call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %353) #12
  %355 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %96, align 8
  %356 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %355, i64 0, i32 1
  %357 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %356, align 8
  %358 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %357, i64 0, i32 1, i32 25
  %359 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %358, align 8
  %360 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %359, i64 0, i32 1, i32 1
  %361 = load i8, i8* %360, align 8, !range !9
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %368, label %363

363:                                              ; preds = %347
  %364 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %359, i64 0, i32 1, i32 2
  %365 = load i32, i32* %364, align 4
  %366 = shl i32 %365, 3
  %367 = add i32 %366, 8
  br label %371

368:                                              ; preds = %347
  %369 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %359, i64 0, i32 1, i32 3
  %370 = load i32, i32* %369, align 8
  br label %371

371:                                              ; preds = %363, %368
  %372 = phi i32 [ %367, %363 ], [ %370, %368 ]
  %373 = zext i32 %372 to i64
  call void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"* %334, i64 %354, i64 %373) #12
  br label %379

374:                                              ; preds = %344
  %375 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 2
  %376 = load i64, i64* %375, align 8
  %377 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 3
  %378 = load i64, i64* %377, align 8
  call void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"* %334, i64 %376, i64 %378) #12
  br label %379

379:                                              ; preds = %340, %374, %371, %335
  %380 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 11
  %381 = load i8, i8* %380, align 2, !range !9
  %382 = icmp eq i8 %381, 0
  br i1 %382, label %405, label %383

383:                                              ; preds = %379
  %384 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  %385 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %384, i64 0, i32 12
  %386 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %384, i64 0, i32 12, i32 0, i32 1
  %387 = bitcast %"class.jxl::Plane.97"** %386 to i64*
  %388 = load i64, i64* %387, align 8
  %389 = bitcast %"class.std::__1::vector.169"* %385 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = icmp eq i64 %388, %390
  br i1 %391, label %405, label %392

392:                                              ; preds = %383, %523
  %393 = phi %"class.jxl::ImageBundle"* [ %524, %523 ], [ %384, %383 ]
  %394 = phi %"class.jxl::ImageBundle"* [ %525, %523 ], [ %384, %383 ]
  %395 = phi i64 [ %526, %523 ], [ 0, %383 ]
  %396 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %394, i64 0, i32 9
  %397 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %396, align 8
  %398 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %397, i64 0, i32 17, i32 0, i32 0
  %399 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %398, align 8
  %400 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %399, i64 %395, i32 2
  %401 = load i32, i32* %400, align 4
  switch i32 %401, label %402 [
    i32 16, label %523
    i32 15, label %405
  ]

402:                                              ; preds = %392
  %403 = add i32 %401, -7
  %404 = icmp ult i32 %403, 8
  br i1 %404, label %405, label %407

405:                                              ; preds = %523, %402, %392, %383, %1, %88, %92, %379, %11
  %406 = phi i32 [ 1, %1 ], [ 0, %11 ], [ 1, %88 ], [ %93, %92 ], [ 0, %379 ], [ 0, %383 ], [ 1, %402 ], [ 1, %392 ], [ 0, %523 ]
  ret i32 %406

407:                                              ; preds = %402
  %408 = icmp eq i32 %401, 2
  br i1 %408, label %409, label %523

409:                                              ; preds = %407
  %410 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %399, i64 %395, i32 7, i64 3
  %411 = load float, float* %410, align 4
  %412 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %394, i64 0, i32 0, i32 0, i32 0, i32 0
  %413 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %412, align 8
  br label %414

414:                                              ; preds = %450, %409
  %415 = phi %"struct.jxl::jpeg::JPEGData"* [ %413, %409 ], [ %422, %450 ]
  %416 = phi %"class.jxl::ImageBundle"* [ %393, %409 ], [ %423, %450 ]
  %417 = phi %"class.jxl::ImageBundle"* [ %394, %409 ], [ %424, %450 ]
  %418 = phi %"class.jxl::ImageBundle"* [ %394, %409 ], [ %425, %450 ]
  %419 = phi i64 [ 0, %409 ], [ %451, %450 ]
  %420 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %399, i64 %395, i32 7, i64 %419
  br label %421

421:                                              ; preds = %414, %504
  %422 = phi %"struct.jxl::jpeg::JPEGData"* [ %480, %504 ], [ %415, %414 ]
  %423 = phi %"class.jxl::ImageBundle"* [ %477, %504 ], [ %416, %414 ]
  %424 = phi %"class.jxl::ImageBundle"* [ %477, %504 ], [ %417, %414 ]
  %425 = phi %"class.jxl::ImageBundle"* [ %477, %504 ], [ %418, %414 ]
  %426 = phi i64 [ %505, %504 ], [ 0, %414 ]
  %427 = icmp eq %"struct.jxl::jpeg::JPEGData"* %422, null
  br i1 %427, label %432, label %428

428:                                              ; preds = %421
  %429 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %422, i64 0, i32 2
  %430 = load i32, i32* %429, align 4
  %431 = sext i32 %430 to i64
  br label %447

432:                                              ; preds = %421
  %433 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %434 = load i32, i32* %433, align 4
  %435 = zext i32 %434 to i64
  %436 = icmp eq i32 %434, 0
  br i1 %436, label %437, label %447

437:                                              ; preds = %432
  %438 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 12, i32 0, i32 0
  %439 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %438, align 8
  %440 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 12, i32 0, i32 1
  %441 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %440, align 8
  %442 = icmp eq %"class.jxl::Plane.97"* %439, %441
  br i1 %442, label %447, label %443

443:                                              ; preds = %437
  %444 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %439, i64 0, i32 0, i32 1
  %445 = load i32, i32* %444, align 4
  %446 = zext i32 %445 to i64
  br label %447

447:                                              ; preds = %428, %432, %437, %443
  %448 = phi i64 [ %431, %428 ], [ %446, %443 ], [ 0, %437 ], [ %435, %432 ]
  %449 = icmp ult i64 %426, %448
  br i1 %449, label %453, label %450

450:                                              ; preds = %447
  %451 = add nuw nsw i64 %419, 1
  %452 = icmp eq i64 %451, 3
  br i1 %452, label %523, label %414

453:                                              ; preds = %447
  %454 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 10, i32 0, i64 %419, i32 0, i32 5, i32 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  %456 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 10, i32 0, i64 %419, i32 0, i32 4
  %457 = load i64, i64* %456, align 8
  %458 = mul i64 %457, %426
  %459 = getelementptr inbounds i8, i8* %455, i64 %458
  %460 = ptrtoint i8* %459 to i64
  %461 = and i64 %460, 63
  %462 = icmp eq i64 %461, 0
  call void @llvm.assume(i1 %462) #12
  %463 = bitcast i8* %459 to float*
  %464 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %425, i64 0, i32 12, i32 0, i32 0
  %465 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %464, align 8
  %466 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %465, i64 %395, i32 0, i32 5, i32 0, i32 0, i32 0
  %467 = load i8*, i8** %466, align 8
  %468 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %465, i64 %395, i32 0, i32 4
  %469 = load i64, i64* %468, align 8
  %470 = mul i64 %469, %426
  %471 = getelementptr inbounds i8, i8* %467, i64 %470
  %472 = ptrtoint i8* %471 to i64
  %473 = and i64 %472, 63
  %474 = icmp eq i64 %473, 0
  call void @llvm.assume(i1 %474) #12
  %475 = bitcast i8* %471 to float*
  br label %476

476:                                              ; preds = %506, %453
  %477 = phi %"class.jxl::ImageBundle"* [ %423, %453 ], [ %522, %506 ]
  %478 = phi i64 [ 0, %453 ], [ %521, %506 ]
  %479 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %477, i64 0, i32 0, i32 0, i32 0, i32 0
  %480 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %479, align 8
  %481 = icmp eq %"struct.jxl::jpeg::JPEGData"* %480, null
  br i1 %481, label %486, label %482

482:                                              ; preds = %476
  %483 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %480, i64 0, i32 1
  %484 = load i32, i32* %483, align 8
  %485 = sext i32 %484 to i64
  br label %501

486:                                              ; preds = %476
  %487 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %477, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %488 = load i32, i32* %487, align 8
  %489 = zext i32 %488 to i64
  %490 = icmp eq i32 %488, 0
  br i1 %490, label %491, label %501

491:                                              ; preds = %486
  %492 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %477, i64 0, i32 12, i32 0, i32 0
  %493 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %492, align 8
  %494 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %477, i64 0, i32 12, i32 0, i32 1
  %495 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %494, align 8
  %496 = icmp eq %"class.jxl::Plane.97"* %493, %495
  br i1 %496, label %501, label %497

497:                                              ; preds = %491
  %498 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %493, i64 0, i32 0, i32 0
  %499 = load i32, i32* %498, align 8
  %500 = zext i32 %499 to i64
  br label %501

501:                                              ; preds = %482, %486, %491, %497
  %502 = phi i64 [ %485, %482 ], [ %500, %497 ], [ 0, %491 ], [ %489, %486 ]
  %503 = icmp ult i64 %478, %502
  br i1 %503, label %506, label %504

504:                                              ; preds = %501
  %505 = add i64 %426, 1
  br label %421

506:                                              ; preds = %501
  %507 = getelementptr inbounds float, float* %475, i64 %478
  %508 = load float, float* %507, align 4
  %509 = fmul float %411, %508
  %510 = load float, float* %420, align 4
  %511 = fmul float %509, %510
  %512 = fpext float %511 to double
  %513 = fpext float %509 to double
  %514 = fsub double 1.000000e+00, %513
  %515 = getelementptr inbounds float, float* %463, i64 %478
  %516 = load float, float* %515, align 4
  %517 = fpext float %516 to double
  %518 = fmul double %514, %517
  %519 = fadd double %518, %512
  %520 = fptrunc double %519 to float
  store float %520, float* %515, align 4
  %521 = add nuw i64 %478, 1
  %522 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %12, align 8
  br label %476

523:                                              ; preds = %450, %392, %407
  %524 = phi %"class.jxl::ImageBundle"* [ %393, %392 ], [ %393, %407 ], [ %423, %450 ]
  %525 = phi %"class.jxl::ImageBundle"* [ %394, %392 ], [ %394, %407 ], [ %424, %450 ]
  %526 = add nuw i64 %395, 1
  %527 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %525, i64 0, i32 12
  %528 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %525, i64 0, i32 12, i32 0, i32 1
  %529 = bitcast %"class.jxl::Plane.97"** %528 to i64*
  %530 = load i64, i64* %529, align 8
  %531 = bitcast %"class.std::__1::vector.169"* %527 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = sub i64 %530, %532
  %534 = ashr exact i64 %533, 5
  %535 = icmp ult i64 %526, %534
  br i1 %535, label %392, label %405
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl12FrameDecoderD2Ev(%"class.jxl::FrameDecoder"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 22
  %3 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %2, i64 0, i32 0, i32 0
  %4 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %3, align 8
  %5 = icmp eq %"struct.jxl::GroupDecCache"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.jxl::GroupDecCache"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 22, i32 0, i32 1
  %9 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %8, align 8
  %10 = icmp eq %"struct.jxl::GroupDecCache"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"struct.jxl::GroupDecCache"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %12, i64 -1
  tail call void @_ZN3jxl13GroupDecCacheD2Ev(%"struct.jxl::GroupDecCache"* %13) #12
  %14 = icmp eq %"struct.jxl::GroupDecCache"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.274"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"struct.jxl::GroupDecCache"* %4, %"struct.jxl::GroupDecCache"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #15
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = ptrtoint i8* %22 to i64
  %26 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  tail call void @_ZdlPv(i8* nonnull %22) #15
  br label %28

28:                                               ; preds = %20, %24
  %29 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i8* %30 to i64
  %34 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 1
  %35 = bitcast i8** %34 to i64*
  store i64 %33, i64* %35, align 8
  tail call void @_ZdlPv(i8* nonnull %30) #15
  br label %36

36:                                               ; preds = %28, %32
  %37 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = ptrtoint i8* %38 to i64
  %42 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 13, i32 0, i32 1
  %43 = bitcast i8** %42 to i64*
  store i64 %41, i64* %43, align 8
  tail call void @_ZdlPv(i8* nonnull %38) #15
  br label %44

44:                                               ; preds = %36, %40
  %45 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %45, align 8
  %46 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 7, i32 3
  %47 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %46, i64 0, i32 0, i32 0
  %48 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %47, align 8
  %49 = icmp eq %"class.jxl::Transform"* %48, null
  br i1 %49, label %67, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.jxl::Transform"* %48 to i8*
  %52 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 7, i32 3, i32 0, i32 1
  %53 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %52, align 8
  %54 = icmp eq %"class.jxl::Transform"* %53, %48
  br i1 %54, label %65, label %55

55:                                               ; preds = %50, %55
  %56 = phi %"class.jxl::Transform"* [ %57, %55 ], [ %53, %50 ]
  %57 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %56, i64 -1
  %58 = bitcast %"class.jxl::Transform"* %57 to void (%"class.jxl::Transform"*)***
  %59 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %58, align 8
  %60 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %59, align 8
  tail call void %60(%"class.jxl::Transform"* %57) #12
  %61 = icmp eq %"class.jxl::Transform"* %57, %48
  br i1 %61, label %62, label %55

62:                                               ; preds = %55
  %63 = bitcast %"class.std::__1::vector.253"* %46 to i8**
  %64 = load i8*, i8** %63, align 8
  br label %65

65:                                               ; preds = %62, %50
  %66 = phi i8* [ %64, %62 ], [ %51, %50 ]
  store %"class.jxl::Transform"* %48, %"class.jxl::Transform"** %52, align 8
  tail call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %65, %44
  %68 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 6, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i8* %69 to i64
  %73 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 6, i32 0, i32 1
  %74 = bitcast i8** %73 to i64*
  store i64 %72, i64* %74, align 8
  tail call void @_ZdlPv(i8* nonnull %69) #15
  br label %75

75:                                               ; preds = %71, %67
  %76 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 3, i32 0, i32 0
  %77 = load i32*, i32** %76, align 8
  %78 = icmp eq i32* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %75
  %80 = ptrtoint i32* %77 to i64
  %81 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 3, i32 0, i32 1
  %82 = bitcast i32** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast i32* %77 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %79, %75
  %85 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 2, i32 0, i32 0
  %86 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %85, align 8
  %87 = icmp eq %"struct.jxl::HybridUintConfig"* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = ptrtoint %"struct.jxl::HybridUintConfig"* %86 to i64
  %90 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 2, i32 0, i32 1
  %91 = bitcast %"struct.jxl::HybridUintConfig"** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast %"struct.jxl::HybridUintConfig"* %86 to i8*
  tail call void @_ZdlPv(i8* %92) #15
  br label %93

93:                                               ; preds = %88, %84
  %94 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 1
  %95 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %94, i64 0, i32 0, i32 0
  %96 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %95, align 8
  %97 = icmp eq %"struct.jxl::HuffmanDecodingData"* %96, null
  br i1 %97, label %121, label %98

98:                                               ; preds = %93
  %99 = bitcast %"struct.jxl::HuffmanDecodingData"* %96 to i8*
  %100 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 1, i32 0, i32 1
  %101 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %100, align 8
  %102 = icmp eq %"struct.jxl::HuffmanDecodingData"* %101, %96
  br i1 %102, label %119, label %103

103:                                              ; preds = %98, %114
  %104 = phi %"struct.jxl::HuffmanDecodingData"* [ %105, %114 ], [ %101, %98 ]
  %105 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %104, i64 -1
  %106 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %105, i64 0, i32 0, i32 0, i32 0
  %107 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %106, align 8
  %108 = icmp eq %"struct.jxl::HuffmanCode"* %107, null
  br i1 %108, label %114, label %109

109:                                              ; preds = %103
  %110 = ptrtoint %"struct.jxl::HuffmanCode"* %107 to i64
  %111 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %104, i64 -1, i32 0, i32 0, i32 1
  %112 = bitcast %"struct.jxl::HuffmanCode"** %111 to i64*
  store i64 %110, i64* %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %107, i64 0, i32 0
  tail call void @_ZdlPv(i8* %113) #15
  br label %114

114:                                              ; preds = %109, %103
  %115 = icmp eq %"struct.jxl::HuffmanDecodingData"* %105, %96
  br i1 %115, label %116, label %103

116:                                              ; preds = %114
  %117 = bitcast %"class.std::__1::vector.179"* %94 to i8**
  %118 = load i8*, i8** %117, align 8
  br label %119

119:                                              ; preds = %116, %98
  %120 = phi i8* [ %118, %116 ], [ %99, %98 ]
  store %"struct.jxl::HuffmanDecodingData"* %96, %"struct.jxl::HuffmanDecodingData"** %100, align 8
  tail call void @_ZdlPv(i8* %120) #15
  br label %121

121:                                              ; preds = %119, %93
  %122 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 5, i32 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  store i8* null, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %121
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %123) #12
  br label %126

126:                                              ; preds = %121, %125
  %127 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 4, i32 0, i32 0
  %128 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %129 = icmp eq %"struct.jxl::PropertyDecisionNode"* %128, null
  br i1 %129, label %135, label %130

130:                                              ; preds = %126
  %131 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %128 to i64
  %132 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 4, i32 0, i32 1
  %133 = bitcast %"struct.jxl::PropertyDecisionNode"** %132 to i64*
  store i64 %131, i64* %133, align 8
  %134 = bitcast %"struct.jxl::PropertyDecisionNode"* %128 to i8*
  tail call void @_ZdlPv(i8* %134) #15
  br label %135

135:                                              ; preds = %126, %130
  %136 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8, i32 0
  tail call void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"* %136) #12
  %137 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %137, align 8
  %138 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 19
  %139 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %138, i64 0, i32 0, i32 0
  %140 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %139, align 8
  %141 = icmp eq %"struct.jxl::BlendingInfo"* %140, null
  br i1 %141, label %159, label %142

142:                                              ; preds = %135
  %143 = bitcast %"struct.jxl::BlendingInfo"* %140 to i8*
  %144 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 19, i32 0, i32 1
  %145 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %144, align 8
  %146 = icmp eq %"struct.jxl::BlendingInfo"* %145, %140
  br i1 %146, label %157, label %147

147:                                              ; preds = %142, %147
  %148 = phi %"struct.jxl::BlendingInfo"* [ %149, %147 ], [ %145, %142 ]
  %149 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %148, i64 -1
  %150 = bitcast %"struct.jxl::BlendingInfo"* %149 to void (%"struct.jxl::BlendingInfo"*)***
  %151 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %150, align 8
  %152 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %151, align 8
  tail call void %152(%"struct.jxl::BlendingInfo"* %149) #12
  %153 = icmp eq %"struct.jxl::BlendingInfo"* %149, %140
  br i1 %153, label %154, label %147

154:                                              ; preds = %147
  %155 = bitcast %"class.std::__1::vector.6"* %138 to i8**
  %156 = load i8*, i8** %155, align 8
  br label %157

157:                                              ; preds = %154, %142
  %158 = phi i8* [ %156, %154 ], [ %143, %142 ]
  store %"struct.jxl::BlendingInfo"* %140, %"struct.jxl::BlendingInfo"** %144, align 8
  tail call void @_ZdlPv(i8* %158) #15
  br label %159

159:                                              ; preds = %157, %135
  %160 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 16, i32 0, i32 0
  %161 = load i32*, i32** %160, align 8
  %162 = icmp eq i32* %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = ptrtoint i32* %161 to i64
  %165 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 16, i32 0, i32 1
  %166 = bitcast i32** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = bitcast i32* %161 to i8*
  tail call void @_ZdlPv(i8* %167) #15
  br label %168

168:                                              ; preds = %163, %159
  %169 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 11
  %170 = bitcast %"class.std::__1::basic_string"* %169 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %171 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %170, i64 0, i32 1, i32 0
  %172 = load i8, i8* %171, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %177

174:                                              ; preds = %168
  %175 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %169, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  tail call void @_ZdlPv(i8* %176) #15
  br label %177

177:                                              ; preds = %168, %174
  %178 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 3, i32 0, i32 0
  %179 = load i32*, i32** %178, align 8
  %180 = icmp eq i32* %179, null
  br i1 %180, label %186, label %181

181:                                              ; preds = %177
  %182 = ptrtoint i32* %179 to i64
  %183 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 3, i32 0, i32 1
  %184 = bitcast i32** %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast i32* %179 to i8*
  tail call void @_ZdlPv(i8* %185) #15
  br label %186

186:                                              ; preds = %177, %181
  %187 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 2, i32 0, i32 0
  %188 = load i64*, i64** %187, align 8
  %189 = icmp eq i64* %188, null
  br i1 %189, label %195, label %190

190:                                              ; preds = %186
  %191 = ptrtoint i64* %188 to i64
  %192 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 2, i32 0, i32 1
  %193 = bitcast i64** %192 to i64*
  store i64 %191, i64* %193, align 8
  %194 = bitcast i64* %188 to i8*
  tail call void @_ZdlPv(i8* %194) #15
  br label %195

195:                                              ; preds = %186, %190
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #12
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.34"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #12
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #12
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !27, !noalias !30
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !27, !noalias !30
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !27, !noalias !30
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !30
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #12
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #12
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #12
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !30
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.34"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #12
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.37* %30 to %"class.std::__1::vector.47"**
  %32 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.47"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #15
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.47"* %32 to i8*
  call void @_ZdlPv(i8* %44) #15
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #12
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon.37* %54 to %"class.std::__1::vector.47"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #12
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !33, !noalias !36
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !33, !noalias !36
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !33, !noalias !36
  store i32 0, i32* %48, align 8, !alias.scope !36
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #12
  store i8 0, i8* %52, align 8, !alias.scope !36
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.47"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #15
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.47"* %65 to i8*
  call void @_ZdlPv(i8* %77) #15
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #12
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #12
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.69, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.70, i64 0, i64 0)) #12
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #12
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

declare i32 @_ZN3jxl27InitializePassesSharedStateERKNS_11FrameHeaderEPNS_17PassesSharedStateEb(%"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::PassesSharedState"*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState4InitEv(%"struct.jxl::PassesDecoderState"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %3 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %3, i64 0, i32 1, i32 9
  %5 = load i32, i32* %4, align 4
  %6 = uitofp i32 %5 to float
  %7 = fadd float %6, -2.000000e+00
  %8 = tail call float @powf(float 0x3FE99999A0000000, float %7) #12
  %9 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 8
  store float %8, float* %9, align 8
  %10 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %10, i64 0, i32 1, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = uitofp i32 %12 to float
  %14 = fadd float %13, -2.000000e+00
  %15 = tail call float @powf(float 0x3FE99999A0000000, float %14) #12
  %16 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 9
  store float %15, float* %16, align 4
  %17 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 14
  store i8* null, i8** %17, align 8
  %18 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %19 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %18, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %18, align 8
  %20 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 1
  %21 = bitcast %"struct.std::__1::__function::__policy_invoker"* %20 to i64*
  store i64 ptrtoint (void (%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64)* @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm to i64), i64* %21, align 8
  %22 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %19, i64 0, i32 1
  %23 = load void (i8*)*, void (i8*)** %22, align 8
  %24 = icmp eq void (i8*)* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  tail call void %23(i8* %27) #12
  br label %28

28:                                               ; preds = %1, %25
  %29 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 17
  store i8 0, i8* %29, align 1
  %30 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 16
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %31 seq_cst, align 4
  %32 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 26
  %33 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %33, i64 0, i32 2
  tail call void @_ZN3jxl19GroupBorderAssigner4InitERKNS_15FrameDimensionsE(%"class.jxl::GroupBorderAssigner"* %32, %"struct.jxl::FrameDimensions"* dereferenceable(144) %34) #12
  %35 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %36 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 1, i32 26
  %37 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 25
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %35, i64 0, i32 2
  tail call void @_ZN3jxl13FilterWeights4InitERKNS_10LoopFilterERKNS_15FrameDimensionsE(%"struct.jxl::FilterWeights"* %37, %"struct.jxl::LoopFilter"* dereferenceable(144) %36, %"struct.jxl::FrameDimensions"* dereferenceable(144) %38) #12
  %39 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 0
  %40 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %42 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %41, align 8
  %43 = icmp eq %"class.jxl::FilterPipeline"* %40, %42
  br i1 %43, label %44, label %60

44:                                               ; preds = %60, %28
  %45 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 0
  %46 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %46, i64 0, i32 0
  %48 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %48, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %45, i64 2, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %49) #12
  %50 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 1
  %51 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %51, i64 0, i32 0
  %53 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %52, align 8
  %54 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %53, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %50, i64 4, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %54) #12
  %55 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 2, i64 2
  %56 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %2, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %56, i64 0, i32 0
  %58 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %58, i64 0, i32 2
  tail call void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"* %55, i64 8, %"struct.jxl::CustomTransformData"* dereferenceable(1224) %59) #12
  ret void

60:                                               ; preds = %28, %60
  %61 = phi %"class.jxl::FilterPipeline"* [ %63, %60 ], [ %40, %28 ]
  %62 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %61, i64 0, i32 3
  store i64 0, i64* %62, align 8
  %63 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %61, i64 1
  %64 = icmp eq %"class.jxl::FilterPipeline"* %63, %42
  br i1 %64, label %44, label %60
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder15ProcessDCGlobalEPNS_9BitReaderE(%"class.jxl::FrameDecoder"*, %"class.jxl::BitReader"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %5 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 1, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 2
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %41, label %10

10:                                               ; preds = %2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #12
  store i8 0, i8* %3, align 1
  %11 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 1
  %12 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 6
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 7
  %15 = load i64, i64* %14, align 8
  %16 = call i32 @_ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb(%"class.jxl::PatchDictionary"* %11, %"class.jxl::BitReader"* %1, i64 %13, i64 %15, i8* nonnull %3) #12
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %39

18:                                               ; preds = %10
  %19 = load i8, i8* %3, align 1, !range !9
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 15
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %38, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 16, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 16, i32 0, i32 1
  %29 = load i32*, i32** %28, align 8
  %30 = icmp eq i32* %27, %29
  br i1 %30, label %38, label %33

31:                                               ; preds = %33
  %32 = icmp eq i32* %37, %29
  br i1 %32, label %38, label %33

33:                                               ; preds = %25, %31
  %34 = phi i32* [ %37, %31 ], [ %27, %25 ]
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, %23
  %37 = getelementptr inbounds i32, i32* %34, i64 1
  br i1 %36, label %31, label %39

38:                                               ; preds = %31, %25, %21, %18
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #12
  br label %62

39:                                               ; preds = %33, %10
  %40 = phi i32 [ %16, %10 ], [ 1, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #12
  br label %163

41:                                               ; preds = %2
  %42 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 1
  %43 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 1, i32 1, i32 0, i32 0
  %44 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %43, align 8
  %45 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %46 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %45, align 8
  %47 = icmp eq %"struct.jxl::PatchPosition"* %46, %44
  br i1 %47, label %61, label %48

48:                                               ; preds = %41, %59
  %49 = phi %"struct.jxl::PatchPosition"* [ %50, %59 ], [ %46, %41 ]
  %50 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %49, i64 -1
  %51 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %49, i64 -1, i32 2, i32 0, i32 0
  %52 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %51, align 8
  %53 = icmp eq %"struct.jxl::PatchBlending"* %52, null
  br i1 %53, label %59, label %54

54:                                               ; preds = %48
  %55 = ptrtoint %"struct.jxl::PatchBlending"* %52 to i64
  %56 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %49, i64 -1, i32 2, i32 0, i32 1
  %57 = bitcast %"struct.jxl::PatchBlending"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %52, i64 0, i32 0
  tail call void @_ZdlPv(i8* %58) #15
  br label %59

59:                                               ; preds = %54, %48
  %60 = icmp eq %"struct.jxl::PatchPosition"* %50, %44
  br i1 %60, label %61, label %48

61:                                               ; preds = %59, %41
  store %"struct.jxl::PatchPosition"* %44, %"struct.jxl::PatchPosition"** %45, align 8
  tail call void @_ZN3jxl15PatchDictionary17ComputePatchCacheEv(%"class.jxl::PatchDictionary"* %42) #12
  br label %62

62:                                               ; preds = %38, %61
  %63 = load i64, i64* %6, align 8
  %64 = and i64 %63, 16
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 2
  %68 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = mul i64 %71, %69
  %73 = call i32 @_ZN3jxl7Splines6DecodeEPNS_9BitReaderEm(%"class.jxl::Splines"* %67, %"class.jxl::BitReader"* %1, i64 %72) #12
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %163

75:                                               ; preds = %66
  %76 = load i64, i64* %6, align 8
  br label %77

77:                                               ; preds = %75, %62
  %78 = phi i64 [ %76, %75 ], [ %63, %62 ]
  %79 = and i64 %78, 1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %5, i64 0, i32 0, i32 9, i32 0
  %83 = call i32 @_ZN3jxl11DecodeNoiseEPNS_9BitReaderEPNS_11NoiseParamsE(%"class.jxl::BitReader"* %1, %"struct.jxl::NoiseParams"* %82) #12
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %163

85:                                               ; preds = %77, %81
  %86 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %4, align 8
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %86, i64 0, i32 0, i32 4
  %88 = call i32 @_ZN3jxl15DequantMatrices8DecodeDCEPNS_9BitReaderE(%"class.jxl::DequantMatrices"* %87, %"class.jxl::BitReader"* %1) #12
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %163

90:                                               ; preds = %85
  %91 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5
  %92 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %154

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %97 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %96, align 8
  %98 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %97, i64 0, i32 0, i32 0, i32 0, i32 0
  %99 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %98, align 8
  %100 = icmp eq %"struct.jxl::jpeg::JPEGData"* %99, null
  %101 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %4, align 8
  %102 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 5
  %103 = call i32 @_ZN3jxl9Quantizer6DecodeEPNS_9BitReaderE(%"class.jxl::Quantizer"* %102, %"class.jxl::BitReader"* %1) #12
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %163

105:                                              ; preds = %95
  %106 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 15
  %107 = call i32 @_ZN3jxl17DecodeBlockCtxMapEPNS_9BitReaderEPNS_11BlockCtxMapE(%"class.jxl::BitReader"* %1, %"struct.jxl::BlockCtxMap"* %106) #12
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %163

109:                                              ; preds = %105
  %110 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 8
  %111 = call i32 @_ZN3jxl19ColorCorrelationMap8DecodeDCEPNS_9BitReaderE(%"struct.jxl::ColorCorrelationMap"* %110, %"class.jxl::BitReader"* %1) #12
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %163

113:                                              ; preds = %109
  br i1 %100, label %118, label %114

114:                                              ; preds = %113
  %115 = bitcast %"class.jxl::Quantizer"* %102 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %115, align 4
  %116 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 5, i32 1, i64 0
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %117, align 4
  br label %118

118:                                              ; preds = %113, %114
  %119 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 3, i32 0, i32 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %154, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 3, i32 0, i32 0, i32 4
  %125 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %101, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0
  %126 = load i32, i32* %125, align 8
  br label %127

127:                                              ; preds = %141, %122
  %128 = phi i32 [ %120, %122 ], [ %142, %141 ]
  %129 = phi i32 [ %126, %122 ], [ %143, %141 ]
  %130 = phi i64 [ 0, %122 ], [ %144, %141 ]
  %131 = load i8*, i8** %123, align 8
  %132 = load i64, i64* %124, align 8
  %133 = mul i64 %132, %130
  %134 = getelementptr inbounds i8, i8* %131, i64 %133
  %135 = ptrtoint i8* %134 to i64
  %136 = and i64 %135, 63
  %137 = icmp eq i64 %136, 0
  call void @llvm.assume(i1 %137) #12
  %138 = icmp eq i32 %129, 0
  br i1 %138, label %141, label %147

139:                                              ; preds = %147
  %140 = load i32, i32* %119, align 4
  br label %141

141:                                              ; preds = %139, %127
  %142 = phi i32 [ %140, %139 ], [ %128, %127 ]
  %143 = phi i32 [ %151, %139 ], [ 0, %127 ]
  %144 = add nuw nsw i64 %130, 1
  %145 = zext i32 %142 to i64
  %146 = icmp ult i64 %144, %145
  br i1 %146, label %127, label %154

147:                                              ; preds = %127, %147
  %148 = phi i64 [ %150, %147 ], [ 0, %127 ]
  %149 = getelementptr inbounds i8, i8* %134, i64 %148
  store i8 -1, i8* %149, align 1
  %150 = add nuw nsw i64 %148, 1
  %151 = load i32, i32* %125, align 8
  %152 = zext i32 %151 to i64
  %153 = icmp ult i64 %150, %152
  br i1 %153, label %147, label %139

154:                                              ; preds = %141, %118, %90
  %155 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %156 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 10
  %157 = load i8, i8* %156, align 1, !range !9
  %158 = icmp ne i8 %157, 0
  %159 = call i32 @_ZN3jxl19ModularFrameDecoder16DecodeGlobalInfoEPNS_9BitReaderERKNS_11FrameHeaderEb(%"class.jxl::ModularFrameDecoder"* %155, %"class.jxl::BitReader"* %1, %"struct.jxl::FrameHeader"* dereferenceable(576) %91, i1 zeroext %158) #12
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %154
  %162 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 16
  store i8 1, i8* %162, align 8
  br label %163

163:                                              ; preds = %154, %161, %109, %105, %95, %85, %81, %66, %39
  %164 = phi i32 [ %40, %39 ], [ %73, %66 ], [ %83, %81 ], [ %88, %85 ], [ %111, %109 ], [ %107, %105 ], [ %103, %95 ], [ 0, %161 ], [ %159, %154 ]
  ret i32 %164
}

declare i32 @_ZN3jxl15PatchDictionary6DecodeEPNS_9BitReaderEmmPb(%"class.jxl::PatchDictionary"*, %"class.jxl::BitReader"*, i64, i64, i8*) local_unnamed_addr #1

declare i32 @_ZN3jxl7Splines6DecodeEPNS_9BitReaderEm(%"class.jxl::Splines"*, %"class.jxl::BitReader"*, i64) local_unnamed_addr #1

declare i32 @_ZN3jxl11DecodeNoiseEPNS_9BitReaderEPNS_11NoiseParamsE(%"class.jxl::BitReader"*, %"struct.jxl::NoiseParams"*) local_unnamed_addr #1

declare i32 @_ZN3jxl15DequantMatrices8DecodeDCEPNS_9BitReaderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameDecoder16DecodeGlobalInfoEPNS_9BitReaderERKNS_11FrameHeaderEb(%"class.jxl::ModularFrameDecoder"*, %"class.jxl::BitReader"*, %"struct.jxl::FrameHeader"* dereferenceable(576), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder14ProcessDCGroupEmPNS_9BitReaderE(%"class.jxl::FrameDecoder"*, i64, %"class.jxl::BitReader"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"struct.jxl::ModularStreamId", align 8
  %6 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 12
  %7 = load i64, i64* %6, align 8
  %8 = urem i64 %1, %7
  %9 = udiv i64 %1, %7
  %10 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 32
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %20 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %21 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %20, align 8
  %22 = tail call i32 @_ZN3jxl19ModularFrameDecoder14DecodeVarDCTDCEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"* %19, i64 %1, %"class.jxl::BitReader"* %2, %"struct.jxl::PassesDecoderState"* %21) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %56

24:                                               ; preds = %13, %18, %3
  %25 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %29 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %30 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 17
  %31 = load i64, i64* %30, align 8
  %32 = mul i64 %31, %8
  %33 = mul i64 %31, %9
  store i64 %32, i64* %26, align 8
  store i64 %33, i64* %27, align 8
  store i64 %31, i64* %28, align 8
  store i64 %31, i64* %29, align 8
  %34 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %35 = bitcast %"struct.jxl::ModularStreamId"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 0
  store i32 2, i32* %36, align 8, !alias.scope !39
  %37 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 1
  store i64 0, i64* %37, align 8, !alias.scope !39
  %38 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 2
  store i64 %1, i64* %38, align 8, !alias.scope !39
  %39 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %5, i64 0, i32 3
  store i64 0, i64* %39, align 8, !alias.scope !39
  %40 = call i32 @_ZN3jxl19ModularFrameDecoder11DecodeGroupERKNS_4RectEPNS_9BitReaderEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameDecoder"* %34, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::BitReader"* %2, i32 3, i32 1000, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %5, i1 zeroext false) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #12
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %24
  %43 = load i32, i32* %10, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %47 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %46, align 8
  %48 = call i32 @_ZN3jxl19ModularFrameDecoder16DecodeAcMetadataEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"* %34, i64 %1, %"class.jxl::BitReader"* %2, %"struct.jxl::PassesDecoderState"* %47) #12
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %45, %42
  %51 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 15, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %1
  store i8 1, i8* %53, align 1
  br label %54

54:                                               ; preds = %45, %24, %50
  %55 = phi i32 [ 0, %50 ], [ %40, %24 ], [ %48, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #12
  br label %56

56:                                               ; preds = %18, %54
  %57 = phi i32 [ %55, %54 ], [ %22, %18 ]
  ret i32 %57
}

declare i32 @_ZN3jxl19ModularFrameDecoder14DecodeVarDCTDCEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"*, i64, %"class.jxl::BitReader"*, %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameDecoder11DecodeGroupERKNS_4RectEPNS_9BitReaderEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameDecoder"*, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::BitReader"*, i32, i32, %"struct.jxl::ModularStreamId"* dereferenceable(32), i1 zeroext) local_unnamed_addr #1

declare i32 @_ZN3jxl19ModularFrameDecoder16DecodeAcMetadataEmPNS_9BitReaderEPNS_18PassesDecoderStateE(%"class.jxl::ModularFrameDecoder"*, i64, %"class.jxl::BitReader"*, %"struct.jxl::PassesDecoderState"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12FrameDecoder10FinalizeDCEv(%"class.jxl::FrameDecoder"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %19

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 160
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %12 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %12, i64 0, i32 1
  %14 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %14, i64 0, i32 5, i32 0, i64 0
  %16 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %12, i64 0, i32 0, i32 13
  %17 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %18 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %17, align 8
  tail call void @_ZN3jxl19AdaptiveDCSmoothingEPKfPNS_6Image3IfEEPNS_10ThreadPoolE(float* %15, %"class.jxl::Image3"* %16, %"class.jxl::ThreadPool"* %18) #12
  br label %19

19:                                               ; preds = %5, %10, %1
  %20 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 18
  store i8 1, i8* %20, align 2
  ret void
}

declare void @_ZN3jxl19AdaptiveDCSmoothingEPKfPNS_6Image3IfEEPNS_10ThreadPoolE(float*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12FrameDecoder14AllocateOutputEv(%"class.jxl::FrameDecoder"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.jxl::Image3", align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 25
  %6 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %8 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 14
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %47

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %8, i64 0, i32 18, i32 0, i32 2
  %14 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %13, align 8
  %15 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %14, i64 0, i32 2
  %16 = load i8, i8* %15, align 8, !range !9
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %47, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %20 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %19, align 8
  %21 = bitcast %"class.jxl::Image3"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %21) #12
  %22 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 5
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %26, i64 %23, i64 %25, i64 4) #12
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %27, i64 %23, i64 %25, i64 4) #12
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %28, i64 %23, i64 %25, i64 4) #12
  %29 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  %30 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %29, i64 0, i32 33, i32 0
  call void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"* %20, %"class.jxl::Image3"* nonnull dereferenceable(96) %2, %"struct.jxl::ColorEncoding"* dereferenceable(152) %30) #12
  %31 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  store i8* null, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %35, label %34

34:                                               ; preds = %18
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %32) #12
  br label %35

35:                                               ; preds = %34, %18
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  store i8* null, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %37) #12
  br label %40

40:                                               ; preds = %39, %35
  %41 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  store i8* null, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %42) #12
  br label %45

45:                                               ; preds = %40, %44
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %21) #12
  %46 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  br label %47

47:                                               ; preds = %45, %12, %1
  %48 = phi %"struct.jxl::PassesDecoderState"* [ %46, %45 ], [ %8, %12 ], [ %8, %1 ]
  %49 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %48, i64 0, i32 11, i32 0, i32 0
  %50 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %49, align 8
  %51 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %48, i64 0, i32 11, i32 0, i32 1
  %52 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %51, align 8
  %53 = icmp eq %"class.jxl::Plane.97"* %52, %50
  br i1 %53, label %63, label %54

54:                                               ; preds = %47, %61
  %55 = phi %"class.jxl::Plane.97"* [ %56, %61 ], [ %52, %47 ]
  %56 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1
  %57 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  store i8* null, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %61, label %60

60:                                               ; preds = %54
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %58) #12
  br label %61

61:                                               ; preds = %60, %54
  %62 = icmp eq %"class.jxl::Plane.97"* %56, %50
  br i1 %62, label %63, label %54

63:                                               ; preds = %61, %47
  store %"class.jxl::Plane.97"* %50, %"class.jxl::Plane.97"** %51, align 8
  %64 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %6, i64 0, i32 0, i32 15
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %104, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 16, i32 0, i32 0
  %69 = bitcast i64* %3 to i8*
  %70 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 4
  %71 = bitcast i64* %4 to i8*
  %72 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 5
  br label %73

73:                                               ; preds = %67, %99
  %74 = phi i64 [ 0, %67 ], [ %100, %99 ]
  %75 = load i32*, i32** %68, align 8
  %76 = getelementptr inbounds i32, i32* %75, i64 %74
  %77 = load i32, i32* %76, align 4
  %78 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #12
  %79 = load i64, i64* %70, align 8
  %80 = zext i32 %77 to i64
  %81 = add nsw i64 %80, -1
  %82 = add i64 %81, %79
  %83 = udiv i64 %82, %80
  store i64 %83, i64* %3, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #12
  %84 = load i64, i64* %72, align 8
  %85 = add i64 %81, %84
  %86 = udiv i64 %85, %80
  store i64 %86, i64* %4, align 8
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %78, i64 0, i32 11, i32 0, i32 1
  %88 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %87, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %78, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %90 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %89, align 8
  %91 = icmp ult %"class.jxl::Plane.97"* %88, %90
  br i1 %91, label %92, label %97

92:                                               ; preds = %73
  %93 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %88, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %93, i64 %83, i64 %86, i64 4) #12
  %94 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %88, i64 1
  %95 = ptrtoint %"class.jxl::Plane.97"* %94 to i64
  %96 = bitcast %"class.jxl::Plane.97"** %87 to i64*
  store i64 %95, i64* %96, align 8
  br label %99

97:                                               ; preds = %73
  %98 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %78, i64 0, i32 11
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.169"* %98, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %4) #12
  br label %99

99:                                               ; preds = %92, %97
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #12
  %100 = add nuw nsw i64 %74, 1
  %101 = load i32, i32* %64, align 8
  %102 = zext i32 %101 to i64
  %103 = icmp ult i64 %100, %102
  br i1 %103, label %73, label %104

104:                                              ; preds = %99, %63
  %105 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %7, align 8
  %106 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %105, i64 0, i32 1
  %107 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %106, align 8
  %108 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %107, i64 0, i32 1, i32 17
  %109 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %110 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %109, align 8
  %111 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %110, i64 0, i32 4
  %112 = bitcast %"struct.jxl::FrameOrigin"* %108 to i64*
  %113 = bitcast %"struct.jxl::FrameOrigin"* %111 to i64*
  %114 = load i64, i64* %112, align 4
  store i64 %114, i64* %113, align 8
  ret void
}

declare void @_ZN3jxl11ImageBundle12SetFromImageEONS_6Image3IfEERKNS_13ColorEncodingE(%"class.jxl::ImageBundle"*, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::ColorEncoding"* dereferenceable(152)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder15ProcessACGlobalEPNS_9BitReaderE(%"class.jxl::FrameDecoder"*, %"class.jxl::BitReader"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.std::__1::array.342", align 8
  %4 = alloca %"class.jxl::Image3", align 8
  %5 = alloca { i32, i32, i32, i32, i64 }, align 8
  %6 = alloca { i32, i32, i32, i32, i64 }, align 8
  %7 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 18
  %8 = load i8, i8* %7, align 2, !range !9
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 464, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i64 0, i64 0)) #12
  %12 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %15 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %15, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %21 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %21, i64 0, i32 14
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %34

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %21, i64 0, i32 18, i32 0, i32 2
  %27 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %26, align 8
  %28 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %27, i64 0, i32 2
  %29 = load i8, i8* %28, align 8, !range !9
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 466, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.35, i64 0, i64 0)) #12
  %33 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

34:                                               ; preds = %13, %19, %25
  %35 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %289

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %40 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %40, i64 0, i32 0, i32 4
  %42 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %43 = tail call i32 @_ZN3jxl15DequantMatrices6DecodeEPNS_9BitReaderEPNS_19ModularFrameDecoderE(%"class.jxl::DequantMatrices"* %41, %"class.jxl::BitReader"* %1, %"class.jxl::ModularFrameDecoder"* %42) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %636

45:                                               ; preds = %38
  %46 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %46, i64 0, i32 1
  %48 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %48, i64 0, i32 2, i32 14
  %50 = load i64, i64* %49, align 8
  %51 = tail call i64 @llvm.ctlz.i64(i64 %50, i1 true) #12, !range !42
  %52 = xor i64 %51, 63
  %53 = tail call i64 @llvm.ctpop.i64(i64 %50) #12, !range !42
  %54 = icmp ugt i64 %53, 1
  %55 = zext i1 %54 to i64
  %56 = add nuw nsw i64 %52, %55
  %57 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %60 = load i8*, i8** %59, align 8
  %61 = icmp ugt i8* %58, %60
  br i1 %61, label %62, label %67, !prof !8

62:                                               ; preds = %45
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %63 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %66 = load i64, i64* %65, align 8
  br label %80

67:                                               ; preds = %45
  %68 = bitcast i8* %58 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = shl i64 %69, %71
  %73 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = or i64 %74, %72
  store i64 %75, i64* %73, align 8
  %76 = sub i64 63, %71
  %77 = lshr i64 %76, 3
  %78 = getelementptr inbounds i8, i8* %58, i64 %77
  store i8* %78, i8** %57, align 8
  %79 = or i64 %71, 56
  store i64 %79, i64* %70, align 8
  br label %80

80:                                               ; preds = %62, %67
  %81 = phi i64 [ %66, %62 ], [ %79, %67 ]
  %82 = phi i64 [ %64, %62 ], [ %75, %67 ]
  %83 = shl nsw i64 -1, %56
  %84 = xor i64 %83, -1
  %85 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %86 = and i64 %82, %84
  %87 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %88 = sub i64 %81, %56
  store i64 %88, i64* %87, align 8
  %89 = lshr i64 %82, %56
  store i64 %89, i64* %85, align 8
  %90 = add i64 %86, 1
  %91 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %92 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %91, i64 0, i32 0, i32 18
  store i64 %90, i64* %92, align 8
  %93 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %94 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %93, i64 0, i32 6
  %95 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %93, i64 0, i32 6, i32 0, i32 1
  %96 = bitcast %"struct.jxl::ANSCode"** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %"class.std::__1::vector.177"* %94 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %97, %99
  %101 = sdiv exact i64 %100, 144
  %102 = icmp ult i64 %101, 11
  %103 = inttoptr i64 %99 to %"struct.jxl::ANSCode"*
  %104 = inttoptr i64 %97 to %"struct.jxl::ANSCode"*
  br i1 %102, label %105, label %107

105:                                              ; preds = %80
  %106 = sub nuw nsw i64 11, %101
  tail call void @_ZNSt3__16vectorIN3jxl7ANSCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.177"* %94, i64 %106) #12
  br label %120

107:                                              ; preds = %80
  %108 = icmp eq i64 %100, 1584
  br i1 %108, label %120, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %103, i64 11
  %111 = icmp eq %"struct.jxl::ANSCode"* %110, %104
  br i1 %111, label %119, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %93, i64 0, i32 6, i32 0, i32 2
  %114 = bitcast %"class.std::__1::__compressed_pair.200"* %113 to %"class.std::__1::allocator.203"*
  br label %115

115:                                              ; preds = %115, %112
  %116 = phi %"struct.jxl::ANSCode"* [ %104, %112 ], [ %117, %115 ]
  %117 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %116, i64 -1
  tail call void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.203"* %114, %"struct.jxl::ANSCode"* %117) #12
  %118 = icmp eq %"struct.jxl::ANSCode"* %117, %110
  br i1 %118, label %119, label %115

119:                                              ; preds = %115, %109
  store %"struct.jxl::ANSCode"* %110, %"struct.jxl::ANSCode"** %95, align 8
  br label %120

120:                                              ; preds = %107, %105, %119
  %121 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %122 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %121, i64 0, i32 7
  %123 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %121, i64 0, i32 7, i32 0, i32 1
  %124 = bitcast %"class.std::__1::vector.98"** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %"class.std::__1::vector.108"* %122 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = sub i64 %125, %127
  %129 = sdiv exact i64 %128, 24
  %130 = icmp ult i64 %129, 11
  %131 = inttoptr i64 %127 to %"class.std::__1::vector.98"*
  %132 = inttoptr i64 %125 to %"class.std::__1::vector.98"*
  br i1 %130, label %133, label %135

133:                                              ; preds = %120
  %134 = sub nuw nsw i64 11, %129
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.108"* %122, i64 %134) #12
  br label %153

135:                                              ; preds = %120
  %136 = icmp eq i64 %128, 264
  br i1 %136, label %153, label %137

137:                                              ; preds = %135
  %138 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %131, i64 11
  %139 = icmp eq %"class.std::__1::vector.98"* %138, %132
  br i1 %139, label %152, label %140

140:                                              ; preds = %137, %150
  %141 = phi %"class.std::__1::vector.98"* [ %142, %150 ], [ %132, %137 ]
  %142 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %141, i64 -1
  %143 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %142, i64 0, i32 0, i32 0
  %144 = load i8*, i8** %143, align 8
  %145 = icmp eq i8* %144, null
  br i1 %145, label %150, label %146

146:                                              ; preds = %140
  %147 = ptrtoint i8* %144 to i64
  %148 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %141, i64 -1, i32 0, i32 1
  %149 = bitcast i8** %148 to i64*
  store i64 %147, i64* %149, align 8
  tail call void @_ZdlPv(i8* nonnull %144) #15
  br label %150

150:                                              ; preds = %146, %140
  %151 = icmp eq %"class.std::__1::vector.98"* %142, %138
  br i1 %151, label %152, label %140

152:                                              ; preds = %150, %137
  store %"class.std::__1::vector.98"* %138, %"class.std::__1::vector.98"** %123, align 8
  br label %153

153:                                              ; preds = %135, %133, %152
  %154 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %155 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %154, i64 0, i32 0, i32 1, i32 12, i32 1
  %156 = load i32, i32* %155, align 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %227, label %158

158:                                              ; preds = %153, %214
  %159 = phi i64 [ %222, %214 ], [ 0, %153 ]
  %160 = phi i64 [ %221, %214 ], [ 0, %153 ]
  %161 = tail call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 -9223371953102913441, i64 53687091200, %"class.jxl::BitReader"* %1) #12
  %162 = trunc i32 %161 to i16
  %163 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %164 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %163, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 seq_cst, align 4
  %166 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %167 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %166, i64 0, i32 0, i32 10
  %168 = load i64, i64* %167, align 8
  %169 = mul i64 %168, %159
  %170 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %166, i64 0, i32 0, i32 11, i32 0, i32 0
  %171 = load i32*, i32** %170, align 8
  %172 = getelementptr inbounds i32, i32* %171, i64 %169
  %173 = tail call i32 @_ZN3jxl17DecodeCoeffOrdersEtjPjPNS_9BitReaderE(i16 zeroext %162, i32 %165, i32* %172, %"class.jxl::BitReader"* %1) #12
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %636

175:                                              ; preds = %158
  %176 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %177 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %176, i64 0, i32 1
  %178 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %177, align 8
  %179 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %178, i64 0, i32 18
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %176, i64 0, i32 0, i32 15, i32 3
  %182 = load i64, i64* %181, align 8
  %183 = mul i64 %182, 495
  %184 = and i64 %183, 4294967295
  %185 = mul i64 %184, %180
  %186 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %176, i64 0, i32 6, i32 0, i32 0
  %187 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %186, align 8
  %188 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %187, i64 %159
  %189 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %176, i64 0, i32 7, i32 0, i32 0
  %190 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %189, align 8
  %191 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %190, i64 %159
  %192 = tail call i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"* %1, i64 %185, %"struct.jxl::ANSCode"* %188, %"class.std::__1::vector.98"* %191, i1 zeroext false) #12
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %636

194:                                              ; preds = %175
  %195 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %196 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %195, i64 0, i32 7, i32 0, i32 0
  %197 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %196, align 8
  %198 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %197, i64 %159
  %199 = add i64 %185, 16
  %200 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %197, i64 %159, i32 0, i32 1
  %201 = bitcast i8** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.std::__1::vector.98"* %198 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %202, %204
  %206 = icmp ugt i64 %199, %205
  %207 = inttoptr i64 %204 to i8*
  br i1 %206, label %208, label %210

208:                                              ; preds = %194
  %209 = sub i64 %199, %205
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"* %198, i64 %209) #12
  br label %214

210:                                              ; preds = %194
  %211 = icmp ult i64 %199, %205
  br i1 %211, label %212, label %214

212:                                              ; preds = %210
  %213 = getelementptr inbounds i8, i8* %207, i64 %199
  store i8* %213, i8** %200, align 8
  br label %214

214:                                              ; preds = %208, %210, %212
  %215 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %216 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %215, i64 0, i32 6, i32 0, i32 0
  %217 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %216, align 8
  %218 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %217, i64 %159, i32 7
  %219 = load i64, i64* %218, align 8
  %220 = icmp ult i64 %160, %219
  %221 = select i1 %220, i64 %219, i64 %160
  %222 = add nuw nsw i64 %159, 1
  %223 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %215, i64 0, i32 0, i32 1, i32 12, i32 1
  %224 = load i32, i32* %223, align 8
  %225 = zext i32 %224 to i64
  %226 = icmp ult i64 %222, %225
  br i1 %226, label %158, label %227

227:                                              ; preds = %214, %153
  %228 = phi i32 [ 0, %153 ], [ %224, %214 ]
  %229 = phi i64 [ 0, %153 ], [ %221, %214 ]
  %230 = tail call i32 @llvm.ctlz.i32(i32 %228, i1 true) #12, !range !43
  %231 = xor i32 %230, 31
  %232 = zext i32 %231 to i64
  %233 = tail call i32 @llvm.ctpop.i32(i32 %228) #12, !range !43
  %234 = icmp ugt i32 %233, 1
  %235 = zext i1 %234 to i64
  %236 = add i64 %229, %232
  %237 = add i64 %236, %235
  %238 = icmp ult i64 %237, 16
  br i1 %238, label %239, label %244

239:                                              ; preds = %227
  %240 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %241 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %240, i64 0, i32 0, i32 0, i32 0, i32 0
  %242 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %241, align 8
  %243 = icmp eq %"struct.jxl::jpeg::JPEGData"* %242, null
  br label %244

244:                                              ; preds = %239, %227
  %245 = phi i1 [ false, %227 ], [ %243, %239 ]
  %246 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %247 = load i32, i32* %246, align 8
  %248 = icmp ugt i32 %247, 1
  %249 = select i1 %248, i64 65536, i64 0
  br i1 %248, label %250, label %253

250:                                              ; preds = %244
  %251 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 14
  %252 = load i64, i64* %251, align 8
  br label %253

253:                                              ; preds = %244, %250
  %254 = phi i64 [ %252, %250 ], [ 0, %244 ]
  %255 = tail call i8* @_Znwm(i64 104) #15
  br i1 %245, label %256, label %268

256:                                              ; preds = %253
  %257 = bitcast i8* %255 to %"class.jxl::ACImageT"*
  tail call void @_ZN3jxl8ACImageTIsEC2Emm(%"class.jxl::ACImageT"* nonnull %257, i64 %249, i64 %254) #12
  %258 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %259 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %258, i64 0, i32 23, i32 0, i32 0, i32 0
  %260 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %259, align 8
  %261 = bitcast %"class.jxl::ACImage"** %259 to i8**
  store i8* %255, i8** %261, align 8
  %262 = icmp eq %"class.jxl::ACImage"* %260, null
  br i1 %262, label %280, label %263

263:                                              ; preds = %256
  %264 = bitcast %"class.jxl::ACImage"* %260 to void (%"class.jxl::ACImage"*)***
  %265 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %264, align 8
  %266 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %265, i64 1
  %267 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %266, align 8
  tail call void %267(%"class.jxl::ACImage"* nonnull %260) #12
  br label %280

268:                                              ; preds = %253
  %269 = bitcast i8* %255 to %"class.jxl::ACImageT.338"*
  tail call void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT.338"* nonnull %269, i64 %249, i64 %254) #12
  %270 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %271 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %270, i64 0, i32 23, i32 0, i32 0, i32 0
  %272 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %271, align 8
  %273 = bitcast %"class.jxl::ACImage"** %271 to i8**
  store i8* %255, i8** %273, align 8
  %274 = icmp eq %"class.jxl::ACImage"* %272, null
  br i1 %274, label %280, label %275

275:                                              ; preds = %268
  %276 = bitcast %"class.jxl::ACImage"* %272 to void (%"class.jxl::ACImage"*)***
  %277 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %276, align 8
  %278 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %277, i64 1
  %279 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %278, align 8
  tail call void %279(%"class.jxl::ACImage"* nonnull %272) #12
  br label %280

280:                                              ; preds = %268, %275, %256, %263
  br i1 %248, label %281, label %289

281:                                              ; preds = %280
  %282 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %39, align 8
  %283 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %282, i64 0, i32 23, i32 0, i32 0, i32 0
  %284 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %283, align 8
  %285 = bitcast %"class.jxl::ACImage"* %284 to void (%"class.jxl::ACImage"*)***
  %286 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %285, align 8
  %287 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %286, i64 6
  %288 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %287, align 8
  tail call void %288(%"class.jxl::ACImage"* %284) #12
  br label %289

289:                                              ; preds = %280, %281, %34
  %290 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %291 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %290, i64 0, i32 0, i32 0, i32 0, i32 0
  %292 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %291, align 8
  %293 = icmp eq %"struct.jxl::jpeg::JPEGData"* %292, null
  br i1 %293, label %524, label %294

294:                                              ; preds = %289
  %295 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 5
  %296 = load i32, i32* %295, align 8
  %297 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %290, i64 0, i32 1
  store i32 %296, i32* %297, align 8
  %298 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %299 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %298, i64 0, i32 3, i32 1
  %300 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 7, i32 1
  %301 = bitcast [3 x i32]* %299 to i8*
  %302 = bitcast [3 x i32]* %300 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %301, i8* align 8 %302, i64 14, i1 false) #12
  %303 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %304 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %303, align 8
  %305 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %304, i64 0, i32 0, i32 4, i32 6, i32 0, i32 0
  %306 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %307 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %304, i64 0, i32 0, i32 4, i32 6, i32 0, i32 1
  %308 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %307, align 8
  %309 = icmp eq %"class.jxl::QuantEncoding"* %306, %308
  br i1 %309, label %636, label %310

310:                                              ; preds = %294
  %311 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %306, i64 0, i32 0, i32 0
  %312 = load i32, i32* %311, align 8
  %313 = icmp eq i32 %312, 7
  br i1 %313, label %314, label %636

314:                                              ; preds = %310
  %315 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %306, i64 0, i32 0, i32 3, i32 0, i32 0, i64 0, i32 0, i64 2
  %316 = load float, float* %315, align 8
  %317 = fadd float %316, 0xBF40101020000000
  %318 = tail call float @llvm.fabs.f32(float %317) #12
  %319 = fcmp ogt float %318, 0x3E45798EE0000000
  br i1 %319, label %636, label %320

320:                                              ; preds = %314
  %321 = bitcast %"struct.std::__1::array.342"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %321) #12
  %322 = getelementptr inbounds %"struct.std::__1::array.342", %"struct.std::__1::array.342"* %3, i64 0, i32 0, i64 0
  store i32 -1431655766, i32* %322, align 8
  %323 = getelementptr inbounds %"struct.std::__1::array.342", %"struct.std::__1::array.342"* %3, i64 0, i32 0, i64 1
  store i32 -1431655766, i32* %323, align 4
  %324 = getelementptr inbounds %"struct.std::__1::array.342", %"struct.std::__1::array.342"* %3, i64 0, i32 0, i64 2
  store i32 -1431655766, i32* %324, align 8
  %325 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %326 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %325, i64 0, i32 0, i32 0, i32 0, i32 0
  %327 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %326, align 8
  %328 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %327, i64 0, i32 9
  %329 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %327, i64 0, i32 9, i32 0, i32 1
  %330 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %329 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = bitcast %"class.std::__1::vector.139"* %328 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = sub i64 %331, %333
  %335 = icmp eq i64 %334, 48
  br i1 %335, label %342, label %336

336:                                              ; preds = %320
  %337 = load i32, i32* %295, align 8
  switch i32 %337, label %341 [
    i32 0, label %338
    i32 2, label %342
  ]

338:                                              ; preds = %336
  %339 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.80, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.81, i64 0, i64 0)) #12
  %340 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

341:                                              ; preds = %336
  br label %342

342:                                              ; preds = %320, %336, %341
  %343 = phi i64 [ 0, %341 ], [ 0, %320 ], [ 1, %336 ]
  %344 = phi i64 [ 4294967296, %341 ], [ 0, %320 ], [ 0, %336 ]
  %345 = phi i32 [ 2, %341 ], [ 0, %320 ], [ %337, %336 ]
  %346 = or i64 %344, %343
  %347 = bitcast %"struct.std::__1::array.342"* %3 to i64*
  store i64 %346, i64* %347, align 8
  store i32 %345, i32* %324, align 8
  br label %349

348:                                              ; preds = %521
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %321) #12
  br label %524

349:                                              ; preds = %521, %342
  %350 = phi i64 [ 0, %342 ], [ %522, %521 ]
  %351 = icmp eq i64 %350, 1
  %352 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %353 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %352, i64 0, i32 0, i32 0, i32 0, i32 0
  %354 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %353, align 8
  br i1 %351, label %364, label %355

355:                                              ; preds = %349
  %356 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %354, i64 0, i32 9
  %357 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %354, i64 0, i32 9, i32 0, i32 1
  %358 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %357 to i64*
  %359 = load i64, i64* %358, align 8
  %360 = bitcast %"class.std::__1::vector.139"* %356 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %359, %361
  %363 = icmp eq i64 %362, 48
  br i1 %363, label %521, label %364

364:                                              ; preds = %349, %355
  %365 = getelementptr inbounds %"struct.std::__1::array.342", %"struct.std::__1::array.342"* %3, i64 0, i32 0, i64 %350
  %366 = load i32, i32* %365, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %354, i64 0, i32 9, i32 0, i32 0
  %369 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %368, align 8
  %370 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %369, i64 %367, i32 3
  %371 = load i32, i32* %370, align 4
  %372 = zext i32 %371 to i64
  %373 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %354, i64 0, i32 7
  %374 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %354, i64 0, i32 7, i32 0, i32 1
  %375 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.std::__1::vector.122"* %373 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = sub i64 %376, %378
  %380 = sdiv exact i64 %379, 268
  %381 = icmp eq i64 %380, %372
  br i1 %381, label %384, label %382

382:                                              ; preds = %364
  %383 = shl i64 %350, 6
  br label %387

384:                                              ; preds = %364
  %385 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 539, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.40, i64 0, i64 0)) #12
  %386 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

387:                                              ; preds = %517, %382
  %388 = phi %"struct.jxl::jpeg::JPEGData"* [ %354, %382 ], [ %520, %517 ]
  %389 = phi i64 [ 0, %382 ], [ %515, %517 ]
  %390 = add nuw nsw i64 %389, %383
  %391 = shl i64 %389, 3
  %392 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %393 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %392, i64 0, i32 0, i32 3
  %394 = bitcast %union.anon.37* %393 to %"class.std::__1::vector.47"**
  %395 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %394, align 8
  %396 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %395, i64 0, i32 0, i32 0
  %397 = load i32*, i32** %396, align 8
  %398 = getelementptr inbounds i32, i32* %397, i64 %390
  %399 = load i32, i32* %398, align 4
  %400 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %388, i64 0, i32 7, i32 0, i32 0
  %401 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %400, align 8
  %402 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %401, i64 %372, i32 0, i32 0, i64 %391
  store i32 %399, i32* %402, align 4
  %403 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %404 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %403, i64 0, i32 0, i32 3
  %405 = bitcast %union.anon.37* %404 to %"class.std::__1::vector.47"**
  %406 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %405, align 8
  %407 = add nuw nsw i64 %390, 8
  %408 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %406, i64 0, i32 0, i32 0
  %409 = load i32*, i32** %408, align 8
  %410 = getelementptr inbounds i32, i32* %409, i64 %407
  %411 = load i32, i32* %410, align 4
  %412 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %413 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %412, i64 0, i32 0, i32 0, i32 0, i32 0
  %414 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %413, align 8
  %415 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %414, i64 0, i32 7, i32 0, i32 0
  %416 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %415, align 8
  %417 = or i64 %391, 1
  %418 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %416, i64 %372, i32 0, i32 0, i64 %417
  store i32 %411, i32* %418, align 4
  %419 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %420 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %419, i64 0, i32 0, i32 3
  %421 = bitcast %union.anon.37* %420 to %"class.std::__1::vector.47"**
  %422 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %421, align 8
  %423 = add nuw nsw i64 %390, 16
  %424 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %422, i64 0, i32 0, i32 0
  %425 = load i32*, i32** %424, align 8
  %426 = getelementptr inbounds i32, i32* %425, i64 %423
  %427 = load i32, i32* %426, align 4
  %428 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %429 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %428, i64 0, i32 0, i32 0, i32 0, i32 0
  %430 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %429, align 8
  %431 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %430, i64 0, i32 7, i32 0, i32 0
  %432 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %431, align 8
  %433 = or i64 %391, 2
  %434 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %432, i64 %372, i32 0, i32 0, i64 %433
  store i32 %427, i32* %434, align 4
  %435 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %436 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %435, i64 0, i32 0, i32 3
  %437 = bitcast %union.anon.37* %436 to %"class.std::__1::vector.47"**
  %438 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %437, align 8
  %439 = add nuw nsw i64 %390, 24
  %440 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %438, i64 0, i32 0, i32 0
  %441 = load i32*, i32** %440, align 8
  %442 = getelementptr inbounds i32, i32* %441, i64 %439
  %443 = load i32, i32* %442, align 4
  %444 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %445 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %444, i64 0, i32 0, i32 0, i32 0, i32 0
  %446 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %445, align 8
  %447 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %446, i64 0, i32 7, i32 0, i32 0
  %448 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %447, align 8
  %449 = or i64 %391, 3
  %450 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %448, i64 %372, i32 0, i32 0, i64 %449
  store i32 %443, i32* %450, align 4
  %451 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %452 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %451, i64 0, i32 0, i32 3
  %453 = bitcast %union.anon.37* %452 to %"class.std::__1::vector.47"**
  %454 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %453, align 8
  %455 = add nuw nsw i64 %390, 32
  %456 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %454, i64 0, i32 0, i32 0
  %457 = load i32*, i32** %456, align 8
  %458 = getelementptr inbounds i32, i32* %457, i64 %455
  %459 = load i32, i32* %458, align 4
  %460 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %461 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %460, i64 0, i32 0, i32 0, i32 0, i32 0
  %462 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %461, align 8
  %463 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %462, i64 0, i32 7, i32 0, i32 0
  %464 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %463, align 8
  %465 = or i64 %391, 4
  %466 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %464, i64 %372, i32 0, i32 0, i64 %465
  store i32 %459, i32* %466, align 4
  %467 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %468 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %467, i64 0, i32 0, i32 3
  %469 = bitcast %union.anon.37* %468 to %"class.std::__1::vector.47"**
  %470 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %469, align 8
  %471 = add nuw nsw i64 %390, 40
  %472 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %470, i64 0, i32 0, i32 0
  %473 = load i32*, i32** %472, align 8
  %474 = getelementptr inbounds i32, i32* %473, i64 %471
  %475 = load i32, i32* %474, align 4
  %476 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %477 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %476, i64 0, i32 0, i32 0, i32 0, i32 0
  %478 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %477, align 8
  %479 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %478, i64 0, i32 7, i32 0, i32 0
  %480 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %479, align 8
  %481 = or i64 %391, 5
  %482 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %480, i64 %372, i32 0, i32 0, i64 %481
  store i32 %475, i32* %482, align 4
  %483 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %484 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %483, i64 0, i32 0, i32 3
  %485 = bitcast %union.anon.37* %484 to %"class.std::__1::vector.47"**
  %486 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %485, align 8
  %487 = add nuw nsw i64 %390, 48
  %488 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %486, i64 0, i32 0, i32 0
  %489 = load i32*, i32** %488, align 8
  %490 = getelementptr inbounds i32, i32* %489, i64 %487
  %491 = load i32, i32* %490, align 4
  %492 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %493 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %492, i64 0, i32 0, i32 0, i32 0, i32 0
  %494 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %493, align 8
  %495 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %494, i64 0, i32 7, i32 0, i32 0
  %496 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %495, align 8
  %497 = or i64 %391, 6
  %498 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %496, i64 %372, i32 0, i32 0, i64 %497
  store i32 %491, i32* %498, align 4
  %499 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %305, align 8
  %500 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %499, i64 0, i32 0, i32 3
  %501 = bitcast %union.anon.37* %500 to %"class.std::__1::vector.47"**
  %502 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %501, align 8
  %503 = add nuw nsw i64 %390, 56
  %504 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %502, i64 0, i32 0, i32 0
  %505 = load i32*, i32** %504, align 8
  %506 = getelementptr inbounds i32, i32* %505, i64 %503
  %507 = load i32, i32* %506, align 4
  %508 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %509 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %508, i64 0, i32 0, i32 0, i32 0, i32 0
  %510 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %509, align 8
  %511 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %510, i64 0, i32 7, i32 0, i32 0
  %512 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %511, align 8
  %513 = or i64 %391, 7
  %514 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %512, i64 %372, i32 0, i32 0, i64 %513
  store i32 %507, i32* %514, align 4
  %515 = add nuw nsw i64 %389, 1
  %516 = icmp eq i64 %515, 8
  br i1 %516, label %521, label %517

517:                                              ; preds = %387
  %518 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %519 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %518, i64 0, i32 0, i32 0, i32 0, i32 0
  %520 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %519, align 8
  br label %387

521:                                              ; preds = %387, %355
  %522 = add nuw nsw i64 %350, 1
  %523 = icmp eq i64 %522, 3
  br i1 %523, label %348, label %349

524:                                              ; preds = %289, %348
  %525 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 23
  %526 = load i8, i8* %525, align 8, !range !9
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %602, label %528

528:                                              ; preds = %524
  %529 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 3
  %530 = load i32, i32* %529, align 8
  switch i32 %530, label %602 [
    i32 3, label %531
    i32 0, label %531
  ]

531:                                              ; preds = %528, %528
  %532 = bitcast %"class.jxl::Image3"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %532) #12
  %533 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 2
  %534 = load i64, i64* %533, align 8
  %535 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 3
  %536 = load i64, i64* %535, align 8
  %537 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %537, i64 %534, i64 %536, i64 4) #12
  %538 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %538, i64 %534, i64 %536, i64 4) #12
  %539 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %539, i64 %534, i64 %536, i64 4) #12
  %540 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %541 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %540, align 8
  %542 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4
  %543 = bitcast %"class.jxl::Image3"* %542 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %543, i8* nonnull align 8 %532, i64 24, i1 false) #12
  %544 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5
  %545 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %546 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %545, i64 0, i32 0, i32 0, i32 0
  %547 = bitcast %"class.std::__1::unique_ptr"* %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i8* null, i8** %546, align 8
  %549 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %544, i64 0, i32 0, i32 0, i32 0
  %550 = load i8*, i8** %549, align 8
  %551 = bitcast %"class.std::__1::unique_ptr"* %544 to i64*
  store i64 %548, i64* %551, align 8
  %552 = icmp eq i8* %550, null
  br i1 %552, label %554, label %553

553:                                              ; preds = %531
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %550) #12
  br label %554

554:                                              ; preds = %553, %531
  %555 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 1
  %556 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4, i32 0, i64 1
  %557 = bitcast %"class.jxl::Plane.97"* %556 to i8*
  %558 = bitcast %"class.jxl::Plane.97"* %555 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %557, i8* align 8 %558, i64 24, i1 false) #12
  %559 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5
  %560 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %561 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %560, i64 0, i32 0, i32 0, i32 0
  %562 = bitcast %"class.std::__1::unique_ptr"* %560 to i64*
  %563 = load i64, i64* %562, align 8
  store i8* null, i8** %561, align 8
  %564 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %559, i64 0, i32 0, i32 0, i32 0
  %565 = load i8*, i8** %564, align 8
  %566 = bitcast %"class.std::__1::unique_ptr"* %559 to i64*
  store i64 %563, i64* %566, align 8
  %567 = icmp eq i8* %565, null
  br i1 %567, label %569, label %568

568:                                              ; preds = %554
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %565) #12
  br label %569

569:                                              ; preds = %568, %554
  %570 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2
  %571 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4, i32 0, i64 2
  %572 = bitcast %"class.jxl::Plane.97"* %571 to i8*
  %573 = bitcast %"class.jxl::Plane.97"* %570 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %572, i8* align 8 %573, i64 24, i1 false) #12
  %574 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %541, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5
  %575 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %576 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %575, i64 0, i32 0, i32 0, i32 0
  %577 = bitcast %"class.std::__1::unique_ptr"* %575 to i64*
  %578 = load i64, i64* %577, align 8
  store i8* null, i8** %576, align 8
  %579 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %574, i64 0, i32 0, i32 0, i32 0
  %580 = load i8*, i8** %579, align 8
  %581 = bitcast %"class.std::__1::unique_ptr"* %574 to i64*
  store i64 %578, i64* %581, align 8
  %582 = icmp eq i8* %580, null
  br i1 %582, label %583, label %585

583:                                              ; preds = %569
  %584 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %584, align 8
  br label %591

585:                                              ; preds = %569
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %580) #12
  %586 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %587 = load i8*, i8** %586, align 8
  %588 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %588, align 8
  %589 = icmp eq i8* %587, null
  br i1 %589, label %591, label %590

590:                                              ; preds = %585
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %587) #12
  br label %591

591:                                              ; preds = %583, %590, %585
  %592 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %593 = load i8*, i8** %592, align 8
  store i8* null, i8** %592, align 8
  %594 = icmp eq i8* %593, null
  br i1 %594, label %596, label %595

595:                                              ; preds = %591
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %593) #12
  br label %596

596:                                              ; preds = %595, %591
  %597 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %598 = load i8*, i8** %597, align 8
  store i8* null, i8** %597, align 8
  %599 = icmp eq i8* %598, null
  br i1 %599, label %601, label %600

600:                                              ; preds = %596
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %598) #12
  br label %601

601:                                              ; preds = %596, %600
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %532) #12
  br label %634

602:                                              ; preds = %524, %528
  %603 = bitcast { i32, i32, i32, i32, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %603)
  %604 = bitcast { i32, i32, i32, i32, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %604)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %603, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %604, i8 0, i64 24, i1 false)
  %605 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %606 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %605, align 8
  %607 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4
  %608 = bitcast %"class.jxl::Image3"* %607 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %608, i8 0, i64 24, i1 false)
  %609 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4, i32 0, i64 0, i32 0, i32 5
  %610 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %609, i64 0, i32 0, i32 0, i32 0
  %611 = load i8*, i8** %610, align 8
  %612 = bitcast %"class.std::__1::unique_ptr"* %609 to i64*
  store i64 0, i64* %612, align 8
  %613 = icmp eq i8* %611, null
  br i1 %613, label %615, label %614

614:                                              ; preds = %602
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %611) #12
  br label %615

615:                                              ; preds = %614, %602
  %616 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4, i32 0, i64 1
  %617 = bitcast %"class.jxl::Plane.97"* %616 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %617, i8* nonnull align 8 %603, i64 24, i1 false)
  %618 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4, i32 0, i64 1, i32 0, i32 5
  %619 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %618, i64 0, i32 0, i32 0, i32 0
  %620 = load i8*, i8** %619, align 8
  %621 = bitcast %"class.std::__1::unique_ptr"* %618 to i64*
  store i64 0, i64* %621, align 8
  %622 = icmp eq i8* %620, null
  br i1 %622, label %624, label %623

623:                                              ; preds = %615
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %620) #12
  br label %624

624:                                              ; preds = %623, %615
  %625 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4, i32 0, i64 2
  %626 = bitcast %"class.jxl::Plane.97"* %625 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %626, i8* nonnull align 8 %604, i64 24, i1 false)
  %627 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %606, i64 0, i32 4, i32 0, i64 2, i32 0, i32 5
  %628 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %627, i64 0, i32 0, i32 0, i32 0
  %629 = load i8*, i8** %628, align 8
  %630 = bitcast %"class.std::__1::unique_ptr"* %627 to i64*
  store i64 0, i64* %630, align 8
  %631 = icmp eq i8* %629, null
  br i1 %631, label %633, label %632

632:                                              ; preds = %624
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %629) #12
  br label %633

633:                                              ; preds = %632, %624
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %603)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %604)
  br label %634

634:                                              ; preds = %633, %601
  %635 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 17
  store i8 1, i8* %635, align 1
  br label %636

636:                                              ; preds = %158, %175, %294, %314, %310, %38, %634
  %637 = phi i32 [ 0, %634 ], [ %43, %38 ], [ 1, %310 ], [ 1, %314 ], [ 1, %294 ], [ %173, %158 ], [ %192, %175 ]
  ret i32 %637
}

declare i32 @_ZN3jxl15DequantMatrices6DecodeEPNS_9BitReaderEPNS_19ModularFrameDecoderE(%"class.jxl::DequantMatrices"*, %"class.jxl::BitReader"*, %"class.jxl::ModularFrameDecoder"*) local_unnamed_addr #1

declare i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64, i64, %"class.jxl::BitReader"*) local_unnamed_addr #1

declare i32 @_ZN3jxl17DecodeCoeffOrdersEtjPjPNS_9BitReaderE(i16 zeroext, i32, i32*, %"class.jxl::BitReader"*) local_unnamed_addr #1

declare i32 @_ZN3jxl16DecodeHistogramsEPNS_9BitReaderEmPNS_7ANSCodeEPNSt3__16vectorIhNS4_9allocatorIhEEEEb(%"class.jxl::BitReader"*, i64, %"struct.jxl::ANSCode"*, %"class.std::__1::vector.98"*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb(%"class.jxl::FrameDecoder"*, i64, %"class.jxl::BitReader"**, i64, i64, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca %"struct.jxl::ModularStreamId", align 8
  %10 = alloca %"struct.jxl::ModularStreamId", align 8
  %11 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 10
  %12 = load i64, i64* %11, align 8
  %13 = urem i64 %1, %12
  %14 = udiv i64 %1, %12
  %15 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 6, i32 16
  %16 = load i64, i64* %15, align 8
  %17 = mul i64 %16, %13
  %18 = mul i64 %16, %14
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %48

22:                                               ; preds = %7
  %23 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 22, i32 0, i32 0
  %24 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %24, i64 %4
  %26 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %30 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %29, align 8
  %31 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %30, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 seq_cst, align 4
  %33 = zext i32 %32 to i64
  tail call void @_ZN3jxl13GroupDecCache8InitOnceEmm(%"struct.jxl::GroupDecCache"* %25, i64 %28, i64 %33)
  %34 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %29, align 8
  %35 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %23, align 8
  %36 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %35, i64 %4
  %37 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %38 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %37, align 8
  %39 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = tail call i32 @_ZN3jxl11DecodeGroupEPrPNS_9BitReaderEmmPNS_18PassesDecoderStateEPNS_13GroupDecCacheEmPNS_11ImageBundleEmbb(%"class.jxl::BitReader"** %2, i64 %3, i64 %1, %"struct.jxl::PassesDecoderState"* %34, %"struct.jxl::GroupDecCache"* %36, i64 %4, %"class.jxl::ImageBundle"* %38, i64 %43, i1 zeroext %5, i1 zeroext %6) #12
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %158

46:                                               ; preds = %22
  %47 = load i64, i64* %15, align 8
  br label %48

48:                                               ; preds = %46, %7
  %49 = phi i64 [ %47, %46 ], [ %16, %7 ]
  %50 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #12
  %51 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 0
  %52 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 1
  %53 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 2
  %54 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %8, i64 0, i32 3
  store i64 %17, i64* %51, align 8
  store i64 %18, i64* %52, align 8
  store i64 %49, i64* %53, align 8
  store i64 %49, i64* %54, align 8
  %55 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %149, label %58

58:                                               ; preds = %48
  %59 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 2
  %60 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %61 = xor i1 %5, true
  %62 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %63 = bitcast %"struct.jxl::ModularStreamId"* %10 to i8*
  %64 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %10, i64 0, i32 0
  %65 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %10, i64 0, i32 1
  %66 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %10, i64 0, i32 2
  %67 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %10, i64 0, i32 3
  %68 = bitcast %"struct.jxl::ModularStreamId"* %9 to i8*
  %69 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %9, i64 0, i32 0
  %70 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %9, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %9, i64 0, i32 2
  %72 = getelementptr inbounds %"struct.jxl::ModularStreamId", %"struct.jxl::ModularStreamId"* %9, i64 0, i32 3
  br label %73

73:                                               ; preds = %58, %144
  %74 = phi i32 [ %56, %58 ], [ %146, %144 ]
  %75 = phi i64 [ 0, %58 ], [ %145, %144 ]
  %76 = load i32, i32* %59, align 4
  %77 = icmp eq i32 %76, 0
  %78 = zext i32 %76 to i64
  %79 = add i32 %74, -1
  %80 = zext i32 %79 to i64
  br label %81

81:                                               ; preds = %119, %73
  %82 = phi i32 [ 2, %73 ], [ %121, %119 ]
  %83 = phi i64 [ 0, %73 ], [ %122, %119 ]
  br i1 %77, label %84, label %89

84:                                               ; preds = %114, %81
  %85 = phi i32 [ 0, %81 ], [ %115, %114 ]
  %86 = phi i32 [ 0, %81 ], [ %116, %114 ]
  %87 = icmp eq i64 %83, %80
  %88 = icmp eq i64 %83, %75
  br i1 %88, label %123, label %119

89:                                               ; preds = %81, %114
  %90 = phi i32 [ %115, %114 ], [ 0, %81 ]
  %91 = phi i32 [ %116, %114 ], [ 0, %81 ]
  %92 = phi i64 [ %117, %114 ], [ 0, %81 ]
  %93 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 4, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i64
  %96 = icmp ugt i64 %83, %95
  br i1 %96, label %114, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 3, i64 %92
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, -1
  %101 = icmp ult i32 %100, 8
  br i1 %101, label %102, label %114

102:                                              ; preds = %97
  %103 = trunc i32 %100 to i8
  %104 = lshr i8 -117, %103
  %105 = and i8 %104, 1
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %114, label %107

107:                                              ; preds = %102
  %108 = sext i32 %100 to i64
  %109 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb.97, i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %100 to i64
  %112 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb.97, i64 0, i64 %111
  %113 = load i32, i32* %112, align 4
  br label %114

114:                                              ; preds = %102, %97, %107, %89
  %115 = phi i32 [ %90, %89 ], [ %110, %107 ], [ %90, %102 ], [ %90, %97 ]
  %116 = phi i32 [ %91, %89 ], [ %113, %107 ], [ %91, %102 ], [ %91, %97 ]
  %117 = add nuw nsw i64 %92, 1
  %118 = icmp eq i64 %117, %78
  br i1 %118, label %84, label %89

119:                                              ; preds = %84
  %120 = add i32 %86, -1
  %121 = select i1 %87, i32 -1, i32 %120
  %122 = add nuw nsw i64 %83, 1
  br label %81

123:                                              ; preds = %84
  %124 = select i1 %87, i32 0, i32 %85
  %125 = load i8*, i8** %60, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 %1
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i64
  %129 = icmp uge i64 %75, %128
  %130 = add i64 %128, %3
  %131 = icmp ult i64 %75, %130
  %132 = and i1 %129, %131
  br i1 %132, label %133, label %139

133:                                              ; preds = %123
  %134 = sub nsw i64 %75, %128
  %135 = getelementptr inbounds %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %2, i64 %134
  %136 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %135, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #12
  store i32 5, i32* %69, align 8, !alias.scope !44
  store i64 0, i64* %70, align 8, !alias.scope !44
  store i64 %1, i64* %71, align 8, !alias.scope !44
  store i64 %75, i64* %72, align 8, !alias.scope !44
  %137 = call i32 @_ZN3jxl19ModularFrameDecoder11DecodeGroupERKNS_4RectEPNS_9BitReaderEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameDecoder"* %62, %"class.jxl::Rect"* nonnull dereferenceable(32) %8, %"class.jxl::BitReader"* %136, i32 %124, i32 %82, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %9, i1 zeroext false) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #12
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %144, label %156

139:                                              ; preds = %123
  %140 = or i1 %131, %61
  br i1 %140, label %144, label %141

141:                                              ; preds = %139
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #12
  store i32 5, i32* %64, align 8, !alias.scope !47
  store i64 0, i64* %65, align 8, !alias.scope !47
  store i64 %1, i64* %66, align 8, !alias.scope !47
  store i64 %75, i64* %67, align 8, !alias.scope !47
  %142 = call i32 @_ZN3jxl19ModularFrameDecoder11DecodeGroupERKNS_4RectEPNS_9BitReaderEiiRKNS_15ModularStreamIdEb(%"class.jxl::ModularFrameDecoder"* %62, %"class.jxl::Rect"* nonnull dereferenceable(32) %8, %"class.jxl::BitReader"* null, i32 %124, i32 %82, %"struct.jxl::ModularStreamId"* nonnull dereferenceable(32) %10, i1 zeroext true) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #12
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %156

144:                                              ; preds = %139, %141, %133
  %145 = add nuw nsw i64 %75, 1
  %146 = load i32, i32* %55, align 8
  %147 = zext i32 %146 to i64
  %148 = icmp ult i64 %145, %147
  br i1 %148, label %73, label %149

149:                                              ; preds = %144, %48
  %150 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %1
  %153 = load i8, i8* %152, align 1
  %154 = trunc i64 %3 to i8
  %155 = add i8 %153, %154
  store i8 %155, i8* %152, align 1
  br label %156

156:                                              ; preds = %141, %133, %149
  %157 = phi i32 [ 0, %149 ], [ %142, %141 ], [ %137, %133 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #12
  br label %158

158:                                              ; preds = %22, %156
  %159 = phi i32 [ %157, %156 ], [ %44, %22 ]
  ret i32 %159
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13GroupDecCache8InitOnceEmm(%"struct.jxl::GroupDecCache"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.276", align 8
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %6, label %7

6:                                                ; preds = %76, %3
  br label %83

7:                                                ; preds = %3
  %8 = bitcast %"class.jxl::Image3.276"* %4 to i8*
  %9 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0
  %10 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0
  %11 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0
  %12 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  %15 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1
  %16 = bitcast %"class.jxl::Plane.60"* %15 to i8*
  %17 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.std::__1::unique_ptr"* %17 to i64*
  %20 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2
  %21 = bitcast %"class.jxl::Plane.60"* %20 to i8*
  %22 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.std::__1::unique_ptr"* %22 to i64*
  %25 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %28

28:                                               ; preds = %76, %7
  %29 = phi i64 [ 0, %7 ], [ %77, %76 ]
  %30 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29
  %31 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %30, i64 0, i32 0, i64 0, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %76

34:                                               ; preds = %28
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 32, i64 32, i64 4) #12
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 32, i64 32, i64 4) #12
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 32, i64 32, i64 4) #12
  %35 = bitcast %"class.jxl::Image3.276"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %8, i64 24, i1 false) #12
  %36 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29, i32 0, i64 0, i32 0, i32 5
  %37 = load i64, i64* %14, align 8
  store i8* null, i8** %13, align 8
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq i8* %39, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %34
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %39) #12
  br label %43

43:                                               ; preds = %42, %34
  %44 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29, i32 0, i64 1
  %45 = bitcast %"class.jxl::Plane.60"* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %16, i64 24, i1 false) #12
  %46 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29, i32 0, i64 1, i32 0, i32 5
  %47 = load i64, i64* %19, align 8
  store i8* null, i8** %18, align 8
  %48 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %46, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = bitcast %"class.std::__1::unique_ptr"* %46 to i64*
  store i64 %47, i64* %50, align 8
  %51 = icmp eq i8* %49, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %43
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %49) #12
  br label %53

53:                                               ; preds = %52, %43
  %54 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29, i32 0, i64 2
  %55 = bitcast %"class.jxl::Plane.60"* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %21, i64 24, i1 false) #12
  %56 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %29, i32 0, i64 2, i32 0, i32 5
  %57 = load i64, i64* %24, align 8
  store i8* null, i8** %23, align 8
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 0, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = bitcast %"class.std::__1::unique_ptr"* %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = icmp eq i8* %59, null
  br i1 %61, label %62, label %63

62:                                               ; preds = %53
  store i8* null, i8** %25, align 8
  br label %67

63:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %59) #12
  %64 = load i8*, i8** %25, align 8
  store i8* null, i8** %25, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %67, label %66

66:                                               ; preds = %63
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %64) #12
  br label %67

67:                                               ; preds = %62, %66, %63
  %68 = load i8*, i8** %26, align 8
  store i8* null, i8** %26, align 8
  %69 = icmp eq i8* %68, null
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %68) #12
  br label %71

71:                                               ; preds = %70, %67
  %72 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %71
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %72) #12
  br label %75

75:                                               ; preds = %71, %74
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  br label %76

76:                                               ; preds = %28, %75
  %77 = add nuw i64 %29, 1
  %78 = icmp eq i64 %77, %1
  br i1 %78, label %6, label %28

79:                                               ; preds = %102
  %80 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 8
  %81 = load i64, i64* %80, align 8
  %82 = icmp ugt i64 %103, %81
  br i1 %82, label %106, label %161

83:                                               ; preds = %196, %6
  %84 = phi i64 [ 0, %6 ], [ %198, %196 ]
  %85 = phi i64 [ 0, %6 ], [ %197, %196 ]
  %86 = trunc i64 %84 to i32
  %87 = shl i32 1, %86
  %88 = sext i32 %87 to i64
  %89 = and i64 %88, %2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %102, label %91

91:                                               ; preds = %83
  %92 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %84
  %93 = load i8, i8* %92, align 2
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %84
  %96 = load i8, i8* %95, align 2
  %97 = zext i8 %96 to i64
  %98 = shl nuw nsw i64 %94, 6
  %99 = mul nuw nsw i64 %98, %97
  %100 = icmp ult i64 %99, %85
  %101 = select i1 %100, i64 %85, i64 %99
  br label %102

102:                                              ; preds = %83, %91
  %103 = phi i64 [ %85, %83 ], [ %101, %91 ]
  %104 = or i64 %84, 1
  %105 = icmp eq i64 %104, 27
  br i1 %105, label %79, label %179

106:                                              ; preds = %79
  store i64 %103, i64* %80, align 8
  %107 = shl i64 %103, 4
  %108 = call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 %107, i8* (i8*, i64)* null, i8* null) #12, !noalias !50
  %109 = ptrtoint i8* %108 to i64
  %110 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.30"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = load float*, float** %111, align 8
  %113 = bitcast %"class.std::__1::unique_ptr.30"* %110 to i64*
  store i64 %109, i64* %113, align 8
  %114 = icmp eq float* %112, null
  br i1 %114, label %121, label %115

115:                                              ; preds = %106
  %116 = bitcast float* %112 to i8*
  %117 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %118 = load void (i8*, i8*)*, void (i8*, i8*)** %117, align 8
  %119 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 1
  %120 = load i8*, i8** %119, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %116, void (i8*, i8*)* %118, i8* %120) #12
  br label %121

121:                                              ; preds = %115, %106
  %122 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %123 = bitcast void (i8*, i8*)** %122 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 16, i1 false)
  %124 = load i64, i64* %80, align 8
  %125 = mul i64 %124, 12
  %126 = call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 %125, i8* (i8*, i64)* null, i8* null) #12, !noalias !55
  %127 = ptrtoint i8* %126 to i64
  %128 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6
  %129 = getelementptr inbounds %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.277"* %128, i64 0, i32 0, i32 0, i32 0
  %130 = load i32*, i32** %129, align 8
  %131 = bitcast %"class.std::__1::unique_ptr.277"* %128 to i64*
  store i64 %127, i64* %131, align 8
  %132 = icmp eq i32* %130, null
  br i1 %132, label %139, label %133

133:                                              ; preds = %121
  %134 = bitcast i32* %130 to i8*
  %135 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 0
  %136 = load void (i8*, i8*)*, void (i8*, i8*)** %135, align 8
  %137 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 1
  %138 = load i8*, i8** %137, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %134, void (i8*, i8*)* %136, i8* %138) #12
  br label %139

139:                                              ; preds = %133, %121
  %140 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 0
  %141 = bitcast void (i8*, i8*)** %140 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 16, i1 false)
  %142 = load i64, i64* %80, align 8
  %143 = mul i64 %142, 6
  %144 = call i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64 %143, i8* (i8*, i64)* null, i8* null) #12, !noalias !60
  %145 = ptrtoint i8* %144 to i64
  %146 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7
  %147 = getelementptr inbounds %"class.std::__1::unique_ptr.279", %"class.std::__1::unique_ptr.279"* %146, i64 0, i32 0, i32 0, i32 0
  %148 = load i16*, i16** %147, align 8
  %149 = bitcast %"class.std::__1::unique_ptr.279"* %146 to i64*
  store i64 %145, i64* %149, align 8
  %150 = icmp eq i16* %148, null
  br i1 %150, label %157, label %151

151:                                              ; preds = %139
  %152 = bitcast i16* %148 to i8*
  %153 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 0
  %154 = load void (i8*, i8*)*, void (i8*, i8*)** %153, align 8
  %155 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 1
  %156 = load i8*, i8** %155, align 8
  call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %152, void (i8*, i8*)* %154, i8* %156) #12
  br label %157

157:                                              ; preds = %151, %139
  %158 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 0
  %159 = bitcast void (i8*, i8*)** %158 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %159, i8 0, i64 16, i1 false)
  %160 = load i64, i64* %80, align 8
  br label %161

161:                                              ; preds = %157, %79
  %162 = phi i64 [ %160, %157 ], [ %81, %79 ]
  %163 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %164 = load float*, float** %163, align 8
  %165 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 0
  store float* %164, float** %165, align 8
  %166 = mul i64 %162, 3
  %167 = getelementptr inbounds float, float* %164, i64 %166
  %168 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 3
  store float* %167, float** %168, align 8
  %169 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %170 = bitcast i32** %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 1
  %173 = bitcast i32** %172 to i64*
  store i64 %171, i64* %173, align 8
  %174 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %175 = bitcast i16** %174 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 2
  %178 = bitcast i16** %177 to i64*
  store i64 %176, i64* %178, align 8
  ret void

179:                                              ; preds = %102
  %180 = trunc i64 %104 to i32
  %181 = shl i32 1, %180
  %182 = sext i32 %181 to i64
  %183 = and i64 %182, %2
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %196, label %185

185:                                              ; preds = %179
  %186 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_xEvE4kLut, i64 0, i64 %104
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  %189 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZZNK3jxl10AcStrategy16covered_blocks_yEvE4kLut, i64 0, i64 %104
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = shl nuw nsw i64 %188, 6
  %193 = mul nuw nsw i64 %192, %191
  %194 = icmp ult i64 %193, %103
  %195 = select i1 %194, i64 %103, i64 %193
  br label %196

196:                                              ; preds = %185, %179
  %197 = phi i64 [ %103, %179 ], [ %195, %185 ]
  %198 = add nuw nsw i64 %84, 2
  br label %83
}

declare i32 @_ZN3jxl11DecodeGroupEPrPNS_9BitReaderEmmPNS_18PassesDecoderStateEPNS_13GroupDecCacheEmPNS_11ImageBundleEmbb(%"class.jxl::BitReader"**, i64, i64, %"struct.jxl::PassesDecoderState"*, %"struct.jxl::GroupDecCache"*, i64, %"class.jxl::ImageBundle"*, i64, i1 zeroext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_ImNS_9allocatorImEEEENS1_IS3_EEEC2EmRKS3_(%"class.std::__1::vector.343"*, i64, %"class.std::__1::vector.23"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"class.std::__1::vector.343"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #12
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %63, label %6

6:                                                ; preds = %3
  %7 = icmp ugt i64 %1, 768614336404564650
  br i1 %7, label %8, label %10

8:                                                ; preds = %6
  %9 = bitcast %"class.std::__1::vector.343"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %9) #14
  unreachable

10:                                               ; preds = %6
  %11 = mul i64 %1, 24
  %12 = tail call i8* @_Znwm(i64 %11) #15
  %13 = bitcast i8* %12 to %"class.std::__1::vector.23"*
  %14 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::vector.23"** %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = bitcast %"class.std::__1::vector.343"* %0 to i8**
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %13, i64 %1
  %18 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.23"* %17, %"class.std::__1::vector.23"** %18, align 8
  %19 = bitcast %"class.std::__1::vector.23"** %14 to i64*
  %20 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %2, i64 0, i32 0, i32 1
  %21 = bitcast i64** %20 to i64*
  %22 = bitcast %"class.std::__1::vector.23"* %2 to i64*
  %23 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %2, i64 0, i32 0, i32 0
  br label %24

24:                                               ; preds = %58, %10
  %25 = phi %"class.std::__1::vector.23"* [ %13, %10 ], [ %59, %58 ]
  %26 = bitcast %"class.std::__1::vector.23"* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #12
  %27 = load i64, i64* %21, align 8
  %28 = load i64, i64* %22, align 8
  %29 = sub i64 %27, %28
  %30 = ashr exact i64 %29, 3
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %58, label %32

32:                                               ; preds = %24
  %33 = icmp ugt i64 %30, 2305843009213693951
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = bitcast %"class.std::__1::vector.23"* %25 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #14
  unreachable

36:                                               ; preds = %32
  %37 = tail call i8* @_Znwm(i64 %29) #15
  %38 = bitcast i8* %37 to i64*
  %39 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %25, i64 0, i32 0, i32 1
  %40 = bitcast i64** %39 to i8**
  store i8* %37, i8** %40, align 8
  %41 = bitcast %"class.std::__1::vector.23"* %25 to i8**
  store i8* %37, i8** %41, align 8
  %42 = getelementptr inbounds i64, i64* %38, i64 %30
  %43 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* %42, i64** %43, align 8
  %44 = load i64*, i64** %23, align 8
  %45 = load i64, i64* %21, align 8
  %46 = bitcast i64** %39 to i64*
  %47 = ptrtoint i8* %37 to i64
  %48 = ptrtoint i64* %44 to i64
  %49 = sub i64 %45, %48
  %50 = icmp sgt i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %36
  %52 = lshr exact i64 %49, 3
  %53 = bitcast i64* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* align 8 %53, i64 %49, i1 false) #12
  %54 = getelementptr inbounds i64, i64* %38, i64 %52
  %55 = ptrtoint i64* %54 to i64
  br label %56

56:                                               ; preds = %51, %36
  %57 = phi i64 [ %55, %51 ], [ %47, %36 ]
  store i64 %57, i64* %46, align 8
  br label %58

58:                                               ; preds = %56, %24
  %59 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %25, i64 1
  %60 = icmp eq %"class.std::__1::vector.23"* %59, %17
  br i1 %60, label %61, label %24

61:                                               ; preds = %58
  %62 = ptrtoint %"class.std::__1::vector.23"* %17 to i64
  store i64 %62, i64* %19, align 8
  br label %63

63:                                               ; preds = %3, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv(%"struct.jxl::PassesDecoderState"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.jxl::Image3", align 8
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %5 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, %7
  br i1 %10, label %11, label %269

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 7, i32 1, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %7
  br i1 %14, label %15, label %269

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %269

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 25
  %21 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %20, align 8
  %22 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %21, i64 0, i32 0, i32 17, i32 0, i32 0
  %23 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %21, i64 0, i32 0, i32 17, i32 0, i32 1
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %23, %25
  br i1 %26, label %27, label %269

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 26, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i64], [4 x i64]* @_ZZNK3jxl10LoopFilter7PaddingEvE20padding_per_epf_iter, i64 0, i64 %30
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 26, i32 2
  %34 = load i8, i8* %33, align 1, !range !9
  %35 = zext i8 %34 to i64
  %36 = add i64 %32, %35
  %37 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 15
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 1
  %40 = select i1 %39, i64 0, i64 2
  %41 = add i64 %36, %40
  %42 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 16, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 1, i32 16, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %43, %45
  br i1 %46, label %101, label %47

47:                                               ; preds = %27
  %48 = ptrtoint i32* %43 to i64
  %49 = getelementptr i32, i32* %45, i64 -1
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %48
  %52 = lshr i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 3
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %47, %56
  %57 = phi i64 [ %64, %56 ], [ %41, %47 ]
  %58 = phi i32* [ %65, %56 ], [ %43, %47 ]
  %59 = phi i64 [ %66, %56 ], [ %54, %47 ]
  %60 = load i32, i32* %58, align 4
  %61 = icmp ugt i32 %60, 1
  %62 = icmp ugt i64 %57, 2
  %63 = select i1 %62, i64 %57, i64 2
  %64 = select i1 %61, i64 %63, i64 %57
  %65 = getelementptr inbounds i32, i32* %58, i64 1
  %66 = add i64 %59, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %56, !llvm.loop !65

68:                                               ; preds = %56, %47
  %69 = phi i64 [ undef, %47 ], [ %64, %56 ]
  %70 = phi i64 [ %41, %47 ], [ %64, %56 ]
  %71 = phi i32* [ %43, %47 ], [ %65, %56 ]
  %72 = icmp ult i64 %51, 12
  br i1 %72, label %101, label %73

73:                                               ; preds = %68, %73
  %74 = phi i64 [ %98, %73 ], [ %70, %68 ]
  %75 = phi i32* [ %99, %73 ], [ %71, %68 ]
  %76 = load i32, i32* %75, align 4
  %77 = icmp ugt i32 %76, 1
  %78 = icmp ugt i64 %74, 2
  %79 = select i1 %78, i64 %74, i64 2
  %80 = select i1 %77, i64 %79, i64 %74
  %81 = getelementptr inbounds i32, i32* %75, i64 1
  %82 = load i32, i32* %81, align 4
  %83 = icmp ugt i32 %82, 1
  %84 = icmp ugt i64 %80, 2
  %85 = select i1 %84, i64 %80, i64 2
  %86 = select i1 %83, i64 %85, i64 %80
  %87 = getelementptr inbounds i32, i32* %75, i64 2
  %88 = load i32, i32* %87, align 4
  %89 = icmp ugt i32 %88, 1
  %90 = icmp ugt i64 %86, 2
  %91 = select i1 %90, i64 %86, i64 2
  %92 = select i1 %89, i64 %91, i64 %86
  %93 = getelementptr inbounds i32, i32* %75, i64 3
  %94 = load i32, i32* %93, align 4
  %95 = icmp ugt i32 %94, 1
  %96 = icmp ugt i64 %92, 2
  %97 = select i1 %96, i64 %92, i64 2
  %98 = select i1 %95, i64 %97, i64 %92
  %99 = getelementptr inbounds i32, i32* %75, i64 4
  %100 = icmp eq i32* %99, %45
  br i1 %100, label %101, label %73

101:                                              ; preds = %68, %73, %27
  %102 = phi i64 [ %41, %27 ], [ %69, %68 ], [ %98, %73 ]
  %103 = add i64 %102, 7
  %104 = and i64 %103, 9223372036854775800
  %105 = add i64 %104, %102
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 2, i32 6
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %5, i64 0, i32 2, i32 11
  %109 = load i64, i64* %108, align 8
  %110 = shl i64 %102, 2
  %111 = mul i64 %110, %109
  %112 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %112, i64 0, i32 0, i64 0, i32 0, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = zext i32 %114 to i64
  %116 = icmp eq i64 %107, %115
  br i1 %116, label %117, label %122

117:                                              ; preds = %101
  %118 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i64
  %121 = icmp eq i64 %111, %120
  br i1 %121, label %187, label %122

122:                                              ; preds = %101, %117
  %123 = bitcast %"class.jxl::Image3"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %123) #12
  %124 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %124, i64 %107, i64 %111, i64 4) #12
  %125 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %125, i64 %107, i64 %111, i64 4) #12
  %126 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %126, i64 %107, i64 %111, i64 4) #12
  %127 = bitcast %"class.jxl::Image3"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* nonnull align 8 %123, i64 24, i1 false) #12
  %128 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 0, i32 0, i32 5
  %129 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5
  %130 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %129, i64 0, i32 0, i32 0, i32 0
  %131 = bitcast %"class.std::__1::unique_ptr"* %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i8* null, i8** %130, align 8
  %133 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %128, i64 0, i32 0, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = bitcast %"class.std::__1::unique_ptr"* %128 to i64*
  store i64 %132, i64* %135, align 8
  %136 = icmp eq i8* %134, null
  br i1 %136, label %138, label %137

137:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %134) #12
  br label %138

138:                                              ; preds = %137, %122
  %139 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1
  %140 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1
  %141 = bitcast %"class.jxl::Plane.97"* %140 to i8*
  %142 = bitcast %"class.jxl::Plane.97"* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 24, i1 false) #12
  %143 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 1, i32 0, i32 5
  %144 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5
  %145 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %144, i64 0, i32 0, i32 0, i32 0
  %146 = bitcast %"class.std::__1::unique_ptr"* %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i8* null, i8** %145, align 8
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %143, i64 0, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  %150 = bitcast %"class.std::__1::unique_ptr"* %143 to i64*
  store i64 %147, i64* %150, align 8
  %151 = icmp eq i8* %149, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %138
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %149) #12
  br label %153

153:                                              ; preds = %152, %138
  %154 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2
  %155 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2
  %156 = bitcast %"class.jxl::Plane.97"* %155 to i8*
  %157 = bitcast %"class.jxl::Plane.97"* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 24, i1 false) #12
  %158 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 12, i32 0, i64 2, i32 0, i32 5
  %159 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = bitcast %"class.std::__1::unique_ptr"* %159 to i64*
  %162 = load i64, i64* %161, align 8
  store i8* null, i8** %160, align 8
  %163 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %158, i64 0, i32 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast %"class.std::__1::unique_ptr"* %158 to i64*
  store i64 %162, i64* %165, align 8
  %166 = icmp eq i8* %164, null
  br i1 %166, label %167, label %169

167:                                              ; preds = %153
  %168 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %168, align 8
  br label %175

169:                                              ; preds = %153
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %164) #12
  %170 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %172, align 8
  %173 = icmp eq i8* %171, null
  br i1 %173, label %175, label %174

174:                                              ; preds = %169
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %171) #12
  br label %175

175:                                              ; preds = %167, %174, %169
  %176 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %175
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %177) #12
  br label %180

180:                                              ; preds = %179, %175
  %181 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  store i8* null, i8** %181, align 8
  %183 = icmp eq i8* %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %182) #12
  br label %185

185:                                              ; preds = %180, %184
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %123) #12
  %186 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %4, align 8
  br label %187

187:                                              ; preds = %185, %117
  %188 = phi %"struct.jxl::PassesSharedState"* [ %186, %185 ], [ %5, %117 ]
  %189 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %188, i64 0, i32 2, i32 10
  %190 = load i64, i64* %189, align 8
  %191 = shl i64 %105, 1
  %192 = mul i64 %191, %190
  %193 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %188, i64 0, i32 2, i32 7
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13
  %196 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %195, i64 0, i32 0, i64 0, i32 0, i32 0
  %197 = load i32, i32* %196, align 8
  %198 = zext i32 %197 to i64
  %199 = icmp eq i64 %192, %198
  br i1 %199, label %200, label %205

200:                                              ; preds = %187
  %201 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 1
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  %204 = icmp eq i64 %194, %203
  br i1 %204, label %269, label %205

205:                                              ; preds = %187, %200
  %206 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %206) #12
  %207 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %207, i64 %192, i64 %194, i64 4) #12
  %208 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %208, i64 %192, i64 %194, i64 4) #12
  %209 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %209, i64 %192, i64 %194, i64 4) #12
  %210 = bitcast %"class.jxl::Image3"* %195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %210, i8* nonnull align 8 %206, i64 24, i1 false) #12
  %211 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5
  %213 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %212, i64 0, i32 0, i32 0, i32 0
  %214 = bitcast %"class.std::__1::unique_ptr"* %212 to i64*
  %215 = load i64, i64* %214, align 8
  store i8* null, i8** %213, align 8
  %216 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %211, i64 0, i32 0, i32 0, i32 0
  %217 = load i8*, i8** %216, align 8
  %218 = bitcast %"class.std::__1::unique_ptr"* %211 to i64*
  store i64 %215, i64* %218, align 8
  %219 = icmp eq i8* %217, null
  br i1 %219, label %221, label %220

220:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %217) #12
  br label %221

221:                                              ; preds = %220, %205
  %222 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1
  %223 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1
  %224 = bitcast %"class.jxl::Plane.97"* %223 to i8*
  %225 = bitcast %"class.jxl::Plane.97"* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %225, i64 24, i1 false) #12
  %226 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5
  %228 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %227, i64 0, i32 0, i32 0, i32 0
  %229 = bitcast %"class.std::__1::unique_ptr"* %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i8* null, i8** %228, align 8
  %231 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %226, i64 0, i32 0, i32 0, i32 0
  %232 = load i8*, i8** %231, align 8
  %233 = bitcast %"class.std::__1::unique_ptr"* %226 to i64*
  store i64 %230, i64* %233, align 8
  %234 = icmp eq i8* %232, null
  br i1 %234, label %236, label %235

235:                                              ; preds = %221
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %232) #12
  br label %236

236:                                              ; preds = %235, %221
  %237 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2
  %238 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2
  %239 = bitcast %"class.jxl::Plane.97"* %238 to i8*
  %240 = bitcast %"class.jxl::Plane.97"* %237 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %240, i64 24, i1 false) #12
  %241 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5
  %242 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5
  %243 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %242, i64 0, i32 0, i32 0, i32 0
  %244 = bitcast %"class.std::__1::unique_ptr"* %242 to i64*
  %245 = load i64, i64* %244, align 8
  store i8* null, i8** %243, align 8
  %246 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %241, i64 0, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  %248 = bitcast %"class.std::__1::unique_ptr"* %241 to i64*
  store i64 %245, i64* %248, align 8
  %249 = icmp eq i8* %247, null
  br i1 %249, label %250, label %252

250:                                              ; preds = %236
  %251 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %251, align 8
  br label %258

252:                                              ; preds = %236
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #12
  %253 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  %255 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %255, align 8
  %256 = icmp eq i8* %254, null
  br i1 %256, label %258, label %257

257:                                              ; preds = %252
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %254) #12
  br label %258

258:                                              ; preds = %250, %257, %252
  %259 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %260 = load i8*, i8** %259, align 8
  store i8* null, i8** %259, align 8
  %261 = icmp eq i8* %260, null
  br i1 %261, label %263, label %262

262:                                              ; preds = %258
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %260) #12
  br label %263

263:                                              ; preds = %262, %258
  %264 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %265 = load i8*, i8** %264, align 8
  store i8* null, i8** %264, align 8
  %266 = icmp eq i8* %265, null
  br i1 %266, label %268, label %267

267:                                              ; preds = %263
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %265) #12
  br label %268

268:                                              ; preds = %263, %267
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %206) #12
  br label %269

269:                                              ; preds = %1, %11, %15, %200, %268, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE(%"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Image3", align 8
  %4 = alloca i64, align 8
  %5 = alloca %class.anon.373, align 8
  %6 = alloca %"struct.jxl::ThreadPool::SkipInit", align 1
  %7 = alloca %"struct.jxl::WeightsSymmetric5", align 4
  %8 = alloca %"class.jxl::Plane.97", align 16
  %9 = alloca %"class.jxl::Rect", align 8
  %10 = alloca %"class.jxl::Image3", align 8
  %11 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 10
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 22, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %28

13:                                               ; preds = %47
  %14 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 1, i32 12, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = load i64, i64* %11, align 8
  %18 = mul i64 %17, %16
  %19 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 11
  %20 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 0, i32 11, i32 0, i32 1
  %21 = bitcast i32** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %19 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %22, %24
  %26 = ashr exact i64 %25, 2
  %27 = icmp ugt i64 %18, %26
  br i1 %27, label %50, label %52

28:                                               ; preds = %47, %2
  %29 = phi i64 [ 0, %2 ], [ %48, %47 ]
  %30 = trunc i64 %29 to i32
  %31 = shl i32 1, %30
  %32 = load atomic i32, i32* %12 seq_cst, align 4
  %33 = and i32 %32, %31
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds [27 x i8], [27 x i8]* @_ZN3jxlL14kStrategyOrderE, i64 0, i64 %29
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = mul nuw nsw i64 %38, 3
  %40 = add nuw nsw i64 %39, 3
  %41 = getelementptr inbounds [40 x i64], [40 x i64]* @_ZN3jxlL17kCoeffOrderOffsetE, i64 0, i64 %40
  %42 = load i64, i64* %41, align 8
  %43 = shl i64 %42, 6
  %44 = load i64, i64* %11, align 8
  %45 = icmp ult i64 %43, %44
  %46 = select i1 %45, i64 %44, i64 %43
  store i64 %46, i64* %11, align 8
  br label %47

47:                                               ; preds = %28, %35
  %48 = add nuw nsw i64 %29, 1
  %49 = icmp eq i64 %48, 27
  br i1 %49, label %13, label %28

50:                                               ; preds = %13
  %51 = sub i64 %18, %26
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* %19, i64 %51) #12
  br label %52

52:                                               ; preds = %50, %13
  %53 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %54 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %55 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 1, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %130, label %59

59:                                               ; preds = %52
  %60 = bitcast %"class.jxl::Image3"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %60) #12
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 2, i32 4
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %54, i64 0, i32 2, i32 5
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %65, i64 %62, i64 %64, i64 4) #12
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %66, i64 %62, i64 %64, i64 4) #12
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %67, i64 %62, i64 %64, i64 4) #12
  %68 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3
  %69 = bitcast %"class.jxl::Image3"* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* nonnull align 8 %60, i64 24, i1 false) #12
  %70 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 5
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i8* null, i8** %72, align 8
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %70, i64 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast %"class.std::__1::unique_ptr"* %70 to i64*
  store i64 %74, i64* %77, align 8
  %78 = icmp eq i8* %76, null
  br i1 %78, label %80, label %79

79:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #12
  br label %80

80:                                               ; preds = %79, %59
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1
  %82 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1
  %83 = bitcast %"class.jxl::Plane.97"* %82 to i8*
  %84 = bitcast %"class.jxl::Plane.97"* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 24, i1 false) #12
  %85 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store i8* null, i8** %87, align 8
  %90 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  store i64 %89, i64* %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %80
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #12
  br label %95

95:                                               ; preds = %94, %80
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2
  %97 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2
  %98 = bitcast %"class.jxl::Plane.97"* %97 to i8*
  %99 = bitcast %"class.jxl::Plane.97"* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 24, i1 false) #12
  %100 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 5
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = bitcast %"class.std::__1::unique_ptr"* %101 to i64*
  %104 = load i64, i64* %103, align 8
  store i8* null, i8** %102, align 8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %100, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = bitcast %"class.std::__1::unique_ptr"* %100 to i64*
  store i64 %104, i64* %107, align 8
  %108 = icmp eq i8* %106, null
  br i1 %108, label %109, label %111

109:                                              ; preds = %95
  %110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %110, align 8
  br label %117

111:                                              ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %106) #12
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %114, align 8
  %115 = icmp eq i8* %113, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %111
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %113) #12
  br label %117

117:                                              ; preds = %109, %116, %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  store i8* null, i8** %118, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %117
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %119) #12
  br label %122

122:                                              ; preds = %121, %117
  %123 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  store i8* null, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %223, label %126

126:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %124) #12
  br label %223

127:                                              ; preds = %223
  %128 = inttoptr i64 %290 to i8*
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %128) #12
  br label %129

129:                                              ; preds = %223, %127
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %243) #12
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %242) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %235) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #12
  br label %130

130:                                              ; preds = %52, %129
  call void @_ZN3jxl18PassesDecoderState20EnsureBordersStorageEv(%"struct.jxl::PassesDecoderState"* %0)
  %131 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %132 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 1
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 0
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, %133
  br i1 %136, label %137, label %153

137:                                              ; preds = %130
  %138 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 7, i32 1, i64 2
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, %133
  br i1 %140, label %141, label %153

141:                                              ; preds = %137
  %142 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %153

145:                                              ; preds = %141
  %146 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 1, i32 25
  %147 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %146, align 8
  %148 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %147, i64 0, i32 0, i32 17, i32 0, i32 0
  %149 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %148, align 8
  %150 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %147, i64 0, i32 0, i32 17, i32 0, i32 1
  %151 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %150, align 8
  %152 = icmp eq %"struct.jxl::ExtraChannelInfo"* %149, %151
  br i1 %152, label %222, label %153

153:                                              ; preds = %130, %137, %141, %145
  %154 = bitcast %"class.jxl::Image3"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %154) #12
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 2, i32 6
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %131, i64 0, i32 2, i32 7
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %159, i64 %156, i64 %158, i64 4) #12
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %160, i64 %156, i64 %158, i64 4) #12
  %161 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %161, i64 %156, i64 %158, i64 4) #12
  %162 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10
  %163 = bitcast %"class.jxl::Image3"* %162 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* nonnull align 8 %154, i64 24, i1 false) #12
  %164 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %165 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  %168 = load i64, i64* %167, align 8
  store i8* null, i8** %166, align 8
  %169 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %164, i64 0, i32 0, i32 0, i32 0
  %170 = load i8*, i8** %169, align 8
  %171 = bitcast %"class.std::__1::unique_ptr"* %164 to i64*
  store i64 %168, i64* %171, align 8
  %172 = icmp eq i8* %170, null
  br i1 %172, label %174, label %173

173:                                              ; preds = %153
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %170) #12
  br label %174

174:                                              ; preds = %173, %153
  %175 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1
  %176 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1
  %177 = bitcast %"class.jxl::Plane.97"* %176 to i8*
  %178 = bitcast %"class.jxl::Plane.97"* %175 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %177, i8* align 8 %178, i64 24, i1 false) #12
  %179 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %180 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5
  %181 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %180, i64 0, i32 0, i32 0, i32 0
  %182 = bitcast %"class.std::__1::unique_ptr"* %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i8* null, i8** %181, align 8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %179, i64 0, i32 0, i32 0, i32 0
  %185 = load i8*, i8** %184, align 8
  %186 = bitcast %"class.std::__1::unique_ptr"* %179 to i64*
  store i64 %183, i64* %186, align 8
  %187 = icmp eq i8* %185, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %174
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %185) #12
  br label %189

189:                                              ; preds = %188, %174
  %190 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2
  %191 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2
  %192 = bitcast %"class.jxl::Plane.97"* %191 to i8*
  %193 = bitcast %"class.jxl::Plane.97"* %190 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 24, i1 false) #12
  %194 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %195 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5
  %196 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %195, i64 0, i32 0, i32 0, i32 0
  %197 = bitcast %"class.std::__1::unique_ptr"* %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i8* null, i8** %196, align 8
  %199 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %194, i64 0, i32 0, i32 0, i32 0
  %200 = load i8*, i8** %199, align 8
  %201 = bitcast %"class.std::__1::unique_ptr"* %194 to i64*
  store i64 %198, i64* %201, align 8
  %202 = icmp eq i8* %200, null
  br i1 %202, label %203, label %205

203:                                              ; preds = %189
  %204 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %204, align 8
  br label %211

205:                                              ; preds = %189
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %200) #12
  %206 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %208, align 8
  %209 = icmp eq i8* %207, null
  br i1 %209, label %211, label %210

210:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %207) #12
  br label %211

211:                                              ; preds = %203, %210, %205
  %212 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %213 = load i8*, i8** %212, align 8
  store i8* null, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %216, label %215

215:                                              ; preds = %211
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %213) #12
  br label %216

216:                                              ; preds = %215, %211
  %217 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %218 = load i8*, i8** %217, align 8
  store i8* null, i8** %217, align 8
  %219 = icmp eq i8* %218, null
  br i1 %219, label %221, label %220

220:                                              ; preds = %216
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %218) #12
  br label %221

221:                                              ; preds = %216, %220
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %154) #12
  br label %222

222:                                              ; preds = %221, %145
  ret void

223:                                              ; preds = %122, %126
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %60) #12
  %224 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #12
  %225 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %68, i64 0, i32 0, i64 0, i32 0, i32 0
  %226 = load i32, i32* %225, align 8
  %227 = zext i32 %226 to i64
  %228 = add nuw nsw i64 %227, 255
  %229 = lshr i64 %228, 8
  store i64 %229, i64* %4, align 8
  %230 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = zext i32 %231 to i64
  %233 = add nuw nsw i64 %232, 255
  %234 = lshr i64 %233, 8
  %235 = bitcast %class.anon.373* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %235) #12
  %236 = getelementptr inbounds %class.anon.373, %class.anon.373* %5, i64 0, i32 0
  %237 = getelementptr inbounds %class.anon.373, %class.anon.373* %5, i64 0, i32 1
  store i64* %4, i64** %236, align 8
  store %"struct.jxl::PassesDecoderState"* %0, %"struct.jxl::PassesDecoderState"** %237, align 8
  %238 = mul nuw nsw i64 %234, %229
  %239 = trunc i64 %238 to i32
  %240 = getelementptr inbounds %"struct.jxl::ThreadPool::SkipInit", %"struct.jxl::ThreadPool::SkipInit"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %240) #12
  %241 = call zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"* %1, i32 0, i32 %239, %"struct.jxl::ThreadPool::SkipInit"* nonnull dereferenceable(1) %6, %class.anon.373* nonnull dereferenceable(16) %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %240) #12
  %242 = bitcast %"struct.jxl::WeightsSymmetric5"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %242) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %242, i8* align 4 bitcast (%"struct.jxl::WeightsSymmetric5"* @__const._ZN3jxl18PassesDecoderState9InitForACEPNS_10ThreadPoolE.weights to i8*), i64 96, i1 false)
  %243 = bitcast %"class.jxl::Plane.97"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %243) #12
  %244 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0, i32 4
  %245 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %246 = bitcast %"class.jxl::Plane.97"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %246, i8 -86, i64 32, i1 false)
  %247 = load i32, i32* %225, align 8
  %248 = zext i32 %247 to i64
  %249 = load i32, i32* %230, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %251, i64 %248, i64 %250, i64 4) #12
  %252 = bitcast %"class.jxl::Rect"* %9 to i8*
  %253 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %9, i64 0, i32 2
  %254 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %8, i64 0, i32 0, i32 5
  %255 = bitcast %"class.std::__1::unique_ptr"* %254 to i64*
  %256 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #12
  %257 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %258 = load <2 x i32>, <2 x i32>* %257, align 8
  %259 = zext <2 x i32> %258 to <2 x i64>
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #12
  %260 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %259, <2 x i64>* %260, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.97"* dereferenceable(32) %256, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.97"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #12
  %261 = bitcast %"class.jxl::Plane.97"* %256 to <4 x i32>*
  %262 = load <4 x i32>, <4 x i32>* %261, align 8
  %263 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 0, i32 0, i32 4
  %264 = bitcast i64* %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 8
  %266 = bitcast %"class.jxl::Plane.97"* %256 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %266, i8* nonnull align 16 %243, i64 24, i1 false) #12
  %267 = load i64, i64* %255, align 8
  store i64 %267, i64* %77, align 8
  %268 = bitcast %"class.jxl::Plane.97"* %8 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %268, align 16
  %269 = bitcast i64* %244 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %269, align 16
  %270 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 8
  %272 = zext <2 x i32> %271 to <2 x i64>
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #12
  %273 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %273, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.97"* dereferenceable(32) %82, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.97"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #12
  %274 = bitcast %"class.jxl::Plane.97"* %82 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 8
  %276 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 1, i32 0, i32 4
  %277 = bitcast i64* %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* nonnull align 16 %243, i64 24, i1 false) #12
  %279 = load i64, i64* %255, align 8
  store i64 %279, i64* %92, align 8
  %280 = bitcast %"class.jxl::Plane.97"* %8 to <4 x i32>*
  store <4 x i32> %275, <4 x i32>* %280, align 16
  %281 = bitcast i64* %244 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %281, align 16
  %282 = bitcast %"class.jxl::Image3"* %68 to <2 x i32>*
  %283 = load <2 x i32>, <2 x i32>* %282, align 8
  %284 = zext <2 x i32> %283 to <2 x i64>
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %252, i8 0, i64 16, i1 false) #12
  %285 = bitcast i64* %253 to <2 x i64>*
  store <2 x i64> %284, <2 x i64>* %285, align 8
  call void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.97"* dereferenceable(32) %97, %"class.jxl::Rect"* nonnull dereferenceable(32) %9, %"struct.jxl::WeightsSymmetric5"* nonnull dereferenceable(96) %7, %"class.jxl::ThreadPool"* %1, %"class.jxl::Plane.97"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #12
  %286 = bitcast %"class.jxl::Plane.97"* %97 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 8
  %288 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 3, i32 0, i64 2, i32 0, i32 4
  %289 = load i64, i64* %288, align 8
  %290 = load i64, i64* %107, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 16 %243, i64 24, i1 false) #12
  %291 = load i64, i64* %255, align 8
  store i64 %291, i64* %107, align 8
  %292 = bitcast %"class.jxl::Plane.97"* %8 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %292, align 16
  store i64 %289, i64* %244, align 16
  %293 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %53, align 8
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %293, i64 0, i32 2, i32 14
  %295 = load i64, i64* %294, align 8
  %296 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 21
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 21
  %299 = add i64 %297, %295
  store i64 %299, i64* %298, align 8
  store i8* null, i8** %245, align 8
  %300 = icmp eq i64 %290, 0
  br i1 %300, label %129, label %127
}

declare void @_ZN3jxl11ImageBundle8ShrinkToEmm(%"class.jxl::ImageBundle"*, i64, i64) local_unnamed_addr #1

declare void @_ZN3jxl19GroupBorderAssigner9ClearDoneEm(%"class.jxl::GroupBorderAssigner"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12FrameDecoder5FlushEv(%"class.jxl::FrameDecoder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.jxl::ThreadPool::RunCallState.425", align 8
  %3 = alloca %"class.jxl::ThreadPool::RunCallState.425", align 8
  %4 = alloca double, align 8
  %5 = alloca %"class.jxl::ThreadPool", align 8
  %6 = alloca %"struct.std::__1::atomic.350", align 1
  %7 = alloca %class.anon.358, align 8
  %8 = alloca %class.anon.359, align 8
  %9 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 18, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 13
  %14 = load i8, i8* %13, align 8, !range !9
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i8 [ 1, %1 ], [ %14, %12 ]
  %17 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 19, i32 0, i32 0
  %18 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %17, align 8
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 19, i32 0, i32 1
  %20 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %19, align 8
  %21 = icmp eq %"struct.jxl::BlendingInfo"* %18, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %26, %15
  %23 = phi i8 [ %16, %15 ], [ %32, %26 ]
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %39, label %35

26:                                               ; preds = %15, %26
  %27 = phi i8 [ %32, %26 ], [ %16, %15 ]
  %28 = phi %"struct.jxl::BlendingInfo"* [ %33, %26 ], [ %18, %15 ]
  %29 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  %32 = select i1 %31, i8 %27, i8 1
  %33 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 1
  %34 = icmp eq %"struct.jxl::BlendingInfo"* %33, %20
  br i1 %34, label %22, label %26

35:                                               ; preds = %22
  %36 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 19
  %37 = load i8, i8* %36, align 1, !range !9
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %178, label %39

39:                                               ; preds = %35, %22
  %40 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 3
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 3
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 19
  %45 = load i8, i8* %44, align 1, !range !9
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %178, label %47

47:                                               ; preds = %43, %39
  %48 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 7
  %49 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %48, align 8
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %51 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %50, align 8
  %52 = icmp eq %"struct.jxl::jpeg::JPEGData"* %51, null
  br i1 %52, label %53, label %178

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14
  %55 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %54, i64 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 14, i32 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = ptrtoint i8* %56 to i64
  %60 = icmp eq i8* %56, %58
  %61 = ptrtoint i8* %58 to i64
  br i1 %60, label %76, label %62

62:                                               ; preds = %53
  %63 = getelementptr inbounds i8, i8* %56, i64 1
  %64 = icmp eq i8* %63, %58
  br i1 %64, label %76, label %65

65:                                               ; preds = %62, %65
  %66 = phi i8* [ %74, %65 ], [ %63, %62 ]
  %67 = phi i64 [ %73, %65 ], [ %59, %62 ]
  %68 = ptrtoint i8* %66 to i64
  %69 = inttoptr i64 %67 to i8*
  %70 = load i8, i8* %66, align 1
  %71 = load i8, i8* %69, align 1
  %72 = icmp ult i8 %70, %71
  %73 = select i1 %72, i64 %68, i64 %67
  %74 = getelementptr inbounds i8, i8* %66, i64 1
  %75 = icmp eq i8* %74, %58
  br i1 %75, label %76, label %65

76:                                               ; preds = %65, %53, %62
  %77 = phi i64 [ %59, %53 ], [ %59, %62 ], [ %73, %65 ]
  %78 = inttoptr i64 %77 to i8*
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 5, i32 12, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = icmp ugt i32 %82, %80
  br i1 %83, label %84, label %159

84:                                               ; preds = %76
  %85 = bitcast i8** %57 to i64*
  %86 = bitcast %"class.std::__1::vector.98"* %54 to i64*
  %87 = icmp eq i8* %58, %56
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  br label %135

90:                                               ; preds = %150
  %91 = trunc i64 %154 to i32
  br label %92

92:                                               ; preds = %90, %84
  %93 = phi i32 [ 0, %84 ], [ %91, %90 ]
  %94 = getelementptr inbounds %"struct.std::__1::atomic.350", %"struct.std::__1::atomic.350"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %94) #12
  store i8 0, i8* %94, align 1
  %95 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %96 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %95, align 8
  %97 = bitcast %class.anon.358* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #12
  %98 = getelementptr inbounds %class.anon.358, %class.anon.358* %7, i64 0, i32 0
  store %"class.jxl::FrameDecoder"* %0, %"class.jxl::FrameDecoder"** %98, align 8
  %99 = bitcast %class.anon.359* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99) #12
  %100 = getelementptr inbounds %class.anon.359, %class.anon.359* %8, i64 0, i32 0
  store %"class.jxl::FrameDecoder"* %0, %"class.jxl::FrameDecoder"** %100, align 8
  %101 = getelementptr inbounds %class.anon.359, %class.anon.359* %8, i64 0, i32 1
  store %"struct.std::__1::atomic.350"* %6, %"struct.std::__1::atomic.350"** %101, align 8
  %102 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %4, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), double* nonnull %4) #12
  %103 = icmp eq %"class.jxl::ThreadPool"* %96, null
  br i1 %103, label %104, label %115

104:                                              ; preds = %92
  %105 = bitcast %"class.jxl::ThreadPool"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %105) #12
  %106 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 0
  %107 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %5, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %106, align 8
  %108 = bitcast i8** %107 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %5, %"class.jxl::ThreadPool"** %108, align 8
  %109 = icmp eq i32 %93, 0
  br i1 %109, label %126, label %110

110:                                              ; preds = %104
  %111 = bitcast %"class.jxl::ThreadPool::RunCallState.425"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %111) #12
  %112 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.425", %"class.jxl::ThreadPool::RunCallState.425"* %2, i64 0, i32 0
  %113 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.425", %"class.jxl::ThreadPool::RunCallState.425"* %2, i64 0, i32 1
  store %class.anon.358* %7, %class.anon.358** %112, align 8
  store %class.anon.359* %8, %class.anon.359** %113, align 8
  %114 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %105, i8* nonnull %111, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallDataFuncEPvjm", i32 0, i32 %93) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %111) #12
  br label %126

115:                                              ; preds = %92
  %116 = icmp eq i32 %93, 0
  br i1 %116, label %128, label %117

117:                                              ; preds = %115
  %118 = bitcast %"class.jxl::ThreadPool::RunCallState.425"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #12
  %119 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.425", %"class.jxl::ThreadPool::RunCallState.425"* %3, i64 0, i32 0
  %120 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.425", %"class.jxl::ThreadPool::RunCallState.425"* %3, i64 0, i32 1
  store %class.anon.358* %7, %class.anon.358** %119, align 8
  store %class.anon.359* %8, %class.anon.359** %120, align 8
  %121 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %96, i64 0, i32 0
  %122 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %121, align 8
  %123 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %96, i64 0, i32 1
  %124 = load i8*, i8** %123, align 8
  %125 = call i32 %122(i8* %124, i8* nonnull %118, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallDataFuncEPvjm", i32 0, i32 %93) #12
  br label %126

126:                                              ; preds = %104, %110, %117
  %127 = phi i8* [ %118, %117 ], [ %105, %110 ], [ %105, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127) #12
  br label %128

128:                                              ; preds = %126, %115
  %129 = load double, double* %4, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), double %129) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %99) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #12
  %130 = load atomic i8, i8* %94 seq_cst, align 1
  %131 = and i8 %130, 1
  %132 = icmp eq i8 %131, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %94) #12
  br i1 %132, label %133, label %178

133:                                              ; preds = %128
  %134 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %48, align 8
  br label %159

135:                                              ; preds = %156, %88
  %136 = phi i64 [ %59, %88 ], [ %151, %156 ]
  %137 = phi i64 [ %61, %88 ], [ %152, %156 ]
  %138 = phi i32 [ %82, %88 ], [ %158, %156 ]
  %139 = phi i8* [ %56, %88 ], [ %157, %156 ]
  %140 = phi i64 [ 0, %88 ], [ %153, %156 ]
  %141 = getelementptr inbounds i8, i8* %139, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = icmp eq i32 %138, %143
  br i1 %144, label %150, label %145

145:                                              ; preds = %135
  %146 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %89, align 8
  %147 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %146, i64 0, i32 26
  tail call void @_ZN3jxl19GroupBorderAssigner9ClearDoneEm(%"class.jxl::GroupBorderAssigner"* %147, i64 %140) #12
  %148 = load i64, i64* %85, align 8
  %149 = load i64, i64* %86, align 8
  br label %150

150:                                              ; preds = %135, %145
  %151 = phi i64 [ %136, %135 ], [ %149, %145 ]
  %152 = phi i64 [ %137, %135 ], [ %148, %145 ]
  %153 = add nuw i64 %140, 1
  %154 = sub i64 %152, %151
  %155 = icmp ult i64 %153, %154
  br i1 %155, label %156, label %90

156:                                              ; preds = %150
  %157 = inttoptr i64 %151 to i8*
  %158 = load i32, i32* %81, align 8
  br label %135

159:                                              ; preds = %133, %76
  %160 = phi %"class.jxl::ImageBundle"* [ %134, %133 ], [ %49, %76 ]
  %161 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 8
  %162 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 0
  %163 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %162, align 8
  %164 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 1
  %165 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %164, align 8
  %166 = call i32 @_ZN3jxl19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_11ImageBundleE(%"class.jxl::ModularFrameDecoder"* %161, %"struct.jxl::PassesDecoderState"* %163, %"class.jxl::ThreadPool"* %165, %"class.jxl::ImageBundle"* %160) #12
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %178

168:                                              ; preds = %159
  %169 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %48, align 8
  %170 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %162, align 8
  %171 = load %"class.jxl::ThreadPool"*, %"class.jxl::ThreadPool"** %164, align 8
  %172 = call i32 @_ZN3jxl21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPNS_10ThreadPoolEbb(%"class.jxl::ImageBundle"* %169, %"struct.jxl::PassesDecoderState"* %170, %"class.jxl::ThreadPool"* %171, i1 zeroext false, i1 zeroext false) #12
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %178

174:                                              ; preds = %168
  %175 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %0, i64 0, i32 21
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 1
  store i64 %177, i64* %175, align 8
  br label %178

178:                                              ; preds = %128, %47, %168, %159, %43, %35, %174
  %179 = phi i32 [ 0, %174 ], [ 1, %35 ], [ 0, %43 ], [ 0, %47 ], [ %166, %159 ], [ %172, %168 ], [ 1, %128 ]
  ret i32 %179
}

declare i32 @_ZN3jxl19ModularFrameDecoder16FinalizeDecodingEPNS_18PassesDecoderStateEPNS_10ThreadPoolEPNS_11ImageBundleE(%"class.jxl::ModularFrameDecoder"*, %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"*) local_unnamed_addr #1

declare i32 @_ZN3jxl21FinalizeFrameDecodingEPNS_11ImageBundleEPNS_18PassesDecoderStateEPNS_10ThreadPoolEbb(%"class.jxl::ImageBundle"*, %"struct.jxl::PassesDecoderState"*, %"class.jxl::ThreadPool"*, i1 zeroext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* noalias sret, %"class.jxl::ImageBundle"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Plane.97", align 8
  %7 = bitcast %"class.jxl::ImageBundle"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 368, i1 false)
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %9 = bitcast %"struct.jxl::ImageMetadata"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %13) #12
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4, i32 0
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %16 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #12
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %18 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 14, i1 false) #12
  %19 = bitcast %"struct.jxl::ImageMetadata"** %17 to i64*
  store i64 %10, i64* %19, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #12
  %22 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #12
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %24 = bitcast %"class.std::__1::vector.169"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false) #12
  %25 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 96, i1 false) #12, !alias.scope !66
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8, !noalias !66
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4, !noalias !66
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %33, i64 %29, i64 %32, i64 4) #12
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %34, i64 %29, i64 %32, i64 4) #12
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %35, i64 %29, i64 %32, i64 4) #12
  %36 = bitcast %"class.jxl::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #12, !noalias !69
  %37 = bitcast %"class.jxl::Image3"* %26 to <2 x i32>*
  %38 = load <2 x i32>, <2 x i32>* %37, align 8, !noalias !69
  %39 = zext <2 x i32> %38 to <2 x i64>
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #12, !noalias !69
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %41, align 8, !noalias !69
  %42 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #12, !noalias !69
  %43 = bitcast %"class.jxl::Image3"* %5 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 8, !alias.scope !69
  %45 = zext <2 x i32> %44 to <2 x i64>
  %46 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #12, !noalias !69
  %47 = bitcast i64* %46 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %47, align 8, !noalias !69
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %3, %"class.jxl::Image3"* dereferenceable(96) %26, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #12, !noalias !69
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #12, !noalias !69
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* nonnull align 8 %25, i64 24, i1 false) #12
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #12
  br label %58

58:                                               ; preds = %57, %2
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %61 = bitcast %"class.jxl::Plane.97"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane.97"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #12
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #12
  br label %73

73:                                               ; preds = %72, %58
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %76 = bitcast %"class.jxl::Plane.97"* %75 to i8*
  %77 = bitcast %"class.jxl::Plane.97"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #12
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i8* null, i8** %80, align 8
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %78, i64 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %78 to i64*
  store i64 %82, i64* %85, align 8
  %86 = icmp eq i8* %84, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %73
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  br label %95

89:                                               ; preds = %73
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #12
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %89
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #12
  br label %95

95:                                               ; preds = %87, %94, %89
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  store i8* null, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #12
  br label %100

100:                                              ; preds = %99, %95
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  store i8* null, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %100
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %102) #12
  br label %105

105:                                              ; preds = %100, %104
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %25) #12
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 12, i1 false) #12
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %110 = bitcast i32* %108 to i8*
  %111 = bitcast i32* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #12
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %114 = bitcast i32* %112 to i8*
  %115 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 6, i1 false) #12
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %122, label %123

122:                                              ; preds = %105
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %116, i64 %118) #12
  br label %123

123:                                              ; preds = %122, %105
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  %127 = select i1 %126, i64 0, i64 %118
  %128 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %116, i64 0, i32 0
  store i64 %127, i64* %128, align 8
  br i1 %126, label %132, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* align 1 %131, i64 %127, i1 false) #12
  br label %132

132:                                              ; preds = %123, %129
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %148 = bitcast i32* %147 to i64*
  %149 = bitcast i32* %146 to i64*
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %149, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %153 = bitcast i32* %152 to i64*
  %154 = bitcast i32* %151 to i64*
  %155 = load i64, i64* %153, align 8
  store i64 %155, i64* %154, align 8
  %156 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %158 = bitcast %"class.jxl::Plane.97"** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.std::__1::vector.169"* %156 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %159, %161
  %163 = ashr exact i64 %162, 5
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"* %23, i64 %163)
  %164 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %156, i64 0, i32 0, i32 0
  %165 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %164, align 8
  %166 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %157, align 8
  %167 = icmp eq %"class.jxl::Plane.97"* %165, %166
  br i1 %167, label %177, label %168

168:                                              ; preds = %132
  %169 = bitcast %"class.jxl::Plane.97"* %6 to i8*
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %171 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %172 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %6, i64 0, i32 0, i32 5
  %173 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %172, i64 0, i32 0, i32 0, i32 0
  %174 = bitcast %"class.std::__1::unique_ptr"* %172 to i64*
  %175 = bitcast %"class.jxl::Plane.97"** %170 to i64*
  %176 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %181

177:                                              ; preds = %198, %132
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %179 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %178, align 8
  %180 = icmp eq %"struct.jxl::jpeg::JPEGData"* %179, null
  br i1 %180, label %205, label %201

181:                                              ; preds = %168, %198
  %182 = phi %"class.jxl::Plane.97"* [ %165, %168 ], [ %199, %198 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #12
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.97"* nonnull sret %6, %"class.jxl::Plane.97"* dereferenceable(32) %182)
  %183 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %170, align 8
  %184 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %171, align 8
  %185 = icmp ult %"class.jxl::Plane.97"* %183, %184
  br i1 %185, label %186, label %193

186:                                              ; preds = %181
  %187 = bitcast %"class.jxl::Plane.97"* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* nonnull align 8 %169, i64 24, i1 false) #12
  %188 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %183, i64 0, i32 0, i32 5
  %189 = load i64, i64* %174, align 8
  store i8* null, i8** %173, align 8
  %190 = bitcast %"class.std::__1::unique_ptr"* %188 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %183, i64 1
  %192 = ptrtoint %"class.jxl::Plane.97"* %191 to i64
  store i64 %192, i64* %175, align 8
  br label %194

193:                                              ; preds = %181
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.169"* %23, %"class.jxl::Plane.97"* nonnull dereferenceable(32) %6) #12
  br label %194

194:                                              ; preds = %186, %193
  %195 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %198, label %197

197:                                              ; preds = %194
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %195) #12
  br label %198

198:                                              ; preds = %194, %197
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #12
  %199 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %182, i64 1
  %200 = icmp eq %"class.jxl::Plane.97"* %199, %166
  br i1 %200, label %177, label %181

201:                                              ; preds = %177
  %202 = call i8* @_Znwm(i64 296) #15
  %203 = bitcast i8* %202 to %"struct.jxl::jpeg::JPEGData"*
  call void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"* nonnull %203, %"struct.jxl::jpeg::JPEGData"* nonnull dereferenceable(296) %179) #12
  %204 = ptrtoint i8* %202 to i64
  br label %205

205:                                              ; preds = %177, %201
  %206 = phi i64 [ %204, %201 ], [ 0, %177 ]
  %207 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %208 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %207, align 8
  store i64 %206, i64* %11, align 8
  %209 = icmp eq %"struct.jxl::jpeg::JPEGData"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %205
  %211 = bitcast %"struct.jxl::jpeg::JPEGData"* %208 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %212 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %212, i64 1
  %214 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %213, align 8
  call void %214(%"struct.jxl::jpeg::JPEGData"* nonnull %208) #12
  br label %215

215:                                              ; preds = %210, %205
  %216 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  store i32 %217, i32* %12, align 8
  %218 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %219 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %220 = bitcast [3 x i32]* %218 to i8*
  %221 = bitcast [3 x i32]* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 14, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %6, align 8
  %8 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %"struct.jxl::jpeg::JPEGData"* %7, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"struct.jxl::jpeg::JPEGData"* %7 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %12 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %12, i64 1
  %14 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %13, align 8
  tail call void %14(%"struct.jxl::jpeg::JPEGData"* nonnull %7) #12
  br label %15

15:                                               ; preds = %2, %10
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #12
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %25 = bitcast %"struct.jxl::FrameOrigin"* %23 to i8*
  %26 = bitcast %"struct.jxl::FrameOrigin"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 14, i1 false)
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %29 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #15
  br label %36

36:                                               ; preds = %15, %33
  %37 = bitcast %"class.std::__1::basic_string"* %27 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 0, i8* %40, align 1
  store i8 0, i8* %38, align 1
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %42 = bitcast %"struct.jxl::ImageMetadata"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %45 = bitcast %"struct.jxl::ImageMetadata"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %48 = bitcast %"class.jxl::Image3"* %46 to i8*
  %49 = bitcast %"class.jxl::Image3"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #12
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::unique_ptr"* %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i8* null, i8** %52, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 %54, i64* %57, align 8
  %58 = icmp eq i8* %56, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %56) #12
  br label %60

60:                                               ; preds = %59, %36
  %61 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %63 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %64 = bitcast %"class.jxl::Plane.97"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #12
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %66 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i8* null, i8** %67, align 8
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %65 to i64*
  store i64 %69, i64* %72, align 8
  %73 = icmp eq i8* %71, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #12
  br label %75

75:                                               ; preds = %74, %60
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %78 = bitcast %"class.jxl::Plane.97"* %77 to i8*
  %79 = bitcast %"class.jxl::Plane.97"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #12
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %87, align 8
  %88 = icmp eq i8* %86, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #12
  br label %90

90:                                               ; preds = %75, %89
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #12
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #12
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %98 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %99 = bitcast i32* %97 to i8*
  %100 = bitcast i32* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 6, i1 false) #12
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %102 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %101, i64 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %108, i64 0, i32 0, i32 0, i32 0
  %111 = bitcast %"class.std::__1::unique_ptr"* %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i8* null, i8** %110, align 8
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %109, i64 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %112, i64* %115, align 8
  %116 = icmp eq i8* %114, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %114) #12
  br label %118

118:                                              ; preds = %117, %90
  %119 = icmp eq %"class.jxl::ImageBundle"* %1, %0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = bitcast %"class.jxl::PaddedBytes"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 16, i1 false) #12
  br label %122

122:                                              ; preds = %118, %120
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %132 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %133 = bitcast i32* %132 to i64*
  %134 = bitcast i32* %131 to i64*
  %135 = load i64, i64* %133, align 8
  store i64 %135, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %148 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %146, i64 0, i32 0, i32 0
  %149 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %148, align 8
  %150 = icmp eq %"class.jxl::Plane.97"* %149, null
  br i1 %150, label %171, label %151

151:                                              ; preds = %122
  %152 = bitcast %"class.jxl::Plane.97"* %149 to i8*
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %154 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %153, align 8
  %155 = icmp eq %"class.jxl::Plane.97"* %154, %149
  br i1 %155, label %168, label %156

156:                                              ; preds = %151, %163
  %157 = phi %"class.jxl::Plane.97"* [ %158, %163 ], [ %154, %151 ]
  %158 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %157, i64 -1
  %159 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %157, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %161 = icmp eq i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %160) #12
  br label %163

163:                                              ; preds = %162, %156
  %164 = icmp eq %"class.jxl::Plane.97"* %158, %149
  br i1 %164, label %165, label %156

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.169"* %146 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %151
  %169 = phi i8* [ %167, %165 ], [ %152, %151 ]
  store %"class.jxl::Plane.97"* %149, %"class.jxl::Plane.97"** %153, align 8
  tail call void @_ZdlPv(i8* %169) #15
  %170 = bitcast %"class.std::__1::vector.169"* %146 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #12
  br label %171

171:                                              ; preds = %122, %168
  %172 = bitcast %"class.std::__1::vector.169"* %147 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.std::__1::vector.169"* %146 to i64*
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %176 = bitcast %"class.jxl::Plane.97"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %179 = bitcast %"class.jxl::Plane.97"** %178 to i64*
  store i64 %177, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %181 = bitcast %"class.jxl::Plane.97"** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %184 = bitcast %"class.jxl::Plane.97"** %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast %"class.std::__1::vector.169"* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 24, i1 false) #12
  %186 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  store i64 %187, i64* %188, align 8
  ret %"class.jxl::ImageBundle"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane.97"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane.97"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane.97"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane.97"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #12
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane.97"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.169"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane.97"* %4, %"class.jxl::Plane.97"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #15
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #12
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #12
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #12
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #12
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #15
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #12
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane.97"* noalias sret, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane.97"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #12
  %14 = load i32, i32* %6, align 8, !noalias !72
  %15 = load i32, i32* %3, align 8, !alias.scope !72
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !72
  %20 = load i32, i32* %18, align 4, !alias.scope !72
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.85, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.87, i64 0, i64 0)) #12, !noalias !72
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14, !noalias !72
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !72
  %33 = load i64, i64* %4, align 8, !alias.scope !72
  %34 = load i8*, i8** %30, align 8, !noalias !72
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #12, !noalias !72
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #12, !noalias !72
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #12, !noalias !72
  %43 = load i32, i32* %10, align 4, !noalias !72
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !72
  %48 = load i8*, i8** %30, align 8, !noalias !72
  %49 = load i64, i64* %31, align 8, !noalias !72
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #12, !noalias !72
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #12, !noalias !72
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #12, !noalias !72
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !72
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

declare void @_ZN3jxl11ImageBundle16SetExtraChannelsEONSt3__16vectorINS_5PlaneIfEENS1_9allocatorIS4_EEEE(%"class.jxl::ImageBundle"*, %"class.std::__1::vector.169"* dereferenceable(24)) local_unnamed_addr #1

declare i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"*) local_unnamed_addr #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZN3jxl5ImageC1Ev(%"class.jxl::Image"*) unnamed_addr #1

declare void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #1

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13GroupDecCacheD2Ev(%"struct.jxl::GroupDecCache"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %3 = load i16*, i16** %2, align 8
  store i16* null, i16** %2, align 8
  %4 = icmp eq i16* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast i16* %3 to i8*
  %7 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 0
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %7, align 8
  %9 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %6, void (i8*, i8*)* %8, i8* %10) #12
  br label %11

11:                                               ; preds = %1, %5
  %12 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  store i32* null, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = bitcast i32* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 0
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %16, void (i8*, i8*)* %18, i8* %20) #12
  br label %21

21:                                               ; preds = %11, %15
  %22 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %23 = load float*, float** %22, align 8
  store float* null, float** %22, align 8
  %24 = icmp eq float* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = bitcast float* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %28 = load void (i8*, i8*)*, void (i8*, i8*)** %27, align 8
  %29 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %26, void (i8*, i8*)* %28, i8* %30) #12
  br label %31

31:                                               ; preds = %21, %25
  %32 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 0
  %33 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 11
  br label %34

34:                                               ; preds = %51, %31
  %35 = phi %"class.jxl::Image3.276"* [ %33, %31 ], [ %36, %51 ]
  %36 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %35, i64 -1
  %37 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %35, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #12
  br label %41

41:                                               ; preds = %40, %34
  %42 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %35, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #12
  br label %46

46:                                               ; preds = %45, %41
  %47 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %35, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  store i8* null, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %46
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #12
  br label %51

51:                                               ; preds = %46, %50
  %52 = icmp eq %"class.jxl::Image3.276"* %36, %32
  br i1 %52, label %53, label %34

53:                                               ; preds = %51
  ret void
}

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #1

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD2Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #12
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.253"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3jxl5ImageD1Ev(%"class.jxl::Image"*) unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD0Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #12
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.253"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"struct.jxl::GroupHeader"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl11GroupHeader4NameEv(%"struct.jxl::GroupHeader"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.61, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE(%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, i64 3
  %8 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %4) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %87

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 2, i32 0
  %13 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %14 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, i64 11
  %16 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %12) #12
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %87

19:                                               ; preds = %11
  %20 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #12
  %21 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %23 = bitcast %"class.jxl::Transform"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector.253"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = sdiv exact i64 %27, 72
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %3, align 4
  %30 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %30, align 8, !noalias !75
  %32 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %31, i64 4
  %33 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %32, align 8, !noalias !75
  %34 = call i32 %33(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 2503965933635, i32 0, i32* nonnull %3) #12
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %85

36:                                               ; preds = %19
  %37 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %38 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8
  %39 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %38, i64 12
  %40 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %39, align 8
  %41 = call zeroext i1 %40(%"class.jxl::Visitor"* %1) #12
  br i1 %41, label %42, label %67

42:                                               ; preds = %36
  %43 = load i32, i32* %3, align 4
  %44 = zext i32 %43 to i64
  %45 = load i64, i64* %23, align 8
  %46 = load i64, i64* %25, align 8
  %47 = sub i64 %45, %46
  %48 = sdiv exact i64 %47, 72
  %49 = icmp ult i64 %48, %44
  %50 = inttoptr i64 %46 to %"class.jxl::Transform"*
  %51 = inttoptr i64 %45 to %"class.jxl::Transform"*
  br i1 %49, label %52, label %54

52:                                               ; preds = %42
  %53 = sub nsw i64 %44, %48
  call void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.253"* %21, i64 %53) #12
  br label %67

54:                                               ; preds = %42
  %55 = icmp ugt i64 %48, %44
  br i1 %55, label %56, label %67

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %44
  %58 = icmp eq %"class.jxl::Transform"* %57, %51
  br i1 %58, label %66, label %59

59:                                               ; preds = %56, %59
  %60 = phi %"class.jxl::Transform"* [ %61, %59 ], [ %51, %56 ]
  %61 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %60, i64 -1
  %62 = bitcast %"class.jxl::Transform"* %61 to void (%"class.jxl::Transform"*)***
  %63 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %62, align 8
  %64 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %63, align 8
  call void %64(%"class.jxl::Transform"* %61) #12
  %65 = icmp eq %"class.jxl::Transform"* %61, %57
  br i1 %65, label %66, label %59

66:                                               ; preds = %59, %56
  store %"class.jxl::Transform"* %57, %"class.jxl::Transform"** %22, align 8
  br label %67

67:                                               ; preds = %66, %54, %52, %36
  %68 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %21, i64 0, i32 0, i32 0
  %69 = load i32, i32* %3, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %75

71:                                               ; preds = %75
  %72 = load i32, i32* %3, align 4
  %73 = zext i32 %72 to i64
  %74 = icmp ult i64 %84, %73
  br i1 %74, label %75, label %85

75:                                               ; preds = %67, %71
  %76 = phi i64 [ %84, %71 ], [ 0, %67 ]
  %77 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %68, align 8
  %78 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %77, i64 %76, i32 0
  %79 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %79, i64 11
  %81 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %80, align 8
  %82 = call i32 %81(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %78) #12
  %83 = icmp eq i32 %82, 0
  %84 = add nuw nsw i64 %76, 1
  br i1 %83, label %71, label %85

85:                                               ; preds = %75, %71, %67, %19
  %86 = phi i32 [ %34, %19 ], [ 0, %67 ], [ %82, %75 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #12
  br label %87

87:                                               ; preds = %11, %2, %85
  %88 = phi i32 [ %86, %85 ], [ %17, %11 ], [ %9, %2 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.253"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Transform"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Transform"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 72
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Transform"*
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.jxl::Transform"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"class.jxl::Transform"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %19, i32 5) #12
  %20 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %19, i64 1
  %21 = icmp eq %"class.jxl::Transform"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %119

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.253"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 72
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 256204778801521550
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.253"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #14
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 72
  %36 = icmp ult i64 %35, 128102389400760775
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 256204778801521550, %33 ]
  %44 = mul i64 %43, 72
  %45 = tail call i8* @_Znwm(i64 %44) #15
  %46 = bitcast i8* %45 to %"class.jxl::Transform"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"class.jxl::Transform"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %28
  %51 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %48
  %52 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"class.jxl::Transform"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %54, i32 5) #12
  %55 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %54, i64 1
  %56 = icmp eq %"class.jxl::Transform"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"class.jxl::Transform"* %51 to i64
  %59 = ptrtoint %"class.jxl::Transform"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.253", %"class.std::__1::vector.253"* %0, i64 0, i32 0, i32 0
  %61 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %60, align 8
  %62 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  %63 = icmp eq %"class.jxl::Transform"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"class.jxl::Transform"* %61 to i64
  br label %101

66:                                               ; preds = %57, %66
  %67 = phi %"class.jxl::Transform"* [ %96, %66 ], [ %50, %57 ]
  %68 = phi %"class.jxl::Transform"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 1
  %73 = bitcast i32* %71 to i8*
  %74 = bitcast i32* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 24, i1 false) #12
  %75 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7
  %76 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7
  %77 = bitcast %"class.std::__1::vector.255"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #12
  %78 = bitcast %"class.std::__1::vector.255"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector.255"* %75 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 1
  %82 = bitcast %"struct.jxl::SqueezeParams"** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 1
  %85 = bitcast %"struct.jxl::SqueezeParams"** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast %"struct.jxl::SqueezeParams"** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast %"struct.jxl::SqueezeParams"** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.std::__1::vector.255"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #12
  %92 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 8
  %93 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 8
  %94 = bitcast i32* %92 to i8*
  %95 = bitcast i32* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 10, i1 false) #12
  %96 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1
  %97 = icmp eq %"class.jxl::Transform"* %69, %61
  br i1 %97, label %98, label %66

98:                                               ; preds = %66
  %99 = load i64, i64* %25, align 8
  %100 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  br label %101

101:                                              ; preds = %64, %98
  %102 = phi %"class.jxl::Transform"* [ %61, %64 ], [ %100, %98 ]
  %103 = phi %"class.jxl::Transform"* [ %50, %64 ], [ %96, %98 ]
  %104 = phi i64 [ %65, %64 ], [ %99, %98 ]
  %105 = ptrtoint %"class.jxl::Transform"* %103 to i64
  store i64 %105, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Transform"*
  %107 = icmp eq %"class.jxl::Transform"* %102, %106
  br i1 %107, label %115, label %108

108:                                              ; preds = %101, %108
  %109 = phi %"class.jxl::Transform"* [ %110, %108 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %109, i64 -1
  %111 = bitcast %"class.jxl::Transform"* %110 to void (%"class.jxl::Transform"*)***
  %112 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %111, align 8
  %113 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %112, align 8
  tail call void %113(%"class.jxl::Transform"* %110) #12
  %114 = icmp eq %"class.jxl::Transform"* %110, %106
  br i1 %114, label %115, label %108

115:                                              ; preds = %108, %101
  %116 = icmp eq i64 %104, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %118) #15
  br label %119

119:                                              ; preds = %117, %115, %22
  ret void
}

declare void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"*, i32) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD2Ev(%"class.jxl::Transform"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #12
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.255"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD0Ev(%"class.jxl::Transform"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #12
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.255"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"class.jxl::Transform"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl9Transform4NameEv(%"class.jxl::Transform"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.63, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE(%"class.jxl::Transform"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !78
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %6, i64 4
  %8 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %7, align 8, !noalias !78
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %4) #12
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %165

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 8
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %165, label %14

14:                                               ; preds = %11
  %15 = icmp ult i32 %12, 2
  %16 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %17 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %17, i64 8
  %19 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %18, align 8
  %20 = tail call i32 %19(%"class.jxl::Visitor"* %1, i1 zeroext %15) #12
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 2
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !81
  %25 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %24, i64 4
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %25, align 8, !noalias !81
  %27 = tail call i32 %26(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %23) #12
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %165

29:                                               ; preds = %22, %14
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %32, i64 8
  %34 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %33, align 8
  %35 = tail call i32 %34(%"class.jxl::Visitor"* %1, i1 zeroext %31) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 3
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !84
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %39, i64 4
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %40, align 8, !noalias !84
  %42 = tail call i32 %41(%"class.jxl::Visitor"* %1, i64 6442450950, i64 1395864371267, i32 6, i32* %38) #12
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %165

44:                                               ; preds = %37
  %45 = load i32, i32* %38, align 8
  %46 = icmp ugt i32 %45, 41
  br i1 %46, label %165, label %47

47:                                               ; preds = %44, %29
  %48 = load i32, i32* %4, align 8
  %49 = icmp eq i32 %48, 1
  %50 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %50, i64 8
  %52 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %51, align 8
  %53 = tail call i32 %52(%"class.jxl::Visitor"* %1, i1 zeroext %49) #12
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %87

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 4
  %57 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !87
  %58 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %57, i64 4
  %59 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %58, align 8, !noalias !87
  %60 = tail call i32 %59(%"class.jxl::Visitor"* %1, i64 -9223372021822390271, i64 191126044676, i32 3, i32* %56) #12
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %165

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 5
  %64 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !90
  %65 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %64, i64 4
  %66 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %65, align 8, !noalias !90
  %67 = tail call i32 %66(%"class.jxl::Visitor"* %1, i64 35223026794503, i64 738936238415883, i32 256, i32* %63) #12
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %165

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 6
  %71 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !93
  %72 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %71, i64 4
  %73 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %72, align 8, !noalias !93
  %74 = tail call i32 %73(%"class.jxl::Visitor"* %1, i64 169651208192, i64 176123723915305, i32 0, i32* %70) #12
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %165

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 9
  %78 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %79 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %79, i64 5
  %81 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %80, align 8
  %82 = tail call i32 %81(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %77) #12
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %165

84:                                               ; preds = %76
  %85 = load i32, i32* %77, align 4
  %86 = icmp ugt i32 %85, 13
  br i1 %86, label %165, label %87

87:                                               ; preds = %84, %47
  %88 = load i32, i32* %4, align 8
  %89 = icmp eq i32 %88, 2
  %90 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %91 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %90, i64 8
  %92 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %91, align 8
  %93 = tail call i32 %92(%"class.jxl::Visitor"* %1, i1 zeroext %89) #12
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %165

95:                                               ; preds = %87
  %96 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #12
  %97 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %98 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %99 = bitcast %"struct.jxl::SqueezeParams"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.255"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = sdiv exact i64 %103, 24
  %105 = trunc i64 %104 to i32
  store i32 %105, i32* %3, align 4
  %106 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !96
  %107 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %106, i64 4
  %108 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %107, align 8, !noalias !96
  %109 = call i32 %108(%"class.jxl::Visitor"* %1, i64 152471339008, i64 5665061863717, i32 0, i32* nonnull %3) #12
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %164

111:                                              ; preds = %95
  %112 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %113 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %112, align 8
  %114 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %113, i64 12
  %115 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %114, align 8
  %116 = call zeroext i1 %115(%"class.jxl::Visitor"* %1) #12
  br i1 %116, label %117, label %142

117:                                              ; preds = %111
  %118 = load i32, i32* %3, align 4
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %99, align 8
  %121 = load i64, i64* %101, align 8
  %122 = sub i64 %120, %121
  %123 = sdiv exact i64 %122, 24
  %124 = icmp ult i64 %123, %119
  %125 = inttoptr i64 %121 to %"struct.jxl::SqueezeParams"*
  %126 = inttoptr i64 %120 to %"struct.jxl::SqueezeParams"*
  br i1 %124, label %127, label %129

127:                                              ; preds = %117
  %128 = sub nsw i64 %119, %123
  call void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.255"* %97, i64 %128) #12
  br label %142

129:                                              ; preds = %117
  %130 = icmp ugt i64 %123, %119
  br i1 %130, label %131, label %142

131:                                              ; preds = %129
  %132 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %125, i64 %119
  %133 = icmp eq %"struct.jxl::SqueezeParams"* %132, %126
  br i1 %133, label %141, label %134

134:                                              ; preds = %131, %134
  %135 = phi %"struct.jxl::SqueezeParams"* [ %136, %134 ], [ %126, %131 ]
  %136 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %135, i64 -1
  %137 = bitcast %"struct.jxl::SqueezeParams"* %136 to void (%"struct.jxl::SqueezeParams"*)***
  %138 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %137, align 8
  %139 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %138, align 8
  call void %139(%"struct.jxl::SqueezeParams"* %136) #12
  %140 = icmp eq %"struct.jxl::SqueezeParams"* %136, %132
  br i1 %140, label %141, label %134

141:                                              ; preds = %134, %131
  store %"struct.jxl::SqueezeParams"* %132, %"struct.jxl::SqueezeParams"** %98, align 8
  br label %142

142:                                              ; preds = %141, %129, %127, %111
  %143 = load i32, i32* %3, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %97, i64 0, i32 0, i32 0
  %147 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  br label %153

148:                                              ; preds = %153
  %149 = load i32, i32* %3, align 4
  %150 = zext i32 %149 to i64
  %151 = icmp ult i64 %162, %150
  br i1 %151, label %153, label %152

152:                                              ; preds = %148, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #12
  br label %165

153:                                              ; preds = %145, %148
  %154 = phi i64 [ 0, %145 ], [ %162, %148 ]
  %155 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %146, align 8
  %156 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %155, i64 %154, i32 0
  %157 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %147, align 8
  %158 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %157, i64 11
  %159 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %158, align 8
  %160 = call i32 %159(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %156) #12
  %161 = icmp eq i32 %160, 0
  %162 = add nuw nsw i64 %154, 1
  br i1 %161, label %148, label %163

163:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #12
  br label %165

164:                                              ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #12
  br label %165

165:                                              ; preds = %87, %152, %163, %84, %44, %11, %164, %76, %69, %62, %55, %37, %22, %2
  %166 = phi i32 [ %160, %163 ], [ %109, %164 ], [ %82, %76 ], [ %74, %69 ], [ %67, %62 ], [ %60, %55 ], [ %42, %37 ], [ %27, %22 ], [ %9, %2 ], [ 1, %11 ], [ 1, %44 ], [ 1, %84 ], [ 0, %152 ], [ 0, %87 ]
  ret i32 %166
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.255"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::SqueezeParams"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::SqueezeParams"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::SqueezeParams"*
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::SqueezeParams"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::SqueezeParams"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %19) #12
  %20 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %19, i64 1
  %21 = icmp eq %"struct.jxl::SqueezeParams"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %96

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.255"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 24
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 768614336404564650
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.255"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #14
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 24
  %36 = icmp ult i64 %35, 384307168202282325
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 768614336404564650, %33 ]
  %44 = mul i64 %43, 24
  %45 = tail call i8* @_Znwm(i64 %44) #15
  %46 = bitcast i8* %45 to %"struct.jxl::SqueezeParams"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.jxl::SqueezeParams"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %28
  %51 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %48
  %52 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"struct.jxl::SqueezeParams"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %54) #12
  %55 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %54, i64 1
  %56 = icmp eq %"struct.jxl::SqueezeParams"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"struct.jxl::SqueezeParams"* %51 to i64
  %59 = ptrtoint %"struct.jxl::SqueezeParams"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.255", %"class.std::__1::vector.255"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %60, align 8
  %62 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  %63 = icmp eq %"struct.jxl::SqueezeParams"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"struct.jxl::SqueezeParams"* %61 to i64
  br label %78

66:                                               ; preds = %57, %66
  %67 = phi %"struct.jxl::SqueezeParams"* [ %73, %66 ], [ %50, %57 ]
  %68 = phi %"struct.jxl::SqueezeParams"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1
  %70 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 12, i1 false) #12
  %73 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1
  %74 = icmp eq %"struct.jxl::SqueezeParams"* %69, %61
  br i1 %74, label %75, label %66

75:                                               ; preds = %66
  %76 = load i64, i64* %25, align 8
  %77 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  br label %78

78:                                               ; preds = %64, %75
  %79 = phi %"struct.jxl::SqueezeParams"* [ %61, %64 ], [ %77, %75 ]
  %80 = phi %"struct.jxl::SqueezeParams"* [ %50, %64 ], [ %73, %75 ]
  %81 = phi i64 [ %65, %64 ], [ %76, %75 ]
  %82 = ptrtoint %"struct.jxl::SqueezeParams"* %80 to i64
  store i64 %82, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %83 = inttoptr i64 %81 to %"struct.jxl::SqueezeParams"*
  %84 = icmp eq %"struct.jxl::SqueezeParams"* %79, %83
  br i1 %84, label %92, label %85

85:                                               ; preds = %78, %85
  %86 = phi %"struct.jxl::SqueezeParams"* [ %87, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %86, i64 -1
  %88 = bitcast %"struct.jxl::SqueezeParams"* %87 to void (%"struct.jxl::SqueezeParams"*)***
  %89 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %88, align 8
  %90 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %89, align 8
  tail call void %90(%"struct.jxl::SqueezeParams"* %87) #12
  %91 = icmp eq %"struct.jxl::SqueezeParams"* %87, %83
  br i1 %91, label %92, label %85

92:                                               ; preds = %85, %78
  %93 = icmp eq i64 %81, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %92
  %95 = inttoptr i64 %81 to i8*
  tail call void @_ZdlPv(i8* %95) #15
  br label %96

96:                                               ; preds = %94, %92, %22
  ret void
}

declare void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13SqueezeParamsD0Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::SqueezeParams"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl13SqueezeParams4NameEv(%"struct.jxl::SqueezeParams"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.68, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE(%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 2
  %12 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %12, i64 3
  %14 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %11) #12
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 4
  %19 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %20 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !99
  %21 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %20, i64 4
  %22 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %21, align 8, !noalias !99
  %23 = tail call i32 %22(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %18) #12
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 5
  %27 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !102
  %28 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %27, i64 4
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %28, align 8, !noalias !102
  %30 = tail call i32 %29(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 564788199427, i32 2, i32* %26) #12
  ret i32 %30

31:                                               ; preds = %17, %10, %2
  %32 = phi i32 [ %23, %17 ], [ %15, %10 ], [ %8, %2 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.37* %7 to %"class.std::__1::vector.47"**
  %9 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.47"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #15
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.47"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #15
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.37* %28 to %"class.std::__1::vector.47"**
  %30 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.47"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #15
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.37* %34 to %"class.std::__1::vector.47"**
  %36 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #12
  %37 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.47"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #14
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #15
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #12
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.37* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.34"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon.37* %19 to %"class.std::__1::vector.47"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #12
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.37* %30 to %"class.std::__1::vector.47"**
  %32 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.47"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #15
  %36 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #12
  %37 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.47"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #14
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #15
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #12
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.37* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.34"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.34"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #14
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #15
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon.37* %111 to %"class.std::__1::vector.47"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #12
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon.37* %120 to %"class.std::__1::vector.47"**
  %122 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.47"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #15
  %126 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #12
  %127 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.47"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #14
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #15
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #12
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon.37* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.34", %"class.std::__1::vector.34"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #12
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon.37* %187 to %"class.std::__1::vector.47"**
  store %"class.std::__1::vector.47"* null, %"class.std::__1::vector.47"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon.37* %208 to %"class.std::__1::vector.47"**
  %210 = load %"class.std::__1::vector.47"*, %"class.std::__1::vector.47"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.47"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #15
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.47"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #15
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #15
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

declare void @_ZN3jxl19GroupBorderAssigner4InitERKNS_15FrameDimensionsE(%"class.jxl::GroupBorderAssigner"*, %"struct.jxl::FrameDimensions"* dereferenceable(144)) local_unnamed_addr #1

declare void @_ZN3jxl13FilterWeights4InitERKNS_10LoopFilterERKNS_15FrameDimensionsE(%"struct.jxl::FilterWeights"*, %"struct.jxl::LoopFilter"* dereferenceable(144), %"struct.jxl::FrameDimensions"* dereferenceable(144)) local_unnamed_addr #1

declare void @_ZN3jxl9Upsampler4InitEmRKNS_19CustomTransformDataE(%"struct.jxl::Upsampler"*, i64, %"struct.jxl::CustomTransformData"* dereferenceable(1224)) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110__function16__policy_invokerIFvPKfmmmEE12__call_emptyEPKNS0_16__policy_storageES3_mmm(%"union.std::__1::__function::__policy_storage"*, float*, i64, i64, i64) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #16
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #11 comdat {
  tail call void @abort() #14
  unreachable
}

declare void @_ZN3jxl15PatchDictionary17ComputePatchCacheEv(%"class.jxl::PatchDictionary"*) local_unnamed_addr #1

declare i32 @_ZN3jxl9Quantizer6DecodeEPNS_9BitReaderE(%"class.jxl::Quantizer"*, %"class.jxl::BitReader"*) local_unnamed_addr #1

declare i32 @_ZN3jxl17DecodeBlockCtxMapEPNS_9BitReaderEPNS_11BlockCtxMapE(%"class.jxl::BitReader"*, %"struct.jxl::BlockCtxMap"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl19ColorCorrelationMap8DecodeDCEPNS_9BitReaderE(%"struct.jxl::ColorCorrelationMap"*, %"class.jxl::BitReader"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ugt i8* %4, %6
  br i1 %7, label %8, label %13, !prof !8

8:                                                ; preds = %2
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %9 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %26

13:                                               ; preds = %2
  %14 = bitcast i8* %4 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %15, %17
  %19 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = or i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = sub i64 63, %17
  %23 = lshr i64 %22, 3
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8* %24, i8** %3, align 8
  %25 = or i64 %17, 56
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %8, %13
  %27 = phi i64 [ %12, %8 ], [ %25, %13 ]
  %28 = phi i64 [ %10, %8 ], [ %21, %13 ]
  %29 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %30 = and i64 %28, 1
  %31 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %32 = add i64 %27, -1
  store i64 %32, i64* %31, align 8
  %33 = lshr i64 %28, 1
  store i64 %33, i64* %29, align 8
  %34 = icmp eq i64 %30, 0
  br i1 %34, label %35, label %131

35:                                               ; preds = %26
  %36 = tail call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 -9223370935195664300, i64 35523674505287, %"class.jxl::BitReader"* %1) #12
  %37 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 3
  store i32 %36, i32* %37, align 8
  %38 = uitofp i32 %36 to float
  %39 = fdiv float 1.000000e+00, %38
  %40 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 4
  store float %39, float* %40, align 4
  %41 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 7
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 5
  %44 = load float, float* %43, align 8
  %45 = sitofp i32 %42 to float
  %46 = fmul float %39, %45
  %47 = fadd float %44, %46
  %48 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 2, i64 0
  store float %47, float* %48, align 8
  %49 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 8
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 6
  %52 = load float, float* %51, align 4
  %53 = sitofp i32 %50 to float
  %54 = fmul float %39, %53
  %55 = fadd float %52, %54
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %0, i64 0, i32 2, i64 2
  store float %55, float* %56, align 8
  %57 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %43) #12
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %131

59:                                               ; preds = %35
  %60 = load float, float* %43, align 8
  %61 = tail call float @llvm.fabs.f32(float %60) #12
  %62 = fcmp ogt float %61, 4.000000e+00
  br i1 %62, label %131, label %63

63:                                               ; preds = %59
  %64 = tail call i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"* %1, float* %51) #12
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %131

66:                                               ; preds = %63
  %67 = load float, float* %51, align 4
  %68 = tail call float @llvm.fabs.f32(float %67) #12
  %69 = fcmp ogt float %68, 4.000000e+00
  br i1 %69, label %131, label %70

70:                                               ; preds = %66
  %71 = load i8*, i8** %3, align 8
  %72 = load i8*, i8** %5, align 8
  %73 = icmp ugt i8* %71, %72
  br i1 %73, label %74, label %77, !prof !8

74:                                               ; preds = %70
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %75 = load i64, i64* %29, align 8
  %76 = load i64, i64* %31, align 8
  br label %88

77:                                               ; preds = %70
  %78 = bitcast i8* %71 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = load i64, i64* %31, align 8
  %81 = shl i64 %79, %80
  %82 = load i64, i64* %29, align 8
  %83 = or i64 %82, %81
  store i64 %83, i64* %29, align 8
  %84 = sub i64 63, %80
  %85 = lshr i64 %84, 3
  %86 = getelementptr inbounds i8, i8* %71, i64 %85
  store i8* %86, i8** %3, align 8
  %87 = or i64 %80, 56
  store i64 %87, i64* %31, align 8
  br label %88

88:                                               ; preds = %74, %77
  %89 = phi i64 [ %76, %74 ], [ %87, %77 ]
  %90 = phi i64 [ %75, %74 ], [ %83, %77 ]
  %91 = add i64 %89, -8
  store i64 %91, i64* %31, align 8
  %92 = lshr i64 %90, 8
  store i64 %92, i64* %29, align 8
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = add nsw i32 %94, -128
  store i32 %95, i32* %41, align 8
  %96 = load i8*, i8** %3, align 8
  %97 = load i8*, i8** %5, align 8
  %98 = icmp ugt i8* %96, %97
  br i1 %98, label %99, label %102, !prof !8

99:                                               ; preds = %88
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #12
  %100 = load i64, i64* %29, align 8
  %101 = load i64, i64* %31, align 8
  br label %113

102:                                              ; preds = %88
  %103 = bitcast i8* %96 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = load i64, i64* %31, align 8
  %106 = shl i64 %104, %105
  %107 = load i64, i64* %29, align 8
  %108 = or i64 %107, %106
  store i64 %108, i64* %29, align 8
  %109 = sub i64 63, %105
  %110 = lshr i64 %109, 3
  %111 = getelementptr inbounds i8, i8* %96, i64 %110
  store i8* %111, i8** %3, align 8
  %112 = or i64 %105, 56
  store i64 %112, i64* %31, align 8
  br label %113

113:                                              ; preds = %99, %102
  %114 = phi i64 [ %101, %99 ], [ %112, %102 ]
  %115 = phi i64 [ %100, %99 ], [ %108, %102 ]
  %116 = add i64 %114, -8
  store i64 %116, i64* %31, align 8
  %117 = lshr i64 %115, 8
  store i64 %117, i64* %29, align 8
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = add nsw i32 %119, -128
  store i32 %120, i32* %49, align 4
  %121 = load i32, i32* %41, align 8
  %122 = load float, float* %43, align 8
  %123 = sitofp i32 %121 to float
  %124 = load float, float* %40, align 4
  %125 = fmul float %124, %123
  %126 = fadd float %122, %125
  store float %126, float* %48, align 8
  %127 = load float, float* %51, align 4
  %128 = sitofp i32 %120 to float
  %129 = fmul float %124, %128
  %130 = fadd float %129, %127
  store float %130, float* %56, align 8
  br label %131

131:                                              ; preds = %26, %66, %63, %59, %35, %113
  %132 = phi i32 [ 0, %113 ], [ 0, %26 ], [ %57, %35 ], [ 1, %59 ], [ %64, %63 ], [ 1, %66 ]
  ret i32 %132
}

declare i32 @_ZN3jxl8F16Coder4ReadEPNS_9BitReaderEPf(%"class.jxl::BitReader"*, float*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #13

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #1

declare i8* @_ZN3hwy20AllocateAlignedBytesEmPFPvS0_mES0_(i64, i8* (i8*, i64)*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl9RunOnPoolINS_10ThreadPool8SkipInitEZNS_18PassesDecoderState9InitForACEPS1_EUliiE_EEbS4_jjRKT_RKT0_PKc(%"class.jxl::ThreadPool"*, i32, i32, %"struct.jxl::ThreadPool::SkipInit"* dereferenceable(1), %class.anon.373* dereferenceable(16), i8*) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %8 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %9 = alloca double, align 8
  %10 = alloca %"class.jxl::ThreadPool", align 8
  %11 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* %5, double* nonnull %9) #12
  %12 = icmp eq %"class.jxl::ThreadPool"* %0, null
  br i1 %12, label %13, label %33

13:                                               ; preds = %6
  %14 = bitcast %"class.jxl::ThreadPool"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 0
  %16 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %10, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %15, align 8
  %17 = bitcast i8** %16 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %10, %"class.jxl::ThreadPool"** %17, align 8
  %18 = icmp ugt i32 %1, %2
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.83, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.84, i64 0, i64 0)) #12
  %21 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

22:                                               ; preds = %13
  %23 = icmp eq i32 %1, %2
  br i1 %23, label %31, label %24

24:                                               ; preds = %22
  %25 = bitcast %"class.jxl::ThreadPool::RunCallState"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 0
  %27 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %7, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %26, align 8
  store %class.anon.373* %4, %class.anon.373** %27, align 8
  %28 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %14, i8* nonnull %25, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #12
  %29 = icmp ne i32 %28, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #12
  %30 = zext i1 %29 to i32
  br label %31

31:                                               ; preds = %22, %24
  %32 = phi i32 [ %30, %24 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #12
  br label %51

33:                                               ; preds = %6
  %34 = icmp ugt i32 %1, %2
  br i1 %34, label %35, label %38

35:                                               ; preds = %33
  %36 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.83, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.84, i64 0, i64 0)) #12
  %37 = call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

38:                                               ; preds = %33
  %39 = icmp eq i32 %1, %2
  br i1 %39, label %51, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.jxl::ThreadPool::RunCallState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #12
  %42 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 0
  %43 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %8, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %42, align 8
  store %class.anon.373* %4, %class.anon.373** %43, align 8
  %44 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 0
  %45 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %44, align 8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %0, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 %45(i8* %47, i8* nonnull %41, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm, i32 %1, i32 %2) #12
  %49 = icmp ne i32 %48, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #12
  %50 = zext i1 %49 to i32
  br label %51

51:                                               ; preds = %40, %38, %31
  %52 = phi i32 [ %32, %31 ], [ %50, %40 ], [ 0, %38 ]
  %53 = load double, double* %9, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* %5, double %53) #12
  %54 = icmp eq i32 %52, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  ret i1 %54
}

declare void @_ZN3jxl10Symmetric5ERKNS_5PlaneIfEERKNS_4RectERKNS_17WeightsSymmetric5EPNS_10ThreadPoolEPS1_(%"class.jxl::Plane.97"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::WeightsSymmetric5"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"class.jxl::Plane.97"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #1

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #1

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallInitFuncEPvm(i8*, i64) #0 comdat align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_18PassesDecoderState9InitForACEPS0_EUliiE_E12CallDataFuncEPvjm(i8*, i32, i64) #0 comdat align 2 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.373**
  %7 = load %class.anon.373*, %class.anon.373** %6, align 8
  %8 = getelementptr inbounds %class.anon.373, %class.anon.373* %7, i64 0, i32 1
  %9 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %8, align 8
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %class.anon.373, %class.anon.373* %7, i64 0, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = load i64, i64* %12, align 8
  %14 = urem i64 %10, %13
  %15 = udiv i64 %10, %13
  %16 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 0
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 3
  %21 = shl i64 %14, 8
  %22 = shl i64 %15, 8
  %23 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 3
  %24 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %23, i64 0, i32 0, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 3, i32 0, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  store i64 %21, i64* %17, align 8
  store i64 %22, i64* %18, align 8
  %30 = add i64 %21, 256
  %31 = icmp ugt i64 %30, %26
  %32 = tail call i64 @llvm.usub.sat.i64(i64 %26, i64 %21) #12
  %33 = select i1 %31, i64 %32, i64 256
  store i64 %33, i64* %19, align 8
  %34 = add i64 %22, 256
  %35 = icmp ugt i64 %34, %29
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %29, i64 %22) #12
  %37 = select i1 %35, i64 %36, i64 256
  store i64 %37, i64* %20, align 8
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %9, i64 0, i32 21
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, %10
  call void @_ZN3jxl12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64 %40, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* %23) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  ret void
}

declare void @_ZN3jxl12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.169"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane.97"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane.97"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #14
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #15
  %23 = bitcast i8* %22 to %"class.jxl::Plane.97"*
  %24 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane.97"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane.97"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane.97"*
  %29 = icmp eq %"class.jxl::Plane.97"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane.97"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane.97"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #12
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane.97"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane.97"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane.97"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane.97"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane.97"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane.97"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane.97"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #12
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane.97"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane.97"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #12
  %71 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane.97"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane.97"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane.97"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane.97"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane.97"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane.97"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane.97"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane.97"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #12
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane.97"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #15
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.85, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.86, i64 0, i64 0)) #12
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !105
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !105
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !105
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !105
  %40 = load i64, i64* %29, align 8, !noalias !105
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #12, !noalias !105
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !105
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !105
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #12, !noalias !105
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !105
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #12, !noalias !105
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !105
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !105
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !105
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !105
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !105
  %85 = load i64, i64* %74, align 8, !noalias !105
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #12, !noalias !105
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !105
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !105
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #12, !noalias !105
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !105
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #12, !noalias !105
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !105
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !105
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !105
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !105
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !105
  %130 = load i64, i64* %119, align 8, !noalias !105
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #12, !noalias !105
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !105
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !105
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #12, !noalias !105
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !105
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #12, !noalias !105
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !105
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !105
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.169"*, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane.97"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.jxl::Plane.97"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane.97"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane.97"* %38 to i64
  %40 = bitcast %"class.jxl::Plane.97"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane.97"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane.97"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane.97"* %51 to i64
  %53 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane.97"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane.97"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #12
  %66 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane.97"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane.97"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane.97"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane.97"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane.97"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane.97"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane.97"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #12
  %84 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane.97"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane.97"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #12
  %94 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane.97"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane.97"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane.97"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane.97"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane.97"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane.97"*
  %111 = icmp eq %"class.jxl::Plane.97"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane.97"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #12
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane.97"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #15
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"* dereferenceable(296)) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 1
  %6 = bitcast i32* %4 to i8*
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 12, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %8, %"class.std::__1::vector.108"* dereferenceable(24) %9)
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5
  %12 = bitcast %"class.std::__1::vector.115"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #12
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.115"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %2
  %22 = icmp ugt i64 %19, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector.115"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #14
  unreachable

25:                                               ; preds = %21
  %26 = tail call i8* @_Znwm(i64 %18) #15
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %29 = bitcast i32** %28 to i8**
  store i8* %26, i8** %29, align 8
  %30 = bitcast %"class.std::__1::vector.115"* %10 to i8**
  store i8* %26, i8** %30, align 8
  %31 = getelementptr inbounds i32, i32* %27, i64 %19
  %32 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  store i32* %31, i32** %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.115", %"class.std::__1::vector.115"* %11, i64 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = load i64, i64* %14, align 8
  %36 = bitcast i32** %28 to i64*
  %37 = ptrtoint i8* %26 to i64
  %38 = ptrtoint i32* %34 to i64
  %39 = sub i64 %35, %38
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %25
  %42 = lshr exact i64 %39, 2
  %43 = bitcast i32* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %43, i64 %39, i1 false) #12
  %44 = getelementptr inbounds i32, i32* %27, i64 %42
  %45 = ptrtoint i32* %44 to i64
  br label %46

46:                                               ; preds = %41, %25
  %47 = phi i64 [ %45, %41 ], [ %37, %25 ]
  store i64 %47, i64* %36, align 8
  br label %48

48:                                               ; preds = %2, %46
  %49 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 6
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %49, %"class.std::__1::vector.108"* dereferenceable(24) %50)
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7
  %53 = bitcast %"class.std::__1::vector.122"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #12
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7, i32 0, i32 1
  %55 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector.122"* %52 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = sdiv exact i64 %59, 268
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %89, label %62

62:                                               ; preds = %48
  %63 = icmp ugt i64 %60, 68831134603393849
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  %65 = bitcast %"class.std::__1::vector.122"* %51 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %65) #14
  unreachable

66:                                               ; preds = %62
  %67 = tail call i8* @_Znwm(i64 %59) #15
  %68 = bitcast i8* %67 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %69 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %70 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i8**
  store i8* %67, i8** %70, align 8
  %71 = bitcast %"class.std::__1::vector.122"* %51 to i8**
  store i8* %67, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %60
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGQuantTable"* %72, %"struct.jxl::jpeg::JPEGQuantTable"** %73, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector.122", %"class.std::__1::vector.122"* %52, i64 0, i32 0, i32 0
  %75 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %74, align 8
  %76 = load i64, i64* %55, align 8
  %77 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i64*
  %78 = ptrtoint i8* %67 to i64
  %79 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i64
  %80 = sub i64 %76, %79
  %81 = icmp sgt i64 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %66
  %83 = udiv exact i64 %80, 268
  %84 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %84, i64 %80, i1 false) #12
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %83
  %86 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %85 to i64
  br label %87

87:                                               ; preds = %82, %66
  %88 = phi i64 [ %86, %82 ], [ %78, %66 ]
  store i64 %88, i64* %77, align 8
  br label %89

89:                                               ; preds = %48, %87
  %90 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8
  %92 = bitcast %"class.std::__1::vector.130"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #12
  %93 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8, i32 0, i32 1
  %94 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.130"* %91 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = sdiv exact i64 %98, 1104
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %128, label %101

101:                                              ; preds = %89
  %102 = icmp ugt i64 %99, 16709007313142709
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.130"* %90 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %104) #14
  unreachable

105:                                              ; preds = %101
  %106 = tail call i8* @_Znwm(i64 %98) #15
  %107 = bitcast i8* %106 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %108 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %109 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i8**
  store i8* %106, i8** %109, align 8
  %110 = bitcast %"class.std::__1::vector.130"* %90 to i8**
  store i8* %106, i8** %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %99
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGHuffmanCode"* %111, %"struct.jxl::jpeg::JPEGHuffmanCode"** %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %91, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %113, align 8
  %115 = load i64, i64* %94, align 8
  %116 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i64*
  %117 = ptrtoint i8* %106 to i64
  %118 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i64
  %119 = sub i64 %115, %118
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %121, label %126

121:                                              ; preds = %105
  %122 = udiv exact i64 %119, 1104
  %123 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %123, i64 %119, i1 false) #12
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %122
  %125 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %124 to i64
  br label %126

126:                                              ; preds = %121, %105
  %127 = phi i64 [ %125, %121 ], [ %117, %105 ]
  store i64 %127, i64* %116, align 8
  br label %128

128:                                              ; preds = %89, %126
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9
  tail call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.139"* %129, %"class.std::__1::vector.139"* dereferenceable(24) %130)
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10
  %133 = bitcast %"class.std::__1::vector.153"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 24, i1 false) #12
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10, i32 0, i32 1
  %135 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.std::__1::vector.153"* %132 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %136, %138
  %140 = sdiv exact i64 %139, 120
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %172, label %142

142:                                              ; preds = %128
  %143 = icmp ugt i64 %140, 153722867280912930
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = bitcast %"class.std::__1::vector.153"* %131 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %145) #14
  unreachable

146:                                              ; preds = %142
  %147 = tail call i8* @_Znwm(i64 %139) #15
  %148 = bitcast i8* %147 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %149 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %150 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i8**
  store i8* %147, i8** %150, align 8
  %151 = bitcast %"class.std::__1::vector.153"* %131 to i8**
  store i8* %147, i8** %151, align 8
  %152 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %148, i64 %140
  %153 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo"* %152, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %154 = getelementptr inbounds %"class.std::__1::vector.153", %"class.std::__1::vector.153"* %132, i64 0, i32 0, i32 0
  %155 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %154, align 8
  %156 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %134, align 8
  %157 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i64*
  %158 = ptrtoint i8* %147 to i64
  %159 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2
  %160 = bitcast %"class.std::__1::__compressed_pair.163"* %159 to %"class.std::__1::allocator.166"*
  %161 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %155, %156
  br i1 %161, label %170, label %162

162:                                              ; preds = %146, %162
  %163 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %166, %162 ], [ %148, %146 ]
  %164 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %165, %162 ], [ %155, %146 ]
  tail call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.166"* %160, %"struct.jxl::jpeg::JPEGScanInfo"* %163, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %164) #12
  %165 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %164, i64 1
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %163, i64 1
  %167 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %165, %156
  br i1 %167, label %168, label %162

168:                                              ; preds = %162
  %169 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %166 to i64
  br label %170

170:                                              ; preds = %168, %146
  %171 = phi i64 [ %158, %146 ], [ %169, %168 ]
  store i64 %171, i64* %157, align 8
  br label %172

172:                                              ; preds = %128, %170
  %173 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %174 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11
  %175 = bitcast %"class.std::__1::vector.98"* %173 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #12
  %176 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11, i32 0, i32 1
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.98"* %174 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %205, label %183

183:                                              ; preds = %172
  %184 = icmp slt i64 %181, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = bitcast %"class.std::__1::vector.98"* %173 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %186) #14
  unreachable

187:                                              ; preds = %183
  %188 = tail call i8* @_Znwm(i64 %181) #15
  %189 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  store i8* %188, i8** %189, align 8
  %190 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %173, i64 0, i32 0, i32 0
  store i8* %188, i8** %190, align 8
  %191 = getelementptr inbounds i8, i8* %188, i64 %181
  %192 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  store i8* %191, i8** %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %174, i64 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = load i64, i64* %177, align 8
  %196 = bitcast i8** %189 to i64*
  %197 = ptrtoint i8* %194 to i64
  %198 = sub i64 %195, %197
  %199 = icmp sgt i64 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %187
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %188, i8* align 1 %194, i64 %198, i1 false) #12
  %201 = getelementptr inbounds i8, i8* %188, i64 %198
  br label %202

202:                                              ; preds = %200, %187
  %203 = phi i8* [ %201, %200 ], [ %188, %187 ]
  %204 = ptrtoint i8* %203 to i64
  store i64 %204, i64* %196, align 8
  br label %205

205:                                              ; preds = %172, %202
  %206 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %207 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 12
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"* %206, %"class.std::__1::vector.108"* dereferenceable(24) %207)
  %208 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %209 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13
  %210 = bitcast %"class.std::__1::vector.98"* %208 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %210, i8 0, i64 24, i1 false) #12
  %211 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13, i32 0, i32 1
  %212 = bitcast i8** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.std::__1::vector.98"* %209 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %213, %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %240, label %218

218:                                              ; preds = %205
  %219 = icmp slt i64 %216, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.std::__1::vector.98"* %208 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #14
  unreachable

222:                                              ; preds = %218
  %223 = tail call i8* @_Znwm(i64 %216) #15
  %224 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  store i8* %223, i8** %224, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %208, i64 0, i32 0, i32 0
  store i8* %223, i8** %225, align 8
  %226 = getelementptr inbounds i8, i8* %223, i64 %216
  %227 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  store i8* %226, i8** %227, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %209, i64 0, i32 0, i32 0
  %229 = load i8*, i8** %228, align 8
  %230 = load i64, i64* %212, align 8
  %231 = bitcast i8** %224 to i64*
  %232 = ptrtoint i8* %229 to i64
  %233 = sub i64 %230, %232
  %234 = icmp sgt i64 %233, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %222
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %223, i8* align 1 %229, i64 %233, i1 false) #12
  %236 = getelementptr inbounds i8, i8* %223, i64 %233
  br label %237

237:                                              ; preds = %235, %222
  %238 = phi i8* [ %236, %235 ], [ %223, %222 ]
  %239 = ptrtoint i8* %238 to i64
  store i64 %239, i64* %231, align 8
  br label %240

240:                                              ; preds = %205, %237
  %241 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 14
  %242 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 14
  %243 = bitcast i32* %241 to i8*
  %244 = bitcast i32* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %244, i64 5, i1 false)
  %245 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16
  %246 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16
  %247 = bitcast %"class.std::__1::vector.98"* %245 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %247, i8 0, i64 24, i1 false) #12
  %248 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16, i32 0, i32 1
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.std::__1::vector.98"* %246 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = sub i64 %250, %252
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %277, label %255

255:                                              ; preds = %240
  %256 = icmp slt i64 %253, 0
  br i1 %256, label %257, label %259

257:                                              ; preds = %255
  %258 = bitcast %"class.std::__1::vector.98"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %258) #14
  unreachable

259:                                              ; preds = %255
  %260 = tail call i8* @_Znwm(i64 %253) #15
  %261 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  store i8* %260, i8** %261, align 8
  %262 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %245, i64 0, i32 0, i32 0
  store i8* %260, i8** %262, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %253
  %264 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 2, i32 0, i32 0
  store i8* %263, i8** %264, align 8
  %265 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %246, i64 0, i32 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = load i64, i64* %249, align 8
  %268 = bitcast i8** %261 to i64*
  %269 = ptrtoint i8* %266 to i64
  %270 = sub i64 %267, %269
  %271 = icmp sgt i64 %270, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %260, i8* align 1 %266, i64 %270, i1 false) #12
  %273 = getelementptr inbounds i8, i8* %260, i64 %270
  br label %274

274:                                              ; preds = %272, %259
  %275 = phi i8* [ %273, %272 ], [ %260, %259 ]
  %276 = ptrtoint i8* %275 to i64
  store i64 %276, i64* %268, align 8
  br label %277

277:                                              ; preds = %240, %274
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector.108"*, %"class.std::__1::vector.108"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.108"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.98"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.108"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.108"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #15
  %18 = bitcast i8* %17 to %"class.std::__1::vector.98"*
  %19 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.98"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.108"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.98"* %22, %"class.std::__1::vector.98"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %24, align 8
  %26 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.98"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.98"* %25, %26
  br i1 %29, label %71, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.98"*
  br label %32

32:                                               ; preds = %65, %30
  %33 = phi %"class.std::__1::vector.98"* [ %67, %65 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.98"* [ %66, %65 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.98"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #12
  %36 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.98"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %65, label %43

43:                                               ; preds = %32
  %44 = icmp slt i64 %41, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.98"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #14
  unreachable

47:                                               ; preds = %43
  %48 = tail call i8* @_Znwm(i64 %41) #15
  %49 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 0
  store i8* %48, i8** %50, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 %41
  %52 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %37, align 8
  %56 = bitcast i8** %49 to i64*
  %57 = ptrtoint i8* %54 to i64
  %58 = sub i64 %55, %57
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %54, i64 %58, i1 false) #12
  %61 = getelementptr inbounds i8, i8* %48, i64 %58
  br label %62

62:                                               ; preds = %60, %47
  %63 = phi i8* [ %61, %60 ], [ %48, %47 ]
  %64 = ptrtoint i8* %63 to i64
  store i64 %64, i64* %56, align 8
  br label %65

65:                                               ; preds = %62, %32
  %66 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %34, i64 1
  %67 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %33, i64 1
  %68 = icmp eq %"class.std::__1::vector.98"* %66, %26
  br i1 %68, label %69, label %32

69:                                               ; preds = %65
  %70 = ptrtoint %"class.std::__1::vector.98"* %67 to i64
  br label %71

71:                                               ; preds = %16, %69
  %72 = phi i64 [ %28, %16 ], [ %70, %69 ]
  store i64 %72, i64* %27, align 8
  br label %73

73:                                               ; preds = %2, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.139"*, %"class.std::__1::vector.139"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.139"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.139"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 384307168202282325
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.139"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #15
  %18 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  %19 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.139"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGComponent"* %22, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.139", %"class.std::__1::vector.139"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %24, align 8
  %26 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %4, align 8
  %27 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %32

32:                                               ; preds = %75, %30
  %33 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %77, %75 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %76, %75 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %33 to i8*
  %36 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #12
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6
  %38 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6
  %39 = bitcast %"class.std::__1::vector.141"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #12
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6, i32 0, i32 1
  %41 = bitcast i16** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.141"* %38 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = ashr exact i64 %45, 1
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %32
  %49 = icmp slt i64 %45, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.141"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #14
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %45) #15
  %54 = bitcast i8* %53 to i16*
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 1
  %56 = bitcast i16** %55 to i8**
  store i8* %53, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.141"* %37 to i8**
  store i8* %53, i8** %57, align 8
  %58 = getelementptr inbounds i16, i16* %54, i64 %46
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store i16* %58, i16** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %38, i64 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = load i64, i64* %41, align 8
  %63 = bitcast i16** %55 to i64*
  %64 = ptrtoint i8* %53 to i64
  %65 = ptrtoint i16* %61 to i64
  %66 = sub i64 %62, %65
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %52
  %69 = lshr exact i64 %66, 1
  %70 = bitcast i16* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %53, i8* align 2 %70, i64 %66, i1 false) #12
  %71 = getelementptr inbounds i16, i16* %54, i64 %69
  %72 = ptrtoint i16* %71 to i64
  br label %73

73:                                               ; preds = %68, %52
  %74 = phi i64 [ %72, %68 ], [ %64, %52 ]
  store i64 %74, i64* %63, align 8
  br label %75

75:                                               ; preds = %73, %32
  %76 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 1
  %78 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %75
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.166"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %1 to i8*
  %5 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 72, i1 false) #12
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #12
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %15, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #14
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #15
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds i32, i32* %23, i64 %15
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store i32* %27, i32** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast i32** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint i32* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 2
  %39 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #12
  %40 = getelementptr inbounds i32, i32* %23, i64 %38
  %41 = ptrtoint i32* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %42, %3
  %45 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8
  %47 = bitcast %"class.std::__1::vector.156"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #12
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.156"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = ashr exact i64 %53, 3
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %83, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 2305843009213693951
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.156"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #14
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #15
  %62 = bitcast i8* %61 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 1
  %64 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.156"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.156", %"class.std::__1::vector.156"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %68, align 8
  %70 = load i64, i64* %49, align 8
  %71 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i64
  %74 = sub i64 %70, %73
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %60
  %77 = lshr exact i64 %74, 3
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %78, i64 %74, i1 false) #12
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %77
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %79 to i64
  br label %81

81:                                               ; preds = %76, %60
  %82 = phi i64 [ %80, %76 ], [ %72, %60 ]
  store i64 %82, i64* %71, align 8
  br label %83

83:                                               ; preds = %44, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #1

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #1

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #13

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl21BitReaderScopedCloserENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.299"*, %"class.std::__1::unique_ptr.301"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.301"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.299"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.299"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.301"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.301"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.301"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.301"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.301"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.301"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.301"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.299", %"class.std::__1::vector.299"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.301"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.301"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.jxl::BitReaderScopedCloser"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.301"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.301"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.301"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.301"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !108

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.301"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.301"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.301"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.301"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.301"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.301"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.301"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.301"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.301"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.301"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.301"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.301"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.301"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.301"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.301"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.301"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.301"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.301"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.301"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.301"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.301"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.301"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.301"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.301"*, %"class.std::__1::unique_ptr.301"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.301"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.301"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.301"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.301"*
  %138 = icmp eq %"class.std::__1::unique_ptr.301"* %133, %137
  br i1 %138, label %184, label %139

139:                                              ; preds = %132, %182
  %140 = phi %"class.std::__1::unique_ptr.301"* [ %141, %182 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.jxl::BitReaderScopedCloser"*, %"class.jxl::BitReaderScopedCloser"** %142, align 8
  store %"class.jxl::BitReaderScopedCloser"* null, %"class.jxl::BitReaderScopedCloser"** %142, align 8
  %144 = icmp eq %"class.jxl::BitReaderScopedCloser"* %143, null
  br i1 %144, label %182, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %143, i64 0, i32 0
  %147 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %146, align 8
  %148 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 6
  store i8 1, i8* %148, align 8
  %149 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 4
  %150 = load i8*, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  %152 = ptrtoint i8* %150 to i64
  br i1 %151, label %180, label %153

153:                                              ; preds = %145
  %154 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 2
  %155 = bitcast i8** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = sub i64 %156, %152
  %158 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 5
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %157, %159
  %161 = shl i64 %160, 3
  %162 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = sub i64 %161, %163
  %165 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 7
  %166 = load i64, i64* %165, align 8
  %167 = icmp ugt i64 %164, %166
  br i1 %167, label %168, label %180

168:                                              ; preds = %153
  %169 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %147, i64 0, i32 3
  %170 = load i8*, i8** %169, align 8
  %171 = getelementptr inbounds i8, i8* %170, i64 8
  %172 = ptrtoint i8* %171 to i64
  %173 = sub i64 %172, %152
  %174 = shl i64 %173, 3
  %175 = icmp ugt i64 %164, %174
  br i1 %175, label %176, label %180

176:                                              ; preds = %168
  %177 = getelementptr inbounds %"class.jxl::BitReaderScopedCloser", %"class.jxl::BitReaderScopedCloser"* %143, i64 0, i32 1
  %178 = bitcast %"class.jxl::Status"** %177 to i32**
  %179 = load i32*, i32** %178, align 8
  store i32 1, i32* %179, align 4
  br label %180

180:                                              ; preds = %176, %168, %153, %145
  %181 = bitcast %"class.jxl::BitReaderScopedCloser"* %143 to i8*
  tail call void @_ZdlPv(i8* %181) #15
  br label %182

182:                                              ; preds = %180, %139
  %183 = icmp eq %"class.std::__1::unique_ptr.301"* %141, %137
  br i1 %183, label %184, label %139

184:                                              ; preds = %182, %132
  %185 = icmp eq i64 %135, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %184
  %187 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %187) #15
  br label %188

188:                                              ; preds = %184, %186
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN3jxl9BitReaderENS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.286"*, %"class.std::__1::unique_ptr.288"* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.288"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.286"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.286"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.288"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.288"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.288"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.288"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.288"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.288"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.288"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.286", %"class.std::__1::vector.286"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.288"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.288"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %"class.jxl::BitReader"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.288"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.288"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.288"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.288"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !109

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.288"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.288"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.288"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.288"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.288"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.288"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.288"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.288"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.288"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.288"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.288"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.288"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.288"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.288"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.288"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.288"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.288"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.288"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.288"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.288"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.288"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.288"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.288"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.288"*, %"class.std::__1::unique_ptr.288"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.288"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.288"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.288"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.288"*
  %138 = icmp eq %"class.std::__1::unique_ptr.288"* %133, %137
  br i1 %138, label %160, label %139

139:                                              ; preds = %132, %158
  %140 = phi %"class.std::__1::unique_ptr.288"* [ %141, %158 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.288", %"class.std::__1::unique_ptr.288"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %142, align 8
  store %"class.jxl::BitReader"* null, %"class.jxl::BitReader"** %142, align 8
  %144 = icmp eq %"class.jxl::BitReader"* %143, null
  br i1 %144, label %158, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %143, i64 0, i32 6
  %147 = load i8, i8* %146, align 8, !range !9
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %149, label %156

149:                                              ; preds = %145
  %150 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %143, i64 0, i32 4
  %151 = load i8*, i8** %150, align 8
  %152 = icmp eq i8* %151, null
  br i1 %152, label %156, label %153

153:                                              ; preds = %149
  %154 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.88, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.89, i64 0, i64 0)) #12
  %155 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

156:                                              ; preds = %149, %145
  %157 = bitcast %"class.jxl::BitReader"* %143 to i8*
  tail call void @_ZdlPv(i8* %157) #15
  br label %158

158:                                              ; preds = %156, %139
  %159 = icmp eq %"class.std::__1::unique_ptr.288"* %141, %137
  br i1 %159, label %160, label %139

160:                                              ; preds = %158, %132
  %161 = icmp eq i64 %135, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %160
  %163 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %163) #15
  br label %164

164:                                              ; preds = %160, %162
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl12FrameDecoder13SectionStatusENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.319"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.319", %"class.std::__1::vector.319"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.319", %"class.std::__1::vector.319"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.319"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.319"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.319", %"class.std::__1::vector.319"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIsNS_9allocatorIsEEE8__appendEm(%"class.std::__1::vector.141"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i16** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i16** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 1
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i16*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i16, i16* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i16, i16* %13, i64 %18
  %20 = bitcast i16* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2
  %25 = and i64 %24, -2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i16* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %81

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.141"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 1
  %34 = add i64 %33, %1
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.141"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 1
  %41 = icmp ult i64 %40, 4611686018427387903
  %42 = icmp ult i64 %39, %34
  %43 = select i1 %42, i64 %34, i64 %39
  %44 = select i1 %41, i64 %43, i64 9223372036854775807
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %38
  %47 = icmp slt i64 %44, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %46
  tail call void @abort() #14
  unreachable

49:                                               ; preds = %46
  %50 = shl i64 %44, 1
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to i16*
  br label %53

53:                                               ; preds = %49, %38
  %54 = phi i16* [ %52, %49 ], [ null, %38 ]
  %55 = getelementptr inbounds i16, i16* %54, i64 %33
  %56 = getelementptr inbounds i16, i16* %54, i64 %44
  %57 = getelementptr inbounds i16, i16* %55, i64 %1
  %58 = bitcast i16* %55 to i8*
  %59 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %58, i8 0, i64 %59, i1 false) #12
  %60 = ptrtoint i16* %56 to i64
  %61 = ptrtoint i16* %57 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector.141", %"class.std::__1::vector.141"* %0, i64 0, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = load i64, i64* %7, align 8
  %65 = ptrtoint i16* %63 to i64
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 1
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %55, i64 %68
  %70 = ptrtoint i16* %69 to i64
  %71 = icmp sgt i64 %66, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %53
  %73 = bitcast i16* %69 to i8*
  %74 = bitcast i16* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %73, i8* align 2 %74, i64 %66, i1 false) #12
  %75 = load i16*, i16** %62, align 8
  br label %76

76:                                               ; preds = %53, %72
  %77 = phi i16* [ %63, %53 ], [ %75, %72 ]
  store i64 %70, i64* %30, align 8
  store i64 %61, i64* %7, align 8
  store i64 %60, i64* %4, align 8
  %78 = icmp eq i16* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %76
  %80 = bitcast i16* %77 to i8*
  tail call void @_ZdlPv(i8* %80) #15
  br label %81

81:                                               ; preds = %79, %76, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.98"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #12
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.98"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.98"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #14
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #15
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #12
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #12
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #15
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEmRKh(%"class.std::__1::vector.98"*, i64, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %84, label %12

12:                                               ; preds = %3
  %13 = inttoptr i64 %9 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %82, label %16

16:                                               ; preds = %12
  %17 = icmp ult i64 %1, 32
  br i1 %17, label %18, label %20

18:                                               ; preds = %73, %20, %16
  %19 = phi i8* [ %13, %20 ], [ %13, %16 ], [ %27, %73 ]
  br label %77

20:                                               ; preds = %16
  %21 = getelementptr i8, i8* %2, i64 1
  %22 = icmp ugt i8* %21, %13
  %23 = icmp ugt i8* %14, %2
  %24 = and i1 %22, %23
  br i1 %24, label %18, label %25

25:                                               ; preds = %20
  %26 = and i64 %1, -32
  %27 = getelementptr i8, i8* %13, i64 %26
  %28 = add i64 %26, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = sub nuw nsw i64 %30, %31
  %35 = load i8, i8* %2, align 1, !alias.scope !110
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = insertelement <16 x i8> undef, i8 %35, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = load i8, i8* %2, align 1, !alias.scope !110
  %41 = insertelement <16 x i8> undef, i8 %40, i32 0
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i8> undef, i8 %40, i32 0
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %45

45:                                               ; preds = %45, %33
  %46 = phi i64 [ 0, %33 ], [ %57, %45 ]
  %47 = phi i64 [ %34, %33 ], [ %58, %45 ]
  %48 = getelementptr i8, i8* %13, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %37, <16 x i8>* %49, align 1, !alias.scope !113, !noalias !110
  %50 = getelementptr i8, i8* %48, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %51, align 1, !alias.scope !113, !noalias !110
  %52 = or i64 %46, 32
  %53 = getelementptr i8, i8* %13, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %54, align 1, !alias.scope !113, !noalias !110
  %55 = getelementptr i8, i8* %53, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %56, align 1, !alias.scope !113, !noalias !110
  %57 = add i64 %46, 64
  %58 = add i64 %47, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %45, !llvm.loop !115

60:                                               ; preds = %45, %25
  %61 = phi i64 [ 0, %25 ], [ %57, %45 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = getelementptr i8, i8* %13, i64 %61
  %65 = load i8, i8* %2, align 1, !alias.scope !110
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = insertelement <16 x i8> undef, i8 %65, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !113, !noalias !110
  %71 = getelementptr i8, i8* %64, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %72, align 1, !alias.scope !113, !noalias !110
  br label %73

73:                                               ; preds = %60, %63
  %74 = icmp eq i64 %26, %1
  br i1 %74, label %75, label %18

75:                                               ; preds = %77, %73
  %76 = ptrtoint i8* %14 to i64
  br label %82

77:                                               ; preds = %18, %77
  %78 = phi i8* [ %80, %77 ], [ %19, %18 ]
  %79 = load i8, i8* %2, align 1
  store i8 %79, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = icmp eq i8* %80, %14
  br i1 %81, label %75, label %77, !llvm.loop !116

82:                                               ; preds = %12, %75
  %83 = phi i64 [ %76, %75 ], [ %9, %12 ]
  store i64 %83, i64* %8, align 8
  br label %190

84:                                               ; preds = %3
  %85 = bitcast %"class.std::__1::vector.98"* %0 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %9, %86
  %88 = add i64 %87, %1
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %84
  %91 = bitcast %"class.std::__1::vector.98"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #14
  unreachable

92:                                               ; preds = %84
  %93 = sub i64 %6, %86
  %94 = icmp ult i64 %93, 4611686018427387903
  br i1 %94, label %95, label %100

95:                                               ; preds = %92
  %96 = shl i64 %93, 1
  %97 = icmp ult i64 %96, %88
  %98 = select i1 %97, i64 %88, i64 %96
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %103, label %100

100:                                              ; preds = %92, %95
  %101 = phi i64 [ %98, %95 ], [ 9223372036854775807, %92 ]
  %102 = tail call i8* @_Znwm(i64 %101) #15
  br label %103

103:                                              ; preds = %95, %100
  %104 = phi i64 [ %101, %100 ], [ 0, %95 ]
  %105 = phi i8* [ %102, %100 ], [ null, %95 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %87
  %107 = getelementptr inbounds i8, i8* %105, i64 %104
  %108 = getelementptr inbounds i8, i8* %106, i64 %1
  %109 = icmp ult i64 %1, 32
  br i1 %109, label %165, label %110

110:                                              ; preds = %103
  %111 = getelementptr i8, i8* %2, i64 1
  %112 = icmp ult i8* %106, %111
  %113 = icmp ugt i8* %108, %2
  %114 = and i1 %112, %113
  br i1 %114, label %165, label %115

115:                                              ; preds = %110
  %116 = and i64 %1, -32
  %117 = getelementptr i8, i8* %106, i64 %116
  %118 = add i64 %116, -32
  %119 = lshr exact i64 %118, 5
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 1
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %150, label %123

123:                                              ; preds = %115
  %124 = sub nuw nsw i64 %120, %121
  %125 = load i8, i8* %2, align 1, !alias.scope !117
  %126 = insertelement <16 x i8> undef, i8 %125, i32 0
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> zeroinitializer
  %128 = insertelement <16 x i8> undef, i8 %125, i32 0
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> zeroinitializer
  %130 = load i8, i8* %2, align 1, !alias.scope !117
  %131 = insertelement <16 x i8> undef, i8 %130, i32 0
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> zeroinitializer
  %133 = insertelement <16 x i8> undef, i8 %130, i32 0
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %135, %123
  %136 = phi i64 [ 0, %123 ], [ %147, %135 ]
  %137 = phi i64 [ %124, %123 ], [ %148, %135 ]
  %138 = getelementptr i8, i8* %106, i64 %136
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %139, align 1, !alias.scope !120, !noalias !117
  %140 = getelementptr i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %141, align 1, !alias.scope !120, !noalias !117
  %142 = or i64 %136, 32
  %143 = getelementptr i8, i8* %106, i64 %142
  %144 = bitcast i8* %143 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %144, align 1, !alias.scope !120, !noalias !117
  %145 = getelementptr i8, i8* %143, i64 16
  %146 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %146, align 1, !alias.scope !120, !noalias !117
  %147 = add i64 %136, 64
  %148 = add i64 %137, -2
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %135, !llvm.loop !122

150:                                              ; preds = %135, %115
  %151 = phi i64 [ 0, %115 ], [ %147, %135 ]
  %152 = icmp eq i64 %121, 0
  br i1 %152, label %163, label %153

153:                                              ; preds = %150
  %154 = getelementptr i8, i8* %106, i64 %151
  %155 = load i8, i8* %2, align 1, !alias.scope !117
  %156 = insertelement <16 x i8> undef, i8 %155, i32 0
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> zeroinitializer
  %158 = insertelement <16 x i8> undef, i8 %155, i32 0
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> zeroinitializer
  %160 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %160, align 1, !alias.scope !120, !noalias !117
  %161 = getelementptr i8, i8* %154, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %162, align 1, !alias.scope !120, !noalias !117
  br label %163

163:                                              ; preds = %150, %153
  %164 = icmp eq i64 %116, %1
  br i1 %164, label %172, label %165

165:                                              ; preds = %163, %110, %103
  %166 = phi i8* [ %106, %110 ], [ %106, %103 ], [ %117, %163 ]
  br label %167

167:                                              ; preds = %165, %167
  %168 = phi i8* [ %170, %167 ], [ %166, %165 ]
  %169 = load i8, i8* %2, align 1
  store i8 %169, i8* %168, align 1
  %170 = getelementptr inbounds i8, i8* %168, i64 1
  %171 = icmp eq i8* %108, %170
  br i1 %171, label %172, label %167, !llvm.loop !123

172:                                              ; preds = %167, %163
  %173 = ptrtoint i8* %107 to i64
  %174 = ptrtoint i8* %108 to i64
  %175 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = load i64, i64* %8, align 8
  %178 = ptrtoint i8* %176 to i64
  %179 = sub i64 %177, %178
  %180 = sub i64 0, %179
  %181 = getelementptr inbounds i8, i8* %106, i64 %180
  %182 = ptrtoint i8* %181 to i64
  %183 = icmp sgt i64 %179, 0
  br i1 %183, label %184, label %186

184:                                              ; preds = %172
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %176, i64 %179, i1 false) #12
  %185 = load i8*, i8** %175, align 8
  br label %186

186:                                              ; preds = %172, %184
  %187 = phi i8* [ %176, %172 ], [ %185, %184 ]
  store i64 %182, i64* %85, align 8
  store i64 %174, i64* %8, align 8
  store i64 %173, i64* %5, align 8
  %188 = icmp eq i8* %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %186
  tail call void @_ZdlPv(i8* nonnull %187) #15
  br label %190

190:                                              ; preds = %189, %186, %82
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.169"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.jxl::Plane.97"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 5
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 576460752303423487
  br i1 %12, label %13, label %15

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #14
  unreachable

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.jxl::Plane.97"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = ashr exact i64 %19, 5
  %21 = icmp ult i64 %20, 288230376151711743
  br i1 %21, label %22, label %30

22:                                               ; preds = %15
  %23 = ashr exact i64 %19, 4
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %22
  %28 = icmp ugt i64 %25, 576460752303423487
  br i1 %28, label %29, label %30

29:                                               ; preds = %27
  tail call void @abort() #14
  unreachable

30:                                               ; preds = %15, %27
  %31 = phi i64 [ %25, %27 ], [ 576460752303423487, %15 ]
  %32 = shl i64 %31, 5
  %33 = tail call i8* @_Znwm(i64 %32) #15
  %34 = bitcast i8* %33 to %"class.jxl::Plane.97"*
  br label %35

35:                                               ; preds = %22, %30
  %36 = phi i64 [ %31, %30 ], [ 0, %22 ]
  %37 = phi %"class.jxl::Plane.97"* [ %34, %30 ], [ null, %22 ]
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 %10
  %39 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 %36
  %40 = ptrtoint %"class.jxl::Plane.97"* %39 to i64
  %41 = load i64, i64* %1, align 8
  %42 = load i64, i64* %2, align 8
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %38, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %43, i64 %41, i64 %42, i64 4) #12
  %44 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %38, i64 1
  %45 = ptrtoint %"class.jxl::Plane.97"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %46, align 8
  %48 = ptrtoint %"class.jxl::Plane.97"* %47 to i64
  %49 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %4, align 8
  %50 = icmp eq %"class.jxl::Plane.97"* %49, %47
  br i1 %50, label %101, label %51

51:                                               ; preds = %35
  %52 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %49, i64 -1, i32 0, i32 0
  %53 = ptrtoint i32* %52 to i64
  %54 = sub i64 %53, %48
  %55 = and i64 %54, 32
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %68

57:                                               ; preds = %51
  %58 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %38, i64 -1
  %59 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %49, i64 -1
  %60 = bitcast %"class.jxl::Plane.97"* %58 to i8*
  %61 = bitcast %"class.jxl::Plane.97"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false) #12
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %38, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %49, i64 -1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = bitcast %"class.std::__1::unique_ptr"* %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i8* null, i8** %64, align 8
  %67 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  store i64 %66, i64* %67, align 8
  br label %68

68:                                               ; preds = %57, %51
  %69 = phi %"class.jxl::Plane.97"* [ undef, %51 ], [ %58, %57 ]
  %70 = phi %"class.jxl::Plane.97"* [ %38, %51 ], [ %58, %57 ]
  %71 = phi %"class.jxl::Plane.97"* [ %49, %51 ], [ %59, %57 ]
  %72 = icmp ult i64 %54, 32
  br i1 %72, label %97, label %73

73:                                               ; preds = %68, %73
  %74 = phi %"class.jxl::Plane.97"* [ %86, %73 ], [ %70, %68 ]
  %75 = phi %"class.jxl::Plane.97"* [ %87, %73 ], [ %71, %68 ]
  %76 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %74, i64 -1
  %77 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %75, i64 -1
  %78 = bitcast %"class.jxl::Plane.97"* %76 to i8*
  %79 = bitcast %"class.jxl::Plane.97"* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #12
  %80 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %74, i64 -1, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %75, i64 -1, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %74, i64 -2
  %87 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %75, i64 -2
  %88 = bitcast %"class.jxl::Plane.97"* %86 to i8*
  %89 = bitcast %"class.jxl::Plane.97"* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 24, i1 false) #12
  %90 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %74, i64 -2, i32 0, i32 5
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %75, i64 -2, i32 0, i32 5
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %91, i64 0, i32 0, i32 0, i32 0
  %93 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i8* null, i8** %92, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %90 to i64*
  store i64 %94, i64* %95, align 8
  %96 = icmp eq %"class.jxl::Plane.97"* %87, %47
  br i1 %96, label %97, label %73

97:                                               ; preds = %73, %68
  %98 = phi %"class.jxl::Plane.97"* [ %69, %68 ], [ %86, %73 ]
  %99 = load i64, i64* %7, align 8
  %100 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %4, align 8
  br label %101

101:                                              ; preds = %35, %97
  %102 = phi %"class.jxl::Plane.97"* [ %100, %97 ], [ %47, %35 ]
  %103 = phi %"class.jxl::Plane.97"* [ %98, %97 ], [ %38, %35 ]
  %104 = phi i64 [ %99, %97 ], [ %48, %35 ]
  %105 = ptrtoint %"class.jxl::Plane.97"* %103 to i64
  store i64 %105, i64* %7, align 8
  store i64 %45, i64* %5, align 8
  store i64 %40, i64* %17, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Plane.97"*
  %107 = icmp eq %"class.jxl::Plane.97"* %102, %106
  br i1 %107, label %117, label %108

108:                                              ; preds = %101, %115
  %109 = phi %"class.jxl::Plane.97"* [ %110, %115 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %109, i64 -1
  %111 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %109, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  store i8* null, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %108
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %112) #12
  br label %115

115:                                              ; preds = %114, %108
  %116 = icmp eq %"class.jxl::Plane.97"* %110, %106
  br i1 %116, label %117, label %108

117:                                              ; preds = %115, %101
  %118 = icmp eq i64 %104, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %117
  %120 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %120) #15
  br label %121

121:                                              ; preds = %117, %119
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl7ANSCodeENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.177"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::ANSCode"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::ANSCode"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 144
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %27, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::ANSCode"*
  %14 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %25, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::ANSCode"* %14 to i64
  br label %25

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::ANSCode"* [ %23, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %19, i64 0, i32 6
  %21 = bitcast %"struct.jxl::ANSCode"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 144, i1 false) #12
  tail call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %20) #12
  %22 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %19, i64 0, i32 7
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %19, i64 1
  %24 = icmp eq %"struct.jxl::ANSCode"* %23, %14
  br i1 %24, label %16, label %18

25:                                               ; preds = %12, %16
  %26 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %26, i64* %7, align 8
  br label %167

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 2
  %29 = bitcast %"class.std::__1::__compressed_pair.200"* %28 to %"class.std::__1::allocator.203"*
  %30 = bitcast %"class.std::__1::vector.177"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = sdiv exact i64 %32, 144
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 128102389400760775
  br i1 %35, label %36, label %38

36:                                               ; preds = %27
  %37 = bitcast %"class.std::__1::vector.177"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %27
  %39 = sub i64 %5, %31
  %40 = sdiv exact i64 %39, 144
  %41 = icmp ult i64 %40, 64051194700380387
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 128102389400760775, %38 ]
  %49 = mul i64 %48, 144
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %"struct.jxl::ANSCode"*
  br label %52

52:                                               ; preds = %42, %47
  %53 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %54 = phi %"struct.jxl::ANSCode"* [ %51, %47 ], [ null, %42 ]
  %55 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %54, i64 %33
  %56 = ptrtoint %"struct.jxl::ANSCode"* %55 to i64
  %57 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %54, i64 %53
  %58 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %55, i64 %1
  br label %59

59:                                               ; preds = %52, %59
  %60 = phi %"struct.jxl::ANSCode"* [ %65, %59 ], [ %55, %52 ]
  %61 = phi i64 [ %66, %59 ], [ %56, %52 ]
  %62 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %60, i64 0, i32 6
  %63 = inttoptr i64 %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 144, i1 false) #12
  tail call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %62) #12
  %64 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %60, i64 0, i32 7
  store i64 0, i64* %64, align 8
  %65 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %60, i64 1
  %66 = ptrtoint %"struct.jxl::ANSCode"* %65 to i64
  %67 = icmp eq %"struct.jxl::ANSCode"* %58, %65
  br i1 %67, label %68, label %59

68:                                               ; preds = %59
  %69 = ptrtoint %"struct.jxl::ANSCode"* %57 to i64
  %70 = ptrtoint %"struct.jxl::ANSCode"* %58 to i64
  %71 = getelementptr inbounds %"class.std::__1::vector.177", %"class.std::__1::vector.177"* %0, i64 0, i32 0, i32 0
  %72 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %71, align 8
  %73 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %6, align 8
  %74 = icmp eq %"struct.jxl::ANSCode"* %73, %72
  br i1 %74, label %75, label %77

75:                                               ; preds = %68
  %76 = ptrtoint %"struct.jxl::ANSCode"* %72 to i64
  br label %153

77:                                               ; preds = %68, %77
  %78 = phi %"struct.jxl::ANSCode"* [ %80, %77 ], [ %55, %68 ]
  %79 = phi %"struct.jxl::ANSCode"* [ %81, %77 ], [ %73, %68 ]
  %80 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1
  %81 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1
  %82 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %81, i64 0, i32 0, i32 0, i32 0, i32 0
  %83 = bitcast %"struct.jxl::ANSCode"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = bitcast %"struct.jxl::ANSCode"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 1
  %87 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 1
  %88 = bitcast %"class.std::__1::vector.179"* %86 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 24, i1 false) #12
  %89 = bitcast %"class.std::__1::vector.179"* %87 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.std::__1::vector.179"* %86 to i64*
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 1, i32 0, i32 1
  %93 = bitcast %"struct.jxl::HuffmanDecodingData"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 1, i32 0, i32 1
  %96 = bitcast %"struct.jxl::HuffmanDecodingData"** %95 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast %"struct.jxl::HuffmanDecodingData"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast %"struct.jxl::HuffmanDecodingData"** %100 to i64*
  store i64 %99, i64* %101, align 8
  %102 = bitcast %"class.std::__1::vector.179"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #12
  %103 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 2
  %104 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 2
  %105 = bitcast %"class.std::__1::vector.193"* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 24, i1 false) #12
  %106 = bitcast %"class.std::__1::vector.193"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.std::__1::vector.193"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 2, i32 0, i32 1
  %110 = bitcast %"struct.jxl::HybridUintConfig"** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 2, i32 0, i32 1
  %113 = bitcast %"struct.jxl::HybridUintConfig"** %112 to i64*
  store i64 %111, i64* %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %115 = bitcast %"struct.jxl::HybridUintConfig"** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %118 = bitcast %"struct.jxl::HybridUintConfig"** %117 to i64*
  store i64 %116, i64* %118, align 8
  %119 = bitcast %"class.std::__1::vector.193"* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 24, i1 false) #12
  %120 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 3
  %121 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 3
  %122 = bitcast %"class.std::__1::vector.47"* %120 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 24, i1 false) #12
  %123 = bitcast %"class.std::__1::vector.47"* %121 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.std::__1::vector.47"* %120 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 3, i32 0, i32 1
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 3, i32 0, i32 1
  %130 = bitcast i32** %129 to i64*
  store i64 %128, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 3, i32 0, i32 2, i32 0, i32 0
  %135 = bitcast i32** %134 to i64*
  store i64 %133, i64* %135, align 8
  %136 = bitcast %"class.std::__1::vector.47"* %121 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %136, i8 0, i64 24, i1 false) #12
  %137 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 4
  %138 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 4
  %139 = bitcast i8* %138 to i16*
  %140 = bitcast i8* %137 to i16*
  %141 = load i16, i16* %139, align 8
  store i16 %141, i16* %140, align 8
  %142 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 6, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl10LZ77ParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %142, align 8
  %143 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 6, i32 1
  %144 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 6, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 40, i1 false) #12
  %145 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %78, i64 -1, i32 7
  %146 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %79, i64 -1, i32 7
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %145, align 8
  %148 = icmp eq %"struct.jxl::ANSCode"* %81, %72
  br i1 %148, label %149, label %77

149:                                              ; preds = %77
  %150 = ptrtoint %"struct.jxl::ANSCode"* %80 to i64
  %151 = load i64, i64* %30, align 8
  %152 = load %"struct.jxl::ANSCode"*, %"struct.jxl::ANSCode"** %6, align 8
  br label %153

153:                                              ; preds = %75, %149
  %154 = phi %"struct.jxl::ANSCode"* [ %72, %75 ], [ %152, %149 ]
  %155 = phi i64 [ %56, %75 ], [ %150, %149 ]
  %156 = phi i64 [ %76, %75 ], [ %151, %149 ]
  store i64 %155, i64* %30, align 8
  store i64 %70, i64* %7, align 8
  store i64 %69, i64* %4, align 8
  %157 = inttoptr i64 %156 to %"struct.jxl::ANSCode"*
  %158 = icmp eq %"struct.jxl::ANSCode"* %154, %157
  br i1 %158, label %163, label %159

159:                                              ; preds = %153, %159
  %160 = phi %"struct.jxl::ANSCode"* [ %161, %159 ], [ %154, %153 ]
  %161 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %160, i64 -1
  tail call void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.203"* %29, %"struct.jxl::ANSCode"* %161) #12
  %162 = icmp eq %"struct.jxl::ANSCode"* %161, %157
  br i1 %162, label %163, label %159

163:                                              ; preds = %159, %153
  %164 = icmp eq i64 %156, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %163
  %166 = inttoptr i64 %156 to i8*
  tail call void @_ZdlPv(i8* %166) #15
  br label %167

167:                                              ; preds = %165, %163, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl7ANSCodeEE7destroyEPS2_(%"class.std::__1::allocator.203"*, %"struct.jxl::ANSCode"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #15
  br label %11

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 0
  %13 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %12, align 8
  %14 = icmp eq %"struct.jxl::HybridUintConfig"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint %"struct.jxl::HybridUintConfig"* %13 to i64
  %17 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 2, i32 0, i32 1
  %18 = bitcast %"struct.jxl::HybridUintConfig"** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast %"struct.jxl::HybridUintConfig"* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #15
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1
  %22 = getelementptr inbounds %"class.std::__1::vector.179", %"class.std::__1::vector.179"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %22, align 8
  %24 = icmp eq %"struct.jxl::HuffmanDecodingData"* %23, null
  br i1 %24, label %48, label %25

25:                                               ; preds = %20
  %26 = bitcast %"struct.jxl::HuffmanDecodingData"* %23 to i8*
  %27 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 1, i32 0, i32 1
  %28 = load %"struct.jxl::HuffmanDecodingData"*, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  %29 = icmp eq %"struct.jxl::HuffmanDecodingData"* %28, %23
  br i1 %29, label %46, label %30

30:                                               ; preds = %25, %41
  %31 = phi %"struct.jxl::HuffmanDecodingData"* [ %32, %41 ], [ %28, %25 ]
  %32 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1
  %33 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %32, i64 0, i32 0, i32 0, i32 0
  %34 = load %"struct.jxl::HuffmanCode"*, %"struct.jxl::HuffmanCode"** %33, align 8
  %35 = icmp eq %"struct.jxl::HuffmanCode"* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = ptrtoint %"struct.jxl::HuffmanCode"* %34 to i64
  %38 = getelementptr inbounds %"struct.jxl::HuffmanDecodingData", %"struct.jxl::HuffmanDecodingData"* %31, i64 -1, i32 0, i32 0, i32 1
  %39 = bitcast %"struct.jxl::HuffmanCode"** %38 to i64*
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.jxl::HuffmanCode", %"struct.jxl::HuffmanCode"* %34, i64 0, i32 0
  tail call void @_ZdlPv(i8* %40) #15
  br label %41

41:                                               ; preds = %36, %30
  %42 = icmp eq %"struct.jxl::HuffmanDecodingData"* %32, %23
  br i1 %42, label %43, label %30

43:                                               ; preds = %41
  %44 = bitcast %"class.std::__1::vector.179"* %21 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %25
  %47 = phi i8* [ %45, %43 ], [ %26, %25 ]
  store %"struct.jxl::HuffmanDecodingData"* %23, %"struct.jxl::HuffmanDecodingData"** %27, align 8
  tail call void @_ZdlPv(i8* %47) #15
  br label %48

48:                                               ; preds = %46, %20
  %49 = getelementptr inbounds %"struct.jxl::ANSCode", %"struct.jxl::ANSCode"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  store i8* null, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %50) #12
  br label %53

53:                                               ; preds = %48, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.108"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.98"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.98"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.98"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"class.std::__1::vector.98"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %123

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.108"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.108"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #14
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to %"class.std::__1::vector.98"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.98"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.98"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.98"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #12
  %64 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.98"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.98"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.98"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.98"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.108", %"class.std::__1::vector.108"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %70, align 8
  %72 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.98"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.98"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.98"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.98"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.98"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #12
  %82 = bitcast %"class.std::__1::vector.98"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.98"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.98"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = icmp eq %"class.std::__1::vector.98"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.98"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.98"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.98"*
  %106 = icmp eq %"class.std::__1::vector.98"* %102, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %101, %117
  %108 = phi %"class.std::__1::vector.98"* [ %109, %117 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #15
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector.98"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %101
  %120 = icmp eq i64 %104, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %122) #15
  br label %123

123:                                              ; preds = %121, %119, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIsEC2Emm(%"class.jxl::ACImageT"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.330", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIsEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.330"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #12
  %8 = bitcast %"class.jxl::Image3.330"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 2) #12
  %10 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 2) #12
  %11 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 2) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #12
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #12
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.331"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.331"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #12
  %27 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #12
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.331"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.331"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #12
  %54 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #12
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #12
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.330", %"class.jxl::Image3.330"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #12
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIsED2Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIsEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #12
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #12
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIsED0Ev(%"class.jxl::ACImageT"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIsEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #12
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #12
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIsE4TypeEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIsE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #12
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = bitcast i8* %13 to i16*
  %18 = getelementptr inbounds i16, i16* %17, i64 %3
  %19 = bitcast i16* %18 to i32*
  ret i32* %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIsE8PlaneRowEmmm(%"class.jxl::ACImageT"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #12
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = bitcast i8* %13 to i16*
  %18 = getelementptr inbounds i16, i16* %17, i64 %3
  %19 = bitcast i16* %18 to i32*
  ret i32* %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIsE12PixelsPerRowEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 1
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIsE8ZeroFillEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #12
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #12
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #12
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #12
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #12
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #12
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #12
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIsE13ZeroFillPlaneEm(%"class.jxl::ACImageT"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #12
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #12
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIsE7IsEmptyEv(%"class.jxl::ACImageT"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT", %"class.jxl::ACImageT"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiEC2Emm(%"class.jxl::ACImageT.338"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.jxl::Image3.276", align 8
  %5 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1
  %7 = bitcast %"class.jxl::Image3.276"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 96, i1 false) #12
  %8 = bitcast %"class.jxl::Image3.276"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %9, i64 %1, i64 %2, i64 4) #12
  %10 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %10, i64 %1, i64 %2, i64 4) #12
  %11 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %11, i64 %1, i64 %2, i64 4) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* nonnull align 8 %8, i64 24, i1 false) #12
  %12 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5
  %13 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %12 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %3
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #12
  br label %22

22:                                               ; preds = %21, %3
  %23 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1
  %24 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.60"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.60"* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #12
  %27 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #12
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2
  %39 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.60"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.60"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %37
  %52 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %52, align 8
  br label %59

53:                                               ; preds = %37
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #12
  %54 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %56, align 8
  %57 = icmp eq i8* %55, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %55) #12
  br label %59

59:                                               ; preds = %51, %58, %53
  %60 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  store i8* null, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %61) #12
  br label %64

64:                                               ; preds = %63, %59
  %65 = getelementptr inbounds %"class.jxl::Image3.276", %"class.jxl::Image3.276"* %4, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #12
  br label %69

69:                                               ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %8) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED2Ev(%"class.jxl::ACImageT.338"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #12
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #12
  br label %17

17:                                               ; preds = %12, %16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiED0Ev(%"class.jxl::ACImageT.338"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN3jxl8ACImageTIiEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %4) #12
  br label %7

7:                                                ; preds = %6, %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  store i8* null, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %9) #12
  br label %12

12:                                               ; preds = %11, %7
  %13 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  store i8* null, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %14) #12
  br label %17

17:                                               ; preds = %12, %16
  %18 = bitcast %"class.jxl::ACImageT.338"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3jxl8ACImageTIiE4TypeEv(%"class.jxl::ACImageT.338"*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZN3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT.338"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #12
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNK3jxl8ACImageTIiE8PlaneRowEmmm(%"class.jxl::ACImageT.338"*, i64, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = mul i64 %6, %2
  %8 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = and i64 %10, 63
  %12 = icmp eq i64 %11, 0
  tail call void @llvm.assume(i1 %12) #12
  %13 = getelementptr inbounds i8, i8* %9, i64 %7
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = bitcast i8* %13 to i32*
  %18 = getelementptr inbounds i32, i32* %17, i64 %3
  ret i32* %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK3jxl8ACImageTIiE12PixelsPerRowEv(%"class.jxl::ACImageT.338"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 2
  ret i64 %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE8ZeroFillEv(%"class.jxl::ACImageT.338"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 4
  %4 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %74, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i32 %27, 0
  br i1 %10, label %74, label %30

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %26, %11 ]
  %13 = load i64, i64* %3, align 8
  %14 = mul i64 %13, %12
  %15 = load i8*, i8** %8, align 8
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = getelementptr inbounds i8, i8* %15, i64 %14
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 63
  %22 = icmp eq i64 %21, 0
  tail call void @llvm.assume(i1 %22) #12
  %23 = load i32, i32* %4, align 8
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %19, i8 0, i64 %25, i1 false) #12
  %26 = add nuw nsw i64 %12, 1
  %27 = load i32, i32* %2, align 4
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %11, label %9

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %47, %32 ]
  %34 = load i64, i64* %3, align 8
  %35 = mul i64 %34, %33
  %36 = load i8*, i8** %31, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = and i64 %37, 63
  %39 = icmp eq i64 %38, 0
  tail call void @llvm.assume(i1 %39) #12
  %40 = getelementptr inbounds i8, i8* %36, i64 %35
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #12
  %44 = load i32, i32* %4, align 8
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %40, i8 0, i64 %46, i1 false) #12
  %47 = add nuw nsw i64 %33, 1
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %32, label %51

51:                                               ; preds = %32
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %70, %55 ]
  %57 = load i64, i64* %3, align 8
  %58 = mul i64 %57, %56
  %59 = load i8*, i8** %54, align 8
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds i8, i8* %59, i64 %58
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #12
  %67 = load i32, i32* %4, align 8
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %63, i8 0, i64 %69, i1 false) #12
  %70 = add nuw nsw i64 %56, 1
  %71 = load i32, i32* %2, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %70, %72
  br i1 %73, label %55, label %74

74:                                               ; preds = %55, %1, %9, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8ACImageTIiE13ZeroFillPlaneEm(%"class.jxl::ACImageT.338"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %37, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 %1, i32 0, i32 4
  %13 = load i8*, i8** %11, align 8
  %14 = ptrtoint i8* %13 to i64
  %15 = and i64 %14, 63
  %16 = icmp eq i64 %15, 0
  tail call void @llvm.assume(i1 %16) #12
  %17 = zext i32 %4 to i64
  %18 = shl nuw nsw i64 %17, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %13, i8 0, i64 %18, i1 false) #12
  %19 = load i32, i32* %7, align 4
  %20 = icmp ugt i32 %19, 1
  br i1 %20, label %21, label %37

21:                                               ; preds = %10, %21
  %22 = phi i64 [ %33, %21 ], [ 1, %10 ]
  %23 = load i32, i32* %3, align 8
  %24 = load i8*, i8** %11, align 8
  %25 = load i64, i64* %12, align 8
  %26 = mul i64 %25, %22
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = zext i32 %23 to i64
  %32 = shl nuw nsw i64 %31, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %27, i8 0, i64 %32, i1 false) #12
  %33 = add nuw nsw i64 %22, 1
  %34 = load i32, i32* %7, align 4
  %35 = zext i32 %34 to i64
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %21, label %37

37:                                               ; preds = %21, %10, %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3jxl8ACImageTIiE7IsEmptyEv(%"class.jxl::ACImageT.338"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.jxl::ACImageT.338", %"class.jxl::ACImageT.338"* %0, i64 0, i32 1, i32 0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.23"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i64*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i64, i64* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i64, i64* %13, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint i64* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.23"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.23"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i64*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i64* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 %33
  %59 = getelementptr inbounds i64, i64* %57, i64 %56
  %60 = getelementptr inbounds i64, i64* %58, i64 %1
  %61 = bitcast i64* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint i64* %59 to i64
  %64 = ptrtoint i64* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %0, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i64* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i64, i64* %58, i64 %71
  %73 = ptrtoint i64* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i64* %72 to i8*
  %77 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #12
  %78 = load i64*, i64** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i64* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i64* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12FrameDecoder15ProcessSectionsEPKNS4_11SectionInfoEmPNS4_13SectionStatusEE3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 1
  %9 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %9, i64 0, i32 0, i32 0
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds i64, i64* %11, i64 %7
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 2
  %15 = load i64*, i64** %14, align 8
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %42, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  %20 = load %"class.jxl::FrameDecoder"*, %"class.jxl::FrameDecoder"** %19, align 8
  %21 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 3
  %22 = load %"struct.jxl::FrameDecoder::SectionInfo"**, %"struct.jxl::FrameDecoder::SectionInfo"*** %21, align 8
  %23 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %23, i64 %13, i32 0
  %25 = load %"class.jxl::BitReader"*, %"class.jxl::BitReader"** %24, align 8
  %26 = tail call i32 @_ZN3jxl12FrameDecoder14ProcessDCGroupEmPNS_9BitReaderE(%"class.jxl::FrameDecoder"* %20, i64 %7, %"class.jxl::BitReader"* %25) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 5
  %30 = load %"struct.std::__1::atomic.350"*, %"struct.std::__1::atomic.350"** %29, align 8
  %31 = getelementptr inbounds %"struct.std::__1::atomic.350", %"struct.std::__1::atomic.350"* %30, i64 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 1, i8* %31 seq_cst, align 1
  br label %42

32:                                               ; preds = %18
  %33 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 4
  %34 = load i32**, i32*** %33, align 8
  %35 = load i32*, i32** %34, align 8
  %36 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %8, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %36, i64 0, i32 0, i32 0
  %38 = load i64*, i64** %37, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 %7
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds i32, i32* %35, i64 %40
  store i32 0, i32* %41, align 4
  br label %42

42:                                               ; preds = %3, %28, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.355**
  %4 = load %class.anon.355*, %class.anon.355** %3, align 8
  %5 = getelementptr inbounds %class.anon.355, %class.anon.355* %4, i64 0, i32 0
  %6 = load %"class.jxl::FrameDecoder"*, %"class.jxl::FrameDecoder"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 14
  %8 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 14, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.98"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = icmp ult i64 %13, %1
  %15 = select i1 %14, i64 %13, i64 %1
  %16 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 22
  %17 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 22, i32 0, i32 1
  %18 = bitcast %"struct.jxl::GroupDecCache"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector.274"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = sdiv exact i64 %22, 1168
  %24 = icmp ugt i64 %15, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = sub i64 %15, %23
  tail call void @_ZNSt3__16vectorIN3jxl13GroupDecCacheENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.274"* %16, i64 %26) #12
  br label %27

27:                                               ; preds = %2, %25
  %28 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 0
  %29 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %28, align 8
  tail call void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"* %29, i64 %15) #12
  %30 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 24
  %31 = zext i1 %14 to i8
  store i8 %31, i8* %30, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder15ProcessSectionsEPKNS2_11SectionInfoEmPNS2_13SectionStatusEE3$_1ZNS2_15ProcessSectionsES5_mS7_E3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca [11 x %"class.jxl::BitReader"*], align 16
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.356**
  %7 = load %class.anon.356*, %class.anon.356** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 0
  %10 = load %"class.jxl::FrameDecoder"*, %"class.jxl::FrameDecoder"** %9, align 8
  %11 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 2
  %12 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %12, i64 0, i32 0, i32 0
  %14 = load i64*, i64** %13, align 8
  %15 = getelementptr inbounds i64, i64* %14, i64 %8
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %106, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 14, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %8
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = bitcast [11 x %"class.jxl::BitReader"*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %24) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 88, i1 false) #12
  %25 = load i64*, i64** %13, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 %8
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %36, label %29

29:                                               ; preds = %18
  %30 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 3
  %31 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 1
  %32 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 4
  %33 = load %"class.std::__1::vector.343"*, %"class.std::__1::vector.343"** %31, align 8
  %34 = load i64*, i64** %30, align 8
  %35 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %33, i64 0, i32 0, i32 0
  br label %55

36:                                               ; preds = %68, %18
  %37 = phi i64 [ 0, %18 ], [ %79, %68 ]
  %38 = getelementptr inbounds [11 x %"class.jxl::BitReader"*], [11 x %"class.jxl::BitReader"*]* %4, i64 0, i64 0
  %39 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 24
  %40 = load i8, i8* %39, align 8, !range !9
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i64 %2, i64 %8
  %43 = call i32 @_ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb(%"class.jxl::FrameDecoder"* %10, i64 %8, %"class.jxl::BitReader"** nonnull %38, i64 %37, i64 %42, i1 zeroext false, i1 zeroext false) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %81

45:                                               ; preds = %36
  %46 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %11, align 8
  %47 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %46, i64 0, i32 0, i32 0
  %48 = load i64*, i64** %47, align 8
  %49 = getelementptr inbounds i64, i64* %48, i64 %8
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %105, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 5
  %54 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 1
  br label %85

55:                                               ; preds = %68, %29
  %56 = phi i64 [ 0, %29 ], [ %76, %68 ]
  %57 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %35, align 8
  %58 = add i64 %56, %23
  %59 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %57, i64 %8, i32 0, i32 0
  %60 = load i64*, i64** %59, align 8
  %61 = getelementptr inbounds i64, i64* %60, i64 %58
  %62 = load i64, i64* %61, align 8
  %63 = load i64, i64* %34, align 8
  %64 = icmp eq i64 %62, %63
  br i1 %64, label %65, label %68

65:                                               ; preds = %55
  %66 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 737, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.96, i64 0, i64 0)) #12
  %67 = tail call zeroext i1 @_ZN3jxl5AbortEv() #14
  unreachable

68:                                               ; preds = %55
  %69 = load %"struct.jxl::FrameDecoder::SectionInfo"**, %"struct.jxl::FrameDecoder::SectionInfo"*** %32, align 8
  %70 = load %"struct.jxl::FrameDecoder::SectionInfo"*, %"struct.jxl::FrameDecoder::SectionInfo"** %69, align 8
  %71 = getelementptr inbounds %"struct.jxl::FrameDecoder::SectionInfo", %"struct.jxl::FrameDecoder::SectionInfo"* %70, i64 %62, i32 0
  %72 = bitcast %"class.jxl::BitReader"** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds [11 x %"class.jxl::BitReader"*], [11 x %"class.jxl::BitReader"*]* %4, i64 0, i64 %56
  %75 = bitcast %"class.jxl::BitReader"** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = add nuw i64 %56, 1
  %77 = load i64*, i64** %13, align 8
  %78 = getelementptr inbounds i64, i64* %77, i64 %8
  %79 = load i64, i64* %78, align 8
  %80 = icmp ult i64 %76, %79
  br i1 %80, label %55, label %36

81:                                               ; preds = %36
  %82 = getelementptr inbounds %class.anon.356, %class.anon.356* %7, i64 0, i32 6
  %83 = load %"struct.std::__1::atomic.350"*, %"struct.std::__1::atomic.350"** %82, align 8
  %84 = getelementptr inbounds %"struct.std::__1::atomic.350", %"struct.std::__1::atomic.350"* %83, i64 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 1, i8* %84 seq_cst, align 1
  br label %105

85:                                               ; preds = %85, %52
  %86 = phi i64 [ 0, %52 ], [ %98, %85 ]
  %87 = load i32**, i32*** %53, align 8
  %88 = load i32*, i32** %87, align 8
  %89 = load %"class.std::__1::vector.343"*, %"class.std::__1::vector.343"** %54, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.343", %"class.std::__1::vector.343"* %89, i64 0, i32 0, i32 0
  %91 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %90, align 8
  %92 = add i64 %86, %23
  %93 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %91, i64 %8, i32 0, i32 0
  %94 = load i64*, i64** %93, align 8
  %95 = getelementptr inbounds i64, i64* %94, i64 %92
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds i32, i32* %88, i64 %96
  store i32 0, i32* %97, align 4
  %98 = add nuw i64 %86, 1
  %99 = load %"class.std::__1::vector.23"*, %"class.std::__1::vector.23"** %11, align 8
  %100 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %99, i64 0, i32 0, i32 0
  %101 = load i64*, i64** %100, align 8
  %102 = getelementptr inbounds i64, i64* %101, i64 %8
  %103 = load i64, i64* %102, align 8
  %104 = icmp ult i64 %98, %103
  br i1 %104, label %85, label %105

105:                                              ; preds = %85, %81, %45
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %24) #12
  br label %106

106:                                              ; preds = %3, %105
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca float, align 4
  %14 = alloca %"class.jxl::Plane.97", align 8
  %15 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 1
  %16 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 11
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %16, i64 0, i32 1, i32 26, i32 2
  %22 = load i8, i8* %21, align 1, !range !9
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %20, %2
  %25 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24
  %26 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 24, i32 0, i32 1
  %27 = bitcast %"class.jxl::FilterPipeline"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.225"* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = sdiv exact i64 %31, 832
  %33 = icmp ult i64 %32, %1
  br i1 %33, label %34, label %36

34:                                               ; preds = %24
  %35 = sub i64 %1, %32
  tail call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.225"* %25, i64 %35) #12
  br label %36

36:                                               ; preds = %34, %20, %24
  %37 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27
  %38 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 1
  %39 = bitcast %"class.jxl::Image3"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector.239"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = sdiv exact i64 %43, 96
  %45 = icmp ult i64 %44, %1
  br i1 %45, label %46, label %51

46:                                               ; preds = %36
  %47 = inttoptr i64 %40 to %"class.jxl::Image3"*
  %48 = bitcast i64* %3 to i8*
  %49 = bitcast i64* %4 to i8*
  %50 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 27, i32 0, i32 2, i32 0, i32 0
  br label %56

51:                                               ; preds = %68, %36
  %52 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %53 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %52, i64 0, i32 1, i32 15
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %122, label %73

56:                                               ; preds = %71, %46
  %57 = phi %"class.jxl::Image3"* [ %47, %46 ], [ %72, %71 ]
  %58 = phi i64 [ %44, %46 ], [ %69, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #12
  store i64 368, i64* %3, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #12
  store i64 324, i64* %4, align 8
  %59 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %50, align 8
  %60 = icmp ult %"class.jxl::Image3"* %57, %59
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %62, i64 368, i64 324, i64 4) #12
  %63 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %63, i64 368, i64 324, i64 4) #12
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %64, i64 368, i64 324, i64 4) #12
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %57, i64 1
  %66 = ptrtoint %"class.jxl::Image3"* %65 to i64
  store i64 %66, i64* %39, align 8
  br label %68

67:                                               ; preds = %56
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"* %37, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %4) #12
  br label %68

68:                                               ; preds = %61, %67
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #12
  %69 = add i64 %58, 1
  %70 = icmp eq i64 %69, %1
  br i1 %70, label %51, label %71

71:                                               ; preds = %68
  %72 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %38, align 8
  br label %56

73:                                               ; preds = %51
  %74 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29
  %75 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 1
  %76 = bitcast %"class.jxl::Image3"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %"class.std::__1::vector.239"* %74 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = sub i64 %77, %79
  %81 = sdiv exact i64 %80, 96
  %82 = icmp ult i64 %81, %1
  br i1 %82, label %83, label %122

83:                                               ; preds = %73
  %84 = inttoptr i64 %77 to %"class.jxl::Image3"*
  %85 = bitcast i64* %5 to i8*
  %86 = bitcast i64* %6 to i8*
  %87 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 29, i32 0, i32 2, i32 0, i32 0
  %88 = bitcast i64* %7 to i8*
  %89 = bitcast i64* %8 to i8*
  %90 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 1
  %91 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28, i32 0, i32 2, i32 0, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 28
  %93 = bitcast %"class.jxl::Image3"** %90 to i64*
  br label %94

94:                                               ; preds = %120, %83
  %95 = phi %"class.jxl::Image3"* [ %84, %83 ], [ %121, %120 ]
  %96 = phi i64 [ %81, %83 ], [ %118, %120 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #12
  store i64 304, i64* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #12
  store i64 292, i64* %6, align 8
  %97 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %87, align 8
  %98 = icmp ult %"class.jxl::Image3"* %95, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %100, i64 304, i64 292, i64 4) #12
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %101, i64 304, i64 292, i64 4) #12
  %102 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %102, i64 304, i64 292, i64 4) #12
  %103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %95, i64 1
  %104 = ptrtoint %"class.jxl::Image3"* %103 to i64
  store i64 %104, i64* %76, align 8
  br label %106

105:                                              ; preds = %94
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"* %74, i64* nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %6) #12
  br label %106

106:                                              ; preds = %99, %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #12
  store i64 304, i64* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #12
  store i64 292, i64* %8, align 8
  %107 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %90, align 8
  %108 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %91, align 8
  %109 = icmp ult %"class.jxl::Image3"* %107, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %111, i64 304, i64 292, i64 4) #12
  %112 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %112, i64 304, i64 292, i64 4) #12
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %113, i64 304, i64 292, i64 4) #12
  %114 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %107, i64 1
  %115 = ptrtoint %"class.jxl::Image3"* %114 to i64
  store i64 %115, i64* %93, align 8
  br label %117

116:                                              ; preds = %106
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"* %92, i64* nonnull dereferenceable(8) %7, i64* nonnull dereferenceable(8) %8) #12
  br label %117

117:                                              ; preds = %110, %116
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #12
  %118 = add i64 %96, 1
  %119 = icmp eq i64 %118, %1
  br i1 %119, label %122, label %120

120:                                              ; preds = %117
  %121 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %75, align 8
  br label %94

122:                                              ; preds = %117, %73, %51
  %123 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32
  %124 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 1
  %125 = bitcast %"class.jxl::Image3"** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.std::__1::vector.239"* %123 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %126, %128
  %130 = sdiv exact i64 %129, 96
  %131 = icmp ult i64 %130, %1
  br i1 %131, label %132, label %137

132:                                              ; preds = %122
  %133 = inttoptr i64 %126 to %"class.jxl::Image3"*
  %134 = bitcast i64* %9 to i8*
  %135 = bitcast i64* %10 to i8*
  %136 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 32, i32 0, i32 2, i32 0, i32 0
  br label %141

137:                                              ; preds = %153, %122
  %138 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 14
  %139 = load i8*, i8** %138, align 8
  %140 = icmp eq i8* %139, null
  br i1 %140, label %158, label %164

141:                                              ; preds = %156, %132
  %142 = phi %"class.jxl::Image3"* [ %133, %132 ], [ %157, %156 ]
  %143 = phi i64 [ %130, %132 ], [ %154, %156 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #12
  store i64 336, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #12
  store i64 292, i64* %10, align 8
  %144 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %136, align 8
  %145 = icmp ult %"class.jxl::Image3"* %142, %144
  br i1 %145, label %146, label %152

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %147, i64 336, i64 292, i64 4) #12
  %148 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %148, i64 336, i64 292, i64 4) #12
  %149 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %149, i64 336, i64 292, i64 4) #12
  %150 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %142, i64 1
  %151 = ptrtoint %"class.jxl::Image3"* %150 to i64
  store i64 %151, i64* %125, align 8
  br label %153

152:                                              ; preds = %141
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"* %123, i64* nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %10) #12
  br label %153

153:                                              ; preds = %146, %152
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #12
  %154 = add i64 %143, 1
  %155 = icmp eq i64 %154, %1
  br i1 %155, label %137, label %156

156:                                              ; preds = %153
  %157 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %124, align 8
  br label %141

158:                                              ; preds = %137
  %159 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %160 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %159, align 8
  %161 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %160, i64 0, i32 2
  %162 = load i8, i8* %161, align 8, !range !9
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %164, label %315

164:                                              ; preds = %137, %158
  %165 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %166 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %165, i64 0, i32 1, i32 15
  %167 = load i32, i32* %166, align 4
  %168 = call i32 @llvm.ctlz.i32(i32 %167, i1 true) #12, !range !43
  %169 = xor i32 %168, 31
  %170 = zext i32 %169 to i64
  %171 = call i32 @llvm.ctpop.i32(i32 %167) #12, !range !43
  %172 = icmp ugt i32 %171, 1
  %173 = zext i1 %172 to i64
  %174 = add nuw nsw i64 %173, %170
  %175 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174
  %176 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 1
  %177 = bitcast %"class.jxl::Image3"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.239"* %175 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = sdiv exact i64 %181, 96
  %183 = icmp ult i64 %182, %1
  br i1 %183, label %184, label %194

184:                                              ; preds = %164
  %185 = inttoptr i64 %178 to %"class.jxl::Image3"*
  %186 = bitcast i64* %11 to i8*
  %187 = shl i64 288, %174
  %188 = bitcast i64* %12 to i8*
  %189 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 30, i64 %174, i32 0, i32 2, i32 0, i32 0
  br label %221

190:                                              ; preds = %233
  %191 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %191, i64 0, i32 1, i32 15
  %193 = load i32, i32* %192, align 4
  br label %194

194:                                              ; preds = %190, %164
  %195 = phi i32 [ %193, %190 ], [ %167, %164 ]
  %196 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19
  %197 = zext i32 %195 to i64
  %198 = mul nuw nsw i64 %197, 288
  %199 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %199) #12
  store float 1.000000e+00, float* %13, align 4
  %200 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 19, i32 0, i32 1
  %201 = bitcast float** %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = bitcast %"class.std::__1::vector.205"* %196 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = sub i64 %202, %204
  %206 = ashr exact i64 %205, 2
  %207 = icmp ugt i64 %198, %206
  %208 = inttoptr i64 %204 to float*
  br i1 %207, label %209, label %211

209:                                              ; preds = %194
  %210 = sub nsw i64 %198, %206
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.205"* %196, i64 %210, float* nonnull dereferenceable(4) %13) #12
  br label %215

211:                                              ; preds = %194
  %212 = icmp ult i64 %198, %206
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = getelementptr inbounds float, float* %208, i64 %198
  store float* %214, float** %200, align 8
  br label %215

215:                                              ; preds = %209, %211, %213
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #12
  %216 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 18, i32 0, i32 2
  %217 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %216, align 8
  %218 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %217, i64 0, i32 2
  %219 = load i8, i8* %218, align 8, !range !9
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %238, label %315

221:                                              ; preds = %236, %184
  %222 = phi %"class.jxl::Image3"* [ %185, %184 ], [ %237, %236 ]
  %223 = phi i64 [ %182, %184 ], [ %234, %236 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #12
  store i64 %187, i64* %11, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #12
  store i64 %187, i64* %12, align 8
  %224 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %189, align 8
  %225 = icmp ult %"class.jxl::Image3"* %222, %224
  br i1 %225, label %226, label %232

226:                                              ; preds = %221
  %227 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %227, i64 %187, i64 %187, i64 4) #12
  %228 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %228, i64 %187, i64 %187, i64 4) #12
  %229 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %229, i64 %187, i64 %187, i64 4) #12
  %230 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %222, i64 1
  %231 = ptrtoint %"class.jxl::Image3"* %230 to i64
  store i64 %231, i64* %177, align 8
  br label %233

232:                                              ; preds = %221
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"* %175, i64* nonnull dereferenceable(8) %11, i64* nonnull dereferenceable(8) %12) #12
  br label %233

233:                                              ; preds = %226, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #12
  %234 = add i64 %223, 1
  %235 = icmp eq i64 %234, %1
  br i1 %235, label %190, label %236

236:                                              ; preds = %233
  %237 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %176, align 8
  br label %221

238:                                              ; preds = %215
  %239 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20
  %240 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 20, i32 0, i32 1
  %241 = bitcast %"class.std::__1::vector.205"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.std::__1::vector.211"* %239 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = sub i64 %242, %244
  %246 = sdiv exact i64 %245, 24
  %247 = icmp ult i64 %246, %1
  %248 = inttoptr i64 %244 to %"class.std::__1::vector.205"*
  %249 = inttoptr i64 %242 to %"class.std::__1::vector.205"*
  br i1 %247, label %250, label %253

250:                                              ; preds = %238
  %251 = sub i64 %1, %246
  call void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.211"* %239, i64 %251) #12
  %252 = load i64, i64* %241, align 8
  br label %273

253:                                              ; preds = %238
  %254 = icmp ugt i64 %246, %1
  br i1 %254, label %255, label %273

255:                                              ; preds = %253
  %256 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %248, i64 %1
  %257 = icmp eq %"class.std::__1::vector.205"* %256, %249
  br i1 %257, label %271, label %258

258:                                              ; preds = %255, %269
  %259 = phi %"class.std::__1::vector.205"* [ %260, %269 ], [ %249, %255 ]
  %260 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %259, i64 -1
  %261 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %260, i64 0, i32 0, i32 0
  %262 = load float*, float** %261, align 8
  %263 = icmp eq float* %262, null
  br i1 %263, label %269, label %264

264:                                              ; preds = %258
  %265 = ptrtoint float* %262 to i64
  %266 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %259, i64 -1, i32 0, i32 1
  %267 = bitcast float** %266 to i64*
  store i64 %265, i64* %267, align 8
  %268 = bitcast float* %262 to i8*
  call void @_ZdlPv(i8* %268) #15
  br label %269

269:                                              ; preds = %264, %258
  %270 = icmp eq %"class.std::__1::vector.205"* %260, %256
  br i1 %270, label %271, label %258

271:                                              ; preds = %269, %255
  store %"class.std::__1::vector.205"* %256, %"class.std::__1::vector.205"** %240, align 8
  %272 = ptrtoint %"class.std::__1::vector.205"* %256 to i64
  br label %273

273:                                              ; preds = %250, %253, %271
  %274 = phi i64 [ %252, %250 ], [ %242, %253 ], [ %272, %271 ]
  %275 = load i64, i64* %243, align 8
  %276 = icmp eq i64 %274, %275
  br i1 %276, label %315, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 17
  br label %279

279:                                              ; preds = %277, %308
  %280 = phi i64 [ %275, %277 ], [ %311, %308 ]
  %281 = phi i64 [ 0, %277 ], [ %309, %308 ]
  %282 = inttoptr i64 %280 to %"class.std::__1::vector.205"*
  %283 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %282, i64 %281
  %284 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %285 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %284, i64 0, i32 1, i32 15
  %286 = load i32, i32* %285, align 4
  %287 = zext i32 %286 to i64
  %288 = mul nuw nsw i64 %287, 288
  %289 = load i8, i8* %278, align 1, !range !9
  %290 = icmp eq i8 %289, 0
  %291 = select i1 %290, i64 3, i64 4
  %292 = mul nuw nsw i64 %288, %291
  %293 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %282, i64 %281, i32 0, i32 1
  %294 = bitcast float** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"class.std::__1::vector.205"* %283 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %295, %297
  %299 = ashr exact i64 %298, 2
  %300 = icmp ugt i64 %292, %299
  %301 = inttoptr i64 %297 to float*
  br i1 %300, label %302, label %304

302:                                              ; preds = %279
  %303 = sub nsw i64 %292, %299
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.205"* %283, i64 %303) #12
  br label %308

304:                                              ; preds = %279
  %305 = icmp ult i64 %292, %299
  br i1 %305, label %306, label %308

306:                                              ; preds = %304
  %307 = getelementptr inbounds float, float* %301, i64 %292
  store float* %307, float** %293, align 8
  br label %308

308:                                              ; preds = %302, %304, %306
  %309 = add nuw i64 %281, 1
  %310 = load i64, i64* %241, align 8
  %311 = load i64, i64* %243, align 8
  %312 = sub i64 %310, %311
  %313 = sdiv exact i64 %312, 24
  %314 = icmp ult i64 %309, %313
  br i1 %314, label %279, label %315

315:                                              ; preds = %308, %273, %215, %158
  %316 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %317 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %316, i64 0, i32 0
  %318 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %317, align 8
  %319 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %318, i64 0, i32 0, i32 15
  %320 = load i32, i32* %319, align 8
  %321 = zext i32 %320 to i64
  %322 = mul i64 %321, %1
  %323 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31
  %324 = getelementptr inbounds %"struct.jxl::PassesDecoderState", %"struct.jxl::PassesDecoderState"* %0, i64 0, i32 31, i32 0, i32 1
  %325 = bitcast %"class.jxl::Plane.97"** %324 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = bitcast %"class.std::__1::vector.169"* %323 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = sub i64 %326, %328
  %330 = ashr exact i64 %329, 5
  %331 = icmp ugt i64 %322, %330
  br i1 %331, label %332, label %339

332:                                              ; preds = %315
  %333 = sub i64 %322, %330
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.169"* %323, i64 %333) #12
  %334 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  %335 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %334, i64 0, i32 0
  %336 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %335, align 8
  %337 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %336, i64 0, i32 0, i32 15
  %338 = load i32, i32* %337, align 8
  br label %339

339:                                              ; preds = %332, %315
  %340 = phi i32 [ %338, %332 ], [ %320, %315 ]
  %341 = phi %"struct.jxl::PassesSharedState"* [ %334, %332 ], [ %316, %315 ]
  %342 = icmp eq i32 %340, 0
  br i1 %342, label %352, label %343

343:                                              ; preds = %339
  %344 = icmp eq i64 %1, 0
  %345 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %323, i64 0, i32 0, i32 0
  %346 = bitcast %"class.jxl::Plane.97"* %14 to i8*
  %347 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %14, i64 0, i32 0
  %348 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %14, i64 0, i32 0, i32 5
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %348, i64 0, i32 0, i32 0, i32 0
  %350 = bitcast %"class.std::__1::unique_ptr"* %348 to i64*
  %351 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %14, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %353

352:                                              ; preds = %409, %339
  ret void

353:                                              ; preds = %343, %409
  %354 = phi %"struct.jxl::PassesSharedState"* [ %341, %343 ], [ %410, %409 ]
  %355 = phi i64 [ 0, %343 ], [ %411, %409 ]
  %356 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 16, i32 0, i32 0
  %357 = load i32*, i32** %356, align 8
  %358 = getelementptr inbounds i32, i32* %357, i64 %355
  %359 = load i32, i32* %358, align 4
  %360 = icmp eq i32 %359, 1
  br i1 %360, label %409, label %361

361:                                              ; preds = %353
  %362 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %354, i64 0, i32 1, i32 15
  %363 = load i32, i32* %362, align 4
  %364 = zext i32 %363 to i64
  %365 = mul nuw nsw i64 %364, 288
  %366 = zext i32 %359 to i64
  %367 = udiv i64 %365, %366
  %368 = add nuw nsw i64 %367, 16
  %369 = add nuw nsw i64 %367, 4
  br i1 %344, label %409, label %370

370:                                              ; preds = %361, %405
  %371 = phi %"struct.jxl::PassesSharedState"* [ %408, %405 ], [ %354, %361 ]
  %372 = phi i64 [ %406, %405 ], [ 0, %361 ]
  %373 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %371, i64 0, i32 0
  %374 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %373, align 8
  %375 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %374, i64 0, i32 0, i32 15
  %376 = load i32, i32* %375, align 8
  %377 = zext i32 %376 to i64
  %378 = mul i64 %372, %377
  %379 = add i64 %378, %355
  %380 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %345, align 8
  %381 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %380, i64 %379
  %382 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %381, i64 0, i32 0, i32 0
  %383 = load i32, i32* %382, align 8
  %384 = zext i32 %383 to i64
  %385 = icmp ugt i64 %368, %384
  br i1 %385, label %391, label %386

386:                                              ; preds = %370
  %387 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %380, i64 %379, i32 0, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = zext i32 %388 to i64
  %390 = icmp ugt i64 %369, %389
  br i1 %390, label %391, label %405

391:                                              ; preds = %386, %370
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %346) #12
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %347, i64 %368, i64 %369, i64 4) #12
  %392 = bitcast %"class.jxl::Plane.97"* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %392, i8* nonnull align 8 %346, i64 24, i1 false) #12
  %393 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %380, i64 %379, i32 0, i32 5
  %394 = load i64, i64* %350, align 8
  store i8* null, i8** %349, align 8
  %395 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %393, i64 0, i32 0, i32 0, i32 0
  %396 = load i8*, i8** %395, align 8
  %397 = bitcast %"class.std::__1::unique_ptr"* %393 to i64*
  store i64 %394, i64* %397, align 8
  %398 = icmp eq i8* %396, null
  br i1 %398, label %400, label %399

399:                                              ; preds = %391
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %396) #12
  br label %400

400:                                              ; preds = %391, %399
  %401 = load i8*, i8** %351, align 8
  store i8* null, i8** %351, align 8
  %402 = icmp eq i8* %401, null
  br i1 %402, label %404, label %403

403:                                              ; preds = %400
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %401) #12
  br label %404

404:                                              ; preds = %400, %403
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %346) #12
  br label %405

405:                                              ; preds = %404, %386
  %406 = add nuw i64 %372, 1
  %407 = icmp eq i64 %406, %1
  %408 = load %"struct.jxl::PassesSharedState"*, %"struct.jxl::PassesSharedState"** %15, align 8
  br i1 %407, label %409, label %370

409:                                              ; preds = %405, %361, %353
  %410 = phi %"struct.jxl::PassesSharedState"* [ %354, %361 ], [ %354, %353 ], [ %408, %405 ]
  %411 = add nuw nsw i64 %355, 1
  %412 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %410, i64 0, i32 0
  %413 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %412, align 8
  %414 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %413, i64 0, i32 0, i32 15
  %415 = load i32, i32* %414, align 8
  %416 = zext i32 %415 to i64
  %417 = icmp ult i64 %411, %416
  br i1 %417, label %353, label %352
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13GroupDecCacheENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.274"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::GroupDecCache"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::GroupDecCache"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 1168
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::GroupDecCache"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %13, i64 %18, i32 0
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 1168
  %25 = add i64 %23, 1168
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"struct.jxl::GroupDecCache"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %100

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.274"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 1168
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 15793445268586944
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.274"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #14
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 1168
  %42 = icmp ult i64 %41, 7896722634293472
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 15793445268586944, %39 ]
  %50 = mul i64 %49, 1168
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to %"struct.jxl::GroupDecCache"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::GroupDecCache"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %55, i64 %34
  %57 = ptrtoint %"struct.jxl::GroupDecCache"* %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"struct.jxl::GroupDecCache"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 1168, i1 false) #12
  %64 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %61, i64 1
  %65 = ptrtoint %"struct.jxl::GroupDecCache"* %64 to i64
  %66 = icmp eq %"struct.jxl::GroupDecCache"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"struct.jxl::GroupDecCache"* %58 to i64
  %69 = ptrtoint %"struct.jxl::GroupDecCache"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.274", %"class.std::__1::vector.274"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %70, align 8
  %72 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %6, align 8
  %73 = icmp eq %"struct.jxl::GroupDecCache"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::GroupDecCache"* %71 to i64
  br label %86

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::GroupDecCache"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"struct.jxl::GroupDecCache"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %78, i64 -1
  tail call void @_ZN3jxl13GroupDecCacheC2EOS0_(%"struct.jxl::GroupDecCache"* %79, %"struct.jxl::GroupDecCache"* dereferenceable(1168) %80) #12
  %81 = icmp eq %"struct.jxl::GroupDecCache"* %80, %71
  br i1 %81, label %82, label %76

82:                                               ; preds = %76
  %83 = ptrtoint %"struct.jxl::GroupDecCache"* %79 to i64
  %84 = load i64, i64* %31, align 8
  %85 = load %"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"** %6, align 8
  br label %86

86:                                               ; preds = %74, %82
  %87 = phi %"struct.jxl::GroupDecCache"* [ %71, %74 ], [ %85, %82 ]
  %88 = phi i64 [ %57, %74 ], [ %83, %82 ]
  %89 = phi i64 [ %75, %74 ], [ %84, %82 ]
  store i64 %88, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %90 = inttoptr i64 %89 to %"struct.jxl::GroupDecCache"*
  %91 = icmp eq %"struct.jxl::GroupDecCache"* %87, %90
  br i1 %91, label %96, label %92

92:                                               ; preds = %86, %92
  %93 = phi %"struct.jxl::GroupDecCache"* [ %94, %92 ], [ %87, %86 ]
  %94 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %93, i64 -1
  tail call void @_ZN3jxl13GroupDecCacheD2Ev(%"struct.jxl::GroupDecCache"* %94) #12
  %95 = icmp eq %"struct.jxl::GroupDecCache"* %94, %90
  br i1 %95, label %96, label %92

96:                                               ; preds = %92, %86
  %97 = icmp eq i64 %89, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %96
  %99 = inttoptr i64 %89 to i8*
  tail call void @_ZdlPv(i8* %99) #15
  br label %100

100:                                              ; preds = %98, %96, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13GroupDecCacheC2EOS0_(%"struct.jxl::GroupDecCache"*, %"struct.jxl::GroupDecCache"* dereferenceable(1168)) unnamed_addr #4 comdat align 2 {
  %3 = bitcast %"struct.jxl::GroupDecCache"* %0 to i8*
  %4 = bitcast %"struct.jxl::GroupDecCache"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 32, i1 false)
  br label %5

5:                                                ; preds = %52, %2
  %6 = phi i64 [ 0, %2 ], [ %53, %52 ]
  %7 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6
  %8 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6
  %9 = bitcast %"class.jxl::Image3.276"* %7 to i8*
  %10 = bitcast %"class.jxl::Image3.276"* %8 to i8*
  %11 = getelementptr %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6, i32 0, i64 0, i32 0, i32 5
  %12 = bitcast %"class.std::__1::unique_ptr"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false) #12
  %13 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6, i32 0, i64 0, i32 0, i32 5
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %16 = load i64, i64* %15, align 8
  store i8* null, i8** %14, align 8
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr"* %11 to i64*
  store i64 %16, i64* %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %5
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %18) #12
  br label %22

22:                                               ; preds = %21, %5
  %23 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6, i32 0, i64 1
  %24 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6, i32 0, i64 1
  %25 = bitcast %"class.jxl::Plane.60"* %24 to i8*
  %26 = bitcast %"class.jxl::Plane.60"* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false) #12
  %27 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6, i32 0, i64 1, i32 0, i32 5
  %28 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6, i32 0, i64 1, i32 0, i32 5
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.std::__1::unique_ptr"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  store i8* null, i8** %29, align 8
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %31, i64* %34, align 8
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %22
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #12
  br label %37

37:                                               ; preds = %36, %22
  %38 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6, i32 0, i64 2
  %39 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6, i32 0, i64 2
  %40 = bitcast %"class.jxl::Plane.60"* %39 to i8*
  %41 = bitcast %"class.jxl::Plane.60"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 4, i64 %6, i32 0, i64 2, i32 0, i32 5
  %43 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 4, i64 %6, i32 0, i64 2, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %49, align 8
  %50 = icmp eq i8* %48, null
  br i1 %50, label %52, label %51

51:                                               ; preds = %37
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %48) #12
  br label %52

52:                                               ; preds = %37, %51
  %53 = add nuw nsw i64 %6, 1
  %54 = icmp eq i64 %53, 11
  br i1 %54, label %55, label %5

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5
  %57 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 5
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.30"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = bitcast %"class.std::__1::unique_ptr.30"* %57 to i64*
  %60 = load i64, i64* %59, align 8
  store float* null, float** %58, align 8
  %61 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 5, i32 0, i32 1, i32 0
  %62 = bitcast %"class.std::__1::unique_ptr.30"* %56 to i64*
  store i64 %60, i64* %62, align 8
  %63 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 5, i32 0, i32 1
  %64 = bitcast %"struct.std::__1::__compressed_pair_elem.33"* %63 to i8*
  %65 = bitcast %"class.hwy::AlignedFreer"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false) #12
  %66 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6
  %67 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 6
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.277", %"class.std::__1::unique_ptr.277"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr.277"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i32* null, i32** %68, align 8
  %71 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 6, i32 0, i32 1, i32 0
  %72 = bitcast %"class.std::__1::unique_ptr.277"* %66 to i64*
  store i64 %70, i64* %72, align 8
  %73 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 6, i32 0, i32 1
  %74 = bitcast %"struct.std::__1::__compressed_pair_elem.33"* %73 to i8*
  %75 = bitcast %"class.hwy::AlignedFreer"* %71 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false) #12
  %76 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7
  %77 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 7
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr.279", %"class.std::__1::unique_ptr.279"* %77, i64 0, i32 0, i32 0, i32 0
  %79 = bitcast %"class.std::__1::unique_ptr.279"* %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i16* null, i16** %78, align 8
  %81 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 7, i32 0, i32 1, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.279"* %76 to i64*
  store i64 %80, i64* %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 7, i32 0, i32 1
  %84 = bitcast %"struct.std::__1::__compressed_pair_elem.33"* %83 to i8*
  %85 = bitcast %"class.hwy::AlignedFreer"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false) #12
  %86 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %0, i64 0, i32 8
  %87 = getelementptr inbounds %"struct.jxl::GroupDecCache", %"struct.jxl::GroupDecCache"* %1, i64 0, i32 8
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %86, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.225"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.std::__1::__split_buffer.413", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::FilterPipeline"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 832
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %44, label %13

13:                                               ; preds = %2
  %14 = inttoptr i64 %9 to %"class.jxl::FilterPipeline"*
  %15 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %42, label %19

17:                                               ; preds = %19
  %18 = ptrtoint %"class.jxl::FilterPipeline"* %15 to i64
  br label %42

19:                                               ; preds = %13, %19
  %20 = phi %"class.jxl::FilterPipeline"* [ %40, %19 ], [ %14, %13 ]
  %21 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %21, i64 320, i64 15, i64 4) #12
  %22 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %22, i64 320, i64 15, i64 4) #12
  %23 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %23, i64 320, i64 15, i64 4) #12
  %24 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 1
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 0, i32 3
  %27 = bitcast i64* %26 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 104, i1 false) #12
  %28 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 1, i32 3
  %30 = bitcast i64* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 104, i1 false) #12
  %31 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %31, align 8
  %32 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 2, i32 3
  %33 = bitcast i64* %32 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 104, i1 false) #12
  %34 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %34, align 8
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 2, i64 3, i32 3
  %36 = bitcast i64* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 104, i1 false) #12
  %37 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 3
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 4
  store i8 0, i8* %38, align 8
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 0, i32 5
  store i64 0, i64* %39, align 8
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %20, i64 1
  %41 = icmp eq %"class.jxl::FilterPipeline"* %40, %15
  br i1 %41, label %17, label %19

42:                                               ; preds = %13, %17
  %43 = phi i64 [ %18, %17 ], [ %9, %13 ]
  store i64 %43, i64* %8, align 8
  br label %139

44:                                               ; preds = %2
  %45 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 2
  %46 = bitcast %"struct.std::__1::__split_buffer.413"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %3, i64 0, i32 0
  %48 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %3, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %3, i64 0, i32 2
  %50 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %3, i64 0, i32 3, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %3, i64 0, i32 3, i32 1, i32 0
  %52 = bitcast %"class.std::__1::vector.225"* %0 to i64*
  %53 = bitcast %"struct.std::__1::__split_buffer.413"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 40, i1 false)
  %54 = load i64, i64* %52, align 8
  %55 = sub i64 %9, %54
  %56 = sdiv exact i64 %55, 832
  %57 = add i64 %56, %1
  %58 = icmp ugt i64 %57, 22171567396285518
  br i1 %58, label %59, label %61

59:                                               ; preds = %44
  %60 = bitcast %"class.std::__1::vector.225"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #14
  unreachable

61:                                               ; preds = %44
  %62 = sub i64 %6, %54
  %63 = sdiv exact i64 %62, 832
  %64 = icmp ult i64 %63, 11085783698142759
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %66 = bitcast %"class.std::__1::allocator.230"** %51 to %"class.std::__1::__compressed_pair.227"**
  store %"class.std::__1::__compressed_pair.227"* %45, %"class.std::__1::__compressed_pair.227"** %66, align 8
  br label %73

67:                                               ; preds = %61
  %68 = shl nsw i64 %63, 1
  %69 = icmp ult i64 %68, %57
  %70 = select i1 %69, i64 %57, i64 %68
  store %"class.jxl::FilterPipeline"* null, %"class.jxl::FilterPipeline"** %50, align 8
  %71 = bitcast %"class.std::__1::allocator.230"** %51 to %"class.std::__1::__compressed_pair.227"**
  store %"class.std::__1::__compressed_pair.227"* %45, %"class.std::__1::__compressed_pair.227"** %71, align 8
  %72 = icmp eq i64 %70, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %67, %65
  %74 = phi i64 [ 22171567396285518, %65 ], [ %70, %67 ]
  %75 = mul i64 %74, 832
  %76 = tail call i8* @_Znwm(i64 %75) #15
  %77 = bitcast i8* %76 to %"class.jxl::FilterPipeline"*
  br label %78

78:                                               ; preds = %67, %73
  %79 = phi i64 [ %74, %73 ], [ 0, %67 ]
  %80 = phi %"class.jxl::FilterPipeline"* [ %77, %73 ], [ null, %67 ]
  store %"class.jxl::FilterPipeline"* %80, %"class.jxl::FilterPipeline"** %47, align 8
  %81 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %56
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %49, align 8
  store %"class.jxl::FilterPipeline"* %81, %"class.jxl::FilterPipeline"** %48, align 8
  %82 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %80, i64 %79
  store %"class.jxl::FilterPipeline"* %82, %"class.jxl::FilterPipeline"** %50, align 8
  %83 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %81, i64 %1
  br label %84

84:                                               ; preds = %78, %84
  %85 = phi %"class.jxl::FilterPipeline"* [ %105, %84 ], [ %81, %78 ]
  %86 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %86, i64 320, i64 15, i64 4) #12
  %87 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %87, i64 320, i64 15, i64 4) #12
  %88 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 0, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %88, i64 320, i64 15, i64 4) #12
  %89 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 1
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 1
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 0, i32 3
  %92 = bitcast i64* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 104, i1 false) #12
  %93 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 1
  store i64 0, i64* %93, align 8
  %94 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 1, i32 3
  %95 = bitcast i64* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 104, i1 false) #12
  %96 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 1
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 2, i32 3
  %98 = bitcast i64* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 104, i1 false) #12
  %99 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 1
  store i64 0, i64* %99, align 8
  %100 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 2, i64 3, i32 3
  %101 = bitcast i64* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 104, i1 false) #12
  %102 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 3
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 4
  store i8 0, i8* %103, align 8
  %104 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 0, i32 5
  store i64 0, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %85, i64 1
  %106 = icmp eq %"class.jxl::FilterPipeline"* %83, %105
  br i1 %106, label %107, label %84

107:                                              ; preds = %84
  %108 = bitcast %"class.jxl::FilterPipeline"** %49 to i64*
  %109 = ptrtoint %"class.jxl::FilterPipeline"* %83 to i64
  store i64 %109, i64* %108, align 8
  call void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.225"* %0, %"struct.std::__1::__split_buffer.413"* nonnull dereferenceable(40) %3)
  %110 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %48, align 8
  %111 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %112 = icmp eq %"class.jxl::FilterPipeline"* %111, %110
  br i1 %112, label %133, label %113

113:                                              ; preds = %107, %130
  %114 = phi %"class.jxl::FilterPipeline"* [ %131, %130 ], [ %111, %107 ]
  %115 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1
  store %"class.jxl::FilterPipeline"* %115, %"class.jxl::FilterPipeline"** %49, align 8
  %116 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  store i8* null, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %117) #12
  br label %120

120:                                              ; preds = %119, %113
  %121 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  store i8* null, i8** %121, align 8
  %123 = icmp eq i8* %122, null
  br i1 %123, label %125, label %124

124:                                              ; preds = %120
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %122) #12
  br label %125

125:                                              ; preds = %124, %120
  %126 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %114, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  store i8* null, i8** %126, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %130, label %129

129:                                              ; preds = %125
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %127) #12
  br label %130

130:                                              ; preds = %129, %125
  %131 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %49, align 8
  %132 = icmp eq %"class.jxl::FilterPipeline"* %131, %110
  br i1 %132, label %133, label %113

133:                                              ; preds = %130, %107
  %134 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %47, align 8
  %135 = icmp eq %"class.jxl::FilterPipeline"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = bitcast %"class.jxl::FilterPipeline"* %134 to i8*
  call void @_ZdlPv(i8* %137) #15
  br label %138

138:                                              ; preds = %133, %136
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %46) #12
  br label %139

139:                                              ; preds = %138, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl14FilterPipelineENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(%"class.std::__1::vector.225"*, %"struct.std::__1::__split_buffer.413"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::FilterPipeline"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::FilterPipeline"* %4 to i64
  %11 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.225"* %0 to i64*
  br label %77

14:                                               ; preds = %2
  %15 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::FilterPipeline"* [ %70, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::FilterPipeline"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1
  %21 = bitcast %"class.jxl::FilterPipeline"* %19 to i8*
  %22 = bitcast %"class.jxl::FilterPipeline"* %20 to i8*
  %23 = getelementptr %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #12
  %25 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane.97"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #12
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane.97"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane.97"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  %54 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 0, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #12
  br label %64

64:                                               ; preds = %63, %49
  %65 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %17, i64 -1, i32 1
  %66 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %18, i64 -1, i32 1
  %67 = bitcast i64* %65 to i8*
  %68 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 736, i1 false) #12
  %69 = load %"class.jxl::FilterPipeline"*, %"class.jxl::FilterPipeline"** %7, align 8
  %70 = getelementptr inbounds %"class.jxl::FilterPipeline", %"class.jxl::FilterPipeline"* %69, i64 -1
  store %"class.jxl::FilterPipeline"* %70, %"class.jxl::FilterPipeline"** %7, align 8
  %71 = icmp eq %"class.jxl::FilterPipeline"* %20, %4
  br i1 %71, label %72, label %16

72:                                               ; preds = %64
  %73 = ptrtoint %"class.jxl::FilterPipeline"* %70 to i64
  %74 = bitcast %"class.std::__1::vector.225"* %0 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.jxl::FilterPipeline"** %7 to i64*
  br label %77

77:                                               ; preds = %9, %72
  %78 = phi i64* [ %11, %9 ], [ %76, %72 ]
  %79 = phi i64* [ %13, %9 ], [ %74, %72 ]
  %80 = phi i64 [ %12, %9 ], [ %73, %72 ]
  %81 = phi i64 [ %10, %9 ], [ %75, %72 ]
  store i64 %80, i64* %79, align 8
  store i64 %81, i64* %78, align 8
  %82 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %1, i64 0, i32 2
  %83 = bitcast %"class.jxl::FilterPipeline"** %5 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"class.jxl::FilterPipeline"** %82 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %83, align 8
  store i64 %84, i64* %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector.225", %"class.std::__1::vector.225"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %88 = getelementptr inbounds %"struct.std::__1::__split_buffer.413", %"struct.std::__1::__split_buffer.413"* %1, i64 0, i32 3, i32 0, i32 0
  %89 = bitcast %"class.jxl::FilterPipeline"** %87 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"class.jxl::FilterPipeline"** %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %89, align 8
  store i64 %90, i64* %91, align 8
  %93 = load i64, i64* %78, align 8
  %94 = bitcast %"struct.std::__1::__split_buffer.413"* %1 to i64*
  store i64 %93, i64* %94, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJmmEEEvDpOT_(%"class.std::__1::vector.239"*, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca %"struct.std::__1::__split_buffer.416", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 2
  %6 = bitcast %"struct.std::__1::__split_buffer.416"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %4, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %4, i64 0, i32 2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %4, i64 0, i32 3, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %4, i64 0, i32 3, i32 1, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 1
  %13 = bitcast %"class.jxl::Image3"** %12 to i64*
  %14 = bitcast %"struct.std::__1::__split_buffer.416"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false)
  %15 = load i64, i64* %13, align 8
  %16 = bitcast %"class.std::__1::vector.239"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = sdiv exact i64 %18, 96
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 192153584101141162
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = bitcast %"class.std::__1::vector.239"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #14
  unreachable

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.jxl::Image3"** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %17
  %29 = sdiv exact i64 %28, 96
  %30 = icmp ult i64 %29, 96076792050570581
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %32 = bitcast %"class.std::__1::allocator.244"** %11 to %"class.std::__1::__compressed_pair.241"**
  store %"class.std::__1::__compressed_pair.241"* %5, %"class.std::__1::__compressed_pair.241"** %32, align 8
  br label %39

33:                                               ; preds = %24
  %34 = shl nsw i64 %29, 1
  %35 = icmp ult i64 %34, %20
  %36 = select i1 %35, i64 %20, i64 %34
  store %"class.jxl::Image3"* null, %"class.jxl::Image3"** %10, align 8
  %37 = bitcast %"class.std::__1::allocator.244"** %11 to %"class.std::__1::__compressed_pair.241"**
  store %"class.std::__1::__compressed_pair.241"* %5, %"class.std::__1::__compressed_pair.241"** %37, align 8
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %33, %31
  %40 = phi i64 [ 192153584101141162, %31 ], [ %36, %33 ]
  %41 = mul i64 %40, 96
  %42 = tail call i8* @_Znwm(i64 %41) #15
  %43 = bitcast i8* %42 to %"class.jxl::Image3"*
  br label %44

44:                                               ; preds = %33, %39
  %45 = phi i64 [ %40, %39 ], [ 0, %33 ]
  %46 = phi %"class.jxl::Image3"* [ %43, %39 ], [ null, %33 ]
  store %"class.jxl::Image3"* %46, %"class.jxl::Image3"** %7, align 8
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19
  store %"class.jxl::Image3"* %47, %"class.jxl::Image3"** %8, align 8
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %45
  store %"class.jxl::Image3"* %48, %"class.jxl::Image3"** %10, align 8
  %49 = load i64, i64* %1, align 8
  %50 = load i64, i64* %2, align 8
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 0, i32 0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %51, i64 %49, i64 %50, i64 4) #12
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 1, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %52, i64 %49, i64 %50, i64 4) #12
  %53 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %46, i64 %19, i32 0, i64 2, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %53, i64 %49, i64 %50, i64 4) #12
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %47, i64 1
  store %"class.jxl::Image3"* %54, %"class.jxl::Image3"** %9, align 8
  call void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.239"* %0, %"struct.std::__1::__split_buffer.416"* nonnull dereferenceable(40) %4)
  %55 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %56 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %57 = icmp eq %"class.jxl::Image3"* %56, %55
  br i1 %57, label %78, label %58

58:                                               ; preds = %44, %75
  %59 = phi %"class.jxl::Image3"* [ %76, %75 ], [ %56, %44 ]
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1
  store %"class.jxl::Image3"* %60, %"class.jxl::Image3"** %9, align 8
  %61 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  store i8* null, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %62) #12
  br label %65

65:                                               ; preds = %64, %58
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  store i8* null, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #12
  br label %70

70:                                               ; preds = %69, %65
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %59, i64 -1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  store i8* null, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %70
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %72) #12
  br label %75

75:                                               ; preds = %74, %70
  %76 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %9, align 8
  %77 = icmp eq %"class.jxl::Image3"* %76, %55
  br i1 %77, label %78, label %58

78:                                               ; preds = %75, %44
  %79 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %80 = icmp eq %"class.jxl::Image3"* %79, null
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = bitcast %"class.jxl::Image3"* %79 to i8*
  call void @_ZdlPv(i8* %82) #15
  br label %83

83:                                               ; preds = %78, %81
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl6Image3IfEENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(%"class.std::__1::vector.239"*, %"struct.std::__1::__split_buffer.416"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %5, align 8
  %7 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %1, i64 0, i32 1
  %8 = icmp eq %"class.jxl::Image3"* %6, %4
  br i1 %8, label %9, label %14

9:                                                ; preds = %2
  %10 = ptrtoint %"class.jxl::Image3"* %4 to i64
  %11 = bitcast %"class.jxl::Image3"** %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.239"* %0 to i64*
  br label %73

14:                                               ; preds = %2
  %15 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  br label %16

16:                                               ; preds = %64, %14
  %17 = phi %"class.jxl::Image3"* [ %66, %64 ], [ %15, %14 ]
  %18 = phi %"class.jxl::Image3"* [ %20, %64 ], [ %6, %14 ]
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1
  %21 = bitcast %"class.jxl::Image3"* %19 to i8*
  %22 = bitcast %"class.jxl::Image3"* %20 to i8*
  %23 = getelementptr %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 0, i32 0, i32 5
  %24 = bitcast %"class.std::__1::unique_ptr"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 72, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false) #12
  %25 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 0, i32 0, i32 5
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 0, i32 0, i32 0, i32 0
  %27 = bitcast %"class.std::__1::unique_ptr"* %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i8* null, i8** %26, align 8
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %23, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::unique_ptr"* %23 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq i8* %30, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %16
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %34

34:                                               ; preds = %33, %16
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1
  %36 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1
  %37 = bitcast %"class.jxl::Plane.97"* %36 to i8*
  %38 = bitcast %"class.jxl::Plane.97"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 1, i32 0, i32 5
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 1, i32 0, i32 5
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = bitcast %"class.std::__1::unique_ptr"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  store i8* null, i8** %41, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %39, i64 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::unique_ptr"* %39 to i64*
  store i64 %43, i64* %46, align 8
  %47 = icmp eq i8* %45, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %34
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %45) #12
  br label %49

49:                                               ; preds = %48, %34
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2
  %51 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2
  %52 = bitcast %"class.jxl::Plane.97"* %51 to i8*
  %53 = bitcast %"class.jxl::Plane.97"* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %17, i64 -1, i32 0, i64 2, i32 0, i32 5
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 -1, i32 0, i64 2, i32 0, i32 5
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8* null, i8** %56, align 8
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = bitcast %"class.std::__1::unique_ptr"* %54 to i64*
  store i64 %58, i64* %61, align 8
  %62 = icmp eq i8* %60, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %49
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %60) #12
  br label %64

64:                                               ; preds = %63, %49
  %65 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %7, align 8
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %65, i64 -1
  store %"class.jxl::Image3"* %66, %"class.jxl::Image3"** %7, align 8
  %67 = icmp eq %"class.jxl::Image3"* %20, %4
  br i1 %67, label %68, label %16

68:                                               ; preds = %64
  %69 = ptrtoint %"class.jxl::Image3"* %66 to i64
  %70 = bitcast %"class.std::__1::vector.239"* %0 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.jxl::Image3"** %7 to i64*
  br label %73

73:                                               ; preds = %9, %68
  %74 = phi i64* [ %11, %9 ], [ %72, %68 ]
  %75 = phi i64* [ %13, %9 ], [ %70, %68 ]
  %76 = phi i64 [ %12, %9 ], [ %69, %68 ]
  %77 = phi i64 [ %10, %9 ], [ %71, %68 ]
  store i64 %76, i64* %75, align 8
  store i64 %77, i64* %74, align 8
  %78 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %1, i64 0, i32 2
  %79 = bitcast %"class.jxl::Image3"** %5 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %"class.jxl::Image3"** %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %79, align 8
  store i64 %80, i64* %81, align 8
  %83 = getelementptr inbounds %"class.std::__1::vector.239", %"class.std::__1::vector.239"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %84 = getelementptr inbounds %"struct.std::__1::__split_buffer.416", %"struct.std::__1::__split_buffer.416"* %1, i64 0, i32 3, i32 0, i32 0
  %85 = bitcast %"class.jxl::Image3"** %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"class.jxl::Image3"** %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %85, align 8
  store i64 %86, i64* %87, align 8
  %89 = load i64, i64* %74, align 8
  %90 = bitcast %"struct.std::__1::__split_buffer.416"* %1 to i64*
  store i64 %89, i64* %90, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEmRKf(%"class.std::__1::vector.205"*, i64, float* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast float* %2 to i8*
  %5 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast float** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 1
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %7, %10
  %12 = ashr exact i64 %11, 2
  %13 = icmp ult i64 %12, %1
  br i1 %13, label %139, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %10 to float*
  %16 = inttoptr i64 %10 to i8*
  %17 = getelementptr inbounds float, float* %15, i64 %1
  %18 = icmp eq i64 %1, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %14
  %20 = bitcast float* %2 to i32*
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %48

26:                                               ; preds = %106, %48, %19
  %27 = phi float* [ %15, %48 ], [ %15, %19 ], [ %60, %106 ]
  %28 = ptrtoint float* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr float, float* %15, i64 %29
  %31 = ptrtoint float* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %26, %37
  %38 = phi float* [ %42, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %43, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %20, align 4
  %41 = bitcast float* %38 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds float, float* %38, i64 1
  %43 = add i64 %39, -1
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %37, !llvm.loop !124

45:                                               ; preds = %37, %26
  %46 = phi float* [ %27, %26 ], [ %42, %37 ]
  %47 = icmp ult i64 %32, 28
  br i1 %47, label %108, label %110

48:                                               ; preds = %19
  %49 = shl nsw i64 %1, 2
  %50 = add i64 %49, -4
  %51 = lshr exact i64 %50, 2
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr float, float* %15, i64 %52
  %54 = getelementptr i8, i8* %4, i64 1
  %55 = icmp ugt i8* %54, %16
  %56 = icmp ugt float* %53, %2
  %57 = and i1 %55, %56
  br i1 %57, label %26, label %58

58:                                               ; preds = %48
  %59 = and i64 %24, 9223372036854775800
  %60 = getelementptr float, float* %15, i64 %59
  %61 = add nsw i64 %59, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i32, i32* %20, align 4, !alias.scope !125
  %69 = insertelement <4 x i32> undef, i32 %68, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  %71 = insertelement <4 x i32> undef, i32 %68, i32 0
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> zeroinitializer
  %73 = load i32, i32* %20, align 4, !alias.scope !125
  %74 = insertelement <4 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = insertelement <4 x i32> undef, i32 %73, i32 0
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr float, float* %15, i64 %79
  %82 = bitcast float* %81 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %82, align 4, !alias.scope !128, !noalias !125
  %83 = getelementptr float, float* %81, i64 4
  %84 = bitcast float* %83 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %84, align 4, !alias.scope !128, !noalias !125
  %85 = or i64 %79, 8
  %86 = getelementptr float, float* %15, i64 %85
  %87 = bitcast float* %86 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %87, align 4, !alias.scope !128, !noalias !125
  %88 = getelementptr float, float* %86, i64 4
  %89 = bitcast float* %88 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %89, align 4, !alias.scope !128, !noalias !125
  %90 = add i64 %79, 16
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !130

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr float, float* %15, i64 %94
  %98 = load i32, i32* %20, align 4, !alias.scope !125
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> zeroinitializer
  %101 = insertelement <4 x i32> undef, i32 %98, i32 0
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> zeroinitializer
  %103 = bitcast float* %97 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 4, !alias.scope !128, !noalias !125
  %104 = getelementptr float, float* %97, i64 4
  %105 = bitcast float* %104 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %105, align 4, !alias.scope !128, !noalias !125
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %24, %59
  br i1 %107, label %108, label %26

108:                                              ; preds = %45, %110, %106
  %109 = ptrtoint float* %17 to i64
  br label %137

110:                                              ; preds = %45, %110
  %111 = phi float* [ %135, %110 ], [ %46, %45 ]
  %112 = load i32, i32* %20, align 4
  %113 = bitcast float* %111 to i32*
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds float, float* %111, i64 1
  %115 = load i32, i32* %20, align 4
  %116 = bitcast float* %114 to i32*
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds float, float* %111, i64 2
  %118 = load i32, i32* %20, align 4
  %119 = bitcast float* %117 to i32*
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds float, float* %111, i64 3
  %121 = load i32, i32* %20, align 4
  %122 = bitcast float* %120 to i32*
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds float, float* %111, i64 4
  %124 = load i32, i32* %20, align 4
  %125 = bitcast float* %123 to i32*
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds float, float* %111, i64 5
  %127 = load i32, i32* %20, align 4
  %128 = bitcast float* %126 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds float, float* %111, i64 6
  %130 = load i32, i32* %20, align 4
  %131 = bitcast float* %129 to i32*
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds float, float* %111, i64 7
  %133 = load i32, i32* %20, align 4
  %134 = bitcast float* %132 to i32*
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds float, float* %111, i64 8
  %136 = icmp eq float* %135, %17
  br i1 %136, label %108, label %110, !llvm.loop !131

137:                                              ; preds = %14, %108
  %138 = phi i64 [ %109, %108 ], [ %10, %14 ]
  store i64 %138, i64* %9, align 8
  br label %311

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.205"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %10, %141
  %143 = ashr exact i64 %142, 2
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 4611686018427387903
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.205"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #14
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %7, %141
  %150 = ashr exact i64 %149, 2
  %151 = icmp ult i64 %150, 2305843009213693951
  br i1 %151, label %152, label %160

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 1
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = icmp ugt i64 %155, 4611686018427387903
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  tail call void @abort() #14
  unreachable

160:                                              ; preds = %148, %157
  %161 = phi i64 [ %155, %157 ], [ 4611686018427387903, %148 ]
  %162 = shl i64 %161, 2
  %163 = tail call i8* @_Znwm(i64 %162) #15
  %164 = bitcast i8* %163 to float*
  br label %165

165:                                              ; preds = %160, %152
  %166 = phi i64 [ %161, %160 ], [ 0, %152 ]
  %167 = phi float* [ %164, %160 ], [ null, %152 ]
  %168 = getelementptr inbounds float, float* %167, i64 %143
  %169 = getelementptr inbounds float, float* %167, i64 %166
  %170 = getelementptr inbounds float, float* %168, i64 %1
  %171 = bitcast float* %2 to i32*
  %172 = shl nsw i64 %1, 2
  %173 = add i64 %172, -4
  %174 = lshr exact i64 %173, 2
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i64 %175, 8
  br i1 %176, label %239, label %177

177:                                              ; preds = %165
  %178 = bitcast float* %168 to i8*
  %179 = shl nsw i64 %1, 2
  %180 = add i64 %179, -4
  %181 = lshr exact i64 %180, 2
  %182 = add nsw i64 %143, %181
  %183 = add i64 %182, 1
  %184 = getelementptr float, float* %167, i64 %183
  %185 = getelementptr i8, i8* %4, i64 1
  %186 = icmp ugt i8* %185, %178
  %187 = icmp ugt float* %184, %2
  %188 = and i1 %186, %187
  br i1 %188, label %239, label %189

189:                                              ; preds = %177
  %190 = and i64 %175, 9223372036854775800
  %191 = getelementptr float, float* %168, i64 %190
  %192 = add nsw i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 1
  %196 = icmp eq i64 %192, 0
  br i1 %196, label %224, label %197

197:                                              ; preds = %189
  %198 = sub nuw nsw i64 %194, %195
  %199 = load i32, i32* %171, align 4, !alias.scope !132
  %200 = insertelement <4 x i32> undef, i32 %199, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  %202 = insertelement <4 x i32> undef, i32 %199, i32 0
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> zeroinitializer
  %204 = load i32, i32* %171, align 4, !alias.scope !132
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> zeroinitializer
  %207 = insertelement <4 x i32> undef, i32 %204, i32 0
  %208 = shufflevector <4 x i32> %207, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %209

209:                                              ; preds = %209, %197
  %210 = phi i64 [ 0, %197 ], [ %221, %209 ]
  %211 = phi i64 [ %198, %197 ], [ %222, %209 ]
  %212 = getelementptr float, float* %168, i64 %210
  %213 = bitcast float* %212 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %213, align 4, !alias.scope !135, !noalias !132
  %214 = getelementptr float, float* %212, i64 4
  %215 = bitcast float* %214 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %215, align 4, !alias.scope !135, !noalias !132
  %216 = or i64 %210, 8
  %217 = getelementptr float, float* %168, i64 %216
  %218 = bitcast float* %217 to <4 x i32>*
  store <4 x i32> %206, <4 x i32>* %218, align 4, !alias.scope !135, !noalias !132
  %219 = getelementptr float, float* %217, i64 4
  %220 = bitcast float* %219 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %220, align 4, !alias.scope !135, !noalias !132
  %221 = add i64 %210, 16
  %222 = add i64 %211, -2
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %209, !llvm.loop !137

224:                                              ; preds = %209, %189
  %225 = phi i64 [ 0, %189 ], [ %221, %209 ]
  %226 = icmp eq i64 %195, 0
  br i1 %226, label %237, label %227

227:                                              ; preds = %224
  %228 = getelementptr float, float* %168, i64 %225
  %229 = load i32, i32* %171, align 4, !alias.scope !132
  %230 = insertelement <4 x i32> undef, i32 %229, i32 0
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> zeroinitializer
  %232 = insertelement <4 x i32> undef, i32 %229, i32 0
  %233 = shufflevector <4 x i32> %232, <4 x i32> undef, <4 x i32> zeroinitializer
  %234 = bitcast float* %228 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %234, align 4, !alias.scope !135, !noalias !132
  %235 = getelementptr float, float* %228, i64 4
  %236 = bitcast float* %235 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4, !alias.scope !135, !noalias !132
  br label %237

237:                                              ; preds = %224, %227
  %238 = icmp eq i64 %175, %190
  br i1 %238, label %289, label %239

239:                                              ; preds = %237, %177, %165
  %240 = phi float* [ %168, %177 ], [ %168, %165 ], [ %191, %237 ]
  %241 = ptrtoint float* %240 to i64
  %242 = add i64 %143, %1
  %243 = add i64 %242, -1
  %244 = getelementptr float, float* %167, i64 %243
  %245 = ptrtoint float* %244 to i64
  %246 = sub i64 %245, %241
  %247 = lshr i64 %246, 2
  %248 = add nuw nsw i64 %247, 1
  %249 = and i64 %248, 7
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %259, label %251

251:                                              ; preds = %239, %251
  %252 = phi float* [ %256, %251 ], [ %240, %239 ]
  %253 = phi i64 [ %257, %251 ], [ %249, %239 ]
  %254 = load i32, i32* %171, align 4
  %255 = bitcast float* %252 to i32*
  store i32 %254, i32* %255, align 4
  %256 = getelementptr inbounds float, float* %252, i64 1
  %257 = add i64 %253, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %251, !llvm.loop !138

259:                                              ; preds = %251, %239
  %260 = phi float* [ %240, %239 ], [ %256, %251 ]
  %261 = icmp ult i64 %246, 28
  br i1 %261, label %289, label %262

262:                                              ; preds = %259, %262
  %263 = phi float* [ %287, %262 ], [ %260, %259 ]
  %264 = load i32, i32* %171, align 4
  %265 = bitcast float* %263 to i32*
  store i32 %264, i32* %265, align 4
  %266 = getelementptr inbounds float, float* %263, i64 1
  %267 = load i32, i32* %171, align 4
  %268 = bitcast float* %266 to i32*
  store i32 %267, i32* %268, align 4
  %269 = getelementptr inbounds float, float* %263, i64 2
  %270 = load i32, i32* %171, align 4
  %271 = bitcast float* %269 to i32*
  store i32 %270, i32* %271, align 4
  %272 = getelementptr inbounds float, float* %263, i64 3
  %273 = load i32, i32* %171, align 4
  %274 = bitcast float* %272 to i32*
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds float, float* %263, i64 4
  %276 = load i32, i32* %171, align 4
  %277 = bitcast float* %275 to i32*
  store i32 %276, i32* %277, align 4
  %278 = getelementptr inbounds float, float* %263, i64 5
  %279 = load i32, i32* %171, align 4
  %280 = bitcast float* %278 to i32*
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds float, float* %263, i64 6
  %282 = load i32, i32* %171, align 4
  %283 = bitcast float* %281 to i32*
  store i32 %282, i32* %283, align 4
  %284 = getelementptr inbounds float, float* %263, i64 7
  %285 = load i32, i32* %171, align 4
  %286 = bitcast float* %284 to i32*
  store i32 %285, i32* %286, align 4
  %287 = getelementptr inbounds float, float* %263, i64 8
  %288 = icmp eq float* %170, %287
  br i1 %288, label %289, label %262, !llvm.loop !139

289:                                              ; preds = %259, %262, %237
  %290 = ptrtoint float* %169 to i64
  %291 = ptrtoint float* %170 to i64
  %292 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 0
  %293 = load float*, float** %292, align 8
  %294 = load i64, i64* %9, align 8
  %295 = ptrtoint float* %293 to i64
  %296 = sub i64 %294, %295
  %297 = ashr exact i64 %296, 2
  %298 = sub nsw i64 0, %297
  %299 = getelementptr inbounds float, float* %168, i64 %298
  %300 = ptrtoint float* %299 to i64
  %301 = icmp sgt i64 %296, 0
  br i1 %301, label %302, label %306

302:                                              ; preds = %289
  %303 = bitcast float* %299 to i8*
  %304 = bitcast float* %293 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %303, i8* align 4 %304, i64 %296, i1 false) #12
  %305 = load float*, float** %292, align 8
  br label %306

306:                                              ; preds = %289, %302
  %307 = phi float* [ %293, %289 ], [ %305, %302 ]
  store i64 %300, i64* %140, align 8
  store i64 %291, i64* %9, align 8
  store i64 %290, i64* %6, align 8
  %308 = icmp eq float* %307, null
  br i1 %308, label %311, label %309

309:                                              ; preds = %306
  %310 = bitcast float* %307 to i8*
  tail call void @_ZdlPv(i8* %310) #15
  br label %311

311:                                              ; preds = %309, %306, %137
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IfNS_9allocatorIfEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.211"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.211", %"class.std::__1::vector.211"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.205"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.211", %"class.std::__1::vector.211"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.205"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.205"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast float** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"class.std::__1::vector.205"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.211"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.211"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #14
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #15
  %52 = bitcast i8* %51 to %"class.std::__1::vector.205"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.205"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.205"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.205"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #12
  %64 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.205"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.205"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.205"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.205"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.211", %"class.std::__1::vector.211"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"** %70, align 8
  %72 = load %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.205"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.205"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.205"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.205"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.205"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #12
  %82 = bitcast %"class.std::__1::vector.205"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.205"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast float** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast float** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast float** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast float** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.205"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = icmp eq %"class.std::__1::vector.205"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.205"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.205"*, %"class.std::__1::vector.205"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.205"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.205"*
  %106 = icmp eq %"class.std::__1::vector.205"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.205"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %109, i64 0, i32 0, i32 0
  %111 = load float*, float** %110, align 8
  %112 = icmp eq float* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint float* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast float** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast float* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #15
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.205"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #15
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.205"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.205"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.205"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #12
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.205", %"class.std::__1::vector.205"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #12
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.169"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Plane.97"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 5
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Plane.97"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 32
  %25 = and i64 %24, -32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #12
  %26 = ptrtoint %"class.jxl::Plane.97"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %182

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 5
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 576460752303423487
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 5
  %41 = icmp ult i64 %40, 288230376151711743
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 4
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 576460752303423487
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 576460752303423487, %38 ]
  %52 = shl i64 %51, 5
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to %"class.jxl::Plane.97"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.jxl::Plane.97"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %57, i64 %33
  %59 = ptrtoint %"class.jxl::Plane.97"* %58 to i64
  %60 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %57, i64 %56
  %61 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %58, i64 %1
  %62 = shl nsw i64 %1, 5
  %63 = add i64 %62, -32
  %64 = lshr exact i64 %63, 5
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.jxl::Plane.97"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 32, i1 false) #12
  %73 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %69, i64 1
  %74 = ptrtoint %"class.jxl::Plane.97"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !140

77:                                               ; preds = %68
  %78 = ptrtoint %"class.jxl::Plane.97"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.jxl::Plane.97"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 224
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.jxl::Plane.97"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 32, i1 false) #12
  %87 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 1
  %88 = bitcast %"class.jxl::Plane.97"* %87 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 32, i1 false) #12
  %89 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 2
  %90 = bitcast %"class.jxl::Plane.97"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 32, i1 false) #12
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 3
  %92 = bitcast %"class.jxl::Plane.97"* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 32, i1 false) #12
  %93 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 4
  %94 = bitcast %"class.jxl::Plane.97"* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 32, i1 false) #12
  %95 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 5
  %96 = bitcast %"class.jxl::Plane.97"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 32, i1 false) #12
  %97 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 6
  %98 = bitcast %"class.jxl::Plane.97"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 32, i1 false) #12
  %99 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 7
  %100 = bitcast %"class.jxl::Plane.97"* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 32, i1 false) #12
  %101 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %84, i64 8
  %102 = ptrtoint %"class.jxl::Plane.97"* %101 to i64
  %103 = icmp eq %"class.jxl::Plane.97"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.jxl::Plane.97"* %60 to i64
  %106 = ptrtoint %"class.jxl::Plane.97"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %107, align 8
  %109 = ptrtoint %"class.jxl::Plane.97"* %108 to i64
  %110 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %6, align 8
  %111 = icmp eq %"class.jxl::Plane.97"* %110, %108
  br i1 %111, label %163, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %110, i64 -1, i32 0, i32 0
  %114 = ptrtoint i32* %113 to i64
  %115 = sub i64 %114, %109
  %116 = and i64 %115, 32
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %129

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %58, i64 -1
  %120 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %110, i64 -1
  %121 = bitcast %"class.jxl::Plane.97"* %119 to i8*
  %122 = bitcast %"class.jxl::Plane.97"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false) #12
  %123 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %58, i64 -1, i32 0, i32 5
  %124 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %110, i64 -1, i32 0, i32 5
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i8* null, i8** %125, align 8
  %128 = bitcast %"class.std::__1::unique_ptr"* %123 to i64*
  store i64 %127, i64* %128, align 8
  br label %129

129:                                              ; preds = %118, %112
  %130 = phi %"class.jxl::Plane.97"* [ undef, %112 ], [ %119, %118 ]
  %131 = phi %"class.jxl::Plane.97"* [ %58, %112 ], [ %119, %118 ]
  %132 = phi %"class.jxl::Plane.97"* [ %110, %112 ], [ %120, %118 ]
  %133 = icmp ult i64 %115, 32
  br i1 %133, label %158, label %134

134:                                              ; preds = %129, %134
  %135 = phi %"class.jxl::Plane.97"* [ %147, %134 ], [ %131, %129 ]
  %136 = phi %"class.jxl::Plane.97"* [ %148, %134 ], [ %132, %129 ]
  %137 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %135, i64 -1
  %138 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %136, i64 -1
  %139 = bitcast %"class.jxl::Plane.97"* %137 to i8*
  %140 = bitcast %"class.jxl::Plane.97"* %138 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 24, i1 false) #12
  %141 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %135, i64 -1, i32 0, i32 5
  %142 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %136, i64 -1, i32 0, i32 5
  %143 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %142, i64 0, i32 0, i32 0, i32 0
  %144 = bitcast %"class.std::__1::unique_ptr"* %142 to i64*
  %145 = load i64, i64* %144, align 8
  store i8* null, i8** %143, align 8
  %146 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %135, i64 -2
  %148 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %136, i64 -2
  %149 = bitcast %"class.jxl::Plane.97"* %147 to i8*
  %150 = bitcast %"class.jxl::Plane.97"* %148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 24, i1 false) #12
  %151 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %135, i64 -2, i32 0, i32 5
  %152 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %136, i64 -2, i32 0, i32 5
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = bitcast %"class.std::__1::unique_ptr"* %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i8* null, i8** %153, align 8
  %156 = bitcast %"class.std::__1::unique_ptr"* %151 to i64*
  store i64 %155, i64* %156, align 8
  %157 = icmp eq %"class.jxl::Plane.97"* %148, %108
  br i1 %157, label %158, label %134

158:                                              ; preds = %134, %129
  %159 = phi %"class.jxl::Plane.97"* [ %130, %129 ], [ %147, %134 ]
  %160 = ptrtoint %"class.jxl::Plane.97"* %159 to i64
  %161 = load i64, i64* %30, align 8
  %162 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %6, align 8
  br label %163

163:                                              ; preds = %104, %158
  %164 = phi %"class.jxl::Plane.97"* [ %162, %158 ], [ %108, %104 ]
  %165 = phi i64 [ %160, %158 ], [ %59, %104 ]
  %166 = phi i64 [ %161, %158 ], [ %109, %104 ]
  store i64 %165, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %167 = inttoptr i64 %166 to %"class.jxl::Plane.97"*
  %168 = icmp eq %"class.jxl::Plane.97"* %164, %167
  br i1 %168, label %178, label %169

169:                                              ; preds = %163, %176
  %170 = phi %"class.jxl::Plane.97"* [ %171, %176 ], [ %164, %163 ]
  %171 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %170, i64 -1
  %172 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %170, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  store i8* null, i8** %172, align 8
  %174 = icmp eq i8* %173, null
  br i1 %174, label %176, label %175

175:                                              ; preds = %169
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %173) #12
  br label %176

176:                                              ; preds = %175, %169
  %177 = icmp eq %"class.jxl::Plane.97"* %171, %167
  br i1 %177, label %178, label %169

178:                                              ; preds = %176, %163
  %179 = icmp eq i64 %166, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %178
  %181 = inttoptr i64 %166 to i8*
  tail call void @_ZdlPv(i8* %181) #15
  br label %182

182:                                              ; preds = %180, %178, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #0 align 2 {
  %3 = bitcast i8* %0 to %class.anon.358**
  %4 = load %class.anon.358*, %class.anon.358** %3, align 8
  %5 = getelementptr inbounds %class.anon.358, %class.anon.358* %4, i64 0, i32 0
  %6 = load %"class.jxl::FrameDecoder"*, %"class.jxl::FrameDecoder"** %5, align 8
  %7 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 14
  %8 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 14, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.98"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = icmp ult i64 %13, %1
  %15 = select i1 %14, i64 %13, i64 %1
  %16 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 22
  %17 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 22, i32 0, i32 1
  %18 = bitcast %"struct.jxl::GroupDecCache"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector.274"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = sdiv exact i64 %22, 1168
  %24 = icmp ugt i64 %15, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = sub i64 %15, %23
  tail call void @_ZNSt3__16vectorIN3jxl13GroupDecCacheENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.274"* %16, i64 %26) #12
  br label %27

27:                                               ; preds = %2, %25
  %28 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 0
  %29 = load %"struct.jxl::PassesDecoderState"*, %"struct.jxl::PassesDecoderState"** %28, align 8
  tail call void @_ZN3jxl18PassesDecoderState13EnsureStorageEm(%"struct.jxl::PassesDecoderState"* %29, i64 %15) #12
  %30 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %6, i64 0, i32 24
  %31 = zext i1 %14 to i8
  store i8 %31, i8* %30, align 8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_12FrameDecoder5FlushEvE3$_3ZNS2_5FlushEvE3$_4E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #0 align 2 {
  %4 = alloca [11 x %"class.jxl::BitReader"*], align 16
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.359**
  %7 = load %class.anon.359*, %class.anon.359** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.359, %class.anon.359* %7, i64 0, i32 0
  %10 = load %"class.jxl::FrameDecoder"*, %"class.jxl::FrameDecoder"** %9, align 8
  %11 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 14, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %8
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 5, i32 12, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, %15
  br i1 %18, label %36, label %19

19:                                               ; preds = %3
  %20 = bitcast [11 x %"class.jxl::BitReader"*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %20) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 88, i1 false) #12
  %21 = getelementptr inbounds [11 x %"class.jxl::BitReader"*], [11 x %"class.jxl::BitReader"*]* %4, i64 0, i64 0
  %22 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 24
  %23 = load i8, i8* %22, align 8, !range !9
  %24 = icmp eq i8 %23, 0
  %25 = select i1 %24, i64 %2, i64 %8
  %26 = getelementptr inbounds %"class.jxl::FrameDecoder", %"class.jxl::FrameDecoder"* %10, i64 0, i32 17
  %27 = load i8, i8* %26, align 1, !range !9
  %28 = icmp eq i8 %27, 0
  %29 = call i32 @_ZN3jxl12FrameDecoder14ProcessACGroupEmPrPNS_9BitReaderEmmbb(%"class.jxl::FrameDecoder"* %10, i64 %8, %"class.jxl::BitReader"** nonnull %21, i64 0, i64 %25, i1 zeroext true, i1 zeroext %28) #12
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %19
  %32 = getelementptr inbounds %class.anon.359, %class.anon.359* %7, i64 0, i32 1
  %33 = load %"struct.std::__1::atomic.350"*, %"struct.std::__1::atomic.350"** %32, align 8
  %34 = getelementptr inbounds %"struct.std::__1::atomic.350", %"struct.std::__1::atomic.350"* %33, i64 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 1, i8* %34 seq_cst, align 1
  br label %35

35:                                               ; preds = %31, %19
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %20) #12
  br label %36

36:                                               ; preds = %3, %35
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.169"*, %"class.jxl::Plane.97"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane.97"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.169"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.169"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane.97"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %"class.jxl::Plane.97"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane.97"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane.97"* %38 to i64
  %40 = bitcast %"class.jxl::Plane.97"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane.97"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane.97"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.169", %"class.std::__1::vector.169"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane.97"* %51 to i64
  %53 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane.97"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane.97"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane.97"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #12
  %66 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane.97"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane.97"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane.97"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane.97"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane.97"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane.97"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane.97"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #12
  %84 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane.97"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane.97"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #12
  %94 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane.97"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane.97"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane.97"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane.97"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane.97"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane.97"*
  %111 = icmp eq %"class.jxl::Plane.97"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane.97"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane.97", %"class.jxl::Plane.97"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #12
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane.97"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #15
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #13

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #13

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #13

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE: argument 1"}
!4 = distinct !{!4, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE"}
!5 = !{!6}
!6 = distinct !{!6, !4, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE: argument 0"}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{i8 0, i8 2}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE: argument 1"}
!12 = distinct !{!12, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE"}
!13 = !{!14}
!14 = distinct !{!14, !12, !"_ZN3jxl17DecodeFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE: argument 0"}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !20, !16}
!20 = !{!"llvm.loop.unroll.runtime.disable"}
!21 = distinct !{!21, !16}
!22 = distinct !{!22, !18}
!23 = distinct !{!23, !20, !16}
!24 = distinct !{!24, !16}
!25 = distinct !{!25, !18}
!26 = distinct !{!26, !20, !16}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!29 = distinct !{!29, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!35 = distinct !{!35, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3jxl15ModularStreamId9ModularDCEm: argument 0"}
!41 = distinct !{!41, !"_ZN3jxl15ModularStreamId9ModularDCEm"}
!42 = !{i64 0, i64 65}
!43 = !{i32 0, i32 33}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN3jxl15ModularStreamId9ModularACEmm: argument 0"}
!46 = distinct !{!46, !"_ZN3jxl15ModularStreamId9ModularACEmm"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3jxl15ModularStreamId9ModularACEmm: argument 0"}
!49 = distinct !{!49, !"_ZN3jxl15ModularStreamId9ModularACEmm"}
!50 = !{!51, !53}
!51 = distinct !{!51, !52, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!52 = distinct !{!52, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!53 = distinct !{!53, !54, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!54 = distinct !{!54, !"_ZN3hwy15AllocateAlignedIfEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!55 = !{!56, !58}
!56 = distinct !{!56, !57, !"_ZN3hwy15AllocateAlignedIiEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!57 = distinct !{!57, !"_ZN3hwy15AllocateAlignedIiEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!58 = distinct !{!58, !59, !"_ZN3hwy15AllocateAlignedIiEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!59 = distinct !{!59, !"_ZN3hwy15AllocateAlignedIiEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!60 = !{!61, !63}
!61 = distinct !{!61, !62, !"_ZN3hwy15AllocateAlignedIsEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_: argument 0"}
!62 = distinct !{!62, !"_ZN3hwy15AllocateAlignedIsEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEmPFPvS7_mEPFvS7_S7_ES7_"}
!63 = distinct !{!63, !64, !"_ZN3hwy15AllocateAlignedIsEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm: argument 0"}
!64 = distinct !{!64, !"_ZN3hwy15AllocateAlignedIsEENSt3__110unique_ptrIA_T_NS_12AlignedFreerEEEm"}
!65 = distinct !{!65, !18}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!68 = distinct !{!68, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!69 = !{!70, !67}
!70 = distinct !{!70, !71, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!71 = distinct !{!71, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!74 = distinct !{!74, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!77 = distinct !{!77, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!80 = distinct !{!80, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!83 = distinct !{!83, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!86 = distinct !{!86, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!87 = !{!88}
!88 = distinct !{!88, !89, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!89 = distinct !{!89, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!90 = !{!91}
!91 = distinct !{!91, !92, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!92 = distinct !{!92, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!93 = !{!94}
!94 = distinct !{!94, !95, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!95 = distinct !{!95, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!98 = distinct !{!98, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!101 = distinct !{!101, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!102 = !{!103}
!103 = distinct !{!103, !104, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!104 = distinct !{!104, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!107 = distinct !{!107, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
!108 = distinct !{!108, !18}
!109 = distinct !{!109, !18}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !16}
!116 = distinct !{!116, !16}
!117 = !{!118}
!118 = distinct !{!118, !119}
!119 = distinct !{!119, !"LVerDomain"}
!120 = !{!121}
!121 = distinct !{!121, !119}
!122 = distinct !{!122, !16}
!123 = distinct !{!123, !16}
!124 = distinct !{!124, !18}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !16}
!131 = distinct !{!131, !16}
!132 = !{!133}
!133 = distinct !{!133, !134}
!134 = distinct !{!134, !"LVerDomain"}
!135 = !{!136}
!136 = distinct !{!136, !134}
!137 = distinct !{!137, !16}
!138 = distinct !{!138, !18}
!139 = distinct !{!139, !16}
!140 = distinct !{!140, !18}
