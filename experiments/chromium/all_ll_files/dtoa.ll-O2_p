; ModuleID = '../../third_party/blink/renderer/platform/wtf/dtoa.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/dtoa.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.double_conversion::StringToDoubleConverter" = type <{ i32, [4 x i8], double, double, i8*, i8*, i16, [6 x i8] }>
%"class.double_conversion::StringBuilder" = type { %"class.double_conversion::Vector", i32, [4 x i8] }
%"class.double_conversion::Vector" = type <{ i8*, i32, [4 x i8] }>
%"class.double_conversion::DoubleToStringConverter" = type { i32, i8*, i8*, i8, i32, i32, i32, i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZZN3WTF8internal18GetDoubleConverterEvE9converter = internal global %"class.double_conversion::StringToDoubleConverter" zeroinitializer, align 8
@_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter = internal global i64 0, align 8
@.str = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF14NumberToStringEdPc(double, i8*) local_unnamed_addr #0 {
  %3 = alloca %"class.double_conversion::StringBuilder", align 8
  %4 = bitcast %"class.double_conversion::StringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %3, i64 0, i32 1
  %8 = bitcast %"class.double_conversion::StringBuilder"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  store i8* %1, i8** %5, align 8
  store i32 96, i32* %6, align 8
  store i32 0, i32* %7, align 8
  %9 = tail call dereferenceable(48) %"class.double_conversion::DoubleToStringConverter"* @_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv() #9
  %10 = call zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter20ToShortestIeeeNumberEdPNS_13StringBuilderENS0_8DtoaModeE(%"class.double_conversion::DoubleToStringConverter"* %9, double %0, %"class.double_conversion::StringBuilder"* nonnull %3, i32 0) #9
  %11 = load i32, i32* %7, align 8
  %12 = load i8*, i8** %5, align 8
  %13 = sext i32 %11 to i64
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8 0, i8* %14, align 1
  store i32 -1, i32* %7, align 8
  %15 = load i8*, i8** %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret i8* %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(48) %"class.double_conversion::DoubleToStringConverter"* @_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF28NumberToFixedPrecisionStringEdjPc(double, i32, i8*) local_unnamed_addr #0 {
  %4 = alloca %"class.double_conversion::StringBuilder", align 8
  %5 = bitcast %"class.double_conversion::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 1
  %9 = bitcast %"class.double_conversion::StringBuilder"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  store i8* %2, i8** %6, align 8
  store i32 96, i32* %7, align 8
  store i32 0, i32* %8, align 8
  %10 = tail call dereferenceable(48) %"class.double_conversion::DoubleToStringConverter"* @_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv() #9
  %11 = call zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter11ToPrecisionEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %10, double %0, i32 %1, %"class.double_conversion::StringBuilder"* nonnull %4) #9
  %12 = load i32, i32* %8, align 8
  %13 = sext i32 %12 to i64
  %14 = call i8* @memchr(i8* %2, i32 101, i64 %13) #10
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %20

16:                                               ; preds = %3
  %17 = icmp sgt i32 %12, 0
  br i1 %17, label %18, label %36

18:                                               ; preds = %16
  %19 = zext i32 %12 to i64
  br label %24

20:                                               ; preds = %3
  %21 = load i8*, i8** %6, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %13
  store i8 0, i8* %22, align 1
  store i32 -1, i32* %8, align 8
  %23 = load i8*, i8** %6, align 8
  br label %84

24:                                               ; preds = %30, %18
  %25 = phi i64 [ 0, %18 ], [ %31, %30 ]
  %26 = phi i32 [ 0, %18 ], [ %32, %30 ]
  %27 = getelementptr inbounds i8, i8* %2, i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 46
  br i1 %29, label %34, label %30

30:                                               ; preds = %24
  %31 = add nuw nsw i64 %25, 1
  %32 = add nuw nsw i32 %26, 1
  %33 = icmp eq i64 %31, %19
  br i1 %33, label %36, label %24

34:                                               ; preds = %24
  %35 = trunc i64 %25 to i32
  br label %36

36:                                               ; preds = %30, %34, %16
  %37 = phi i32 [ 0, %16 ], [ %35, %34 ], [ %32, %30 ]
  %38 = icmp eq i32 %37, %12
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = load i8*, i8** %6, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %13
  store i8 0, i8* %41, align 1
  store i32 -1, i32* %8, align 8
  %42 = load i8*, i8** %6, align 8
  br label %84

43:                                               ; preds = %36
  %44 = add i32 %12, -1
  %45 = icmp sgt i32 %44, %37
  br i1 %45, label %46, label %64

46:                                               ; preds = %43
  %47 = sext i32 %44 to i64
  %48 = sext i32 %37 to i64
  br label %49

49:                                               ; preds = %55, %46
  %50 = phi i64 [ %47, %46 ], [ %56, %55 ]
  %51 = phi i32 [ %44, %46 ], [ %57, %55 ]
  %52 = getelementptr inbounds i8, i8* %2, i64 %50
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 48
  br i1 %54, label %55, label %59

55:                                               ; preds = %49
  %56 = add nsw i64 %50, -1
  %57 = add nsw i32 %51, -1
  %58 = icmp sgt i64 %56, %48
  br i1 %58, label %49, label %61

59:                                               ; preds = %49
  %60 = trunc i64 %50 to i32
  br label %61

61:                                               ; preds = %55, %59
  %62 = phi i32 [ %60, %59 ], [ %57, %55 ]
  %63 = icmp eq i32 %62, %44
  br i1 %63, label %64, label %68

64:                                               ; preds = %61, %43
  %65 = load i8*, i8** %6, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %13
  store i8 0, i8* %66, align 1
  store i32 -1, i32* %8, align 8
  %67 = load i8*, i8** %6, align 8
  br label %84

68:                                               ; preds = %61
  %69 = icmp eq i32 %62, %37
  %70 = load i8*, i8** %6, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 %13
  store i8 0, i8* %71, align 1
  store i32 -1, i32* %8, align 8
  %72 = load i8*, i8** %6, align 8
  %73 = add i32 %62, 1
  %74 = zext i1 %69 to i32
  %75 = sub i32 %73, %74
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %72, i64 %76
  store i8 0, i8* %77, align 1
  %78 = load i32, i32* %8, align 8
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %84, label %80

80:                                               ; preds = %68
  %81 = load i8*, i8** %6, align 8
  %82 = sext i32 %78 to i64
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  store i8 0, i8* %83, align 1
  store i32 -1, i32* %8, align 8
  br label %84

84:                                               ; preds = %64, %39, %20, %68, %80
  %85 = phi i8* [ %72, %68 ], [ %72, %80 ], [ %67, %64 ], [ %42, %39 ], [ %23, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret i8* %85
}

declare zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter11ToPrecisionEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"*, double, i32, %"class.double_conversion::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF24NumberToFixedWidthStringEdjPc(double, i32, i8*) local_unnamed_addr #0 {
  %4 = alloca %"class.double_conversion::StringBuilder", align 8
  %5 = bitcast %"class.double_conversion::StringBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.double_conversion::StringBuilder", %"class.double_conversion::StringBuilder"* %4, i64 0, i32 1
  %9 = bitcast %"class.double_conversion::StringBuilder"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  store i8* %2, i8** %6, align 8
  store i32 96, i32* %7, align 8
  store i32 0, i32* %8, align 8
  %10 = tail call dereferenceable(48) %"class.double_conversion::DoubleToStringConverter"* @_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv() #9
  %11 = call zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter7ToFixedEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"* %10, double %0, i32 %1, %"class.double_conversion::StringBuilder"* nonnull %4) #9
  %12 = load i32, i32* %8, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = sext i32 %12 to i64
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  store i8 0, i8* %15, align 1
  store i32 -1, i32* %8, align 8
  %16 = load i8*, i8** %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret i8* %16
}

declare zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter7ToFixedEdiPNS_13StringBuilderE(%"class.double_conversion::DoubleToStringConverter"*, double, i32, %"class.double_conversion::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN3WTF8internal25ParseDoubleFromLongStringEPKDsmRm(i16* nocapture readonly, i64, i64* nocapture dereferenceable(8)) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca %"class.WTF::Vector", align 8
  %6 = icmp ult i64 %1, 4294967296
  br i1 %6, label %8, label %7, !prof !2

7:                                                ; preds = %3
  tail call void @llvm.trap() #9
  unreachable

8:                                                ; preds = %3
  %9 = trunc i64 %1 to i32
  %10 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #9
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 0, i32 0, i32 0, i32 2
  %14 = bitcast %"class.WTF::Vector"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false)
  store i8* null, i8** %11, align 8
  store i32 0, i32* %12, align 8
  %15 = icmp eq i32 %9, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  store i32 %9, i32* %13, align 4
  br label %27

17:                                               ; preds = %8
  %18 = and i64 %1, 4294967295
  %19 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %18) #9
  %20 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %19, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #9
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast %"class.WTF::Vector"* %5 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = trunc i64 %19 to i32
  store i32 %23, i32* %12, align 8
  store i32 %9, i32* %13, align 4
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 0, i64 %18, i1 false) #9
  %24 = and i64 %1, 4294967295
  br label %55

25:                                               ; preds = %55
  %26 = load i8*, i8** %11, align 8
  br label %27

27:                                               ; preds = %16, %25
  %28 = phi i8* [ %26, %25 ], [ null, %16 ]
  %29 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #9
  store i32 0, i32* %4, align 4
  %30 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter to i8*) acquire, align 8
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %36, !prof !3

32:                                               ; preds = %27
  %33 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter) #9
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  store i32 12, i32* getelementptr inbounds (%"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* @_ZZN3WTF8internal18GetDoubleConverterEvE9converter, i64 0, i32 0), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (double* getelementptr inbounds (%"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* @_ZZN3WTF8internal18GetDoubleConverterEvE9converter, i64 0, i32 2) to i8*), i8 0, i64 34, i1 false) #9
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter) #9
  br label %36

36:                                               ; preds = %27, %32, %35
  %37 = call i1 @llvm.is.constant.i64(i64 %1) #9
  %38 = icmp ult i64 %1, 2147483648
  %39 = select i1 %38, i32 %9, i32 2147483647
  %40 = icmp ult i64 %1, 2147483647
  %41 = select i1 %40, i64 %1, i64 2147483647
  %42 = trunc i64 %41 to i32
  %43 = select i1 %37, i32 %42, i32 %39
  %44 = call double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"* nonnull @_ZZN3WTF8internal18GetDoubleConverterEvE9converter, i8* %28, i32 %43, i32* nonnull %4) #9
  %45 = load i32, i32* %4, align 4
  %46 = sext i32 %45 to i64
  store i64 %46, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #9
  %47 = load i8*, i8** %11, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %54, label %49, !prof !2

49:                                               ; preds = %36
  %50 = load i32, i32* %13, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %53, label %52, !prof !4

52:                                               ; preds = %49
  store i32 0, i32* %13, align 4
  br label %53

53:                                               ; preds = %52, %49
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %47) #9
  store i8* null, i8** %11, align 8
  br label %54

54:                                               ; preds = %36, %53
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #9
  ret double %44

55:                                               ; preds = %55, %17
  %56 = phi i64 [ 0, %17 ], [ %64, %55 ]
  %57 = getelementptr inbounds i16, i16* %0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = icmp ult i16 %58, 128
  %60 = trunc i16 %58 to i8
  %61 = select i1 %59, i8 %60, i8 0
  %62 = trunc i64 %56 to i32
  %63 = call dereferenceable(1) i8* @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %5, i32 %62) #9
  store i8 %61, i8* %63, align 1
  %64 = add nuw nsw i64 %56, 1
  %65 = icmp eq i64 %64, %24
  br i1 %65, label %25, label %55
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden nonnull dereferenceable(48) %"class.double_conversion::StringToDoubleConverter"* @_ZN3WTF8internal18GetDoubleConverterEv() local_unnamed_addr #3 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !3

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter) #9
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  store i32 12, i32* getelementptr inbounds (%"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* @_ZZN3WTF8internal18GetDoubleConverterEvE9converter, i64 0, i32 0), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (double* getelementptr inbounds (%"class.double_conversion::StringToDoubleConverter", %"class.double_conversion::StringToDoubleConverter"* @_ZZN3WTF8internal18GetDoubleConverterEvE9converter, i64 0, i32 2) to i8*), i8 0, i64 34, i1 false)
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF8internal18GetDoubleConverterEvE9converter) #9
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.double_conversion::StringToDoubleConverter"* @_ZZN3WTF8internal18GetDoubleConverterEvE9converter
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

declare zeroext i1 @_ZNK17double_conversion23DoubleToStringConverter20ToShortestIeeeNumberEdPNS_13StringBuilderENS0_8DtoaModeE(%"class.double_conversion::DoubleToStringConverter"*, double, %"class.double_conversion::StringBuilder"*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #5

declare double @_ZNK17double_conversion23StringToDoubleConverter14StringToDoubleEPKciPi(%"class.double_conversion::StringToDoubleConverter"*, i8*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #6

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #9
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 1048575}
!4 = !{!"branch_weights", i32 1, i32 2000}
