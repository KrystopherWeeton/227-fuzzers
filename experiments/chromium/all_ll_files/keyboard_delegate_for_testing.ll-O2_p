; ModuleID = '../../chrome/browser/vr/keyboard_delegate_for_testing.cc'
source_filename = "../../chrome/browser/vr/keyboard_delegate_for_testing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.vr::KeyboardDelegateForTesting" = type <{ %"class.vr::KeyboardDelegate", %"class.vr::KeyboardUiInterface"*, %"class.std::__1::queue", %"struct.vr::TextInputInfo", i8, i8, [6 x i8] }>
%"class.vr::KeyboardDelegate" = type { i32 (...)** }
%"class.vr::KeyboardUiInterface" = type { i32 (...)** }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::__split_buffer" = type { %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"**, %"class.std::__1::__compressed_pair.1" }
%"struct.vr::KeyboardTestInput" = type { i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.vr::KeyboardTestInput"** }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"struct.vr::TextInputInfo" = type { %"class.std::__1::basic_string.11", i32, i32, i32, i32 }
%"class.std::__1::basic_string.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.14 }
%union.anon.14 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.15 }
%struct.anon.15 = type { %"struct.std::__1::__padding.16", i8 }
%"struct.std::__1::__padding.16" = type { [1 x i8] }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.gfx::Transform" = type opaque
%"class.gfx::Point3F" = type opaque
%"struct.vr::EditedText" = type { %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.vr::CameraModel" = type opaque
%"class.gfx::PointF" = type { float, float }
%"struct.std::__1::__split_buffer.22" = type { %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"**, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::allocator.4"* }
%"class.std::__1::allocator.4" = type { i8 }

$_ZN2vr16KeyboardDelegate19OnTouchStateUpdatedEbRKN3gfx6PointFE = comdat any

$_ZN2vr16KeyboardDelegate12OnHoverEnterERKN3gfx6PointFE = comdat any

$_ZN2vr16KeyboardDelegate12OnHoverLeaveEv = comdat any

$_ZN2vr16KeyboardDelegate11OnHoverMoveERKN3gfx6PointFE = comdat any

$_ZN2vr16KeyboardDelegate12OnButtonDownERKN3gfx6PointFE = comdat any

$_ZN2vr16KeyboardDelegate10OnButtonUpERKN3gfx6PointFE = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__112__deque_baseIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE5clearEv = comdat any

$_ZNSt3__15dequeIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertEmPKDsm = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7replaceEmmPKDsm = comdat any

@_ZTVN2vr26KeyboardDelegateForTestingE = hidden unnamed_addr constant { [19 x i8*] } { [19 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTestingD2Ev to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTestingD0Ev to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*, %"class.vr::KeyboardUiInterface"*)* @_ZN2vr26KeyboardDelegateForTesting14SetUiInterfaceEPNS_19KeyboardUiInterfaceE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTesting12ShowKeyboardEv to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTesting12HideKeyboardEv to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*, %"class.gfx::Transform"*)* @_ZN2vr26KeyboardDelegateForTesting12SetTransformERKN3gfx9TransformE to i8*), i8* bitcast (i1 (%"class.vr::KeyboardDelegateForTesting"*, %"class.gfx::Point3F"*, %"class.gfx::Point3F"*, %"class.gfx::Point3F"*)* @_ZN2vr26KeyboardDelegateForTesting7HitTestERKN3gfx7Point3FES4_PS2_ to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTesting12OnBeginFrameEv to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*, %"struct.vr::CameraModel"*)* @_ZN2vr26KeyboardDelegateForTesting4DrawERKNS_11CameraModelE to i8*), i8* bitcast (i1 (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTesting17SupportsSelectionEv to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*, i1, %"class.gfx::PointF"*)* @_ZN2vr16KeyboardDelegate19OnTouchStateUpdatedEbRKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"*)* @_ZN2vr16KeyboardDelegate12OnHoverEnterERKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*)* @_ZN2vr16KeyboardDelegate12OnHoverLeaveEv to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"*)* @_ZN2vr16KeyboardDelegate11OnHoverMoveERKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"*)* @_ZN2vr16KeyboardDelegate12OnButtonDownERKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"*)* @_ZN2vr16KeyboardDelegate10OnButtonUpERKN3gfx6PointFE to i8*), i8* bitcast (void (%"class.vr::KeyboardDelegateForTesting"*, %"struct.vr::TextInputInfo"*)* @_ZN2vr26KeyboardDelegateForTesting11UpdateInputERKNS_13TextInputInfoE to i8*)] }, align 8

@_ZN2vr26KeyboardDelegateForTestingC1Ev = hidden unnamed_addr alias void (%"class.vr::KeyboardDelegateForTesting"*), void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTestingC2Ev
@_ZN2vr26KeyboardDelegateForTestingD1Ev = hidden unnamed_addr alias void (%"class.vr::KeyboardDelegateForTesting"*), void (%"class.vr::KeyboardDelegateForTesting"*)* @_ZN2vr26KeyboardDelegateForTestingD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTestingC2Ev(%"class.vr::KeyboardDelegateForTesting"*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.vr::TextInputInfo", align 8
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2vr26KeyboardDelegateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2
  %5 = bitcast %"class.std::__1::queue"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 48, i1 false) #11
  %6 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3
  tail call void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"* %6) #11
  %7 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 4
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 5
  store i8 0, i8* %8, align 1
  %9 = bitcast %"struct.vr::TextInputInfo"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #11
  call void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"* nonnull %2) #11
  %10 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %6, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %2, i64 0, i32 0
  %12 = call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.11"* %10, %"class.std::__1::basic_string.11"* nonnull dereferenceable(24) %11) #11
  %13 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 1
  %14 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %2, i64 0, i32 1
  %15 = bitcast i32* %13 to i8*
  %16 = bitcast i32* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false) #11
  %17 = bitcast %"struct.vr::TextInputInfo"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %17, i64 0, i32 1, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %1
  %22 = bitcast %"struct.vr::TextInputInfo"* %2 to i8**
  %23 = load i8*, i8** %22, align 8
  call void @_ZdlPv(i8* %23) #12
  br label %24

24:                                               ; preds = %1, %21
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #11
  ret void
}

declare void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTestingD2Ev(%"class.vr::KeyboardDelegateForTesting"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2vr26KeyboardDelegateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3
  %4 = bitcast %"struct.vr::TextInputInfo"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = bitcast %"struct.vr::TextInputInfo"* %3 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %1, %8
  %12 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__112__deque_baseIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %13) #11
  %14 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %15 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %14, align 8
  %16 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %17 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %16, align 8
  %18 = icmp eq %"struct.vr::KeyboardTestInput"** %15, %17
  br i1 %18, label %37, label %19

19:                                               ; preds = %11, %19
  %20 = phi %"struct.vr::KeyboardTestInput"** [ %23, %19 ], [ %15, %11 ]
  %21 = bitcast %"struct.vr::KeyboardTestInput"** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #12
  %23 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %20, i64 1
  %24 = icmp eq %"struct.vr::KeyboardTestInput"** %23, %17
  br i1 %24, label %25, label %19

25:                                               ; preds = %19
  %26 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %14, align 8
  %27 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %16, align 8
  %28 = icmp eq %"struct.vr::KeyboardTestInput"** %27, %26
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = ptrtoint %"struct.vr::KeyboardTestInput"** %26 to i64
  %31 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %27, i64 -1
  %32 = ptrtoint %"struct.vr::KeyboardTestInput"** %31 to i64
  %33 = sub i64 %32, %30
  %34 = lshr i64 %33, 3
  %35 = xor i64 %34, -1
  %36 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %27, i64 %35
  store %"struct.vr::KeyboardTestInput"** %36, %"struct.vr::KeyboardTestInput"*** %16, align 8
  br label %37

37:                                               ; preds = %29, %25, %11
  %38 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %38, align 8
  %40 = icmp eq %"struct.vr::KeyboardTestInput"** %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = bitcast %"struct.vr::KeyboardTestInput"** %39 to i8*
  tail call void @_ZdlPv(i8* %42) #12
  br label %43

43:                                               ; preds = %37, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTestingD0Ev(%"class.vr::KeyboardDelegateForTesting"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2vr26KeyboardDelegateForTestingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3
  %4 = bitcast %"struct.vr::TextInputInfo"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = bitcast %"struct.vr::TextInputInfo"* %3 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %8, %1
  %12 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__112__deque_baseIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %13) #11
  %14 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %15 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %14, align 8
  %16 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %17 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %16, align 8
  %18 = icmp eq %"struct.vr::KeyboardTestInput"** %15, %17
  br i1 %18, label %37, label %19

19:                                               ; preds = %11, %19
  %20 = phi %"struct.vr::KeyboardTestInput"** [ %23, %19 ], [ %15, %11 ]
  %21 = bitcast %"struct.vr::KeyboardTestInput"** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #12
  %23 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %20, i64 1
  %24 = icmp eq %"struct.vr::KeyboardTestInput"** %23, %17
  br i1 %24, label %25, label %19

25:                                               ; preds = %19
  %26 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %14, align 8
  %27 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %16, align 8
  %28 = icmp eq %"struct.vr::KeyboardTestInput"** %27, %26
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = ptrtoint %"struct.vr::KeyboardTestInput"** %26 to i64
  %31 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %27, i64 -1
  %32 = ptrtoint %"struct.vr::KeyboardTestInput"** %31 to i64
  %33 = sub i64 %32, %30
  %34 = lshr i64 %33, 3
  %35 = xor i64 %34, -1
  %36 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %27, i64 %35
  store %"struct.vr::KeyboardTestInput"** %36, %"struct.vr::KeyboardTestInput"*** %16, align 8
  br label %37

37:                                               ; preds = %29, %25, %11
  %38 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %38, align 8
  %40 = icmp eq %"struct.vr::KeyboardTestInput"** %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %37
  %42 = bitcast %"struct.vr::KeyboardTestInput"** %39 to i8*
  tail call void @_ZdlPv(i8* %42) #12
  br label %43

43:                                               ; preds = %37, %41
  %44 = bitcast %"class.vr::KeyboardDelegateForTesting"* %0 to i8*
  tail call void @_ZdlPv(i8* %44) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTesting28QueueKeyboardInputForTestingENS_17KeyboardTestInputE(%"class.vr::KeyboardDelegateForTesting"*, %"struct.vr::KeyboardTestInput"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %4 = bitcast %"struct.vr::KeyboardTestInput"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.vr::KeyboardTestInput"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp eq i64 %9, 0
  %11 = shl i64 %9, 4
  %12 = add i64 %11, -1
  %13 = select i1 %10, i64 0, i64 %12
  %14 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  %19 = icmp eq i64 %13, %18
  %20 = inttoptr i64 %8 to %"struct.vr::KeyboardTestInput"**
  %21 = inttoptr i64 %5 to %"struct.vr::KeyboardTestInput"**
  br i1 %19, label %22, label %29

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0
  tail call void @_ZNSt3__15dequeIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %23) #11
  %24 = load i64, i64* %16, align 8
  %25 = load i64, i64* %14, align 8
  %26 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %6, align 8
  %27 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %28 = add i64 %25, %24
  br label %29

29:                                               ; preds = %22, %2
  %30 = phi i64 [ %28, %22 ], [ %18, %2 ]
  %31 = phi %"struct.vr::KeyboardTestInput"** [ %27, %22 ], [ %21, %2 ]
  %32 = phi %"struct.vr::KeyboardTestInput"** [ %26, %22 ], [ %20, %2 ]
  %33 = icmp eq %"struct.vr::KeyboardTestInput"** %31, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = lshr i64 %30, 7
  %36 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %32, i64 %35
  %37 = load %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %36, align 8
  %38 = and i64 %30, 127
  %39 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %37, i64 %38
  br label %40

40:                                               ; preds = %34, %29
  %41 = phi %"struct.vr::KeyboardTestInput"* [ %39, %34 ], [ null, %29 ]
  %42 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %41, i64 0, i32 0
  %43 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %1, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %42, align 8
  %45 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %41, i64 0, i32 1
  %46 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %1, i64 0, i32 1
  %47 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %40
  %52 = bitcast %"class.std::__1::basic_string"* %45 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %46 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #11
  br label %59

54:                                               ; preds = %40
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %45, i8* %56, i64 %58) #11
  br label %59

59:                                               ; preds = %51, %54
  %60 = load i64, i64* %16, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %16, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2vr26KeyboardDelegateForTesting12IsQueueEmptyEv(%"class.vr::KeyboardDelegateForTesting"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2vr26KeyboardDelegateForTesting14SetUiInterfaceEPNS_19KeyboardUiInterfaceE(%"class.vr::KeyboardDelegateForTesting"* nocapture, %"class.vr::KeyboardUiInterface"*) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 1
  store %"class.vr::KeyboardUiInterface"* %1, %"class.vr::KeyboardUiInterface"** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2vr26KeyboardDelegateForTesting12ShowKeyboardEv(%"class.vr::KeyboardDelegateForTesting"* nocapture) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 4
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2vr26KeyboardDelegateForTesting12HideKeyboardEv(%"class.vr::KeyboardDelegateForTesting"* nocapture) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 4
  store i8 0, i8* %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTesting12SetTransformERKN3gfx9TransformE(%"class.vr::KeyboardDelegateForTesting"* nocapture, %"class.gfx::Transform"* nocapture) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2vr26KeyboardDelegateForTesting7HitTestERKN3gfx7Point3FES4_PS2_(%"class.vr::KeyboardDelegateForTesting"* nocapture readnone, %"class.gfx::Point3F"* nocapture readnone, %"class.gfx::Point3F"* nocapture readnone, %"class.gfx::Point3F"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTesting12OnBeginFrameEv(%"class.vr::KeyboardDelegateForTesting"*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.vr::KeyboardTestInput", align 8
  %3 = alloca %"struct.vr::TextInputInfo", align 8
  %4 = alloca %"class.std::__1::basic_string.11", align 8
  %5 = alloca %"class.std::__1::basic_string.11", align 8
  %6 = alloca %"class.std::__1::basic_string.11", align 8
  %7 = alloca %"struct.vr::TextInputInfo", align 8
  %8 = alloca %"class.std::__1::basic_string.11", align 8
  %9 = alloca %"struct.vr::TextInputInfo", align 8
  %10 = alloca %"class.std::__1::basic_string.11", align 8
  %11 = alloca %"struct.vr::EditedText", align 8
  %12 = alloca %"struct.vr::EditedText", align 8
  %13 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 4
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %1386, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %1386, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 5
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %1386

24:                                               ; preds = %20
  %25 = bitcast %"struct.vr::KeyboardTestInput"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 32, i1 false)
  %26 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %27 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %26, align 8
  %28 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 7
  %31 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %27, i64 %30
  %32 = load %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %31, align 8
  %33 = and i64 %29, 127
  %34 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %2, i64 0, i32 0
  %35 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %32, i64 %33, i32 0
  %36 = load i32, i32* %35, align 8
  store i32 %36, i32* %34, align 8
  %37 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %2, i64 0, i32 1
  %38 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %32, i64 %33, i32 1
  %39 = bitcast %"class.std::__1::basic_string"* %38 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %24
  %44 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %45 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false) #11
  br label %55

46:                                               ; preds = %24
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %32, i64 %33, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %37, i8* %48, i64 %50) #11
  %51 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %26, align 8
  %52 = load i64, i64* %28, align 8
  %53 = lshr i64 %52, 7
  %54 = and i64 %52, 127
  br label %55

55:                                               ; preds = %43, %46
  %56 = phi i64 [ %33, %43 ], [ %54, %46 ]
  %57 = phi i64 [ %30, %43 ], [ %53, %46 ]
  %58 = phi i64 [ %29, %43 ], [ %52, %46 ]
  %59 = phi %"struct.vr::KeyboardTestInput"** [ %27, %43 ], [ %51, %46 ]
  %60 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %59, i64 %57
  %61 = load %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %60, align 8
  %62 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %61, i64 %56, i32 1
  %63 = bitcast %"class.std::__1::basic_string"* %62 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %55
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %62, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %69) #12
  %70 = load i64, i64* %28, align 8
  br label %71

71:                                               ; preds = %67, %55
  %72 = phi i64 [ %58, %55 ], [ %70, %67 ]
  %73 = load i64, i64* %17, align 8
  %74 = add i64 %73, -1
  store i64 %74, i64* %17, align 8
  %75 = add i64 %72, 1
  store i64 %75, i64* %28, align 8
  %76 = icmp ult i64 %75, 256
  br i1 %76, label %85, label %77

77:                                               ; preds = %71
  %78 = bitcast %"struct.vr::KeyboardTestInput"*** %26 to i8***
  %79 = load i8**, i8*** %78, align 8
  %80 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %80) #12
  %81 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %26, align 8
  %82 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %81, i64 1
  store %"struct.vr::KeyboardTestInput"** %82, %"struct.vr::KeyboardTestInput"*** %26, align 8
  %83 = load i64, i64* %28, align 8
  %84 = add i64 %83, -128
  store i64 %84, i64* %28, align 8
  br label %85

85:                                               ; preds = %71, %77
  %86 = bitcast %"struct.vr::TextInputInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %86) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 40, i1 false)
  call void @_ZN2vr13TextInputInfoC1Ev(%"struct.vr::TextInputInfo"* nonnull %3) #11
  %87 = bitcast %"class.std::__1::basic_string.11"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #11
  %88 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %90 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %91 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3
  %92 = bitcast %"struct.vr::TextInputInfo"* %91 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %93 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %92, i64 0, i32 1, i32 1
  %94 = bitcast %"class.std::__1::basic_string.11"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %94, i8 -86, i64 24, i1 false)
  %95 = load i8, i8* %93, align 1
  %96 = icmp slt i8 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %85
  %98 = bitcast %"struct.vr::TextInputInfo"* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %87, i8* align 8 %98, i64 24, i1 false) #11
  br label %272

99:                                               ; preds = %85
  %100 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load i16*, i16** %100, align 8
  %102 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = icmp ult i64 %103, 11
  br i1 %104, label %105, label %110

105:                                              ; preds = %99
  %106 = bitcast %"class.std::__1::basic_string.11"* %4 to i16*
  %107 = trunc i64 %103 to i8
  %108 = bitcast %"class.std::__1::basic_string.11"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %109 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %108, i64 0, i32 1, i32 1
  store i8 %107, i8* %109, align 1
  br label %125

110:                                              ; preds = %99
  %111 = icmp ugt i64 %103, 9223372036854775791
  br i1 %111, label %112, label %114

112:                                              ; preds = %110
  %113 = bitcast %"class.std::__1::basic_string.11"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %113) #13
  unreachable

114:                                              ; preds = %110
  %115 = add nuw nsw i64 %103, 8
  %116 = and i64 %115, -8
  %117 = icmp slt i64 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %114
  call void @abort() #13
  unreachable

119:                                              ; preds = %114
  %120 = shl i64 %116, 1
  %121 = call i8* @_Znwm(i64 %120) #12
  %122 = bitcast i8* %121 to i16*
  %123 = bitcast %"class.std::__1::basic_string.11"* %4 to i8**
  store i8* %121, i8** %123, align 8
  %124 = or i64 %116, -9223372036854775808
  store i64 %124, i64* %90, align 8
  store i64 %103, i64* %89, align 8
  br label %125

125:                                              ; preds = %119, %105
  %126 = phi i16* [ %106, %105 ], [ %122, %119 ]
  %127 = add nuw nsw i64 %103, 1
  %128 = add i64 %103, 1
  %129 = icmp ult i64 %128, 16
  br i1 %129, label %219, label %130

130:                                              ; preds = %125
  %131 = add i64 %103, 1
  %132 = getelementptr i16, i16* %126, i64 %131
  %133 = getelementptr i16, i16* %101, i64 %131
  %134 = icmp ult i16* %126, %133
  %135 = icmp ult i16* %101, %132
  %136 = and i1 %134, %135
  br i1 %136, label %219, label %137

137:                                              ; preds = %130
  %138 = and i64 %128, -16
  %139 = sub i64 %127, %138
  %140 = getelementptr i16, i16* %101, i64 %138
  %141 = getelementptr i16, i16* %126, i64 %138
  %142 = add i64 %138, -16
  %143 = lshr exact i64 %142, 4
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 3
  %146 = icmp ult i64 %142, 48
  br i1 %146, label %198, label %147

147:                                              ; preds = %137
  %148 = sub nsw i64 %144, %145
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %195, %149 ]
  %151 = phi i64 [ %148, %147 ], [ %196, %149 ]
  %152 = getelementptr i16, i16* %101, i64 %150
  %153 = getelementptr i16, i16* %126, i64 %150
  %154 = bitcast i16* %152 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !3
  %156 = getelementptr i16, i16* %152, i64 8
  %157 = bitcast i16* %156 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 2, !alias.scope !3
  %159 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %159, align 2, !alias.scope !6, !noalias !3
  %160 = getelementptr i16, i16* %153, i64 8
  %161 = bitcast i16* %160 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %161, align 2, !alias.scope !6, !noalias !3
  %162 = or i64 %150, 16
  %163 = getelementptr i16, i16* %101, i64 %162
  %164 = getelementptr i16, i16* %126, i64 %162
  %165 = bitcast i16* %163 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2, !alias.scope !3
  %167 = getelementptr i16, i16* %163, i64 8
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2, !alias.scope !3
  %170 = bitcast i16* %164 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %170, align 2, !alias.scope !6, !noalias !3
  %171 = getelementptr i16, i16* %164, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %172, align 2, !alias.scope !6, !noalias !3
  %173 = or i64 %150, 32
  %174 = getelementptr i16, i16* %101, i64 %173
  %175 = getelementptr i16, i16* %126, i64 %173
  %176 = bitcast i16* %174 to <8 x i16>*
  %177 = load <8 x i16>, <8 x i16>* %176, align 2, !alias.scope !3
  %178 = getelementptr i16, i16* %174, i64 8
  %179 = bitcast i16* %178 to <8 x i16>*
  %180 = load <8 x i16>, <8 x i16>* %179, align 2, !alias.scope !3
  %181 = bitcast i16* %175 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %181, align 2, !alias.scope !6, !noalias !3
  %182 = getelementptr i16, i16* %175, i64 8
  %183 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %180, <8 x i16>* %183, align 2, !alias.scope !6, !noalias !3
  %184 = or i64 %150, 48
  %185 = getelementptr i16, i16* %101, i64 %184
  %186 = getelementptr i16, i16* %126, i64 %184
  %187 = bitcast i16* %185 to <8 x i16>*
  %188 = load <8 x i16>, <8 x i16>* %187, align 2, !alias.scope !3
  %189 = getelementptr i16, i16* %185, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2, !alias.scope !3
  %192 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %192, align 2, !alias.scope !6, !noalias !3
  %193 = getelementptr i16, i16* %186, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %194, align 2, !alias.scope !6, !noalias !3
  %195 = add i64 %150, 64
  %196 = add i64 %151, -4
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %149, !llvm.loop !8

198:                                              ; preds = %149, %137
  %199 = phi i64 [ 0, %137 ], [ %195, %149 ]
  %200 = icmp eq i64 %145, 0
  br i1 %200, label %217, label %201

201:                                              ; preds = %198, %201
  %202 = phi i64 [ %214, %201 ], [ %199, %198 ]
  %203 = phi i64 [ %215, %201 ], [ %145, %198 ]
  %204 = getelementptr i16, i16* %101, i64 %202
  %205 = getelementptr i16, i16* %126, i64 %202
  %206 = bitcast i16* %204 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2, !alias.scope !3
  %208 = getelementptr i16, i16* %204, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 2, !alias.scope !3
  %211 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %211, align 2, !alias.scope !6, !noalias !3
  %212 = getelementptr i16, i16* %205, i64 8
  %213 = bitcast i16* %212 to <8 x i16>*
  store <8 x i16> %210, <8 x i16>* %213, align 2, !alias.scope !6, !noalias !3
  %214 = add i64 %202, 16
  %215 = add i64 %203, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %201, !llvm.loop !10

217:                                              ; preds = %201, %198
  %218 = icmp eq i64 %128, %138
  br i1 %218, label %272, label %219

219:                                              ; preds = %217, %130, %125
  %220 = phi i64 [ %127, %130 ], [ %127, %125 ], [ %139, %217 ]
  %221 = phi i16* [ %101, %130 ], [ %101, %125 ], [ %140, %217 ]
  %222 = phi i16* [ %126, %130 ], [ %126, %125 ], [ %141, %217 ]
  %223 = add i64 %220, -1
  %224 = and i64 %220, 7
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %237, label %226

226:                                              ; preds = %219, %226
  %227 = phi i64 [ %232, %226 ], [ %220, %219 ]
  %228 = phi i16* [ %234, %226 ], [ %221, %219 ]
  %229 = phi i16* [ %233, %226 ], [ %222, %219 ]
  %230 = phi i64 [ %235, %226 ], [ %224, %219 ]
  %231 = load i16, i16* %228, align 2
  store i16 %231, i16* %229, align 2
  %232 = add i64 %227, -1
  %233 = getelementptr inbounds i16, i16* %229, i64 1
  %234 = getelementptr inbounds i16, i16* %228, i64 1
  %235 = add i64 %230, -1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %226, !llvm.loop !12

237:                                              ; preds = %226, %219
  %238 = phi i64 [ %220, %219 ], [ %232, %226 ]
  %239 = phi i16* [ %221, %219 ], [ %234, %226 ]
  %240 = phi i16* [ %222, %219 ], [ %233, %226 ]
  %241 = icmp ult i64 %223, 7
  br i1 %241, label %272, label %242

242:                                              ; preds = %237, %242
  %243 = phi i64 [ %268, %242 ], [ %238, %237 ]
  %244 = phi i16* [ %270, %242 ], [ %239, %237 ]
  %245 = phi i16* [ %269, %242 ], [ %240, %237 ]
  %246 = load i16, i16* %244, align 2
  store i16 %246, i16* %245, align 2
  %247 = getelementptr inbounds i16, i16* %245, i64 1
  %248 = getelementptr inbounds i16, i16* %244, i64 1
  %249 = load i16, i16* %248, align 2
  store i16 %249, i16* %247, align 2
  %250 = getelementptr inbounds i16, i16* %245, i64 2
  %251 = getelementptr inbounds i16, i16* %244, i64 2
  %252 = load i16, i16* %251, align 2
  store i16 %252, i16* %250, align 2
  %253 = getelementptr inbounds i16, i16* %245, i64 3
  %254 = getelementptr inbounds i16, i16* %244, i64 3
  %255 = load i16, i16* %254, align 2
  store i16 %255, i16* %253, align 2
  %256 = getelementptr inbounds i16, i16* %245, i64 4
  %257 = getelementptr inbounds i16, i16* %244, i64 4
  %258 = load i16, i16* %257, align 2
  store i16 %258, i16* %256, align 2
  %259 = getelementptr inbounds i16, i16* %245, i64 5
  %260 = getelementptr inbounds i16, i16* %244, i64 5
  %261 = load i16, i16* %260, align 2
  store i16 %261, i16* %259, align 2
  %262 = getelementptr inbounds i16, i16* %245, i64 6
  %263 = getelementptr inbounds i16, i16* %244, i64 6
  %264 = load i16, i16* %263, align 2
  store i16 %264, i16* %262, align 2
  %265 = getelementptr inbounds i16, i16* %245, i64 7
  %266 = getelementptr inbounds i16, i16* %244, i64 7
  %267 = load i16, i16* %266, align 2
  store i16 %267, i16* %265, align 2
  %268 = add i64 %243, -8
  %269 = getelementptr inbounds i16, i16* %245, i64 8
  %270 = getelementptr inbounds i16, i16* %244, i64 8
  %271 = icmp eq i64 %268, 0
  br i1 %271, label %272, label %242, !llvm.loop !13

272:                                              ; preds = %237, %242, %217, %97
  %273 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 1
  %274 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 2
  %275 = load i32, i32* %274, align 4
  %276 = load i32, i32* %273, align 4
  %277 = icmp slt i32 %275, %276
  %278 = select i1 %277, i32 %275, i32 %276
  %279 = load i32, i32* %34, align 8
  switch i32 %279, label %1336 [
    i32 0, label %280
    i32 1, label %566
    i32 2, label %1309
  ]

280:                                              ; preds = %272
  %281 = call i64 @_ZNK2vr13TextInputInfo13SelectionSizeEv(%"struct.vr::TextInputInfo"* %91) #11
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %317

283:                                              ; preds = %280
  %284 = load i32, i32* %273, align 8
  %285 = sext i32 %284 to i64
  %286 = bitcast %"class.std::__1::basic_string.11"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %286) #11
  %287 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %288 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %287, i64 0, i32 1, i32 0
  %289 = load i8, i8* %288, align 1
  %290 = icmp slt i8 %289, 0
  %291 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %292 = load i8*, i8** %291, align 8
  %293 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %294 = select i1 %290, i8* %292, i8* %293
  %295 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %296 = load i64, i64* %295, align 8
  %297 = zext i8 %289 to i64
  %298 = select i1 %290, i64 %296, i64 %297
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.11"* nonnull sret %5, i8* %294, i64 %298) #11
  %299 = bitcast %"class.std::__1::basic_string.11"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %300 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %299, i64 0, i32 1, i32 1
  %301 = load i8, i8* %300, align 1
  %302 = icmp slt i8 %301, 0
  %303 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load i16*, i16** %303, align 8
  %305 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %306 = load i64, i64* %305, align 8
  %307 = bitcast %"class.std::__1::basic_string.11"* %5 to i16*
  %308 = zext i8 %301 to i64
  %309 = select i1 %302, i16* %304, i16* %307
  %310 = select i1 %302, i64 %306, i64 %308
  %311 = call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertEmPKDsm(%"class.std::__1::basic_string.11"* nonnull %4, i64 %285, i16* %309, i64 %310) #11
  %312 = load i8, i8* %300, align 1
  %313 = icmp slt i8 %312, 0
  br i1 %313, label %314, label %351

314:                                              ; preds = %283
  %315 = bitcast %"class.std::__1::basic_string.11"* %5 to i8**
  %316 = load i8*, i8** %315, align 8
  call void @_ZdlPv(i8* %316) #12
  br label %351

317:                                              ; preds = %280
  %318 = sext i32 %278 to i64
  %319 = call i64 @_ZNK2vr13TextInputInfo13SelectionSizeEv(%"struct.vr::TextInputInfo"* %91) #11
  %320 = bitcast %"class.std::__1::basic_string.11"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %320) #11
  %321 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %322 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %321, i64 0, i32 1, i32 0
  %323 = load i8, i8* %322, align 1
  %324 = icmp slt i8 %323, 0
  %325 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %326 = load i8*, i8** %325, align 8
  %327 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %328 = select i1 %324, i8* %326, i8* %327
  %329 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %330 = load i64, i64* %329, align 8
  %331 = zext i8 %323 to i64
  %332 = select i1 %324, i64 %330, i64 %331
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.11"* nonnull sret %6, i8* %328, i64 %332) #11
  %333 = bitcast %"class.std::__1::basic_string.11"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %334 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %333, i64 0, i32 1, i32 1
  %335 = load i8, i8* %334, align 1
  %336 = icmp slt i8 %335, 0
  %337 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %338 = load i16*, i16** %337, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %340 = load i64, i64* %339, align 8
  %341 = bitcast %"class.std::__1::basic_string.11"* %6 to i16*
  %342 = zext i8 %335 to i64
  %343 = select i1 %336, i16* %338, i16* %341
  %344 = select i1 %336, i64 %340, i64 %342
  %345 = call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7replaceEmmPKDsm(%"class.std::__1::basic_string.11"* nonnull %4, i64 %318, i64 %319, i16* %343, i64 %344) #11
  %346 = load i8, i8* %334, align 1
  %347 = icmp slt i8 %346, 0
  br i1 %347, label %348, label %351

348:                                              ; preds = %317
  %349 = bitcast %"class.std::__1::basic_string.11"* %6 to i8**
  %350 = load i8*, i8** %349, align 8
  call void @_ZdlPv(i8* %350) #12
  br label %351

351:                                              ; preds = %348, %317, %314, %283
  %352 = phi i8* [ %286, %283 ], [ %286, %314 ], [ %320, %317 ], [ %320, %348 ]
  %353 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %287, %283 ], [ %287, %314 ], [ %321, %317 ], [ %321, %348 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %352) #11
  %354 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %353, i64 0, i32 1, i32 0
  %355 = load i8, i8* %354, align 1
  %356 = icmp slt i8 %355, 0
  %357 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %358 = load i64, i64* %357, align 8
  %359 = zext i8 %355 to i64
  %360 = select i1 %356, i64 %358, i64 %359
  %361 = trunc i64 %360 to i32
  %362 = add i32 %278, %361
  %363 = bitcast %"struct.vr::TextInputInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %363) #11
  %364 = bitcast %"class.std::__1::basic_string.11"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %365 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %364, i64 0, i32 1, i32 1
  %366 = load i8, i8* %365, align 1
  %367 = icmp slt i8 %366, 0
  br i1 %367, label %370, label %368

368:                                              ; preds = %351
  %369 = bitcast %"class.std::__1::basic_string.11"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %369, i8* nonnull align 8 %87, i64 24, i1 false) #11
  br label %543

370:                                              ; preds = %351
  %371 = load i16*, i16** %88, align 8
  %372 = load i64, i64* %89, align 8
  %373 = icmp ult i64 %372, 11
  br i1 %373, label %374, label %379

374:                                              ; preds = %370
  %375 = bitcast %"class.std::__1::basic_string.11"* %8 to i16*
  %376 = trunc i64 %372 to i8
  %377 = bitcast %"class.std::__1::basic_string.11"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %378 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %377, i64 0, i32 1, i32 1
  store i8 %376, i8* %378, align 1
  br label %396

379:                                              ; preds = %370
  %380 = icmp ugt i64 %372, 9223372036854775791
  br i1 %380, label %381, label %383

381:                                              ; preds = %379
  %382 = bitcast %"class.std::__1::basic_string.11"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %382) #13
  unreachable

383:                                              ; preds = %379
  %384 = add nuw nsw i64 %372, 8
  %385 = and i64 %384, -8
  %386 = icmp slt i64 %385, 0
  br i1 %386, label %387, label %388

387:                                              ; preds = %383
  call void @abort() #13
  unreachable

388:                                              ; preds = %383
  %389 = shl i64 %385, 1
  %390 = call i8* @_Znwm(i64 %389) #12
  %391 = bitcast i8* %390 to i16*
  %392 = bitcast %"class.std::__1::basic_string.11"* %8 to i8**
  store i8* %390, i8** %392, align 8
  %393 = or i64 %385, -9223372036854775808
  %394 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %393, i64* %394, align 8
  %395 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %372, i64* %395, align 8
  br label %396

396:                                              ; preds = %388, %374
  %397 = phi i16* [ %375, %374 ], [ %391, %388 ]
  %398 = add nuw nsw i64 %372, 1
  %399 = add i64 %372, 1
  %400 = icmp ult i64 %399, 16
  br i1 %400, label %490, label %401

401:                                              ; preds = %396
  %402 = add i64 %372, 1
  %403 = getelementptr i16, i16* %397, i64 %402
  %404 = getelementptr i16, i16* %371, i64 %402
  %405 = icmp ult i16* %397, %404
  %406 = icmp ult i16* %371, %403
  %407 = and i1 %405, %406
  br i1 %407, label %490, label %408

408:                                              ; preds = %401
  %409 = and i64 %399, -16
  %410 = sub i64 %398, %409
  %411 = getelementptr i16, i16* %371, i64 %409
  %412 = getelementptr i16, i16* %397, i64 %409
  %413 = add i64 %409, -16
  %414 = lshr exact i64 %413, 4
  %415 = add nuw nsw i64 %414, 1
  %416 = and i64 %415, 3
  %417 = icmp ult i64 %413, 48
  br i1 %417, label %469, label %418

418:                                              ; preds = %408
  %419 = sub nsw i64 %415, %416
  br label %420

420:                                              ; preds = %420, %418
  %421 = phi i64 [ 0, %418 ], [ %466, %420 ]
  %422 = phi i64 [ %419, %418 ], [ %467, %420 ]
  %423 = getelementptr i16, i16* %371, i64 %421
  %424 = getelementptr i16, i16* %397, i64 %421
  %425 = bitcast i16* %423 to <8 x i16>*
  %426 = load <8 x i16>, <8 x i16>* %425, align 2, !alias.scope !14
  %427 = getelementptr i16, i16* %423, i64 8
  %428 = bitcast i16* %427 to <8 x i16>*
  %429 = load <8 x i16>, <8 x i16>* %428, align 2, !alias.scope !14
  %430 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %430, align 2, !alias.scope !17, !noalias !14
  %431 = getelementptr i16, i16* %424, i64 8
  %432 = bitcast i16* %431 to <8 x i16>*
  store <8 x i16> %429, <8 x i16>* %432, align 2, !alias.scope !17, !noalias !14
  %433 = or i64 %421, 16
  %434 = getelementptr i16, i16* %371, i64 %433
  %435 = getelementptr i16, i16* %397, i64 %433
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !14
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !14
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !17, !noalias !14
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !17, !noalias !14
  %444 = or i64 %421, 32
  %445 = getelementptr i16, i16* %371, i64 %444
  %446 = getelementptr i16, i16* %397, i64 %444
  %447 = bitcast i16* %445 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 2, !alias.scope !14
  %449 = getelementptr i16, i16* %445, i64 8
  %450 = bitcast i16* %449 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 2, !alias.scope !14
  %452 = bitcast i16* %446 to <8 x i16>*
  store <8 x i16> %448, <8 x i16>* %452, align 2, !alias.scope !17, !noalias !14
  %453 = getelementptr i16, i16* %446, i64 8
  %454 = bitcast i16* %453 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %454, align 2, !alias.scope !17, !noalias !14
  %455 = or i64 %421, 48
  %456 = getelementptr i16, i16* %371, i64 %455
  %457 = getelementptr i16, i16* %397, i64 %455
  %458 = bitcast i16* %456 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 2, !alias.scope !14
  %460 = getelementptr i16, i16* %456, i64 8
  %461 = bitcast i16* %460 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 2, !alias.scope !14
  %463 = bitcast i16* %457 to <8 x i16>*
  store <8 x i16> %459, <8 x i16>* %463, align 2, !alias.scope !17, !noalias !14
  %464 = getelementptr i16, i16* %457, i64 8
  %465 = bitcast i16* %464 to <8 x i16>*
  store <8 x i16> %462, <8 x i16>* %465, align 2, !alias.scope !17, !noalias !14
  %466 = add i64 %421, 64
  %467 = add i64 %422, -4
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %469, label %420, !llvm.loop !19

469:                                              ; preds = %420, %408
  %470 = phi i64 [ 0, %408 ], [ %466, %420 ]
  %471 = icmp eq i64 %416, 0
  br i1 %471, label %488, label %472

472:                                              ; preds = %469, %472
  %473 = phi i64 [ %485, %472 ], [ %470, %469 ]
  %474 = phi i64 [ %486, %472 ], [ %416, %469 ]
  %475 = getelementptr i16, i16* %371, i64 %473
  %476 = getelementptr i16, i16* %397, i64 %473
  %477 = bitcast i16* %475 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 2, !alias.scope !14
  %479 = getelementptr i16, i16* %475, i64 8
  %480 = bitcast i16* %479 to <8 x i16>*
  %481 = load <8 x i16>, <8 x i16>* %480, align 2, !alias.scope !14
  %482 = bitcast i16* %476 to <8 x i16>*
  store <8 x i16> %478, <8 x i16>* %482, align 2, !alias.scope !17, !noalias !14
  %483 = getelementptr i16, i16* %476, i64 8
  %484 = bitcast i16* %483 to <8 x i16>*
  store <8 x i16> %481, <8 x i16>* %484, align 2, !alias.scope !17, !noalias !14
  %485 = add i64 %473, 16
  %486 = add i64 %474, -1
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %488, label %472, !llvm.loop !20

488:                                              ; preds = %472, %469
  %489 = icmp eq i64 %399, %409
  br i1 %489, label %543, label %490

490:                                              ; preds = %488, %401, %396
  %491 = phi i64 [ %398, %401 ], [ %398, %396 ], [ %410, %488 ]
  %492 = phi i16* [ %371, %401 ], [ %371, %396 ], [ %411, %488 ]
  %493 = phi i16* [ %397, %401 ], [ %397, %396 ], [ %412, %488 ]
  %494 = add i64 %491, -1
  %495 = and i64 %491, 7
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %508, label %497

497:                                              ; preds = %490, %497
  %498 = phi i64 [ %503, %497 ], [ %491, %490 ]
  %499 = phi i16* [ %505, %497 ], [ %492, %490 ]
  %500 = phi i16* [ %504, %497 ], [ %493, %490 ]
  %501 = phi i64 [ %506, %497 ], [ %495, %490 ]
  %502 = load i16, i16* %499, align 2
  store i16 %502, i16* %500, align 2
  %503 = add i64 %498, -1
  %504 = getelementptr inbounds i16, i16* %500, i64 1
  %505 = getelementptr inbounds i16, i16* %499, i64 1
  %506 = add i64 %501, -1
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %497, !llvm.loop !21

508:                                              ; preds = %497, %490
  %509 = phi i64 [ %491, %490 ], [ %503, %497 ]
  %510 = phi i16* [ %492, %490 ], [ %505, %497 ]
  %511 = phi i16* [ %493, %490 ], [ %504, %497 ]
  %512 = icmp ult i64 %494, 7
  br i1 %512, label %543, label %513

513:                                              ; preds = %508, %513
  %514 = phi i64 [ %539, %513 ], [ %509, %508 ]
  %515 = phi i16* [ %541, %513 ], [ %510, %508 ]
  %516 = phi i16* [ %540, %513 ], [ %511, %508 ]
  %517 = load i16, i16* %515, align 2
  store i16 %517, i16* %516, align 2
  %518 = getelementptr inbounds i16, i16* %516, i64 1
  %519 = getelementptr inbounds i16, i16* %515, i64 1
  %520 = load i16, i16* %519, align 2
  store i16 %520, i16* %518, align 2
  %521 = getelementptr inbounds i16, i16* %516, i64 2
  %522 = getelementptr inbounds i16, i16* %515, i64 2
  %523 = load i16, i16* %522, align 2
  store i16 %523, i16* %521, align 2
  %524 = getelementptr inbounds i16, i16* %516, i64 3
  %525 = getelementptr inbounds i16, i16* %515, i64 3
  %526 = load i16, i16* %525, align 2
  store i16 %526, i16* %524, align 2
  %527 = getelementptr inbounds i16, i16* %516, i64 4
  %528 = getelementptr inbounds i16, i16* %515, i64 4
  %529 = load i16, i16* %528, align 2
  store i16 %529, i16* %527, align 2
  %530 = getelementptr inbounds i16, i16* %516, i64 5
  %531 = getelementptr inbounds i16, i16* %515, i64 5
  %532 = load i16, i16* %531, align 2
  store i16 %532, i16* %530, align 2
  %533 = getelementptr inbounds i16, i16* %516, i64 6
  %534 = getelementptr inbounds i16, i16* %515, i64 6
  %535 = load i16, i16* %534, align 2
  store i16 %535, i16* %533, align 2
  %536 = getelementptr inbounds i16, i16* %516, i64 7
  %537 = getelementptr inbounds i16, i16* %515, i64 7
  %538 = load i16, i16* %537, align 2
  store i16 %538, i16* %536, align 2
  %539 = add i64 %514, -8
  %540 = getelementptr inbounds i16, i16* %516, i64 8
  %541 = getelementptr inbounds i16, i16* %515, i64 8
  %542 = icmp eq i64 %539, 0
  br i1 %542, label %543, label %513, !llvm.loop !22

543:                                              ; preds = %508, %513, %488, %368
  call void @_ZN2vr13TextInputInfoC1ENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEii(%"struct.vr::TextInputInfo"* nonnull %7, %"class.std::__1::basic_string.11"* nonnull %8, i32 %362, i32 %362) #11
  %544 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %3, i64 0, i32 0
  %545 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %7, i64 0, i32 0
  %546 = call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.11"* nonnull %544, %"class.std::__1::basic_string.11"* nonnull dereferenceable(24) %545) #11
  %547 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %3, i64 0, i32 1
  %548 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %7, i64 0, i32 1
  %549 = bitcast i32* %547 to i8*
  %550 = bitcast i32* %548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %549, i8* align 8 %550, i64 16, i1 false) #11
  %551 = bitcast %"struct.vr::TextInputInfo"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %552 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %551, i64 0, i32 1, i32 1
  %553 = load i8, i8* %552, align 1
  %554 = icmp slt i8 %553, 0
  br i1 %554, label %555, label %558

555:                                              ; preds = %543
  %556 = bitcast %"struct.vr::TextInputInfo"* %7 to i8**
  %557 = load i8*, i8** %556, align 8
  call void @_ZdlPv(i8* %557) #12
  br label %558

558:                                              ; preds = %543, %555
  %559 = bitcast %"class.std::__1::basic_string.11"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %560 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %559, i64 0, i32 1, i32 1
  %561 = load i8, i8* %560, align 1
  %562 = icmp slt i8 %561, 0
  br i1 %562, label %563, label %1334

563:                                              ; preds = %558
  %564 = bitcast %"class.std::__1::basic_string.11"* %8 to i8**
  %565 = load i8*, i8** %564, align 8
  call void @_ZdlPv(i8* %565) #12
  br label %1334

566:                                              ; preds = %272
  %567 = call i64 @_ZNK2vr13TextInputInfo13SelectionSizeEv(%"struct.vr::TextInputInfo"* %91) #11
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %751

569:                                              ; preds = %566
  %570 = icmp eq i32 %278, 0
  br i1 %570, label %1361, label %571

571:                                              ; preds = %569
  %572 = add nsw i32 %278, -1
  %573 = sext i32 %572 to i64
  %574 = bitcast %"class.std::__1::basic_string.11"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %575 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %574, i64 0, i32 1, i32 1
  %576 = load i8, i8* %575, align 1
  %577 = icmp slt i8 %576, 0
  %578 = load i64, i64* %89, align 8
  %579 = zext i8 %576 to i64
  %580 = select i1 %577, i64 %578, i64 %579
  %581 = icmp ult i64 %580, %573
  br i1 %581, label %582, label %584

582:                                              ; preds = %571
  %583 = bitcast %"class.std::__1::basic_string.11"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %583) #13
  unreachable

584:                                              ; preds = %571
  %585 = load i16*, i16** %88, align 8
  %586 = bitcast %"class.std::__1::basic_string.11"* %4 to i16*
  %587 = select i1 %577, i16* %585, i16* %586
  %588 = sub i64 %580, %573
  %589 = icmp ne i64 %588, 0
  %590 = zext i1 %589 to i64
  %591 = sub i64 %588, %590
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %742, label %593

593:                                              ; preds = %584
  %594 = getelementptr inbounds i16, i16* %587, i64 %573
  br i1 %589, label %595, label %742

595:                                              ; preds = %593
  %596 = getelementptr inbounds i16, i16* %594, i64 %590
  %597 = icmp ult i64 %591, 16
  br i1 %597, label %687, label %598

598:                                              ; preds = %595
  %599 = sub i64 %580, %590
  %600 = getelementptr i16, i16* %587, i64 %599
  %601 = getelementptr i16, i16* %587, i64 %580
  %602 = icmp ult i16* %594, %601
  %603 = icmp ult i16* %596, %600
  %604 = and i1 %602, %603
  br i1 %604, label %687, label %605

605:                                              ; preds = %598
  %606 = and i64 %591, -16
  %607 = sub i64 %591, %606
  %608 = getelementptr i16, i16* %596, i64 %606
  %609 = getelementptr i16, i16* %594, i64 %606
  %610 = add i64 %606, -16
  %611 = lshr exact i64 %610, 4
  %612 = add nuw nsw i64 %611, 1
  %613 = and i64 %612, 3
  %614 = icmp ult i64 %610, 48
  br i1 %614, label %666, label %615

615:                                              ; preds = %605
  %616 = sub nsw i64 %612, %613
  br label %617

617:                                              ; preds = %617, %615
  %618 = phi i64 [ 0, %615 ], [ %663, %617 ]
  %619 = phi i64 [ %616, %615 ], [ %664, %617 ]
  %620 = getelementptr i16, i16* %596, i64 %618
  %621 = getelementptr i16, i16* %594, i64 %618
  %622 = bitcast i16* %620 to <8 x i16>*
  %623 = load <8 x i16>, <8 x i16>* %622, align 2, !alias.scope !23
  %624 = getelementptr i16, i16* %620, i64 8
  %625 = bitcast i16* %624 to <8 x i16>*
  %626 = load <8 x i16>, <8 x i16>* %625, align 2, !alias.scope !23
  %627 = bitcast i16* %621 to <8 x i16>*
  store <8 x i16> %623, <8 x i16>* %627, align 2, !alias.scope !26, !noalias !23
  %628 = getelementptr i16, i16* %621, i64 8
  %629 = bitcast i16* %628 to <8 x i16>*
  store <8 x i16> %626, <8 x i16>* %629, align 2, !alias.scope !26, !noalias !23
  %630 = or i64 %618, 16
  %631 = getelementptr i16, i16* %596, i64 %630
  %632 = getelementptr i16, i16* %594, i64 %630
  %633 = bitcast i16* %631 to <8 x i16>*
  %634 = load <8 x i16>, <8 x i16>* %633, align 2, !alias.scope !23
  %635 = getelementptr i16, i16* %631, i64 8
  %636 = bitcast i16* %635 to <8 x i16>*
  %637 = load <8 x i16>, <8 x i16>* %636, align 2, !alias.scope !23
  %638 = bitcast i16* %632 to <8 x i16>*
  store <8 x i16> %634, <8 x i16>* %638, align 2, !alias.scope !26, !noalias !23
  %639 = getelementptr i16, i16* %632, i64 8
  %640 = bitcast i16* %639 to <8 x i16>*
  store <8 x i16> %637, <8 x i16>* %640, align 2, !alias.scope !26, !noalias !23
  %641 = or i64 %618, 32
  %642 = getelementptr i16, i16* %596, i64 %641
  %643 = getelementptr i16, i16* %594, i64 %641
  %644 = bitcast i16* %642 to <8 x i16>*
  %645 = load <8 x i16>, <8 x i16>* %644, align 2, !alias.scope !23
  %646 = getelementptr i16, i16* %642, i64 8
  %647 = bitcast i16* %646 to <8 x i16>*
  %648 = load <8 x i16>, <8 x i16>* %647, align 2, !alias.scope !23
  %649 = bitcast i16* %643 to <8 x i16>*
  store <8 x i16> %645, <8 x i16>* %649, align 2, !alias.scope !26, !noalias !23
  %650 = getelementptr i16, i16* %643, i64 8
  %651 = bitcast i16* %650 to <8 x i16>*
  store <8 x i16> %648, <8 x i16>* %651, align 2, !alias.scope !26, !noalias !23
  %652 = or i64 %618, 48
  %653 = getelementptr i16, i16* %596, i64 %652
  %654 = getelementptr i16, i16* %594, i64 %652
  %655 = bitcast i16* %653 to <8 x i16>*
  %656 = load <8 x i16>, <8 x i16>* %655, align 2, !alias.scope !23
  %657 = getelementptr i16, i16* %653, i64 8
  %658 = bitcast i16* %657 to <8 x i16>*
  %659 = load <8 x i16>, <8 x i16>* %658, align 2, !alias.scope !23
  %660 = bitcast i16* %654 to <8 x i16>*
  store <8 x i16> %656, <8 x i16>* %660, align 2, !alias.scope !26, !noalias !23
  %661 = getelementptr i16, i16* %654, i64 8
  %662 = bitcast i16* %661 to <8 x i16>*
  store <8 x i16> %659, <8 x i16>* %662, align 2, !alias.scope !26, !noalias !23
  %663 = add i64 %618, 64
  %664 = add i64 %619, -4
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %617, !llvm.loop !28

666:                                              ; preds = %617, %605
  %667 = phi i64 [ 0, %605 ], [ %663, %617 ]
  %668 = icmp eq i64 %613, 0
  br i1 %668, label %685, label %669

669:                                              ; preds = %666, %669
  %670 = phi i64 [ %682, %669 ], [ %667, %666 ]
  %671 = phi i64 [ %683, %669 ], [ %613, %666 ]
  %672 = getelementptr i16, i16* %596, i64 %670
  %673 = getelementptr i16, i16* %594, i64 %670
  %674 = bitcast i16* %672 to <8 x i16>*
  %675 = load <8 x i16>, <8 x i16>* %674, align 2, !alias.scope !23
  %676 = getelementptr i16, i16* %672, i64 8
  %677 = bitcast i16* %676 to <8 x i16>*
  %678 = load <8 x i16>, <8 x i16>* %677, align 2, !alias.scope !23
  %679 = bitcast i16* %673 to <8 x i16>*
  store <8 x i16> %675, <8 x i16>* %679, align 2, !alias.scope !26, !noalias !23
  %680 = getelementptr i16, i16* %673, i64 8
  %681 = bitcast i16* %680 to <8 x i16>*
  store <8 x i16> %678, <8 x i16>* %681, align 2, !alias.scope !26, !noalias !23
  %682 = add i64 %670, 16
  %683 = add i64 %671, -1
  %684 = icmp eq i64 %683, 0
  br i1 %684, label %685, label %669, !llvm.loop !29

685:                                              ; preds = %669, %666
  %686 = icmp eq i64 %591, %606
  br i1 %686, label %740, label %687

687:                                              ; preds = %685, %598, %595
  %688 = phi i64 [ %591, %598 ], [ %591, %595 ], [ %607, %685 ]
  %689 = phi i16* [ %596, %598 ], [ %596, %595 ], [ %608, %685 ]
  %690 = phi i16* [ %594, %598 ], [ %594, %595 ], [ %609, %685 ]
  %691 = add i64 %688, -1
  %692 = and i64 %688, 7
  %693 = icmp eq i64 %692, 0
  br i1 %693, label %705, label %694

694:                                              ; preds = %687, %694
  %695 = phi i64 [ %700, %694 ], [ %688, %687 ]
  %696 = phi i16* [ %702, %694 ], [ %689, %687 ]
  %697 = phi i16* [ %701, %694 ], [ %690, %687 ]
  %698 = phi i64 [ %703, %694 ], [ %692, %687 ]
  %699 = load i16, i16* %696, align 2
  store i16 %699, i16* %697, align 2
  %700 = add i64 %695, -1
  %701 = getelementptr inbounds i16, i16* %697, i64 1
  %702 = getelementptr inbounds i16, i16* %696, i64 1
  %703 = add i64 %698, -1
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %694, !llvm.loop !30

705:                                              ; preds = %694, %687
  %706 = phi i64 [ %688, %687 ], [ %700, %694 ]
  %707 = phi i16* [ %689, %687 ], [ %702, %694 ]
  %708 = phi i16* [ %690, %687 ], [ %701, %694 ]
  %709 = icmp ult i64 %691, 7
  br i1 %709, label %740, label %710

710:                                              ; preds = %705, %710
  %711 = phi i64 [ %736, %710 ], [ %706, %705 ]
  %712 = phi i16* [ %738, %710 ], [ %707, %705 ]
  %713 = phi i16* [ %737, %710 ], [ %708, %705 ]
  %714 = load i16, i16* %712, align 2
  store i16 %714, i16* %713, align 2
  %715 = getelementptr inbounds i16, i16* %713, i64 1
  %716 = getelementptr inbounds i16, i16* %712, i64 1
  %717 = load i16, i16* %716, align 2
  store i16 %717, i16* %715, align 2
  %718 = getelementptr inbounds i16, i16* %713, i64 2
  %719 = getelementptr inbounds i16, i16* %712, i64 2
  %720 = load i16, i16* %719, align 2
  store i16 %720, i16* %718, align 2
  %721 = getelementptr inbounds i16, i16* %713, i64 3
  %722 = getelementptr inbounds i16, i16* %712, i64 3
  %723 = load i16, i16* %722, align 2
  store i16 %723, i16* %721, align 2
  %724 = getelementptr inbounds i16, i16* %713, i64 4
  %725 = getelementptr inbounds i16, i16* %712, i64 4
  %726 = load i16, i16* %725, align 2
  store i16 %726, i16* %724, align 2
  %727 = getelementptr inbounds i16, i16* %713, i64 5
  %728 = getelementptr inbounds i16, i16* %712, i64 5
  %729 = load i16, i16* %728, align 2
  store i16 %729, i16* %727, align 2
  %730 = getelementptr inbounds i16, i16* %713, i64 6
  %731 = getelementptr inbounds i16, i16* %712, i64 6
  %732 = load i16, i16* %731, align 2
  store i16 %732, i16* %730, align 2
  %733 = getelementptr inbounds i16, i16* %713, i64 7
  %734 = getelementptr inbounds i16, i16* %712, i64 7
  %735 = load i16, i16* %734, align 2
  store i16 %735, i16* %733, align 2
  %736 = add i64 %711, -8
  %737 = getelementptr inbounds i16, i16* %713, i64 8
  %738 = getelementptr inbounds i16, i16* %712, i64 8
  %739 = icmp eq i64 %736, 0
  br i1 %739, label %740, label %710, !llvm.loop !31

740:                                              ; preds = %705, %710, %685
  %741 = load i8, i8* %575, align 1
  br label %742

742:                                              ; preds = %740, %593, %584
  %743 = phi i8 [ %741, %740 ], [ %576, %593 ], [ %576, %584 ]
  %744 = sub i64 %580, %590
  %745 = icmp slt i8 %743, 0
  br i1 %745, label %746, label %747

746:                                              ; preds = %742
  store i64 %744, i64* %89, align 8
  br label %749

747:                                              ; preds = %742
  %748 = trunc i64 %744 to i8
  store i8 %748, i8* %575, align 1
  br label %749

749:                                              ; preds = %746, %747
  %750 = getelementptr inbounds i16, i16* %587, i64 %744
  store i16 0, i16* %750, align 2
  br label %1104

751:                                              ; preds = %566
  %752 = sext i32 %278 to i64
  %753 = call i64 @_ZNK2vr13TextInputInfo13SelectionSizeEv(%"struct.vr::TextInputInfo"* %91) #11
  %754 = bitcast %"class.std::__1::basic_string.11"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %755 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %754, i64 0, i32 1, i32 1
  %756 = load i8, i8* %755, align 1
  %757 = icmp slt i8 %756, 0
  %758 = load i64, i64* %89, align 8
  %759 = zext i8 %756 to i64
  %760 = select i1 %757, i64 %758, i64 %759
  %761 = icmp ult i64 %760, %752
  br i1 %761, label %762, label %764

762:                                              ; preds = %751
  %763 = bitcast %"class.std::__1::basic_string.11"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %763) #13
  unreachable

764:                                              ; preds = %751
  switch i64 %753, label %773 [
    i64 -1, label %765
    i64 0, label %1104
  ]

765:                                              ; preds = %764
  br i1 %757, label %766, label %769

766:                                              ; preds = %765
  %767 = load i16*, i16** %88, align 8
  %768 = getelementptr inbounds i16, i16* %767, i64 %752
  store i16 0, i16* %768, align 2
  store i64 %752, i64* %89, align 8
  br label %1104

769:                                              ; preds = %765
  %770 = bitcast %"class.std::__1::basic_string.11"* %4 to i16*
  %771 = getelementptr inbounds i16, i16* %770, i64 %752
  store i16 0, i16* %771, align 2
  %772 = trunc i32 %278 to i8
  store i8 %772, i8* %755, align 1
  br label %1104

773:                                              ; preds = %764
  %774 = load i16*, i16** %88, align 8
  %775 = bitcast %"class.std::__1::basic_string.11"* %4 to i16*
  %776 = select i1 %757, i16* %774, i16* %775
  %777 = sub i64 %760, %752
  %778 = icmp ult i64 %777, %753
  %779 = select i1 %778, i64 %777, i64 %753
  %780 = sub i64 %777, %779
  %781 = icmp eq i64 %780, 0
  br i1 %781, label %1095, label %782

782:                                              ; preds = %773
  %783 = getelementptr inbounds i16, i16* %776, i64 %752
  %784 = getelementptr inbounds i16, i16* %783, i64 %779
  %785 = icmp sgt i64 %779, 0
  br i1 %785, label %786, label %930

786:                                              ; preds = %782
  %787 = icmp ult i64 %780, 16
  br i1 %787, label %877, label %788

788:                                              ; preds = %786
  %789 = sub i64 %760, %779
  %790 = getelementptr i16, i16* %776, i64 %789
  %791 = getelementptr i16, i16* %776, i64 %760
  %792 = icmp ult i16* %783, %791
  %793 = icmp ult i16* %784, %790
  %794 = and i1 %792, %793
  br i1 %794, label %877, label %795

795:                                              ; preds = %788
  %796 = and i64 %780, -16
  %797 = sub i64 %780, %796
  %798 = getelementptr i16, i16* %784, i64 %796
  %799 = getelementptr i16, i16* %783, i64 %796
  %800 = add i64 %796, -16
  %801 = lshr exact i64 %800, 4
  %802 = add nuw nsw i64 %801, 1
  %803 = and i64 %802, 3
  %804 = icmp ult i64 %800, 48
  br i1 %804, label %856, label %805

805:                                              ; preds = %795
  %806 = sub nsw i64 %802, %803
  br label %807

807:                                              ; preds = %807, %805
  %808 = phi i64 [ 0, %805 ], [ %853, %807 ]
  %809 = phi i64 [ %806, %805 ], [ %854, %807 ]
  %810 = getelementptr i16, i16* %784, i64 %808
  %811 = getelementptr i16, i16* %783, i64 %808
  %812 = bitcast i16* %810 to <8 x i16>*
  %813 = load <8 x i16>, <8 x i16>* %812, align 2, !alias.scope !32
  %814 = getelementptr i16, i16* %810, i64 8
  %815 = bitcast i16* %814 to <8 x i16>*
  %816 = load <8 x i16>, <8 x i16>* %815, align 2, !alias.scope !32
  %817 = bitcast i16* %811 to <8 x i16>*
  store <8 x i16> %813, <8 x i16>* %817, align 2, !alias.scope !35, !noalias !32
  %818 = getelementptr i16, i16* %811, i64 8
  %819 = bitcast i16* %818 to <8 x i16>*
  store <8 x i16> %816, <8 x i16>* %819, align 2, !alias.scope !35, !noalias !32
  %820 = or i64 %808, 16
  %821 = getelementptr i16, i16* %784, i64 %820
  %822 = getelementptr i16, i16* %783, i64 %820
  %823 = bitcast i16* %821 to <8 x i16>*
  %824 = load <8 x i16>, <8 x i16>* %823, align 2, !alias.scope !32
  %825 = getelementptr i16, i16* %821, i64 8
  %826 = bitcast i16* %825 to <8 x i16>*
  %827 = load <8 x i16>, <8 x i16>* %826, align 2, !alias.scope !32
  %828 = bitcast i16* %822 to <8 x i16>*
  store <8 x i16> %824, <8 x i16>* %828, align 2, !alias.scope !35, !noalias !32
  %829 = getelementptr i16, i16* %822, i64 8
  %830 = bitcast i16* %829 to <8 x i16>*
  store <8 x i16> %827, <8 x i16>* %830, align 2, !alias.scope !35, !noalias !32
  %831 = or i64 %808, 32
  %832 = getelementptr i16, i16* %784, i64 %831
  %833 = getelementptr i16, i16* %783, i64 %831
  %834 = bitcast i16* %832 to <8 x i16>*
  %835 = load <8 x i16>, <8 x i16>* %834, align 2, !alias.scope !32
  %836 = getelementptr i16, i16* %832, i64 8
  %837 = bitcast i16* %836 to <8 x i16>*
  %838 = load <8 x i16>, <8 x i16>* %837, align 2, !alias.scope !32
  %839 = bitcast i16* %833 to <8 x i16>*
  store <8 x i16> %835, <8 x i16>* %839, align 2, !alias.scope !35, !noalias !32
  %840 = getelementptr i16, i16* %833, i64 8
  %841 = bitcast i16* %840 to <8 x i16>*
  store <8 x i16> %838, <8 x i16>* %841, align 2, !alias.scope !35, !noalias !32
  %842 = or i64 %808, 48
  %843 = getelementptr i16, i16* %784, i64 %842
  %844 = getelementptr i16, i16* %783, i64 %842
  %845 = bitcast i16* %843 to <8 x i16>*
  %846 = load <8 x i16>, <8 x i16>* %845, align 2, !alias.scope !32
  %847 = getelementptr i16, i16* %843, i64 8
  %848 = bitcast i16* %847 to <8 x i16>*
  %849 = load <8 x i16>, <8 x i16>* %848, align 2, !alias.scope !32
  %850 = bitcast i16* %844 to <8 x i16>*
  store <8 x i16> %846, <8 x i16>* %850, align 2, !alias.scope !35, !noalias !32
  %851 = getelementptr i16, i16* %844, i64 8
  %852 = bitcast i16* %851 to <8 x i16>*
  store <8 x i16> %849, <8 x i16>* %852, align 2, !alias.scope !35, !noalias !32
  %853 = add i64 %808, 64
  %854 = add i64 %809, -4
  %855 = icmp eq i64 %854, 0
  br i1 %855, label %856, label %807, !llvm.loop !37

856:                                              ; preds = %807, %795
  %857 = phi i64 [ 0, %795 ], [ %853, %807 ]
  %858 = icmp eq i64 %803, 0
  br i1 %858, label %875, label %859

859:                                              ; preds = %856, %859
  %860 = phi i64 [ %872, %859 ], [ %857, %856 ]
  %861 = phi i64 [ %873, %859 ], [ %803, %856 ]
  %862 = getelementptr i16, i16* %784, i64 %860
  %863 = getelementptr i16, i16* %783, i64 %860
  %864 = bitcast i16* %862 to <8 x i16>*
  %865 = load <8 x i16>, <8 x i16>* %864, align 2, !alias.scope !32
  %866 = getelementptr i16, i16* %862, i64 8
  %867 = bitcast i16* %866 to <8 x i16>*
  %868 = load <8 x i16>, <8 x i16>* %867, align 2, !alias.scope !32
  %869 = bitcast i16* %863 to <8 x i16>*
  store <8 x i16> %865, <8 x i16>* %869, align 2, !alias.scope !35, !noalias !32
  %870 = getelementptr i16, i16* %863, i64 8
  %871 = bitcast i16* %870 to <8 x i16>*
  store <8 x i16> %868, <8 x i16>* %871, align 2, !alias.scope !35, !noalias !32
  %872 = add i64 %860, 16
  %873 = add i64 %861, -1
  %874 = icmp eq i64 %873, 0
  br i1 %874, label %875, label %859, !llvm.loop !38

875:                                              ; preds = %859, %856
  %876 = icmp eq i64 %780, %796
  br i1 %876, label %1095, label %877

877:                                              ; preds = %875, %788, %786
  %878 = phi i64 [ %780, %788 ], [ %780, %786 ], [ %797, %875 ]
  %879 = phi i16* [ %784, %788 ], [ %784, %786 ], [ %798, %875 ]
  %880 = phi i16* [ %783, %788 ], [ %783, %786 ], [ %799, %875 ]
  %881 = add i64 %878, -1
  %882 = and i64 %878, 7
  %883 = icmp eq i64 %882, 0
  br i1 %883, label %895, label %884

884:                                              ; preds = %877, %884
  %885 = phi i64 [ %890, %884 ], [ %878, %877 ]
  %886 = phi i16* [ %892, %884 ], [ %879, %877 ]
  %887 = phi i16* [ %891, %884 ], [ %880, %877 ]
  %888 = phi i64 [ %893, %884 ], [ %882, %877 ]
  %889 = load i16, i16* %886, align 2
  store i16 %889, i16* %887, align 2
  %890 = add i64 %885, -1
  %891 = getelementptr inbounds i16, i16* %887, i64 1
  %892 = getelementptr inbounds i16, i16* %886, i64 1
  %893 = add i64 %888, -1
  %894 = icmp eq i64 %893, 0
  br i1 %894, label %895, label %884, !llvm.loop !39

895:                                              ; preds = %884, %877
  %896 = phi i64 [ %878, %877 ], [ %890, %884 ]
  %897 = phi i16* [ %879, %877 ], [ %892, %884 ]
  %898 = phi i16* [ %880, %877 ], [ %891, %884 ]
  %899 = icmp ult i64 %881, 7
  br i1 %899, label %1095, label %900

900:                                              ; preds = %895, %900
  %901 = phi i64 [ %926, %900 ], [ %896, %895 ]
  %902 = phi i16* [ %928, %900 ], [ %897, %895 ]
  %903 = phi i16* [ %927, %900 ], [ %898, %895 ]
  %904 = load i16, i16* %902, align 2
  store i16 %904, i16* %903, align 2
  %905 = getelementptr inbounds i16, i16* %903, i64 1
  %906 = getelementptr inbounds i16, i16* %902, i64 1
  %907 = load i16, i16* %906, align 2
  store i16 %907, i16* %905, align 2
  %908 = getelementptr inbounds i16, i16* %903, i64 2
  %909 = getelementptr inbounds i16, i16* %902, i64 2
  %910 = load i16, i16* %909, align 2
  store i16 %910, i16* %908, align 2
  %911 = getelementptr inbounds i16, i16* %903, i64 3
  %912 = getelementptr inbounds i16, i16* %902, i64 3
  %913 = load i16, i16* %912, align 2
  store i16 %913, i16* %911, align 2
  %914 = getelementptr inbounds i16, i16* %903, i64 4
  %915 = getelementptr inbounds i16, i16* %902, i64 4
  %916 = load i16, i16* %915, align 2
  store i16 %916, i16* %914, align 2
  %917 = getelementptr inbounds i16, i16* %903, i64 5
  %918 = getelementptr inbounds i16, i16* %902, i64 5
  %919 = load i16, i16* %918, align 2
  store i16 %919, i16* %917, align 2
  %920 = getelementptr inbounds i16, i16* %903, i64 6
  %921 = getelementptr inbounds i16, i16* %902, i64 6
  %922 = load i16, i16* %921, align 2
  store i16 %922, i16* %920, align 2
  %923 = getelementptr inbounds i16, i16* %903, i64 7
  %924 = getelementptr inbounds i16, i16* %902, i64 7
  %925 = load i16, i16* %924, align 2
  store i16 %925, i16* %923, align 2
  %926 = add i64 %901, -8
  %927 = getelementptr inbounds i16, i16* %903, i64 8
  %928 = getelementptr inbounds i16, i16* %902, i64 8
  %929 = icmp eq i64 %926, 0
  br i1 %929, label %1095, label %900, !llvm.loop !40

930:                                              ; preds = %782
  %931 = icmp slt i64 %779, 0
  br i1 %931, label %932, label %1095

932:                                              ; preds = %930
  %933 = getelementptr inbounds i16, i16* %784, i64 %780
  %934 = getelementptr inbounds i16, i16* %783, i64 %780
  %935 = icmp ult i64 %780, 16
  br i1 %935, label %1042, label %936

936:                                              ; preds = %932
  %937 = xor i64 %779, -1
  %938 = add i64 %760, %937
  %939 = sub i64 %938, %752
  %940 = getelementptr i16, i16* %776, i64 %938
  %941 = ptrtoint i16* %940 to i64
  %942 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %939, i64 2)
  %943 = extractvalue { i64, i1 } %942, 0
  %944 = extractvalue { i64, i1 } %942, 1
  %945 = icmp ugt i64 %943, %941
  %946 = or i1 %945, %944
  %947 = add i64 %760, -1
  %948 = getelementptr i16, i16* %776, i64 %947
  %949 = ptrtoint i16* %948 to i64
  %950 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %939, i64 2)
  %951 = extractvalue { i64, i1 } %950, 0
  %952 = extractvalue { i64, i1 } %950, 1
  %953 = icmp ugt i64 %951, %949
  %954 = or i1 %953, %952
  %955 = or i1 %946, %954
  br i1 %955, label %1042, label %956

956:                                              ; preds = %936
  %957 = add i64 %779, %752
  %958 = getelementptr i16, i16* %776, i64 %957
  %959 = icmp ult i16* %783, %933
  %960 = icmp ult i16* %958, %934
  %961 = and i1 %959, %960
  br i1 %961, label %1042, label %962

962:                                              ; preds = %956
  %963 = and i64 %780, -16
  %964 = sub i64 %780, %963
  %965 = sub i64 0, %963
  %966 = getelementptr i16, i16* %933, i64 %965
  %967 = sub i64 0, %963
  %968 = getelementptr i16, i16* %934, i64 %967
  %969 = add i64 %963, -16
  %970 = lshr exact i64 %969, 4
  %971 = add nuw nsw i64 %970, 1
  %972 = and i64 %971, 1
  %973 = icmp eq i64 %969, 0
  br i1 %973, label %1018, label %974

974:                                              ; preds = %962
  %975 = sub nuw nsw i64 %971, %972
  %976 = getelementptr i16, i16* %933, i64 -1
  %977 = getelementptr i16, i16* %934, i64 -1
  %978 = getelementptr i16, i16* %933, i64 -1
  %979 = getelementptr i16, i16* %934, i64 -1
  br label %980

980:                                              ; preds = %980, %974
  %981 = phi i64 [ 0, %974 ], [ %1015, %980 ]
  %982 = phi i64 [ %975, %974 ], [ %1016, %980 ]
  %983 = sub i64 0, %981
  %984 = sub i64 0, %981
  %985 = getelementptr inbounds i16, i16* %977, i64 %984
  %986 = getelementptr inbounds i16, i16* %976, i64 %983
  %987 = getelementptr inbounds i16, i16* %986, i64 -7
  %988 = bitcast i16* %987 to <8 x i16>*
  %989 = load <8 x i16>, <8 x i16>* %988, align 2, !alias.scope !41
  %990 = getelementptr inbounds i16, i16* %986, i64 -8
  %991 = getelementptr inbounds i16, i16* %990, i64 -7
  %992 = bitcast i16* %991 to <8 x i16>*
  %993 = load <8 x i16>, <8 x i16>* %992, align 2, !alias.scope !41
  %994 = getelementptr inbounds i16, i16* %985, i64 -7
  %995 = bitcast i16* %994 to <8 x i16>*
  store <8 x i16> %989, <8 x i16>* %995, align 2, !alias.scope !44, !noalias !41
  %996 = getelementptr inbounds i16, i16* %985, i64 -8
  %997 = getelementptr inbounds i16, i16* %996, i64 -7
  %998 = bitcast i16* %997 to <8 x i16>*
  store <8 x i16> %993, <8 x i16>* %998, align 2, !alias.scope !44, !noalias !41
  %999 = sub nuw nsw i64 -16, %981
  %1000 = sub nuw nsw i64 -16, %981
  %1001 = getelementptr inbounds i16, i16* %979, i64 %1000
  %1002 = getelementptr inbounds i16, i16* %978, i64 %999
  %1003 = getelementptr inbounds i16, i16* %1002, i64 -7
  %1004 = bitcast i16* %1003 to <8 x i16>*
  %1005 = load <8 x i16>, <8 x i16>* %1004, align 2, !alias.scope !41
  %1006 = getelementptr inbounds i16, i16* %1002, i64 -8
  %1007 = getelementptr inbounds i16, i16* %1006, i64 -7
  %1008 = bitcast i16* %1007 to <8 x i16>*
  %1009 = load <8 x i16>, <8 x i16>* %1008, align 2, !alias.scope !41
  %1010 = getelementptr inbounds i16, i16* %1001, i64 -7
  %1011 = bitcast i16* %1010 to <8 x i16>*
  store <8 x i16> %1005, <8 x i16>* %1011, align 2, !alias.scope !44, !noalias !41
  %1012 = getelementptr inbounds i16, i16* %1001, i64 -8
  %1013 = getelementptr inbounds i16, i16* %1012, i64 -7
  %1014 = bitcast i16* %1013 to <8 x i16>*
  store <8 x i16> %1009, <8 x i16>* %1014, align 2, !alias.scope !44, !noalias !41
  %1015 = add i64 %981, 32
  %1016 = add i64 %982, -2
  %1017 = icmp eq i64 %1016, 0
  br i1 %1017, label %1018, label %980, !llvm.loop !46

1018:                                             ; preds = %980, %962
  %1019 = phi i64 [ 0, %962 ], [ %1015, %980 ]
  %1020 = icmp eq i64 %972, 0
  br i1 %1020, label %1040, label %1021

1021:                                             ; preds = %1018
  %1022 = sub i64 0, %1019
  %1023 = getelementptr i16, i16* %933, i64 -1
  %1024 = sub i64 0, %1019
  %1025 = getelementptr i16, i16* %934, i64 -1
  %1026 = getelementptr inbounds i16, i16* %1025, i64 %1024
  %1027 = getelementptr inbounds i16, i16* %1023, i64 %1022
  %1028 = getelementptr inbounds i16, i16* %1027, i64 -7
  %1029 = bitcast i16* %1028 to <8 x i16>*
  %1030 = load <8 x i16>, <8 x i16>* %1029, align 2, !alias.scope !41
  %1031 = getelementptr inbounds i16, i16* %1027, i64 -8
  %1032 = getelementptr inbounds i16, i16* %1031, i64 -7
  %1033 = bitcast i16* %1032 to <8 x i16>*
  %1034 = load <8 x i16>, <8 x i16>* %1033, align 2, !alias.scope !41
  %1035 = getelementptr inbounds i16, i16* %1026, i64 -7
  %1036 = bitcast i16* %1035 to <8 x i16>*
  store <8 x i16> %1030, <8 x i16>* %1036, align 2, !alias.scope !44, !noalias !41
  %1037 = getelementptr inbounds i16, i16* %1026, i64 -8
  %1038 = getelementptr inbounds i16, i16* %1037, i64 -7
  %1039 = bitcast i16* %1038 to <8 x i16>*
  store <8 x i16> %1034, <8 x i16>* %1039, align 2, !alias.scope !44, !noalias !41
  br label %1040

1040:                                             ; preds = %1018, %1021
  %1041 = icmp eq i64 %780, %963
  br i1 %1041, label %1095, label %1042

1042:                                             ; preds = %1040, %956, %936, %932
  %1043 = phi i64 [ %780, %956 ], [ %780, %936 ], [ %780, %932 ], [ %964, %1040 ]
  %1044 = phi i16* [ %933, %956 ], [ %933, %936 ], [ %933, %932 ], [ %966, %1040 ]
  %1045 = phi i16* [ %934, %956 ], [ %934, %936 ], [ %934, %932 ], [ %968, %1040 ]
  %1046 = add i64 %1043, -1
  %1047 = and i64 %1043, 7
  %1048 = icmp eq i64 %1047, 0
  br i1 %1048, label %1060, label %1049

1049:                                             ; preds = %1042, %1049
  %1050 = phi i64 [ %1057, %1049 ], [ %1043, %1042 ]
  %1051 = phi i16* [ %1055, %1049 ], [ %1044, %1042 ]
  %1052 = phi i16* [ %1054, %1049 ], [ %1045, %1042 ]
  %1053 = phi i64 [ %1058, %1049 ], [ %1047, %1042 ]
  %1054 = getelementptr inbounds i16, i16* %1052, i64 -1
  %1055 = getelementptr inbounds i16, i16* %1051, i64 -1
  %1056 = load i16, i16* %1055, align 2
  store i16 %1056, i16* %1054, align 2
  %1057 = add i64 %1050, -1
  %1058 = add i64 %1053, -1
  %1059 = icmp eq i64 %1058, 0
  br i1 %1059, label %1060, label %1049, !llvm.loop !47

1060:                                             ; preds = %1049, %1042
  %1061 = phi i64 [ %1043, %1042 ], [ %1057, %1049 ]
  %1062 = phi i16* [ %1044, %1042 ], [ %1055, %1049 ]
  %1063 = phi i16* [ %1045, %1042 ], [ %1054, %1049 ]
  %1064 = icmp ult i64 %1046, 7
  br i1 %1064, label %1095, label %1065

1065:                                             ; preds = %1060, %1065
  %1066 = phi i64 [ %1093, %1065 ], [ %1061, %1060 ]
  %1067 = phi i16* [ %1091, %1065 ], [ %1062, %1060 ]
  %1068 = phi i16* [ %1090, %1065 ], [ %1063, %1060 ]
  %1069 = getelementptr inbounds i16, i16* %1068, i64 -1
  %1070 = getelementptr inbounds i16, i16* %1067, i64 -1
  %1071 = load i16, i16* %1070, align 2
  store i16 %1071, i16* %1069, align 2
  %1072 = getelementptr inbounds i16, i16* %1068, i64 -2
  %1073 = getelementptr inbounds i16, i16* %1067, i64 -2
  %1074 = load i16, i16* %1073, align 2
  store i16 %1074, i16* %1072, align 2
  %1075 = getelementptr inbounds i16, i16* %1068, i64 -3
  %1076 = getelementptr inbounds i16, i16* %1067, i64 -3
  %1077 = load i16, i16* %1076, align 2
  store i16 %1077, i16* %1075, align 2
  %1078 = getelementptr inbounds i16, i16* %1068, i64 -4
  %1079 = getelementptr inbounds i16, i16* %1067, i64 -4
  %1080 = load i16, i16* %1079, align 2
  store i16 %1080, i16* %1078, align 2
  %1081 = getelementptr inbounds i16, i16* %1068, i64 -5
  %1082 = getelementptr inbounds i16, i16* %1067, i64 -5
  %1083 = load i16, i16* %1082, align 2
  store i16 %1083, i16* %1081, align 2
  %1084 = getelementptr inbounds i16, i16* %1068, i64 -6
  %1085 = getelementptr inbounds i16, i16* %1067, i64 -6
  %1086 = load i16, i16* %1085, align 2
  store i16 %1086, i16* %1084, align 2
  %1087 = getelementptr inbounds i16, i16* %1068, i64 -7
  %1088 = getelementptr inbounds i16, i16* %1067, i64 -7
  %1089 = load i16, i16* %1088, align 2
  store i16 %1089, i16* %1087, align 2
  %1090 = getelementptr inbounds i16, i16* %1068, i64 -8
  %1091 = getelementptr inbounds i16, i16* %1067, i64 -8
  %1092 = load i16, i16* %1091, align 2
  store i16 %1092, i16* %1090, align 2
  %1093 = add i64 %1066, -8
  %1094 = icmp eq i64 %1093, 0
  br i1 %1094, label %1095, label %1065, !llvm.loop !48

1095:                                             ; preds = %1060, %1065, %895, %900, %1040, %875, %930, %773
  %1096 = sub i64 %760, %779
  %1097 = load i8, i8* %755, align 1
  %1098 = icmp slt i8 %1097, 0
  br i1 %1098, label %1099, label %1100

1099:                                             ; preds = %1095
  store i64 %1096, i64* %89, align 8
  br label %1102

1100:                                             ; preds = %1095
  %1101 = trunc i64 %1096 to i8
  store i8 %1101, i8* %755, align 1
  br label %1102

1102:                                             ; preds = %1100, %1099
  %1103 = getelementptr inbounds i16, i16* %776, i64 %1096
  store i16 0, i16* %1103, align 2
  br label %1104

1104:                                             ; preds = %764, %769, %766, %1102, %749
  %1105 = phi %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* [ %754, %764 ], [ %754, %769 ], [ %754, %766 ], [ %754, %1102 ], [ %574, %749 ]
  %1106 = phi i32 [ %278, %764 ], [ %278, %769 ], [ %278, %766 ], [ %278, %1102 ], [ %572, %749 ]
  %1107 = bitcast %"struct.vr::TextInputInfo"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1107) #11
  %1108 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1105, i64 0, i32 1, i32 1
  %1109 = load i8, i8* %1108, align 1
  %1110 = icmp slt i8 %1109, 0
  br i1 %1110, label %1113, label %1111

1111:                                             ; preds = %1104
  %1112 = bitcast %"class.std::__1::basic_string.11"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1112, i8* nonnull align 8 %87, i64 24, i1 false) #11
  br label %1286

1113:                                             ; preds = %1104
  %1114 = load i16*, i16** %88, align 8
  %1115 = load i64, i64* %89, align 8
  %1116 = icmp ult i64 %1115, 11
  br i1 %1116, label %1117, label %1122

1117:                                             ; preds = %1113
  %1118 = bitcast %"class.std::__1::basic_string.11"* %10 to i16*
  %1119 = trunc i64 %1115 to i8
  %1120 = bitcast %"class.std::__1::basic_string.11"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1121 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1120, i64 0, i32 1, i32 1
  store i8 %1119, i8* %1121, align 1
  br label %1139

1122:                                             ; preds = %1113
  %1123 = icmp ugt i64 %1115, 9223372036854775791
  br i1 %1123, label %1124, label %1126

1124:                                             ; preds = %1122
  %1125 = bitcast %"class.std::__1::basic_string.11"* %10 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %1125) #13
  unreachable

1126:                                             ; preds = %1122
  %1127 = add nuw nsw i64 %1115, 8
  %1128 = and i64 %1127, -8
  %1129 = icmp slt i64 %1128, 0
  br i1 %1129, label %1130, label %1131

1130:                                             ; preds = %1126
  call void @abort() #13
  unreachable

1131:                                             ; preds = %1126
  %1132 = shl i64 %1128, 1
  %1133 = call i8* @_Znwm(i64 %1132) #12
  %1134 = bitcast i8* %1133 to i16*
  %1135 = bitcast %"class.std::__1::basic_string.11"* %10 to i8**
  store i8* %1133, i8** %1135, align 8
  %1136 = or i64 %1128, -9223372036854775808
  %1137 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %1136, i64* %1137, align 8
  %1138 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1115, i64* %1138, align 8
  br label %1139

1139:                                             ; preds = %1131, %1117
  %1140 = phi i16* [ %1118, %1117 ], [ %1134, %1131 ]
  %1141 = add nuw nsw i64 %1115, 1
  %1142 = add i64 %1115, 1
  %1143 = icmp ult i64 %1142, 16
  br i1 %1143, label %1233, label %1144

1144:                                             ; preds = %1139
  %1145 = add i64 %1115, 1
  %1146 = getelementptr i16, i16* %1140, i64 %1145
  %1147 = getelementptr i16, i16* %1114, i64 %1145
  %1148 = icmp ult i16* %1140, %1147
  %1149 = icmp ult i16* %1114, %1146
  %1150 = and i1 %1148, %1149
  br i1 %1150, label %1233, label %1151

1151:                                             ; preds = %1144
  %1152 = and i64 %1142, -16
  %1153 = sub i64 %1141, %1152
  %1154 = getelementptr i16, i16* %1114, i64 %1152
  %1155 = getelementptr i16, i16* %1140, i64 %1152
  %1156 = add i64 %1152, -16
  %1157 = lshr exact i64 %1156, 4
  %1158 = add nuw nsw i64 %1157, 1
  %1159 = and i64 %1158, 3
  %1160 = icmp ult i64 %1156, 48
  br i1 %1160, label %1212, label %1161

1161:                                             ; preds = %1151
  %1162 = sub nsw i64 %1158, %1159
  br label %1163

1163:                                             ; preds = %1163, %1161
  %1164 = phi i64 [ 0, %1161 ], [ %1209, %1163 ]
  %1165 = phi i64 [ %1162, %1161 ], [ %1210, %1163 ]
  %1166 = getelementptr i16, i16* %1114, i64 %1164
  %1167 = getelementptr i16, i16* %1140, i64 %1164
  %1168 = bitcast i16* %1166 to <8 x i16>*
  %1169 = load <8 x i16>, <8 x i16>* %1168, align 2, !alias.scope !49
  %1170 = getelementptr i16, i16* %1166, i64 8
  %1171 = bitcast i16* %1170 to <8 x i16>*
  %1172 = load <8 x i16>, <8 x i16>* %1171, align 2, !alias.scope !49
  %1173 = bitcast i16* %1167 to <8 x i16>*
  store <8 x i16> %1169, <8 x i16>* %1173, align 2, !alias.scope !52, !noalias !49
  %1174 = getelementptr i16, i16* %1167, i64 8
  %1175 = bitcast i16* %1174 to <8 x i16>*
  store <8 x i16> %1172, <8 x i16>* %1175, align 2, !alias.scope !52, !noalias !49
  %1176 = or i64 %1164, 16
  %1177 = getelementptr i16, i16* %1114, i64 %1176
  %1178 = getelementptr i16, i16* %1140, i64 %1176
  %1179 = bitcast i16* %1177 to <8 x i16>*
  %1180 = load <8 x i16>, <8 x i16>* %1179, align 2, !alias.scope !49
  %1181 = getelementptr i16, i16* %1177, i64 8
  %1182 = bitcast i16* %1181 to <8 x i16>*
  %1183 = load <8 x i16>, <8 x i16>* %1182, align 2, !alias.scope !49
  %1184 = bitcast i16* %1178 to <8 x i16>*
  store <8 x i16> %1180, <8 x i16>* %1184, align 2, !alias.scope !52, !noalias !49
  %1185 = getelementptr i16, i16* %1178, i64 8
  %1186 = bitcast i16* %1185 to <8 x i16>*
  store <8 x i16> %1183, <8 x i16>* %1186, align 2, !alias.scope !52, !noalias !49
  %1187 = or i64 %1164, 32
  %1188 = getelementptr i16, i16* %1114, i64 %1187
  %1189 = getelementptr i16, i16* %1140, i64 %1187
  %1190 = bitcast i16* %1188 to <8 x i16>*
  %1191 = load <8 x i16>, <8 x i16>* %1190, align 2, !alias.scope !49
  %1192 = getelementptr i16, i16* %1188, i64 8
  %1193 = bitcast i16* %1192 to <8 x i16>*
  %1194 = load <8 x i16>, <8 x i16>* %1193, align 2, !alias.scope !49
  %1195 = bitcast i16* %1189 to <8 x i16>*
  store <8 x i16> %1191, <8 x i16>* %1195, align 2, !alias.scope !52, !noalias !49
  %1196 = getelementptr i16, i16* %1189, i64 8
  %1197 = bitcast i16* %1196 to <8 x i16>*
  store <8 x i16> %1194, <8 x i16>* %1197, align 2, !alias.scope !52, !noalias !49
  %1198 = or i64 %1164, 48
  %1199 = getelementptr i16, i16* %1114, i64 %1198
  %1200 = getelementptr i16, i16* %1140, i64 %1198
  %1201 = bitcast i16* %1199 to <8 x i16>*
  %1202 = load <8 x i16>, <8 x i16>* %1201, align 2, !alias.scope !49
  %1203 = getelementptr i16, i16* %1199, i64 8
  %1204 = bitcast i16* %1203 to <8 x i16>*
  %1205 = load <8 x i16>, <8 x i16>* %1204, align 2, !alias.scope !49
  %1206 = bitcast i16* %1200 to <8 x i16>*
  store <8 x i16> %1202, <8 x i16>* %1206, align 2, !alias.scope !52, !noalias !49
  %1207 = getelementptr i16, i16* %1200, i64 8
  %1208 = bitcast i16* %1207 to <8 x i16>*
  store <8 x i16> %1205, <8 x i16>* %1208, align 2, !alias.scope !52, !noalias !49
  %1209 = add i64 %1164, 64
  %1210 = add i64 %1165, -4
  %1211 = icmp eq i64 %1210, 0
  br i1 %1211, label %1212, label %1163, !llvm.loop !54

1212:                                             ; preds = %1163, %1151
  %1213 = phi i64 [ 0, %1151 ], [ %1209, %1163 ]
  %1214 = icmp eq i64 %1159, 0
  br i1 %1214, label %1231, label %1215

1215:                                             ; preds = %1212, %1215
  %1216 = phi i64 [ %1228, %1215 ], [ %1213, %1212 ]
  %1217 = phi i64 [ %1229, %1215 ], [ %1159, %1212 ]
  %1218 = getelementptr i16, i16* %1114, i64 %1216
  %1219 = getelementptr i16, i16* %1140, i64 %1216
  %1220 = bitcast i16* %1218 to <8 x i16>*
  %1221 = load <8 x i16>, <8 x i16>* %1220, align 2, !alias.scope !49
  %1222 = getelementptr i16, i16* %1218, i64 8
  %1223 = bitcast i16* %1222 to <8 x i16>*
  %1224 = load <8 x i16>, <8 x i16>* %1223, align 2, !alias.scope !49
  %1225 = bitcast i16* %1219 to <8 x i16>*
  store <8 x i16> %1221, <8 x i16>* %1225, align 2, !alias.scope !52, !noalias !49
  %1226 = getelementptr i16, i16* %1219, i64 8
  %1227 = bitcast i16* %1226 to <8 x i16>*
  store <8 x i16> %1224, <8 x i16>* %1227, align 2, !alias.scope !52, !noalias !49
  %1228 = add i64 %1216, 16
  %1229 = add i64 %1217, -1
  %1230 = icmp eq i64 %1229, 0
  br i1 %1230, label %1231, label %1215, !llvm.loop !55

1231:                                             ; preds = %1215, %1212
  %1232 = icmp eq i64 %1142, %1152
  br i1 %1232, label %1286, label %1233

1233:                                             ; preds = %1231, %1144, %1139
  %1234 = phi i64 [ %1141, %1144 ], [ %1141, %1139 ], [ %1153, %1231 ]
  %1235 = phi i16* [ %1114, %1144 ], [ %1114, %1139 ], [ %1154, %1231 ]
  %1236 = phi i16* [ %1140, %1144 ], [ %1140, %1139 ], [ %1155, %1231 ]
  %1237 = add i64 %1234, -1
  %1238 = and i64 %1234, 7
  %1239 = icmp eq i64 %1238, 0
  br i1 %1239, label %1251, label %1240

1240:                                             ; preds = %1233, %1240
  %1241 = phi i64 [ %1246, %1240 ], [ %1234, %1233 ]
  %1242 = phi i16* [ %1248, %1240 ], [ %1235, %1233 ]
  %1243 = phi i16* [ %1247, %1240 ], [ %1236, %1233 ]
  %1244 = phi i64 [ %1249, %1240 ], [ %1238, %1233 ]
  %1245 = load i16, i16* %1242, align 2
  store i16 %1245, i16* %1243, align 2
  %1246 = add i64 %1241, -1
  %1247 = getelementptr inbounds i16, i16* %1243, i64 1
  %1248 = getelementptr inbounds i16, i16* %1242, i64 1
  %1249 = add i64 %1244, -1
  %1250 = icmp eq i64 %1249, 0
  br i1 %1250, label %1251, label %1240, !llvm.loop !56

1251:                                             ; preds = %1240, %1233
  %1252 = phi i64 [ %1234, %1233 ], [ %1246, %1240 ]
  %1253 = phi i16* [ %1235, %1233 ], [ %1248, %1240 ]
  %1254 = phi i16* [ %1236, %1233 ], [ %1247, %1240 ]
  %1255 = icmp ult i64 %1237, 7
  br i1 %1255, label %1286, label %1256

1256:                                             ; preds = %1251, %1256
  %1257 = phi i64 [ %1282, %1256 ], [ %1252, %1251 ]
  %1258 = phi i16* [ %1284, %1256 ], [ %1253, %1251 ]
  %1259 = phi i16* [ %1283, %1256 ], [ %1254, %1251 ]
  %1260 = load i16, i16* %1258, align 2
  store i16 %1260, i16* %1259, align 2
  %1261 = getelementptr inbounds i16, i16* %1259, i64 1
  %1262 = getelementptr inbounds i16, i16* %1258, i64 1
  %1263 = load i16, i16* %1262, align 2
  store i16 %1263, i16* %1261, align 2
  %1264 = getelementptr inbounds i16, i16* %1259, i64 2
  %1265 = getelementptr inbounds i16, i16* %1258, i64 2
  %1266 = load i16, i16* %1265, align 2
  store i16 %1266, i16* %1264, align 2
  %1267 = getelementptr inbounds i16, i16* %1259, i64 3
  %1268 = getelementptr inbounds i16, i16* %1258, i64 3
  %1269 = load i16, i16* %1268, align 2
  store i16 %1269, i16* %1267, align 2
  %1270 = getelementptr inbounds i16, i16* %1259, i64 4
  %1271 = getelementptr inbounds i16, i16* %1258, i64 4
  %1272 = load i16, i16* %1271, align 2
  store i16 %1272, i16* %1270, align 2
  %1273 = getelementptr inbounds i16, i16* %1259, i64 5
  %1274 = getelementptr inbounds i16, i16* %1258, i64 5
  %1275 = load i16, i16* %1274, align 2
  store i16 %1275, i16* %1273, align 2
  %1276 = getelementptr inbounds i16, i16* %1259, i64 6
  %1277 = getelementptr inbounds i16, i16* %1258, i64 6
  %1278 = load i16, i16* %1277, align 2
  store i16 %1278, i16* %1276, align 2
  %1279 = getelementptr inbounds i16, i16* %1259, i64 7
  %1280 = getelementptr inbounds i16, i16* %1258, i64 7
  %1281 = load i16, i16* %1280, align 2
  store i16 %1281, i16* %1279, align 2
  %1282 = add i64 %1257, -8
  %1283 = getelementptr inbounds i16, i16* %1259, i64 8
  %1284 = getelementptr inbounds i16, i16* %1258, i64 8
  %1285 = icmp eq i64 %1282, 0
  br i1 %1285, label %1286, label %1256, !llvm.loop !57

1286:                                             ; preds = %1251, %1256, %1231, %1111
  call void @_ZN2vr13TextInputInfoC1ENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEii(%"struct.vr::TextInputInfo"* nonnull %9, %"class.std::__1::basic_string.11"* nonnull %10, i32 %1106, i32 %1106) #11
  %1287 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %3, i64 0, i32 0
  %1288 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 0
  %1289 = call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.11"* nonnull %1287, %"class.std::__1::basic_string.11"* nonnull dereferenceable(24) %1288) #11
  %1290 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %3, i64 0, i32 1
  %1291 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %9, i64 0, i32 1
  %1292 = bitcast i32* %1290 to i8*
  %1293 = bitcast i32* %1291 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1292, i8* align 8 %1293, i64 16, i1 false) #11
  %1294 = bitcast %"struct.vr::TextInputInfo"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1295 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1294, i64 0, i32 1, i32 1
  %1296 = load i8, i8* %1295, align 1
  %1297 = icmp slt i8 %1296, 0
  br i1 %1297, label %1298, label %1301

1298:                                             ; preds = %1286
  %1299 = bitcast %"struct.vr::TextInputInfo"* %9 to i8**
  %1300 = load i8*, i8** %1299, align 8
  call void @_ZdlPv(i8* %1300) #12
  br label %1301

1301:                                             ; preds = %1286, %1298
  %1302 = bitcast %"class.std::__1::basic_string.11"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1303 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1302, i64 0, i32 1, i32 1
  %1304 = load i8, i8* %1303, align 1
  %1305 = icmp slt i8 %1304, 0
  br i1 %1305, label %1306, label %1334

1306:                                             ; preds = %1301
  %1307 = bitcast %"class.std::__1::basic_string.11"* %10 to i8**
  %1308 = load i8*, i8** %1307, align 8
  call void @_ZdlPv(i8* %1308) #12
  br label %1334

1309:                                             ; preds = %272
  %1310 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 1
  %1311 = load %"class.vr::KeyboardUiInterface"*, %"class.vr::KeyboardUiInterface"** %1310, align 8
  %1312 = bitcast %"struct.vr::EditedText"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %1312) #11
  call void @_ZN2vr10EditedTextC1ERKNS_13TextInputInfoES3_(%"struct.vr::EditedText"* nonnull %11, %"struct.vr::TextInputInfo"* dereferenceable(40) %91, %"struct.vr::TextInputInfo"* dereferenceable(40) %91) #11
  %1313 = bitcast %"class.vr::KeyboardUiInterface"* %1311 to void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)***
  %1314 = load void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)**, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*** %1313, align 8
  %1315 = getelementptr inbounds void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)** %1314, i64 3
  %1316 = load void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)** %1315, align 8
  call void %1316(%"class.vr::KeyboardUiInterface"* %1311, %"struct.vr::EditedText"* nonnull dereferenceable(80) %11) #11
  %1317 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %11, i64 0, i32 1
  %1318 = bitcast %"struct.vr::TextInputInfo"* %1317 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1319 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1318, i64 0, i32 1, i32 1
  %1320 = load i8, i8* %1319, align 1
  %1321 = icmp slt i8 %1320, 0
  br i1 %1321, label %1322, label %1325

1322:                                             ; preds = %1309
  %1323 = bitcast %"struct.vr::TextInputInfo"* %1317 to i8**
  %1324 = load i8*, i8** %1323, align 8
  call void @_ZdlPv(i8* %1324) #12
  br label %1325

1325:                                             ; preds = %1322, %1309
  %1326 = bitcast %"struct.vr::EditedText"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1327 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1326, i64 0, i32 1, i32 1
  %1328 = load i8, i8* %1327, align 1
  %1329 = icmp slt i8 %1328, 0
  br i1 %1329, label %1330, label %1333

1330:                                             ; preds = %1325
  %1331 = bitcast %"struct.vr::EditedText"* %11 to i8**
  %1332 = load i8*, i8** %1331, align 8
  call void @_ZdlPv(i8* %1332) #12
  br label %1333

1333:                                             ; preds = %1325, %1330
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %1312) #11
  br label %1361

1334:                                             ; preds = %1306, %1301, %563, %558
  %1335 = phi i8* [ %363, %558 ], [ %363, %563 ], [ %1107, %1301 ], [ %1107, %1306 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1335) #11
  br label %1336

1336:                                             ; preds = %1334, %272
  %1337 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 1
  %1338 = load %"class.vr::KeyboardUiInterface"*, %"class.vr::KeyboardUiInterface"** %1337, align 8
  %1339 = bitcast %"struct.vr::EditedText"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %1339) #11
  call void @_ZN2vr10EditedTextC1ERKNS_13TextInputInfoES3_(%"struct.vr::EditedText"* nonnull %12, %"struct.vr::TextInputInfo"* nonnull dereferenceable(40) %3, %"struct.vr::TextInputInfo"* dereferenceable(40) %91) #11
  %1340 = bitcast %"class.vr::KeyboardUiInterface"* %1338 to void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)***
  %1341 = load void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)**, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*** %1340, align 8
  %1342 = getelementptr inbounds void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)** %1341, i64 2
  %1343 = load void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)*, void (%"class.vr::KeyboardUiInterface"*, %"struct.vr::EditedText"*)** %1342, align 8
  call void %1343(%"class.vr::KeyboardUiInterface"* %1338, %"struct.vr::EditedText"* nonnull dereferenceable(80) %12) #11
  %1344 = getelementptr inbounds %"struct.vr::EditedText", %"struct.vr::EditedText"* %12, i64 0, i32 1
  %1345 = bitcast %"struct.vr::TextInputInfo"* %1344 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1346 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1345, i64 0, i32 1, i32 1
  %1347 = load i8, i8* %1346, align 1
  %1348 = icmp slt i8 %1347, 0
  br i1 %1348, label %1349, label %1352

1349:                                             ; preds = %1336
  %1350 = bitcast %"struct.vr::TextInputInfo"* %1344 to i8**
  %1351 = load i8*, i8** %1350, align 8
  call void @_ZdlPv(i8* %1351) #12
  br label %1352

1352:                                             ; preds = %1349, %1336
  %1353 = bitcast %"struct.vr::EditedText"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1354 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1353, i64 0, i32 1, i32 1
  %1355 = load i8, i8* %1354, align 1
  %1356 = icmp slt i8 %1355, 0
  br i1 %1356, label %1357, label %1360

1357:                                             ; preds = %1352
  %1358 = bitcast %"struct.vr::EditedText"* %12 to i8**
  %1359 = load i8*, i8** %1358, align 8
  call void @_ZdlPv(i8* %1359) #12
  br label %1360

1360:                                             ; preds = %1352, %1357
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %1339) #11
  store i8 1, i8* %21, align 1
  br label %1361

1361:                                             ; preds = %569, %1360, %1333
  %1362 = bitcast %"class.std::__1::basic_string.11"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1363 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1362, i64 0, i32 1, i32 1
  %1364 = load i8, i8* %1363, align 1
  %1365 = icmp slt i8 %1364, 0
  br i1 %1365, label %1366, label %1369

1366:                                             ; preds = %1361
  %1367 = bitcast %"class.std::__1::basic_string.11"* %4 to i8**
  %1368 = load i8*, i8** %1367, align 8
  call void @_ZdlPv(i8* %1368) #12
  br label %1369

1369:                                             ; preds = %1361, %1366
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #11
  %1370 = bitcast %"struct.vr::TextInputInfo"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1371 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1370, i64 0, i32 1, i32 1
  %1372 = load i8, i8* %1371, align 1
  %1373 = icmp slt i8 %1372, 0
  br i1 %1373, label %1374, label %1377

1374:                                             ; preds = %1369
  %1375 = bitcast %"struct.vr::TextInputInfo"* %3 to i8**
  %1376 = load i8*, i8** %1375, align 8
  call void @_ZdlPv(i8* %1376) #12
  br label %1377

1377:                                             ; preds = %1369, %1374
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %86) #11
  %1378 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1379 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %1378, i64 0, i32 1, i32 0
  %1380 = load i8, i8* %1379, align 1
  %1381 = icmp slt i8 %1380, 0
  br i1 %1381, label %1382, label %1385

1382:                                             ; preds = %1377
  %1383 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1384 = load i8*, i8** %1383, align 8
  call void @_ZdlPv(i8* %1384) #12
  br label %1385

1385:                                             ; preds = %1377, %1382
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #11
  br label %1386

1386:                                             ; preds = %20, %1, %16, %1385
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i64 @_ZNK2vr13TextInputInfo13SelectionSizeEv(%"struct.vr::TextInputInfo"*) local_unnamed_addr #1

declare void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.11"* sret, i8*, i64) local_unnamed_addr #1

declare void @_ZN2vr13TextInputInfoC1ENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEii(%"struct.vr::TextInputInfo"*, %"class.std::__1::basic_string.11"*, i32, i32) unnamed_addr #1

declare void @_ZN2vr10EditedTextC1ERKNS_13TextInputInfoES3_(%"struct.vr::EditedText"*, %"struct.vr::TextInputInfo"* dereferenceable(40), %"struct.vr::TextInputInfo"* dereferenceable(40)) unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTesting4DrawERKNS_11CameraModelE(%"class.vr::KeyboardDelegateForTesting"* nocapture, %"struct.vr::CameraModel"* nocapture) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2vr26KeyboardDelegateForTesting17SupportsSelectionEv(%"class.vr::KeyboardDelegateForTesting"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2vr26KeyboardDelegateForTesting11UpdateInputERKNS_13TextInputInfoE(%"class.vr::KeyboardDelegateForTesting"*, %"struct.vr::TextInputInfo"* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 0
  %4 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %1, i64 0, i32 0
  %5 = tail call dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.11"* %3, %"class.std::__1::basic_string.11"* dereferenceable(24) %4) #11
  %6 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 3, i32 1
  %7 = getelementptr inbounds %"struct.vr::TextInputInfo", %"struct.vr::TextInputInfo"* %1, i64 0, i32 1
  %8 = bitcast i32* %6 to i8*
  %9 = bitcast i32* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false) #11
  %10 = getelementptr inbounds %"class.vr::KeyboardDelegateForTesting", %"class.vr::KeyboardDelegateForTesting"* %0, i64 0, i32 5
  store i8 0, i8* %10, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate19OnTouchStateUpdatedEbRKN3gfx6PointFE(%"class.vr::KeyboardDelegate"*, i1 zeroext, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate12OnHoverEnterERKN3gfx6PointFE(%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate12OnHoverLeaveEv(%"class.vr::KeyboardDelegate"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate11OnHoverMoveERKN3gfx6PointFE(%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate12OnButtonDownERKN3gfx6PointFE(%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2vr16KeyboardDelegate10OnButtonUpERKN3gfx6PointFE(%"class.vr::KeyboardDelegate"*, %"class.gfx::PointF"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string.11"*, %"class.std::__1::basic_string.11"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string.11"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string.11"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string.11"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string.11"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string.11"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string.11"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string.11"*
  %35 = icmp ugt %"class.std::__1::basic_string.11"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !58
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !58
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !61, !noalias !58
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !61, !noalias !58
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !58
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !58
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !61, !noalias !58
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !61, !noalias !58
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !58
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !58
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !61, !noalias !58
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !61, !noalias !58
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !58
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !58
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !61, !noalias !58
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !61, !noalias !58
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !63

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !58
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !58
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !61, !noalias !58
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !61, !noalias !58
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !64

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !65

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !66

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string.11"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #13
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #13
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #12
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !67
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !67
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !70, !noalias !67
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !70, !noalias !67
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !67
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !67
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !70, !noalias !67
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !70, !noalias !67
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !67
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !67
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !70, !noalias !67
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !70, !noalias !67
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !67
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !67
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !70, !noalias !67
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !70, !noalias !67
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !72

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !67
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !67
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !70, !noalias !67
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !70, !noalias !67
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !73

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !74

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !75

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string.11"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string.11"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !76
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !76
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !79, !noalias !76
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !79, !noalias !76
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !76
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !76
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !79, !noalias !76
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !79, !noalias !76
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !76
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !76
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !79, !noalias !76
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !79, !noalias !76
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !76
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !76
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !79, !noalias !76
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !79, !noalias !76
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !81

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !76
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !76
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !79, !noalias !76
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !79, !noalias !76
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !82

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !83

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !84

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.11"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #11
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string.11"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.11"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.11"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #13
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.11"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.11"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #13
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !85
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !85
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !88, !noalias !85
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !88, !noalias !85
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !85
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !85
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !88, !noalias !85
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !88, !noalias !85
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !85
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !85
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !88, !noalias !85
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !88, !noalias !85
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !85
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !85
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !88, !noalias !85
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !88, !noalias !85
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !90

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !85
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !85
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !88, !noalias !85
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !88, !noalias !85
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !91

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !92

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !93

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !94

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !95

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !96

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !98
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !98
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !101, !noalias !98
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !101, !noalias !98
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !98
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !98
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !101, !noalias !98
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !101, !noalias !98
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !98
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !98
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !101, !noalias !98
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !101, !noalias !98
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !98
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !98
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !101, !noalias !98
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !101, !noalias !98
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !103

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !98
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !98
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !101, !noalias !98
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !101, !noalias !98
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !104

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !105

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !106

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #12
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.11"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 7
  %7 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %8, align 8
  %10 = icmp eq %"struct.vr::KeyboardTestInput"** %9, %3
  %11 = ptrtoint %"struct.vr::KeyboardTestInput"** %9 to i64
  %12 = ptrtoint %"struct.vr::KeyboardTestInput"** %3 to i64
  %13 = bitcast %"struct.vr::KeyboardTestInput"** %3 to i8**
  br i1 %10, label %14, label %16

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

16:                                               ; preds = %1
  %17 = load %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %7, align 8
  %18 = and i64 %5, 127
  %19 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %17, i64 %18
  %20 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %5
  %23 = lshr i64 %22, 7
  %24 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %3, i64 %23
  %25 = load %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %24, align 8
  %26 = and i64 %22, 127
  %27 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %25, i64 %26
  %28 = icmp eq %"struct.vr::KeyboardTestInput"* %27, %19
  br i1 %28, label %29, label %47

29:                                               ; preds = %14, %16
  %30 = phi i64* [ %15, %14 ], [ %20, %16 ]
  %31 = bitcast %"struct.vr::KeyboardTestInput"*** %8 to i64*
  br label %38

32:                                               ; preds = %69
  %33 = bitcast %"struct.vr::KeyboardTestInput"*** %8 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.vr::KeyboardTestInput"*** %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = inttoptr i64 %36 to i8**
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i64* [ %30, %29 ], [ %20, %32 ]
  %40 = phi i64* [ %31, %29 ], [ %33, %32 ]
  %41 = phi i8** [ %13, %29 ], [ %37, %32 ]
  %42 = phi i64 [ %12, %29 ], [ %36, %32 ]
  %43 = phi i64 [ %11, %29 ], [ %34, %32 ]
  store i64 0, i64* %39, align 8
  %44 = sub i64 %43, %42
  %45 = ashr exact i64 %44, 3
  %46 = icmp ugt i64 %45, 2
  br i1 %46, label %74, label %85

47:                                               ; preds = %16, %69
  %48 = phi %"struct.vr::KeyboardTestInput"* [ %72, %69 ], [ %19, %16 ]
  %49 = phi %"struct.vr::KeyboardTestInput"** [ %71, %69 ], [ %7, %16 ]
  %50 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %48, i64 0, i32 1
  %51 = bitcast %"class.std::__1::basic_string"* %50 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  tail call void @_ZdlPv(i8* %57) #12
  br label %58

58:                                               ; preds = %47, %55
  %59 = getelementptr inbounds %"struct.vr::KeyboardTestInput", %"struct.vr::KeyboardTestInput"* %48, i64 1
  %60 = ptrtoint %"struct.vr::KeyboardTestInput"* %59 to i64
  %61 = bitcast %"struct.vr::KeyboardTestInput"** %49 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %60, %62
  %64 = icmp eq i64 %63, 4096
  br i1 %64, label %65, label %69

65:                                               ; preds = %58
  %66 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %49, i64 1
  %67 = bitcast %"struct.vr::KeyboardTestInput"** %66 to i64*
  %68 = load i64, i64* %67, align 8
  br label %69

69:                                               ; preds = %58, %65
  %70 = phi i64 [ %68, %65 ], [ %60, %58 ]
  %71 = phi %"struct.vr::KeyboardTestInput"** [ %66, %65 ], [ %49, %58 ]
  %72 = inttoptr i64 %70 to %"struct.vr::KeyboardTestInput"*
  %73 = icmp eq %"struct.vr::KeyboardTestInput"* %27, %72
  br i1 %73, label %32, label %47

74:                                               ; preds = %38, %74
  %75 = phi i8** [ %84, %74 ], [ %41, %38 ]
  %76 = load i8*, i8** %75, align 8
  tail call void @_ZdlPv(i8* %76) #12
  %77 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %2, align 8
  %78 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %77, i64 1
  store %"struct.vr::KeyboardTestInput"** %78, %"struct.vr::KeyboardTestInput"*** %2, align 8
  %79 = load i64, i64* %40, align 8
  %80 = ptrtoint %"struct.vr::KeyboardTestInput"** %78 to i64
  %81 = sub i64 %79, %80
  %82 = ashr exact i64 %81, 3
  %83 = icmp ugt i64 %82, 2
  %84 = bitcast %"struct.vr::KeyboardTestInput"** %78 to i8**
  br i1 %83, label %74, label %85

85:                                               ; preds = %74, %38
  %86 = phi i64 [ %45, %38 ], [ %82, %74 ]
  switch i64 %86, label %90 [
    i64 1, label %88
    i64 2, label %87
  ]

87:                                               ; preds = %85
  br label %88

88:                                               ; preds = %85, %87
  %89 = phi i64 [ 128, %87 ], [ 64, %85 ]
  store i64 %89, i64* %4, align 8
  br label %90

90:                                               ; preds = %88, %85
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN2vr17KeyboardTestInputENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.vr::KeyboardTestInput"*, align 8
  %3 = alloca %"struct.vr::KeyboardTestInput"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.22", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 127
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -128
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  %12 = bitcast %"struct.vr::KeyboardTestInput"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %11, i64 1
  store %"struct.vr::KeyboardTestInput"** %14, %"struct.vr::KeyboardTestInput"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %17, align 8
  %19 = icmp eq %"struct.vr::KeyboardTestInput"** %16, %18
  %20 = ptrtoint %"struct.vr::KeyboardTestInput"** %18 to i64
  %21 = bitcast %"struct.vr::KeyboardTestInput"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %23, align 8
  %25 = icmp ugt %"struct.vr::KeyboardTestInput"** %14, %24
  %26 = ptrtoint %"struct.vr::KeyboardTestInput"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"struct.vr::KeyboardTestInput"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %14, i64 %32
  %34 = ptrtoint %"struct.vr::KeyboardTestInput"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"struct.vr::KeyboardTestInput"** %33 to i8*
  %40 = bitcast %"struct.vr::KeyboardTestInput"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #11
  %41 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"struct.vr::KeyboardTestInput"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %33, i64 %36
  store %"struct.vr::KeyboardTestInput"** %44, %"struct.vr::KeyboardTestInput"*** %15, align 8
  %45 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %43, i64 %32
  store %"struct.vr::KeyboardTestInput"** %45, %"struct.vr::KeyboardTestInput"*** %10, align 8
  %46 = bitcast %"struct.vr::KeyboardTestInput"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"struct.vr::KeyboardTestInput"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #13
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #12
  %60 = bitcast i8* %59 to %"struct.vr::KeyboardTestInput"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %60, i64 %57
  %63 = ptrtoint %"struct.vr::KeyboardTestInput"** %62 to i64
  %64 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %60, i64 %53
  %65 = ptrtoint %"struct.vr::KeyboardTestInput"** %64 to i64
  %66 = ptrtoint %"struct.vr::KeyboardTestInput"** %14 to i64
  %67 = ptrtoint %"struct.vr::KeyboardTestInput"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"struct.vr::KeyboardTestInput"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"struct.vr::KeyboardTestInput"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"struct.vr::KeyboardTestInput"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %79, i64 1
  %87 = ptrtoint %"struct.vr::KeyboardTestInput"** %86 to i64
  %88 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !107

91:                                               ; preds = %78
  %92 = ptrtoint %"struct.vr::KeyboardTestInput"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"struct.vr::KeyboardTestInput"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"struct.vr::KeyboardTestInput"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"struct.vr::KeyboardTestInput"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"struct.vr::KeyboardTestInput"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"struct.vr::KeyboardTestInput"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 1
  %106 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 1
  %107 = bitcast %"struct.vr::KeyboardTestInput"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.vr::KeyboardTestInput"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 2
  %111 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 2
  %112 = bitcast %"struct.vr::KeyboardTestInput"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.vr::KeyboardTestInput"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 3
  %116 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 3
  %117 = bitcast %"struct.vr::KeyboardTestInput"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.vr::KeyboardTestInput"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 4
  %121 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 4
  %122 = bitcast %"struct.vr::KeyboardTestInput"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.vr::KeyboardTestInput"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 5
  %126 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 5
  %127 = bitcast %"struct.vr::KeyboardTestInput"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.vr::KeyboardTestInput"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 6
  %131 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 6
  %132 = bitcast %"struct.vr::KeyboardTestInput"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"struct.vr::KeyboardTestInput"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 7
  %136 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 7
  %137 = bitcast %"struct.vr::KeyboardTestInput"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"struct.vr::KeyboardTestInput"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %99, i64 8
  %141 = ptrtoint %"struct.vr::KeyboardTestInput"** %140 to i64
  %142 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %101, i64 8
  %143 = icmp eq %"struct.vr::KeyboardTestInput"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"struct.vr::KeyboardTestInput"** %70 to i64
  %146 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"struct.vr::KeyboardTestInput"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"struct.vr::KeyboardTestInput"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"struct.vr::KeyboardTestInput"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"struct.vr::KeyboardTestInput"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"struct.vr::KeyboardTestInput"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #12
  %156 = bitcast %"struct.vr::KeyboardTestInput"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %15, align 8
  %161 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %160, i64 1
  store %"struct.vr::KeyboardTestInput"** %161, %"struct.vr::KeyboardTestInput"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"struct.vr::KeyboardTestInput"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"struct.vr::KeyboardTestInput"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"struct.vr::KeyboardTestInput"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"struct.vr::KeyboardTestInput"**
  %181 = inttoptr i64 %169 to %"struct.vr::KeyboardTestInput"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"struct.vr::KeyboardTestInput"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #11
  %186 = tail call i8* @_Znwm(i64 4096) #12
  %187 = bitcast %"struct.vr::KeyboardTestInput"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* %163, %"struct.vr::KeyboardTestInput"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #11
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"struct.vr::KeyboardTestInput"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #11
  %190 = tail call i8* @_Znwm(i64 4096) #12
  %191 = bitcast %"struct.vr::KeyboardTestInput"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"* %163, %"struct.vr::KeyboardTestInput"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #11
  %192 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %167, align 8
  %193 = bitcast %"struct.vr::KeyboardTestInput"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %192, i64 1
  store %"struct.vr::KeyboardTestInput"** %195, %"struct.vr::KeyboardTestInput"*** %167, align 8
  %196 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %164, align 8
  %197 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %172, align 8
  %198 = icmp eq %"struct.vr::KeyboardTestInput"** %196, %197
  %199 = ptrtoint %"struct.vr::KeyboardTestInput"** %197 to i64
  %200 = bitcast %"struct.vr::KeyboardTestInput"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %202, align 8
  %204 = icmp ugt %"struct.vr::KeyboardTestInput"** %195, %203
  %205 = ptrtoint %"struct.vr::KeyboardTestInput"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"struct.vr::KeyboardTestInput"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %195, i64 %211
  %213 = ptrtoint %"struct.vr::KeyboardTestInput"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"struct.vr::KeyboardTestInput"** %212 to i8*
  %219 = bitcast %"struct.vr::KeyboardTestInput"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #11
  %220 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"struct.vr::KeyboardTestInput"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %212, i64 %215
  store %"struct.vr::KeyboardTestInput"** %223, %"struct.vr::KeyboardTestInput"*** %164, align 8
  %224 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %222, i64 %211
  store %"struct.vr::KeyboardTestInput"** %224, %"struct.vr::KeyboardTestInput"*** %167, align 8
  %225 = bitcast %"struct.vr::KeyboardTestInput"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #13
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #12
  %237 = bitcast i8* %236 to %"struct.vr::KeyboardTestInput"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %237, i64 %234
  %240 = ptrtoint %"struct.vr::KeyboardTestInput"** %239 to i64
  %241 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %237, i64 %230
  %242 = ptrtoint %"struct.vr::KeyboardTestInput"** %241 to i64
  %243 = ptrtoint %"struct.vr::KeyboardTestInput"** %195 to i64
  %244 = ptrtoint %"struct.vr::KeyboardTestInput"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"struct.vr::KeyboardTestInput"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"struct.vr::KeyboardTestInput"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"struct.vr::KeyboardTestInput"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %256, i64 1
  %264 = ptrtoint %"struct.vr::KeyboardTestInput"** %263 to i64
  %265 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !108

268:                                              ; preds = %255
  %269 = ptrtoint %"struct.vr::KeyboardTestInput"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"struct.vr::KeyboardTestInput"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"struct.vr::KeyboardTestInput"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"struct.vr::KeyboardTestInput"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"struct.vr::KeyboardTestInput"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"struct.vr::KeyboardTestInput"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 1
  %283 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 1
  %284 = bitcast %"struct.vr::KeyboardTestInput"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"struct.vr::KeyboardTestInput"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 2
  %288 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 2
  %289 = bitcast %"struct.vr::KeyboardTestInput"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"struct.vr::KeyboardTestInput"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 3
  %293 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 3
  %294 = bitcast %"struct.vr::KeyboardTestInput"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"struct.vr::KeyboardTestInput"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 4
  %298 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 4
  %299 = bitcast %"struct.vr::KeyboardTestInput"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"struct.vr::KeyboardTestInput"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 5
  %303 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 5
  %304 = bitcast %"struct.vr::KeyboardTestInput"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"struct.vr::KeyboardTestInput"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 6
  %308 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 6
  %309 = bitcast %"struct.vr::KeyboardTestInput"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"struct.vr::KeyboardTestInput"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 7
  %313 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 7
  %314 = bitcast %"struct.vr::KeyboardTestInput"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"struct.vr::KeyboardTestInput"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %276, i64 8
  %318 = ptrtoint %"struct.vr::KeyboardTestInput"** %317 to i64
  %319 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %278, i64 8
  %320 = icmp eq %"struct.vr::KeyboardTestInput"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"struct.vr::KeyboardTestInput"** %247 to i64
  %323 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"struct.vr::KeyboardTestInput"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"struct.vr::KeyboardTestInput"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"struct.vr::KeyboardTestInput"** %325 to i8*
  call void @_ZdlPv(i8* %330) #12
  %331 = bitcast %"struct.vr::KeyboardTestInput"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %164, align 8
  %336 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %335, i64 1
  store %"struct.vr::KeyboardTestInput"** %336, %"struct.vr::KeyboardTestInput"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #11
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"struct.vr::KeyboardTestInput"** null, %"struct.vr::KeyboardTestInput"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.4"** %342 to %"class.std::__1::__compressed_pair.1"**
  store %"class.std::__1::__compressed_pair.1"* %346, %"class.std::__1::__compressed_pair.1"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #13
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #12
  %354 = bitcast i8* %353 to %"struct.vr::KeyboardTestInput"**
  %355 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %354, i64 %171
  store %"struct.vr::KeyboardTestInput"** %356, %"struct.vr::KeyboardTestInput"*** %340, align 8
  store %"struct.vr::KeyboardTestInput"** %356, %"struct.vr::KeyboardTestInput"*** %339, align 8
  %357 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %354, i64 %345
  store %"struct.vr::KeyboardTestInput"** %357, %"struct.vr::KeyboardTestInput"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #12
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"struct.vr::KeyboardTestInput"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"struct.vr::KeyboardTestInput"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"struct.vr::KeyboardTestInput"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %356, i64 %370
  store %"struct.vr::KeyboardTestInput"** %371, %"struct.vr::KeyboardTestInput"*** %340, align 8
  store %"struct.vr::KeyboardTestInput"** %371, %"struct.vr::KeyboardTestInput"*** %339, align 8
  %372 = ptrtoint %"struct.vr::KeyboardTestInput"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #13
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i64*
  %382 = bitcast %"struct.vr::KeyboardTestInput"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #12
  %386 = bitcast i8* %385 to %"struct.vr::KeyboardTestInput"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %386, i64 %383
  %389 = ptrtoint %"struct.vr::KeyboardTestInput"** %388 to i64
  %390 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %386, i64 %377
  %391 = ptrtoint %"struct.vr::KeyboardTestInput"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"struct.vr::KeyboardTestInput"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"struct.vr::KeyboardTestInput"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #12
  %394 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %164, align 8
  %395 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %167, align 8
  %396 = ptrtoint %"struct.vr::KeyboardTestInput"** %395 to i64
  %397 = ptrtoint %"struct.vr::KeyboardTestInput"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"struct.vr::KeyboardTestInput"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"struct.vr::KeyboardTestInput"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"struct.vr::KeyboardTestInput"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"struct.vr::KeyboardTestInput"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %406, i64 1
  store %"struct.vr::KeyboardTestInput"** %408, %"struct.vr::KeyboardTestInput"*** %340, align 8
  %409 = icmp eq %"struct.vr::KeyboardTestInput"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"struct.vr::KeyboardTestInput"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i64*
  %413 = bitcast %"struct.vr::KeyboardTestInput"*** %339 to i64*
  %414 = bitcast %"struct.vr::KeyboardTestInput"*** %340 to i64*
  %415 = bitcast %"struct.vr::KeyboardTestInput"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"struct.vr::KeyboardTestInput"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.22"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"struct.vr::KeyboardTestInput"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"struct.vr::KeyboardTestInput"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"struct.vr::KeyboardTestInput"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"struct.vr::KeyboardTestInput"**
  %441 = inttoptr i64 %434 to %"struct.vr::KeyboardTestInput"**
  %442 = icmp eq %"struct.vr::KeyboardTestInput"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %441, i64 -1
  %445 = ptrtoint %"struct.vr::KeyboardTestInput"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %441, i64 %448
  store %"struct.vr::KeyboardTestInput"** %449, %"struct.vr::KeyboardTestInput"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #12
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #11
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"struct.vr::KeyboardTestInput"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.22"* nonnull %4, %"struct.vr::KeyboardTestInput"** dereferenceable(8) %457)
  %458 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %167, align 8
  %459 = icmp eq %"struct.vr::KeyboardTestInput"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.vr::KeyboardTestInput"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %5, align 8
  %7 = icmp eq %"struct.vr::KeyboardTestInput"** %4, %6
  %8 = ptrtoint %"struct.vr::KeyboardTestInput"** %6 to i64
  %9 = bitcast %"struct.vr::KeyboardTestInput"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %13, align 8
  %15 = icmp ugt %"struct.vr::KeyboardTestInput"** %12, %14
  %16 = ptrtoint %"struct.vr::KeyboardTestInput"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.vr::KeyboardTestInput"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %12, i64 %22
  %24 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.vr::KeyboardTestInput"** %23 to i8*
  %30 = bitcast %"struct.vr::KeyboardTestInput"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #11
  %31 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.vr::KeyboardTestInput"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %23, i64 %26
  store %"struct.vr::KeyboardTestInput"** %34, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %35 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %33, i64 %22
  store %"struct.vr::KeyboardTestInput"** %35, %"struct.vr::KeyboardTestInput"*** %11, align 8
  %36 = bitcast %"struct.vr::KeyboardTestInput"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"struct.vr::KeyboardTestInput"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #12
  %50 = bitcast i8* %49 to %"struct.vr::KeyboardTestInput"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %50, i64 %47
  %53 = ptrtoint %"struct.vr::KeyboardTestInput"** %52 to i64
  %54 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %50, i64 %43
  %55 = ptrtoint %"struct.vr::KeyboardTestInput"** %54 to i64
  %56 = ptrtoint %"struct.vr::KeyboardTestInput"** %12 to i64
  %57 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"struct.vr::KeyboardTestInput"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"struct.vr::KeyboardTestInput"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"struct.vr::KeyboardTestInput"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %69, i64 1
  %77 = ptrtoint %"struct.vr::KeyboardTestInput"** %76 to i64
  %78 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !109

81:                                               ; preds = %68
  %82 = ptrtoint %"struct.vr::KeyboardTestInput"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"struct.vr::KeyboardTestInput"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"struct.vr::KeyboardTestInput"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"struct.vr::KeyboardTestInput"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"struct.vr::KeyboardTestInput"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"struct.vr::KeyboardTestInput"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 1
  %96 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 1
  %97 = bitcast %"struct.vr::KeyboardTestInput"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"struct.vr::KeyboardTestInput"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 2
  %101 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 2
  %102 = bitcast %"struct.vr::KeyboardTestInput"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"struct.vr::KeyboardTestInput"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 3
  %106 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 3
  %107 = bitcast %"struct.vr::KeyboardTestInput"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.vr::KeyboardTestInput"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 4
  %111 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 4
  %112 = bitcast %"struct.vr::KeyboardTestInput"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.vr::KeyboardTestInput"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 5
  %116 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 5
  %117 = bitcast %"struct.vr::KeyboardTestInput"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.vr::KeyboardTestInput"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 6
  %121 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 6
  %122 = bitcast %"struct.vr::KeyboardTestInput"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.vr::KeyboardTestInput"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 7
  %126 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 7
  %127 = bitcast %"struct.vr::KeyboardTestInput"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.vr::KeyboardTestInput"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %89, i64 8
  %131 = ptrtoint %"struct.vr::KeyboardTestInput"** %130 to i64
  %132 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %91, i64 8
  %133 = icmp eq %"struct.vr::KeyboardTestInput"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"struct.vr::KeyboardTestInput"** %60 to i64
  %136 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"struct.vr::KeyboardTestInput"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"struct.vr::KeyboardTestInput"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"struct.vr::KeyboardTestInput"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"struct.vr::KeyboardTestInput"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"struct.vr::KeyboardTestInput"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = bitcast %"struct.vr::KeyboardTestInput"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"struct.vr::KeyboardTestInput"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %153 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %152, i64 1
  store %"struct.vr::KeyboardTestInput"** %153, %"struct.vr::KeyboardTestInput"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"*, %"struct.vr::KeyboardTestInput"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %5, align 8
  %7 = icmp eq %"struct.vr::KeyboardTestInput"** %4, %6
  %8 = ptrtoint %"struct.vr::KeyboardTestInput"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %12, align 8
  %14 = icmp ult %"struct.vr::KeyboardTestInput"** %11, %13
  %15 = bitcast %"struct.vr::KeyboardTestInput"*** %12 to i64*
  %16 = ptrtoint %"struct.vr::KeyboardTestInput"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.vr::KeyboardTestInput"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %11, i64 %22
  %24 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %23, i64 %29
  %31 = bitcast %"struct.vr::KeyboardTestInput"** %30 to i8*
  %32 = bitcast %"struct.vr::KeyboardTestInput"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.vr::KeyboardTestInput"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.vr::KeyboardTestInput"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.vr::KeyboardTestInput"** %36, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %37 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %35, i64 %22
  store %"struct.vr::KeyboardTestInput"** %37, %"struct.vr::KeyboardTestInput"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to %"struct.vr::KeyboardTestInput"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %51, i64 %48
  %54 = ptrtoint %"struct.vr::KeyboardTestInput"** %53 to i64
  %55 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %51, i64 %43
  %56 = ptrtoint %"struct.vr::KeyboardTestInput"** %55 to i64
  %57 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %58 = ptrtoint %"struct.vr::KeyboardTestInput"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.vr::KeyboardTestInput"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.vr::KeyboardTestInput"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.vr::KeyboardTestInput"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %70, i64 1
  %78 = ptrtoint %"struct.vr::KeyboardTestInput"** %77 to i64
  %79 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !110

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.vr::KeyboardTestInput"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.vr::KeyboardTestInput"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.vr::KeyboardTestInput"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.vr::KeyboardTestInput"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.vr::KeyboardTestInput"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.vr::KeyboardTestInput"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 1
  %97 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 1
  %98 = bitcast %"struct.vr::KeyboardTestInput"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.vr::KeyboardTestInput"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 2
  %102 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 2
  %103 = bitcast %"struct.vr::KeyboardTestInput"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.vr::KeyboardTestInput"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 3
  %107 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 3
  %108 = bitcast %"struct.vr::KeyboardTestInput"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.vr::KeyboardTestInput"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 4
  %112 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 4
  %113 = bitcast %"struct.vr::KeyboardTestInput"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.vr::KeyboardTestInput"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 5
  %117 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 5
  %118 = bitcast %"struct.vr::KeyboardTestInput"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.vr::KeyboardTestInput"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 6
  %122 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 6
  %123 = bitcast %"struct.vr::KeyboardTestInput"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.vr::KeyboardTestInput"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 7
  %127 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 7
  %128 = bitcast %"struct.vr::KeyboardTestInput"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.vr::KeyboardTestInput"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 8
  %132 = ptrtoint %"struct.vr::KeyboardTestInput"** %131 to i64
  %133 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 8
  %134 = icmp eq %"struct.vr::KeyboardTestInput"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.vr::KeyboardTestInput"** %61 to i64
  %137 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.vr::KeyboardTestInput"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.vr::KeyboardTestInput"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.vr::KeyboardTestInput"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.vr::KeyboardTestInput"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.vr::KeyboardTestInput"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.vr::KeyboardTestInput"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %148, i64 -1
  %150 = bitcast %"struct.vr::KeyboardTestInput"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.vr::KeyboardTestInput"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %154 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %153, i64 -1
  store %"struct.vr::KeyboardTestInput"** %154, %"struct.vr::KeyboardTestInput"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vr17KeyboardTestInputERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.22"*, %"struct.vr::KeyboardTestInput"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %0, i64 0, i32 1
  %4 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %0, i64 0, i32 0
  %6 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %5, align 8
  %7 = icmp eq %"struct.vr::KeyboardTestInput"** %4, %6
  %8 = ptrtoint %"struct.vr::KeyboardTestInput"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %0, i64 0, i32 2
  %11 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.22", %"struct.std::__1::__split_buffer.22"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %12, align 8
  %14 = icmp ult %"struct.vr::KeyboardTestInput"** %11, %13
  %15 = bitcast %"struct.vr::KeyboardTestInput"*** %12 to i64*
  %16 = ptrtoint %"struct.vr::KeyboardTestInput"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.vr::KeyboardTestInput"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %11, i64 %22
  %24 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %23, i64 %29
  %31 = bitcast %"struct.vr::KeyboardTestInput"** %30 to i8*
  %32 = bitcast %"struct.vr::KeyboardTestInput"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.vr::KeyboardTestInput"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.vr::KeyboardTestInput"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.vr::KeyboardTestInput"** %36, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %37 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %35, i64 %22
  store %"struct.vr::KeyboardTestInput"** %37, %"struct.vr::KeyboardTestInput"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.22"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #13
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #12
  %51 = bitcast i8* %50 to %"struct.vr::KeyboardTestInput"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %51, i64 %48
  %54 = ptrtoint %"struct.vr::KeyboardTestInput"** %53 to i64
  %55 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %51, i64 %43
  %56 = ptrtoint %"struct.vr::KeyboardTestInput"** %55 to i64
  %57 = ptrtoint %"struct.vr::KeyboardTestInput"** %4 to i64
  %58 = ptrtoint %"struct.vr::KeyboardTestInput"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.vr::KeyboardTestInput"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.vr::KeyboardTestInput"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.vr::KeyboardTestInput"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %70, i64 1
  %78 = ptrtoint %"struct.vr::KeyboardTestInput"** %77 to i64
  %79 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !111

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.vr::KeyboardTestInput"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.vr::KeyboardTestInput"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.vr::KeyboardTestInput"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.vr::KeyboardTestInput"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.vr::KeyboardTestInput"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.vr::KeyboardTestInput"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 1
  %97 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 1
  %98 = bitcast %"struct.vr::KeyboardTestInput"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.vr::KeyboardTestInput"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 2
  %102 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 2
  %103 = bitcast %"struct.vr::KeyboardTestInput"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.vr::KeyboardTestInput"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 3
  %107 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 3
  %108 = bitcast %"struct.vr::KeyboardTestInput"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.vr::KeyboardTestInput"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 4
  %112 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 4
  %113 = bitcast %"struct.vr::KeyboardTestInput"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.vr::KeyboardTestInput"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 5
  %117 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 5
  %118 = bitcast %"struct.vr::KeyboardTestInput"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.vr::KeyboardTestInput"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 6
  %122 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 6
  %123 = bitcast %"struct.vr::KeyboardTestInput"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.vr::KeyboardTestInput"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 7
  %127 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 7
  %128 = bitcast %"struct.vr::KeyboardTestInput"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.vr::KeyboardTestInput"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %90, i64 8
  %132 = ptrtoint %"struct.vr::KeyboardTestInput"** %131 to i64
  %133 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %92, i64 8
  %134 = icmp eq %"struct.vr::KeyboardTestInput"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.vr::KeyboardTestInput"** %61 to i64
  %137 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.vr::KeyboardTestInput"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.vr::KeyboardTestInput"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.vr::KeyboardTestInput"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.vr::KeyboardTestInput"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.vr::KeyboardTestInput"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #12
  %146 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.vr::KeyboardTestInput"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %148, i64 -1
  %150 = bitcast %"struct.vr::KeyboardTestInput"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.vr::KeyboardTestInput"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.vr::KeyboardTestInput"**, %"struct.vr::KeyboardTestInput"*** %3, align 8
  %154 = getelementptr inbounds %"struct.vr::KeyboardTestInput"*, %"struct.vr::KeyboardTestInput"** %153, i64 -1
  store %"struct.vr::KeyboardTestInput"** %154, %"struct.vr::KeyboardTestInput"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE6insertEmPKDsm(%"class.std::__1::basic_string.11"*, i64, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.std::__1::basic_string.11"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %5, i64 0, i32 1, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %14

12:                                               ; preds = %4
  %13 = zext i8 %7 to i64
  br label %14

14:                                               ; preds = %9, %12
  %15 = phi i64 [ %11, %9 ], [ %13, %12 ]
  %16 = icmp ult i64 %15, %1
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  %18 = bitcast %"class.std::__1::basic_string.11"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %18) #13
  unreachable

19:                                               ; preds = %14
  br i1 %8, label %20, label %25

20:                                               ; preds = %19
  %21 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 9223372036854775807
  %24 = add nsw i64 %23, -1
  br label %25

25:                                               ; preds = %19, %20
  %26 = phi i64 [ %24, %20 ], [ 10, %19 ]
  %27 = sub i64 %26, %15
  %28 = icmp ult i64 %27, %3
  br i1 %28, label %658, label %29

29:                                               ; preds = %25
  %30 = icmp eq i64 %3, 0
  br i1 %30, label %661, label %31

31:                                               ; preds = %29
  br i1 %8, label %32, label %35

32:                                               ; preds = %31
  %33 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i16*, i16** %33, align 8
  br label %37

35:                                               ; preds = %31
  %36 = bitcast %"class.std::__1::basic_string.11"* %0 to i16*
  br label %37

37:                                               ; preds = %32, %35
  %38 = phi i16* [ %34, %32 ], [ %36, %35 ]
  %39 = sub i64 %15, %1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %357, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds i16, i16* %38, i64 %1
  %43 = icmp ule i16* %42, %2
  %44 = getelementptr inbounds i16, i16* %38, i64 %15
  %45 = icmp ugt i16* %44, %2
  %46 = and i1 %43, %45
  %47 = getelementptr inbounds i16, i16* %2, i64 %3
  %48 = select i1 %46, i16* %47, i16* %2
  %49 = getelementptr inbounds i16, i16* %42, i64 %3
  %50 = icmp slt i64 %3, 0
  br i1 %50, label %51, label %194

51:                                               ; preds = %41
  %52 = icmp ult i64 %39, 16
  br i1 %52, label %141, label %53

53:                                               ; preds = %51
  %54 = add i64 %15, %3
  %55 = getelementptr i16, i16* %38, i64 %54
  %56 = icmp ult i16* %49, %44
  %57 = icmp ult i16* %42, %55
  %58 = and i1 %56, %57
  br i1 %58, label %141, label %59

59:                                               ; preds = %53
  %60 = and i64 %39, -16
  %61 = sub i64 %39, %60
  %62 = getelementptr i16, i16* %42, i64 %60
  %63 = getelementptr i16, i16* %49, i64 %60
  %64 = add i64 %60, -16
  %65 = lshr exact i64 %64, 4
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 48
  br i1 %68, label %120, label %69

69:                                               ; preds = %59
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr i16, i16* %42, i64 %72
  %75 = getelementptr i16, i16* %49, i64 %72
  %76 = bitcast i16* %74 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !112
  %78 = getelementptr i16, i16* %74, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !112
  %81 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %81, align 2, !alias.scope !115, !noalias !112
  %82 = getelementptr i16, i16* %75, i64 8
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %83, align 2, !alias.scope !115, !noalias !112
  %84 = or i64 %72, 16
  %85 = getelementptr i16, i16* %42, i64 %84
  %86 = getelementptr i16, i16* %49, i64 %84
  %87 = bitcast i16* %85 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !112
  %89 = getelementptr i16, i16* %85, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !112
  %92 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %88, <8 x i16>* %92, align 2, !alias.scope !115, !noalias !112
  %93 = getelementptr i16, i16* %86, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %94, align 2, !alias.scope !115, !noalias !112
  %95 = or i64 %72, 32
  %96 = getelementptr i16, i16* %42, i64 %95
  %97 = getelementptr i16, i16* %49, i64 %95
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 2, !alias.scope !112
  %100 = getelementptr i16, i16* %96, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !112
  %103 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !115, !noalias !112
  %104 = getelementptr i16, i16* %97, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %105, align 2, !alias.scope !115, !noalias !112
  %106 = or i64 %72, 48
  %107 = getelementptr i16, i16* %42, i64 %106
  %108 = getelementptr i16, i16* %49, i64 %106
  %109 = bitcast i16* %107 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !112
  %111 = getelementptr i16, i16* %107, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !112
  %114 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !115, !noalias !112
  %115 = getelementptr i16, i16* %108, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !115, !noalias !112
  %117 = add i64 %72, 64
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !117

120:                                              ; preds = %71, %59
  %121 = phi i64 [ 0, %59 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr i16, i16* %42, i64 %124
  %127 = getelementptr i16, i16* %49, i64 %124
  %128 = bitcast i16* %126 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2, !alias.scope !112
  %130 = getelementptr i16, i16* %126, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !112
  %133 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %133, align 2, !alias.scope !115, !noalias !112
  %134 = getelementptr i16, i16* %127, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %135, align 2, !alias.scope !115, !noalias !112
  %136 = add i64 %124, 16
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !118

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %60
  br i1 %140, label %357, label %141

141:                                              ; preds = %139, %53, %51
  %142 = phi i64 [ %39, %53 ], [ %39, %51 ], [ %61, %139 ]
  %143 = phi i16* [ %42, %53 ], [ %42, %51 ], [ %62, %139 ]
  %144 = phi i16* [ %49, %53 ], [ %49, %51 ], [ %63, %139 ]
  %145 = add i64 %142, -1
  %146 = and i64 %142, 7
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %159, label %148

148:                                              ; preds = %141, %148
  %149 = phi i64 [ %154, %148 ], [ %142, %141 ]
  %150 = phi i16* [ %156, %148 ], [ %143, %141 ]
  %151 = phi i16* [ %155, %148 ], [ %144, %141 ]
  %152 = phi i64 [ %157, %148 ], [ %146, %141 ]
  %153 = load i16, i16* %150, align 2
  store i16 %153, i16* %151, align 2
  %154 = add i64 %149, -1
  %155 = getelementptr inbounds i16, i16* %151, i64 1
  %156 = getelementptr inbounds i16, i16* %150, i64 1
  %157 = add i64 %152, -1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %148, !llvm.loop !119

159:                                              ; preds = %148, %141
  %160 = phi i64 [ %142, %141 ], [ %154, %148 ]
  %161 = phi i16* [ %143, %141 ], [ %156, %148 ]
  %162 = phi i16* [ %144, %141 ], [ %155, %148 ]
  %163 = icmp ult i64 %145, 7
  br i1 %163, label %357, label %164

164:                                              ; preds = %159, %164
  %165 = phi i64 [ %190, %164 ], [ %160, %159 ]
  %166 = phi i16* [ %192, %164 ], [ %161, %159 ]
  %167 = phi i16* [ %191, %164 ], [ %162, %159 ]
  %168 = load i16, i16* %166, align 2
  store i16 %168, i16* %167, align 2
  %169 = getelementptr inbounds i16, i16* %167, i64 1
  %170 = getelementptr inbounds i16, i16* %166, i64 1
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %167, i64 2
  %173 = getelementptr inbounds i16, i16* %166, i64 2
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %167, i64 3
  %176 = getelementptr inbounds i16, i16* %166, i64 3
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %167, i64 4
  %179 = getelementptr inbounds i16, i16* %166, i64 4
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %167, i64 5
  %182 = getelementptr inbounds i16, i16* %166, i64 5
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %167, i64 6
  %185 = getelementptr inbounds i16, i16* %166, i64 6
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %167, i64 7
  %188 = getelementptr inbounds i16, i16* %166, i64 7
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = add i64 %165, -8
  %191 = getelementptr inbounds i16, i16* %167, i64 8
  %192 = getelementptr inbounds i16, i16* %166, i64 8
  %193 = icmp eq i64 %190, 0
  br i1 %193, label %357, label %164, !llvm.loop !120

194:                                              ; preds = %41
  %195 = getelementptr inbounds i16, i16* %49, i64 %39
  %196 = icmp ult i64 %39, 16
  br i1 %196, label %304, label %197

197:                                              ; preds = %194
  %198 = xor i64 %1, -1
  %199 = add i64 %15, %198
  %200 = add i64 %15, %3
  %201 = add i64 %200, -1
  %202 = getelementptr i16, i16* %38, i64 %201
  %203 = ptrtoint i16* %202 to i64
  %204 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 2)
  %205 = extractvalue { i64, i1 } %204, 0
  %206 = extractvalue { i64, i1 } %204, 1
  %207 = icmp ugt i64 %205, %203
  %208 = or i1 %207, %206
  %209 = add i64 %15, -1
  %210 = getelementptr i16, i16* %38, i64 %209
  %211 = ptrtoint i16* %210 to i64
  %212 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %199, i64 2)
  %213 = extractvalue { i64, i1 } %212, 0
  %214 = extractvalue { i64, i1 } %212, 1
  %215 = icmp ugt i64 %213, %211
  %216 = or i1 %215, %214
  %217 = or i1 %208, %216
  br i1 %217, label %304, label %218

218:                                              ; preds = %197
  %219 = add i64 %3, %1
  %220 = getelementptr i16, i16* %38, i64 %219
  %221 = icmp ult i16* %220, %44
  %222 = icmp ult i16* %42, %195
  %223 = and i1 %221, %222
  br i1 %223, label %304, label %224

224:                                              ; preds = %218
  %225 = and i64 %39, -16
  %226 = sub i64 %39, %225
  %227 = sub i64 0, %225
  %228 = getelementptr i16, i16* %44, i64 %227
  %229 = sub i64 0, %225
  %230 = getelementptr i16, i16* %195, i64 %229
  %231 = add i64 %225, -16
  %232 = lshr exact i64 %231, 4
  %233 = add nuw nsw i64 %232, 1
  %234 = and i64 %233, 1
  %235 = icmp eq i64 %231, 0
  br i1 %235, label %280, label %236

236:                                              ; preds = %224
  %237 = sub nuw nsw i64 %233, %234
  %238 = getelementptr i16, i16* %44, i64 -1
  %239 = getelementptr i16, i16* %195, i64 -1
  %240 = getelementptr i16, i16* %44, i64 -1
  %241 = getelementptr i16, i16* %195, i64 -1
  br label %242

242:                                              ; preds = %242, %236
  %243 = phi i64 [ 0, %236 ], [ %277, %242 ]
  %244 = phi i64 [ %237, %236 ], [ %278, %242 ]
  %245 = sub i64 0, %243
  %246 = sub i64 0, %243
  %247 = getelementptr inbounds i16, i16* %239, i64 %246
  %248 = getelementptr inbounds i16, i16* %238, i64 %245
  %249 = getelementptr inbounds i16, i16* %248, i64 -7
  %250 = bitcast i16* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !121
  %252 = getelementptr inbounds i16, i16* %248, i64 -8
  %253 = getelementptr inbounds i16, i16* %252, i64 -7
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !121
  %256 = getelementptr inbounds i16, i16* %247, i64 -7
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %257, align 2, !alias.scope !124, !noalias !121
  %258 = getelementptr inbounds i16, i16* %247, i64 -8
  %259 = getelementptr inbounds i16, i16* %258, i64 -7
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %260, align 2, !alias.scope !124, !noalias !121
  %261 = sub nuw nsw i64 -16, %243
  %262 = sub nuw nsw i64 -16, %243
  %263 = getelementptr inbounds i16, i16* %241, i64 %262
  %264 = getelementptr inbounds i16, i16* %240, i64 %261
  %265 = getelementptr inbounds i16, i16* %264, i64 -7
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !121
  %268 = getelementptr inbounds i16, i16* %264, i64 -8
  %269 = getelementptr inbounds i16, i16* %268, i64 -7
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !121
  %272 = getelementptr inbounds i16, i16* %263, i64 -7
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %273, align 2, !alias.scope !124, !noalias !121
  %274 = getelementptr inbounds i16, i16* %263, i64 -8
  %275 = getelementptr inbounds i16, i16* %274, i64 -7
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %276, align 2, !alias.scope !124, !noalias !121
  %277 = add i64 %243, 32
  %278 = add i64 %244, -2
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %242, !llvm.loop !126

280:                                              ; preds = %242, %224
  %281 = phi i64 [ 0, %224 ], [ %277, %242 ]
  %282 = icmp eq i64 %234, 0
  br i1 %282, label %302, label %283

283:                                              ; preds = %280
  %284 = sub i64 0, %281
  %285 = getelementptr i16, i16* %44, i64 -1
  %286 = sub i64 0, %281
  %287 = getelementptr i16, i16* %195, i64 -1
  %288 = getelementptr inbounds i16, i16* %287, i64 %286
  %289 = getelementptr inbounds i16, i16* %285, i64 %284
  %290 = getelementptr inbounds i16, i16* %289, i64 -7
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !121
  %293 = getelementptr inbounds i16, i16* %289, i64 -8
  %294 = getelementptr inbounds i16, i16* %293, i64 -7
  %295 = bitcast i16* %294 to <8 x i16>*
  %296 = load <8 x i16>, <8 x i16>* %295, align 2, !alias.scope !121
  %297 = getelementptr inbounds i16, i16* %288, i64 -7
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %298, align 2, !alias.scope !124, !noalias !121
  %299 = getelementptr inbounds i16, i16* %288, i64 -8
  %300 = getelementptr inbounds i16, i16* %299, i64 -7
  %301 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %301, align 2, !alias.scope !124, !noalias !121
  br label %302

302:                                              ; preds = %280, %283
  %303 = icmp eq i64 %39, %225
  br i1 %303, label %357, label %304

304:                                              ; preds = %302, %218, %197, %194
  %305 = phi i64 [ %39, %218 ], [ %39, %197 ], [ %39, %194 ], [ %226, %302 ]
  %306 = phi i16* [ %44, %218 ], [ %44, %197 ], [ %44, %194 ], [ %228, %302 ]
  %307 = phi i16* [ %195, %218 ], [ %195, %197 ], [ %195, %194 ], [ %230, %302 ]
  %308 = add i64 %305, -1
  %309 = and i64 %305, 7
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %322, label %311

311:                                              ; preds = %304, %311
  %312 = phi i64 [ %319, %311 ], [ %305, %304 ]
  %313 = phi i16* [ %317, %311 ], [ %306, %304 ]
  %314 = phi i16* [ %316, %311 ], [ %307, %304 ]
  %315 = phi i64 [ %320, %311 ], [ %309, %304 ]
  %316 = getelementptr inbounds i16, i16* %314, i64 -1
  %317 = getelementptr inbounds i16, i16* %313, i64 -1
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = add i64 %312, -1
  %320 = add i64 %315, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %311, !llvm.loop !127

322:                                              ; preds = %311, %304
  %323 = phi i64 [ %305, %304 ], [ %319, %311 ]
  %324 = phi i16* [ %306, %304 ], [ %317, %311 ]
  %325 = phi i16* [ %307, %304 ], [ %316, %311 ]
  %326 = icmp ult i64 %308, 7
  br i1 %326, label %357, label %327

327:                                              ; preds = %322, %327
  %328 = phi i64 [ %355, %327 ], [ %323, %322 ]
  %329 = phi i16* [ %353, %327 ], [ %324, %322 ]
  %330 = phi i16* [ %352, %327 ], [ %325, %322 ]
  %331 = getelementptr inbounds i16, i16* %330, i64 -1
  %332 = getelementptr inbounds i16, i16* %329, i64 -1
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %330, i64 -2
  %335 = getelementptr inbounds i16, i16* %329, i64 -2
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %330, i64 -3
  %338 = getelementptr inbounds i16, i16* %329, i64 -3
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %330, i64 -4
  %341 = getelementptr inbounds i16, i16* %329, i64 -4
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = getelementptr inbounds i16, i16* %330, i64 -5
  %344 = getelementptr inbounds i16, i16* %329, i64 -5
  %345 = load i16, i16* %344, align 2
  store i16 %345, i16* %343, align 2
  %346 = getelementptr inbounds i16, i16* %330, i64 -6
  %347 = getelementptr inbounds i16, i16* %329, i64 -6
  %348 = load i16, i16* %347, align 2
  store i16 %348, i16* %346, align 2
  %349 = getelementptr inbounds i16, i16* %330, i64 -7
  %350 = getelementptr inbounds i16, i16* %329, i64 -7
  %351 = load i16, i16* %350, align 2
  store i16 %351, i16* %349, align 2
  %352 = getelementptr inbounds i16, i16* %330, i64 -8
  %353 = getelementptr inbounds i16, i16* %329, i64 -8
  %354 = load i16, i16* %353, align 2
  store i16 %354, i16* %352, align 2
  %355 = add i64 %328, -8
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %327, !llvm.loop !128

357:                                              ; preds = %322, %327, %159, %164, %302, %139, %37
  %358 = phi i16* [ %2, %37 ], [ %48, %139 ], [ %48, %302 ], [ %48, %164 ], [ %48, %159 ], [ %48, %327 ], [ %48, %322 ]
  %359 = getelementptr inbounds i16, i16* %38, i64 %1
  %360 = icmp ult i16* %359, %358
  br i1 %360, label %361, label %505

361:                                              ; preds = %357
  %362 = icmp ult i64 %3, 16
  br i1 %362, label %452, label %363

363:                                              ; preds = %361
  %364 = add i64 %3, %1
  %365 = getelementptr i16, i16* %38, i64 %364
  %366 = getelementptr i16, i16* %358, i64 %3
  %367 = icmp ult i16* %359, %366
  %368 = icmp ult i16* %358, %365
  %369 = and i1 %367, %368
  br i1 %369, label %452, label %370

370:                                              ; preds = %363
  %371 = and i64 %3, -16
  %372 = sub i64 %3, %371
  %373 = getelementptr i16, i16* %358, i64 %371
  %374 = getelementptr i16, i16* %359, i64 %371
  %375 = add i64 %371, -16
  %376 = lshr exact i64 %375, 4
  %377 = add nuw nsw i64 %376, 1
  %378 = and i64 %377, 3
  %379 = icmp ult i64 %375, 48
  br i1 %379, label %431, label %380

380:                                              ; preds = %370
  %381 = sub nsw i64 %377, %378
  br label %382

382:                                              ; preds = %382, %380
  %383 = phi i64 [ 0, %380 ], [ %428, %382 ]
  %384 = phi i64 [ %381, %380 ], [ %429, %382 ]
  %385 = getelementptr i16, i16* %358, i64 %383
  %386 = getelementptr i16, i16* %359, i64 %383
  %387 = bitcast i16* %385 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !129
  %389 = getelementptr i16, i16* %385, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 2, !alias.scope !129
  %392 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %392, align 2, !alias.scope !132, !noalias !129
  %393 = getelementptr i16, i16* %386, i64 8
  %394 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %391, <8 x i16>* %394, align 2, !alias.scope !132, !noalias !129
  %395 = or i64 %383, 16
  %396 = getelementptr i16, i16* %358, i64 %395
  %397 = getelementptr i16, i16* %359, i64 %395
  %398 = bitcast i16* %396 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !129
  %400 = getelementptr i16, i16* %396, i64 8
  %401 = bitcast i16* %400 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 2, !alias.scope !129
  %403 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %403, align 2, !alias.scope !132, !noalias !129
  %404 = getelementptr i16, i16* %397, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %405, align 2, !alias.scope !132, !noalias !129
  %406 = or i64 %383, 32
  %407 = getelementptr i16, i16* %358, i64 %406
  %408 = getelementptr i16, i16* %359, i64 %406
  %409 = bitcast i16* %407 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !129
  %411 = getelementptr i16, i16* %407, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2, !alias.scope !129
  %414 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %414, align 2, !alias.scope !132, !noalias !129
  %415 = getelementptr i16, i16* %408, i64 8
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %416, align 2, !alias.scope !132, !noalias !129
  %417 = or i64 %383, 48
  %418 = getelementptr i16, i16* %358, i64 %417
  %419 = getelementptr i16, i16* %359, i64 %417
  %420 = bitcast i16* %418 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !129
  %422 = getelementptr i16, i16* %418, i64 8
  %423 = bitcast i16* %422 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 2, !alias.scope !129
  %425 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %425, align 2, !alias.scope !132, !noalias !129
  %426 = getelementptr i16, i16* %419, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %427, align 2, !alias.scope !132, !noalias !129
  %428 = add i64 %383, 64
  %429 = add i64 %384, -4
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %382, !llvm.loop !134

431:                                              ; preds = %382, %370
  %432 = phi i64 [ 0, %370 ], [ %428, %382 ]
  %433 = icmp eq i64 %378, 0
  br i1 %433, label %450, label %434

434:                                              ; preds = %431, %434
  %435 = phi i64 [ %447, %434 ], [ %432, %431 ]
  %436 = phi i64 [ %448, %434 ], [ %378, %431 ]
  %437 = getelementptr i16, i16* %358, i64 %435
  %438 = getelementptr i16, i16* %359, i64 %435
  %439 = bitcast i16* %437 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !129
  %441 = getelementptr i16, i16* %437, i64 8
  %442 = bitcast i16* %441 to <8 x i16>*
  %443 = load <8 x i16>, <8 x i16>* %442, align 2, !alias.scope !129
  %444 = bitcast i16* %438 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %444, align 2, !alias.scope !132, !noalias !129
  %445 = getelementptr i16, i16* %438, i64 8
  %446 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %443, <8 x i16>* %446, align 2, !alias.scope !132, !noalias !129
  %447 = add i64 %435, 16
  %448 = add i64 %436, -1
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %450, label %434, !llvm.loop !135

450:                                              ; preds = %434, %431
  %451 = icmp eq i64 %371, %3
  br i1 %451, label %648, label %452

452:                                              ; preds = %450, %363, %361
  %453 = phi i64 [ %3, %363 ], [ %3, %361 ], [ %372, %450 ]
  %454 = phi i16* [ %358, %363 ], [ %358, %361 ], [ %373, %450 ]
  %455 = phi i16* [ %359, %363 ], [ %359, %361 ], [ %374, %450 ]
  %456 = add i64 %453, -1
  %457 = and i64 %453, 7
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %470, label %459

459:                                              ; preds = %452, %459
  %460 = phi i64 [ %465, %459 ], [ %453, %452 ]
  %461 = phi i16* [ %467, %459 ], [ %454, %452 ]
  %462 = phi i16* [ %466, %459 ], [ %455, %452 ]
  %463 = phi i64 [ %468, %459 ], [ %457, %452 ]
  %464 = load i16, i16* %461, align 2
  store i16 %464, i16* %462, align 2
  %465 = add i64 %460, -1
  %466 = getelementptr inbounds i16, i16* %462, i64 1
  %467 = getelementptr inbounds i16, i16* %461, i64 1
  %468 = add i64 %463, -1
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %470, label %459, !llvm.loop !136

470:                                              ; preds = %459, %452
  %471 = phi i64 [ %453, %452 ], [ %465, %459 ]
  %472 = phi i16* [ %454, %452 ], [ %467, %459 ]
  %473 = phi i16* [ %455, %452 ], [ %466, %459 ]
  %474 = icmp ult i64 %456, 7
  br i1 %474, label %648, label %475

475:                                              ; preds = %470, %475
  %476 = phi i64 [ %501, %475 ], [ %471, %470 ]
  %477 = phi i16* [ %503, %475 ], [ %472, %470 ]
  %478 = phi i16* [ %502, %475 ], [ %473, %470 ]
  %479 = load i16, i16* %477, align 2
  store i16 %479, i16* %478, align 2
  %480 = getelementptr inbounds i16, i16* %478, i64 1
  %481 = getelementptr inbounds i16, i16* %477, i64 1
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %478, i64 2
  %484 = getelementptr inbounds i16, i16* %477, i64 2
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %478, i64 3
  %487 = getelementptr inbounds i16, i16* %477, i64 3
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %478, i64 4
  %490 = getelementptr inbounds i16, i16* %477, i64 4
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %478, i64 5
  %493 = getelementptr inbounds i16, i16* %477, i64 5
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %478, i64 6
  %496 = getelementptr inbounds i16, i16* %477, i64 6
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = getelementptr inbounds i16, i16* %478, i64 7
  %499 = getelementptr inbounds i16, i16* %477, i64 7
  %500 = load i16, i16* %499, align 2
  store i16 %500, i16* %498, align 2
  %501 = add i64 %476, -8
  %502 = getelementptr inbounds i16, i16* %478, i64 8
  %503 = getelementptr inbounds i16, i16* %477, i64 8
  %504 = icmp eq i64 %501, 0
  br i1 %504, label %648, label %475, !llvm.loop !137

505:                                              ; preds = %357
  %506 = icmp ult i16* %358, %359
  br i1 %506, label %507, label %648

507:                                              ; preds = %505
  %508 = getelementptr inbounds i16, i16* %358, i64 %3
  %509 = getelementptr inbounds i16, i16* %359, i64 %3
  %510 = icmp ult i64 %3, 16
  br i1 %510, label %595, label %511

511:                                              ; preds = %507
  %512 = icmp ult i16* %359, %508
  %513 = icmp ult i16* %358, %509
  %514 = and i1 %512, %513
  br i1 %514, label %595, label %515

515:                                              ; preds = %511
  %516 = and i64 %3, -16
  %517 = sub i64 %3, %516
  %518 = sub i64 0, %516
  %519 = getelementptr i16, i16* %508, i64 %518
  %520 = sub i64 0, %516
  %521 = getelementptr i16, i16* %509, i64 %520
  %522 = add i64 %516, -16
  %523 = lshr exact i64 %522, 4
  %524 = add nuw nsw i64 %523, 1
  %525 = and i64 %524, 1
  %526 = icmp eq i64 %522, 0
  br i1 %526, label %573, label %527

527:                                              ; preds = %515
  %528 = sub nuw nsw i64 %524, %525
  %529 = getelementptr i16, i16* %508, i64 -1
  %530 = getelementptr i16, i16* %509, i64 -1
  %531 = getelementptr i16, i16* %508, i64 -1
  %532 = getelementptr i16, i16* %509, i64 -1
  br label %533

533:                                              ; preds = %533, %527
  %534 = phi i64 [ 0, %527 ], [ %568, %533 ]
  %535 = phi i64 [ %528, %527 ], [ %569, %533 ]
  %536 = sub i64 0, %534
  %537 = sub i64 0, %534
  %538 = getelementptr inbounds i16, i16* %530, i64 %537
  %539 = getelementptr inbounds i16, i16* %529, i64 %536
  %540 = getelementptr inbounds i16, i16* %539, i64 -7
  %541 = bitcast i16* %540 to <8 x i16>*
  %542 = load <8 x i16>, <8 x i16>* %541, align 2, !alias.scope !138
  %543 = getelementptr inbounds i16, i16* %539, i64 -8
  %544 = getelementptr inbounds i16, i16* %543, i64 -7
  %545 = bitcast i16* %544 to <8 x i16>*
  %546 = load <8 x i16>, <8 x i16>* %545, align 2, !alias.scope !138
  %547 = getelementptr inbounds i16, i16* %538, i64 -7
  %548 = bitcast i16* %547 to <8 x i16>*
  store <8 x i16> %542, <8 x i16>* %548, align 2, !alias.scope !141, !noalias !138
  %549 = getelementptr inbounds i16, i16* %538, i64 -8
  %550 = getelementptr inbounds i16, i16* %549, i64 -7
  %551 = bitcast i16* %550 to <8 x i16>*
  store <8 x i16> %546, <8 x i16>* %551, align 2, !alias.scope !141, !noalias !138
  %552 = sub nuw nsw i64 -16, %534
  %553 = sub nuw nsw i64 -16, %534
  %554 = getelementptr inbounds i16, i16* %532, i64 %553
  %555 = getelementptr inbounds i16, i16* %531, i64 %552
  %556 = getelementptr inbounds i16, i16* %555, i64 -7
  %557 = bitcast i16* %556 to <8 x i16>*
  %558 = load <8 x i16>, <8 x i16>* %557, align 2, !alias.scope !138
  %559 = getelementptr inbounds i16, i16* %555, i64 -8
  %560 = getelementptr inbounds i16, i16* %559, i64 -7
  %561 = bitcast i16* %560 to <8 x i16>*
  %562 = load <8 x i16>, <8 x i16>* %561, align 2, !alias.scope !138
  %563 = getelementptr inbounds i16, i16* %554, i64 -7
  %564 = bitcast i16* %563 to <8 x i16>*
  store <8 x i16> %558, <8 x i16>* %564, align 2, !alias.scope !141, !noalias !138
  %565 = getelementptr inbounds i16, i16* %554, i64 -8
  %566 = getelementptr inbounds i16, i16* %565, i64 -7
  %567 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %562, <8 x i16>* %567, align 2, !alias.scope !141, !noalias !138
  %568 = add i64 %534, 32
  %569 = add i64 %535, -2
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %571, label %533, !llvm.loop !143

571:                                              ; preds = %533
  %572 = sub nuw nsw i64 -32, %534
  br label %573

573:                                              ; preds = %571, %515
  %574 = phi i64 [ 0, %515 ], [ %572, %571 ]
  %575 = icmp eq i64 %525, 0
  br i1 %575, label %593, label %576

576:                                              ; preds = %573
  %577 = getelementptr i16, i16* %508, i64 -1
  %578 = getelementptr i16, i16* %509, i64 -1
  %579 = getelementptr inbounds i16, i16* %578, i64 %574
  %580 = getelementptr inbounds i16, i16* %577, i64 %574
  %581 = getelementptr inbounds i16, i16* %580, i64 -7
  %582 = bitcast i16* %581 to <8 x i16>*
  %583 = load <8 x i16>, <8 x i16>* %582, align 2, !alias.scope !138
  %584 = getelementptr inbounds i16, i16* %580, i64 -8
  %585 = getelementptr inbounds i16, i16* %584, i64 -7
  %586 = bitcast i16* %585 to <8 x i16>*
  %587 = load <8 x i16>, <8 x i16>* %586, align 2, !alias.scope !138
  %588 = getelementptr inbounds i16, i16* %579, i64 -7
  %589 = bitcast i16* %588 to <8 x i16>*
  store <8 x i16> %583, <8 x i16>* %589, align 2, !alias.scope !141, !noalias !138
  %590 = getelementptr inbounds i16, i16* %579, i64 -8
  %591 = getelementptr inbounds i16, i16* %590, i64 -7
  %592 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> %587, <8 x i16>* %592, align 2, !alias.scope !141, !noalias !138
  br label %593

593:                                              ; preds = %573, %576
  %594 = icmp eq i64 %516, %3
  br i1 %594, label %648, label %595

595:                                              ; preds = %593, %511, %507
  %596 = phi i64 [ %3, %511 ], [ %3, %507 ], [ %517, %593 ]
  %597 = phi i16* [ %508, %511 ], [ %508, %507 ], [ %519, %593 ]
  %598 = phi i16* [ %509, %511 ], [ %509, %507 ], [ %521, %593 ]
  %599 = add i64 %596, -1
  %600 = and i64 %596, 7
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %613, label %602

602:                                              ; preds = %595, %602
  %603 = phi i64 [ %610, %602 ], [ %596, %595 ]
  %604 = phi i16* [ %608, %602 ], [ %597, %595 ]
  %605 = phi i16* [ %607, %602 ], [ %598, %595 ]
  %606 = phi i64 [ %611, %602 ], [ %600, %595 ]
  %607 = getelementptr inbounds i16, i16* %605, i64 -1
  %608 = getelementptr inbounds i16, i16* %604, i64 -1
  %609 = load i16, i16* %608, align 2
  store i16 %609, i16* %607, align 2
  %610 = add i64 %603, -1
  %611 = add i64 %606, -1
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %602, !llvm.loop !144

613:                                              ; preds = %602, %595
  %614 = phi i64 [ %596, %595 ], [ %610, %602 ]
  %615 = phi i16* [ %597, %595 ], [ %608, %602 ]
  %616 = phi i16* [ %598, %595 ], [ %607, %602 ]
  %617 = icmp ult i64 %599, 7
  br i1 %617, label %648, label %618

618:                                              ; preds = %613, %618
  %619 = phi i64 [ %646, %618 ], [ %614, %613 ]
  %620 = phi i16* [ %644, %618 ], [ %615, %613 ]
  %621 = phi i16* [ %643, %618 ], [ %616, %613 ]
  %622 = getelementptr inbounds i16, i16* %621, i64 -1
  %623 = getelementptr inbounds i16, i16* %620, i64 -1
  %624 = load i16, i16* %623, align 2
  store i16 %624, i16* %622, align 2
  %625 = getelementptr inbounds i16, i16* %621, i64 -2
  %626 = getelementptr inbounds i16, i16* %620, i64 -2
  %627 = load i16, i16* %626, align 2
  store i16 %627, i16* %625, align 2
  %628 = getelementptr inbounds i16, i16* %621, i64 -3
  %629 = getelementptr inbounds i16, i16* %620, i64 -3
  %630 = load i16, i16* %629, align 2
  store i16 %630, i16* %628, align 2
  %631 = getelementptr inbounds i16, i16* %621, i64 -4
  %632 = getelementptr inbounds i16, i16* %620, i64 -4
  %633 = load i16, i16* %632, align 2
  store i16 %633, i16* %631, align 2
  %634 = getelementptr inbounds i16, i16* %621, i64 -5
  %635 = getelementptr inbounds i16, i16* %620, i64 -5
  %636 = load i16, i16* %635, align 2
  store i16 %636, i16* %634, align 2
  %637 = getelementptr inbounds i16, i16* %621, i64 -6
  %638 = getelementptr inbounds i16, i16* %620, i64 -6
  %639 = load i16, i16* %638, align 2
  store i16 %639, i16* %637, align 2
  %640 = getelementptr inbounds i16, i16* %621, i64 -7
  %641 = getelementptr inbounds i16, i16* %620, i64 -7
  %642 = load i16, i16* %641, align 2
  store i16 %642, i16* %640, align 2
  %643 = getelementptr inbounds i16, i16* %621, i64 -8
  %644 = getelementptr inbounds i16, i16* %620, i64 -8
  %645 = load i16, i16* %644, align 2
  store i16 %645, i16* %643, align 2
  %646 = add i64 %619, -8
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %648, label %618, !llvm.loop !145

648:                                              ; preds = %613, %618, %470, %475, %593, %450, %505
  %649 = add i64 %15, %3
  %650 = load i8, i8* %6, align 1
  %651 = icmp slt i8 %650, 0
  br i1 %651, label %652, label %654

652:                                              ; preds = %648
  %653 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %649, i64* %653, align 8
  br label %656

654:                                              ; preds = %648
  %655 = trunc i64 %649 to i8
  store i8 %655, i8* %6, align 1
  br label %656

656:                                              ; preds = %652, %654
  %657 = getelementptr inbounds i16, i16* %38, i64 %649
  store i16 0, i16* %657, align 2
  br label %661

658:                                              ; preds = %25
  %659 = add i64 %15, %3
  %660 = sub i64 %659, %26
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.11"* %0, i64 %26, i64 %660, i64 %15, i64 %1, i64 0, i64 %3, i16* %2)
  br label %661

661:                                              ; preds = %29, %656, %658
  ret %"class.std::__1::basic_string.11"* %0
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string.11"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE7replaceEmmPKDsm(%"class.std::__1::basic_string.11"*, i64, i64, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.std::__1::basic_string.11"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  br label %15

13:                                               ; preds = %5
  %14 = zext i8 %8 to i64
  br label %15

15:                                               ; preds = %10, %13
  %16 = phi i64 [ %12, %10 ], [ %14, %13 ]
  %17 = icmp ult i64 %16, %1
  br i1 %17, label %18, label %20

18:                                               ; preds = %15
  %19 = bitcast %"class.std::__1::basic_string.11"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %19) #13
  unreachable

20:                                               ; preds = %15
  %21 = sub i64 %16, %1
  %22 = icmp ult i64 %21, %2
  %23 = select i1 %22, i64 %21, i64 %2
  br i1 %9, label %24, label %29

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = and i64 %26, 9223372036854775807
  %28 = add nsw i64 %27, -1
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi i64 [ %28, %24 ], [ 10, %20 ]
  %31 = sub i64 %23, %16
  %32 = add i64 %31, %30
  %33 = icmp ult i64 %32, %4
  br i1 %33, label %1464, label %34

34:                                               ; preds = %29
  br i1 %9, label %35, label %38

35:                                               ; preds = %34
  %36 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i16*, i16** %36, align 8
  br label %40

38:                                               ; preds = %34
  %39 = bitcast %"class.std::__1::basic_string.11"* %0 to i16*
  br label %40

40:                                               ; preds = %35, %38
  %41 = phi i16* [ %37, %35 ], [ %39, %38 ]
  %42 = icmp eq i64 %23, %4
  br i1 %42, label %1155, label %43

43:                                               ; preds = %40
  %44 = sub i64 %21, %23
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %1155, label %46

46:                                               ; preds = %43
  %47 = icmp ugt i64 %23, %4
  %48 = getelementptr inbounds i16, i16* %41, i64 %1
  br i1 %47, label %49, label %659

49:                                               ; preds = %46
  %50 = icmp eq i64 %4, 0
  br i1 %50, label %340, label %51

51:                                               ; preds = %49
  %52 = icmp ult i16* %48, %3
  br i1 %52, label %53, label %197

53:                                               ; preds = %51
  %54 = icmp ult i64 %4, 16
  br i1 %54, label %144, label %55

55:                                               ; preds = %53
  %56 = add i64 %4, %1
  %57 = getelementptr i16, i16* %41, i64 %56
  %58 = getelementptr i16, i16* %3, i64 %4
  %59 = icmp ult i16* %48, %58
  %60 = icmp ugt i16* %57, %3
  %61 = and i1 %59, %60
  br i1 %61, label %144, label %62

62:                                               ; preds = %55
  %63 = and i64 %4, -16
  %64 = sub i64 %4, %63
  %65 = getelementptr i16, i16* %3, i64 %63
  %66 = getelementptr i16, i16* %48, i64 %63
  %67 = add i64 %63, -16
  %68 = lshr exact i64 %67, 4
  %69 = add nuw nsw i64 %68, 1
  %70 = and i64 %69, 3
  %71 = icmp ult i64 %67, 48
  br i1 %71, label %123, label %72

72:                                               ; preds = %62
  %73 = sub nsw i64 %69, %70
  br label %74

74:                                               ; preds = %74, %72
  %75 = phi i64 [ 0, %72 ], [ %120, %74 ]
  %76 = phi i64 [ %73, %72 ], [ %121, %74 ]
  %77 = getelementptr i16, i16* %3, i64 %75
  %78 = getelementptr i16, i16* %48, i64 %75
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !146
  %81 = getelementptr i16, i16* %77, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !146
  %84 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !149, !noalias !146
  %85 = getelementptr i16, i16* %78, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !149, !noalias !146
  %87 = or i64 %75, 16
  %88 = getelementptr i16, i16* %3, i64 %87
  %89 = getelementptr i16, i16* %48, i64 %87
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !146
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !146
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !149, !noalias !146
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !149, !noalias !146
  %98 = or i64 %75, 32
  %99 = getelementptr i16, i16* %3, i64 %98
  %100 = getelementptr i16, i16* %48, i64 %98
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !146
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !146
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !149, !noalias !146
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !149, !noalias !146
  %109 = or i64 %75, 48
  %110 = getelementptr i16, i16* %3, i64 %109
  %111 = getelementptr i16, i16* %48, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !146
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !146
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !149, !noalias !146
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !149, !noalias !146
  %120 = add i64 %75, 64
  %121 = add i64 %76, -4
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %74, !llvm.loop !151

123:                                              ; preds = %74, %62
  %124 = phi i64 [ 0, %62 ], [ %120, %74 ]
  %125 = icmp eq i64 %70, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %139, %126 ], [ %124, %123 ]
  %128 = phi i64 [ %140, %126 ], [ %70, %123 ]
  %129 = getelementptr i16, i16* %3, i64 %127
  %130 = getelementptr i16, i16* %48, i64 %127
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !146
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !146
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !149, !noalias !146
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !149, !noalias !146
  %139 = add i64 %127, 16
  %140 = add i64 %128, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %126, !llvm.loop !152

142:                                              ; preds = %126, %123
  %143 = icmp eq i64 %63, %4
  br i1 %143, label %340, label %144

144:                                              ; preds = %142, %55, %53
  %145 = phi i64 [ %4, %55 ], [ %4, %53 ], [ %64, %142 ]
  %146 = phi i16* [ %3, %55 ], [ %3, %53 ], [ %65, %142 ]
  %147 = phi i16* [ %48, %55 ], [ %48, %53 ], [ %66, %142 ]
  %148 = add i64 %145, -1
  %149 = and i64 %145, 7
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %162, label %151

151:                                              ; preds = %144, %151
  %152 = phi i64 [ %157, %151 ], [ %145, %144 ]
  %153 = phi i16* [ %159, %151 ], [ %146, %144 ]
  %154 = phi i16* [ %158, %151 ], [ %147, %144 ]
  %155 = phi i64 [ %160, %151 ], [ %149, %144 ]
  %156 = load i16, i16* %153, align 2
  store i16 %156, i16* %154, align 2
  %157 = add i64 %152, -1
  %158 = getelementptr inbounds i16, i16* %154, i64 1
  %159 = getelementptr inbounds i16, i16* %153, i64 1
  %160 = add i64 %155, -1
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %151, !llvm.loop !153

162:                                              ; preds = %151, %144
  %163 = phi i64 [ %145, %144 ], [ %157, %151 ]
  %164 = phi i16* [ %146, %144 ], [ %159, %151 ]
  %165 = phi i16* [ %147, %144 ], [ %158, %151 ]
  %166 = icmp ult i64 %148, 7
  br i1 %166, label %340, label %167

167:                                              ; preds = %162, %167
  %168 = phi i64 [ %193, %167 ], [ %163, %162 ]
  %169 = phi i16* [ %195, %167 ], [ %164, %162 ]
  %170 = phi i16* [ %194, %167 ], [ %165, %162 ]
  %171 = load i16, i16* %169, align 2
  store i16 %171, i16* %170, align 2
  %172 = getelementptr inbounds i16, i16* %170, i64 1
  %173 = getelementptr inbounds i16, i16* %169, i64 1
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %170, i64 2
  %176 = getelementptr inbounds i16, i16* %169, i64 2
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %170, i64 3
  %179 = getelementptr inbounds i16, i16* %169, i64 3
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %170, i64 4
  %182 = getelementptr inbounds i16, i16* %169, i64 4
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %170, i64 5
  %185 = getelementptr inbounds i16, i16* %169, i64 5
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %170, i64 6
  %188 = getelementptr inbounds i16, i16* %169, i64 6
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %170, i64 7
  %191 = getelementptr inbounds i16, i16* %169, i64 7
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = add i64 %168, -8
  %194 = getelementptr inbounds i16, i16* %170, i64 8
  %195 = getelementptr inbounds i16, i16* %169, i64 8
  %196 = icmp eq i64 %193, 0
  br i1 %196, label %340, label %167, !llvm.loop !154

197:                                              ; preds = %51
  %198 = icmp ugt i16* %48, %3
  br i1 %198, label %199, label %340

199:                                              ; preds = %197
  %200 = getelementptr inbounds i16, i16* %3, i64 %4
  %201 = getelementptr inbounds i16, i16* %48, i64 %4
  %202 = icmp ult i64 %4, 16
  br i1 %202, label %287, label %203

203:                                              ; preds = %199
  %204 = icmp ult i16* %48, %200
  %205 = icmp ugt i16* %201, %3
  %206 = and i1 %204, %205
  br i1 %206, label %287, label %207

207:                                              ; preds = %203
  %208 = and i64 %4, -16
  %209 = sub i64 %4, %208
  %210 = sub i64 0, %208
  %211 = getelementptr i16, i16* %200, i64 %210
  %212 = sub i64 0, %208
  %213 = getelementptr i16, i16* %201, i64 %212
  %214 = add i64 %208, -16
  %215 = lshr exact i64 %214, 4
  %216 = add nuw nsw i64 %215, 1
  %217 = and i64 %216, 1
  %218 = icmp eq i64 %214, 0
  br i1 %218, label %263, label %219

219:                                              ; preds = %207
  %220 = sub nuw nsw i64 %216, %217
  %221 = getelementptr i16, i16* %200, i64 -1
  %222 = getelementptr i16, i16* %201, i64 -1
  %223 = getelementptr i16, i16* %200, i64 -1
  %224 = getelementptr i16, i16* %201, i64 -1
  br label %225

225:                                              ; preds = %225, %219
  %226 = phi i64 [ 0, %219 ], [ %260, %225 ]
  %227 = phi i64 [ %220, %219 ], [ %261, %225 ]
  %228 = sub i64 0, %226
  %229 = sub i64 0, %226
  %230 = getelementptr inbounds i16, i16* %222, i64 %229
  %231 = getelementptr inbounds i16, i16* %221, i64 %228
  %232 = getelementptr inbounds i16, i16* %231, i64 -7
  %233 = bitcast i16* %232 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2, !alias.scope !155
  %235 = getelementptr inbounds i16, i16* %231, i64 -8
  %236 = getelementptr inbounds i16, i16* %235, i64 -7
  %237 = bitcast i16* %236 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 2, !alias.scope !155
  %239 = getelementptr inbounds i16, i16* %230, i64 -7
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %240, align 2, !alias.scope !158, !noalias !155
  %241 = getelementptr inbounds i16, i16* %230, i64 -8
  %242 = getelementptr inbounds i16, i16* %241, i64 -7
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %243, align 2, !alias.scope !158, !noalias !155
  %244 = sub nuw nsw i64 -16, %226
  %245 = sub nuw nsw i64 -16, %226
  %246 = getelementptr inbounds i16, i16* %224, i64 %245
  %247 = getelementptr inbounds i16, i16* %223, i64 %244
  %248 = getelementptr inbounds i16, i16* %247, i64 -7
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 2, !alias.scope !155
  %251 = getelementptr inbounds i16, i16* %247, i64 -8
  %252 = getelementptr inbounds i16, i16* %251, i64 -7
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !155
  %255 = getelementptr inbounds i16, i16* %246, i64 -7
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %256, align 2, !alias.scope !158, !noalias !155
  %257 = getelementptr inbounds i16, i16* %246, i64 -8
  %258 = getelementptr inbounds i16, i16* %257, i64 -7
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %259, align 2, !alias.scope !158, !noalias !155
  %260 = add i64 %226, 32
  %261 = add i64 %227, -2
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %225, !llvm.loop !160

263:                                              ; preds = %225, %207
  %264 = phi i64 [ 0, %207 ], [ %260, %225 ]
  %265 = icmp eq i64 %217, 0
  br i1 %265, label %285, label %266

266:                                              ; preds = %263
  %267 = sub i64 0, %264
  %268 = getelementptr i16, i16* %200, i64 -1
  %269 = sub i64 0, %264
  %270 = getelementptr i16, i16* %201, i64 -1
  %271 = getelementptr inbounds i16, i16* %270, i64 %269
  %272 = getelementptr inbounds i16, i16* %268, i64 %267
  %273 = getelementptr inbounds i16, i16* %272, i64 -7
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !155
  %276 = getelementptr inbounds i16, i16* %272, i64 -8
  %277 = getelementptr inbounds i16, i16* %276, i64 -7
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 2, !alias.scope !155
  %280 = getelementptr inbounds i16, i16* %271, i64 -7
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %281, align 2, !alias.scope !158, !noalias !155
  %282 = getelementptr inbounds i16, i16* %271, i64 -8
  %283 = getelementptr inbounds i16, i16* %282, i64 -7
  %284 = bitcast i16* %283 to <8 x i16>*
  store <8 x i16> %279, <8 x i16>* %284, align 2, !alias.scope !158, !noalias !155
  br label %285

285:                                              ; preds = %263, %266
  %286 = icmp eq i64 %208, %4
  br i1 %286, label %340, label %287

287:                                              ; preds = %285, %203, %199
  %288 = phi i64 [ %4, %203 ], [ %4, %199 ], [ %209, %285 ]
  %289 = phi i16* [ %200, %203 ], [ %200, %199 ], [ %211, %285 ]
  %290 = phi i16* [ %201, %203 ], [ %201, %199 ], [ %213, %285 ]
  %291 = add i64 %288, -1
  %292 = and i64 %288, 7
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %305, label %294

294:                                              ; preds = %287, %294
  %295 = phi i64 [ %302, %294 ], [ %288, %287 ]
  %296 = phi i16* [ %300, %294 ], [ %289, %287 ]
  %297 = phi i16* [ %299, %294 ], [ %290, %287 ]
  %298 = phi i64 [ %303, %294 ], [ %292, %287 ]
  %299 = getelementptr inbounds i16, i16* %297, i64 -1
  %300 = getelementptr inbounds i16, i16* %296, i64 -1
  %301 = load i16, i16* %300, align 2
  store i16 %301, i16* %299, align 2
  %302 = add i64 %295, -1
  %303 = add i64 %298, -1
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %305, label %294, !llvm.loop !161

305:                                              ; preds = %294, %287
  %306 = phi i64 [ %288, %287 ], [ %302, %294 ]
  %307 = phi i16* [ %289, %287 ], [ %300, %294 ]
  %308 = phi i16* [ %290, %287 ], [ %299, %294 ]
  %309 = icmp ult i64 %291, 7
  br i1 %309, label %340, label %310

310:                                              ; preds = %305, %310
  %311 = phi i64 [ %338, %310 ], [ %306, %305 ]
  %312 = phi i16* [ %336, %310 ], [ %307, %305 ]
  %313 = phi i16* [ %335, %310 ], [ %308, %305 ]
  %314 = getelementptr inbounds i16, i16* %313, i64 -1
  %315 = getelementptr inbounds i16, i16* %312, i64 -1
  %316 = load i16, i16* %315, align 2
  store i16 %316, i16* %314, align 2
  %317 = getelementptr inbounds i16, i16* %313, i64 -2
  %318 = getelementptr inbounds i16, i16* %312, i64 -2
  %319 = load i16, i16* %318, align 2
  store i16 %319, i16* %317, align 2
  %320 = getelementptr inbounds i16, i16* %313, i64 -3
  %321 = getelementptr inbounds i16, i16* %312, i64 -3
  %322 = load i16, i16* %321, align 2
  store i16 %322, i16* %320, align 2
  %323 = getelementptr inbounds i16, i16* %313, i64 -4
  %324 = getelementptr inbounds i16, i16* %312, i64 -4
  %325 = load i16, i16* %324, align 2
  store i16 %325, i16* %323, align 2
  %326 = getelementptr inbounds i16, i16* %313, i64 -5
  %327 = getelementptr inbounds i16, i16* %312, i64 -5
  %328 = load i16, i16* %327, align 2
  store i16 %328, i16* %326, align 2
  %329 = getelementptr inbounds i16, i16* %313, i64 -6
  %330 = getelementptr inbounds i16, i16* %312, i64 -6
  %331 = load i16, i16* %330, align 2
  store i16 %331, i16* %329, align 2
  %332 = getelementptr inbounds i16, i16* %313, i64 -7
  %333 = getelementptr inbounds i16, i16* %312, i64 -7
  %334 = load i16, i16* %333, align 2
  store i16 %334, i16* %332, align 2
  %335 = getelementptr inbounds i16, i16* %313, i64 -8
  %336 = getelementptr inbounds i16, i16* %312, i64 -8
  %337 = load i16, i16* %336, align 2
  store i16 %337, i16* %335, align 2
  %338 = add i64 %311, -8
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %310, !llvm.loop !162

340:                                              ; preds = %305, %310, %162, %167, %285, %142, %197, %49
  %341 = getelementptr inbounds i16, i16* %48, i64 %4
  %342 = getelementptr inbounds i16, i16* %48, i64 %23
  %343 = icmp sgt i64 %23, %4
  br i1 %343, label %344, label %489

344:                                              ; preds = %340
  %345 = icmp ult i64 %44, 16
  br i1 %345, label %436, label %346

346:                                              ; preds = %344
  %347 = add i64 %16, %4
  %348 = sub i64 %347, %23
  %349 = getelementptr i16, i16* %41, i64 %348
  %350 = getelementptr i16, i16* %41, i64 %16
  %351 = icmp ult i16* %341, %350
  %352 = icmp ult i16* %342, %349
  %353 = and i1 %351, %352
  br i1 %353, label %436, label %354

354:                                              ; preds = %346
  %355 = and i64 %44, -16
  %356 = sub i64 %44, %355
  %357 = getelementptr i16, i16* %342, i64 %355
  %358 = getelementptr i16, i16* %341, i64 %355
  %359 = add i64 %355, -16
  %360 = lshr exact i64 %359, 4
  %361 = add nuw nsw i64 %360, 1
  %362 = and i64 %361, 3
  %363 = icmp ult i64 %359, 48
  br i1 %363, label %415, label %364

364:                                              ; preds = %354
  %365 = sub nsw i64 %361, %362
  br label %366

366:                                              ; preds = %366, %364
  %367 = phi i64 [ 0, %364 ], [ %412, %366 ]
  %368 = phi i64 [ %365, %364 ], [ %413, %366 ]
  %369 = getelementptr i16, i16* %342, i64 %367
  %370 = getelementptr i16, i16* %341, i64 %367
  %371 = bitcast i16* %369 to <8 x i16>*
  %372 = load <8 x i16>, <8 x i16>* %371, align 2, !alias.scope !163
  %373 = getelementptr i16, i16* %369, i64 8
  %374 = bitcast i16* %373 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 2, !alias.scope !163
  %376 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %372, <8 x i16>* %376, align 2, !alias.scope !166, !noalias !163
  %377 = getelementptr i16, i16* %370, i64 8
  %378 = bitcast i16* %377 to <8 x i16>*
  store <8 x i16> %375, <8 x i16>* %378, align 2, !alias.scope !166, !noalias !163
  %379 = or i64 %367, 16
  %380 = getelementptr i16, i16* %342, i64 %379
  %381 = getelementptr i16, i16* %341, i64 %379
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !163
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !163
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !166, !noalias !163
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !166, !noalias !163
  %390 = or i64 %367, 32
  %391 = getelementptr i16, i16* %342, i64 %390
  %392 = getelementptr i16, i16* %341, i64 %390
  %393 = bitcast i16* %391 to <8 x i16>*
  %394 = load <8 x i16>, <8 x i16>* %393, align 2, !alias.scope !163
  %395 = getelementptr i16, i16* %391, i64 8
  %396 = bitcast i16* %395 to <8 x i16>*
  %397 = load <8 x i16>, <8 x i16>* %396, align 2, !alias.scope !163
  %398 = bitcast i16* %392 to <8 x i16>*
  store <8 x i16> %394, <8 x i16>* %398, align 2, !alias.scope !166, !noalias !163
  %399 = getelementptr i16, i16* %392, i64 8
  %400 = bitcast i16* %399 to <8 x i16>*
  store <8 x i16> %397, <8 x i16>* %400, align 2, !alias.scope !166, !noalias !163
  %401 = or i64 %367, 48
  %402 = getelementptr i16, i16* %342, i64 %401
  %403 = getelementptr i16, i16* %341, i64 %401
  %404 = bitcast i16* %402 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 2, !alias.scope !163
  %406 = getelementptr i16, i16* %402, i64 8
  %407 = bitcast i16* %406 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2, !alias.scope !163
  %409 = bitcast i16* %403 to <8 x i16>*
  store <8 x i16> %405, <8 x i16>* %409, align 2, !alias.scope !166, !noalias !163
  %410 = getelementptr i16, i16* %403, i64 8
  %411 = bitcast i16* %410 to <8 x i16>*
  store <8 x i16> %408, <8 x i16>* %411, align 2, !alias.scope !166, !noalias !163
  %412 = add i64 %367, 64
  %413 = add i64 %368, -4
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %415, label %366, !llvm.loop !168

415:                                              ; preds = %366, %354
  %416 = phi i64 [ 0, %354 ], [ %412, %366 ]
  %417 = icmp eq i64 %362, 0
  br i1 %417, label %434, label %418

418:                                              ; preds = %415, %418
  %419 = phi i64 [ %431, %418 ], [ %416, %415 ]
  %420 = phi i64 [ %432, %418 ], [ %362, %415 ]
  %421 = getelementptr i16, i16* %342, i64 %419
  %422 = getelementptr i16, i16* %341, i64 %419
  %423 = bitcast i16* %421 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 2, !alias.scope !163
  %425 = getelementptr i16, i16* %421, i64 8
  %426 = bitcast i16* %425 to <8 x i16>*
  %427 = load <8 x i16>, <8 x i16>* %426, align 2, !alias.scope !163
  %428 = bitcast i16* %422 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %428, align 2, !alias.scope !166, !noalias !163
  %429 = getelementptr i16, i16* %422, i64 8
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %427, <8 x i16>* %430, align 2, !alias.scope !166, !noalias !163
  %431 = add i64 %419, 16
  %432 = add i64 %420, -1
  %433 = icmp eq i64 %432, 0
  br i1 %433, label %434, label %418, !llvm.loop !169

434:                                              ; preds = %418, %415
  %435 = icmp eq i64 %44, %355
  br i1 %435, label %1451, label %436

436:                                              ; preds = %434, %346, %344
  %437 = phi i64 [ %44, %346 ], [ %44, %344 ], [ %356, %434 ]
  %438 = phi i16* [ %342, %346 ], [ %342, %344 ], [ %357, %434 ]
  %439 = phi i16* [ %341, %346 ], [ %341, %344 ], [ %358, %434 ]
  %440 = add i64 %437, -1
  %441 = and i64 %437, 7
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %454, label %443

443:                                              ; preds = %436, %443
  %444 = phi i64 [ %449, %443 ], [ %437, %436 ]
  %445 = phi i16* [ %451, %443 ], [ %438, %436 ]
  %446 = phi i16* [ %450, %443 ], [ %439, %436 ]
  %447 = phi i64 [ %452, %443 ], [ %441, %436 ]
  %448 = load i16, i16* %445, align 2
  store i16 %448, i16* %446, align 2
  %449 = add i64 %444, -1
  %450 = getelementptr inbounds i16, i16* %446, i64 1
  %451 = getelementptr inbounds i16, i16* %445, i64 1
  %452 = add i64 %447, -1
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %443, !llvm.loop !170

454:                                              ; preds = %443, %436
  %455 = phi i64 [ %437, %436 ], [ %449, %443 ]
  %456 = phi i16* [ %438, %436 ], [ %451, %443 ]
  %457 = phi i16* [ %439, %436 ], [ %450, %443 ]
  %458 = icmp ult i64 %440, 7
  br i1 %458, label %1451, label %459

459:                                              ; preds = %454, %459
  %460 = phi i64 [ %485, %459 ], [ %455, %454 ]
  %461 = phi i16* [ %487, %459 ], [ %456, %454 ]
  %462 = phi i16* [ %486, %459 ], [ %457, %454 ]
  %463 = load i16, i16* %461, align 2
  store i16 %463, i16* %462, align 2
  %464 = getelementptr inbounds i16, i16* %462, i64 1
  %465 = getelementptr inbounds i16, i16* %461, i64 1
  %466 = load i16, i16* %465, align 2
  store i16 %466, i16* %464, align 2
  %467 = getelementptr inbounds i16, i16* %462, i64 2
  %468 = getelementptr inbounds i16, i16* %461, i64 2
  %469 = load i16, i16* %468, align 2
  store i16 %469, i16* %467, align 2
  %470 = getelementptr inbounds i16, i16* %462, i64 3
  %471 = getelementptr inbounds i16, i16* %461, i64 3
  %472 = load i16, i16* %471, align 2
  store i16 %472, i16* %470, align 2
  %473 = getelementptr inbounds i16, i16* %462, i64 4
  %474 = getelementptr inbounds i16, i16* %461, i64 4
  %475 = load i16, i16* %474, align 2
  store i16 %475, i16* %473, align 2
  %476 = getelementptr inbounds i16, i16* %462, i64 5
  %477 = getelementptr inbounds i16, i16* %461, i64 5
  %478 = load i16, i16* %477, align 2
  store i16 %478, i16* %476, align 2
  %479 = getelementptr inbounds i16, i16* %462, i64 6
  %480 = getelementptr inbounds i16, i16* %461, i64 6
  %481 = load i16, i16* %480, align 2
  store i16 %481, i16* %479, align 2
  %482 = getelementptr inbounds i16, i16* %462, i64 7
  %483 = getelementptr inbounds i16, i16* %461, i64 7
  %484 = load i16, i16* %483, align 2
  store i16 %484, i16* %482, align 2
  %485 = add i64 %460, -8
  %486 = getelementptr inbounds i16, i16* %462, i64 8
  %487 = getelementptr inbounds i16, i16* %461, i64 8
  %488 = icmp eq i64 %485, 0
  br i1 %488, label %1451, label %459, !llvm.loop !171

489:                                              ; preds = %340
  %490 = icmp slt i64 %23, %4
  br i1 %490, label %491, label %1451

491:                                              ; preds = %489
  %492 = getelementptr inbounds i16, i16* %342, i64 %44
  %493 = getelementptr inbounds i16, i16* %341, i64 %44
  %494 = icmp ult i64 %44, 16
  br i1 %494, label %606, label %495

495:                                              ; preds = %491
  %496 = xor i64 %1, -1
  %497 = add i64 %16, %496
  %498 = sub i64 %497, %23
  %499 = add i64 %16, %4
  %500 = xor i64 %23, -1
  %501 = add i64 %499, %500
  %502 = getelementptr i16, i16* %41, i64 %501
  %503 = ptrtoint i16* %502 to i64
  %504 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %498, i64 2)
  %505 = extractvalue { i64, i1 } %504, 0
  %506 = extractvalue { i64, i1 } %504, 1
  %507 = icmp ugt i64 %505, %503
  %508 = or i1 %507, %506
  %509 = add i64 %16, -1
  %510 = getelementptr i16, i16* %41, i64 %509
  %511 = ptrtoint i16* %510 to i64
  %512 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %498, i64 2)
  %513 = extractvalue { i64, i1 } %512, 0
  %514 = extractvalue { i64, i1 } %512, 1
  %515 = icmp ugt i64 %513, %511
  %516 = or i1 %515, %514
  %517 = or i1 %508, %516
  br i1 %517, label %606, label %518

518:                                              ; preds = %495
  %519 = add i64 %4, %1
  %520 = getelementptr i16, i16* %41, i64 %519
  %521 = add i64 %23, %1
  %522 = getelementptr i16, i16* %41, i64 %521
  %523 = icmp ult i16* %520, %492
  %524 = icmp ult i16* %522, %493
  %525 = and i1 %523, %524
  br i1 %525, label %606, label %526

526:                                              ; preds = %518
  %527 = and i64 %44, -16
  %528 = sub i64 %44, %527
  %529 = sub i64 0, %527
  %530 = getelementptr i16, i16* %492, i64 %529
  %531 = sub i64 0, %527
  %532 = getelementptr i16, i16* %493, i64 %531
  %533 = add i64 %527, -16
  %534 = lshr exact i64 %533, 4
  %535 = add nuw nsw i64 %534, 1
  %536 = and i64 %535, 1
  %537 = icmp eq i64 %533, 0
  br i1 %537, label %584, label %538

538:                                              ; preds = %526
  %539 = sub nuw nsw i64 %535, %536
  %540 = getelementptr i16, i16* %492, i64 -1
  %541 = getelementptr i16, i16* %493, i64 -1
  %542 = getelementptr i16, i16* %492, i64 -1
  %543 = getelementptr i16, i16* %493, i64 -1
  br label %544

544:                                              ; preds = %544, %538
  %545 = phi i64 [ 0, %538 ], [ %579, %544 ]
  %546 = phi i64 [ %539, %538 ], [ %580, %544 ]
  %547 = sub i64 0, %545
  %548 = sub i64 0, %545
  %549 = getelementptr inbounds i16, i16* %541, i64 %548
  %550 = getelementptr inbounds i16, i16* %540, i64 %547
  %551 = getelementptr inbounds i16, i16* %550, i64 -7
  %552 = bitcast i16* %551 to <8 x i16>*
  %553 = load <8 x i16>, <8 x i16>* %552, align 2, !alias.scope !172
  %554 = getelementptr inbounds i16, i16* %550, i64 -8
  %555 = getelementptr inbounds i16, i16* %554, i64 -7
  %556 = bitcast i16* %555 to <8 x i16>*
  %557 = load <8 x i16>, <8 x i16>* %556, align 2, !alias.scope !172
  %558 = getelementptr inbounds i16, i16* %549, i64 -7
  %559 = bitcast i16* %558 to <8 x i16>*
  store <8 x i16> %553, <8 x i16>* %559, align 2, !alias.scope !175, !noalias !172
  %560 = getelementptr inbounds i16, i16* %549, i64 -8
  %561 = getelementptr inbounds i16, i16* %560, i64 -7
  %562 = bitcast i16* %561 to <8 x i16>*
  store <8 x i16> %557, <8 x i16>* %562, align 2, !alias.scope !175, !noalias !172
  %563 = sub nuw nsw i64 -16, %545
  %564 = sub nuw nsw i64 -16, %545
  %565 = getelementptr inbounds i16, i16* %543, i64 %564
  %566 = getelementptr inbounds i16, i16* %542, i64 %563
  %567 = getelementptr inbounds i16, i16* %566, i64 -7
  %568 = bitcast i16* %567 to <8 x i16>*
  %569 = load <8 x i16>, <8 x i16>* %568, align 2, !alias.scope !172
  %570 = getelementptr inbounds i16, i16* %566, i64 -8
  %571 = getelementptr inbounds i16, i16* %570, i64 -7
  %572 = bitcast i16* %571 to <8 x i16>*
  %573 = load <8 x i16>, <8 x i16>* %572, align 2, !alias.scope !172
  %574 = getelementptr inbounds i16, i16* %565, i64 -7
  %575 = bitcast i16* %574 to <8 x i16>*
  store <8 x i16> %569, <8 x i16>* %575, align 2, !alias.scope !175, !noalias !172
  %576 = getelementptr inbounds i16, i16* %565, i64 -8
  %577 = getelementptr inbounds i16, i16* %576, i64 -7
  %578 = bitcast i16* %577 to <8 x i16>*
  store <8 x i16> %573, <8 x i16>* %578, align 2, !alias.scope !175, !noalias !172
  %579 = add i64 %545, 32
  %580 = add i64 %546, -2
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %582, label %544, !llvm.loop !177

582:                                              ; preds = %544
  %583 = sub nuw nsw i64 -32, %545
  br label %584

584:                                              ; preds = %582, %526
  %585 = phi i64 [ 0, %526 ], [ %583, %582 ]
  %586 = icmp eq i64 %536, 0
  br i1 %586, label %604, label %587

587:                                              ; preds = %584
  %588 = getelementptr i16, i16* %492, i64 -1
  %589 = getelementptr i16, i16* %493, i64 -1
  %590 = getelementptr inbounds i16, i16* %589, i64 %585
  %591 = getelementptr inbounds i16, i16* %588, i64 %585
  %592 = getelementptr inbounds i16, i16* %591, i64 -7
  %593 = bitcast i16* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 2, !alias.scope !172
  %595 = getelementptr inbounds i16, i16* %591, i64 -8
  %596 = getelementptr inbounds i16, i16* %595, i64 -7
  %597 = bitcast i16* %596 to <8 x i16>*
  %598 = load <8 x i16>, <8 x i16>* %597, align 2, !alias.scope !172
  %599 = getelementptr inbounds i16, i16* %590, i64 -7
  %600 = bitcast i16* %599 to <8 x i16>*
  store <8 x i16> %594, <8 x i16>* %600, align 2, !alias.scope !175, !noalias !172
  %601 = getelementptr inbounds i16, i16* %590, i64 -8
  %602 = getelementptr inbounds i16, i16* %601, i64 -7
  %603 = bitcast i16* %602 to <8 x i16>*
  store <8 x i16> %598, <8 x i16>* %603, align 2, !alias.scope !175, !noalias !172
  br label %604

604:                                              ; preds = %584, %587
  %605 = icmp eq i64 %44, %527
  br i1 %605, label %1451, label %606

606:                                              ; preds = %604, %518, %495, %491
  %607 = phi i64 [ %44, %518 ], [ %44, %495 ], [ %44, %491 ], [ %528, %604 ]
  %608 = phi i16* [ %492, %518 ], [ %492, %495 ], [ %492, %491 ], [ %530, %604 ]
  %609 = phi i16* [ %493, %518 ], [ %493, %495 ], [ %493, %491 ], [ %532, %604 ]
  %610 = add i64 %607, -1
  %611 = and i64 %607, 7
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %624, label %613

613:                                              ; preds = %606, %613
  %614 = phi i64 [ %621, %613 ], [ %607, %606 ]
  %615 = phi i16* [ %619, %613 ], [ %608, %606 ]
  %616 = phi i16* [ %618, %613 ], [ %609, %606 ]
  %617 = phi i64 [ %622, %613 ], [ %611, %606 ]
  %618 = getelementptr inbounds i16, i16* %616, i64 -1
  %619 = getelementptr inbounds i16, i16* %615, i64 -1
  %620 = load i16, i16* %619, align 2
  store i16 %620, i16* %618, align 2
  %621 = add i64 %614, -1
  %622 = add i64 %617, -1
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %613, !llvm.loop !178

624:                                              ; preds = %613, %606
  %625 = phi i64 [ %607, %606 ], [ %621, %613 ]
  %626 = phi i16* [ %608, %606 ], [ %619, %613 ]
  %627 = phi i16* [ %609, %606 ], [ %618, %613 ]
  %628 = icmp ult i64 %610, 7
  br i1 %628, label %1451, label %629

629:                                              ; preds = %624, %629
  %630 = phi i64 [ %657, %629 ], [ %625, %624 ]
  %631 = phi i16* [ %655, %629 ], [ %626, %624 ]
  %632 = phi i16* [ %654, %629 ], [ %627, %624 ]
  %633 = getelementptr inbounds i16, i16* %632, i64 -1
  %634 = getelementptr inbounds i16, i16* %631, i64 -1
  %635 = load i16, i16* %634, align 2
  store i16 %635, i16* %633, align 2
  %636 = getelementptr inbounds i16, i16* %632, i64 -2
  %637 = getelementptr inbounds i16, i16* %631, i64 -2
  %638 = load i16, i16* %637, align 2
  store i16 %638, i16* %636, align 2
  %639 = getelementptr inbounds i16, i16* %632, i64 -3
  %640 = getelementptr inbounds i16, i16* %631, i64 -3
  %641 = load i16, i16* %640, align 2
  store i16 %641, i16* %639, align 2
  %642 = getelementptr inbounds i16, i16* %632, i64 -4
  %643 = getelementptr inbounds i16, i16* %631, i64 -4
  %644 = load i16, i16* %643, align 2
  store i16 %644, i16* %642, align 2
  %645 = getelementptr inbounds i16, i16* %632, i64 -5
  %646 = getelementptr inbounds i16, i16* %631, i64 -5
  %647 = load i16, i16* %646, align 2
  store i16 %647, i16* %645, align 2
  %648 = getelementptr inbounds i16, i16* %632, i64 -6
  %649 = getelementptr inbounds i16, i16* %631, i64 -6
  %650 = load i16, i16* %649, align 2
  store i16 %650, i16* %648, align 2
  %651 = getelementptr inbounds i16, i16* %632, i64 -7
  %652 = getelementptr inbounds i16, i16* %631, i64 -7
  %653 = load i16, i16* %652, align 2
  store i16 %653, i16* %651, align 2
  %654 = getelementptr inbounds i16, i16* %632, i64 -8
  %655 = getelementptr inbounds i16, i16* %631, i64 -8
  %656 = load i16, i16* %655, align 2
  store i16 %656, i16* %654, align 2
  %657 = add i64 %630, -8
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %1451, label %629, !llvm.loop !179

659:                                              ; preds = %46
  %660 = icmp ult i16* %48, %3
  %661 = getelementptr inbounds i16, i16* %41, i64 %16
  %662 = icmp ugt i16* %661, %3
  %663 = and i1 %660, %662
  br i1 %663, label %664, label %820

664:                                              ; preds = %659
  %665 = getelementptr inbounds i16, i16* %48, i64 %23
  %666 = icmp ugt i16* %665, %3
  br i1 %666, label %670, label %667

667:                                              ; preds = %664
  %668 = sub i64 %4, %23
  %669 = getelementptr inbounds i16, i16* %3, i64 %668
  br label %820

670:                                              ; preds = %664
  %671 = icmp eq i64 %23, 0
  br i1 %671, label %816, label %672

672:                                              ; preds = %670
  %673 = icmp ult i64 %23, 16
  br i1 %673, label %763, label %674

674:                                              ; preds = %672
  %675 = add i64 %23, %1
  %676 = getelementptr i16, i16* %41, i64 %675
  %677 = getelementptr i16, i16* %3, i64 %23
  %678 = icmp ult i16* %48, %677
  %679 = icmp ugt i16* %676, %3
  %680 = and i1 %678, %679
  br i1 %680, label %763, label %681

681:                                              ; preds = %674
  %682 = and i64 %23, -16
  %683 = sub i64 %23, %682
  %684 = getelementptr i16, i16* %3, i64 %682
  %685 = getelementptr i16, i16* %48, i64 %682
  %686 = add i64 %682, -16
  %687 = lshr exact i64 %686, 4
  %688 = add nuw nsw i64 %687, 1
  %689 = and i64 %688, 3
  %690 = icmp ult i64 %686, 48
  br i1 %690, label %742, label %691

691:                                              ; preds = %681
  %692 = sub nsw i64 %688, %689
  br label %693

693:                                              ; preds = %693, %691
  %694 = phi i64 [ 0, %691 ], [ %739, %693 ]
  %695 = phi i64 [ %692, %691 ], [ %740, %693 ]
  %696 = getelementptr i16, i16* %3, i64 %694
  %697 = getelementptr i16, i16* %48, i64 %694
  %698 = bitcast i16* %696 to <8 x i16>*
  %699 = load <8 x i16>, <8 x i16>* %698, align 2, !alias.scope !180
  %700 = getelementptr i16, i16* %696, i64 8
  %701 = bitcast i16* %700 to <8 x i16>*
  %702 = load <8 x i16>, <8 x i16>* %701, align 2, !alias.scope !180
  %703 = bitcast i16* %697 to <8 x i16>*
  store <8 x i16> %699, <8 x i16>* %703, align 2, !alias.scope !183, !noalias !180
  %704 = getelementptr i16, i16* %697, i64 8
  %705 = bitcast i16* %704 to <8 x i16>*
  store <8 x i16> %702, <8 x i16>* %705, align 2, !alias.scope !183, !noalias !180
  %706 = or i64 %694, 16
  %707 = getelementptr i16, i16* %3, i64 %706
  %708 = getelementptr i16, i16* %48, i64 %706
  %709 = bitcast i16* %707 to <8 x i16>*
  %710 = load <8 x i16>, <8 x i16>* %709, align 2, !alias.scope !180
  %711 = getelementptr i16, i16* %707, i64 8
  %712 = bitcast i16* %711 to <8 x i16>*
  %713 = load <8 x i16>, <8 x i16>* %712, align 2, !alias.scope !180
  %714 = bitcast i16* %708 to <8 x i16>*
  store <8 x i16> %710, <8 x i16>* %714, align 2, !alias.scope !183, !noalias !180
  %715 = getelementptr i16, i16* %708, i64 8
  %716 = bitcast i16* %715 to <8 x i16>*
  store <8 x i16> %713, <8 x i16>* %716, align 2, !alias.scope !183, !noalias !180
  %717 = or i64 %694, 32
  %718 = getelementptr i16, i16* %3, i64 %717
  %719 = getelementptr i16, i16* %48, i64 %717
  %720 = bitcast i16* %718 to <8 x i16>*
  %721 = load <8 x i16>, <8 x i16>* %720, align 2, !alias.scope !180
  %722 = getelementptr i16, i16* %718, i64 8
  %723 = bitcast i16* %722 to <8 x i16>*
  %724 = load <8 x i16>, <8 x i16>* %723, align 2, !alias.scope !180
  %725 = bitcast i16* %719 to <8 x i16>*
  store <8 x i16> %721, <8 x i16>* %725, align 2, !alias.scope !183, !noalias !180
  %726 = getelementptr i16, i16* %719, i64 8
  %727 = bitcast i16* %726 to <8 x i16>*
  store <8 x i16> %724, <8 x i16>* %727, align 2, !alias.scope !183, !noalias !180
  %728 = or i64 %694, 48
  %729 = getelementptr i16, i16* %3, i64 %728
  %730 = getelementptr i16, i16* %48, i64 %728
  %731 = bitcast i16* %729 to <8 x i16>*
  %732 = load <8 x i16>, <8 x i16>* %731, align 2, !alias.scope !180
  %733 = getelementptr i16, i16* %729, i64 8
  %734 = bitcast i16* %733 to <8 x i16>*
  %735 = load <8 x i16>, <8 x i16>* %734, align 2, !alias.scope !180
  %736 = bitcast i16* %730 to <8 x i16>*
  store <8 x i16> %732, <8 x i16>* %736, align 2, !alias.scope !183, !noalias !180
  %737 = getelementptr i16, i16* %730, i64 8
  %738 = bitcast i16* %737 to <8 x i16>*
  store <8 x i16> %735, <8 x i16>* %738, align 2, !alias.scope !183, !noalias !180
  %739 = add i64 %694, 64
  %740 = add i64 %695, -4
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %742, label %693, !llvm.loop !185

742:                                              ; preds = %693, %681
  %743 = phi i64 [ 0, %681 ], [ %739, %693 ]
  %744 = icmp eq i64 %689, 0
  br i1 %744, label %761, label %745

745:                                              ; preds = %742, %745
  %746 = phi i64 [ %758, %745 ], [ %743, %742 ]
  %747 = phi i64 [ %759, %745 ], [ %689, %742 ]
  %748 = getelementptr i16, i16* %3, i64 %746
  %749 = getelementptr i16, i16* %48, i64 %746
  %750 = bitcast i16* %748 to <8 x i16>*
  %751 = load <8 x i16>, <8 x i16>* %750, align 2, !alias.scope !180
  %752 = getelementptr i16, i16* %748, i64 8
  %753 = bitcast i16* %752 to <8 x i16>*
  %754 = load <8 x i16>, <8 x i16>* %753, align 2, !alias.scope !180
  %755 = bitcast i16* %749 to <8 x i16>*
  store <8 x i16> %751, <8 x i16>* %755, align 2, !alias.scope !183, !noalias !180
  %756 = getelementptr i16, i16* %749, i64 8
  %757 = bitcast i16* %756 to <8 x i16>*
  store <8 x i16> %754, <8 x i16>* %757, align 2, !alias.scope !183, !noalias !180
  %758 = add i64 %746, 16
  %759 = add i64 %747, -1
  %760 = icmp eq i64 %759, 0
  br i1 %760, label %761, label %745, !llvm.loop !186

761:                                              ; preds = %745, %742
  %762 = icmp eq i64 %23, %682
  br i1 %762, label %816, label %763

763:                                              ; preds = %761, %674, %672
  %764 = phi i64 [ %23, %674 ], [ %23, %672 ], [ %683, %761 ]
  %765 = phi i16* [ %3, %674 ], [ %3, %672 ], [ %684, %761 ]
  %766 = phi i16* [ %48, %674 ], [ %48, %672 ], [ %685, %761 ]
  %767 = add i64 %764, -1
  %768 = and i64 %764, 7
  %769 = icmp eq i64 %768, 0
  br i1 %769, label %781, label %770

770:                                              ; preds = %763, %770
  %771 = phi i64 [ %776, %770 ], [ %764, %763 ]
  %772 = phi i16* [ %778, %770 ], [ %765, %763 ]
  %773 = phi i16* [ %777, %770 ], [ %766, %763 ]
  %774 = phi i64 [ %779, %770 ], [ %768, %763 ]
  %775 = load i16, i16* %772, align 2
  store i16 %775, i16* %773, align 2
  %776 = add i64 %771, -1
  %777 = getelementptr inbounds i16, i16* %773, i64 1
  %778 = getelementptr inbounds i16, i16* %772, i64 1
  %779 = add i64 %774, -1
  %780 = icmp eq i64 %779, 0
  br i1 %780, label %781, label %770, !llvm.loop !187

781:                                              ; preds = %770, %763
  %782 = phi i64 [ %764, %763 ], [ %776, %770 ]
  %783 = phi i16* [ %765, %763 ], [ %778, %770 ]
  %784 = phi i16* [ %766, %763 ], [ %777, %770 ]
  %785 = icmp ult i64 %767, 7
  br i1 %785, label %816, label %786

786:                                              ; preds = %781, %786
  %787 = phi i64 [ %812, %786 ], [ %782, %781 ]
  %788 = phi i16* [ %814, %786 ], [ %783, %781 ]
  %789 = phi i16* [ %813, %786 ], [ %784, %781 ]
  %790 = load i16, i16* %788, align 2
  store i16 %790, i16* %789, align 2
  %791 = getelementptr inbounds i16, i16* %789, i64 1
  %792 = getelementptr inbounds i16, i16* %788, i64 1
  %793 = load i16, i16* %792, align 2
  store i16 %793, i16* %791, align 2
  %794 = getelementptr inbounds i16, i16* %789, i64 2
  %795 = getelementptr inbounds i16, i16* %788, i64 2
  %796 = load i16, i16* %795, align 2
  store i16 %796, i16* %794, align 2
  %797 = getelementptr inbounds i16, i16* %789, i64 3
  %798 = getelementptr inbounds i16, i16* %788, i64 3
  %799 = load i16, i16* %798, align 2
  store i16 %799, i16* %797, align 2
  %800 = getelementptr inbounds i16, i16* %789, i64 4
  %801 = getelementptr inbounds i16, i16* %788, i64 4
  %802 = load i16, i16* %801, align 2
  store i16 %802, i16* %800, align 2
  %803 = getelementptr inbounds i16, i16* %789, i64 5
  %804 = getelementptr inbounds i16, i16* %788, i64 5
  %805 = load i16, i16* %804, align 2
  store i16 %805, i16* %803, align 2
  %806 = getelementptr inbounds i16, i16* %789, i64 6
  %807 = getelementptr inbounds i16, i16* %788, i64 6
  %808 = load i16, i16* %807, align 2
  store i16 %808, i16* %806, align 2
  %809 = getelementptr inbounds i16, i16* %789, i64 7
  %810 = getelementptr inbounds i16, i16* %788, i64 7
  %811 = load i16, i16* %810, align 2
  store i16 %811, i16* %809, align 2
  %812 = add i64 %787, -8
  %813 = getelementptr inbounds i16, i16* %789, i64 8
  %814 = getelementptr inbounds i16, i16* %788, i64 8
  %815 = icmp eq i64 %812, 0
  br i1 %815, label %816, label %786, !llvm.loop !188

816:                                              ; preds = %781, %786, %761, %670
  %817 = add i64 %23, %1
  %818 = getelementptr inbounds i16, i16* %3, i64 %4
  %819 = sub i64 %4, %23
  br label %820

820:                                              ; preds = %659, %816, %667
  %821 = phi i64 [ 0, %816 ], [ %23, %667 ], [ %23, %659 ]
  %822 = phi i64 [ %817, %816 ], [ %1, %667 ], [ %1, %659 ]
  %823 = phi i16* [ %818, %816 ], [ %669, %667 ], [ %3, %659 ]
  %824 = phi i64 [ %819, %816 ], [ %4, %667 ], [ %4, %659 ]
  %825 = getelementptr inbounds i16, i16* %41, i64 %822
  %826 = getelementptr inbounds i16, i16* %825, i64 %824
  %827 = getelementptr inbounds i16, i16* %825, i64 %821
  %828 = icmp slt i64 %824, %821
  br i1 %828, label %829, label %979

829:                                              ; preds = %820
  %830 = icmp ult i64 %44, 16
  br i1 %830, label %926, label %831

831:                                              ; preds = %829
  %832 = add i64 %824, %822
  %833 = add i64 %832, %16
  %834 = add i64 %23, %1
  %835 = sub i64 %833, %834
  %836 = getelementptr i16, i16* %41, i64 %835
  %837 = add i64 %822, %821
  %838 = add i64 %837, %16
  %839 = sub i64 %838, %834
  %840 = getelementptr i16, i16* %41, i64 %839
  %841 = icmp ult i16* %826, %840
  %842 = icmp ult i16* %827, %836
  %843 = and i1 %841, %842
  br i1 %843, label %926, label %844

844:                                              ; preds = %831
  %845 = and i64 %44, -16
  %846 = sub i64 %44, %845
  %847 = getelementptr i16, i16* %827, i64 %845
  %848 = getelementptr i16, i16* %826, i64 %845
  %849 = add i64 %845, -16
  %850 = lshr exact i64 %849, 4
  %851 = add nuw nsw i64 %850, 1
  %852 = and i64 %851, 3
  %853 = icmp ult i64 %849, 48
  br i1 %853, label %905, label %854

854:                                              ; preds = %844
  %855 = sub nsw i64 %851, %852
  br label %856

856:                                              ; preds = %856, %854
  %857 = phi i64 [ 0, %854 ], [ %902, %856 ]
  %858 = phi i64 [ %855, %854 ], [ %903, %856 ]
  %859 = getelementptr i16, i16* %827, i64 %857
  %860 = getelementptr i16, i16* %826, i64 %857
  %861 = bitcast i16* %859 to <8 x i16>*
  %862 = load <8 x i16>, <8 x i16>* %861, align 2, !alias.scope !189
  %863 = getelementptr i16, i16* %859, i64 8
  %864 = bitcast i16* %863 to <8 x i16>*
  %865 = load <8 x i16>, <8 x i16>* %864, align 2, !alias.scope !189
  %866 = bitcast i16* %860 to <8 x i16>*
  store <8 x i16> %862, <8 x i16>* %866, align 2, !alias.scope !192, !noalias !189
  %867 = getelementptr i16, i16* %860, i64 8
  %868 = bitcast i16* %867 to <8 x i16>*
  store <8 x i16> %865, <8 x i16>* %868, align 2, !alias.scope !192, !noalias !189
  %869 = or i64 %857, 16
  %870 = getelementptr i16, i16* %827, i64 %869
  %871 = getelementptr i16, i16* %826, i64 %869
  %872 = bitcast i16* %870 to <8 x i16>*
  %873 = load <8 x i16>, <8 x i16>* %872, align 2, !alias.scope !189
  %874 = getelementptr i16, i16* %870, i64 8
  %875 = bitcast i16* %874 to <8 x i16>*
  %876 = load <8 x i16>, <8 x i16>* %875, align 2, !alias.scope !189
  %877 = bitcast i16* %871 to <8 x i16>*
  store <8 x i16> %873, <8 x i16>* %877, align 2, !alias.scope !192, !noalias !189
  %878 = getelementptr i16, i16* %871, i64 8
  %879 = bitcast i16* %878 to <8 x i16>*
  store <8 x i16> %876, <8 x i16>* %879, align 2, !alias.scope !192, !noalias !189
  %880 = or i64 %857, 32
  %881 = getelementptr i16, i16* %827, i64 %880
  %882 = getelementptr i16, i16* %826, i64 %880
  %883 = bitcast i16* %881 to <8 x i16>*
  %884 = load <8 x i16>, <8 x i16>* %883, align 2, !alias.scope !189
  %885 = getelementptr i16, i16* %881, i64 8
  %886 = bitcast i16* %885 to <8 x i16>*
  %887 = load <8 x i16>, <8 x i16>* %886, align 2, !alias.scope !189
  %888 = bitcast i16* %882 to <8 x i16>*
  store <8 x i16> %884, <8 x i16>* %888, align 2, !alias.scope !192, !noalias !189
  %889 = getelementptr i16, i16* %882, i64 8
  %890 = bitcast i16* %889 to <8 x i16>*
  store <8 x i16> %887, <8 x i16>* %890, align 2, !alias.scope !192, !noalias !189
  %891 = or i64 %857, 48
  %892 = getelementptr i16, i16* %827, i64 %891
  %893 = getelementptr i16, i16* %826, i64 %891
  %894 = bitcast i16* %892 to <8 x i16>*
  %895 = load <8 x i16>, <8 x i16>* %894, align 2, !alias.scope !189
  %896 = getelementptr i16, i16* %892, i64 8
  %897 = bitcast i16* %896 to <8 x i16>*
  %898 = load <8 x i16>, <8 x i16>* %897, align 2, !alias.scope !189
  %899 = bitcast i16* %893 to <8 x i16>*
  store <8 x i16> %895, <8 x i16>* %899, align 2, !alias.scope !192, !noalias !189
  %900 = getelementptr i16, i16* %893, i64 8
  %901 = bitcast i16* %900 to <8 x i16>*
  store <8 x i16> %898, <8 x i16>* %901, align 2, !alias.scope !192, !noalias !189
  %902 = add i64 %857, 64
  %903 = add i64 %858, -4
  %904 = icmp eq i64 %903, 0
  br i1 %904, label %905, label %856, !llvm.loop !194

905:                                              ; preds = %856, %844
  %906 = phi i64 [ 0, %844 ], [ %902, %856 ]
  %907 = icmp eq i64 %852, 0
  br i1 %907, label %924, label %908

908:                                              ; preds = %905, %908
  %909 = phi i64 [ %921, %908 ], [ %906, %905 ]
  %910 = phi i64 [ %922, %908 ], [ %852, %905 ]
  %911 = getelementptr i16, i16* %827, i64 %909
  %912 = getelementptr i16, i16* %826, i64 %909
  %913 = bitcast i16* %911 to <8 x i16>*
  %914 = load <8 x i16>, <8 x i16>* %913, align 2, !alias.scope !189
  %915 = getelementptr i16, i16* %911, i64 8
  %916 = bitcast i16* %915 to <8 x i16>*
  %917 = load <8 x i16>, <8 x i16>* %916, align 2, !alias.scope !189
  %918 = bitcast i16* %912 to <8 x i16>*
  store <8 x i16> %914, <8 x i16>* %918, align 2, !alias.scope !192, !noalias !189
  %919 = getelementptr i16, i16* %912, i64 8
  %920 = bitcast i16* %919 to <8 x i16>*
  store <8 x i16> %917, <8 x i16>* %920, align 2, !alias.scope !192, !noalias !189
  %921 = add i64 %909, 16
  %922 = add i64 %910, -1
  %923 = icmp eq i64 %922, 0
  br i1 %923, label %924, label %908, !llvm.loop !195

924:                                              ; preds = %908, %905
  %925 = icmp eq i64 %44, %845
  br i1 %925, label %1155, label %926

926:                                              ; preds = %924, %831, %829
  %927 = phi i64 [ %44, %831 ], [ %44, %829 ], [ %846, %924 ]
  %928 = phi i16* [ %827, %831 ], [ %827, %829 ], [ %847, %924 ]
  %929 = phi i16* [ %826, %831 ], [ %826, %829 ], [ %848, %924 ]
  %930 = add i64 %927, -1
  %931 = and i64 %927, 7
  %932 = icmp eq i64 %931, 0
  br i1 %932, label %944, label %933

933:                                              ; preds = %926, %933
  %934 = phi i64 [ %939, %933 ], [ %927, %926 ]
  %935 = phi i16* [ %941, %933 ], [ %928, %926 ]
  %936 = phi i16* [ %940, %933 ], [ %929, %926 ]
  %937 = phi i64 [ %942, %933 ], [ %931, %926 ]
  %938 = load i16, i16* %935, align 2
  store i16 %938, i16* %936, align 2
  %939 = add i64 %934, -1
  %940 = getelementptr inbounds i16, i16* %936, i64 1
  %941 = getelementptr inbounds i16, i16* %935, i64 1
  %942 = add i64 %937, -1
  %943 = icmp eq i64 %942, 0
  br i1 %943, label %944, label %933, !llvm.loop !196

944:                                              ; preds = %933, %926
  %945 = phi i64 [ %927, %926 ], [ %939, %933 ]
  %946 = phi i16* [ %928, %926 ], [ %941, %933 ]
  %947 = phi i16* [ %929, %926 ], [ %940, %933 ]
  %948 = icmp ult i64 %930, 7
  br i1 %948, label %1155, label %949

949:                                              ; preds = %944, %949
  %950 = phi i64 [ %975, %949 ], [ %945, %944 ]
  %951 = phi i16* [ %977, %949 ], [ %946, %944 ]
  %952 = phi i16* [ %976, %949 ], [ %947, %944 ]
  %953 = load i16, i16* %951, align 2
  store i16 %953, i16* %952, align 2
  %954 = getelementptr inbounds i16, i16* %952, i64 1
  %955 = getelementptr inbounds i16, i16* %951, i64 1
  %956 = load i16, i16* %955, align 2
  store i16 %956, i16* %954, align 2
  %957 = getelementptr inbounds i16, i16* %952, i64 2
  %958 = getelementptr inbounds i16, i16* %951, i64 2
  %959 = load i16, i16* %958, align 2
  store i16 %959, i16* %957, align 2
  %960 = getelementptr inbounds i16, i16* %952, i64 3
  %961 = getelementptr inbounds i16, i16* %951, i64 3
  %962 = load i16, i16* %961, align 2
  store i16 %962, i16* %960, align 2
  %963 = getelementptr inbounds i16, i16* %952, i64 4
  %964 = getelementptr inbounds i16, i16* %951, i64 4
  %965 = load i16, i16* %964, align 2
  store i16 %965, i16* %963, align 2
  %966 = getelementptr inbounds i16, i16* %952, i64 5
  %967 = getelementptr inbounds i16, i16* %951, i64 5
  %968 = load i16, i16* %967, align 2
  store i16 %968, i16* %966, align 2
  %969 = getelementptr inbounds i16, i16* %952, i64 6
  %970 = getelementptr inbounds i16, i16* %951, i64 6
  %971 = load i16, i16* %970, align 2
  store i16 %971, i16* %969, align 2
  %972 = getelementptr inbounds i16, i16* %952, i64 7
  %973 = getelementptr inbounds i16, i16* %951, i64 7
  %974 = load i16, i16* %973, align 2
  store i16 %974, i16* %972, align 2
  %975 = add i64 %950, -8
  %976 = getelementptr inbounds i16, i16* %952, i64 8
  %977 = getelementptr inbounds i16, i16* %951, i64 8
  %978 = icmp eq i64 %975, 0
  br i1 %978, label %1155, label %949, !llvm.loop !197

979:                                              ; preds = %820
  %980 = icmp slt i64 %821, %824
  br i1 %980, label %981, label %1155

981:                                              ; preds = %979
  %982 = getelementptr inbounds i16, i16* %827, i64 %44
  %983 = getelementptr inbounds i16, i16* %826, i64 %44
  %984 = icmp ult i64 %44, 16
  br i1 %984, label %1102, label %985

985:                                              ; preds = %981
  %986 = xor i64 %1, -1
  %987 = add i64 %16, %986
  %988 = sub i64 %987, %23
  %989 = add i64 %824, %822
  %990 = add i64 %989, %16
  %991 = xor i64 %1, -1
  %992 = add i64 %990, %991
  %993 = sub i64 %992, %23
  %994 = getelementptr i16, i16* %41, i64 %993
  %995 = ptrtoint i16* %994 to i64
  %996 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %988, i64 2)
  %997 = extractvalue { i64, i1 } %996, 0
  %998 = extractvalue { i64, i1 } %996, 1
  %999 = icmp ugt i64 %997, %995
  %1000 = or i1 %999, %998
  %1001 = add i64 %822, %821
  %1002 = add i64 %1001, %16
  %1003 = xor i64 %1, -1
  %1004 = add i64 %1002, %1003
  %1005 = sub i64 %1004, %23
  %1006 = getelementptr i16, i16* %41, i64 %1005
  %1007 = ptrtoint i16* %1006 to i64
  %1008 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %988, i64 2)
  %1009 = extractvalue { i64, i1 } %1008, 0
  %1010 = extractvalue { i64, i1 } %1008, 1
  %1011 = icmp ugt i64 %1009, %1007
  %1012 = or i1 %1011, %1010
  %1013 = or i1 %1000, %1012
  br i1 %1013, label %1102, label %1014

1014:                                             ; preds = %985
  %1015 = add i64 %824, %822
  %1016 = getelementptr i16, i16* %41, i64 %1015
  %1017 = add i64 %822, %821
  %1018 = getelementptr i16, i16* %41, i64 %1017
  %1019 = icmp ult i16* %1016, %982
  %1020 = icmp ult i16* %1018, %983
  %1021 = and i1 %1019, %1020
  br i1 %1021, label %1102, label %1022

1022:                                             ; preds = %1014
  %1023 = and i64 %44, -16
  %1024 = sub i64 %44, %1023
  %1025 = sub i64 0, %1023
  %1026 = getelementptr i16, i16* %982, i64 %1025
  %1027 = sub i64 0, %1023
  %1028 = getelementptr i16, i16* %983, i64 %1027
  %1029 = add i64 %1023, -16
  %1030 = lshr exact i64 %1029, 4
  %1031 = add nuw nsw i64 %1030, 1
  %1032 = and i64 %1031, 1
  %1033 = icmp eq i64 %1029, 0
  br i1 %1033, label %1078, label %1034

1034:                                             ; preds = %1022
  %1035 = sub nuw nsw i64 %1031, %1032
  %1036 = getelementptr i16, i16* %982, i64 -1
  %1037 = getelementptr i16, i16* %983, i64 -1
  %1038 = getelementptr i16, i16* %982, i64 -1
  %1039 = getelementptr i16, i16* %983, i64 -1
  br label %1040

1040:                                             ; preds = %1040, %1034
  %1041 = phi i64 [ 0, %1034 ], [ %1075, %1040 ]
  %1042 = phi i64 [ %1035, %1034 ], [ %1076, %1040 ]
  %1043 = sub i64 0, %1041
  %1044 = sub i64 0, %1041
  %1045 = getelementptr inbounds i16, i16* %1037, i64 %1044
  %1046 = getelementptr inbounds i16, i16* %1036, i64 %1043
  %1047 = getelementptr inbounds i16, i16* %1046, i64 -7
  %1048 = bitcast i16* %1047 to <8 x i16>*
  %1049 = load <8 x i16>, <8 x i16>* %1048, align 2, !alias.scope !198
  %1050 = getelementptr inbounds i16, i16* %1046, i64 -8
  %1051 = getelementptr inbounds i16, i16* %1050, i64 -7
  %1052 = bitcast i16* %1051 to <8 x i16>*
  %1053 = load <8 x i16>, <8 x i16>* %1052, align 2, !alias.scope !198
  %1054 = getelementptr inbounds i16, i16* %1045, i64 -7
  %1055 = bitcast i16* %1054 to <8 x i16>*
  store <8 x i16> %1049, <8 x i16>* %1055, align 2, !alias.scope !201, !noalias !198
  %1056 = getelementptr inbounds i16, i16* %1045, i64 -8
  %1057 = getelementptr inbounds i16, i16* %1056, i64 -7
  %1058 = bitcast i16* %1057 to <8 x i16>*
  store <8 x i16> %1053, <8 x i16>* %1058, align 2, !alias.scope !201, !noalias !198
  %1059 = sub nuw nsw i64 -16, %1041
  %1060 = sub nuw nsw i64 -16, %1041
  %1061 = getelementptr inbounds i16, i16* %1039, i64 %1060
  %1062 = getelementptr inbounds i16, i16* %1038, i64 %1059
  %1063 = getelementptr inbounds i16, i16* %1062, i64 -7
  %1064 = bitcast i16* %1063 to <8 x i16>*
  %1065 = load <8 x i16>, <8 x i16>* %1064, align 2, !alias.scope !198
  %1066 = getelementptr inbounds i16, i16* %1062, i64 -8
  %1067 = getelementptr inbounds i16, i16* %1066, i64 -7
  %1068 = bitcast i16* %1067 to <8 x i16>*
  %1069 = load <8 x i16>, <8 x i16>* %1068, align 2, !alias.scope !198
  %1070 = getelementptr inbounds i16, i16* %1061, i64 -7
  %1071 = bitcast i16* %1070 to <8 x i16>*
  store <8 x i16> %1065, <8 x i16>* %1071, align 2, !alias.scope !201, !noalias !198
  %1072 = getelementptr inbounds i16, i16* %1061, i64 -8
  %1073 = getelementptr inbounds i16, i16* %1072, i64 -7
  %1074 = bitcast i16* %1073 to <8 x i16>*
  store <8 x i16> %1069, <8 x i16>* %1074, align 2, !alias.scope !201, !noalias !198
  %1075 = add i64 %1041, 32
  %1076 = add i64 %1042, -2
  %1077 = icmp eq i64 %1076, 0
  br i1 %1077, label %1078, label %1040, !llvm.loop !203

1078:                                             ; preds = %1040, %1022
  %1079 = phi i64 [ 0, %1022 ], [ %1075, %1040 ]
  %1080 = icmp eq i64 %1032, 0
  br i1 %1080, label %1100, label %1081

1081:                                             ; preds = %1078
  %1082 = sub i64 0, %1079
  %1083 = getelementptr i16, i16* %982, i64 -1
  %1084 = sub i64 0, %1079
  %1085 = getelementptr i16, i16* %983, i64 -1
  %1086 = getelementptr inbounds i16, i16* %1085, i64 %1084
  %1087 = getelementptr inbounds i16, i16* %1083, i64 %1082
  %1088 = getelementptr inbounds i16, i16* %1087, i64 -7
  %1089 = bitcast i16* %1088 to <8 x i16>*
  %1090 = load <8 x i16>, <8 x i16>* %1089, align 2, !alias.scope !198
  %1091 = getelementptr inbounds i16, i16* %1087, i64 -8
  %1092 = getelementptr inbounds i16, i16* %1091, i64 -7
  %1093 = bitcast i16* %1092 to <8 x i16>*
  %1094 = load <8 x i16>, <8 x i16>* %1093, align 2, !alias.scope !198
  %1095 = getelementptr inbounds i16, i16* %1086, i64 -7
  %1096 = bitcast i16* %1095 to <8 x i16>*
  store <8 x i16> %1090, <8 x i16>* %1096, align 2, !alias.scope !201, !noalias !198
  %1097 = getelementptr inbounds i16, i16* %1086, i64 -8
  %1098 = getelementptr inbounds i16, i16* %1097, i64 -7
  %1099 = bitcast i16* %1098 to <8 x i16>*
  store <8 x i16> %1094, <8 x i16>* %1099, align 2, !alias.scope !201, !noalias !198
  br label %1100

1100:                                             ; preds = %1078, %1081
  %1101 = icmp eq i64 %44, %1023
  br i1 %1101, label %1155, label %1102

1102:                                             ; preds = %1100, %1014, %985, %981
  %1103 = phi i64 [ %44, %1014 ], [ %44, %985 ], [ %44, %981 ], [ %1024, %1100 ]
  %1104 = phi i16* [ %982, %1014 ], [ %982, %985 ], [ %982, %981 ], [ %1026, %1100 ]
  %1105 = phi i16* [ %983, %1014 ], [ %983, %985 ], [ %983, %981 ], [ %1028, %1100 ]
  %1106 = add i64 %1103, -1
  %1107 = and i64 %1103, 7
  %1108 = icmp eq i64 %1107, 0
  br i1 %1108, label %1120, label %1109

1109:                                             ; preds = %1102, %1109
  %1110 = phi i64 [ %1117, %1109 ], [ %1103, %1102 ]
  %1111 = phi i16* [ %1115, %1109 ], [ %1104, %1102 ]
  %1112 = phi i16* [ %1114, %1109 ], [ %1105, %1102 ]
  %1113 = phi i64 [ %1118, %1109 ], [ %1107, %1102 ]
  %1114 = getelementptr inbounds i16, i16* %1112, i64 -1
  %1115 = getelementptr inbounds i16, i16* %1111, i64 -1
  %1116 = load i16, i16* %1115, align 2
  store i16 %1116, i16* %1114, align 2
  %1117 = add i64 %1110, -1
  %1118 = add i64 %1113, -1
  %1119 = icmp eq i64 %1118, 0
  br i1 %1119, label %1120, label %1109, !llvm.loop !204

1120:                                             ; preds = %1109, %1102
  %1121 = phi i64 [ %1103, %1102 ], [ %1117, %1109 ]
  %1122 = phi i16* [ %1104, %1102 ], [ %1115, %1109 ]
  %1123 = phi i16* [ %1105, %1102 ], [ %1114, %1109 ]
  %1124 = icmp ult i64 %1106, 7
  br i1 %1124, label %1155, label %1125

1125:                                             ; preds = %1120, %1125
  %1126 = phi i64 [ %1153, %1125 ], [ %1121, %1120 ]
  %1127 = phi i16* [ %1151, %1125 ], [ %1122, %1120 ]
  %1128 = phi i16* [ %1150, %1125 ], [ %1123, %1120 ]
  %1129 = getelementptr inbounds i16, i16* %1128, i64 -1
  %1130 = getelementptr inbounds i16, i16* %1127, i64 -1
  %1131 = load i16, i16* %1130, align 2
  store i16 %1131, i16* %1129, align 2
  %1132 = getelementptr inbounds i16, i16* %1128, i64 -2
  %1133 = getelementptr inbounds i16, i16* %1127, i64 -2
  %1134 = load i16, i16* %1133, align 2
  store i16 %1134, i16* %1132, align 2
  %1135 = getelementptr inbounds i16, i16* %1128, i64 -3
  %1136 = getelementptr inbounds i16, i16* %1127, i64 -3
  %1137 = load i16, i16* %1136, align 2
  store i16 %1137, i16* %1135, align 2
  %1138 = getelementptr inbounds i16, i16* %1128, i64 -4
  %1139 = getelementptr inbounds i16, i16* %1127, i64 -4
  %1140 = load i16, i16* %1139, align 2
  store i16 %1140, i16* %1138, align 2
  %1141 = getelementptr inbounds i16, i16* %1128, i64 -5
  %1142 = getelementptr inbounds i16, i16* %1127, i64 -5
  %1143 = load i16, i16* %1142, align 2
  store i16 %1143, i16* %1141, align 2
  %1144 = getelementptr inbounds i16, i16* %1128, i64 -6
  %1145 = getelementptr inbounds i16, i16* %1127, i64 -6
  %1146 = load i16, i16* %1145, align 2
  store i16 %1146, i16* %1144, align 2
  %1147 = getelementptr inbounds i16, i16* %1128, i64 -7
  %1148 = getelementptr inbounds i16, i16* %1127, i64 -7
  %1149 = load i16, i16* %1148, align 2
  store i16 %1149, i16* %1147, align 2
  %1150 = getelementptr inbounds i16, i16* %1128, i64 -8
  %1151 = getelementptr inbounds i16, i16* %1127, i64 -8
  %1152 = load i16, i16* %1151, align 2
  store i16 %1152, i16* %1150, align 2
  %1153 = add i64 %1126, -8
  %1154 = icmp eq i64 %1153, 0
  br i1 %1154, label %1155, label %1125, !llvm.loop !205

1155:                                             ; preds = %1120, %1125, %944, %949, %1100, %924, %979, %43, %40
  %1156 = phi i64 [ %4, %40 ], [ %821, %979 ], [ %23, %43 ], [ %821, %924 ], [ %821, %1100 ], [ %821, %949 ], [ %821, %944 ], [ %821, %1125 ], [ %821, %1120 ]
  %1157 = phi i64 [ %1, %40 ], [ %822, %979 ], [ %1, %43 ], [ %822, %924 ], [ %822, %1100 ], [ %822, %949 ], [ %822, %944 ], [ %822, %1125 ], [ %822, %1120 ]
  %1158 = phi i16* [ %3, %40 ], [ %823, %979 ], [ %3, %43 ], [ %823, %924 ], [ %823, %1100 ], [ %823, %949 ], [ %823, %944 ], [ %823, %1125 ], [ %823, %1120 ]
  %1159 = phi i64 [ %4, %40 ], [ %824, %979 ], [ %4, %43 ], [ %824, %924 ], [ %824, %1100 ], [ %824, %949 ], [ %824, %944 ], [ %824, %1125 ], [ %824, %1120 ]
  %1160 = getelementptr inbounds i16, i16* %41, i64 %1157
  %1161 = icmp eq i64 %1159, 0
  br i1 %1161, label %1451, label %1162

1162:                                             ; preds = %1155
  %1163 = icmp ult i16* %1160, %1158
  br i1 %1163, label %1164, label %1308

1164:                                             ; preds = %1162
  %1165 = icmp ult i64 %1159, 16
  br i1 %1165, label %1255, label %1166

1166:                                             ; preds = %1164
  %1167 = add i64 %1159, %1157
  %1168 = getelementptr i16, i16* %41, i64 %1167
  %1169 = getelementptr i16, i16* %1158, i64 %1159
  %1170 = icmp ult i16* %1160, %1169
  %1171 = icmp ult i16* %1158, %1168
  %1172 = and i1 %1170, %1171
  br i1 %1172, label %1255, label %1173

1173:                                             ; preds = %1166
  %1174 = and i64 %1159, -16
  %1175 = sub i64 %1159, %1174
  %1176 = getelementptr i16, i16* %1158, i64 %1174
  %1177 = getelementptr i16, i16* %1160, i64 %1174
  %1178 = add i64 %1174, -16
  %1179 = lshr exact i64 %1178, 4
  %1180 = add nuw nsw i64 %1179, 1
  %1181 = and i64 %1180, 3
  %1182 = icmp ult i64 %1178, 48
  br i1 %1182, label %1234, label %1183

1183:                                             ; preds = %1173
  %1184 = sub nsw i64 %1180, %1181
  br label %1185

1185:                                             ; preds = %1185, %1183
  %1186 = phi i64 [ 0, %1183 ], [ %1231, %1185 ]
  %1187 = phi i64 [ %1184, %1183 ], [ %1232, %1185 ]
  %1188 = getelementptr i16, i16* %1158, i64 %1186
  %1189 = getelementptr i16, i16* %1160, i64 %1186
  %1190 = bitcast i16* %1188 to <8 x i16>*
  %1191 = load <8 x i16>, <8 x i16>* %1190, align 2, !alias.scope !206
  %1192 = getelementptr i16, i16* %1188, i64 8
  %1193 = bitcast i16* %1192 to <8 x i16>*
  %1194 = load <8 x i16>, <8 x i16>* %1193, align 2, !alias.scope !206
  %1195 = bitcast i16* %1189 to <8 x i16>*
  store <8 x i16> %1191, <8 x i16>* %1195, align 2, !alias.scope !209, !noalias !206
  %1196 = getelementptr i16, i16* %1189, i64 8
  %1197 = bitcast i16* %1196 to <8 x i16>*
  store <8 x i16> %1194, <8 x i16>* %1197, align 2, !alias.scope !209, !noalias !206
  %1198 = or i64 %1186, 16
  %1199 = getelementptr i16, i16* %1158, i64 %1198
  %1200 = getelementptr i16, i16* %1160, i64 %1198
  %1201 = bitcast i16* %1199 to <8 x i16>*
  %1202 = load <8 x i16>, <8 x i16>* %1201, align 2, !alias.scope !206
  %1203 = getelementptr i16, i16* %1199, i64 8
  %1204 = bitcast i16* %1203 to <8 x i16>*
  %1205 = load <8 x i16>, <8 x i16>* %1204, align 2, !alias.scope !206
  %1206 = bitcast i16* %1200 to <8 x i16>*
  store <8 x i16> %1202, <8 x i16>* %1206, align 2, !alias.scope !209, !noalias !206
  %1207 = getelementptr i16, i16* %1200, i64 8
  %1208 = bitcast i16* %1207 to <8 x i16>*
  store <8 x i16> %1205, <8 x i16>* %1208, align 2, !alias.scope !209, !noalias !206
  %1209 = or i64 %1186, 32
  %1210 = getelementptr i16, i16* %1158, i64 %1209
  %1211 = getelementptr i16, i16* %1160, i64 %1209
  %1212 = bitcast i16* %1210 to <8 x i16>*
  %1213 = load <8 x i16>, <8 x i16>* %1212, align 2, !alias.scope !206
  %1214 = getelementptr i16, i16* %1210, i64 8
  %1215 = bitcast i16* %1214 to <8 x i16>*
  %1216 = load <8 x i16>, <8 x i16>* %1215, align 2, !alias.scope !206
  %1217 = bitcast i16* %1211 to <8 x i16>*
  store <8 x i16> %1213, <8 x i16>* %1217, align 2, !alias.scope !209, !noalias !206
  %1218 = getelementptr i16, i16* %1211, i64 8
  %1219 = bitcast i16* %1218 to <8 x i16>*
  store <8 x i16> %1216, <8 x i16>* %1219, align 2, !alias.scope !209, !noalias !206
  %1220 = or i64 %1186, 48
  %1221 = getelementptr i16, i16* %1158, i64 %1220
  %1222 = getelementptr i16, i16* %1160, i64 %1220
  %1223 = bitcast i16* %1221 to <8 x i16>*
  %1224 = load <8 x i16>, <8 x i16>* %1223, align 2, !alias.scope !206
  %1225 = getelementptr i16, i16* %1221, i64 8
  %1226 = bitcast i16* %1225 to <8 x i16>*
  %1227 = load <8 x i16>, <8 x i16>* %1226, align 2, !alias.scope !206
  %1228 = bitcast i16* %1222 to <8 x i16>*
  store <8 x i16> %1224, <8 x i16>* %1228, align 2, !alias.scope !209, !noalias !206
  %1229 = getelementptr i16, i16* %1222, i64 8
  %1230 = bitcast i16* %1229 to <8 x i16>*
  store <8 x i16> %1227, <8 x i16>* %1230, align 2, !alias.scope !209, !noalias !206
  %1231 = add i64 %1186, 64
  %1232 = add i64 %1187, -4
  %1233 = icmp eq i64 %1232, 0
  br i1 %1233, label %1234, label %1185, !llvm.loop !211

1234:                                             ; preds = %1185, %1173
  %1235 = phi i64 [ 0, %1173 ], [ %1231, %1185 ]
  %1236 = icmp eq i64 %1181, 0
  br i1 %1236, label %1253, label %1237

1237:                                             ; preds = %1234, %1237
  %1238 = phi i64 [ %1250, %1237 ], [ %1235, %1234 ]
  %1239 = phi i64 [ %1251, %1237 ], [ %1181, %1234 ]
  %1240 = getelementptr i16, i16* %1158, i64 %1238
  %1241 = getelementptr i16, i16* %1160, i64 %1238
  %1242 = bitcast i16* %1240 to <8 x i16>*
  %1243 = load <8 x i16>, <8 x i16>* %1242, align 2, !alias.scope !206
  %1244 = getelementptr i16, i16* %1240, i64 8
  %1245 = bitcast i16* %1244 to <8 x i16>*
  %1246 = load <8 x i16>, <8 x i16>* %1245, align 2, !alias.scope !206
  %1247 = bitcast i16* %1241 to <8 x i16>*
  store <8 x i16> %1243, <8 x i16>* %1247, align 2, !alias.scope !209, !noalias !206
  %1248 = getelementptr i16, i16* %1241, i64 8
  %1249 = bitcast i16* %1248 to <8 x i16>*
  store <8 x i16> %1246, <8 x i16>* %1249, align 2, !alias.scope !209, !noalias !206
  %1250 = add i64 %1238, 16
  %1251 = add i64 %1239, -1
  %1252 = icmp eq i64 %1251, 0
  br i1 %1252, label %1253, label %1237, !llvm.loop !212

1253:                                             ; preds = %1237, %1234
  %1254 = icmp eq i64 %1159, %1174
  br i1 %1254, label %1451, label %1255

1255:                                             ; preds = %1253, %1166, %1164
  %1256 = phi i64 [ %1159, %1166 ], [ %1159, %1164 ], [ %1175, %1253 ]
  %1257 = phi i16* [ %1158, %1166 ], [ %1158, %1164 ], [ %1176, %1253 ]
  %1258 = phi i16* [ %1160, %1166 ], [ %1160, %1164 ], [ %1177, %1253 ]
  %1259 = add i64 %1256, -1
  %1260 = and i64 %1256, 7
  %1261 = icmp eq i64 %1260, 0
  br i1 %1261, label %1273, label %1262

1262:                                             ; preds = %1255, %1262
  %1263 = phi i64 [ %1268, %1262 ], [ %1256, %1255 ]
  %1264 = phi i16* [ %1270, %1262 ], [ %1257, %1255 ]
  %1265 = phi i16* [ %1269, %1262 ], [ %1258, %1255 ]
  %1266 = phi i64 [ %1271, %1262 ], [ %1260, %1255 ]
  %1267 = load i16, i16* %1264, align 2
  store i16 %1267, i16* %1265, align 2
  %1268 = add i64 %1263, -1
  %1269 = getelementptr inbounds i16, i16* %1265, i64 1
  %1270 = getelementptr inbounds i16, i16* %1264, i64 1
  %1271 = add i64 %1266, -1
  %1272 = icmp eq i64 %1271, 0
  br i1 %1272, label %1273, label %1262, !llvm.loop !213

1273:                                             ; preds = %1262, %1255
  %1274 = phi i64 [ %1256, %1255 ], [ %1268, %1262 ]
  %1275 = phi i16* [ %1257, %1255 ], [ %1270, %1262 ]
  %1276 = phi i16* [ %1258, %1255 ], [ %1269, %1262 ]
  %1277 = icmp ult i64 %1259, 7
  br i1 %1277, label %1451, label %1278

1278:                                             ; preds = %1273, %1278
  %1279 = phi i64 [ %1304, %1278 ], [ %1274, %1273 ]
  %1280 = phi i16* [ %1306, %1278 ], [ %1275, %1273 ]
  %1281 = phi i16* [ %1305, %1278 ], [ %1276, %1273 ]
  %1282 = load i16, i16* %1280, align 2
  store i16 %1282, i16* %1281, align 2
  %1283 = getelementptr inbounds i16, i16* %1281, i64 1
  %1284 = getelementptr inbounds i16, i16* %1280, i64 1
  %1285 = load i16, i16* %1284, align 2
  store i16 %1285, i16* %1283, align 2
  %1286 = getelementptr inbounds i16, i16* %1281, i64 2
  %1287 = getelementptr inbounds i16, i16* %1280, i64 2
  %1288 = load i16, i16* %1287, align 2
  store i16 %1288, i16* %1286, align 2
  %1289 = getelementptr inbounds i16, i16* %1281, i64 3
  %1290 = getelementptr inbounds i16, i16* %1280, i64 3
  %1291 = load i16, i16* %1290, align 2
  store i16 %1291, i16* %1289, align 2
  %1292 = getelementptr inbounds i16, i16* %1281, i64 4
  %1293 = getelementptr inbounds i16, i16* %1280, i64 4
  %1294 = load i16, i16* %1293, align 2
  store i16 %1294, i16* %1292, align 2
  %1295 = getelementptr inbounds i16, i16* %1281, i64 5
  %1296 = getelementptr inbounds i16, i16* %1280, i64 5
  %1297 = load i16, i16* %1296, align 2
  store i16 %1297, i16* %1295, align 2
  %1298 = getelementptr inbounds i16, i16* %1281, i64 6
  %1299 = getelementptr inbounds i16, i16* %1280, i64 6
  %1300 = load i16, i16* %1299, align 2
  store i16 %1300, i16* %1298, align 2
  %1301 = getelementptr inbounds i16, i16* %1281, i64 7
  %1302 = getelementptr inbounds i16, i16* %1280, i64 7
  %1303 = load i16, i16* %1302, align 2
  store i16 %1303, i16* %1301, align 2
  %1304 = add i64 %1279, -8
  %1305 = getelementptr inbounds i16, i16* %1281, i64 8
  %1306 = getelementptr inbounds i16, i16* %1280, i64 8
  %1307 = icmp eq i64 %1304, 0
  br i1 %1307, label %1451, label %1278, !llvm.loop !214

1308:                                             ; preds = %1162
  %1309 = icmp ult i16* %1158, %1160
  br i1 %1309, label %1310, label %1451

1310:                                             ; preds = %1308
  %1311 = getelementptr inbounds i16, i16* %1158, i64 %1159
  %1312 = getelementptr inbounds i16, i16* %1160, i64 %1159
  %1313 = icmp ult i64 %1159, 16
  br i1 %1313, label %1398, label %1314

1314:                                             ; preds = %1310
  %1315 = icmp ult i16* %1160, %1311
  %1316 = icmp ult i16* %1158, %1312
  %1317 = and i1 %1315, %1316
  br i1 %1317, label %1398, label %1318

1318:                                             ; preds = %1314
  %1319 = and i64 %1159, -16
  %1320 = sub i64 %1159, %1319
  %1321 = sub i64 0, %1319
  %1322 = getelementptr i16, i16* %1311, i64 %1321
  %1323 = sub i64 0, %1319
  %1324 = getelementptr i16, i16* %1312, i64 %1323
  %1325 = add i64 %1319, -16
  %1326 = lshr exact i64 %1325, 4
  %1327 = add nuw nsw i64 %1326, 1
  %1328 = and i64 %1327, 1
  %1329 = icmp eq i64 %1325, 0
  br i1 %1329, label %1376, label %1330

1330:                                             ; preds = %1318
  %1331 = sub nuw nsw i64 %1327, %1328
  %1332 = getelementptr i16, i16* %1311, i64 -1
  %1333 = getelementptr i16, i16* %1312, i64 -1
  %1334 = getelementptr i16, i16* %1311, i64 -1
  %1335 = getelementptr i16, i16* %1312, i64 -1
  br label %1336

1336:                                             ; preds = %1336, %1330
  %1337 = phi i64 [ 0, %1330 ], [ %1371, %1336 ]
  %1338 = phi i64 [ %1331, %1330 ], [ %1372, %1336 ]
  %1339 = sub i64 0, %1337
  %1340 = sub i64 0, %1337
  %1341 = getelementptr inbounds i16, i16* %1333, i64 %1340
  %1342 = getelementptr inbounds i16, i16* %1332, i64 %1339
  %1343 = getelementptr inbounds i16, i16* %1342, i64 -7
  %1344 = bitcast i16* %1343 to <8 x i16>*
  %1345 = load <8 x i16>, <8 x i16>* %1344, align 2, !alias.scope !215
  %1346 = getelementptr inbounds i16, i16* %1342, i64 -8
  %1347 = getelementptr inbounds i16, i16* %1346, i64 -7
  %1348 = bitcast i16* %1347 to <8 x i16>*
  %1349 = load <8 x i16>, <8 x i16>* %1348, align 2, !alias.scope !215
  %1350 = getelementptr inbounds i16, i16* %1341, i64 -7
  %1351 = bitcast i16* %1350 to <8 x i16>*
  store <8 x i16> %1345, <8 x i16>* %1351, align 2, !alias.scope !218, !noalias !215
  %1352 = getelementptr inbounds i16, i16* %1341, i64 -8
  %1353 = getelementptr inbounds i16, i16* %1352, i64 -7
  %1354 = bitcast i16* %1353 to <8 x i16>*
  store <8 x i16> %1349, <8 x i16>* %1354, align 2, !alias.scope !218, !noalias !215
  %1355 = sub nuw nsw i64 -16, %1337
  %1356 = sub nuw nsw i64 -16, %1337
  %1357 = getelementptr inbounds i16, i16* %1335, i64 %1356
  %1358 = getelementptr inbounds i16, i16* %1334, i64 %1355
  %1359 = getelementptr inbounds i16, i16* %1358, i64 -7
  %1360 = bitcast i16* %1359 to <8 x i16>*
  %1361 = load <8 x i16>, <8 x i16>* %1360, align 2, !alias.scope !215
  %1362 = getelementptr inbounds i16, i16* %1358, i64 -8
  %1363 = getelementptr inbounds i16, i16* %1362, i64 -7
  %1364 = bitcast i16* %1363 to <8 x i16>*
  %1365 = load <8 x i16>, <8 x i16>* %1364, align 2, !alias.scope !215
  %1366 = getelementptr inbounds i16, i16* %1357, i64 -7
  %1367 = bitcast i16* %1366 to <8 x i16>*
  store <8 x i16> %1361, <8 x i16>* %1367, align 2, !alias.scope !218, !noalias !215
  %1368 = getelementptr inbounds i16, i16* %1357, i64 -8
  %1369 = getelementptr inbounds i16, i16* %1368, i64 -7
  %1370 = bitcast i16* %1369 to <8 x i16>*
  store <8 x i16> %1365, <8 x i16>* %1370, align 2, !alias.scope !218, !noalias !215
  %1371 = add i64 %1337, 32
  %1372 = add i64 %1338, -2
  %1373 = icmp eq i64 %1372, 0
  br i1 %1373, label %1374, label %1336, !llvm.loop !220

1374:                                             ; preds = %1336
  %1375 = sub nuw nsw i64 -32, %1337
  br label %1376

1376:                                             ; preds = %1374, %1318
  %1377 = phi i64 [ 0, %1318 ], [ %1375, %1374 ]
  %1378 = icmp eq i64 %1328, 0
  br i1 %1378, label %1396, label %1379

1379:                                             ; preds = %1376
  %1380 = getelementptr i16, i16* %1311, i64 -1
  %1381 = getelementptr i16, i16* %1312, i64 -1
  %1382 = getelementptr inbounds i16, i16* %1381, i64 %1377
  %1383 = getelementptr inbounds i16, i16* %1380, i64 %1377
  %1384 = getelementptr inbounds i16, i16* %1383, i64 -7
  %1385 = bitcast i16* %1384 to <8 x i16>*
  %1386 = load <8 x i16>, <8 x i16>* %1385, align 2, !alias.scope !215
  %1387 = getelementptr inbounds i16, i16* %1383, i64 -8
  %1388 = getelementptr inbounds i16, i16* %1387, i64 -7
  %1389 = bitcast i16* %1388 to <8 x i16>*
  %1390 = load <8 x i16>, <8 x i16>* %1389, align 2, !alias.scope !215
  %1391 = getelementptr inbounds i16, i16* %1382, i64 -7
  %1392 = bitcast i16* %1391 to <8 x i16>*
  store <8 x i16> %1386, <8 x i16>* %1392, align 2, !alias.scope !218, !noalias !215
  %1393 = getelementptr inbounds i16, i16* %1382, i64 -8
  %1394 = getelementptr inbounds i16, i16* %1393, i64 -7
  %1395 = bitcast i16* %1394 to <8 x i16>*
  store <8 x i16> %1390, <8 x i16>* %1395, align 2, !alias.scope !218, !noalias !215
  br label %1396

1396:                                             ; preds = %1376, %1379
  %1397 = icmp eq i64 %1159, %1319
  br i1 %1397, label %1451, label %1398

1398:                                             ; preds = %1396, %1314, %1310
  %1399 = phi i64 [ %1159, %1314 ], [ %1159, %1310 ], [ %1320, %1396 ]
  %1400 = phi i16* [ %1311, %1314 ], [ %1311, %1310 ], [ %1322, %1396 ]
  %1401 = phi i16* [ %1312, %1314 ], [ %1312, %1310 ], [ %1324, %1396 ]
  %1402 = add i64 %1399, -1
  %1403 = and i64 %1399, 7
  %1404 = icmp eq i64 %1403, 0
  br i1 %1404, label %1416, label %1405

1405:                                             ; preds = %1398, %1405
  %1406 = phi i64 [ %1413, %1405 ], [ %1399, %1398 ]
  %1407 = phi i16* [ %1411, %1405 ], [ %1400, %1398 ]
  %1408 = phi i16* [ %1410, %1405 ], [ %1401, %1398 ]
  %1409 = phi i64 [ %1414, %1405 ], [ %1403, %1398 ]
  %1410 = getelementptr inbounds i16, i16* %1408, i64 -1
  %1411 = getelementptr inbounds i16, i16* %1407, i64 -1
  %1412 = load i16, i16* %1411, align 2
  store i16 %1412, i16* %1410, align 2
  %1413 = add i64 %1406, -1
  %1414 = add i64 %1409, -1
  %1415 = icmp eq i64 %1414, 0
  br i1 %1415, label %1416, label %1405, !llvm.loop !221

1416:                                             ; preds = %1405, %1398
  %1417 = phi i64 [ %1399, %1398 ], [ %1413, %1405 ]
  %1418 = phi i16* [ %1400, %1398 ], [ %1411, %1405 ]
  %1419 = phi i16* [ %1401, %1398 ], [ %1410, %1405 ]
  %1420 = icmp ult i64 %1402, 7
  br i1 %1420, label %1451, label %1421

1421:                                             ; preds = %1416, %1421
  %1422 = phi i64 [ %1449, %1421 ], [ %1417, %1416 ]
  %1423 = phi i16* [ %1447, %1421 ], [ %1418, %1416 ]
  %1424 = phi i16* [ %1446, %1421 ], [ %1419, %1416 ]
  %1425 = getelementptr inbounds i16, i16* %1424, i64 -1
  %1426 = getelementptr inbounds i16, i16* %1423, i64 -1
  %1427 = load i16, i16* %1426, align 2
  store i16 %1427, i16* %1425, align 2
  %1428 = getelementptr inbounds i16, i16* %1424, i64 -2
  %1429 = getelementptr inbounds i16, i16* %1423, i64 -2
  %1430 = load i16, i16* %1429, align 2
  store i16 %1430, i16* %1428, align 2
  %1431 = getelementptr inbounds i16, i16* %1424, i64 -3
  %1432 = getelementptr inbounds i16, i16* %1423, i64 -3
  %1433 = load i16, i16* %1432, align 2
  store i16 %1433, i16* %1431, align 2
  %1434 = getelementptr inbounds i16, i16* %1424, i64 -4
  %1435 = getelementptr inbounds i16, i16* %1423, i64 -4
  %1436 = load i16, i16* %1435, align 2
  store i16 %1436, i16* %1434, align 2
  %1437 = getelementptr inbounds i16, i16* %1424, i64 -5
  %1438 = getelementptr inbounds i16, i16* %1423, i64 -5
  %1439 = load i16, i16* %1438, align 2
  store i16 %1439, i16* %1437, align 2
  %1440 = getelementptr inbounds i16, i16* %1424, i64 -6
  %1441 = getelementptr inbounds i16, i16* %1423, i64 -6
  %1442 = load i16, i16* %1441, align 2
  store i16 %1442, i16* %1440, align 2
  %1443 = getelementptr inbounds i16, i16* %1424, i64 -7
  %1444 = getelementptr inbounds i16, i16* %1423, i64 -7
  %1445 = load i16, i16* %1444, align 2
  store i16 %1445, i16* %1443, align 2
  %1446 = getelementptr inbounds i16, i16* %1424, i64 -8
  %1447 = getelementptr inbounds i16, i16* %1423, i64 -8
  %1448 = load i16, i16* %1447, align 2
  store i16 %1448, i16* %1446, align 2
  %1449 = add i64 %1422, -8
  %1450 = icmp eq i64 %1449, 0
  br i1 %1450, label %1451, label %1421, !llvm.loop !222

1451:                                             ; preds = %624, %629, %454, %459, %1416, %1421, %1273, %1278, %604, %434, %1396, %1253, %1308, %1155, %489
  %1452 = phi i64 [ %23, %489 ], [ %1156, %1155 ], [ %1156, %1308 ], [ %1156, %1253 ], [ %1156, %1396 ], [ %23, %434 ], [ %23, %604 ], [ %1156, %1278 ], [ %1156, %1273 ], [ %1156, %1421 ], [ %1156, %1416 ], [ %23, %459 ], [ %23, %454 ], [ %23, %629 ], [ %23, %624 ]
  %1453 = phi i64 [ %4, %489 ], [ 0, %1155 ], [ %1159, %1308 ], [ %1159, %1253 ], [ %1159, %1396 ], [ %4, %434 ], [ %4, %604 ], [ %1159, %1278 ], [ %1159, %1273 ], [ %1159, %1421 ], [ %1159, %1416 ], [ %4, %459 ], [ %4, %454 ], [ %4, %629 ], [ %4, %624 ]
  %1454 = sub i64 %1453, %1452
  %1455 = add i64 %1454, %16
  %1456 = load i8, i8* %7, align 1
  %1457 = icmp slt i8 %1456, 0
  br i1 %1457, label %1458, label %1460

1458:                                             ; preds = %1451
  %1459 = getelementptr inbounds %"class.std::__1::basic_string.11", %"class.std::__1::basic_string.11"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1455, i64* %1459, align 8
  br label %1462

1460:                                             ; preds = %1451
  %1461 = trunc i64 %1455 to i8
  store i8 %1461, i8* %7, align 1
  br label %1462

1462:                                             ; preds = %1458, %1460
  %1463 = getelementptr inbounds i16, i16* %41, i64 %1455
  store i16 0, i16* %1463, align 2
  br label %1468

1464:                                             ; preds = %29
  %1465 = add i64 %16, %4
  %1466 = sub i64 %1465, %23
  %1467 = sub i64 %1466, %30
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.11"* %0, i64 %30, i64 %1467, i64 %16, i64 %1, i64 %23, i64 %4, i16* %3)
  br label %1468

1468:                                             ; preds = %1464, %1462
  ret %"class.std::__1::basic_string.11"* %0
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !9}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !9}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !9}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !11}
!31 = distinct !{!31, !9}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !9}
!38 = distinct !{!38, !11}
!39 = distinct !{!39, !11}
!40 = distinct !{!40, !9}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !9}
!47 = distinct !{!47, !11}
!48 = distinct !{!48, !9}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !9}
!55 = distinct !{!55, !11}
!56 = distinct !{!56, !11}
!57 = distinct !{!57, !9}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !9}
!64 = distinct !{!64, !11}
!65 = distinct !{!65, !11}
!66 = distinct !{!66, !9}
!67 = !{!68}
!68 = distinct !{!68, !69}
!69 = distinct !{!69, !"LVerDomain"}
!70 = !{!71}
!71 = distinct !{!71, !69}
!72 = distinct !{!72, !9}
!73 = distinct !{!73, !11}
!74 = distinct !{!74, !11}
!75 = distinct !{!75, !9}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !9}
!82 = distinct !{!82, !11}
!83 = distinct !{!83, !11}
!84 = distinct !{!84, !9}
!85 = !{!86}
!86 = distinct !{!86, !87}
!87 = distinct !{!87, !"LVerDomain"}
!88 = !{!89}
!89 = distinct !{!89, !87}
!90 = distinct !{!90, !9}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !11}
!93 = distinct !{!93, !9}
!94 = distinct !{!94, !9}
!95 = distinct !{!95, !11}
!96 = distinct !{!96, !97, !9}
!97 = !{!"llvm.loop.unroll.runtime.disable"}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !9}
!104 = distinct !{!104, !11}
!105 = distinct !{!105, !11}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !11}
!108 = distinct !{!108, !11}
!109 = distinct !{!109, !11}
!110 = distinct !{!110, !11}
!111 = distinct !{!111, !11}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = distinct !{!117, !9}
!118 = distinct !{!118, !11}
!119 = distinct !{!119, !11}
!120 = distinct !{!120, !9}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = distinct !{!126, !9}
!127 = distinct !{!127, !11}
!128 = distinct !{!128, !9}
!129 = !{!130}
!130 = distinct !{!130, !131}
!131 = distinct !{!131, !"LVerDomain"}
!132 = !{!133}
!133 = distinct !{!133, !131}
!134 = distinct !{!134, !9}
!135 = distinct !{!135, !11}
!136 = distinct !{!136, !11}
!137 = distinct !{!137, !9}
!138 = !{!139}
!139 = distinct !{!139, !140}
!140 = distinct !{!140, !"LVerDomain"}
!141 = !{!142}
!142 = distinct !{!142, !140}
!143 = distinct !{!143, !9}
!144 = distinct !{!144, !11}
!145 = distinct !{!145, !9}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !9}
!152 = distinct !{!152, !11}
!153 = distinct !{!153, !11}
!154 = distinct !{!154, !9}
!155 = !{!156}
!156 = distinct !{!156, !157}
!157 = distinct !{!157, !"LVerDomain"}
!158 = !{!159}
!159 = distinct !{!159, !157}
!160 = distinct !{!160, !9}
!161 = distinct !{!161, !11}
!162 = distinct !{!162, !9}
!163 = !{!164}
!164 = distinct !{!164, !165}
!165 = distinct !{!165, !"LVerDomain"}
!166 = !{!167}
!167 = distinct !{!167, !165}
!168 = distinct !{!168, !9}
!169 = distinct !{!169, !11}
!170 = distinct !{!170, !11}
!171 = distinct !{!171, !9}
!172 = !{!173}
!173 = distinct !{!173, !174}
!174 = distinct !{!174, !"LVerDomain"}
!175 = !{!176}
!176 = distinct !{!176, !174}
!177 = distinct !{!177, !9}
!178 = distinct !{!178, !11}
!179 = distinct !{!179, !9}
!180 = !{!181}
!181 = distinct !{!181, !182}
!182 = distinct !{!182, !"LVerDomain"}
!183 = !{!184}
!184 = distinct !{!184, !182}
!185 = distinct !{!185, !9}
!186 = distinct !{!186, !11}
!187 = distinct !{!187, !11}
!188 = distinct !{!188, !9}
!189 = !{!190}
!190 = distinct !{!190, !191}
!191 = distinct !{!191, !"LVerDomain"}
!192 = !{!193}
!193 = distinct !{!193, !191}
!194 = distinct !{!194, !9}
!195 = distinct !{!195, !11}
!196 = distinct !{!196, !11}
!197 = distinct !{!197, !9}
!198 = !{!199}
!199 = distinct !{!199, !200}
!200 = distinct !{!200, !"LVerDomain"}
!201 = !{!202}
!202 = distinct !{!202, !200}
!203 = distinct !{!203, !9}
!204 = distinct !{!204, !11}
!205 = distinct !{!205, !9}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !9}
!212 = distinct !{!212, !11}
!213 = distinct !{!213, !11}
!214 = distinct !{!214, !9}
!215 = !{!216}
!216 = distinct !{!216, !217}
!217 = distinct !{!217, !"LVerDomain"}
!218 = !{!219}
!219 = distinct !{!219, !217}
!220 = distinct !{!220, !9}
!221 = distinct !{!221, !11}
!222 = distinct !{!222, !9}
