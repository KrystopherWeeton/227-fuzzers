; ModuleID = '../../third_party/boringssl/src/ssl/d1_both.cc'
source_filename = "../../third_party/boringssl/src/ssl/d1_both.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.2", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.91", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.58", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.29", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, {}*, {}*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.15", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.bssl::Array", %"class.bssl::GrowableArray.82", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.84", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.8", i8* }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.56", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", i8, [32 x i8], %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.18", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.28 }
%union.anon.28 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.34", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.39, i16, [2 x i8], %"class.std::__1::unique_ptr.40", [2 x %"class.std::__1::unique_ptr.45"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array.56", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.57", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.63", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.70", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.50", %"class.bssl::internal::StackAllocated.55" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.55" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.57" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.66" }
%"class.bssl::Array.66" = type { %"class.std::__1::unique_ptr.67"*, i64 }
%"class.std::__1::unique_ptr.67" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.5", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.23", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.15", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.109", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.29", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.84", %"class.bssl::GrowableArray.114", %"class.bssl::Array.56", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.63", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.56", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.114" = type { i64, %"class.bssl::Array.115" }
%"class.bssl::Array.115" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.34", i16, %"class.std::__1::unique_ptr.18" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.82" = type { i64, %"class.bssl::Array.83" }
%"class.bssl::Array.83" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array.56" = type { i16*, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.40", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.50", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.96", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.58", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.29", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.101"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"class.bssl::internal::StackAllocated.118" = type { %struct.cbb_st }
%"struct.bssl::hm_header_st" = type { i8, i32, i16, i32, i32 }

@.str = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/d1_both.cc\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1
@_ZZN4bsslL17seal_next_messageEP6ssl_stPhPmmPKNS_21DTLS_OUTGOING_MESSAGEEE17kChangeCipherSpec = internal constant [1 x i8] c"\01", align 1

@_ZN4bssl11hm_fragmentD1Ev = hidden unnamed_addr alias void (%"struct.bssl::hm_fragment"*), void (%"struct.bssl::hm_fragment"*)* @_ZN4bssl11hm_fragmentD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl11hm_fragmentD2Ev(%"struct.bssl::hm_fragment"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  tail call void @OPENSSL_free(i8* %3) #5
  %4 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %0, i64 0, i32 4
  %5 = load i8*, i8** %4, align 8
  tail call void @OPENSSL_free(i8* %5) #5
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl20dtls1_open_handshakeEP6ssl_stPmPhNS_4SpanIhEE(%struct.ssl_st*, i64*, i8*, i8*, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.bssl::internal::StackAllocated.118", align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.bssl::Span", align 8
  %9 = alloca %"class.bssl::Span", align 8
  %10 = alloca %struct.cbs_st, align 8
  %11 = alloca %"struct.bssl::hm_header_st", align 4
  %12 = alloca %struct.cbs_st, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #5
  store i8 -86, i8* %7, align 1
  %13 = bitcast %"class.bssl::Span"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #5
  %14 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %8, i64 0, i32 0
  %15 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %8, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #5
  %16 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %9, i64 0, i32 0
  store i8* %3, i8** %16, align 8
  %17 = getelementptr inbounds %"class.bssl::Span", %"class.bssl::Span"* %9, i64 0, i32 1
  store i64 %4, i64* %17, align 8
  %18 = call i32 @_ZN4bssl16dtls_open_recordEP6ssl_stPhPNS_4SpanIhEEPmS2_S4_(%struct.ssl_st* %0, i8* nonnull %7, %"class.bssl::Span"* nonnull %8, i64* %1, i8* %2, %"class.bssl::Span"* nonnull byval(%"class.bssl::Span") align 8 %9) #5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %343

20:                                               ; preds = %5
  %21 = load i8, i8* %7, align 1
  switch i8 %21, label %56 [
    i8 23, label %22
    i8 20, label %31
    i8 22, label %57
  ]

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %24 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %23, align 8
  %25 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %24, i64 0, i32 32, i32 0, i32 0, i32 0
  %26 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %25, align 8
  %27 = getelementptr inbounds %"class.bssl::SSLAEADContext", %"class.bssl::SSLAEADContext"* %26, i64 0, i32 0
  %28 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %27, align 8
  %29 = icmp eq %struct.ssl_cipher_st* %28, null
  br i1 %29, label %30, label %343

30:                                               ; preds = %22
  call void @ERR_put_error(i32 16, i32 0, i32 225, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 309) #5
  store i8 10, i8* %2, align 1
  br label %343

31:                                               ; preds = %20
  %32 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %33 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %32, align 8
  %34 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %33, i64 0, i32 32, i32 0, i32 0, i32 0
  %35 = load %"class.bssl::SSLAEADContext"*, %"class.bssl::SSLAEADContext"** %34, align 8
  %36 = getelementptr inbounds %"class.bssl::SSLAEADContext", %"class.bssl::SSLAEADContext"* %35, i64 0, i32 0
  %37 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %36, align 8
  %38 = icmp eq %struct.ssl_cipher_st* %37, null
  br i1 %38, label %40, label %39

39:                                               ; preds = %31
  call void @ERR_put_error(i32 16, i32 0, i32 225, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 322) #5
  store i8 10, i8* %2, align 1
  br label %343

40:                                               ; preds = %31
  %41 = load i64, i64* %15, align 8
  %42 = icmp eq i64 %41, 1
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = load i8*, i8** %14, align 8
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 1
  br i1 %46, label %48, label %47

47:                                               ; preds = %43, %40
  call void @ERR_put_error(i32 16, i32 0, i32 103, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 328) #5
  store i8 47, i8* %2, align 1
  br label %343

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %50 = bitcast %"struct.bssl::DTLS1_STATE"** %49 to i8**
  %51 = load i8*, i8** %50, align 8
  %52 = load i8, i8* %51, align 8
  %53 = or i8 %52, 1
  store i8 %53, i8* %51, align 8
  %54 = load i8*, i8** %14, align 8
  %55 = load i64, i64* %15, align 8
  call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 0, i32 20, i8* %54, i64 %55) #5
  br label %343

56:                                               ; preds = %20
  call void @ERR_put_error(i32 16, i32 0, i32 225, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 344) #5
  store i8 10, i8* %2, align 1
  br label %343

57:                                               ; preds = %20
  %58 = bitcast %struct.cbs_st* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #5
  %59 = bitcast %struct.cbs_st* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 16, i1 false)
  %60 = load i8*, i8** %14, align 8
  %61 = load i64, i64* %15, align 8
  call void @CBS_init(%struct.cbs_st* nonnull %10, i8* %60, i64 %61) #5
  %62 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #5
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %341, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %11, i64 0, i32 0
  %66 = bitcast %struct.cbs_st* %12 to i8*
  %67 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %11, i64 0, i32 3
  %68 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %11, i64 0, i32 1
  %69 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %11, i64 0, i32 4
  %70 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %71 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %11, i64 0, i32 2
  %72 = bitcast %"class.bssl::internal::StackAllocated.118"* %6 to i8*
  %73 = getelementptr inbounds %"class.bssl::internal::StackAllocated.118", %"class.bssl::internal::StackAllocated.118"* %6, i64 0, i32 0
  %74 = bitcast %struct.cbs_st* %12 to i8*
  br label %75

75:                                               ; preds = %64, %338
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %65) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %65, i8 -86, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 16, i1 false)
  %76 = call zeroext i1 @_ZN4bssl20dtls1_parse_fragmentEP6cbs_stPNS_12hm_header_stES1_(%struct.cbs_st* nonnull %10, %"struct.bssl::hm_header_st"* nonnull %11, %struct.cbs_st* nonnull %12)
  br i1 %76, label %78, label %77

77:                                               ; preds = %75
  call void @ERR_put_error(i32 16, i32 0, i32 109, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 356) #5
  br label %336

78:                                               ; preds = %75
  %79 = load i32, i32* %67, align 4
  %80 = zext i32 %79 to i64
  %81 = load i32, i32* %68, align 4
  %82 = zext i32 %81 to i64
  %83 = icmp ugt i32 %79, %81
  br i1 %83, label %92, label %84

84:                                               ; preds = %78
  %85 = load i32, i32* %69, align 4
  %86 = zext i32 %85 to i64
  %87 = add nuw nsw i64 %86, %80
  %88 = icmp ugt i64 %87, %82
  br i1 %88, label %92, label %89

89:                                               ; preds = %84
  %90 = call i64 @_ZN4bssl29ssl_max_handshake_message_lenEPK6ssl_st(%struct.ssl_st* %0) #5
  %91 = icmp ult i64 %90, %82
  br i1 %91, label %92, label %93

92:                                               ; preds = %89, %84, %78
  call void @ERR_put_error(i32 16, i32 0, i32 150, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 367) #5
  br label %336

93:                                               ; preds = %89
  %94 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %70, align 8
  %95 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %94, i64 0, i32 4
  %96 = load i16, i16* %95, align 8
  %97 = icmp eq i16 %96, 1
  %98 = load i16, i16* %71, align 4
  %99 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %94, i64 0, i32 9
  %100 = load i16, i16* %99, align 2
  br i1 %97, label %101, label %104

101:                                              ; preds = %93
  %102 = icmp eq i16 %98, %100
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  call void @ERR_put_error(i32 16, i32 0, i32 225, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 374) #5
  br label %336

104:                                              ; preds = %93
  %105 = icmp ult i16 %98, %100
  br i1 %105, label %338, label %106

106:                                              ; preds = %101, %104
  %107 = phi i16 [ %100, %104 ], [ %98, %101 ]
  %108 = zext i16 %98 to i32
  %109 = zext i16 %107 to i32
  %110 = add nuw nsw i32 %109, 7
  %111 = icmp ult i32 %110, %108
  br i1 %111, label %338, label %112

112:                                              ; preds = %106
  %113 = sub nsw i32 %108, %109
  %114 = icmp sgt i32 %113, 6
  br i1 %114, label %336, label %115

115:                                              ; preds = %112
  %116 = urem i16 %98, 7
  %117 = zext i16 %116 to i64
  %118 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %94, i64 0, i32 13, i64 %117, i32 0, i32 0, i32 0
  %119 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %118, align 8
  %120 = icmp eq %"struct.bssl::hm_fragment"* %119, null
  br i1 %120, label %132, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %119, i64 0, i32 0
  %123 = load i8, i8* %122, align 8
  %124 = load i8, i8* %65, align 4
  %125 = icmp eq i8 %123, %124
  br i1 %125, label %126, label %131

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %119, i64 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* %68, align 4
  %130 = icmp eq i32 %128, %129
  br i1 %130, label %219, label %131

131:                                              ; preds = %126, %121
  call void @ERR_put_error(i32 16, i32 0, i32 152, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 280) #5
  br label %336

132:                                              ; preds = %115
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %72) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 -86, i64 32, i1 false) #5
  call void @CBB_zero(%struct.cbb_st* nonnull %73) #5
  %133 = call i8* @OPENSSL_malloc(i64 24) #5
  %134 = icmp eq i8* %133, null
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 196) #5
  br label %200

136:                                              ; preds = %132
  store i8 0, i8* %133, align 8
  %137 = getelementptr inbounds i8, i8* %133, i64 2
  call void @llvm.memset.p0i8.i64(i8* align 2 %137, i8 0, i64 22, i1 false) #5
  %138 = ptrtoint i8* %133 to i64
  %139 = load i8, i8* %65, align 4
  store i8 %139, i8* %133, align 8
  %140 = load i16, i16* %71, align 4
  %141 = bitcast i8* %137 to i16*
  store i16 %140, i16* %141, align 2
  %142 = load i32, i32* %68, align 4
  %143 = getelementptr inbounds i8, i8* %133, i64 4
  %144 = bitcast i8* %143 to i32*
  store i32 %142, i32* %144, align 4
  %145 = load i32, i32* %68, align 4
  %146 = add i32 %145, 12
  %147 = zext i32 %146 to i64
  %148 = call i8* @OPENSSL_malloc(i64 %147) #5
  %149 = getelementptr inbounds i8, i8* %133, i64 8
  %150 = bitcast i8* %149 to i8**
  store i8* %148, i8** %150, align 8
  %151 = icmp eq i8* %148, null
  br i1 %151, label %152, label %153

152:                                              ; preds = %136
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 166) #5
  br label %195

153:                                              ; preds = %136
  %154 = call i32 @CBB_init_fixed(%struct.cbb_st* nonnull %73, i8* nonnull %148, i64 12) #5
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %178, label %156

156:                                              ; preds = %153
  %157 = load i8, i8* %65, align 4
  %158 = call i32 @CBB_add_u8(%struct.cbb_st* nonnull %73, i8 zeroext %157) #5
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %178, label %160

160:                                              ; preds = %156
  %161 = load i32, i32* %68, align 4
  %162 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %73, i32 %161) #5
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %178, label %164

164:                                              ; preds = %160
  %165 = load i16, i16* %71, align 4
  %166 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %73, i16 zeroext %165) #5
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %178, label %168

168:                                              ; preds = %164
  %169 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %73, i32 0) #5
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %178, label %171

171:                                              ; preds = %168
  %172 = load i32, i32* %68, align 4
  %173 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %73, i32 %172) #5
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %178, label %175

175:                                              ; preds = %171
  %176 = call i32 @CBB_finish(%struct.cbb_st* nonnull %73, i8** null, i64* null) #5
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175, %171, %168, %164, %160, %156, %153
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 177) #5
  br label %195

179:                                              ; preds = %175
  %180 = load i32, i32* %68, align 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %200, label %182

182:                                              ; preds = %179
  %183 = icmp ugt i32 %180, -8
  br i1 %183, label %184, label %185

184:                                              ; preds = %182
  call void @ERR_put_error(i32 16, i32 0, i32 69, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 185) #5
  br label %195

185:                                              ; preds = %182
  %186 = add nuw i32 %180, 7
  %187 = lshr i32 %186, 3
  %188 = zext i32 %187 to i64
  %189 = call i8* @OPENSSL_malloc(i64 %188) #5
  %190 = getelementptr inbounds i8, i8* %133, i64 16
  %191 = bitcast i8* %190 to i8**
  store i8* %189, i8** %191, align 8
  %192 = icmp eq i8* %189, null
  br i1 %192, label %193, label %194

193:                                              ; preds = %185
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 191) #5
  br label %195

194:                                              ; preds = %185
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %189, i8 0, i64 %188, i1 false) #5
  br label %200

195:                                              ; preds = %193, %184, %178, %152
  %196 = load i8*, i8** %150, align 8
  call void @OPENSSL_free(i8* %196) #5
  %197 = getelementptr inbounds i8, i8* %133, i64 16
  %198 = bitcast i8* %197 to i8**
  %199 = load i8*, i8** %198, align 8
  call void @OPENSSL_free(i8* %199) #5
  call void @OPENSSL_free(i8* nonnull %133) #5
  br label %200

200:                                              ; preds = %195, %194, %179, %135
  %201 = phi i64 [ 0, %195 ], [ %138, %179 ], [ %138, %194 ], [ 0, %135 ]
  call void @CBB_cleanup(%struct.cbb_st* nonnull %73) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %72) #5
  %202 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %70, align 8
  %203 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %202, i64 0, i32 13, i64 %117
  %204 = getelementptr inbounds %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.101"* %203, i64 0, i32 0, i32 0, i32 0
  %205 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %204, align 8
  %206 = bitcast %"class.std::__1::unique_ptr.101"* %203 to i64*
  store i64 %201, i64* %206, align 8
  %207 = icmp eq %"struct.bssl::hm_fragment"* %205, null
  br i1 %207, label %214, label %208

208:                                              ; preds = %200
  %209 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %205, i64 0, i32 3
  %210 = load i8*, i8** %209, align 8
  call void @OPENSSL_free(i8* %210) #5
  %211 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %205, i64 0, i32 4
  %212 = load i8*, i8** %211, align 8
  call void @OPENSSL_free(i8* %212) #5
  %213 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %205, i64 0, i32 0
  call void @OPENSSL_free(i8* %213) #5
  br label %214

214:                                              ; preds = %208, %200
  %215 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %70, align 8
  %216 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %215, i64 0, i32 13, i64 %117, i32 0, i32 0, i32 0
  %217 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %216, align 8
  %218 = icmp eq %"struct.bssl::hm_fragment"* %217, null
  br i1 %218, label %336, label %219

219:                                              ; preds = %214, %126
  %220 = phi %"struct.bssl::hm_fragment"* [ %119, %126 ], [ %217, %214 ]
  %221 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %220, i64 0, i32 4
  %222 = load i8*, i8** %221, align 8
  %223 = icmp eq i8* %222, null
  br i1 %223, label %338, label %224

224:                                              ; preds = %219
  %225 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %220, i64 0, i32 3
  %226 = load i8*, i8** %225, align 8
  %227 = call i8* @CBS_data(%struct.cbs_st* nonnull %12) #5
  %228 = call i64 @CBS_len(%struct.cbs_st* nonnull %12) #5
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %233, label %230

230:                                              ; preds = %224
  %231 = getelementptr inbounds i8, i8* %226, i64 12
  %232 = getelementptr inbounds i8, i8* %231, i64 %80
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %227, i64 %228, i1 false) #5
  br label %233

233:                                              ; preds = %224, %230
  %234 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %220, i64 0, i32 2
  %235 = load i32, i32* %234, align 4
  %236 = zext i32 %235 to i64
  %237 = load i8*, i8** %221, align 8
  %238 = icmp eq i8* %237, null
  %239 = icmp ugt i64 %87, %236
  %240 = or i1 %239, %238
  %241 = icmp eq i32 %85, 0
  %242 = or i1 %241, %240
  br i1 %242, label %338, label %243

243:                                              ; preds = %233
  %244 = lshr i64 %80, 3
  %245 = lshr i64 %87, 3
  %246 = icmp eq i64 %244, %245
  %247 = and i32 %79, 7
  %248 = shl nsw i32 -1, %247
  br i1 %246, label %249, label %257

249:                                              ; preds = %243
  %250 = trunc i64 %87 to i32
  %251 = and i32 %250, 7
  %252 = shl nsw i32 -1, %251
  %253 = xor i32 %252, 255
  %254 = and i32 %253, %248
  %255 = trunc i32 %254 to i8
  %256 = getelementptr inbounds i8, i8* %237, i64 %244
  br label %307

257:                                              ; preds = %243
  %258 = trunc i32 %248 to i8
  %259 = getelementptr inbounds i8, i8* %237, i64 %244
  %260 = load i8, i8* %259, align 1
  %261 = or i8 %260, %258
  store i8 %261, i8* %259, align 1
  %262 = add nuw nsw i64 %244, 1
  %263 = icmp ult i64 %262, %245
  br i1 %263, label %264, label %282

264:                                              ; preds = %257
  %265 = xor i64 %244, 3
  %266 = add nuw nsw i64 %245, %265
  %267 = add nsw i64 %245, -2
  %268 = sub nsw i64 %267, %244
  %269 = and i64 %266, 3
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %279, label %271

271:                                              ; preds = %264, %271
  %272 = phi i64 [ %276, %271 ], [ %262, %264 ]
  %273 = phi i64 [ %277, %271 ], [ %269, %264 ]
  %274 = load i8*, i8** %221, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 %272
  store i8 -1, i8* %275, align 1
  %276 = add i64 %272, 1
  %277 = add i64 %273, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %271, !llvm.loop !2

279:                                              ; preds = %271, %264
  %280 = phi i64 [ %262, %264 ], [ %276, %271 ]
  %281 = icmp ult i64 %268, 3
  br i1 %281, label %282, label %285

282:                                              ; preds = %279, %285, %257
  %283 = and i64 %87, 7
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %312, label %300

285:                                              ; preds = %279, %285
  %286 = phi i64 [ %298, %285 ], [ %280, %279 ]
  %287 = load i8*, i8** %221, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 %286
  store i8 -1, i8* %288, align 1
  %289 = add i64 %286, 1
  %290 = load i8*, i8** %221, align 8
  %291 = getelementptr inbounds i8, i8* %290, i64 %289
  store i8 -1, i8* %291, align 1
  %292 = add i64 %286, 2
  %293 = load i8*, i8** %221, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 %292
  store i8 -1, i8* %294, align 1
  %295 = add i64 %286, 3
  %296 = load i8*, i8** %221, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 %295
  store i8 -1, i8* %297, align 1
  %298 = add i64 %286, 4
  %299 = icmp eq i64 %298, %245
  br i1 %299, label %282, label %285

300:                                              ; preds = %282
  %301 = trunc i64 %283 to i32
  %302 = shl nsw i32 -1, %301
  %303 = trunc i32 %302 to i8
  %304 = xor i8 %303, -1
  %305 = load i8*, i8** %221, align 8
  %306 = getelementptr inbounds i8, i8* %305, i64 %245
  br label %307

307:                                              ; preds = %249, %300
  %308 = phi i8* [ %306, %300 ], [ %256, %249 ]
  %309 = phi i8 [ %304, %300 ], [ %255, %249 ]
  %310 = load i8, i8* %308, align 1
  %311 = or i8 %310, %309
  store i8 %311, i8* %308, align 1
  br label %312

312:                                              ; preds = %307, %282
  %313 = lshr i64 %236, 3
  %314 = icmp eq i64 %313, 0
  %315 = load i8*, i8** %221, align 8
  br i1 %314, label %324, label %318

316:                                              ; preds = %318
  %317 = icmp eq i64 %323, %313
  br i1 %317, label %324, label %318

318:                                              ; preds = %312, %316
  %319 = phi i64 [ %323, %316 ], [ 0, %312 ]
  %320 = getelementptr inbounds i8, i8* %315, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = icmp eq i8 %321, -1
  %323 = add nuw nsw i64 %319, 1
  br i1 %322, label %316, label %338

324:                                              ; preds = %316, %312
  %325 = and i64 %236, 7
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %335, label %327

327:                                              ; preds = %324
  %328 = getelementptr inbounds i8, i8* %315, i64 %313
  %329 = load i8, i8* %328, align 1
  %330 = trunc i64 %325 to i32
  %331 = shl nsw i32 -1, %330
  %332 = trunc i32 %331 to i8
  %333 = xor i8 %332, -1
  %334 = icmp eq i8 %329, %333
  br i1 %334, label %335, label %338

335:                                              ; preds = %327, %324
  call void @OPENSSL_free(i8* %315) #5
  store i8* null, i8** %221, align 8
  br label %338

336:                                              ; preds = %214, %112, %77, %92, %103, %131
  %337 = phi i8 [ 50, %77 ], [ 47, %92 ], [ 10, %103 ], [ 47, %131 ], [ 80, %112 ], [ 80, %214 ]
  store i8 %337, i8* %2, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #5
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %65) #5
  br label %341

338:                                              ; preds = %318, %335, %327, %233, %106, %104, %219
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #5
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %65) #5
  %339 = call i64 @CBS_len(%struct.cbs_st* nonnull %10) #5
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %75

341:                                              ; preds = %338, %57, %336
  %342 = phi i32 [ 4, %336 ], [ 0, %57 ], [ 0, %338 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #5
  br label %343

343:                                              ; preds = %22, %5, %341, %56, %48, %47, %39, %30
  %344 = phi i32 [ 4, %56 ], [ %342, %341 ], [ 4, %47 ], [ 0, %48 ], [ 4, %39 ], [ 4, %30 ], [ %18, %5 ], [ 1, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #5
  ret i32 %344
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN4bssl16dtls_open_recordEP6ssl_stPhPNS_4SpanIhEEPmS2_S4_(%struct.ssl_st*, i8*, %"class.bssl::Span"*, i64*, i8*, %"class.bssl::Span"* byval(%"class.bssl::Span") align 8) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st*, i32, i32, i8*, i64) local_unnamed_addr #1

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #1

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl20dtls1_parse_fragmentEP6cbs_stPNS_12hm_header_stES1_(%struct.cbs_st*, %"struct.bssl::hm_header_st"*, %struct.cbs_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %1, i64 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 20, i1 false) #5
  %5 = tail call i32 @CBS_get_u8(%struct.cbs_st* %0, i8* %4) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %1, i64 0, i32 1
  %9 = tail call i32 @CBS_get_u24(%struct.cbs_st* %0, i32* %8) #5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %28, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %1, i64 0, i32 2
  %13 = tail call i32 @CBS_get_u16(%struct.cbs_st* %0, i16* %12) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %1, i64 0, i32 3
  %17 = tail call i32 @CBS_get_u24(%struct.cbs_st* %0, i32* %16) #5
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %1, i64 0, i32 4
  %21 = tail call i32 @CBS_get_u24(%struct.cbs_st* %0, i32* %20) #5
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = load i32, i32* %20, align 4
  %25 = zext i32 %24 to i64
  %26 = tail call i32 @CBS_get_bytes(%struct.cbs_st* %0, %struct.cbs_st* %2, i64 %25) #5
  %27 = icmp ne i32 %26, 0
  ret i1 %27

28:                                               ; preds = %3, %7, %11, %15, %19
  ret i1 false
}

declare i64 @_ZN4bssl29ssl_max_handshake_message_lenEPK6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl17dtls1_get_messageEPK6ssl_stPNS_10SSLMessageE(%struct.ssl_st*, %"struct.bssl::SSLMessage"*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %4 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %3, align 8
  %5 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %4, i64 0, i32 9
  %6 = load i16, i16* %5, align 2
  %7 = urem i16 %6, 7
  %8 = zext i16 %7 to i64
  %9 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %4, i64 0, i32 13, i64 %8, i32 0, i32 0, i32 0
  %10 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %9, align 8
  %11 = icmp eq %"struct.bssl::hm_fragment"* %10, null
  br i1 %11, label %48, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %10, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %48

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %10, i64 0, i32 0
  %18 = load i8, i8* %17, align 8
  %19 = getelementptr inbounds %"struct.bssl::SSLMessage", %"struct.bssl::SSLMessage"* %1, i64 0, i32 1
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %"struct.bssl::SSLMessage", %"struct.bssl::SSLMessage"* %1, i64 0, i32 2
  %21 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %10, i64 0, i32 3
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 12
  %24 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %10, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  tail call void @CBS_init(%struct.cbs_st* %20, i8* %23, i64 %26) #5
  %27 = getelementptr inbounds %"struct.bssl::SSLMessage", %"struct.bssl::SSLMessage"* %1, i64 0, i32 3
  %28 = load i8*, i8** %21, align 8
  %29 = load i32, i32* %24, align 4
  %30 = add i32 %29, 12
  %31 = zext i32 %30 to i64
  tail call void @CBS_init(%struct.cbs_st* %27, i8* %28, i64 %31) #5
  %32 = getelementptr inbounds %"struct.bssl::SSLMessage", %"struct.bssl::SSLMessage"* %1, i64 0, i32 0
  store i8 0, i8* %32, align 8
  %33 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %34 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %33, align 8
  %35 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %34, i64 0, i32 23
  %36 = load i16, i16* %35, align 1
  %37 = and i16 %36, 16
  %38 = icmp eq i16 %37, 0
  br i1 %38, label %39, label %48

39:                                               ; preds = %16
  %40 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %27, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"struct.bssl::SSLMessage", %"struct.bssl::SSLMessage"* %1, i64 0, i32 3, i32 1
  %43 = load i64, i64* %42, align 8
  tail call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 0, i32 22, i8* %41, i64 %43) #5
  %44 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %33, align 8
  %45 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %44, i64 0, i32 23
  %46 = load i16, i16* %45, align 1
  %47 = or i16 %46, 16
  store i16 %47, i16* %45, align 1
  br label %48

48:                                               ; preds = %2, %39, %16, %12
  %49 = phi i1 [ false, %12 ], [ true, %16 ], [ true, %39 ], [ false, %2 ]
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl18dtls1_next_messageEP6ssl_st(%struct.ssl_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 9
  %5 = load i16, i16* %4, align 2
  %6 = urem i16 %5, 7
  %7 = zext i16 %6 to i64
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 %7, i32 0, i32 0, i32 0
  %9 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %8, align 8
  store %"struct.bssl::hm_fragment"* null, %"struct.bssl::hm_fragment"** %8, align 8
  %10 = icmp eq %"struct.bssl::hm_fragment"* %9, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %9, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  tail call void @OPENSSL_free(i8* %13) #5
  %14 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %9, i64 0, i32 4
  %15 = load i8*, i8** %14, align 8
  tail call void @OPENSSL_free(i8* %15) #5
  %16 = getelementptr inbounds %"struct.bssl::hm_fragment", %"struct.bssl::hm_fragment"* %9, i64 0, i32 0
  tail call void @OPENSSL_free(i8* %16) #5
  br label %17

17:                                               ; preds = %1, %11
  %18 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %19 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %18, i64 0, i32 9
  %20 = load i16, i16* %19, align 2
  %21 = add i16 %20, 1
  store i16 %21, i16* %19, align 2
  %22 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %23 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %22, align 8
  %24 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %23, i64 0, i32 23
  %25 = load i16, i16* %24, align 1
  %26 = and i16 %25, -17
  store i16 %26, i16* %24, align 1
  %27 = bitcast %"struct.bssl::DTLS1_STATE"** %2 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = load i8, i8* %28, align 8
  %30 = and i8 %29, 2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %17
  %33 = or i8 %29, 4
  store i8 %33, i8* %28, align 8
  br label %34

34:                                               ; preds = %17, %32
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4bssl35dtls_has_unprocessed_handshake_dataEPK6ssl_st(%struct.ssl_st* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 9
  %5 = load i16, i16* %4, align 2
  %6 = urem i16 %5, 7
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %8 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %8, i64 0, i32 23
  %10 = load i16, i16* %9, align 1
  %11 = and i16 %10, 16
  %12 = icmp ne i16 %11, 0
  %13 = icmp eq i16 %6, 0
  %14 = and i1 %13, %12
  br i1 %14, label %24, label %15

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 0, i32 0, i32 0, i32 0
  %17 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %16, align 8
  %18 = icmp eq %"struct.bssl::hm_fragment"* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = icmp eq i16 %6, 1
  %21 = and i1 %20, %12
  br i1 %21, label %31, label %24

22:                                               ; preds = %63, %59, %52, %45, %38, %31, %24, %15
  %23 = phi i1 [ true, %15 ], [ true, %24 ], [ true, %31 ], [ true, %38 ], [ true, %45 ], [ true, %52 ], [ true, %59 ], [ false, %63 ]
  ret i1 %23

24:                                               ; preds = %1, %19
  %25 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 1, i32 0, i32 0, i32 0
  %26 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %25, align 8
  %27 = icmp eq %"struct.bssl::hm_fragment"* %26, null
  br i1 %27, label %28, label %22

28:                                               ; preds = %24
  %29 = icmp eq i16 %6, 2
  %30 = and i1 %29, %12
  br i1 %30, label %38, label %31

31:                                               ; preds = %19, %28
  %32 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 2, i32 0, i32 0, i32 0
  %33 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %32, align 8
  %34 = icmp eq %"struct.bssl::hm_fragment"* %33, null
  br i1 %34, label %35, label %22

35:                                               ; preds = %31
  %36 = icmp eq i16 %6, 3
  %37 = and i1 %36, %12
  br i1 %37, label %45, label %38

38:                                               ; preds = %28, %35
  %39 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 3, i32 0, i32 0, i32 0
  %40 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %39, align 8
  %41 = icmp eq %"struct.bssl::hm_fragment"* %40, null
  br i1 %41, label %42, label %22

42:                                               ; preds = %38
  %43 = icmp eq i16 %6, 4
  %44 = and i1 %43, %12
  br i1 %44, label %52, label %45

45:                                               ; preds = %35, %42
  %46 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 4, i32 0, i32 0, i32 0
  %47 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %46, align 8
  %48 = icmp eq %"struct.bssl::hm_fragment"* %47, null
  br i1 %48, label %49, label %22

49:                                               ; preds = %45
  %50 = icmp eq i16 %6, 5
  %51 = and i1 %50, %12
  br i1 %51, label %59, label %52

52:                                               ; preds = %42, %49
  %53 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 5, i32 0, i32 0, i32 0
  %54 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %53, align 8
  %55 = icmp eq %"struct.bssl::hm_fragment"* %54, null
  br i1 %55, label %56, label %22

56:                                               ; preds = %52
  %57 = icmp eq i16 %6, 6
  %58 = and i1 %57, %12
  br i1 %58, label %63, label %59

59:                                               ; preds = %49, %56
  %60 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 13, i64 6, i32 0, i32 0, i32 0
  %61 = load %"struct.bssl::hm_fragment"*, %"struct.bssl::hm_fragment"** %60, align 8
  %62 = icmp eq %"struct.bssl::hm_fragment"* %61, null
  br i1 %62, label %63, label %22

63:                                               ; preds = %59, %56
  br label %22
}

declare i32 @CBS_get_u8(%struct.cbs_st*, i8*) local_unnamed_addr #1

declare i32 @CBS_get_u24(%struct.cbs_st*, i32*) local_unnamed_addr #1

declare i32 @CBS_get_u16(%struct.cbs_st*, i16*) local_unnamed_addr #1

declare i32 @CBS_get_bytes(%struct.cbs_st*, %struct.cbs_st*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl29dtls1_open_change_cipher_specEP6ssl_stPmPhNS_4SpanIhEE(%struct.ssl_st*, i64*, i8*, i8*, i64) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %7 = bitcast %"struct.bssl::DTLS1_STATE"** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = load i8, i8* %8, align 8
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %20

12:                                               ; preds = %5
  %13 = tail call i32 @_ZN4bssl20dtls1_open_handshakeEP6ssl_stPmPhNS_4SpanIhEE(%struct.ssl_st* %0, i64* %1, i8* %2, i8* %3, i64 %4)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %12
  %16 = load i8*, i8** %7, align 8
  %17 = load i8, i8* %16, align 8
  %18 = and i8 %17, 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %5, %15
  %21 = phi i8* [ %16, %15 ], [ %8, %5 ]
  %22 = phi i8 [ %17, %15 ], [ %9, %5 ]
  %23 = and i8 %22, -2
  store i8 %23, i8* %21, align 8
  br label %24

24:                                               ; preds = %15, %12, %20
  %25 = phi i32 [ 0, %20 ], [ %13, %12 ], [ 1, %15 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl21DTLS_OUTGOING_MESSAGE5ClearEv(%"struct.bssl::DTLS_OUTGOING_MESSAGE"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.bssl::DTLS_OUTGOING_MESSAGE", %"struct.bssl::DTLS_OUTGOING_MESSAGE"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  tail call void @OPENSSL_free(i8* %3) #5
  store i8* null, i8** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4bssl28dtls_clear_outgoing_messagesEP6ssl_st(%struct.ssl_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 15
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %22

7:                                                ; preds = %22
  %8 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %28, i64 0, i32 15
  br label %9

9:                                                ; preds = %7, %1
  %10 = phi i8* [ %4, %1 ], [ %8, %7 ]
  store i8 0, i8* %10, align 8
  %11 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %12 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %11, i64 0, i32 16
  store i8 0, i8* %12, align 1
  %13 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %14 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %13, i64 0, i32 18
  store i32 0, i32* %14, align 4
  %15 = bitcast %"struct.bssl::DTLS1_STATE"** %2 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 8
  %18 = and i8 %17, -3
  store i8 %18, i8* %16, align 8
  %19 = load i8*, i8** %15, align 8
  %20 = load i8, i8* %19, align 8
  %21 = and i8 %20, -5
  store i8 %21, i8* %19, align 8
  ret void

22:                                               ; preds = %1, %22
  %23 = phi %"struct.bssl::DTLS1_STATE"* [ %28, %22 ], [ %3, %1 ]
  %24 = phi i64 [ %27, %22 ], [ 0, %1 ]
  %25 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %23, i64 0, i32 14, i64 %24, i32 0
  %26 = load i8*, i8** %25, align 8
  tail call void @OPENSSL_free(i8* %26) #5
  store i8* null, i8** %25, align 8
  %27 = add nuw nsw i64 %24, 1
  %28 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %29 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %28, i64 0, i32 15
  %30 = load i8, i8* %29, align 8
  %31 = zext i8 %30 to i64
  %32 = icmp ult i64 %27, %31
  br i1 %32, label %22, label %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl18dtls1_init_messageEP6ssl_stP6cbb_stS3_h(%struct.ssl_st* nocapture readonly, %struct.cbb_st*, %struct.cbb_st*, i8 zeroext) local_unnamed_addr #0 {
  %5 = tail call i32 @CBB_init(%struct.cbb_st* %1, i64 64) #5
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %26, label %7

7:                                                ; preds = %4
  %8 = tail call i32 @CBB_add_u8(%struct.cbb_st* %1, i8 zeroext %3) #5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %7
  %11 = tail call i32 @CBB_add_u24(%struct.cbb_st* %1, i32 0) #5
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %15 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %14, align 8
  %16 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %15, i64 0, i32 8
  %17 = load i16, i16* %16, align 8
  %18 = tail call i32 @CBB_add_u16(%struct.cbb_st* %1, i16 zeroext %17) #5
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %13
  %21 = tail call i32 @CBB_add_u24(%struct.cbb_st* %1, i32 0) #5
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @CBB_add_u24_length_prefixed(%struct.cbb_st* %1, %struct.cbb_st* %2) #5
  %25 = icmp ne i32 %24, 0
  ret i1 %25

26:                                               ; preds = %4, %7, %10, %13, %20
  ret i1 false
}

declare i32 @CBB_init(%struct.cbb_st*, i64) local_unnamed_addr #1

declare i32 @CBB_add_u8(%struct.cbb_st*, i8 zeroext) local_unnamed_addr #1

declare i32 @CBB_add_u24(%struct.cbb_st*, i32) local_unnamed_addr #1

declare i32 @CBB_add_u16(%struct.cbb_st*, i16 zeroext) local_unnamed_addr #1

declare i32 @CBB_add_u24_length_prefixed(%struct.cbb_st*, %struct.cbb_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl20dtls1_finish_messageEP6ssl_stP6cbb_stPNS_5ArrayIhEE(%struct.ssl_st* nocapture readnone, %struct.cbb_st*, %"class.bssl::Array"*) local_unnamed_addr #0 {
  %4 = tail call zeroext i1 @_ZN4bssl14CBBFinishArrayEP6cbb_stPNS_5ArrayIhEE(%struct.cbb_st* %1, %"class.bssl::Array"* %2) #5
  br i1 %4, label %5, label %9

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 12
  br i1 %8, label %9, label %10

9:                                                ; preds = %5, %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 523) #5
  br label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = getelementptr inbounds i8, i8* %12, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 3, i1 false) #5
  br label %15

15:                                               ; preds = %10, %9
  %16 = phi i1 [ false, %9 ], [ true, %10 ]
  ret i1 %16
}

declare zeroext i1 @_ZN4bssl14CBBFinishArrayEP6cbb_stPNS_5ArrayIhEE(%struct.cbb_st*, %"class.bssl::Array"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl17dtls1_add_messageEP6ssl_stNS_5ArrayIhEE(%struct.ssl_st*, %"class.bssl::Array"* nocapture) local_unnamed_addr #0 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to %"class.bssl::Array"*
  tail call void @OPENSSL_free(i8* null) #5
  %5 = bitcast %"class.bssl::Array"* %1 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 8
  store <2 x i64> %6, <2 x i64>* %3, align 16
  %7 = bitcast %"class.bssl::Array"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #5
  %8 = call fastcc zeroext i1 @_ZN4bsslL12add_outgoingEP6ssl_stbNS_5ArrayIhEE(%struct.ssl_st* %0, i1 zeroext false, %"class.bssl::Array"* nonnull %4)
  %9 = bitcast <2 x i64>* %3 to i8**
  %10 = load i8*, i8** %9, align 16
  tail call void @OPENSSL_free(i8* %10) #5
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4bsslL12add_outgoingEP6ssl_stbNS_5ArrayIhEE(%struct.ssl_st*, i1 zeroext, %"class.bssl::Array"* nocapture) unnamed_addr #0 {
  %4 = zext i1 %1 to i8
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %6 = bitcast %"struct.bssl::DTLS1_STATE"** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = load i8, i8* %7, align 8
  %9 = and i8 %8, 2
  %10 = icmp eq i8 %9, 0
  %11 = bitcast i8* %7 to %"struct.bssl::DTLS1_STATE"*
  br i1 %10, label %43, label %12

12:                                               ; preds = %3
  tail call void @_ZN4bssl16dtls1_stop_timerEP6ssl_st(%struct.ssl_st* %0) #5
  %13 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %14 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %13, i64 0, i32 15
  %15 = load i8, i8* %14, align 8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %12, %17
  %18 = phi %"struct.bssl::DTLS1_STATE"* [ %23, %17 ], [ %13, %12 ]
  %19 = phi i64 [ %22, %17 ], [ 0, %12 ]
  %20 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %18, i64 0, i32 14, i64 %19, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void @OPENSSL_free(i8* %21) #5
  store i8* null, i8** %20, align 8
  %22 = add nuw nsw i64 %19, 1
  %23 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %24 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %23, i64 0, i32 15
  %25 = load i8, i8* %24, align 8
  %26 = zext i8 %25 to i64
  %27 = icmp ult i64 %22, %26
  br i1 %27, label %17, label %28

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %23, i64 0, i32 15
  br label %30

30:                                               ; preds = %28, %12
  %31 = phi i8* [ %14, %12 ], [ %29, %28 ]
  store i8 0, i8* %31, align 8
  %32 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %33 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %32, i64 0, i32 16
  store i8 0, i8* %33, align 1
  %34 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %35 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %34, i64 0, i32 18
  store i32 0, i32* %35, align 4
  %36 = load i8*, i8** %6, align 8
  %37 = load i8, i8* %36, align 8
  %38 = and i8 %37, -3
  store i8 %38, i8* %36, align 8
  %39 = load i8*, i8** %6, align 8
  %40 = load i8, i8* %39, align 8
  %41 = and i8 %40, -5
  store i8 %41, i8* %39, align 8
  %42 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  br label %43

43:                                               ; preds = %3, %30
  %44 = phi %"struct.bssl::DTLS1_STATE"* [ %11, %3 ], [ %42, %30 ]
  %45 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %44, i64 0, i32 15
  %46 = load i8, i8* %45, align 8
  %47 = icmp ugt i8 %46, 6
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ugt i64 %50, 4294967295
  br i1 %51, label %52, label %53

52:                                               ; preds = %48, %43
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 564) #5
  br label %96

53:                                               ; preds = %48
  br i1 %1, label %74, label %54

54:                                               ; preds = %53
  %55 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %56 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %55, align 8
  %57 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %56, i64 0, i32 34, i32 0, i32 0, i32 0
  %58 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %57, align 8
  %59 = icmp eq %"struct.bssl::SSL_HANDSHAKE"* %58, null
  br i1 %59, label %68, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %58, i64 0, i32 20
  %62 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = tail call zeroext i1 @_ZN4bssl13SSLTranscript6UpdateENS_4SpanIKhEE(%"class.bssl::SSLTranscript"* %61, i8* %63, i64 %50) #5
  br i1 %64, label %65, label %67

65:                                               ; preds = %60
  %66 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  br label %68

67:                                               ; preds = %60
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 573) #5
  br label %96

68:                                               ; preds = %65, %54
  %69 = phi %"struct.bssl::DTLS1_STATE"* [ %66, %65 ], [ %44, %54 ]
  %70 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %69, i64 0, i32 8
  %71 = load i16, i16* %70, align 8
  %72 = add i16 %71, 1
  store i16 %72, i16* %70, align 8
  %73 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  br label %74

74:                                               ; preds = %68, %53
  %75 = phi %"struct.bssl::DTLS1_STATE"* [ %73, %68 ], [ %44, %53 ]
  %76 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %75, i64 0, i32 15
  %77 = load i8, i8* %76, align 8
  %78 = zext i8 %77 to i64
  %79 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %75, i64 0, i32 14, i64 %78, i32 0
  %80 = bitcast %"class.bssl::Array"* %2 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast i8** %79 to i64*
  store i64 %81, i64* %82, align 8
  %83 = load i64, i64* %49, align 8
  %84 = bitcast %"class.bssl::Array"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 16, i1 false) #5
  %85 = trunc i64 %83 to i32
  %86 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %75, i64 0, i32 14, i64 %78, i32 1
  store i32 %85, i32* %86, align 8
  %87 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %88 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %87, i64 0, i32 5
  %89 = load i16, i16* %88, align 2
  %90 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %75, i64 0, i32 14, i64 %78, i32 2
  store i16 %89, i16* %90, align 4
  %91 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %75, i64 0, i32 14, i64 %78, i32 3
  store i8 %4, i8* %91, align 2
  %92 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %5, align 8
  %93 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %92, i64 0, i32 15
  %94 = load i8, i8* %93, align 8
  %95 = add i8 %94, 1
  store i8 %95, i8* %93, align 8
  br label %96

96:                                               ; preds = %74, %67, %52
  %97 = phi i1 [ false, %52 ], [ true, %74 ], [ false, %67 ]
  ret i1 %97
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl28dtls1_add_change_cipher_specEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = alloca %"class.bssl::Array", align 8
  %3 = bitcast %"class.bssl::Array"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false) #5
  %4 = call fastcc zeroext i1 @_ZN4bsslL12add_outgoingEP6ssl_stbNS_5ArrayIhEE(%struct.ssl_st* %0, i1 zeroext true, %"class.bssl::Array"* nonnull %2)
  %5 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  tail call void @OPENSSL_free(i8* %6) #5
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl18dtls1_flush_flightEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = bitcast %"struct.bssl::DTLS1_STATE"** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 8
  %6 = or i8 %5, 2
  store i8 %6, i8* %4, align 8
  tail call void @_ZN4bssl17dtls1_start_timerEP6ssl_st(%struct.ssl_st* %0) #5
  %7 = tail call fastcc i32 @_ZN4bsslL11send_flightEP6ssl_st(%struct.ssl_st* %0)
  ret i32 %7
}

declare void @_ZN4bssl17dtls1_start_timerEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN4bsslL11send_flightEP6ssl_st(%struct.ssl_st*) unnamed_addr #0 {
  %2 = alloca %struct.cbs_st, align 8
  %3 = alloca %struct.cbs_st, align 8
  %4 = alloca %"struct.bssl::hm_header_st", align 4
  %5 = alloca %"class.bssl::internal::StackAllocated.118", align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %9 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %8, align 8
  %10 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %9, i64 0, i32 13
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  tail call void @ERR_put_error(i32 16, i32 0, i32 194, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 770) #5
  br label %260

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %16 = load %struct.bio_st*, %struct.bio_st** %15, align 8
  %17 = icmp eq %struct.bio_st* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  tail call void @ERR_put_error(i32 16, i32 0, i32 119, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 775) #5
  br label %260

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %21 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %22 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %21, i64 0, i32 19
  %23 = load i32, i32* %22, align 8
  %24 = icmp ult i32 %23, 228
  br i1 %24, label %25, label %48

25:                                               ; preds = %19
  %26 = tail call i32 @SSL_get_options(%struct.ssl_st* %0) #5
  %27 = and i32 %26, 4096
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %48

29:                                               ; preds = %25
  %30 = load %struct.bio_st*, %struct.bio_st** %15, align 8
  %31 = tail call i64 @BIO_ctrl(%struct.bio_st* %30, i32 40, i64 0, i8* null) #5
  %32 = icmp ult i64 %31, 1073741825
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = trunc i64 %31 to i32
  %35 = icmp ugt i32 %34, 227
  br i1 %35, label %36, label %39

36:                                               ; preds = %33
  %37 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %38 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %37, i64 0, i32 19
  store i32 %34, i32* %38, align 8
  br label %48

39:                                               ; preds = %33, %29
  %40 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %41 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %40, i64 0, i32 19
  store i32 1472, i32* %41, align 8
  %42 = load %struct.bio_st*, %struct.bio_st** %15, align 8
  %43 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %44 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %43, i64 0, i32 19
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = tail call i64 @BIO_ctrl(%struct.bio_st* %42, i32 42, i64 %46, i8* null) #5
  br label %48

48:                                               ; preds = %19, %25, %36, %39
  %49 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %50 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %49, i64 0, i32 19
  %51 = load i32, i32* %50, align 8
  %52 = zext i32 %51 to i64
  %53 = tail call i8* @OPENSSL_malloc(i64 %52) #5
  %54 = icmp eq i8* %53, null
  br i1 %54, label %67, label %55

55:                                               ; preds = %48
  %56 = bitcast i64* %7 to i8*
  %57 = bitcast %struct.cbs_st* %2 to i8*
  %58 = bitcast %struct.cbs_st* %3 to i8*
  %59 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %4, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %4, i64 0, i32 3
  %61 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %4, i64 0, i32 4
  %62 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %4, i64 0, i32 1
  %63 = bitcast %"class.bssl::internal::StackAllocated.118"* %5 to i8*
  %64 = getelementptr inbounds %"class.bssl::internal::StackAllocated.118", %"class.bssl::internal::StackAllocated.118"* %5, i64 0, i32 0
  %65 = bitcast i64* %6 to i8*
  %66 = getelementptr inbounds %"struct.bssl::hm_header_st", %"struct.bssl::hm_header_st"* %4, i64 0, i32 2
  br label %68

67:                                               ; preds = %48
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 784) #5
  br label %258

68:                                               ; preds = %55, %238
  %69 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %70 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %69, i64 0, i32 16
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %69, i64 0, i32 15
  %73 = load i8, i8* %72, align 8
  %74 = icmp ult i8 %71, %73
  br i1 %74, label %75, label %251

75:                                               ; preds = %68
  %76 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %69, i64 0, i32 18
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %69, i64 0, i32 19
  %79 = load i32, i32* %78, align 8
  %80 = zext i32 %79 to i64
  br label %81

81:                                               ; preds = %220, %75
  %82 = phi i8 [ %71, %75 ], [ %231, %220 ]
  %83 = phi %"struct.bssl::DTLS1_STATE"* [ %69, %75 ], [ %229, %220 ]
  %84 = phi i64 [ 0, %75 ], [ %222, %220 ]
  %85 = phi i8 [ 0, %75 ], [ 1, %220 ]
  %86 = phi i64 [ %80, %75 ], [ %223, %220 ]
  %87 = phi i8* [ %53, %75 ], [ %224, %220 ]
  %88 = zext i8 %82 to i64
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #5
  store i64 -6148914691236517206, i64* %7, align 8
  %89 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 5
  %90 = load i16, i16* %89, align 2
  %91 = icmp eq i16 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %81
  %93 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 14, i64 %88, i32 2
  %94 = load i16, i16* %93, align 4
  br label %102

95:                                               ; preds = %81
  %96 = zext i16 %90 to i32
  %97 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 14, i64 %88, i32 2
  %98 = load i16, i16* %97, align 4
  %99 = zext i16 %98 to i32
  %100 = add nsw i32 %96, -1
  %101 = icmp eq i32 %100, %99
  br i1 %101, label %106, label %102

102:                                              ; preds = %95, %92
  %103 = phi i16 [ %94, %92 ], [ %98, %95 ]
  %104 = icmp eq i16 %103, %90
  br i1 %104, label %106, label %105

105:                                              ; preds = %102
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 640) #5
  br label %218

106:                                              ; preds = %102, %95
  %107 = phi i32 [ 1, %102 ], [ 0, %95 ]
  %108 = call i64 @_ZN4bssl22dtls_max_seal_overheadEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st* %0, i32 %107) #5
  %109 = call i64 @_ZN4bssl20dtls_seal_prefix_lenEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st* %0, i32 %107) #5
  %110 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 14, i64 %88, i32 3
  %111 = load i8, i8* %110, align 2, !range !4
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %121, label %113

113:                                              ; preds = %106
  %114 = add i64 %108, 1
  %115 = icmp ugt i64 %114, %86
  br i1 %115, label %235, label %116

116:                                              ; preds = %113
  %117 = call zeroext i1 @_ZN4bssl16dtls_seal_recordEP6ssl_stPhPmmhPKhmNS_17dtls1_use_epoch_tE(%struct.ssl_st* %0, i8* %87, i64* nonnull %7, i64 %86, i8 zeroext 20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN4bsslL17seal_next_messageEP6ssl_stPhPmmPKNS_21DTLS_OUTGOING_MESSAGEEE17kChangeCipherSpec, i64 0, i64 0), i64 1, i32 %107) #5
  br i1 %117, label %118, label %218

118:                                              ; preds = %116
  call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 1, i32 20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @_ZZN4bsslL17seal_next_messageEP6ssl_stPhPmmPKNS_21DTLS_OUTGOING_MESSAGEEE17kChangeCipherSpec, i64 0, i64 0), i64 1) #5
  %119 = load i64, i64* %7, align 8
  %120 = add i64 %119, %84
  br label %220

121:                                              ; preds = %106
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %57) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %58) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %59) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %59, i8 -86, i64 20, i1 false) #5
  %122 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 14, i64 %88, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %83, i64 0, i32 14, i64 %88, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = zext i32 %125 to i64
  call void @CBS_init(%struct.cbs_st* nonnull %2, i8* %123, i64 %126) #5
  %127 = call zeroext i1 @_ZN4bssl20dtls1_parse_fragmentEP6cbs_stPNS_12hm_header_stES1_(%struct.cbs_st* nonnull %2, %"struct.bssl::hm_header_st"* nonnull %4, %struct.cbs_st* nonnull %3) #5
  %128 = load i32, i32* %60, align 4
  %129 = icmp eq i32 %128, 0
  %130 = and i1 %127, %129
  br i1 %130, label %131, label %151

131:                                              ; preds = %121
  %132 = load i32, i32* %61, align 4
  %133 = zext i32 %132 to i64
  %134 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #5
  %135 = icmp eq i64 %134, %133
  br i1 %135, label %136, label %151

136:                                              ; preds = %131
  %137 = load i32, i32* %62, align 4
  %138 = zext i32 %137 to i64
  %139 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #5
  %140 = icmp eq i64 %139, %138
  br i1 %140, label %141, label %151

141:                                              ; preds = %136
  %142 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %143 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %142, i64 0, i32 18
  %144 = load i32, i32* %143, align 4
  %145 = zext i32 %144 to i64
  %146 = call i32 @CBS_skip(%struct.cbs_st* nonnull %3, i64 %145) #5
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %141
  %149 = call i64 @CBS_len(%struct.cbs_st* nonnull %2) #5
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %152, label %151

151:                                              ; preds = %148, %141, %136, %131, %121
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 675) #5
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %59) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #5
  br label %218

152:                                              ; preds = %148
  %153 = add i64 %108, 13
  %154 = icmp ugt i64 %153, %86
  %155 = icmp ult i64 %86, %109
  %156 = or i1 %154, %155
  br i1 %156, label %157, label %158

157:                                              ; preds = %152
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %59) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #5
  br label %235

158:                                              ; preds = %152
  %159 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #5
  %160 = add i64 %86, -12
  %161 = sub i64 %160, %108
  %162 = icmp ugt i64 %159, %161
  %163 = select i1 %162, i64 %161, i64 %159
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 -86, i64 32, i1 false) #5
  call void @CBB_zero(%struct.cbb_st* nonnull %64) #5
  %164 = getelementptr inbounds i8, i8* %87, i64 %109
  %165 = sub i64 %86, %109
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #5
  store i64 -6148914691236517206, i64* %6, align 8
  %166 = call i32 @CBB_init_fixed(%struct.cbb_st* nonnull %64, i8* %164, i64 %165) #5
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %197, label %168

168:                                              ; preds = %158
  %169 = load i8, i8* %59, align 4
  %170 = call i32 @CBB_add_u8(%struct.cbb_st* nonnull %64, i8 zeroext %169) #5
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %197, label %172

172:                                              ; preds = %168
  %173 = load i32, i32* %62, align 4
  %174 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %64, i32 %173) #5
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %197, label %176

176:                                              ; preds = %172
  %177 = load i16, i16* %66, align 4
  %178 = call i32 @CBB_add_u16(%struct.cbb_st* nonnull %64, i16 zeroext %177) #5
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %197, label %180

180:                                              ; preds = %176
  %181 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %182 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %181, i64 0, i32 18
  %183 = load i32, i32* %182, align 4
  %184 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %64, i32 %183) #5
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %180
  %187 = trunc i64 %163 to i32
  %188 = call i32 @CBB_add_u24(%struct.cbb_st* nonnull %64, i32 %187) #5
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %197, label %190

190:                                              ; preds = %186
  %191 = call i8* @CBS_data(%struct.cbs_st* nonnull %3) #5
  %192 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %64, i8* %191, i64 %163) #5
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %197, label %194

194:                                              ; preds = %190
  %195 = call i32 @CBB_finish(%struct.cbb_st* nonnull %64, i8** null, i64* nonnull %6) #5
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %194, %190, %186, %180, %176, %172, %168, %158
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 700) #5
  br label %211

198:                                              ; preds = %194
  %199 = load i64, i64* %6, align 8
  call void @_ZN4bssl19ssl_do_msg_callbackEPK6ssl_stiiNS_4SpanIKhEE(%struct.ssl_st* %0, i32 1, i32 22, i8* %164, i64 %199) #5
  %200 = load i64, i64* %6, align 8
  %201 = call zeroext i1 @_ZN4bssl16dtls_seal_recordEP6ssl_stPhPmmhPKhmNS_17dtls1_use_epoch_tE(%struct.ssl_st* %0, i8* %87, i64* nonnull %7, i64 %86, i8 zeroext 22, i8* %164, i64 %200, i32 %107) #5
  br i1 %201, label %202, label %211

202:                                              ; preds = %198
  %203 = call i64 @CBS_len(%struct.cbs_st* nonnull %3) #5
  %204 = icmp eq i64 %163, %203
  %205 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %206 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %205, i64 0, i32 18
  br i1 %204, label %207, label %208

207:                                              ; preds = %202
  store i32 0, i32* %206, align 4
  br label %211

208:                                              ; preds = %202
  %209 = load i32, i32* %206, align 4
  %210 = add i32 %209, %187
  store i32 %210, i32* %206, align 4
  br label %211

211:                                              ; preds = %208, %207, %198, %197
  %212 = phi i32 [ 3, %207 ], [ 2, %208 ], [ 0, %197 ], [ 0, %198 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #5
  call void @CBB_cleanup(%struct.cbb_st* nonnull %64) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63) #5
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %59) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %58) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %57) #5
  switch i32 %212, label %219 [
    i32 0, label %218
    i32 1, label %235
    i32 2, label %213
    i32 3, label %213
  ]

213:                                              ; preds = %211, %211
  %214 = load i64, i64* %7, align 8
  %215 = add i64 %214, %84
  %216 = icmp eq i32 %212, 2
  br i1 %216, label %217, label %220

217:                                              ; preds = %213
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #5
  br label %238

218:                                              ; preds = %211, %116, %151, %105
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #5
  br label %258

219:                                              ; preds = %211
  unreachable

220:                                              ; preds = %213, %118
  %221 = phi i64 [ %214, %213 ], [ %119, %118 ]
  %222 = phi i64 [ %215, %213 ], [ %120, %118 ]
  %223 = sub i64 %86, %221
  %224 = getelementptr inbounds i8, i8* %87, i64 %221
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #5
  %225 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %226 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %225, i64 0, i32 16
  %227 = load i8, i8* %226, align 1
  %228 = add i8 %227, 1
  store i8 %228, i8* %226, align 1
  %229 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %230 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %229, i64 0, i32 16
  %231 = load i8, i8* %230, align 1
  %232 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %229, i64 0, i32 15
  %233 = load i8, i8* %232, align 8
  %234 = icmp ult i8 %231, %233
  br i1 %234, label %81, label %238

235:                                              ; preds = %211, %113, %157
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #5
  %236 = icmp eq i8 %85, 0
  br i1 %236, label %237, label %238

237:                                              ; preds = %235
  call void @ERR_put_error(i32 16, i32 0, i32 169, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 760) #5
  br label %258

238:                                              ; preds = %220, %235, %217
  %239 = phi i64 [ %215, %217 ], [ %84, %235 ], [ %222, %220 ]
  %240 = load %struct.bio_st*, %struct.bio_st** %15, align 8
  %241 = trunc i64 %239 to i32
  %242 = call i32 @BIO_write(%struct.bio_st* %240, i8* nonnull %53, i32 %241) #5
  %243 = icmp slt i32 %242, 1
  br i1 %243, label %244, label %68

244:                                              ; preds = %238
  %245 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %246 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %245, i64 0, i32 16
  store i8 %71, i8* %246, align 1
  %247 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %20, align 8
  %248 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %247, i64 0, i32 18
  store i32 %77, i32* %248, align 4
  %249 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %8, align 8
  %250 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %249, i64 0, i32 16
  store i32 3, i32* %250, align 4
  br label %258

251:                                              ; preds = %68
  %252 = load %struct.bio_st*, %struct.bio_st** %15, align 8
  %253 = call i32 @BIO_flush(%struct.bio_st* %252) #5
  %254 = icmp slt i32 %253, 1
  br i1 %254, label %255, label %258

255:                                              ; preds = %251
  %256 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %8, align 8
  %257 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %256, i64 0, i32 16
  store i32 3, i32* %257, align 4
  br label %258

258:                                              ; preds = %237, %218, %244, %251, %255, %67
  %259 = phi i32 [ -1, %67 ], [ -1, %255 ], [ 1, %251 ], [ -1, %237 ], [ -1, %218 ], [ %242, %244 ]
  call void @OPENSSL_free(i8* %53) #5
  br label %260

260:                                              ; preds = %258, %18, %13
  %261 = phi i32 [ -1, %13 ], [ -1, %18 ], [ %259, %258 ]
  ret i32 %261
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl34dtls1_retransmit_outgoing_messagesEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 9
  %3 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %3, i64 0, i32 16
  store i8 0, i8* %4, align 1
  %5 = load %"struct.bssl::DTLS1_STATE"*, %"struct.bssl::DTLS1_STATE"** %2, align 8
  %6 = getelementptr inbounds %"struct.bssl::DTLS1_STATE", %"struct.bssl::DTLS1_STATE"* %5, i64 0, i32 18
  store i32 0, i32* %6, align 4
  %7 = tail call fastcc i32 @_ZN4bsslL11send_flightEP6ssl_st(%struct.ssl_st* %0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN4bssl13dtls1_min_mtuEv() local_unnamed_addr #4 {
  ret i32 228
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare i32 @CBB_init_fixed(%struct.cbb_st*, i8*, i64) local_unnamed_addr #1

declare i32 @CBB_finish(%struct.cbb_st*, i8**, i64*) local_unnamed_addr #1

declare void @CBB_zero(%struct.cbb_st*) local_unnamed_addr #1

declare void @CBB_cleanup(%struct.cbb_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN4bssl16dtls1_stop_timerEP6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare zeroext i1 @_ZN4bssl13SSLTranscript6UpdateENS_4SpanIKhEE(%"class.bssl::SSLTranscript"*, i8*, i64) local_unnamed_addr #1

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #1

declare i32 @BIO_flush(%struct.bio_st*) local_unnamed_addr #1

declare i32 @SSL_get_options(%struct.ssl_st*) local_unnamed_addr #1

declare i64 @BIO_ctrl(%struct.bio_st*, i32, i64, i8*) local_unnamed_addr #1

declare i64 @_ZN4bssl22dtls_max_seal_overheadEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st*, i32) local_unnamed_addr #1

declare i64 @_ZN4bssl20dtls_seal_prefix_lenEPK6ssl_stNS_17dtls1_use_epoch_tE(%struct.ssl_st*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN4bssl16dtls_seal_recordEP6ssl_stPhPmmhPKhmNS_17dtls1_use_epoch_tE(%struct.ssl_st*, i8*, i64*, i64, i8 zeroext, i8*, i64, i32) local_unnamed_addr #1

declare i32 @CBS_skip(%struct.cbs_st*, i64) local_unnamed_addr #1

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
