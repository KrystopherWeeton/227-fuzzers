; ModuleID = '../../cc/tiles/mipmap_util.cc'
source_filename = "../../cc/tiles/mipmap_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Size" = type { i32, i32 }

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN2cc10MipMapUtil15GetLevelForSizeERKN3gfx4SizeES4_(%"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %35, %2
  %12 = phi i32 [ %4, %2 ], [ %24, %35 ]
  %13 = phi i32 [ %6, %2 ], [ %31, %35 ]
  %14 = phi i32 [ 0, %2 ], [ %15, %35 ]
  %15 = add nuw nsw i32 %14, 1
  %16 = shl i32 -2, %14
  %17 = xor i32 %16, -1
  %18 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %17) #3
  %19 = extractvalue { i32, i1 } %18, 1
  %20 = extractvalue { i32, i1 } %18, 0
  %21 = select i1 %19, i32 2147483647, i32 %20, !prof !2
  %22 = ashr i32 %21, %15
  %23 = icmp sgt i32 %22, 1
  %24 = select i1 %23, i32 %22, i32 1
  %25 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %17) #3
  %26 = extractvalue { i32, i1 } %25, 1
  %27 = extractvalue { i32, i1 } %25, 0
  %28 = select i1 %26, i32 2147483647, i32 %27, !prof !2
  %29 = ashr i32 %28, %15
  %30 = icmp sgt i32 %29, 1
  %31 = select i1 %30, i32 %29, i32 1
  %32 = icmp slt i32 %24, %8
  %33 = icmp slt i32 %31, %10
  %34 = or i1 %32, %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %11
  %36 = icmp eq i32 %12, 1
  %37 = icmp eq i32 %13, 1
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %11

39:                                               ; preds = %35, %11
  ret i32 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN2cc10MipMapUtil26GetScaleAdjustmentForLevelERKN3gfx4SizeEi(%"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  br label %28

9:                                                ; preds = %2
  %10 = shl nsw i32 -1, %1
  %11 = xor i32 %10, -1
  %12 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %11) #3
  %13 = extractvalue { i32, i1 } %12, 1
  %14 = extractvalue { i32, i1 } %12, 0
  %15 = select i1 %13, i32 2147483647, i32 %14, !prof !2
  %16 = ashr i32 %15, %1
  %17 = icmp sgt i32 %16, 1
  %18 = select i1 %17, i32 %16, i32 1
  %19 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %11) #3
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 2147483647, i32 %23, !prof !2
  %25 = ashr i32 %24, %1
  %26 = icmp sgt i32 %25, 1
  %27 = select i1 %26, i32 %25, i32 1
  br label %28

28:                                               ; preds = %6, %9
  %29 = phi i32 [ %20, %9 ], [ %8, %6 ]
  %30 = phi i32 [ %18, %9 ], [ %4, %6 ]
  %31 = phi i32 [ %27, %9 ], [ %8, %6 ]
  %32 = icmp sgt i32 %30, 0
  %33 = select i1 %32, i32 %30, i32 0
  %34 = icmp sgt i32 %31, 0
  %35 = select i1 %34, i32 %31, i32 0
  %36 = sitofp i32 %33 to float
  %37 = sitofp i32 %4 to float
  %38 = fdiv float %36, %37
  %39 = sitofp i32 %35 to float
  %40 = sitofp i32 %29 to float
  %41 = fdiv float %39, %40
  %42 = insertelement <2 x float> undef, float %38, i32 0
  %43 = insertelement <2 x float> %42, float %41, i32 1
  ret <2 x float> %43
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN2cc10MipMapUtil15GetSizeForLevelERKN3gfx4SizeEi(%"class.gfx::Size"* nocapture readonly dereferenceable(8), i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  br label %28

9:                                                ; preds = %2
  %10 = shl nsw i32 -1, %1
  %11 = xor i32 %10, -1
  %12 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %11) #3
  %13 = extractvalue { i32, i1 } %12, 1
  %14 = extractvalue { i32, i1 } %12, 0
  %15 = select i1 %13, i32 2147483647, i32 %14, !prof !2
  %16 = ashr i32 %15, %1
  %17 = icmp sgt i32 %16, 1
  %18 = select i1 %17, i32 %16, i32 1
  %19 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %11) #3
  %22 = extractvalue { i32, i1 } %21, 1
  %23 = extractvalue { i32, i1 } %21, 0
  %24 = select i1 %22, i32 2147483647, i32 %23, !prof !2
  %25 = ashr i32 %24, %1
  %26 = icmp sgt i32 %25, 1
  %27 = select i1 %26, i32 %25, i32 1
  br label %28

28:                                               ; preds = %6, %9
  %29 = phi i32 [ %18, %9 ], [ %4, %6 ]
  %30 = phi i32 [ %27, %9 ], [ %8, %6 ]
  %31 = icmp sgt i32 %29, 0
  %32 = select i1 %31, i32 %29, i32 0
  %33 = icmp sgt i32 %30, 0
  %34 = select i1 %33, i32 %30, i32 0
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 32
  %37 = zext i32 %32 to i64
  %38 = or i64 %36, %37
  ret i64 %38
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZN2cc10MipMapUtil25GetScaleAdjustmentForSizeERKN3gfx4SizeES4_(%"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %35, %2
  %12 = phi i32 [ %4, %2 ], [ %24, %35 ]
  %13 = phi i32 [ %6, %2 ], [ %31, %35 ]
  %14 = phi i32 [ 0, %2 ], [ %15, %35 ]
  %15 = add nuw nsw i32 %14, 1
  %16 = shl i32 -2, %14
  %17 = xor i32 %16, -1
  %18 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %17) #3
  %19 = extractvalue { i32, i1 } %18, 1
  %20 = extractvalue { i32, i1 } %18, 0
  %21 = select i1 %19, i32 2147483647, i32 %20, !prof !2
  %22 = ashr i32 %21, %15
  %23 = icmp sgt i32 %22, 1
  %24 = select i1 %23, i32 %22, i32 1
  %25 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %17) #3
  %26 = extractvalue { i32, i1 } %25, 1
  %27 = extractvalue { i32, i1 } %25, 0
  %28 = select i1 %26, i32 2147483647, i32 %27, !prof !2
  %29 = ashr i32 %28, %15
  %30 = icmp sgt i32 %29, 1
  %31 = select i1 %30, i32 %29, i32 1
  %32 = icmp slt i32 %24, %8
  %33 = icmp slt i32 %31, %10
  %34 = or i1 %32, %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %11
  %36 = icmp eq i32 %12, 1
  %37 = icmp eq i32 %13, 1
  %38 = and i1 %36, %37
  br i1 %38, label %39, label %11

39:                                               ; preds = %11, %35
  %40 = icmp eq i32 %14, 0
  br i1 %40, label %58, label %41

41:                                               ; preds = %39
  %42 = shl nsw i32 -1, %14
  %43 = xor i32 %42, -1
  %44 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %43) #3
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 2147483647, i32 %46, !prof !2
  %48 = ashr i32 %47, %14
  %49 = icmp sgt i32 %48, 1
  %50 = select i1 %49, i32 %48, i32 1
  %51 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %43) #3
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 2147483647, i32 %53, !prof !2
  %55 = ashr i32 %54, %14
  %56 = icmp sgt i32 %55, 1
  %57 = select i1 %56, i32 %55, i32 1
  br label %58

58:                                               ; preds = %39, %41
  %59 = phi i32 [ %50, %41 ], [ %6, %39 ]
  %60 = phi i32 [ %57, %41 ], [ %4, %39 ]
  %61 = icmp sgt i32 %59, 0
  %62 = select i1 %61, i32 %59, i32 0
  %63 = icmp sgt i32 %60, 0
  %64 = select i1 %63, i32 %60, i32 0
  %65 = sitofp i32 %62 to float
  %66 = sitofp i32 %6 to float
  %67 = fdiv float %65, %66
  %68 = sitofp i32 %64 to float
  %69 = sitofp i32 %4 to float
  %70 = fdiv float %68, %69
  %71 = insertelement <2 x float> undef, float %67, i32 0
  %72 = insertelement <2 x float> %71, float %70, i32 1
  ret <2 x float> %72
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
