; ModuleID = '../../third_party/libzip/src/lib/zip_source_zip_new.c'
source_filename = "../../third_party/libzip/src/lib/zip_source_zip_new.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_source* @_zip_source_zip_new(%struct.zip*, %struct.zip*, i64, i32, i64, i64, i8*) local_unnamed_addr #0 {
  %8 = alloca %struct.zip_stat, align 8
  %9 = alloca %struct.zip_file_attributes, align 8
  %10 = alloca %struct.zip_stat, align 8
  %11 = bitcast %struct.zip_stat* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false)
  %12 = bitcast %struct.zip_file_attributes* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  %13 = icmp eq %struct.zip* %0, null
  br i1 %13, label %184, label %14

14:                                               ; preds = %7
  %15 = icmp eq %struct.zip* %1, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 9
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, %2
  br i1 %19, label %22, label %20

20:                                               ; preds = %16, %14
  %21 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %21, i32 18, i32 0) #3
  br label %184

22:                                               ; preds = %16
  %23 = and i32 %3, 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %37

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 11
  %27 = load %struct.zip_entry*, %struct.zip_entry** %26, align 8
  %28 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %2, i32 2
  %29 = load %struct.zip_source*, %struct.zip_source** %28, align 8
  %30 = icmp eq %struct.zip_source* %29, null
  br i1 %30, label %31, label %35

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %2, i32 3
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %31, %25
  %36 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %36, i32 15, i32 0) #3
  br label %184

37:                                               ; preds = %31, %22
  %38 = or i32 %3, 8
  %39 = call i32 @zip_stat_index(%struct.zip* nonnull %1, i64 %2, i32 %38, %struct.zip_stat* nonnull %8) #3
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  call void @zip_error_set(%struct.zip_error* %42, i32 20, i32 0) #3
  br label %184

43:                                               ; preds = %37
  %44 = lshr i32 %3, 3
  %45 = and i32 %44, 4
  %46 = or i32 %45, %3
  %47 = or i64 %5, %4
  %48 = icmp ne i64 %47, 0
  %49 = xor i1 %48, true
  %50 = and i32 %46, 4
  %51 = icmp eq i32 %50, 0
  %52 = or i1 %51, %49
  br i1 %52, label %55, label %53

53:                                               ; preds = %43
  %54 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  call void @zip_error_set(%struct.zip_error* %54, i32 18, i32 0) #3
  br label %184

55:                                               ; preds = %43
  br i1 %48, label %59, label %56

56:                                               ; preds = %55
  %57 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 3
  %58 = load i64, i64* %57, align 8
  br label %68

59:                                               ; preds = %55
  %60 = add i64 %5, %4
  %61 = icmp ult i64 %60, %4
  br i1 %61, label %66, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 3
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %60, %64
  br i1 %65, label %66, label %68

66:                                               ; preds = %62, %59
  %67 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  call void @zip_error_set(%struct.zip_error* %67, i32 18, i32 0) #3
  br label %184

68:                                               ; preds = %56, %62
  %69 = phi i64 [ %58, %56 ], [ %64, %62 ]
  %70 = icmp eq i64 %5, 0
  %71 = sub i64 %69, %4
  %72 = select i1 %70, i64 %71, i64 %5
  %73 = icmp ult i64 %72, %69
  %74 = and i32 %3, 32
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 8
  %77 = load i16, i16* %76, align 2
  %78 = icmp ne i16 %77, 0
  %79 = and i1 %75, %78
  %80 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 7
  %81 = load i16, i16* %80, align 4
  %82 = icmp ne i16 %81, 0
  %83 = and i1 %51, %82
  %84 = icmp eq i16 %81, 0
  %85 = or i1 %51, %84
  %86 = xor i1 %73, true
  %87 = and i1 %85, %86
  %88 = icmp eq i8* %6, null
  %89 = and i1 %88, %79
  br i1 %89, label %90, label %96

90:                                               ; preds = %68
  %91 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 5
  %92 = load i8*, i8** %91, align 8
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %96

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  call void @zip_error_set(%struct.zip_error* %95, i32 26, i32 0) #3
  br label %184

96:                                               ; preds = %90, %68
  %97 = phi i8* [ %92, %90 ], [ %6, %68 ]
  %98 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %99 = call %struct.zip_dirent* @_zip_get_dirent(%struct.zip* nonnull %1, i64 %2, i32 %46, %struct.zip_error* %98) #3
  %100 = icmp eq %struct.zip_dirent* %99, null
  br i1 %100, label %184, label %101

101:                                              ; preds = %96
  call void @zip_file_attributes_init(%struct.zip_file_attributes* nonnull %9) #3
  %102 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 0
  store i64 27, i64* %102, align 8
  %103 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %99, i64 0, i32 16
  %104 = load i16, i16* %103, align 4
  %105 = trunc i16 %104 to i8
  %106 = and i8 %105, 1
  %107 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 3
  store i8 %106, i8* %107, align 2
  %108 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %99, i64 0, i32 4
  %109 = load i16, i16* %108, align 8
  %110 = lshr i16 %109, 8
  %111 = trunc i16 %110 to i8
  %112 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 2
  store i8 %111, i8* %112, align 1
  %113 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %99, i64 0, i32 17
  %114 = load i32, i32* %113, align 8
  %115 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 5
  store i32 %114, i32* %115, align 4
  %116 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %99, i64 0, i32 6
  %117 = load i16, i16* %116, align 4
  %118 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 6
  store i16 %117, i16* %118, align 8
  %119 = getelementptr inbounds %struct.zip_file_attributes, %struct.zip_file_attributes* %9, i64 0, i32 7
  store i16 2102, i16* %119, align 2
  %120 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 4
  %121 = load i64, i64* %120, align 8
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %101
  %124 = call %struct.zip_source* @zip_source_buffer_with_attributes(%struct.zip* nonnull %0, i8* null, i64 0, i32 0, %struct.zip_file_attributes* nonnull %9) #3
  br label %184

125:                                              ; preds = %101
  %126 = or i1 %79, %86
  %127 = or i1 %126, %83
  br i1 %127, label %143, label %128

128:                                              ; preds = %125
  %129 = bitcast %struct.zip_stat* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %129) #3
  %130 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 1
  %131 = bitcast i8** %130 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %131, i8 -86, i64 56, i1 false)
  %132 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 3
  store i64 %72, i64* %132, align 8
  %133 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 4
  store i64 %72, i64* %133, align 8
  %134 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 7
  store i16 0, i16* %134, align 4
  %135 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %8, i64 0, i32 5
  %136 = load i64, i64* %135, align 8
  %137 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 5
  store i64 %136, i64* %137, align 8
  %138 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %10, i64 0, i32 0
  store i64 92, i64* %138, align 8
  %139 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 0
  %140 = load %struct.zip_source*, %struct.zip_source** %139, align 8
  %141 = call %struct.zip_source* @_zip_source_window_new(%struct.zip_source* %140, i64 %4, i64 %72, %struct.zip_stat* nonnull %10, %struct.zip_file_attributes* nonnull %9, %struct.zip* nonnull %1, i64 %2, %struct.zip_error* %98) #3
  %142 = icmp eq %struct.zip_source* %141, null
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %129) #3
  br i1 %142, label %184, label %148

143:                                              ; preds = %125
  %144 = getelementptr inbounds %struct.zip, %struct.zip* %1, i64 0, i32 0
  %145 = load %struct.zip_source*, %struct.zip_source** %144, align 8
  %146 = call %struct.zip_source* @_zip_source_window_new(%struct.zip_source* %145, i64 0, i64 %121, %struct.zip_stat* nonnull %8, %struct.zip_file_attributes* nonnull %9, %struct.zip* nonnull %1, i64 %2, %struct.zip_error* %98) #3
  %147 = icmp eq %struct.zip_source* %146, null
  br i1 %147, label %184, label %148

148:                                              ; preds = %128, %143
  %149 = phi %struct.zip_source* [ %146, %143 ], [ %141, %128 ]
  %150 = call i32 @_zip_source_set_source_archive(%struct.zip_source* nonnull %149, %struct.zip* nonnull %1) #3
  %151 = icmp slt i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %148
  call void @zip_source_free(%struct.zip_source* nonnull %149) #3
  br label %184

153:                                              ; preds = %148
  br i1 %79, label %154, label %163

154:                                              ; preds = %153
  %155 = load i16, i16* %76, align 2
  %156 = call %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext %155, i32 0) #3
  %157 = icmp eq %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* %156, null
  br i1 %157, label %158, label %159

158:                                              ; preds = %154
  call void @zip_error_set(%struct.zip_error* %98, i32 24, i32 0) #3
  br label %184

159:                                              ; preds = %154
  %160 = load i16, i16* %76, align 2
  %161 = call %struct.zip_source* %156(%struct.zip* nonnull %0, %struct.zip_source* nonnull %149, i16 zeroext %160, i32 0, i8* %97) #3
  call void @zip_source_free(%struct.zip_source* nonnull %149) #3
  %162 = icmp eq %struct.zip_source* %161, null
  br i1 %162, label %184, label %163

163:                                              ; preds = %159, %153
  %164 = phi %struct.zip_source* [ %161, %159 ], [ %149, %153 ]
  br i1 %83, label %165, label %170

165:                                              ; preds = %163
  %166 = load i16, i16* %80, align 4
  %167 = zext i16 %166 to i32
  %168 = call %struct.zip_source* @zip_source_decompress(%struct.zip* nonnull %0, %struct.zip_source* %164, i32 %167) #3
  call void @zip_source_free(%struct.zip_source* %164) #3
  %169 = icmp eq %struct.zip_source* %168, null
  br i1 %169, label %184, label %170

170:                                              ; preds = %165, %163
  %171 = phi %struct.zip_source* [ %164, %163 ], [ %168, %165 ]
  br i1 %87, label %172, label %175

172:                                              ; preds = %170
  %173 = call %struct.zip_source* @zip_source_crc(%struct.zip* nonnull %0, %struct.zip_source* %171, i32 1) #3
  call void @zip_source_free(%struct.zip_source* %171) #3
  %174 = icmp eq %struct.zip_source* %173, null
  br i1 %174, label %184, label %175

175:                                              ; preds = %172, %170
  %176 = phi %struct.zip_source* [ %171, %170 ], [ %173, %172 ]
  %177 = or i1 %79, %83
  %178 = and i1 %73, %177
  br i1 %178, label %179, label %182

179:                                              ; preds = %175
  %180 = call %struct.zip_source* @zip_source_window(%struct.zip* nonnull %0, %struct.zip_source* %176, i64 %4, i64 %72) #3
  call void @zip_source_free(%struct.zip_source* %176) #3
  %181 = icmp eq %struct.zip_source* %180, null
  br i1 %181, label %184, label %182

182:                                              ; preds = %179, %175
  %183 = phi %struct.zip_source* [ %176, %175 ], [ %180, %179 ]
  br label %184

184:                                              ; preds = %159, %128, %158, %179, %172, %165, %143, %96, %7, %182, %152, %123, %94, %66, %53, %41, %35, %20
  %185 = phi %struct.zip_source* [ null, %20 ], [ null, %35 ], [ null, %41 ], [ null, %53 ], [ null, %66 ], [ null, %94 ], [ %124, %123 ], [ null, %152 ], [ %183, %182 ], [ null, %159 ], [ null, %128 ], [ null, %7 ], [ null, %96 ], [ null, %143 ], [ null, %165 ], [ null, %172 ], [ null, %179 ], [ null, %158 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #3
  ret %struct.zip_source* %185
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #2

declare i32 @zip_stat_index(%struct.zip*, i64, i32, %struct.zip_stat*) local_unnamed_addr #2

declare %struct.zip_dirent* @_zip_get_dirent(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_buffer_with_attributes(%struct.zip*, i8*, i64, i32, %struct.zip_file_attributes*) local_unnamed_addr #2

declare %struct.zip_source* @_zip_source_window_new(%struct.zip_source*, i64, i64, %struct.zip_stat*, %struct.zip_file_attributes*, %struct.zip*, i64, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_zip_source_set_source_archive(%struct.zip_source*, %struct.zip*) local_unnamed_addr #2

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #2

declare %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_decompress(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_crc(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_window(%struct.zip*, %struct.zip_source*, i64, i64) local_unnamed_addr #2

declare void @zip_file_attributes_init(%struct.zip_file_attributes*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
