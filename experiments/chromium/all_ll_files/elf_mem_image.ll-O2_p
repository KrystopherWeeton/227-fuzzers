; ModuleID = '../../third_party/abseil-cpp/absl/debugging/internal/elf_mem_image.cc'
source_filename = "../../third_party/abseil-cpp/absl/debugging/internal/elf_mem_image.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::debugging_internal::ElfMemImage" = type { %struct.Elf64_Ehdr*, %struct.Elf64_Sym*, i16*, %struct.Elf64_Verdef*, i32*, i8*, i64, i64, i64 }
%struct.Elf64_Ehdr = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%struct.Elf64_Sym = type { i32, i8, i8, i16, i64, i64 }
%struct.Elf64_Verdef = type { i16, i16, i16, i16, i32, i32, i32 }
%"class.absl::debugging_internal::ElfMemImage::SymbolIterator" = type { %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo", i32, i8* }
%"struct.absl::debugging_internal::ElfMemImage::SymbolInfo" = type { i8*, i8*, i8*, %struct.Elf64_Sym* }
%struct.Elf64_Phdr = type { i32, i32, i64, i64, i64, i64, i64, i64 }
%struct.Elf64_Dyn = type { i64, %union.anon }
%union.anon = type { i64 }
%struct.Elf64_Verdaux = type { i32, i32 }

@_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE = hidden constant i32 0, align 4
@.str = private unnamed_addr constant [70 x i8] c"../../third_party/abseil-cpp/absl/debugging/internal/elf_mem_image.cc\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"base != kInvalidBase\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"bad pointer\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"index < GetNumSymbols()\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"index out of range\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"index < ehdr_->e_phnum\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"offset < strsize_\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"offset out of range\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"link_base_ < sym->st_value\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"symbol out of range\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"0 <= index && static_cast<size_t>(index) <= verdefnum_\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"image->IsPresent() || increment == 0\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"symbol && version_symbol\00", align 1
@.str.15 = private unnamed_addr constant [67 x i8] c"version_definition->vd_cnt == 1 || version_definition->vd_cnt == 2\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"wrong number of entries\00", align 1

@_ZN4absl18debugging_internal11ElfMemImageC1EPKv = hidden unnamed_addr alias void (%"class.absl::debugging_internal::ElfMemImage"*, i8*), void (%"class.absl::debugging_internal::ElfMemImage"*, i8*)* @_ZN4absl18debugging_internal11ElfMemImageC2EPKv
@_ZN4absl18debugging_internal11ElfMemImage14SymbolIteratorC1EPKvi = hidden unnamed_addr alias void (%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"*, i8*, i32), void (%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"*, i8*, i32)* @_ZN4absl18debugging_internal11ElfMemImage14SymbolIteratorC2EPKvi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl18debugging_internal11ElfMemImageC2EPKv(%"class.absl::debugging_internal::ElfMemImage"*, i8*) unnamed_addr #0 align 2 {
  %3 = icmp eq i8* %1, bitcast (i32* @_ZN4absl18debugging_internal11ElfMemImage20kInvalidBaseSentinelE to i8*)
  br i1 %3, label %4, label %5, !prof !2

4:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 84, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0)) #8
  br label %5

5:                                                ; preds = %2, %4
  tail call void @_ZN4absl18debugging_internal11ElfMemImage4InitEPKv(%"class.absl::debugging_internal::ElfMemImage"* %0, i8* %1)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl18debugging_internal11ElfMemImage4InitEPKv(%"class.absl::debugging_internal::ElfMemImage"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 6
  %9 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 7
  %10 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 8
  %11 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 64, i1 false)
  store i64 -1, i64* %10, align 8
  %12 = icmp eq i8* %1, null
  br i1 %12, label %148, label %13

13:                                               ; preds = %2
  %14 = load i8, i8* %1, align 1
  %15 = icmp eq i8 %14, 127
  br i1 %15, label %16, label %148

16:                                               ; preds = %13
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 69
  br i1 %19, label %20, label %148

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %1, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 76
  br i1 %23, label %24, label %148

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %1, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 70
  br i1 %27, label %28, label %148

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %30, 2
  br i1 %31, label %32, label %148

32:                                               ; preds = %28
  %33 = getelementptr inbounds i8, i8* %1, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 1
  br i1 %35, label %36, label %148

36:                                               ; preds = %32
  %37 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8**
  store i8* %1, i8** %37, align 8
  %38 = bitcast i8* %1 to %struct.Elf64_Ehdr*
  %39 = getelementptr inbounds i8, i8* %1, i64 56
  %40 = bitcast i8* %39 to i16*
  %41 = load i16, i16* %40, align 8
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %83, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds i8, i8* %1, i64 32
  %45 = bitcast i8* %44 to i64*
  %46 = getelementptr inbounds i8, i8* %1, i64 54
  %47 = bitcast i8* %46 to i16*
  %48 = getelementptr inbounds i8, i8* %1, i64 56
  %49 = bitcast i8* %48 to i16*
  br label %54

50:                                               ; preds = %76
  %51 = icmp ne i64 %78, -1
  %52 = icmp ne %struct.Elf64_Phdr* %79, null
  %53 = and i1 %52, %51
  br i1 %53, label %85, label %83

54:                                               ; preds = %43, %76
  %55 = phi i16 [ %41, %43 ], [ %77, %76 ]
  %56 = phi i64 [ -1, %43 ], [ %78, %76 ]
  %57 = phi i64 [ 0, %43 ], [ %80, %76 ]
  %58 = phi %struct.Elf64_Phdr* [ null, %43 ], [ %79, %76 ]
  %59 = load i64, i64* %45, align 8
  %60 = load i16, i16* %47, align 2
  %61 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %38, i64 0, i32 0, i64 %59
  %62 = zext i16 %60 to i64
  %63 = mul nuw nsw i64 %57, %62
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = bitcast i8* %64 to i32*
  %66 = load i32, i32* %65, align 8
  switch i32 %66, label %76 [
    i32 1, label %67
    i32 2, label %74
  ]

67:                                               ; preds = %54
  %68 = icmp eq i64 %56, -1
  br i1 %68, label %69, label %76

69:                                               ; preds = %67
  %70 = getelementptr inbounds i8, i8* %64, i64 16
  %71 = bitcast i8* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %10, align 8
  %73 = load i16, i16* %49, align 8
  br label %76

74:                                               ; preds = %54
  %75 = bitcast i8* %64 to %struct.Elf64_Phdr*
  br label %76

76:                                               ; preds = %67, %69, %54, %74
  %77 = phi i16 [ %55, %54 ], [ %55, %74 ], [ %55, %67 ], [ %73, %69 ]
  %78 = phi i64 [ %56, %54 ], [ %56, %74 ], [ %56, %67 ], [ %72, %69 ]
  %79 = phi %struct.Elf64_Phdr* [ %58, %54 ], [ %75, %74 ], [ %58, %67 ], [ %58, %69 ]
  %80 = add nuw nsw i64 %57, 1
  %81 = zext i16 %77 to i64
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %54, label %50

83:                                               ; preds = %36, %50
  %84 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 64, i1 false)
  store i64 -1, i64* %10, align 8
  br label %148

85:                                               ; preds = %50
  %86 = ptrtoint i8* %1 to i64
  %87 = sub i64 %86, %78
  %88 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %79, i64 0, i32 3
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %89, %87
  %91 = inttoptr i64 %90 to %struct.Elf64_Dyn*
  %92 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %91, i64 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %146, label %95

95:                                               ; preds = %85, %120
  %96 = phi i64 [ %121, %120 ], [ 0, %85 ]
  %97 = phi i64 [ %122, %120 ], [ 0, %85 ]
  %98 = phi %struct.Elf64_Verdef* [ %123, %120 ], [ null, %85 ]
  %99 = phi i16* [ %124, %120 ], [ null, %85 ]
  %100 = phi i8* [ %125, %120 ], [ null, %85 ]
  %101 = phi %struct.Elf64_Sym* [ %126, %120 ], [ null, %85 ]
  %102 = phi i32* [ %127, %120 ], [ null, %85 ]
  %103 = phi i64 [ %130, %120 ], [ %93, %85 ]
  %104 = phi %struct.Elf64_Dyn* [ %128, %120 ], [ %91, %85 ]
  %105 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %104, i64 0, i32 1, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, %87
  switch i64 %103, label %120 [
    i64 4, label %108
    i64 6, label %110
    i64 5, label %112
    i64 1879048176, label %114
    i64 1879048188, label %116
    i64 1879048189, label %118
    i64 10, label %119
  ]

108:                                              ; preds = %95
  %109 = inttoptr i64 %107 to i32*
  store i32* %109, i32** %7, align 8
  br label %120

110:                                              ; preds = %95
  %111 = inttoptr i64 %107 to %struct.Elf64_Sym*
  store %struct.Elf64_Sym* %111, %struct.Elf64_Sym** %3, align 8
  br label %120

112:                                              ; preds = %95
  %113 = inttoptr i64 %107 to i8*
  store i8* %113, i8** %4, align 8
  br label %120

114:                                              ; preds = %95
  %115 = inttoptr i64 %107 to i16*
  store i16* %115, i16** %5, align 8
  br label %120

116:                                              ; preds = %95
  %117 = inttoptr i64 %107 to %struct.Elf64_Verdef*
  store %struct.Elf64_Verdef* %117, %struct.Elf64_Verdef** %6, align 8
  br label %120

118:                                              ; preds = %95
  store i64 %106, i64* %9, align 8
  br label %120

119:                                              ; preds = %95
  store i64 %106, i64* %8, align 8
  br label %120

120:                                              ; preds = %95, %119, %118, %116, %114, %112, %110, %108
  %121 = phi i64 [ %96, %95 ], [ %106, %119 ], [ %96, %118 ], [ %96, %116 ], [ %96, %114 ], [ %96, %112 ], [ %96, %110 ], [ %96, %108 ]
  %122 = phi i64 [ %97, %95 ], [ %97, %119 ], [ %106, %118 ], [ %97, %116 ], [ %97, %114 ], [ %97, %112 ], [ %97, %110 ], [ %97, %108 ]
  %123 = phi %struct.Elf64_Verdef* [ %98, %95 ], [ %98, %119 ], [ %98, %118 ], [ %117, %116 ], [ %98, %114 ], [ %98, %112 ], [ %98, %110 ], [ %98, %108 ]
  %124 = phi i16* [ %99, %95 ], [ %99, %119 ], [ %99, %118 ], [ %99, %116 ], [ %115, %114 ], [ %99, %112 ], [ %99, %110 ], [ %99, %108 ]
  %125 = phi i8* [ %100, %95 ], [ %100, %119 ], [ %100, %118 ], [ %100, %116 ], [ %100, %114 ], [ %113, %112 ], [ %100, %110 ], [ %100, %108 ]
  %126 = phi %struct.Elf64_Sym* [ %101, %95 ], [ %101, %119 ], [ %101, %118 ], [ %101, %116 ], [ %101, %114 ], [ %101, %112 ], [ %111, %110 ], [ %101, %108 ]
  %127 = phi i32* [ %102, %95 ], [ %102, %119 ], [ %102, %118 ], [ %102, %116 ], [ %102, %114 ], [ %102, %112 ], [ %102, %110 ], [ %109, %108 ]
  %128 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %104, i64 1
  %129 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %128, i64 0, i32 0
  %130 = load i64, i64* %129, align 8
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %95

132:                                              ; preds = %120
  %133 = icmp eq i32* %127, null
  %134 = icmp eq %struct.Elf64_Sym* %126, null
  %135 = or i1 %133, %134
  %136 = icmp eq i8* %125, null
  %137 = or i1 %135, %136
  %138 = icmp eq i16* %124, null
  %139 = or i1 %137, %138
  %140 = icmp eq %struct.Elf64_Verdef* %123, null
  %141 = or i1 %139, %140
  %142 = icmp eq i64 %122, 0
  %143 = or i1 %141, %142
  %144 = icmp eq i64 %121, 0
  %145 = or i1 %143, %144
  br i1 %145, label %146, label %148

146:                                              ; preds = %85, %132
  %147 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %147, i8 0, i64 64, i1 false)
  store i64 -1, i64* %10, align 8
  br label %148

148:                                              ; preds = %132, %32, %24, %20, %16, %13, %83, %146, %28, %2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK4absl18debugging_internal11ElfMemImage13GetNumSymbolsEv(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds i32, i32* %3, i64 1
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.Elf64_Sym* @_ZNK4absl18debugging_internal11ElfMemImage9GetDynsymEi(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds i32, i32* %4, i64 1
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  %11 = icmp sgt i32 %10, %1
  br i1 %11, label %13, label %12, !prof !3

12:                                               ; preds = %9
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 97, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %13

13:                                               ; preds = %9, %12
  %14 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 1
  %15 = load %struct.Elf64_Sym*, %struct.Elf64_Sym** %14, align 8
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %15, i64 %16
  ret %struct.Elf64_Sym* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i16* @_ZNK4absl18debugging_internal11ElfMemImage9GetVersymEi(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds i32, i32* %4, i64 1
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  %11 = icmp sgt i32 %10, %1
  br i1 %11, label %13, label %12, !prof !3

12:                                               ; preds = %9
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 102, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %13

13:                                               ; preds = %9, %12
  %14 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 2
  %15 = load i16*, i16** %14, align 8
  %16 = sext i32 %1 to i64
  %17 = getelementptr inbounds i16, i16* %15, i64 %16
  ret i16* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.Elf64_Phdr* @_ZNK4absl18debugging_internal11ElfMemImage7GetPhdrEi(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 0
  %4 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %3, align 8
  %5 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %4, i64 0, i32 10
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = icmp sgt i32 %7, %1
  br i1 %8, label %11, label %9, !prof !3

9:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 107, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  %10 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %3, align 8
  br label %11

11:                                               ; preds = %2, %9
  %12 = phi %struct.Elf64_Ehdr* [ %4, %2 ], [ %10, %9 ]
  %13 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %12, i64 0, i32 5
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %12, i64 0, i32 9
  %16 = load i16, i16* %15, align 2
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %12, i64 0, i32 0, i64 %14
  %19 = zext i16 %16 to i64
  %20 = mul nsw i64 %19, %17
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = bitcast i8* %21 to %struct.Elf64_Phdr*
  ret %struct.Elf64_Phdr* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK4absl18debugging_internal11ElfMemImage9GetDynstrEj(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 6
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %3
  br i1 %6, label %8, label %7, !prof !3

7:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 115, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %8

8:                                                ; preds = %2, %7
  %9 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 5
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %3
  ret i8* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK4absl18debugging_internal11ElfMemImage10GetSymAddrEPK9Elf64_Sym(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, %struct.Elf64_Sym* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %1, i64 0, i32 3
  %4 = load i16, i16* %3, align 2
  %5 = add i16 %4, -1
  %6 = icmp ugt i16 %5, -258
  br i1 %6, label %7, label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %1, i64 0, i32 4
  %9 = bitcast i64* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  br label %27

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 8
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %1, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %20, label %17, !prof !3

17:                                               ; preds = %11
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 124, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #8
  %18 = load i64, i64* %14, align 8
  %19 = load i64, i64* %12, align 8
  br label %20

20:                                               ; preds = %11, %17
  %21 = phi i64 [ %13, %11 ], [ %19, %17 ]
  %22 = phi i64 [ %15, %11 ], [ %18, %17 ]
  %23 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 0
  %24 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %23, align 8
  %25 = sub i64 %22, %21
  %26 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %24, i64 0, i32 0, i64 %25
  br label %27

27:                                               ; preds = %20, %7
  %28 = phi i8* [ %10, %7 ], [ %26, %20 ]
  ret i8* %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.Elf64_Verdef* @_ZNK4absl18debugging_internal11ElfMemImage9GetVerdefEi(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp sgt i32 %1, -1
  br i1 %3, label %4, label %9, !prof !3

4:                                                ; preds = %2
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 7
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, %5
  br i1 %8, label %9, label %10, !prof !2

9:                                                ; preds = %2, %4
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 130, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %10

10:                                               ; preds = %4, %9
  %11 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 3
  %12 = load %struct.Elf64_Verdef*, %struct.Elf64_Verdef** %11, align 8
  %13 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %12, i64 0, i32 2
  %14 = load i16, i16* %13, align 4
  %15 = zext i16 %14 to i32
  %16 = icmp slt i32 %15, %1
  br i1 %16, label %17, label %44

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %12, i64 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %44, label %21

21:                                               ; preds = %17
  %22 = bitcast %struct.Elf64_Verdef* %12 to i8*
  br label %28

23:                                               ; preds = %28
  %24 = getelementptr inbounds i8, i8* %32, i64 16
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %21, %23
  %29 = phi i32 [ %19, %21 ], [ %26, %23 ]
  %30 = phi i8* [ %22, %21 ], [ %32, %23 ]
  %31 = zext i32 %29 to i64
  %32 = getelementptr inbounds i8, i8* %30, i64 %31
  %33 = getelementptr inbounds i8, i8* %32, i64 4
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 4
  %36 = zext i16 %35 to i32
  %37 = icmp slt i32 %36, %1
  br i1 %37, label %23, label %38

38:                                               ; preds = %28
  %39 = bitcast i8* %32 to %struct.Elf64_Verdef*
  %40 = zext i16 %35 to i32
  br label %44

41:                                               ; preds = %23
  %42 = zext i16 %35 to i32
  %43 = bitcast i8* %32 to %struct.Elf64_Verdef*
  br label %44

44:                                               ; preds = %17, %41, %38, %10
  %45 = phi %struct.Elf64_Verdef* [ %12, %10 ], [ %39, %38 ], [ %43, %41 ], [ %12, %17 ]
  %46 = phi i32 [ %15, %10 ], [ %40, %38 ], [ %42, %41 ], [ %15, %17 ]
  %47 = icmp eq i32 %46, %1
  %48 = select i1 %47, %struct.Elf64_Verdef* %45, %struct.Elf64_Verdef* null
  ret %struct.Elf64_Verdef* %48
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.Elf64_Verdaux* @_ZNK4absl18debugging_internal11ElfMemImage12GetVerdefAuxEPK12Elf64_Verdef(%"class.absl::debugging_internal::ElfMemImage"* nocapture readnone, %struct.Elf64_Verdef* readnone) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %1, i64 1
  %4 = bitcast %struct.Elf64_Verdef* %3 to %struct.Elf64_Verdaux*
  ret %struct.Elf64_Verdaux* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK4absl18debugging_internal11ElfMemImage9GetVerstrEj(%"class.absl::debugging_internal::ElfMemImage"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 6
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %3
  br i1 %6, label %8, label %7, !prof !3

7:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 148, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %8

8:                                                ; preds = %2, %7
  %9 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 5
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %3
  ret i8* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage12LookupSymbolEPKcS3_iPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"*, i8* nocapture readonly, i8* nocapture readonly, i32, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", align 8
  %7 = bitcast %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6, i64 0, i32 1
  %9 = bitcast %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 40, i1 false)
  store i32 0, i32* %8, align 8, !alias.scope !4
  %10 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6, i64 0, i32 2
  %11 = bitcast i8** %10 to %"class.absl::debugging_internal::ElfMemImage"**
  store %"class.absl::debugging_internal::ElfMemImage"* %0, %"class.absl::debugging_internal::ElfMemImage"** %11, align 8, !alias.scope !4
  call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nonnull %6, i32 0) #8
  %12 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %13 = load i32*, i32** %12, align 8, !noalias !7
  %14 = icmp eq i32* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds i32, i32* %13, i64 1
  %17 = load i32, i32* %16, align 4, !noalias !7
  br label %18

18:                                               ; preds = %5, %15
  %19 = phi i32 [ %17, %15 ], [ 0, %5 ]
  %20 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8*
  %21 = load i8*, i8** %10, align 8
  %22 = icmp ne i8* %21, %20
  %23 = load i32, i32* %8, align 8
  %24 = icmp ne i32 %23, %19
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %55

26:                                               ; preds = %18
  %27 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %6, i64 0, i32 0, i32 3
  br label %30

30:                                               ; preds = %26, %49
  %31 = load i8*, i8** %27, align 8
  %32 = tail call i32 @strcmp(i8* %31, i8* %1) #9
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = load i8*, i8** %28, align 8
  %36 = tail call i32 @strcmp(i8* %35, i8* %2) #9
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %34
  %39 = load %struct.Elf64_Sym*, %struct.Elf64_Sym** %29, align 8
  %40 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %39, i64 0, i32 1
  %41 = load i8, i8* %40, align 4
  %42 = and i8 %41, 15
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, %3
  br i1 %44, label %45, label %49

45:                                               ; preds = %38
  %46 = icmp eq %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %4, null
  br i1 %46, label %55, label %47

47:                                               ; preds = %45
  %48 = bitcast %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %48, i8* nonnull align 8 %7, i64 32, i1 false)
  br label %55

49:                                               ; preds = %38, %34, %30
  call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nonnull %6, i32 1) #8
  %50 = load i8*, i8** %10, align 8
  %51 = icmp ne i8* %50, %20
  %52 = load i32, i32* %8, align 8
  %53 = icmp ne i32 %52, %19
  %54 = or i1 %51, %53
  br i1 %54, label %30, label %55

55:                                               ; preds = %49, %18, %47, %45
  %56 = phi i1 [ true, %45 ], [ true, %47 ], [ false, %18 ], [ false, %49 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #8
  ret i1 %56
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4absl18debugging_internal11ElfMemImage5beginEv(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* noalias nocapture sret, %"class.absl::debugging_internal::ElfMemImage"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  %6 = bitcast i8** %5 to %"class.absl::debugging_internal::ElfMemImage"**
  store %"class.absl::debugging_internal::ElfMemImage"* %1, %"class.absl::debugging_internal::ElfMemImage"** %6, align 8
  tail call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i32 0)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK4absl18debugging_internal11ElfMemImage3endEv(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* noalias nocapture sret, %"class.absl::debugging_internal::ElfMemImage"*) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %1, i64 0, i32 4
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds i32, i32* %4, i64 1
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  %11 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  %13 = bitcast i8** %12 to %"class.absl::debugging_internal::ElfMemImage"**
  store %"class.absl::debugging_internal::ElfMemImage"* %1, %"class.absl::debugging_internal::ElfMemImage"** %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage14SymbolIteratorneERKS2_(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture readonly, %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture readonly dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %10, %12
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ true, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(32) %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* @_ZNK4absl18debugging_internal11ElfMemImage14SymbolIteratordeEv(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0
  ret %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %2
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* @_ZN4absl18debugging_internal11ElfMemImage14SymbolIteratorppEv(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* returned) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i32 1)
  ret %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage21LookupSymbolByAddressEPKvPNS1_10SymbolInfoE(%"class.absl::debugging_internal::ElfMemImage"*, i8* readnone, %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", align 8
  %5 = bitcast %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4, i64 0, i32 1
  %7 = bitcast %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  store i32 0, i32* %6, align 8, !alias.scope !10
  %8 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4, i64 0, i32 2
  %9 = bitcast i8** %8 to %"class.absl::debugging_internal::ElfMemImage"**
  store %"class.absl::debugging_internal::ElfMemImage"* %0, %"class.absl::debugging_internal::ElfMemImage"** %9, align 8, !alias.scope !10
  call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nonnull %4, i32 0) #8
  %10 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %0, i64 0, i32 4
  %11 = load i32*, i32** %10, align 8, !noalias !13
  %12 = icmp eq i32* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds i32, i32* %11, i64 1
  %15 = load i32, i32* %14, align 4, !noalias !13
  br label %16

16:                                               ; preds = %3, %13
  %17 = phi i32 [ %15, %13 ], [ 0, %3 ]
  %18 = bitcast %"class.absl::debugging_internal::ElfMemImage"* %0 to i8*
  %19 = load i8*, i8** %8, align 8
  %20 = icmp ne i8* %19, %18
  %21 = load i32, i32* %6, align 8
  %22 = icmp ne i32 %21, %17
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %50

24:                                               ; preds = %16
  %25 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4, i64 0, i32 0, i32 2
  %26 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %4, i64 0, i32 0, i32 3
  %27 = icmp eq %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %2, null
  %28 = bitcast %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %2 to i8*
  br label %29

29:                                               ; preds = %24, %44
  %30 = load i8*, i8** %25, align 8
  %31 = load %struct.Elf64_Sym*, %struct.Elf64_Sym** %26, align 8
  %32 = icmp ugt i8* %30, %1
  br i1 %32, label %44, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %31, i64 0, i32 5
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds i8, i8* %30, i64 %35
  %37 = icmp ugt i8* %36, %1
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  br i1 %27, label %50, label %39

39:                                               ; preds = %38
  %40 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %31, i64 0, i32 1
  %41 = load i8, i8* %40, align 4
  %42 = and i8 %41, -16
  %43 = icmp eq i8 %42, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %5, i64 32, i1 false)
  br i1 %43, label %50, label %44

44:                                               ; preds = %29, %39, %33
  call void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nonnull %4, i32 1) #8
  %45 = load i8*, i8** %8, align 8
  %46 = icmp ne i8* %45, %18
  %47 = load i32, i32* %6, align 8
  %48 = icmp ne i32 %47, %17
  %49 = or i1 %46, %48
  br i1 %49, label %29, label %50

50:                                               ; preds = %44, %38, %39, %16
  %51 = phi i1 [ false, %16 ], [ false, %44 ], [ true, %38 ], [ true, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #8
  ret i1 %51
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIteratorC2EPKvi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture, i8*, i32) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  store i32 %2, i32* %4, align 8
  %5 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  store i8* %1, i8** %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* @_ZNK4absl18debugging_internal11ElfMemImage14SymbolIteratorptEv(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* readnone) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0
  ret %"struct.absl::debugging_internal::ElfMemImage::SymbolInfo"* %2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4absl18debugging_internal11ElfMemImage14SymbolIteratoreqERKS2_(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture readonly, %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture readonly dereferenceable(48)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %1, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl18debugging_internal11ElfMemImage14SymbolIterator6UpdateEi(%"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 2
  %4 = bitcast i8** %3 to %"class.absl::debugging_internal::ElfMemImage"**
  %5 = load %"class.absl::debugging_internal::ElfMemImage"*, %"class.absl::debugging_internal::ElfMemImage"** %4, align 8
  %6 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 0
  %7 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %6, align 8
  %8 = icmp ne %struct.Elf64_Ehdr* %7, null
  %9 = icmp eq i32 %1, 0
  %10 = or i1 %9, %8
  br i1 %10, label %13, label %11, !prof !3

11:                                               ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 340, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0)) #8
  %12 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %6, align 8
  br label %13

13:                                               ; preds = %2, %11
  %14 = phi %struct.Elf64_Ehdr* [ %7, %2 ], [ %12, %11 ]
  %15 = icmp eq %struct.Elf64_Ehdr* %14, null
  br i1 %15, label %179, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = add nsw i32 %18, %1
  store i32 %19, i32* %17, align 8
  %20 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 4
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds i32, i32* %21, i64 1
  %25 = load i32, i32* %24, align 4
  br label %26

26:                                               ; preds = %16, %23
  %27 = phi i32 [ %25, %23 ], [ 0, %16 ]
  %28 = icmp slt i32 %19, %27
  br i1 %28, label %35, label %29

29:                                               ; preds = %26
  br i1 %22, label %33, label %30

30:                                               ; preds = %29
  %31 = getelementptr inbounds i32, i32* %21, i64 1
  %32 = load i32, i32* %31, align 4
  br label %33

33:                                               ; preds = %29, %30
  %34 = phi i32 [ %32, %30 ], [ 0, %29 ]
  store i32 %34, i32* %17, align 8
  br label %179

35:                                               ; preds = %26
  br i1 %22, label %39, label %36

36:                                               ; preds = %35
  %37 = getelementptr inbounds i32, i32* %21, i64 1
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %36, %35
  %40 = phi i32 [ %38, %36 ], [ 0, %35 ]
  %41 = icmp sgt i32 %40, %19
  br i1 %41, label %45, label %42, !prof !3

42:                                               ; preds = %39
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 97, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  %43 = load i32, i32* %17, align 8
  %44 = load i32*, i32** %20, align 8
  br label %45

45:                                               ; preds = %39, %42
  %46 = phi i32* [ %21, %39 ], [ %44, %42 ]
  %47 = phi i32 [ %19, %39 ], [ %43, %42 ]
  %48 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 1
  %49 = load %struct.Elf64_Sym*, %struct.Elf64_Sym** %48, align 8
  %50 = sext i32 %19 to i64
  %51 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %49, i64 %50
  %52 = icmp eq i32* %46, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds i32, i32* %46, i64 1
  %55 = load i32, i32* %54, align 4
  br label %56

56:                                               ; preds = %53, %45
  %57 = phi i32 [ %55, %53 ], [ 0, %45 ]
  %58 = icmp sgt i32 %57, %47
  br i1 %58, label %60, label %59, !prof !3

59:                                               ; preds = %56
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 102, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %60

60:                                               ; preds = %56, %59
  %61 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 2
  %62 = load i16*, i16** %61, align 8
  %63 = sext i32 %47 to i64
  %64 = getelementptr inbounds i16, i16* %62, i64 %63
  %65 = icmp eq %struct.Elf64_Sym* %51, null
  %66 = icmp eq i16* %64, null
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %69, !prof !2

68:                                               ; preds = %60
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 351, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0)) #8
  br label %69

69:                                               ; preds = %68, %60
  %70 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %51, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 6
  %74 = load i64, i64* %73, align 8
  %75 = icmp ugt i64 %74, %72
  br i1 %75, label %77, label %76, !prof !3

76:                                               ; preds = %69
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 115, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %77

77:                                               ; preds = %69, %76
  %78 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 5
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 %72
  %81 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %49, i64 %50, i32 3
  %82 = load i16, i16* %81, align 2
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %149, label %84

84:                                               ; preds = %77
  %85 = load i16, i16* %64, align 2
  %86 = and i16 %85, 32767
  %87 = zext i16 %86 to i32
  %88 = zext i16 %86 to i64
  %89 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 7
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %90, %88
  br i1 %91, label %92, label %93, !prof !2

92:                                               ; preds = %84
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 130, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %93

93:                                               ; preds = %92, %84
  %94 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 3
  %95 = load %struct.Elf64_Verdef*, %struct.Elf64_Verdef** %94, align 8
  %96 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %95, i64 0, i32 2
  %97 = load i16, i16* %96, align 4
  %98 = zext i16 %97 to i32
  %99 = icmp ult i16 %97, %86
  br i1 %99, label %100, label %126

100:                                              ; preds = %93
  %101 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %95, i64 0, i32 6
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %126, label %104

104:                                              ; preds = %100
  %105 = bitcast %struct.Elf64_Verdef* %95 to i8*
  br label %111

106:                                              ; preds = %111
  %107 = getelementptr inbounds i8, i8* %115, i64 16
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %123, label %111

111:                                              ; preds = %104, %106
  %112 = phi i32 [ %109, %106 ], [ %102, %104 ]
  %113 = phi i8* [ %115, %106 ], [ %105, %104 ]
  %114 = zext i32 %112 to i64
  %115 = getelementptr inbounds i8, i8* %113, i64 %114
  %116 = getelementptr inbounds i8, i8* %115, i64 4
  %117 = bitcast i8* %116 to i16*
  %118 = load i16, i16* %117, align 4
  %119 = icmp ult i16 %118, %86
  br i1 %119, label %106, label %120

120:                                              ; preds = %111
  %121 = bitcast i8* %115 to %struct.Elf64_Verdef*
  %122 = zext i16 %118 to i32
  br label %126

123:                                              ; preds = %106
  %124 = zext i16 %118 to i32
  %125 = bitcast i8* %115 to %struct.Elf64_Verdef*
  br label %126

126:                                              ; preds = %123, %100, %120, %93
  %127 = phi %struct.Elf64_Verdef* [ %95, %93 ], [ %121, %120 ], [ %95, %100 ], [ %125, %123 ]
  %128 = phi i32 [ %98, %93 ], [ %122, %120 ], [ %98, %100 ], [ %124, %123 ]
  %129 = icmp ne i32 %128, %87
  %130 = icmp eq %struct.Elf64_Verdef* %127, null
  %131 = or i1 %130, %129
  br i1 %131, label %149, label %132

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %127, i64 0, i32 3
  %134 = load i16, i16* %133, align 2
  %135 = add i16 %134, -1
  %136 = icmp ugt i16 %135, 1
  br i1 %136, label %137, label %138, !prof !2

137:                                              ; preds = %132
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 368, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #8
  br label %138

138:                                              ; preds = %137, %132
  %139 = getelementptr inbounds %struct.Elf64_Verdef, %struct.Elf64_Verdef* %127, i64 1
  %140 = bitcast %struct.Elf64_Verdef* %139 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = zext i32 %141 to i64
  %143 = load i64, i64* %73, align 8
  %144 = icmp ugt i64 %143, %142
  br i1 %144, label %146, label %145, !prof !3

145:                                              ; preds = %138
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 148, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %146

146:                                              ; preds = %138, %145
  %147 = load i8*, i8** %78, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 %142
  br label %149

149:                                              ; preds = %126, %77, %146
  %150 = phi i8* [ %148, %146 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), %77 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), %126 ]
  %151 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0, i32 0
  store i8* %80, i8** %151, align 8
  %152 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0, i32 1
  store i8* %150, i8** %152, align 8
  %153 = load i16, i16* %81, align 2
  %154 = add i16 %153, -1
  %155 = icmp ugt i16 %154, -258
  br i1 %155, label %156, label %160

156:                                              ; preds = %149
  %157 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %49, i64 %50, i32 4
  %158 = bitcast i64* %157 to i8**
  %159 = load i8*, i8** %158, align 8
  br label %175

160:                                              ; preds = %149
  %161 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage", %"class.absl::debugging_internal::ElfMemImage"* %5, i64 0, i32 8
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %struct.Elf64_Sym, %struct.Elf64_Sym* %49, i64 %50, i32 4
  %164 = load i64, i64* %163, align 8
  %165 = icmp ult i64 %162, %164
  br i1 %165, label %169, label %166, !prof !3

166:                                              ; preds = %160
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 53), i32 124, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #8
  %167 = load i64, i64* %163, align 8
  %168 = load i64, i64* %161, align 8
  br label %169

169:                                              ; preds = %166, %160
  %170 = phi i64 [ %162, %160 ], [ %168, %166 ]
  %171 = phi i64 [ %164, %160 ], [ %167, %166 ]
  %172 = load %struct.Elf64_Ehdr*, %struct.Elf64_Ehdr** %6, align 8
  %173 = sub i64 %171, %170
  %174 = getelementptr inbounds %struct.Elf64_Ehdr, %struct.Elf64_Ehdr* %172, i64 0, i32 0, i64 %173
  br label %175

175:                                              ; preds = %156, %169
  %176 = phi i8* [ %159, %156 ], [ %174, %169 ]
  %177 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0, i32 2
  store i8* %176, i8** %177, align 8
  %178 = getelementptr inbounds %"class.absl::debugging_internal::ElfMemImage::SymbolIterator", %"class.absl::debugging_internal::ElfMemImage::SymbolIterator"* %0, i64 0, i32 0, i32 3
  store %struct.Elf64_Sym* %51, %struct.Elf64_Sym** %178, align 8
  br label %179

179:                                              ; preds = %13, %175, %33
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK4absl18debugging_internal11ElfMemImage5beginEv: argument 0"}
!6 = distinct !{!6, !"_ZNK4absl18debugging_internal11ElfMemImage5beginEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK4absl18debugging_internal11ElfMemImage3endEv: argument 0"}
!9 = distinct !{!9, !"_ZNK4absl18debugging_internal11ElfMemImage3endEv"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZNK4absl18debugging_internal11ElfMemImage5beginEv: argument 0"}
!12 = distinct !{!12, !"_ZNK4absl18debugging_internal11ElfMemImage5beginEv"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNK4absl18debugging_internal11ElfMemImage3endEv: argument 0"}
!15 = distinct !{!15, !"_ZNK4absl18debugging_internal11ElfMemImage3endEv"}
