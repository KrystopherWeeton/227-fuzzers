; ModuleID = '../../base/pickle.cc'
source_filename = "../../base/pickle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::PickleIterator" = type { i8*, i64, i64 }
%"class.base::Pickle" = type { i32 (...)**, %"struct.base::Pickle::Header"*, i64, i64, i64 }
%"struct.base::Pickle::Header" = type { i32 }
%"class.base::Pickle::Attachment" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [1 x i8] }
%"class.base::BasicStringPiece.10" = type { i16*, i64 }
%"class.base::span" = type { %"struct.base::internal::ExtentStorage", i8* }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%class.scoped_refptr = type { %"class.base::Pickle::Attachment"* }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZN4base6Pickle16WriteBytesStaticILm2EEEvPKv = comdat any

$_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv = comdat any

$_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

@_ZN4base6Pickle12kPayloadUnitE = hidden local_unnamed_addr constant i32 64, align 4
@_ZTVN4base6Pickle10AttachmentE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::Pickle::Attachment"*)* @_ZN4base6Pickle10AttachmentD2Ev to i8*), i8* bitcast (void (%"class.base::Pickle::Attachment"*)* @_ZN4base6Pickle10AttachmentD0Ev to i8*)] }, align 8
@_ZTVN4base6PickleE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::Pickle"*)* @_ZN4base6PickleD2Ev to i8*), i8* bitcast (void (%"class.base::Pickle"*)* @_ZN4base6PickleD0Ev to i8*), i8* bitcast (i1 (%"class.base::Pickle"*, %"class.base::Pickle::Attachment"*)* @_ZN4base6Pickle15WriteAttachmentE13scoped_refptrINS0_10AttachmentEE to i8*), i8* bitcast (i1 (%"class.base::Pickle"*, %"class.base::PickleIterator"*, %class.scoped_refptr*)* @_ZNK4base6Pickle14ReadAttachmentEPNS_14PickleIteratorEP13scoped_refptrINS0_10AttachmentEE to i8*), i8* bitcast (i1 (%"class.base::Pickle"*)* @_ZNK4base6Pickle14HasAttachmentsEv to i8*)] }, align 8
@.str = private unnamed_addr constant [44 x i8] c"capacity_after_header_ != kCapacityReadOnly\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"../../base/pickle.cc\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"p\00", align 1

@_ZN4base14PickleIteratorC1ERKNS_6PickleE = hidden unnamed_addr alias void (%"class.base::PickleIterator"*, %"class.base::Pickle"*), void (%"class.base::PickleIterator"*, %"class.base::Pickle"*)* @_ZN4base14PickleIteratorC2ERKNS_6PickleE
@_ZN4base6Pickle10AttachmentC1Ev = hidden unnamed_addr alias void (%"class.base::Pickle::Attachment"*), void (%"class.base::Pickle::Attachment"*)* @_ZN4base6Pickle10AttachmentC2Ev
@_ZN4base6Pickle10AttachmentD1Ev = hidden unnamed_addr alias void (%"class.base::Pickle::Attachment"*), void (%"class.base::Pickle::Attachment"*)* @_ZN4base6Pickle10AttachmentD2Ev
@_ZN4base6PickleC1Ev = hidden unnamed_addr alias void (%"class.base::Pickle"*), void (%"class.base::Pickle"*)* @_ZN4base6PickleC2Ev
@_ZN4base6PickleC1Ei = hidden unnamed_addr alias void (%"class.base::Pickle"*, i32), void (%"class.base::Pickle"*, i32)* @_ZN4base6PickleC2Ei
@_ZN4base6PickleC1EPKcm = hidden unnamed_addr alias void (%"class.base::Pickle"*, i8*, i64), void (%"class.base::Pickle"*, i8*, i64)* @_ZN4base6PickleC2EPKcm
@_ZN4base6PickleC1ERKS0_ = hidden unnamed_addr alias void (%"class.base::Pickle"*, %"class.base::Pickle"*), void (%"class.base::Pickle"*, %"class.base::Pickle"*)* @_ZN4base6PickleC2ERKS0_
@_ZN4base6PickleD1Ev = hidden unnamed_addr alias void (%"class.base::Pickle"*), void (%"class.base::Pickle"*)* @_ZN4base6PickleD2Ev

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base6Pickle16WriteBytesStaticILm2EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %21

9:                                                ; preds = %2
  %10 = shl i64 %7, 1
  %11 = icmp ugt i64 %10, 4096
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = add i64 %10, 4095
  %14 = and i64 %13, -4096
  %15 = add i64 %14, -64
  br label %16

16:                                               ; preds = %12, %9
  %17 = phi i64 [ %15, %12 ], [ %10, %9 ]
  %18 = icmp ult i64 %17, %5
  %19 = select i1 %18, i64 %5, i64 %17
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %19) #15
  %20 = load i64, i64* %3, align 8
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi i64 [ %20, %16 ], [ %4, %2 ]
  %23 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %24 = bitcast %"struct.base::Pickle::Header"** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = getelementptr inbounds i8, i8* %28, i64 %22
  %30 = getelementptr inbounds i8, i8* %29, i64 2
  %31 = bitcast i8* %30 to i16*
  store i16 0, i16* %31, align 1
  %32 = trunc i64 %5 to i32
  %33 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %23, align 8
  %34 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %33, i64 0, i32 0
  store i32 %32, i32* %34, align 4
  store i64 %5, i64* %3, align 8
  %35 = bitcast i8* %1 to i16*
  %36 = bitcast i8* %29 to i16*
  %37 = load i16, i16* %35, align 1
  store i16 %37, i16* %36, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base6Pickle16WriteBytesStaticILm4EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 4
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %21

9:                                                ; preds = %2
  %10 = shl i64 %7, 1
  %11 = icmp ugt i64 %10, 4096
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = add i64 %10, 4095
  %14 = and i64 %13, -4096
  %15 = add i64 %14, -64
  br label %16

16:                                               ; preds = %12, %9
  %17 = phi i64 [ %15, %12 ], [ %10, %9 ]
  %18 = icmp ult i64 %17, %5
  %19 = select i1 %18, i64 %5, i64 %17
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %19) #15
  %20 = load i64, i64* %3, align 8
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi i64 [ %20, %16 ], [ %4, %2 ]
  %23 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %24 = bitcast %"struct.base::Pickle::Header"** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = getelementptr inbounds i8, i8* %28, i64 %22
  %30 = trunc i64 %5 to i32
  %31 = bitcast i8* %25 to i32*
  store i32 %30, i32* %31, align 4
  store i64 %5, i64* %3, align 8
  %32 = bitcast i8* %1 to i32*
  %33 = bitcast i8* %29 to i32*
  %34 = load i32, i32* %32, align 1
  store i32 %34, i32* %33, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base6Pickle16WriteBytesStaticILm8EEEvPKv(%"class.base::Pickle"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 8
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %9, label %21

9:                                                ; preds = %2
  %10 = shl i64 %7, 1
  %11 = icmp ugt i64 %10, 4096
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = add i64 %10, 4095
  %14 = and i64 %13, -4096
  %15 = add i64 %14, -64
  br label %16

16:                                               ; preds = %12, %9
  %17 = phi i64 [ %15, %12 ], [ %10, %9 ]
  %18 = icmp ult i64 %17, %5
  %19 = select i1 %18, i64 %5, i64 %17
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %19) #15
  %20 = load i64, i64* %3, align 8
  br label %21

21:                                               ; preds = %2, %16
  %22 = phi i64 [ %20, %16 ], [ %4, %2 ]
  %23 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %24 = bitcast %"struct.base::Pickle::Header"** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = getelementptr inbounds i8, i8* %28, i64 %22
  %30 = trunc i64 %5 to i32
  %31 = bitcast i8* %25 to i32*
  store i32 %30, i32* %31, align 4
  store i64 %5, i64* %3, align 8
  %32 = bitcast i8* %1 to i64*
  %33 = bitcast i8* %29 to i64*
  %34 = load i64, i64* %32, align 1
  store i64 %34, i64* %33, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base14PickleIteratorC2ERKNS_6PickleE(%"class.base::PickleIterator"* nocapture, %"class.base::Pickle"* nocapture readonly dereferenceable(40)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 1
  %5 = bitcast %"struct.base::Pickle::Header"** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 %8
  store i8* %9, i8** %3, align 8
  %10 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %12 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %4, align 8
  %13 = icmp eq %"struct.base::Pickle::Header"* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %12, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  br label %18

18:                                               ; preds = %2, %14
  %19 = phi i64 [ %17, %14 ], [ 0, %2 ]
  store i64 %19, i64* %11, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZN4base14PickleIterator24GetReadPointerAndAdvanceEi(%"class.base::PickleIterator"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = icmp slt i32 %1, 0
  %4 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  br i1 %3, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sext i32 %1 to i64
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  store i64 %5, i64* %13, align 8
  br label %23

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %8
  %18 = add nuw nsw i64 %10, 3
  %19 = and i64 %18, -4
  %20 = icmp ult i64 %9, %19
  %21 = add i64 %8, %19
  %22 = select i1 %20, i64 %5, i64 %21
  store i64 %22, i64* %7, align 8
  br label %23

23:                                               ; preds = %14, %12
  %24 = phi i8* [ null, %12 ], [ %17, %14 ]
  ret i8* %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator8ReadBoolEPb(%"class.base::PickleIterator"* nocapture, i8* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %20

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %6
  %13 = sub i64 %4, %6
  %14 = icmp ult i64 %13, 4
  %15 = add i64 %6, 4
  %16 = select i1 %14, i64 %4, i64 %15
  store i64 %16, i64* %5, align 8
  %17 = icmp eq i8* %12, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %9
  %19 = load i8, i8* %12, align 1, !range !2
  store i8 %19, i8* %1, align 1
  br label %20

20:                                               ; preds = %8, %9, %18
  %21 = phi i1 [ true, %18 ], [ false, %9 ], [ false, %8 ]
  ret i1 %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator7ReadIntEPi(%"class.base::PickleIterator"* nocapture, i32* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %1, align 4
  br label %19

19:                                               ; preds = %9, %10, %16
  %20 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator8ReadLongEPl(%"class.base::PickleIterator"* nocapture, i64* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 8
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i64*
  %18 = load i64, i64* %17, align 1
  store i64 %18, i64* %1, align 8
  br label %19

19:                                               ; preds = %9, %10, %16
  %20 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator10ReadUInt16EPt(%"class.base::PickleIterator"* nocapture, i16* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %21

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = icmp ult i64 %7, 4
  %15 = add i64 %6, 4
  %16 = select i1 %14, i64 %4, i64 %15
  store i64 %16, i64* %5, align 8
  %17 = icmp eq i8* %13, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %10
  %19 = bitcast i8* %13 to i16*
  %20 = load i16, i16* %19, align 2
  store i16 %20, i16* %1, align 2
  br label %21

21:                                               ; preds = %9, %10, %18
  %22 = phi i1 [ true, %18 ], [ false, %10 ], [ false, %9 ]
  ret i1 %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator10ReadUInt32EPj(%"class.base::PickleIterator"* nocapture, i32* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %1, align 4
  br label %19

19:                                               ; preds = %9, %10, %16
  %20 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator9ReadInt64EPl(%"class.base::PickleIterator"* nocapture, i64* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 8
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i64*
  %18 = load i64, i64* %17, align 1
  store i64 %18, i64* %1, align 8
  br label %19

19:                                               ; preds = %9, %10, %16
  %20 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator10ReadUInt64EPm(%"class.base::PickleIterator"* nocapture, i64* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 8
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i64*
  %18 = load i64, i64* %17, align 1
  store i64 %18, i64* %1, align 8
  br label %19

19:                                               ; preds = %9, %10, %16
  %20 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator9ReadFloatEPf(%"class.base::PickleIterator"* nocapture, float* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %20

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = bitcast float* %1 to i32*
  %19 = load i32, i32* %17, align 1
  store i32 %19, i32* %18, align 4
  br label %20

20:                                               ; preds = %9, %10, %16
  %21 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator10ReadDoubleEPd(%"class.base::PickleIterator"* nocapture, double* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 8
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %20

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 8
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i64*
  %18 = bitcast double* %1 to i64*
  %19 = load i64, i64* %17, align 1
  store i64 %19, i64* %18, align 8
  br label %20

20:                                               ; preds = %9, %10, %16
  %21 = phi i1 [ true, %16 ], [ false, %10 ], [ false, %9 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator10ReadStringEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::PickleIterator"* nocapture, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %57

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %57, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = sub i64 %4, %14
  %22 = sext i32 %18 to i64
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %16, %20
  store i64 %4, i64* %5, align 8
  br label %57

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %12, i64 %14
  %27 = add nuw nsw i64 %22, 3
  %28 = and i64 %27, -4
  %29 = icmp ult i64 %21, %28
  %30 = add i64 %14, %28
  %31 = select i1 %29, i64 %4, i64 %30
  store i64 %31, i64* %5, align 8
  %32 = icmp eq i8* %26, null
  br i1 %32, label %57, label %33

33:                                               ; preds = %25
  %34 = tail call i1 @llvm.is.constant.i64(i64 %22) #15
  %35 = icmp ult i32 %18, 23
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %55

37:                                               ; preds = %33
  %38 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  br label %49

46:                                               ; preds = %37
  %47 = trunc i32 %18 to i8
  store i8 %47, i8* %39, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %49

49:                                               ; preds = %46, %42
  %50 = phi i8* [ %45, %42 ], [ %48, %46 ]
  %51 = icmp eq i32 %18, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %49
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %50, i8* nonnull align 1 %26, i64 %22, i1 false) #15
  br label %53

53:                                               ; preds = %52, %49
  %54 = getelementptr inbounds i8, i8* %50, i64 %22
  store i8 0, i8* %54, align 1
  br label %57

55:                                               ; preds = %33
  %56 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %1, i8* nonnull %26, i64 %22) #15
  br label %57

57:                                               ; preds = %9, %10, %55, %53, %24, %25
  %58 = phi i1 [ false, %25 ], [ false, %24 ], [ true, %53 ], [ true, %55 ], [ false, %10 ], [ false, %9 ]
  ret i1 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator15ReadStringPieceEPNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::PickleIterator"* nocapture, %"class.base::BasicStringPiece"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %36

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %36, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = sub i64 %4, %14
  %22 = sext i32 %18 to i64
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %16, %20
  store i64 %4, i64* %5, align 8
  br label %36

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %12, i64 %14
  %27 = add nuw nsw i64 %22, 3
  %28 = and i64 %27, -4
  %29 = icmp ult i64 %21, %28
  %30 = add i64 %14, %28
  %31 = select i1 %29, i64 %4, i64 %30
  store i64 %31, i64* %5, align 8
  %32 = icmp eq i8* %26, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  store i8* %26, i8** %34, align 8
  %35 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  store i64 %22, i64* %35, align 8
  br label %36

36:                                               ; preds = %9, %10, %24, %33, %25
  %37 = phi i1 [ true, %33 ], [ false, %25 ], [ false, %24 ], [ false, %10 ], [ false, %9 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator12ReadString16EPNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.base::PickleIterator"* nocapture, %"class.std::__1::basic_string.1"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %694

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %694, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %694, !prof !3

20:                                               ; preds = %16
  %21 = zext i32 %18 to i64
  %22 = icmp ult i32 %18, 1073741824
  br i1 %22, label %23, label %694, !prof !4

23:                                               ; preds = %20
  %24 = and i32 %18, 1073741824
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = sub i64 %4, %14
  %28 = shl i64 %21, 33
  %29 = ashr exact i64 %28, 32
  %30 = icmp ult i64 %27, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %23, %26
  store i64 %4, i64* %5, align 8
  br label %694

32:                                               ; preds = %26
  %33 = getelementptr inbounds i8, i8* %12, i64 %14
  %34 = add nuw nsw i64 %29, 3
  %35 = and i64 %34, -4
  %36 = icmp ult i64 %27, %35
  %37 = add i64 %14, %35
  %38 = select i1 %36, i64 %4, i64 %37
  store i64 %38, i64* %5, align 8
  %39 = icmp eq i8* %33, null
  br i1 %39, label %694, label %40

40:                                               ; preds = %32
  %41 = bitcast i8* %33 to i16*
  %42 = sext i32 %18 to i64
  %43 = tail call i1 @llvm.is.constant.i64(i64 %42) #15
  %44 = icmp ult i32 %18, 11
  %45 = and i1 %44, %43
  %46 = bitcast %"class.std::__1::basic_string.1"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %45, label %50, label %361

50:                                               ; preds = %40
  br i1 %49, label %51, label %55

51:                                               ; preds = %50
  %52 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %42, i64* %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  br label %58

55:                                               ; preds = %50
  %56 = trunc i32 %18 to i8
  store i8 %56, i8* %47, align 1
  %57 = bitcast %"class.std::__1::basic_string.1"* %1 to i16*
  br label %58

58:                                               ; preds = %55, %51
  %59 = phi i16* [ %54, %51 ], [ %57, %55 ]
  %60 = bitcast i16* %59 to i8*
  %61 = icmp eq i32 %18, 0
  br i1 %61, label %359, label %62

62:                                               ; preds = %58
  %63 = icmp ult i16* %59, %41
  br i1 %63, label %64, label %211

64:                                               ; preds = %62
  %65 = icmp ult i32 %18, 16
  br i1 %65, label %158, label %66

66:                                               ; preds = %64
  %67 = getelementptr i16, i16* %59, i64 %42
  %68 = bitcast i16* %67 to i8*
  %69 = shl nsw i64 %42, 1
  %70 = add i64 %6, %69
  %71 = add i64 %70, 4
  %72 = getelementptr i8, i8* %12, i64 %71
  %73 = icmp ugt i8* %72, %60
  %74 = icmp ult i8* %33, %68
  %75 = and i1 %73, %74
  br i1 %75, label %158, label %76

76:                                               ; preds = %66
  %77 = and i64 %42, -16
  %78 = sub nsw i64 %42, %77
  %79 = getelementptr i16, i16* %41, i64 %77
  %80 = getelementptr i16, i16* %59, i64 %77
  %81 = add nsw i64 %77, -16
  %82 = lshr exact i64 %81, 4
  %83 = add nuw nsw i64 %82, 1
  %84 = and i64 %83, 3
  %85 = icmp ult i64 %81, 48
  br i1 %85, label %137, label %86

86:                                               ; preds = %76
  %87 = sub nsw i64 %83, %84
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %134, %88 ]
  %90 = phi i64 [ %87, %86 ], [ %135, %88 ]
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = getelementptr i16, i16* %59, i64 %89
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !5
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !5
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !8, !noalias !5
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !8, !noalias !5
  %101 = or i64 %89, 16
  %102 = getelementptr i16, i16* %41, i64 %101
  %103 = getelementptr i16, i16* %59, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !5
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !5
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !8, !noalias !5
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !8, !noalias !5
  %112 = or i64 %89, 32
  %113 = getelementptr i16, i16* %41, i64 %112
  %114 = getelementptr i16, i16* %59, i64 %112
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !5
  %117 = getelementptr i16, i16* %113, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !5
  %120 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %120, align 2, !alias.scope !8, !noalias !5
  %121 = getelementptr i16, i16* %114, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !8, !noalias !5
  %123 = or i64 %89, 48
  %124 = getelementptr i16, i16* %41, i64 %123
  %125 = getelementptr i16, i16* %59, i64 %123
  %126 = bitcast i16* %124 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !5
  %128 = getelementptr i16, i16* %124, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !5
  %131 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2, !alias.scope !8, !noalias !5
  %132 = getelementptr i16, i16* %125, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2, !alias.scope !8, !noalias !5
  %134 = add i64 %89, 64
  %135 = add i64 %90, -4
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %88, !llvm.loop !10

137:                                              ; preds = %88, %76
  %138 = phi i64 [ 0, %76 ], [ %134, %88 ]
  %139 = icmp eq i64 %84, 0
  br i1 %139, label %156, label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ %153, %140 ], [ %138, %137 ]
  %142 = phi i64 [ %154, %140 ], [ %84, %137 ]
  %143 = getelementptr i16, i16* %41, i64 %141
  %144 = getelementptr i16, i16* %59, i64 %141
  %145 = bitcast i16* %143 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2, !alias.scope !5
  %147 = getelementptr i16, i16* %143, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !5
  %150 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %150, align 2, !alias.scope !8, !noalias !5
  %151 = getelementptr i16, i16* %144, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %152, align 2, !alias.scope !8, !noalias !5
  %153 = add i64 %141, 16
  %154 = add i64 %142, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %140, !llvm.loop !12

156:                                              ; preds = %140, %137
  %157 = icmp eq i64 %77, %42
  br i1 %157, label %359, label %158

158:                                              ; preds = %156, %66, %64
  %159 = phi i64 [ %42, %66 ], [ %42, %64 ], [ %78, %156 ]
  %160 = phi i16* [ %41, %66 ], [ %41, %64 ], [ %79, %156 ]
  %161 = phi i16* [ %59, %66 ], [ %59, %64 ], [ %80, %156 ]
  %162 = add nsw i64 %159, -1
  %163 = and i64 %159, 7
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %176, label %165

165:                                              ; preds = %158, %165
  %166 = phi i64 [ %171, %165 ], [ %159, %158 ]
  %167 = phi i16* [ %173, %165 ], [ %160, %158 ]
  %168 = phi i16* [ %172, %165 ], [ %161, %158 ]
  %169 = phi i64 [ %174, %165 ], [ %163, %158 ]
  %170 = load i16, i16* %167, align 2
  store i16 %170, i16* %168, align 2
  %171 = add i64 %166, -1
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = getelementptr inbounds i16, i16* %167, i64 1
  %174 = add i64 %169, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %165, !llvm.loop !14

176:                                              ; preds = %165, %158
  %177 = phi i64 [ %159, %158 ], [ %171, %165 ]
  %178 = phi i16* [ %160, %158 ], [ %173, %165 ]
  %179 = phi i16* [ %161, %158 ], [ %172, %165 ]
  %180 = icmp ult i64 %162, 7
  br i1 %180, label %359, label %181

181:                                              ; preds = %176, %181
  %182 = phi i64 [ %207, %181 ], [ %177, %176 ]
  %183 = phi i16* [ %209, %181 ], [ %178, %176 ]
  %184 = phi i16* [ %208, %181 ], [ %179, %176 ]
  %185 = load i16, i16* %183, align 2
  store i16 %185, i16* %184, align 2
  %186 = getelementptr inbounds i16, i16* %184, i64 1
  %187 = getelementptr inbounds i16, i16* %183, i64 1
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %184, i64 2
  %190 = getelementptr inbounds i16, i16* %183, i64 2
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = getelementptr inbounds i16, i16* %184, i64 3
  %193 = getelementptr inbounds i16, i16* %183, i64 3
  %194 = load i16, i16* %193, align 2
  store i16 %194, i16* %192, align 2
  %195 = getelementptr inbounds i16, i16* %184, i64 4
  %196 = getelementptr inbounds i16, i16* %183, i64 4
  %197 = load i16, i16* %196, align 2
  store i16 %197, i16* %195, align 2
  %198 = getelementptr inbounds i16, i16* %184, i64 5
  %199 = getelementptr inbounds i16, i16* %183, i64 5
  %200 = load i16, i16* %199, align 2
  store i16 %200, i16* %198, align 2
  %201 = getelementptr inbounds i16, i16* %184, i64 6
  %202 = getelementptr inbounds i16, i16* %183, i64 6
  %203 = load i16, i16* %202, align 2
  store i16 %203, i16* %201, align 2
  %204 = getelementptr inbounds i16, i16* %184, i64 7
  %205 = getelementptr inbounds i16, i16* %183, i64 7
  %206 = load i16, i16* %205, align 2
  store i16 %206, i16* %204, align 2
  %207 = add i64 %182, -8
  %208 = getelementptr inbounds i16, i16* %184, i64 8
  %209 = getelementptr inbounds i16, i16* %183, i64 8
  %210 = icmp eq i64 %207, 0
  br i1 %210, label %359, label %181, !llvm.loop !15

211:                                              ; preds = %62
  %212 = icmp ugt i16* %59, %41
  br i1 %212, label %213, label %359

213:                                              ; preds = %211
  %214 = getelementptr inbounds i16, i16* %41, i64 %42
  %215 = getelementptr inbounds i16, i16* %59, i64 %42
  %216 = icmp ult i32 %18, 16
  br i1 %216, label %306, label %217

217:                                              ; preds = %213
  %218 = bitcast i16* %215 to i8*
  %219 = shl nsw i64 %42, 1
  %220 = add i64 %6, %219
  %221 = add i64 %220, 4
  %222 = getelementptr i8, i8* %12, i64 %221
  %223 = icmp ugt i8* %222, %60
  %224 = icmp ult i8* %33, %218
  %225 = and i1 %223, %224
  br i1 %225, label %306, label %226

226:                                              ; preds = %217
  %227 = and i64 %42, -16
  %228 = sub nsw i64 %42, %227
  %229 = sub nsw i64 0, %227
  %230 = getelementptr i16, i16* %214, i64 %229
  %231 = sub nsw i64 0, %227
  %232 = getelementptr i16, i16* %215, i64 %231
  %233 = add nsw i64 %227, -16
  %234 = lshr exact i64 %233, 4
  %235 = add nuw nsw i64 %234, 1
  %236 = and i64 %235, 1
  %237 = icmp eq i64 %233, 0
  br i1 %237, label %284, label %238

238:                                              ; preds = %226
  %239 = sub nuw nsw i64 %235, %236
  %240 = getelementptr i16, i16* %214, i64 -1
  %241 = getelementptr i16, i16* %215, i64 -1
  %242 = getelementptr i16, i16* %214, i64 -1
  %243 = getelementptr i16, i16* %215, i64 -1
  br label %244

244:                                              ; preds = %244, %238
  %245 = phi i64 [ 0, %238 ], [ %279, %244 ]
  %246 = phi i64 [ %239, %238 ], [ %280, %244 ]
  %247 = sub i64 0, %245
  %248 = sub i64 0, %245
  %249 = getelementptr inbounds i16, i16* %241, i64 %248
  %250 = getelementptr inbounds i16, i16* %240, i64 %247
  %251 = getelementptr inbounds i16, i16* %250, i64 -7
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !16
  %254 = getelementptr inbounds i16, i16* %250, i64 -8
  %255 = getelementptr inbounds i16, i16* %254, i64 -7
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2, !alias.scope !16
  %258 = getelementptr inbounds i16, i16* %249, i64 -7
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %259, align 2, !alias.scope !19, !noalias !16
  %260 = getelementptr inbounds i16, i16* %249, i64 -8
  %261 = getelementptr inbounds i16, i16* %260, i64 -7
  %262 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %257, <8 x i16>* %262, align 2, !alias.scope !19, !noalias !16
  %263 = sub nuw nsw i64 -16, %245
  %264 = sub nuw nsw i64 -16, %245
  %265 = getelementptr inbounds i16, i16* %243, i64 %264
  %266 = getelementptr inbounds i16, i16* %242, i64 %263
  %267 = getelementptr inbounds i16, i16* %266, i64 -7
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2, !alias.scope !16
  %270 = getelementptr inbounds i16, i16* %266, i64 -8
  %271 = getelementptr inbounds i16, i16* %270, i64 -7
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !16
  %274 = getelementptr inbounds i16, i16* %265, i64 -7
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %275, align 2, !alias.scope !19, !noalias !16
  %276 = getelementptr inbounds i16, i16* %265, i64 -8
  %277 = getelementptr inbounds i16, i16* %276, i64 -7
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %278, align 2, !alias.scope !19, !noalias !16
  %279 = add i64 %245, 32
  %280 = add i64 %246, -2
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %244, !llvm.loop !21

282:                                              ; preds = %244
  %283 = sub nuw nsw i64 -32, %245
  br label %284

284:                                              ; preds = %282, %226
  %285 = phi i64 [ 0, %226 ], [ %283, %282 ]
  %286 = icmp eq i64 %236, 0
  br i1 %286, label %304, label %287

287:                                              ; preds = %284
  %288 = getelementptr i16, i16* %214, i64 -1
  %289 = getelementptr i16, i16* %215, i64 -1
  %290 = getelementptr inbounds i16, i16* %289, i64 %285
  %291 = getelementptr inbounds i16, i16* %288, i64 %285
  %292 = getelementptr inbounds i16, i16* %291, i64 -7
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 2, !alias.scope !16
  %295 = getelementptr inbounds i16, i16* %291, i64 -8
  %296 = getelementptr inbounds i16, i16* %295, i64 -7
  %297 = bitcast i16* %296 to <8 x i16>*
  %298 = load <8 x i16>, <8 x i16>* %297, align 2, !alias.scope !16
  %299 = getelementptr inbounds i16, i16* %290, i64 -7
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %300, align 2, !alias.scope !19, !noalias !16
  %301 = getelementptr inbounds i16, i16* %290, i64 -8
  %302 = getelementptr inbounds i16, i16* %301, i64 -7
  %303 = bitcast i16* %302 to <8 x i16>*
  store <8 x i16> %298, <8 x i16>* %303, align 2, !alias.scope !19, !noalias !16
  br label %304

304:                                              ; preds = %284, %287
  %305 = icmp eq i64 %227, %42
  br i1 %305, label %359, label %306

306:                                              ; preds = %304, %217, %213
  %307 = phi i64 [ %42, %217 ], [ %42, %213 ], [ %228, %304 ]
  %308 = phi i16* [ %214, %217 ], [ %214, %213 ], [ %230, %304 ]
  %309 = phi i16* [ %215, %217 ], [ %215, %213 ], [ %232, %304 ]
  %310 = add nsw i64 %307, -1
  %311 = and i64 %307, 7
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %324, label %313

313:                                              ; preds = %306, %313
  %314 = phi i64 [ %321, %313 ], [ %307, %306 ]
  %315 = phi i16* [ %319, %313 ], [ %308, %306 ]
  %316 = phi i16* [ %318, %313 ], [ %309, %306 ]
  %317 = phi i64 [ %322, %313 ], [ %311, %306 ]
  %318 = getelementptr inbounds i16, i16* %316, i64 -1
  %319 = getelementptr inbounds i16, i16* %315, i64 -1
  %320 = load i16, i16* %319, align 2
  store i16 %320, i16* %318, align 2
  %321 = add i64 %314, -1
  %322 = add i64 %317, -1
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %324, label %313, !llvm.loop !22

324:                                              ; preds = %313, %306
  %325 = phi i64 [ %307, %306 ], [ %321, %313 ]
  %326 = phi i16* [ %308, %306 ], [ %319, %313 ]
  %327 = phi i16* [ %309, %306 ], [ %318, %313 ]
  %328 = icmp ult i64 %310, 7
  br i1 %328, label %359, label %329

329:                                              ; preds = %324, %329
  %330 = phi i64 [ %357, %329 ], [ %325, %324 ]
  %331 = phi i16* [ %355, %329 ], [ %326, %324 ]
  %332 = phi i16* [ %354, %329 ], [ %327, %324 ]
  %333 = getelementptr inbounds i16, i16* %332, i64 -1
  %334 = getelementptr inbounds i16, i16* %331, i64 -1
  %335 = load i16, i16* %334, align 2
  store i16 %335, i16* %333, align 2
  %336 = getelementptr inbounds i16, i16* %332, i64 -2
  %337 = getelementptr inbounds i16, i16* %331, i64 -2
  %338 = load i16, i16* %337, align 2
  store i16 %338, i16* %336, align 2
  %339 = getelementptr inbounds i16, i16* %332, i64 -3
  %340 = getelementptr inbounds i16, i16* %331, i64 -3
  %341 = load i16, i16* %340, align 2
  store i16 %341, i16* %339, align 2
  %342 = getelementptr inbounds i16, i16* %332, i64 -4
  %343 = getelementptr inbounds i16, i16* %331, i64 -4
  %344 = load i16, i16* %343, align 2
  store i16 %344, i16* %342, align 2
  %345 = getelementptr inbounds i16, i16* %332, i64 -5
  %346 = getelementptr inbounds i16, i16* %331, i64 -5
  %347 = load i16, i16* %346, align 2
  store i16 %347, i16* %345, align 2
  %348 = getelementptr inbounds i16, i16* %332, i64 -6
  %349 = getelementptr inbounds i16, i16* %331, i64 -6
  %350 = load i16, i16* %349, align 2
  store i16 %350, i16* %348, align 2
  %351 = getelementptr inbounds i16, i16* %332, i64 -7
  %352 = getelementptr inbounds i16, i16* %331, i64 -7
  %353 = load i16, i16* %352, align 2
  store i16 %353, i16* %351, align 2
  %354 = getelementptr inbounds i16, i16* %332, i64 -8
  %355 = getelementptr inbounds i16, i16* %331, i64 -8
  %356 = load i16, i16* %355, align 2
  store i16 %356, i16* %354, align 2
  %357 = add i64 %330, -8
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %359, label %329, !llvm.loop !23

359:                                              ; preds = %324, %329, %176, %181, %304, %156, %211, %58
  %360 = getelementptr inbounds i16, i16* %59, i64 %42
  store i16 0, i16* %360, align 2
  br label %694

361:                                              ; preds = %40
  br i1 %49, label %362, label %367

362:                                              ; preds = %361
  %363 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %364 = load i64, i64* %363, align 8
  %365 = and i64 %364, 9223372036854775807
  %366 = add nsw i64 %365, -1
  br label %367

367:                                              ; preds = %362, %361
  %368 = phi i64 [ %366, %362 ], [ 10, %361 ]
  %369 = icmp ult i64 %368, %42
  br i1 %369, label %685, label %370

370:                                              ; preds = %367
  br i1 %49, label %371, label %374

371:                                              ; preds = %370
  %372 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %373 = load i16*, i16** %372, align 8
  br label %376

374:                                              ; preds = %370
  %375 = bitcast %"class.std::__1::basic_string.1"* %1 to i16*
  br label %376

376:                                              ; preds = %374, %371
  %377 = phi i16* [ %373, %371 ], [ %375, %374 ]
  %378 = bitcast i16* %377 to i8*
  %379 = icmp eq i32 %18, 0
  br i1 %379, label %677, label %380

380:                                              ; preds = %376
  %381 = icmp ult i16* %377, %41
  br i1 %381, label %382, label %529

382:                                              ; preds = %380
  %383 = icmp ult i32 %18, 16
  br i1 %383, label %476, label %384

384:                                              ; preds = %382
  %385 = getelementptr i16, i16* %377, i64 %42
  %386 = bitcast i16* %385 to i8*
  %387 = shl nsw i64 %42, 1
  %388 = add i64 %6, %387
  %389 = add i64 %388, 4
  %390 = getelementptr i8, i8* %12, i64 %389
  %391 = icmp ugt i8* %390, %378
  %392 = icmp ult i8* %33, %386
  %393 = and i1 %391, %392
  br i1 %393, label %476, label %394

394:                                              ; preds = %384
  %395 = and i64 %42, -16
  %396 = sub nsw i64 %42, %395
  %397 = getelementptr i16, i16* %41, i64 %395
  %398 = getelementptr i16, i16* %377, i64 %395
  %399 = add nsw i64 %395, -16
  %400 = lshr exact i64 %399, 4
  %401 = add nuw nsw i64 %400, 1
  %402 = and i64 %401, 3
  %403 = icmp ult i64 %399, 48
  br i1 %403, label %455, label %404

404:                                              ; preds = %394
  %405 = sub nsw i64 %401, %402
  br label %406

406:                                              ; preds = %406, %404
  %407 = phi i64 [ 0, %404 ], [ %452, %406 ]
  %408 = phi i64 [ %405, %404 ], [ %453, %406 ]
  %409 = getelementptr i16, i16* %41, i64 %407
  %410 = getelementptr i16, i16* %377, i64 %407
  %411 = bitcast i16* %409 to <8 x i16>*
  %412 = load <8 x i16>, <8 x i16>* %411, align 2, !alias.scope !24
  %413 = getelementptr i16, i16* %409, i64 8
  %414 = bitcast i16* %413 to <8 x i16>*
  %415 = load <8 x i16>, <8 x i16>* %414, align 2, !alias.scope !24
  %416 = bitcast i16* %410 to <8 x i16>*
  store <8 x i16> %412, <8 x i16>* %416, align 2, !alias.scope !27, !noalias !24
  %417 = getelementptr i16, i16* %410, i64 8
  %418 = bitcast i16* %417 to <8 x i16>*
  store <8 x i16> %415, <8 x i16>* %418, align 2, !alias.scope !27, !noalias !24
  %419 = or i64 %407, 16
  %420 = getelementptr i16, i16* %41, i64 %419
  %421 = getelementptr i16, i16* %377, i64 %419
  %422 = bitcast i16* %420 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 2, !alias.scope !24
  %424 = getelementptr i16, i16* %420, i64 8
  %425 = bitcast i16* %424 to <8 x i16>*
  %426 = load <8 x i16>, <8 x i16>* %425, align 2, !alias.scope !24
  %427 = bitcast i16* %421 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %427, align 2, !alias.scope !27, !noalias !24
  %428 = getelementptr i16, i16* %421, i64 8
  %429 = bitcast i16* %428 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %429, align 2, !alias.scope !27, !noalias !24
  %430 = or i64 %407, 32
  %431 = getelementptr i16, i16* %41, i64 %430
  %432 = getelementptr i16, i16* %377, i64 %430
  %433 = bitcast i16* %431 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !24
  %435 = getelementptr i16, i16* %431, i64 8
  %436 = bitcast i16* %435 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !24
  %438 = bitcast i16* %432 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %438, align 2, !alias.scope !27, !noalias !24
  %439 = getelementptr i16, i16* %432, i64 8
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %440, align 2, !alias.scope !27, !noalias !24
  %441 = or i64 %407, 48
  %442 = getelementptr i16, i16* %41, i64 %441
  %443 = getelementptr i16, i16* %377, i64 %441
  %444 = bitcast i16* %442 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 2, !alias.scope !24
  %446 = getelementptr i16, i16* %442, i64 8
  %447 = bitcast i16* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 2, !alias.scope !24
  %449 = bitcast i16* %443 to <8 x i16>*
  store <8 x i16> %445, <8 x i16>* %449, align 2, !alias.scope !27, !noalias !24
  %450 = getelementptr i16, i16* %443, i64 8
  %451 = bitcast i16* %450 to <8 x i16>*
  store <8 x i16> %448, <8 x i16>* %451, align 2, !alias.scope !27, !noalias !24
  %452 = add i64 %407, 64
  %453 = add i64 %408, -4
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %455, label %406, !llvm.loop !29

455:                                              ; preds = %406, %394
  %456 = phi i64 [ 0, %394 ], [ %452, %406 ]
  %457 = icmp eq i64 %402, 0
  br i1 %457, label %474, label %458

458:                                              ; preds = %455, %458
  %459 = phi i64 [ %471, %458 ], [ %456, %455 ]
  %460 = phi i64 [ %472, %458 ], [ %402, %455 ]
  %461 = getelementptr i16, i16* %41, i64 %459
  %462 = getelementptr i16, i16* %377, i64 %459
  %463 = bitcast i16* %461 to <8 x i16>*
  %464 = load <8 x i16>, <8 x i16>* %463, align 2, !alias.scope !24
  %465 = getelementptr i16, i16* %461, i64 8
  %466 = bitcast i16* %465 to <8 x i16>*
  %467 = load <8 x i16>, <8 x i16>* %466, align 2, !alias.scope !24
  %468 = bitcast i16* %462 to <8 x i16>*
  store <8 x i16> %464, <8 x i16>* %468, align 2, !alias.scope !27, !noalias !24
  %469 = getelementptr i16, i16* %462, i64 8
  %470 = bitcast i16* %469 to <8 x i16>*
  store <8 x i16> %467, <8 x i16>* %470, align 2, !alias.scope !27, !noalias !24
  %471 = add i64 %459, 16
  %472 = add i64 %460, -1
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %474, label %458, !llvm.loop !30

474:                                              ; preds = %458, %455
  %475 = icmp eq i64 %395, %42
  br i1 %475, label %677, label %476

476:                                              ; preds = %474, %384, %382
  %477 = phi i64 [ %42, %384 ], [ %42, %382 ], [ %396, %474 ]
  %478 = phi i16* [ %41, %384 ], [ %41, %382 ], [ %397, %474 ]
  %479 = phi i16* [ %377, %384 ], [ %377, %382 ], [ %398, %474 ]
  %480 = add nsw i64 %477, -1
  %481 = and i64 %477, 7
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %494, label %483

483:                                              ; preds = %476, %483
  %484 = phi i64 [ %489, %483 ], [ %477, %476 ]
  %485 = phi i16* [ %491, %483 ], [ %478, %476 ]
  %486 = phi i16* [ %490, %483 ], [ %479, %476 ]
  %487 = phi i64 [ %492, %483 ], [ %481, %476 ]
  %488 = load i16, i16* %485, align 2
  store i16 %488, i16* %486, align 2
  %489 = add i64 %484, -1
  %490 = getelementptr inbounds i16, i16* %486, i64 1
  %491 = getelementptr inbounds i16, i16* %485, i64 1
  %492 = add i64 %487, -1
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %483, !llvm.loop !31

494:                                              ; preds = %483, %476
  %495 = phi i64 [ %477, %476 ], [ %489, %483 ]
  %496 = phi i16* [ %478, %476 ], [ %491, %483 ]
  %497 = phi i16* [ %479, %476 ], [ %490, %483 ]
  %498 = icmp ult i64 %480, 7
  br i1 %498, label %677, label %499

499:                                              ; preds = %494, %499
  %500 = phi i64 [ %525, %499 ], [ %495, %494 ]
  %501 = phi i16* [ %527, %499 ], [ %496, %494 ]
  %502 = phi i16* [ %526, %499 ], [ %497, %494 ]
  %503 = load i16, i16* %501, align 2
  store i16 %503, i16* %502, align 2
  %504 = getelementptr inbounds i16, i16* %502, i64 1
  %505 = getelementptr inbounds i16, i16* %501, i64 1
  %506 = load i16, i16* %505, align 2
  store i16 %506, i16* %504, align 2
  %507 = getelementptr inbounds i16, i16* %502, i64 2
  %508 = getelementptr inbounds i16, i16* %501, i64 2
  %509 = load i16, i16* %508, align 2
  store i16 %509, i16* %507, align 2
  %510 = getelementptr inbounds i16, i16* %502, i64 3
  %511 = getelementptr inbounds i16, i16* %501, i64 3
  %512 = load i16, i16* %511, align 2
  store i16 %512, i16* %510, align 2
  %513 = getelementptr inbounds i16, i16* %502, i64 4
  %514 = getelementptr inbounds i16, i16* %501, i64 4
  %515 = load i16, i16* %514, align 2
  store i16 %515, i16* %513, align 2
  %516 = getelementptr inbounds i16, i16* %502, i64 5
  %517 = getelementptr inbounds i16, i16* %501, i64 5
  %518 = load i16, i16* %517, align 2
  store i16 %518, i16* %516, align 2
  %519 = getelementptr inbounds i16, i16* %502, i64 6
  %520 = getelementptr inbounds i16, i16* %501, i64 6
  %521 = load i16, i16* %520, align 2
  store i16 %521, i16* %519, align 2
  %522 = getelementptr inbounds i16, i16* %502, i64 7
  %523 = getelementptr inbounds i16, i16* %501, i64 7
  %524 = load i16, i16* %523, align 2
  store i16 %524, i16* %522, align 2
  %525 = add i64 %500, -8
  %526 = getelementptr inbounds i16, i16* %502, i64 8
  %527 = getelementptr inbounds i16, i16* %501, i64 8
  %528 = icmp eq i64 %525, 0
  br i1 %528, label %677, label %499, !llvm.loop !32

529:                                              ; preds = %380
  %530 = icmp ugt i16* %377, %41
  br i1 %530, label %531, label %677

531:                                              ; preds = %529
  %532 = getelementptr inbounds i16, i16* %41, i64 %42
  %533 = getelementptr inbounds i16, i16* %377, i64 %42
  %534 = icmp ult i32 %18, 16
  br i1 %534, label %624, label %535

535:                                              ; preds = %531
  %536 = bitcast i16* %533 to i8*
  %537 = shl nsw i64 %42, 1
  %538 = add i64 %6, %537
  %539 = add i64 %538, 4
  %540 = getelementptr i8, i8* %12, i64 %539
  %541 = icmp ugt i8* %540, %378
  %542 = icmp ult i8* %33, %536
  %543 = and i1 %541, %542
  br i1 %543, label %624, label %544

544:                                              ; preds = %535
  %545 = and i64 %42, -16
  %546 = sub nsw i64 %42, %545
  %547 = sub nsw i64 0, %545
  %548 = getelementptr i16, i16* %532, i64 %547
  %549 = sub nsw i64 0, %545
  %550 = getelementptr i16, i16* %533, i64 %549
  %551 = add nsw i64 %545, -16
  %552 = lshr exact i64 %551, 4
  %553 = add nuw nsw i64 %552, 1
  %554 = and i64 %553, 1
  %555 = icmp eq i64 %551, 0
  br i1 %555, label %602, label %556

556:                                              ; preds = %544
  %557 = sub nuw nsw i64 %553, %554
  %558 = getelementptr i16, i16* %532, i64 -1
  %559 = getelementptr i16, i16* %533, i64 -1
  %560 = getelementptr i16, i16* %532, i64 -1
  %561 = getelementptr i16, i16* %533, i64 -1
  br label %562

562:                                              ; preds = %562, %556
  %563 = phi i64 [ 0, %556 ], [ %597, %562 ]
  %564 = phi i64 [ %557, %556 ], [ %598, %562 ]
  %565 = sub i64 0, %563
  %566 = sub i64 0, %563
  %567 = getelementptr inbounds i16, i16* %559, i64 %566
  %568 = getelementptr inbounds i16, i16* %558, i64 %565
  %569 = getelementptr inbounds i16, i16* %568, i64 -7
  %570 = bitcast i16* %569 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 2, !alias.scope !33
  %572 = getelementptr inbounds i16, i16* %568, i64 -8
  %573 = getelementptr inbounds i16, i16* %572, i64 -7
  %574 = bitcast i16* %573 to <8 x i16>*
  %575 = load <8 x i16>, <8 x i16>* %574, align 2, !alias.scope !33
  %576 = getelementptr inbounds i16, i16* %567, i64 -7
  %577 = bitcast i16* %576 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %577, align 2, !alias.scope !36, !noalias !33
  %578 = getelementptr inbounds i16, i16* %567, i64 -8
  %579 = getelementptr inbounds i16, i16* %578, i64 -7
  %580 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %575, <8 x i16>* %580, align 2, !alias.scope !36, !noalias !33
  %581 = sub nuw nsw i64 -16, %563
  %582 = sub nuw nsw i64 -16, %563
  %583 = getelementptr inbounds i16, i16* %561, i64 %582
  %584 = getelementptr inbounds i16, i16* %560, i64 %581
  %585 = getelementptr inbounds i16, i16* %584, i64 -7
  %586 = bitcast i16* %585 to <8 x i16>*
  %587 = load <8 x i16>, <8 x i16>* %586, align 2, !alias.scope !33
  %588 = getelementptr inbounds i16, i16* %584, i64 -8
  %589 = getelementptr inbounds i16, i16* %588, i64 -7
  %590 = bitcast i16* %589 to <8 x i16>*
  %591 = load <8 x i16>, <8 x i16>* %590, align 2, !alias.scope !33
  %592 = getelementptr inbounds i16, i16* %583, i64 -7
  %593 = bitcast i16* %592 to <8 x i16>*
  store <8 x i16> %587, <8 x i16>* %593, align 2, !alias.scope !36, !noalias !33
  %594 = getelementptr inbounds i16, i16* %583, i64 -8
  %595 = getelementptr inbounds i16, i16* %594, i64 -7
  %596 = bitcast i16* %595 to <8 x i16>*
  store <8 x i16> %591, <8 x i16>* %596, align 2, !alias.scope !36, !noalias !33
  %597 = add i64 %563, 32
  %598 = add i64 %564, -2
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %562, !llvm.loop !38

600:                                              ; preds = %562
  %601 = sub nuw nsw i64 -32, %563
  br label %602

602:                                              ; preds = %600, %544
  %603 = phi i64 [ 0, %544 ], [ %601, %600 ]
  %604 = icmp eq i64 %554, 0
  br i1 %604, label %622, label %605

605:                                              ; preds = %602
  %606 = getelementptr i16, i16* %532, i64 -1
  %607 = getelementptr i16, i16* %533, i64 -1
  %608 = getelementptr inbounds i16, i16* %607, i64 %603
  %609 = getelementptr inbounds i16, i16* %606, i64 %603
  %610 = getelementptr inbounds i16, i16* %609, i64 -7
  %611 = bitcast i16* %610 to <8 x i16>*
  %612 = load <8 x i16>, <8 x i16>* %611, align 2, !alias.scope !33
  %613 = getelementptr inbounds i16, i16* %609, i64 -8
  %614 = getelementptr inbounds i16, i16* %613, i64 -7
  %615 = bitcast i16* %614 to <8 x i16>*
  %616 = load <8 x i16>, <8 x i16>* %615, align 2, !alias.scope !33
  %617 = getelementptr inbounds i16, i16* %608, i64 -7
  %618 = bitcast i16* %617 to <8 x i16>*
  store <8 x i16> %612, <8 x i16>* %618, align 2, !alias.scope !36, !noalias !33
  %619 = getelementptr inbounds i16, i16* %608, i64 -8
  %620 = getelementptr inbounds i16, i16* %619, i64 -7
  %621 = bitcast i16* %620 to <8 x i16>*
  store <8 x i16> %616, <8 x i16>* %621, align 2, !alias.scope !36, !noalias !33
  br label %622

622:                                              ; preds = %602, %605
  %623 = icmp eq i64 %545, %42
  br i1 %623, label %677, label %624

624:                                              ; preds = %622, %535, %531
  %625 = phi i64 [ %42, %535 ], [ %42, %531 ], [ %546, %622 ]
  %626 = phi i16* [ %532, %535 ], [ %532, %531 ], [ %548, %622 ]
  %627 = phi i16* [ %533, %535 ], [ %533, %531 ], [ %550, %622 ]
  %628 = add nsw i64 %625, -1
  %629 = and i64 %625, 7
  %630 = icmp eq i64 %629, 0
  br i1 %630, label %642, label %631

631:                                              ; preds = %624, %631
  %632 = phi i64 [ %639, %631 ], [ %625, %624 ]
  %633 = phi i16* [ %637, %631 ], [ %626, %624 ]
  %634 = phi i16* [ %636, %631 ], [ %627, %624 ]
  %635 = phi i64 [ %640, %631 ], [ %629, %624 ]
  %636 = getelementptr inbounds i16, i16* %634, i64 -1
  %637 = getelementptr inbounds i16, i16* %633, i64 -1
  %638 = load i16, i16* %637, align 2
  store i16 %638, i16* %636, align 2
  %639 = add i64 %632, -1
  %640 = add i64 %635, -1
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %642, label %631, !llvm.loop !39

642:                                              ; preds = %631, %624
  %643 = phi i64 [ %625, %624 ], [ %639, %631 ]
  %644 = phi i16* [ %626, %624 ], [ %637, %631 ]
  %645 = phi i16* [ %627, %624 ], [ %636, %631 ]
  %646 = icmp ult i64 %628, 7
  br i1 %646, label %677, label %647

647:                                              ; preds = %642, %647
  %648 = phi i64 [ %675, %647 ], [ %643, %642 ]
  %649 = phi i16* [ %673, %647 ], [ %644, %642 ]
  %650 = phi i16* [ %672, %647 ], [ %645, %642 ]
  %651 = getelementptr inbounds i16, i16* %650, i64 -1
  %652 = getelementptr inbounds i16, i16* %649, i64 -1
  %653 = load i16, i16* %652, align 2
  store i16 %653, i16* %651, align 2
  %654 = getelementptr inbounds i16, i16* %650, i64 -2
  %655 = getelementptr inbounds i16, i16* %649, i64 -2
  %656 = load i16, i16* %655, align 2
  store i16 %656, i16* %654, align 2
  %657 = getelementptr inbounds i16, i16* %650, i64 -3
  %658 = getelementptr inbounds i16, i16* %649, i64 -3
  %659 = load i16, i16* %658, align 2
  store i16 %659, i16* %657, align 2
  %660 = getelementptr inbounds i16, i16* %650, i64 -4
  %661 = getelementptr inbounds i16, i16* %649, i64 -4
  %662 = load i16, i16* %661, align 2
  store i16 %662, i16* %660, align 2
  %663 = getelementptr inbounds i16, i16* %650, i64 -5
  %664 = getelementptr inbounds i16, i16* %649, i64 -5
  %665 = load i16, i16* %664, align 2
  store i16 %665, i16* %663, align 2
  %666 = getelementptr inbounds i16, i16* %650, i64 -6
  %667 = getelementptr inbounds i16, i16* %649, i64 -6
  %668 = load i16, i16* %667, align 2
  store i16 %668, i16* %666, align 2
  %669 = getelementptr inbounds i16, i16* %650, i64 -7
  %670 = getelementptr inbounds i16, i16* %649, i64 -7
  %671 = load i16, i16* %670, align 2
  store i16 %671, i16* %669, align 2
  %672 = getelementptr inbounds i16, i16* %650, i64 -8
  %673 = getelementptr inbounds i16, i16* %649, i64 -8
  %674 = load i16, i16* %673, align 2
  store i16 %674, i16* %672, align 2
  %675 = add i64 %648, -8
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %647, !llvm.loop !40

677:                                              ; preds = %642, %647, %494, %499, %622, %474, %529, %376
  %678 = getelementptr inbounds i16, i16* %377, i64 %42
  store i16 0, i16* %678, align 2
  %679 = load i8, i8* %47, align 1
  %680 = icmp slt i8 %679, 0
  br i1 %680, label %681, label %683

681:                                              ; preds = %677
  %682 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %42, i64* %682, align 8
  br label %694

683:                                              ; preds = %677
  %684 = trunc i32 %18 to i8
  store i8 %684, i8* %47, align 1
  br label %694

685:                                              ; preds = %367
  br i1 %49, label %686, label %689

686:                                              ; preds = %685
  %687 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %688 = load i64, i64* %687, align 8
  br label %691

689:                                              ; preds = %685
  %690 = zext i8 %48 to i64
  br label %691

691:                                              ; preds = %689, %686
  %692 = phi i64 [ %688, %686 ], [ %690, %689 ]
  %693 = sub nsw i64 %42, %368
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"* %1, i64 %368, i64 %693, i64 %692, i64 0, i64 %692, i64 %42, i16* nonnull %41) #15
  br label %694

694:                                              ; preds = %16, %20, %31, %9, %10, %359, %681, %683, %691, %32
  %695 = phi i1 [ false, %32 ], [ true, %691 ], [ true, %683 ], [ true, %681 ], [ true, %359 ], [ false, %10 ], [ false, %9 ], [ false, %31 ], [ false, %20 ], [ false, %16 ]
  ret i1 %695
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator17ReadStringPiece16EPNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::PickleIterator"* nocapture, %"class.base::BasicStringPiece.10"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %44

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %44, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %44, !prof !3

20:                                               ; preds = %16
  %21 = zext i32 %18 to i64
  %22 = icmp ult i32 %18, 1073741824
  br i1 %22, label %23, label %44, !prof !4

23:                                               ; preds = %20
  %24 = and i32 %18, 1073741824
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = sub i64 %4, %14
  %28 = shl i64 %21, 33
  %29 = ashr exact i64 %28, 32
  %30 = icmp ult i64 %27, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %23, %26
  store i64 %4, i64* %5, align 8
  br label %44

32:                                               ; preds = %26
  %33 = getelementptr inbounds i8, i8* %12, i64 %14
  %34 = add nuw nsw i64 %29, 3
  %35 = and i64 %34, -4
  %36 = icmp ult i64 %27, %35
  %37 = add i64 %14, %35
  %38 = select i1 %36, i64 %4, i64 %37
  store i64 %38, i64* %5, align 8
  %39 = icmp eq i8* %33, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %32
  %41 = sext i32 %18 to i64
  %42 = bitcast %"class.base::BasicStringPiece.10"* %1 to i8**
  store i8* %33, i8** %42, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece.10", %"class.base::BasicStringPiece.10"* %1, i64 0, i32 1
  store i64 %41, i64* %43, align 8
  br label %44

44:                                               ; preds = %16, %20, %31, %9, %10, %40, %32
  %45 = phi i1 [ true, %40 ], [ false, %32 ], [ false, %10 ], [ false, %9 ], [ false, %31 ], [ false, %20 ], [ false, %16 ]
  ret i1 %45
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator8ReadDataEPPKcPi(%"class.base::PickleIterator"* nocapture, i8** nocapture, i32* nocapture) local_unnamed_addr #1 align 2 {
  store i32 0, i32* %2, align 4
  store i8* null, i8** %1, align 8
  %4 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i64 %5, i64* %6, align 8
  br label %38

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 %7
  %15 = add i64 %7, 4
  store i64 %15, i64* %6, align 8
  %16 = icmp eq i8* %14, null
  br i1 %16, label %38, label %17

17:                                               ; preds = %11
  %18 = bitcast i8* %14 to i32*
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %2, align 4
  %20 = icmp slt i32 %19, 0
  %21 = load i64, i64* %4, align 8
  br i1 %20, label %27, label %22

22:                                               ; preds = %17
  %23 = load i64, i64* %6, align 8
  %24 = sub i64 %21, %23
  %25 = sext i32 %19 to i64
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %22, %17
  store i64 %21, i64* %6, align 8
  br label %38

28:                                               ; preds = %22
  %29 = load i8*, i8** %12, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %23
  %31 = add nuw nsw i64 %25, 3
  %32 = and i64 %31, -4
  %33 = icmp ult i64 %24, %32
  %34 = add i64 %23, %32
  %35 = select i1 %33, i64 %21, i64 %34
  store i64 %35, i64* %6, align 8
  %36 = icmp eq i8* %30, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %28
  store i8* %30, i8** %1, align 8
  br label %38

38:                                               ; preds = %10, %11, %37, %28, %27
  %39 = phi i1 [ true, %37 ], [ false, %28 ], [ false, %27 ], [ false, %11 ], [ false, %10 ]
  ret i1 %39
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator9ReadBytesEPPKci(%"class.base::PickleIterator"* nocapture, i8** nocapture, i32) local_unnamed_addr #1 align 2 {
  %4 = icmp slt i32 %2, 0
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  br i1 %4, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sext i32 %2 to i64
  %12 = icmp ult i64 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %3, %7
  %14 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  store i64 %6, i64* %14, align 8
  br label %26

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %9
  %19 = add nuw nsw i64 %11, 3
  %20 = and i64 %19, -4
  %21 = icmp ult i64 %10, %20
  %22 = add i64 %9, %20
  %23 = select i1 %21, i64 %6, i64 %22
  store i64 %23, i64* %8, align 8
  %24 = icmp eq i8* %18, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %15
  store i8* %18, i8** %1, align 8
  br label %26

26:                                               ; preds = %13, %15, %25
  %27 = phi i1 [ true, %25 ], [ false, %15 ], [ false, %13 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base14PickleIterator8ReadDataEPNS_4spanIKhLm18446744073709551615EEE(%"class.base::PickleIterator"* nocapture, %"class.base::span"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = icmp ult i64 %7, 4
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i64 %4, i64* %5, align 8
  br label %36

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.base::PickleIterator", %"class.base::PickleIterator"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %6
  %14 = add i64 %6, 4
  store i64 %14, i64* %5, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %36, label %16

16:                                               ; preds = %10
  %17 = bitcast i8* %13 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = sub i64 %4, %14
  %22 = sext i32 %18 to i64
  %23 = icmp ult i64 %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %20, %16
  store i64 %4, i64* %5, align 8
  br label %36

25:                                               ; preds = %20
  %26 = getelementptr inbounds i8, i8* %12, i64 %14
  %27 = add nuw nsw i64 %22, 3
  %28 = and i64 %27, -4
  %29 = icmp ult i64 %21, %28
  %30 = add i64 %28, %14
  %31 = select i1 %29, i64 %4, i64 %30
  store i64 %31, i64* %5, align 8
  %32 = icmp eq i8* %26, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.base::span", %"class.base::span"* %1, i64 0, i32 0, i32 0
  store i64 %22, i64* %34, align 8
  %35 = getelementptr inbounds %"class.base::span", %"class.base::span"* %1, i64 0, i32 1
  store i8* %26, i8** %35, align 8
  br label %36

36:                                               ; preds = %9, %10, %24, %25, %33
  %37 = phi i1 [ true, %33 ], [ false, %25 ], [ false, %24 ], [ false, %10 ], [ false, %9 ]
  ret i1 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base6Pickle10AttachmentC2Ev(%"class.base::Pickle::Attachment"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.base::Pickle::Attachment", %"class.base::Pickle::Attachment"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.base::Pickle::Attachment", %"class.base::Pickle::Attachment"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4base6Pickle10AttachmentE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base6Pickle10AttachmentD2Ev(%"class.base::Pickle::Attachment"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle10AttachmentD0Ev(%"class.base::Pickle::Attachment"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.base::Pickle::Attachment"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #16
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6PickleC2Ev(%"class.base::Pickle"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %3, align 8
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  store i64 4, i64* %4, align 8
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %6 = bitcast i64* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false)
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 64)
  %7 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %3, align 8
  %8 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %7, i64 0, i32 0
  store i32 0, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #15
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp eq i64 %10, -1
  br i1 %12, label %14, label %13

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %8, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 -1) #15
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 -1) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %8, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 348, %"class.logging::CheckOpResult"* nonnull %4) #15
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #15
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #15
  %24 = add i64 %1, 63
  %25 = and i64 %24, -64
  store i64 %25, i64* %9, align 8
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %27 = bitcast %"struct.base::Pickle::Header"** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %25
  %32 = call i8* @realloc(i8* %28, i64 %31) #15
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %23
  %35 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 351, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #15
  %36 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #15
  br label %37

37:                                               ; preds = %23, %34
  store i8* %32, i8** %27, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6PickleC2Ei(%"class.base::Pickle"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %4, align 8
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %6 = sext i32 %1 to i64
  %7 = add nsw i64 %6, 3
  %8 = and i64 %7, -4
  store i64 %8, i64* %5, align 8
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %10 = bitcast i64* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 64)
  %11 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %4, align 8
  %12 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %11, i64 0, i32 0
  store i32 0, i32* %12, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base6PickleC2EPKcm(%"class.base::Pickle"* nocapture, i8*, i64) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %6 = bitcast %"struct.base::Pickle::Header"** %5 to i8**
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %8 = bitcast i64* %7 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %8, align 8
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  store i64 0, i64* %9, align 8
  %10 = icmp ugt i64 %2, 3
  br i1 %10, label %11, label %20

11:                                               ; preds = %3
  %12 = bitcast i8* %1 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = sub i64 %2, %14
  %16 = and i64 %2, 4294967295
  %17 = icmp ugt i64 %15, %16
  %18 = select i1 %17, i64 0, i64 %15
  store i64 %18, i64* %7, align 8
  %19 = select i1 %17, i64 0, i64 %15
  br label %20

20:                                               ; preds = %11, %3
  %21 = phi i64 [ 0, %3 ], [ %19, %11 ]
  %22 = add i64 %21, 3
  %23 = and i64 %22, -4
  %24 = icmp eq i64 %21, %23
  br i1 %24, label %26, label %25

25:                                               ; preds = %20
  store i64 0, i64* %7, align 8
  br label %28

26:                                               ; preds = %20
  %27 = icmp eq i64 %21, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25, %26
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %5, align 8
  br label %29

29:                                               ; preds = %26, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6PickleC2ERKS0_(%"class.base::Pickle"* nocapture, %"class.base::Pickle"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %4, align 8
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %10 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 1
  %13 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %12, align 8
  %14 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %16)
  %17 = bitcast %"struct.base::Pickle::Header"** %4 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %12, align 8
  %20 = bitcast %"struct.base::Pickle::Header"* %19 to i8*
  %21 = load i64, i64* %5, align 8
  %22 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %19, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = add i64 %21, %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %20, i64 %25, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6PickleD2Ev(%"class.base::Pickle"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -1
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %8 = bitcast %"struct.base::Pickle::Header"** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @free(i8* %9) #15
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6PickleD0Ev(%"class.base::Pickle"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4base6PickleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, -1
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %8 = bitcast %"struct.base::Pickle::Header"** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @free(i8* %9) #15
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.base::Pickle"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(40) %"class.base::Pickle"* @_ZN4base6PickleaSERKS0_(%"class.base::Pickle"* returned, %"class.base::Pickle"* readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.base::Pickle"* %0, %1
  br i1 %3, label %40, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, -1
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %9, align 8
  store i64 0, i64* %5, align 8
  br label %10

10:                                               ; preds = %8, %4
  %11 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %18 = bitcast %"struct.base::Pickle::Header"** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  tail call void @free(i8* %19) #15
  store %"struct.base::Pickle::Header"* null, %"struct.base::Pickle::Header"** %17, align 8
  %20 = load i64, i64* %13, align 8
  store i64 %20, i64* %11, align 8
  br label %21

21:                                               ; preds = %10, %16
  %22 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 1
  %23 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %22, align 8
  %24 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %26)
  %27 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %28 = bitcast %"struct.base::Pickle::Header"** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  %30 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %22, align 8
  %31 = bitcast %"struct.base::Pickle::Header"* %30 to i8*
  %32 = load i64, i64* %13, align 8
  %33 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %30, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i64
  %36 = add i64 %32, %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %31, i64 %36, i1 false)
  %37 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %1, i64 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  store i64 %38, i64* %39, align 8
  br label %40

40:                                               ; preds = %2, %21
  ret %"class.base::Pickle"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle11WriteStringERKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::Pickle"* nocapture, %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 4
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %8, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %2
  %13 = shl i64 %10, 1
  %14 = icmp ugt i64 %13, 4096
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  %16 = add i64 %13, 4095
  %17 = and i64 %16, -4096
  %18 = add i64 %17, -64
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i64 [ %18, %15 ], [ %13, %12 ]
  %21 = icmp ult i64 %20, %8
  %22 = select i1 %21, i64 %8, i64 %20
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %22) #15
  %23 = load i64, i64* %6, align 8
  br label %24

24:                                               ; preds = %2, %19
  %25 = phi i64 [ %23, %19 ], [ %7, %2 ]
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %27 = bitcast %"struct.base::Pickle::Header"** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 %25
  %33 = trunc i64 %8 to i32
  %34 = bitcast i8* %28 to i32*
  store i32 %33, i32* %34, align 4
  store i64 %8, i64* %6, align 8
  %35 = bitcast i8* %32 to i32*
  store i32 %5, i32* %35, align 1
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = load i64, i64* %3, align 8
  %39 = shl i64 %38, 32
  %40 = ashr exact i64 %39, 32
  %41 = add nsw i64 %40, 3
  %42 = and i64 %41, -4
  %43 = load i64, i64* %6, align 8
  %44 = add i64 %42, %43
  %45 = load i64, i64* %9, align 8
  %46 = icmp ugt i64 %44, %45
  br i1 %46, label %47, label %59

47:                                               ; preds = %24
  %48 = shl i64 %45, 1
  %49 = icmp ugt i64 %48, 4096
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = add i64 %48, 4095
  %52 = and i64 %51, -4096
  %53 = add i64 %52, -64
  br label %54

54:                                               ; preds = %50, %47
  %55 = phi i64 [ %53, %50 ], [ %48, %47 ]
  %56 = icmp ult i64 %55, %44
  %57 = select i1 %56, i64 %44, i64 %55
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %57) #15
  %58 = load i64, i64* %6, align 8
  br label %59

59:                                               ; preds = %24, %54
  %60 = phi i64 [ %58, %54 ], [ %43, %24 ]
  %61 = load i8*, i8** %27, align 8
  %62 = load i64, i64* %29, align 8
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  %64 = getelementptr inbounds i8, i8* %63, i64 %60
  %65 = getelementptr inbounds i8, i8* %64, i64 %40
  %66 = sub nsw i64 %42, %40
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 0, i64 %66, i1 false) #15
  %67 = trunc i64 %44 to i32
  %68 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %26, align 8
  %69 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %68, i64 0, i32 0
  store i32 %67, i32* %69, align 4
  store i64 %44, i64* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %37, i64 %40, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle10WriteBytesEPKvi(%"class.base::Pickle"* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = sext i32 %2 to i64
  %5 = add nsw i64 %4, 3
  %6 = and i64 %5, -4
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, %6
  %10 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %9, %11
  br i1 %12, label %13, label %25

13:                                               ; preds = %3
  %14 = shl i64 %11, 1
  %15 = icmp ugt i64 %14, 4096
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = add i64 %14, 4095
  %18 = and i64 %17, -4096
  %19 = add i64 %18, -64
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i64 [ %19, %16 ], [ %14, %13 ]
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %23) #15
  %24 = load i64, i64* %7, align 8
  br label %25

25:                                               ; preds = %3, %20
  %26 = phi i64 [ %24, %20 ], [ %8, %3 ]
  %27 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %28 = bitcast %"struct.base::Pickle::Header"** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  %33 = getelementptr inbounds i8, i8* %32, i64 %26
  %34 = getelementptr inbounds i8, i8* %33, i64 %4
  %35 = sub nsw i64 %6, %4
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %34, i8 0, i64 %35, i1 false) #15
  %36 = trunc i64 %9 to i32
  %37 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %27, align 8
  %38 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %37, i64 0, i32 0
  store i32 %36, i32* %38, align 4
  store i64 %9, i64* %7, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %1, i64 %4, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle13WriteString16ERKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::Pickle"* nocapture, %"class.base::BasicStringPiece.10"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece.10", %"class.base::BasicStringPiece.10"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 4
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %8, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %2
  %13 = shl i64 %10, 1
  %14 = icmp ugt i64 %13, 4096
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  %16 = add i64 %13, 4095
  %17 = and i64 %16, -4096
  %18 = add i64 %17, -64
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i64 [ %18, %15 ], [ %13, %12 ]
  %21 = icmp ult i64 %20, %8
  %22 = select i1 %21, i64 %8, i64 %20
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %22) #15
  %23 = load i64, i64* %6, align 8
  br label %24

24:                                               ; preds = %2, %19
  %25 = phi i64 [ %23, %19 ], [ %7, %2 ]
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %27 = bitcast %"struct.base::Pickle::Header"** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 %25
  %33 = trunc i64 %8 to i32
  %34 = bitcast i8* %28 to i32*
  store i32 %33, i32* %34, align 4
  store i64 %8, i64* %6, align 8
  %35 = bitcast i8* %32 to i32*
  store i32 %5, i32* %35, align 1
  %36 = bitcast %"class.base::BasicStringPiece.10"* %1 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = load i64, i64* %3, align 8
  %39 = trunc i64 %38 to i32
  %40 = shl i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = add nsw i64 %41, 3
  %43 = and i64 %42, -4
  %44 = load i64, i64* %6, align 8
  %45 = add i64 %43, %44
  %46 = load i64, i64* %9, align 8
  %47 = icmp ugt i64 %45, %46
  br i1 %47, label %48, label %60

48:                                               ; preds = %24
  %49 = shl i64 %46, 1
  %50 = icmp ugt i64 %49, 4096
  br i1 %50, label %51, label %55

51:                                               ; preds = %48
  %52 = add i64 %49, 4095
  %53 = and i64 %52, -4096
  %54 = add i64 %53, -64
  br label %55

55:                                               ; preds = %51, %48
  %56 = phi i64 [ %54, %51 ], [ %49, %48 ]
  %57 = icmp ult i64 %56, %45
  %58 = select i1 %57, i64 %45, i64 %56
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %58) #15
  %59 = load i64, i64* %6, align 8
  br label %60

60:                                               ; preds = %24, %55
  %61 = phi i64 [ %59, %55 ], [ %44, %24 ]
  %62 = load i8*, i8** %27, align 8
  %63 = load i64, i64* %29, align 8
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  %65 = getelementptr inbounds i8, i8* %64, i64 %61
  %66 = getelementptr inbounds i8, i8* %65, i64 %41
  %67 = sub nsw i64 %43, %41
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %66, i8 0, i64 %67, i1 false) #15
  %68 = trunc i64 %45 to i32
  %69 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %26, align 8
  %70 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %69, i64 0, i32 0
  store i32 %68, i32* %70, align 4
  store i64 %45, i64* %6, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %37, i64 %41, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle9WriteDataEPKci(%"class.base::Pickle"* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = icmp ugt i64 %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %3
  %11 = shl i64 %8, 1
  %12 = icmp ugt i64 %11, 4096
  br i1 %12, label %13, label %17

13:                                               ; preds = %10
  %14 = add i64 %11, 4095
  %15 = and i64 %14, -4096
  %16 = add i64 %15, -64
  br label %17

17:                                               ; preds = %13, %10
  %18 = phi i64 [ %16, %13 ], [ %11, %10 ]
  %19 = icmp ult i64 %18, %6
  %20 = select i1 %19, i64 %6, i64 %18
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %20) #15
  %21 = load i64, i64* %4, align 8
  br label %22

22:                                               ; preds = %3, %17
  %23 = phi i64 [ %21, %17 ], [ %5, %3 ]
  %24 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %25 = bitcast %"struct.base::Pickle::Header"** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 %28
  %30 = getelementptr inbounds i8, i8* %29, i64 %23
  %31 = trunc i64 %6 to i32
  %32 = bitcast i8* %26 to i32*
  store i32 %31, i32* %32, align 4
  store i64 %6, i64* %4, align 8
  %33 = bitcast i8* %30 to i32*
  store i32 %2, i32* %33, align 1
  %34 = sext i32 %2 to i64
  %35 = add nsw i64 %34, 3
  %36 = and i64 %35, -4
  %37 = load i64, i64* %4, align 8
  %38 = add i64 %37, %36
  %39 = load i64, i64* %7, align 8
  %40 = icmp ugt i64 %38, %39
  br i1 %40, label %41, label %53

41:                                               ; preds = %22
  %42 = shl i64 %39, 1
  %43 = icmp ugt i64 %42, 4096
  br i1 %43, label %44, label %48

44:                                               ; preds = %41
  %45 = add i64 %42, 4095
  %46 = and i64 %45, -4096
  %47 = add i64 %46, -64
  br label %48

48:                                               ; preds = %44, %41
  %49 = phi i64 [ %47, %44 ], [ %42, %41 ]
  %50 = icmp ult i64 %49, %38
  %51 = select i1 %50, i64 %38, i64 %49
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %51) #15
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %22, %48
  %54 = phi i64 [ %52, %48 ], [ %37, %22 ]
  %55 = load i8*, i8** %25, align 8
  %56 = load i64, i64* %27, align 8
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = getelementptr inbounds i8, i8* %57, i64 %54
  %59 = getelementptr inbounds i8, i8* %58, i64 %34
  %60 = sub nsw i64 %36, %34
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %60, i1 false) #15
  %61 = trunc i64 %38 to i32
  %62 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %24, align 8
  %63 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %62, i64 0, i32 0
  store i32 %61, i32* %63, align 4
  store i64 %38, i64* %4, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %1, i64 %34, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base6Pickle7ReserveEm(%"class.base::Pickle"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = add i64 %1, 3
  %4 = and i64 %3, -4
  %5 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %7, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = shl i64 %9, 1
  %13 = add i64 %12, %7
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %13)
  br label %14

14:                                               ; preds = %11, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base6Pickle15WriteAttachmentE13scoped_refptrINS0_10AttachmentEE(%"class.base::Pickle"* nocapture readnone, %"class.base::Pickle::Attachment"*) unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.base::Pickle::Attachment"* %1, null
  br i1 %3, label %16, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::Pickle::Attachment", %"class.base::Pickle::Attachment"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %16

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %5, i64 -2
  %11 = bitcast %"class.base::RefCountedThreadSafe"* %10 to %"class.base::Pickle::Attachment"*
  %12 = bitcast %"class.base::RefCountedThreadSafe"* %10 to void (%"class.base::Pickle::Attachment"*)***
  %13 = load void (%"class.base::Pickle::Attachment"*)**, void (%"class.base::Pickle::Attachment"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.base::Pickle::Attachment"*)*, void (%"class.base::Pickle::Attachment"*)** %13, i64 1
  %15 = load void (%"class.base::Pickle::Attachment"*)*, void (%"class.base::Pickle::Attachment"*)** %14, align 8
  tail call void %15(%"class.base::Pickle::Attachment"* nonnull %11) #15
  br label %16

16:                                               ; preds = %2, %4, %9
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK4base6Pickle14ReadAttachmentEPNS_14PickleIteratorEP13scoped_refptrINS0_10AttachmentEE(%"class.base::Pickle"* nocapture readnone, %"class.base::PickleIterator"* nocapture readnone, %class.scoped_refptr* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK4base6Pickle14HasAttachmentsEv(%"class.base::Pickle"* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 false
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #6

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK4base6Pickle21GetTotalAllocatedSizeEv(%"class.base::Pickle"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, -1
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %3
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i64 [ %8, %5 ], [ 0, %1 ]
  ret i64 %10
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN4base6Pickle10ClaimBytesEm(%"class.base::Pickle"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = add i64 %1, 3
  %5 = and i64 %4, -4
  %6 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  %9 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %8, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %2
  %13 = shl i64 %10, 1
  %14 = icmp ugt i64 %13, 4096
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  %16 = add i64 %13, 4095
  %17 = and i64 %16, -4096
  %18 = add i64 %17, -64
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i64 [ %18, %15 ], [ %13, %12 ]
  %21 = icmp ult i64 %20, %8
  %22 = select i1 %21, i64 %8, i64 %20
  tail call void @_ZN4base6Pickle6ResizeEm(%"class.base::Pickle"* %0, i64 %22) #15
  %23 = load i64, i64* %6, align 8
  br label %24

24:                                               ; preds = %2, %19
  %25 = phi i64 [ %23, %19 ], [ %7, %2 ]
  %26 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 1
  %27 = bitcast %"struct.base::Pickle::Header"** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.base::Pickle", %"class.base::Pickle"* %0, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 %25
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  %34 = sub i64 %5, %1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 0, i64 %34, i1 false) #15
  %35 = trunc i64 %8 to i32
  %36 = load %"struct.base::Pickle::Header"*, %"struct.base::Pickle::Header"** %26, align 8
  %37 = getelementptr inbounds %"struct.base::Pickle::Header", %"struct.base::Pickle::Header"* %36, i64 0, i32 0
  store i32 %35, i32* %37, align 4
  store i64 %8, i64* %6, align 8
  %38 = icmp eq i8* %32, null
  br i1 %38, label %39, label %42

39:                                               ; preds = %24
  %40 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #15
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 357, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #15
  %41 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #15
  br label %42

42:                                               ; preds = %24, %39
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 0, i64 %1, i1 false)
  ret i8* %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i8* @_ZN4base6Pickle8FindNextEmPKcS2_(i64, i8*, i8*) local_unnamed_addr #9 align 2 {
  %4 = ptrtoint i8* %2 to i64
  %5 = ptrtoint i8* %1 to i64
  %6 = sub i64 %4, %5
  %7 = icmp ult i64 %6, 4
  %8 = icmp ult i64 %6, %0
  %9 = or i1 %7, %8
  br i1 %9, label %21, label %10

10:                                               ; preds = %3
  %11 = bitcast i8* %1 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %0, i64 %13) #15
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16, !prof !41
  %18 = icmp ugt i64 %17, %6
  %19 = getelementptr inbounds i8, i8* %1, i64 %17
  %20 = select i1 %18, i8* null, i8* %19
  br label %21

21:                                               ; preds = %3, %10
  %22 = phi i8* [ %20, %10 ], [ null, %3 ]
  ret i8* %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base6Pickle8PeekNextEmPKcS2_Pm(i64, i8*, i8*, i64* nocapture) local_unnamed_addr #0 align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = ptrtoint i8* %1 to i64
  %7 = sub i64 %5, %6
  %8 = icmp ult i64 %7, 4
  %9 = icmp ult i64 %7, %0
  %10 = or i1 %8, %9
  br i1 %10, label %19, label %11

11:                                               ; preds = %4
  %12 = bitcast i8* %1 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %0, i64 %14) #15
  %16 = extractvalue { i64, i1 } %15, 1
  %17 = extractvalue { i64, i1 } %15, 0
  %18 = select i1 %16, i64 -1, i64 %17, !prof !41
  store i64 %18, i64* %3, align 8
  br label %19

19:                                               ; preds = %11, %4
  %20 = phi i1 [ false, %4 ], [ true, %11 ]
  ret i1 %20
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #7

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #10

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #11

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.1"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #17
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #17
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #16
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !42
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !42
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !45, !noalias !42
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !45, !noalias !42
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !42
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !42
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !45, !noalias !42
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !45, !noalias !42
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !42
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !42
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !45, !noalias !42
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !45, !noalias !42
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !42
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !42
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !45, !noalias !42
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !45, !noalias !42
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !47

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !42
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !42
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !45, !noalias !42
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !45, !noalias !42
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !48

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !49

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !50

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !51

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !52

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !53

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !55
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !55
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !58, !noalias !55
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !58, !noalias !55
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !55
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !55
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !58, !noalias !55
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !58, !noalias !55
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !55
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !55
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !58, !noalias !55
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !58, !noalias !55
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !55
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !55
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !58, !noalias !55
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !58, !noalias !55
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !60

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !55
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !55
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !58, !noalias !55
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !58, !noalias !55
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !61

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !62

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !63

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #16
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #12

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #13

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind readnone }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 8003, i32 1}
!4 = !{!"branch_weights", i32 -102759400, i32 4193255}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !13}
!15 = distinct !{!15, !11}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !11}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !13}
!31 = distinct !{!31, !13}
!32 = distinct !{!32, !11}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !11}
!39 = distinct !{!39, !13}
!40 = distinct !{!40, !11}
!41 = !{!"branch_weights", i32 1, i32 2000}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !11}
!48 = distinct !{!48, !13}
!49 = distinct !{!49, !13}
!50 = distinct !{!50, !11}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !13}
!53 = distinct !{!53, !54, !11}
!54 = !{!"llvm.loop.unroll.runtime.disable"}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !13}
!62 = distinct !{!62, !13}
!63 = distinct !{!63, !11}
