; ModuleID = '../../extensions/common/value_counter.cc'
source_filename = "../../extensions/common/value_counter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::ValueCounter" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"*, %"class.std::__1::__compressed_pair.30" }
%"struct.extensions::ValueCounter::Entry" = type <{ %"class.base::Value", i32, [4 x i8] }>
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.extensions::ValueCounter::Entry"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN10extensions12ValueCounter5EntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJN4base5ValueEEEEvDpOT_ = comdat any

@_ZN10extensions12ValueCounterC1Ev = hidden unnamed_addr alias void (%"class.extensions::ValueCounter"*), void (%"class.extensions::ValueCounter"*)* @_ZN10extensions12ValueCounterC2Ev
@_ZN10extensions12ValueCounterD1Ev = hidden unnamed_addr alias void (%"class.extensions::ValueCounter"*), void (%"class.extensions::ValueCounter"*)* @_ZN10extensions12ValueCounterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions12ValueCounterC2Ev(%"class.extensions::ValueCounter"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.extensions::ValueCounter"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10extensions12ValueCounterD2Ev(%"class.extensions::ValueCounter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %2, align 8
  %4 = icmp eq %"struct.extensions::ValueCounter::Entry"* %3, null
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = bitcast %"struct.extensions::ValueCounter::Entry"* %3 to i8*
  %7 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %7, align 8
  %9 = icmp eq %"struct.extensions::ValueCounter::Entry"* %8, %3
  br i1 %9, label %18, label %10

10:                                               ; preds = %5, %10
  %11 = phi %"struct.extensions::ValueCounter::Entry"* [ %12, %10 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %11, i64 -1
  %13 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %12, i64 0, i32 0
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %13) #8
  %14 = icmp eq %"struct.extensions::ValueCounter::Entry"* %12, %3
  br i1 %14, label %15, label %10

15:                                               ; preds = %10
  %16 = bitcast %"class.extensions::ValueCounter"* %0 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %5
  %19 = phi i8* [ %17, %15 ], [ %6, %5 ]
  store %"struct.extensions::ValueCounter::Entry"* %3, %"struct.extensions::ValueCounter::Entry"** %7, align 8
  tail call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %1, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10extensions12ValueCounter3AddERKN4base5ValueE(%"class.extensions::ValueCounter"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::Value", align 8
  %4 = alloca %"class.base::Value", align 8
  %5 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  %8 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %8, align 8
  %10 = icmp eq %"struct.extensions::ValueCounter::Entry"* %7, %9
  br i1 %10, label %22, label %11

11:                                               ; preds = %2, %15
  %12 = phi %"struct.extensions::ValueCounter::Entry"* [ %16, %15 ], [ %7, %2 ]
  %13 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %12, i64 0, i32 0
  %14 = tail call zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32) %13, %"class.base::Value"* dereferenceable(32) %1) #8
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %12, i64 1
  %17 = icmp eq %"struct.extensions::ValueCounter::Entry"* %16, %9
  br i1 %17, label %22, label %11

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %12, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 8
  br label %37

22:                                               ; preds = %15, %2
  %23 = bitcast %"class.base::Value"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #8
  call void @_ZNK4base5Value5CloneEv(%"class.base::Value"* nonnull sret %4, %"class.base::Value"* %1) #8
  %24 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %8, align 8
  %25 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %26 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %25, align 8
  %27 = icmp ult %"struct.extensions::ValueCounter::Entry"* %24, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %22
  %29 = bitcast %"class.base::Value"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #8
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* nonnull %3, %"class.base::Value"* nonnull dereferenceable(32) %4) #8
  %30 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %24, i64 0, i32 0
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %30, %"class.base::Value"* nonnull dereferenceable(32) %3) #8
  %31 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %24, i64 0, i32 1
  store i32 1, i32* %31, align 8
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #8
  %32 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %24, i64 1
  %33 = ptrtoint %"struct.extensions::ValueCounter::Entry"* %32 to i64
  %34 = bitcast %"struct.extensions::ValueCounter::Entry"** %8 to i64*
  store i64 %33, i64* %34, align 8
  br label %36

35:                                               ; preds = %22
  call void @_ZNSt3__16vectorIN10extensions12ValueCounter5EntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJN4base5ValueEEEEvDpOT_(%"class.std::__1::vector"* %5, %"class.base::Value"* nonnull dereferenceable(32) %4) #8
  br label %36

36:                                               ; preds = %28, %35
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #8
  br label %37

37:                                               ; preds = %18, %36
  %38 = phi i1 [ true, %36 ], [ false, %18 ]
  ret i1 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32), %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK4base5Value5CloneEv(%"class.base::Value"* sret, %"class.base::Value"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10extensions12ValueCounter6RemoveERKN4base5ValueE(%"class.extensions::ValueCounter"* nocapture, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.extensions::ValueCounter::Entry", align 8
  %4 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %4, align 8
  %6 = getelementptr inbounds %"class.extensions::ValueCounter", %"class.extensions::ValueCounter"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  %8 = icmp eq %"struct.extensions::ValueCounter::Entry"* %5, %7
  br i1 %8, label %37, label %9

9:                                                ; preds = %2, %33
  %10 = phi %"struct.extensions::ValueCounter::Entry"* [ %34, %33 ], [ %5, %2 ]
  %11 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %10, i64 0, i32 0
  %12 = tail call zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32) %11, %"class.base::Value"* dereferenceable(32) %1) #8
  br i1 %12, label %13, label %33

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %10, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %14, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %37

18:                                               ; preds = %13
  %19 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  %20 = bitcast %"struct.extensions::ValueCounter::Entry"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 40, i1 false) #8
  %21 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %3, i64 0, i32 0
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* nonnull %21, %"class.base::Value"* dereferenceable(32) %11) #8
  %22 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %3, i64 0, i32 1
  %23 = load i32, i32* %14, align 8
  store i32 %23, i32* %22, align 8
  %24 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %19, i64 -1, i32 0
  %25 = call dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"* %11, %"class.base::Value"* dereferenceable(32) %24) #8
  %26 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %19, i64 -1, i32 1
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %14, align 8
  %28 = call dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"* %24, %"class.base::Value"* nonnull dereferenceable(32) %21) #8
  %29 = load i32, i32* %22, align 8
  store i32 %29, i32* %26, align 8
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #8
  %30 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  %31 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %30, i64 -1
  %32 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %31, i64 0, i32 0
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %32) #8
  store %"struct.extensions::ValueCounter::Entry"* %31, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  br label %37

33:                                               ; preds = %9
  %34 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %10, i64 1
  %35 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %6, align 8
  %36 = icmp eq %"struct.extensions::ValueCounter::Entry"* %34, %35
  br i1 %36, label %37, label %9

37:                                               ; preds = %33, %2, %13, %18
  %38 = phi i1 [ false, %13 ], [ true, %18 ], [ false, %2 ], [ false, %33 ]
  ret i1 %38
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN10extensions12ValueCounter5EntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJN4base5ValueEEEEvDpOT_(%"class.std::__1::vector"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.base::Value", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.extensions::ValueCounter::Entry"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 40
  %11 = add nsw i64 %10, 1
  %12 = icmp ugt i64 %11, 461168601842738790
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %14) #10
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"struct.extensions::ValueCounter::Entry"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %8
  %20 = sdiv exact i64 %19, 40
  %21 = icmp ult i64 %20, 230584300921369395
  br i1 %21, label %22, label %27

22:                                               ; preds = %15
  %23 = shl nsw i64 %20, 1
  %24 = icmp ult i64 %23, %11
  %25 = select i1 %24, i64 %11, i64 %23
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %15, %22
  %28 = phi i64 [ %25, %22 ], [ 461168601842738790, %15 ]
  %29 = mul i64 %28, 40
  %30 = tail call i8* @_Znwm(i64 %29) #9
  %31 = bitcast i8* %30 to %"struct.extensions::ValueCounter::Entry"*
  br label %32

32:                                               ; preds = %22, %27
  %33 = phi i64 [ %28, %27 ], [ 0, %22 ]
  %34 = phi %"struct.extensions::ValueCounter::Entry"* [ %31, %27 ], [ null, %22 ]
  %35 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %34, i64 %10
  %36 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %34, i64 %33
  %37 = ptrtoint %"struct.extensions::ValueCounter::Entry"* %36 to i64
  %38 = bitcast %"class.base::Value"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #8
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* nonnull %3, %"class.base::Value"* dereferenceable(32) %1) #8
  %39 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %35, i64 0, i32 0
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %39, %"class.base::Value"* nonnull dereferenceable(32) %3) #8
  %40 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %34, i64 %10, i32 1
  store i32 1, i32* %40, align 8
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #8
  %41 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %35, i64 1
  %42 = ptrtoint %"struct.extensions::ValueCounter::Entry"* %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %44 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %43, align 8
  %45 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %4, align 8
  %46 = icmp eq %"struct.extensions::ValueCounter::Entry"* %45, %44
  br i1 %46, label %47, label %49

47:                                               ; preds = %32
  %48 = ptrtoint %"struct.extensions::ValueCounter::Entry"* %44 to i64
  br label %63

49:                                               ; preds = %32, %49
  %50 = phi %"struct.extensions::ValueCounter::Entry"* [ %58, %49 ], [ %35, %32 ]
  %51 = phi %"struct.extensions::ValueCounter::Entry"* [ %52, %49 ], [ %45, %32 ]
  %52 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %51, i64 -1
  %53 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %50, i64 -1, i32 0
  %54 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %52, i64 0, i32 0
  call void @_ZN4base5ValueC1EOS0_(%"class.base::Value"* %53, %"class.base::Value"* dereferenceable(32) %54) #8
  %55 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %50, i64 -1, i32 1
  %56 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %51, i64 -1, i32 1
  %57 = load i32, i32* %56, align 8
  store i32 %57, i32* %55, align 8
  %58 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %50, i64 -1
  %59 = icmp eq %"struct.extensions::ValueCounter::Entry"* %52, %44
  br i1 %59, label %60, label %49

60:                                               ; preds = %49
  %61 = load i64, i64* %7, align 8
  %62 = load %"struct.extensions::ValueCounter::Entry"*, %"struct.extensions::ValueCounter::Entry"** %4, align 8
  br label %63

63:                                               ; preds = %47, %60
  %64 = phi %"struct.extensions::ValueCounter::Entry"* [ %44, %47 ], [ %62, %60 ]
  %65 = phi %"struct.extensions::ValueCounter::Entry"* [ %35, %47 ], [ %58, %60 ]
  %66 = phi i64 [ %48, %47 ], [ %61, %60 ]
  %67 = ptrtoint %"struct.extensions::ValueCounter::Entry"* %65 to i64
  store i64 %67, i64* %7, align 8
  store i64 %42, i64* %5, align 8
  store i64 %37, i64* %17, align 8
  %68 = inttoptr i64 %66 to %"struct.extensions::ValueCounter::Entry"*
  %69 = icmp eq %"struct.extensions::ValueCounter::Entry"* %64, %68
  br i1 %69, label %75, label %70

70:                                               ; preds = %63, %70
  %71 = phi %"struct.extensions::ValueCounter::Entry"* [ %72, %70 ], [ %64, %63 ]
  %72 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %71, i64 -1
  %73 = getelementptr inbounds %"struct.extensions::ValueCounter::Entry", %"struct.extensions::ValueCounter::Entry"* %72, i64 0, i32 0
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* %73) #8
  %74 = icmp eq %"struct.extensions::ValueCounter::Entry"* %72, %68
  br i1 %74, label %75, label %70

75:                                               ; preds = %70, %63
  %76 = icmp eq i64 %66, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %75
  %78 = inttoptr i64 %66 to i8*
  call void @_ZdlPv(i8* %78) #9
  br label %79

79:                                               ; preds = %75, %77
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base5ValueC1EOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare dereferenceable(32) %"class.base::Value"* @_ZN4base5ValueaSEOS0_(%"class.base::Value"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
