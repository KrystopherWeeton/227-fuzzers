; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_text_format_update_event_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_text_format_update_event_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.77", i32, [4 x i8], %"class.std::__1::unique_ptr.213", %"class.std::__1::unique_ptr.213", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.229", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.254", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.170", %"class.std::__1::unique_ptr.193", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__cxx_atomic_impl.116" }
%"struct.std::__1::__cxx_atomic_impl.116" = type { %"struct.std::__1::__cxx_atomic_base_impl.117" }
%"struct.std::__1::__cxx_atomic_base_impl.117" = type { i64 }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::Worklist.124"* }
%"class.blink::Worklist.124" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::Worklist.131"* }
%"class.blink::Worklist.131" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::Worklist.138"* }
%"class.blink::Worklist.138" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::Worklist.145"* }
%"class.blink::Worklist.145" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::Worklist.152"* }
%"class.blink::Worklist.152" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::Worklist.159"* }
%"class.blink::Worklist.159" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::Worklist.166"* }
%"class.blink::Worklist.166" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.173", %"class.std::__1::__compressed_pair.180", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.187", [4 x i8] }>
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175", %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { i64 }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { float }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.196", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.205" }
%"class.WTF::Vector.205" = type { %"class.WTF::VectorBuffer.206" }
%"class.WTF::VectorBuffer.206" = type { %"class.WTF::VectorBufferBase.207" }
%"class.WTF::VectorBufferBase.207" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.221" }
%"class.WTF::VectorBuffer.221" = type { %"class.WTF::VectorBufferBase.222" }
%"class.WTF::VectorBufferBase.222" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.235" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.124"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.131"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.138"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.145"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.152"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.285" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.253 }
%class.scoped_refptr.253 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.254" = type { %"struct.std::__1::__atomic_base.255" }
%"struct.std::__1::__atomic_base.255" = type { %"struct.std::__1::__cxx_atomic_impl.256" }
%"struct.std::__1::__cxx_atomic_impl.256" = type { %"struct.std::__1::__cxx_atomic_base_impl.257" }
%"struct.std::__1::__cxx_atomic_base_impl.257" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::TextFormatUpdateEventInit" = type { %"class.blink::IDLDictionaryBase", i8, i8, %"class.WTF::String", i32, i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.24", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.71", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.258", %"class.std::__1::unique_ptr.263", %"class.blink::Persistent.269", %"class.blink::Persistent.273", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.8", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.24" = type { %"class.WTF::HashTable.25" }
%"class.WTF::HashTable.25" = type <{ %"struct.WTF::KeyValuePair.28"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.28" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.37", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.32", i8* }
%"class.WTF::HashMap.32" = type { %"class.WTF::HashTable.33" }
%"class.WTF::HashTable.33" = type <{ %"struct.WTF::KeyValuePair.36"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.36" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.37" = type { %"class.v8::PersistentValueMapBase.38" }
%"class.v8::PersistentValueMapBase.38" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.39", i8* }
%"class.WTF::HashMap.39" = type { %"class.WTF::HashTable.40" }
%"class.WTF::HashTable.40" = type <{ %"struct.WTF::KeyValuePair.43"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.43" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.44" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.55", %"class.WTF::Vector.61", i8, i32 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.61" = type { %"class.WTF::VectorBuffer.62" }
%"class.WTF::VectorBuffer.62" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.292, %"class.blink::Member.311", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.292 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.293", i32, i32, %"class.blink::Persistent.295" }
%"class.WTF::RefCounted.293" = type { %"class.base::RefCounted.294" }
%"class.base::RefCounted.294" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.295" = type { %"class.blink::PersistentBase.296" }
%"class.blink::PersistentBase.296" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.301" }
%"class.WTF::HashMap.301" = type { %"class.WTF::HashTable.302" }
%"class.WTF::HashTable.302" = type <{ %"struct.WTF::KeyValuePair.304"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.304" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.305" }
%"class.blink::MemberBase.305" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.308" = type { %"class.v8::TracedReference.309" }
%"class.v8::TracedReference.309" = type { %"class.v8::BasicTracedReference.310" }
%"class.v8::BasicTracedReference.310" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.258" = type { %"class.WTF::VectorBuffer.259" }
%"class.WTF::VectorBuffer.259" = type { %"class.WTF::VectorBufferBase.260" }
%"class.WTF::VectorBufferBase.260" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.269" = type { %"class.blink::PersistentBase.270" }
%"class.blink::PersistentBase.270" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.273" = type { %"class.blink::PersistentBase.274" }
%"class.blink::PersistentBase.274" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.279" }
%"class.WTF::Vector.279" = type { %"class.WTF::VectorBuffer.280" }
%"class.WTF::VectorBuffer.280" = type { %"class.WTF::VectorBufferBase.281" }
%"class.WTF::VectorBufferBase.281" = type { %"struct.std::__1::pair.282"*, i32, i32 }
%"struct.std::__1::pair.282" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.313" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.v8::Uint32" = type { i8 }
%"class.v8::Int32" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.v8::Integer" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@_ZZN5blinkL38eternalV8TextFormatUpdateEventInitKeysEPN2v87IsolateEE5kKeys = internal constant [8 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.1 = private unnamed_addr constant [16 x i8] c"backgroundColor\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"formatRangeEnd\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"formatRangeStart\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"suggestionHighlightColor\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"textColor\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"underlineColor\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"underlineStyle\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"underlineThickness\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 8, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @_ZZN5blinkL38eternalV8TextFormatUpdateEventInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.11 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink27V8TextFormatUpdateEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_25TextFormatUpdateEventInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::TextFormatUpdateEventInit"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = icmp eq %"class.v8::Value"* %1, null
  br i1 %12, label %1198, label %13

13:                                               ; preds = %4
  %14 = bitcast %"class.v8::Value"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 3
  %17 = icmp eq i64 %16, 1
  br i1 %17, label %18, label %34

18:                                               ; preds = %13
  %19 = add i64 %15, -1
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i64 %15, -4294967296
  %23 = zext i32 %21 to i64
  %24 = or i64 %22, %23
  %25 = add i64 %24, 7
  %26 = inttoptr i64 %25 to i16*
  %27 = load i16, i16* %26, align 2
  %28 = icmp eq i16 %27, 67
  br i1 %28, label %29, label %34

29:                                               ; preds = %18
  %30 = add i64 %15, 23
  %31 = inttoptr i64 %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = ashr i32 %32, 1
  switch i32 %33, label %34 [
    i32 5, label %1198
    i32 3, label %1198
  ]

34:                                               ; preds = %29, %18, %13
  %35 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %35, label %37, label %36

36:                                               ; preds = %34
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #7
  br label %1198

37:                                               ; preds = %34
  %38 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %39 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %40 to %"class.blink::V8PerIsolateData"**
  %42 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %41, align 8
  %43 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %42, i8* bitcast ([8 x i8*]* @_ZZN5blinkL38eternalV8TextFormatUpdateEventInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %44 = extractvalue { i64, %"class.v8::Eternal"* } %43, 1
  %45 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %45) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %46 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %47 = bitcast %"class.v8::Eternal"* %44 to %"class.v8::Value"**
  %48 = load %"class.v8::Value"*, %"class.v8::Value"** %47, align 8
  %49 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %48) #7
  %50 = icmp eq %"class.v8::Value"* %49, null
  br i1 %50, label %51, label %57

51:                                               ; preds = %37
  %52 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %53 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %54 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %53, align 8
  %55 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %54, i64 5
  %56 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %55, align 8
  call void %56(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %52) #7
  br label %1197

57:                                               ; preds = %37
  %58 = bitcast %"class.v8::Value"* %49 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 3
  %61 = icmp eq i64 %60, 1
  br i1 %61, label %62, label %79

62:                                               ; preds = %57
  %63 = add i64 %59, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = and i64 %59, -4294967296
  %67 = zext i32 %65 to i64
  %68 = or i64 %66, %67
  %69 = add i64 %68, 7
  %70 = inttoptr i64 %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = icmp eq i16 %71, 67
  br i1 %72, label %73, label %79

73:                                               ; preds = %62
  %74 = add i64 %59, 23
  %75 = inttoptr i64 %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = and i32 %76, -2
  %78 = icmp eq i32 %77, 10
  br i1 %78, label %219, label %79

79:                                               ; preds = %62, %57, %73
  %80 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %80) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 -86, i64 152, i1 false)
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %49, %"class.v8::Value"** %81, align 8
  %82 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %83, align 8
  %84 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %85 = bitcast %"class.std::__1::unique_ptr"* %84 to i64*
  store i64 0, i64* %85, align 8
  %86 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %86, label %87, label %197

87:                                               ; preds = %79
  %88 = load %"class.v8::Value"*, %"class.v8::Value"** %81, align 8
  %89 = icmp eq %"class.v8::Value"* %88, null
  br i1 %89, label %90, label %114, !prof !2

90:                                               ; preds = %87
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 3
  br label %139

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %112

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i33
  %104 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %103, i33 1) #7
  %105 = extractvalue { i33, i1 } %104, 1
  %106 = extractvalue { i33, i1 } %104, 0
  %107 = icmp slt i33 %106, 0
  %108 = or i1 %105, %107
  br i1 %108, label %109, label %110, !prof !2

109:                                              ; preds = %100
  call void @llvm.trap() #7
  unreachable

110:                                              ; preds = %100
  %111 = trunc i33 %106 to i32
  store i32 %111, i32* %101, align 4
  br label %112

112:                                              ; preds = %95, %110
  %113 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 3
  br label %120

114:                                              ; preds = %87
  %115 = bitcast %"class.v8::Value"* %88 to %"class.v8::String"*
  %116 = load i32, i32* %82, align 8
  %117 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %115, i32 %116) #7
  %118 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 3
  %119 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %119, label %139, label %120

120:                                              ; preds = %112, %114
  %121 = phi %"class.WTF::String"* [ %113, %112 ], [ %118, %114 ]
  %122 = phi %"class.WTF::StringImpl"* [ %91, %112 ], [ %117, %114 ]
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %139

127:                                              ; preds = %120
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %129 = load i32, i32* %128, align 4
  %130 = zext i32 %129 to i33
  %131 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %130, i33 1) #7
  %132 = extractvalue { i33, i1 } %131, 1
  %133 = extractvalue { i33, i1 } %131, 0
  %134 = icmp slt i33 %133, 0
  %135 = or i1 %132, %134
  br i1 %135, label %136, label %137, !prof !2

136:                                              ; preds = %127
  call void @llvm.trap() #7
  unreachable

137:                                              ; preds = %127
  %138 = trunc i33 %133 to i32
  store i32 %138, i32* %128, align 4
  br label %139

139:                                              ; preds = %93, %137, %120, %114
  %140 = phi i1 [ false, %137 ], [ false, %120 ], [ true, %114 ], [ true, %93 ]
  %141 = phi %"class.WTF::String"* [ %121, %137 ], [ %121, %120 ], [ %118, %114 ], [ %94, %93 ]
  %142 = phi %"class.WTF::StringImpl"* [ %122, %137 ], [ %122, %120 ], [ null, %114 ], [ null, %93 ]
  %143 = ptrtoint %"class.WTF::StringImpl"* %142 to i64
  %144 = bitcast %"class.WTF::String"* %141 to i64*
  %145 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %141, i64 0, i32 0, i32 0
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %145, align 8
  store i64 %143, i64* %144, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %147, label %161, label %148

148:                                              ; preds = %139
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #7
  br label %161

161:                                              ; preds = %139, %157, %160
  br i1 %140, label %175, label %162

162:                                              ; preds = %161
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #7
  br label %175

175:                                              ; preds = %161, %171, %174
  %176 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %175
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %177) #7
  br label %180

180:                                              ; preds = %179, %175
  %181 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %182 = icmp eq %"class.WTF::StringImpl"* %181, null
  br i1 %182, label %196, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %181, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %185 = load atomic i32, i32* %184 monotonic, align 4
  %186 = and i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %181, i64 0, i32 0
  %189 = load i32, i32* %188, align 4
  br i1 %187, label %190, label %192

190:                                              ; preds = %183
  %191 = add i32 %189, -1
  store i32 %191, i32* %188, align 4
  br label %192

192:                                              ; preds = %190, %183
  %193 = phi i32 [ %191, %190 ], [ %189, %183 ]
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %196

195:                                              ; preds = %192
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %181) #7
  br label %196

196:                                              ; preds = %180, %192, %195
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %80) #7
  br label %219

197:                                              ; preds = %79
  %198 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  store i8* null, i8** %198, align 8
  %200 = icmp eq i8* %199, null
  br i1 %200, label %202, label %201

201:                                              ; preds = %197
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %199) #7
  br label %202

202:                                              ; preds = %201, %197
  %203 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %204 = icmp eq %"class.WTF::StringImpl"* %203, null
  br i1 %204, label %218, label %205

205:                                              ; preds = %202
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load atomic i32, i32* %206 monotonic, align 4
  %208 = and i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 0
  %211 = load i32, i32* %210, align 4
  br i1 %209, label %212, label %214

212:                                              ; preds = %205
  %213 = add i32 %211, -1
  store i32 %213, i32* %210, align 4
  br label %214

214:                                              ; preds = %212, %205
  %215 = phi i32 [ %213, %212 ], [ %211, %205 ]
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %218

217:                                              ; preds = %214
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %203) #7
  br label %218

218:                                              ; preds = %202, %214, %217
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %80) #7
  br label %1197

219:                                              ; preds = %196, %73
  %220 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 1, i32 0
  %221 = bitcast %"class.v8::Name"** %220 to %"class.v8::Value"**
  %222 = load %"class.v8::Value"*, %"class.v8::Value"** %221, align 8
  %223 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %222) #7
  %224 = icmp eq %"class.v8::Value"* %223, null
  br i1 %224, label %225, label %231

225:                                              ; preds = %219
  %226 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %227 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %228 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %227, align 8
  %229 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %228, i64 5
  %230 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %229, align 8
  call void %230(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %226) #7
  br label %1197

231:                                              ; preds = %219
  %232 = bitcast %"class.v8::Value"* %223 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = and i64 %233, 3
  %235 = icmp eq i64 %234, 1
  br i1 %235, label %236, label %253

236:                                              ; preds = %231
  %237 = add i64 %233, -1
  %238 = inttoptr i64 %237 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = and i64 %233, -4294967296
  %241 = zext i32 %239 to i64
  %242 = or i64 %240, %241
  %243 = add i64 %242, 7
  %244 = inttoptr i64 %243 to i16*
  %245 = load i16, i16* %244, align 2
  %246 = icmp eq i16 %245, 67
  br i1 %246, label %247, label %253

247:                                              ; preds = %236
  %248 = add i64 %233, 23
  %249 = inttoptr i64 %248 to i32*
  %250 = load i32, i32* %249, align 4
  %251 = and i32 %250, -2
  %252 = icmp eq i32 %251, 10
  br i1 %252, label %273, label %253

253:                                              ; preds = %236, %231, %247
  %254 = call zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"* nonnull %223) #7
  br i1 %254, label %255, label %258, !prof !3

255:                                              ; preds = %253
  %256 = bitcast %"class.v8::Value"* %223 to %"class.v8::Uint32"*
  %257 = call i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"* nonnull %256) #7
  br label %265

258:                                              ; preds = %253
  %259 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %223) #7
  br i1 %259, label %260, label %263, !prof !3

260:                                              ; preds = %258
  %261 = bitcast %"class.v8::Value"* %223 to %"class.v8::Int32"*
  %262 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %261) #7
  br label %265

263:                                              ; preds = %258
  %264 = call i32 @_ZN5blink12ToUInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %223, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %265

265:                                              ; preds = %255, %260, %263
  %266 = phi i32 [ %257, %255 ], [ %262, %260 ], [ %264, %263 ]
  %267 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %268 = load i32, i32* %267, align 8
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %1197

270:                                              ; preds = %265
  %271 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 4
  store i32 %266, i32* %271, align 8
  %272 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 1
  store i8 1, i8* %272, align 8
  br label %273

273:                                              ; preds = %270, %247
  %274 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 2, i32 0
  %275 = bitcast %"class.v8::Name"** %274 to %"class.v8::Value"**
  %276 = load %"class.v8::Value"*, %"class.v8::Value"** %275, align 8
  %277 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %276) #7
  %278 = icmp eq %"class.v8::Value"* %277, null
  br i1 %278, label %279, label %285

279:                                              ; preds = %273
  %280 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %281 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %282 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %281, align 8
  %283 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %282, i64 5
  %284 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %283, align 8
  call void %284(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %280) #7
  br label %1197

285:                                              ; preds = %273
  %286 = bitcast %"class.v8::Value"* %277 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = and i64 %287, 3
  %289 = icmp eq i64 %288, 1
  br i1 %289, label %290, label %307

290:                                              ; preds = %285
  %291 = add i64 %287, -1
  %292 = inttoptr i64 %291 to i32*
  %293 = load i32, i32* %292, align 4
  %294 = and i64 %287, -4294967296
  %295 = zext i32 %293 to i64
  %296 = or i64 %294, %295
  %297 = add i64 %296, 7
  %298 = inttoptr i64 %297 to i16*
  %299 = load i16, i16* %298, align 2
  %300 = icmp eq i16 %299, 67
  br i1 %300, label %301, label %307

301:                                              ; preds = %290
  %302 = add i64 %287, 23
  %303 = inttoptr i64 %302 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = and i32 %304, -2
  %306 = icmp eq i32 %305, 10
  br i1 %306, label %327, label %307

307:                                              ; preds = %290, %285, %301
  %308 = call zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"* nonnull %277) #7
  br i1 %308, label %309, label %312, !prof !3

309:                                              ; preds = %307
  %310 = bitcast %"class.v8::Value"* %277 to %"class.v8::Uint32"*
  %311 = call i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"* nonnull %310) #7
  br label %319

312:                                              ; preds = %307
  %313 = call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %277) #7
  br i1 %313, label %314, label %317, !prof !3

314:                                              ; preds = %312
  %315 = bitcast %"class.v8::Value"* %277 to %"class.v8::Int32"*
  %316 = call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* nonnull %315) #7
  br label %319

317:                                              ; preds = %312
  %318 = call i32 @_ZN5blink12ToUInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* nonnull %277, i32 0, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  br label %319

319:                                              ; preds = %309, %314, %317
  %320 = phi i32 [ %311, %309 ], [ %316, %314 ], [ %318, %317 ]
  %321 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %322 = load i32, i32* %321, align 8
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %1197

324:                                              ; preds = %319
  %325 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 5
  store i32 %320, i32* %325, align 4
  %326 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 2
  store i8 1, i8* %326, align 1
  br label %327

327:                                              ; preds = %324, %301
  %328 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 3, i32 0
  %329 = bitcast %"class.v8::Name"** %328 to %"class.v8::Value"**
  %330 = load %"class.v8::Value"*, %"class.v8::Value"** %329, align 8
  %331 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %330) #7
  %332 = icmp eq %"class.v8::Value"* %331, null
  br i1 %332, label %333, label %339

333:                                              ; preds = %327
  %334 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %335 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %336 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %335, align 8
  %337 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %336, i64 5
  %338 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %337, align 8
  call void %338(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %334) #7
  br label %1197

339:                                              ; preds = %327
  %340 = bitcast %"class.v8::Value"* %331 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = and i64 %341, 3
  %343 = icmp eq i64 %342, 1
  br i1 %343, label %344, label %361

344:                                              ; preds = %339
  %345 = add i64 %341, -1
  %346 = inttoptr i64 %345 to i32*
  %347 = load i32, i32* %346, align 4
  %348 = and i64 %341, -4294967296
  %349 = zext i32 %347 to i64
  %350 = or i64 %348, %349
  %351 = add i64 %350, 7
  %352 = inttoptr i64 %351 to i16*
  %353 = load i16, i16* %352, align 2
  %354 = icmp eq i16 %353, 67
  br i1 %354, label %355, label %361

355:                                              ; preds = %344
  %356 = add i64 %341, 23
  %357 = inttoptr i64 %356 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = and i32 %358, -2
  %360 = icmp eq i32 %359, 10
  br i1 %360, label %501, label %361

361:                                              ; preds = %344, %339, %355
  %362 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %362) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %362, i8 -86, i64 152, i1 false)
  %363 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %331, %"class.v8::Value"** %363, align 8
  %364 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %364, align 8
  %365 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %365, align 8
  %366 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %367 = bitcast %"class.std::__1::unique_ptr"* %366 to i64*
  store i64 0, i64* %367, align 8
  %368 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %368, label %369, label %479

369:                                              ; preds = %361
  %370 = load %"class.v8::Value"*, %"class.v8::Value"** %363, align 8
  %371 = icmp eq %"class.v8::Value"* %370, null
  br i1 %371, label %372, label %396, !prof !2

372:                                              ; preds = %369
  %373 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %374 = icmp eq %"class.WTF::StringImpl"* %373, null
  br i1 %374, label %375, label %377

375:                                              ; preds = %372
  %376 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 6
  br label %421

377:                                              ; preds = %372
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %379 = load atomic i32, i32* %378 monotonic, align 4
  %380 = and i32 %379, 2
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %394

382:                                              ; preds = %377
  %383 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %373, i64 0, i32 0
  %384 = load i32, i32* %383, align 4
  %385 = zext i32 %384 to i33
  %386 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %385, i33 1) #7
  %387 = extractvalue { i33, i1 } %386, 1
  %388 = extractvalue { i33, i1 } %386, 0
  %389 = icmp slt i33 %388, 0
  %390 = or i1 %387, %389
  br i1 %390, label %391, label %392, !prof !2

391:                                              ; preds = %382
  call void @llvm.trap() #7
  unreachable

392:                                              ; preds = %382
  %393 = trunc i33 %388 to i32
  store i32 %393, i32* %383, align 4
  br label %394

394:                                              ; preds = %377, %392
  %395 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 6
  br label %402

396:                                              ; preds = %369
  %397 = bitcast %"class.v8::Value"* %370 to %"class.v8::String"*
  %398 = load i32, i32* %364, align 8
  %399 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %397, i32 %398) #7
  %400 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 6
  %401 = icmp eq %"class.WTF::StringImpl"* %399, null
  br i1 %401, label %421, label %402

402:                                              ; preds = %394, %396
  %403 = phi %"class.WTF::String"* [ %395, %394 ], [ %400, %396 ]
  %404 = phi %"class.WTF::StringImpl"* [ %373, %394 ], [ %399, %396 ]
  %405 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %404, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %406 = load atomic i32, i32* %405 monotonic, align 4
  %407 = and i32 %406, 2
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %421

409:                                              ; preds = %402
  %410 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %404, i64 0, i32 0
  %411 = load i32, i32* %410, align 4
  %412 = zext i32 %411 to i33
  %413 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %412, i33 1) #7
  %414 = extractvalue { i33, i1 } %413, 1
  %415 = extractvalue { i33, i1 } %413, 0
  %416 = icmp slt i33 %415, 0
  %417 = or i1 %414, %416
  br i1 %417, label %418, label %419, !prof !2

418:                                              ; preds = %409
  call void @llvm.trap() #7
  unreachable

419:                                              ; preds = %409
  %420 = trunc i33 %415 to i32
  store i32 %420, i32* %410, align 4
  br label %421

421:                                              ; preds = %375, %419, %402, %396
  %422 = phi i1 [ false, %419 ], [ false, %402 ], [ true, %396 ], [ true, %375 ]
  %423 = phi %"class.WTF::String"* [ %403, %419 ], [ %403, %402 ], [ %400, %396 ], [ %376, %375 ]
  %424 = phi %"class.WTF::StringImpl"* [ %404, %419 ], [ %404, %402 ], [ null, %396 ], [ null, %375 ]
  %425 = ptrtoint %"class.WTF::StringImpl"* %424 to i64
  %426 = bitcast %"class.WTF::String"* %423 to i64*
  %427 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %423, i64 0, i32 0, i32 0
  %428 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %427, align 8
  store i64 %425, i64* %426, align 8
  %429 = icmp eq %"class.WTF::StringImpl"* %428, null
  br i1 %429, label %443, label %430

430:                                              ; preds = %421
  %431 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %428, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %432 = load atomic i32, i32* %431 monotonic, align 4
  %433 = and i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %428, i64 0, i32 0
  %436 = load i32, i32* %435, align 4
  br i1 %434, label %437, label %439

437:                                              ; preds = %430
  %438 = add i32 %436, -1
  store i32 %438, i32* %435, align 4
  br label %439

439:                                              ; preds = %437, %430
  %440 = phi i32 [ %438, %437 ], [ %436, %430 ]
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %442, label %443

442:                                              ; preds = %439
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %428) #7
  br label %443

443:                                              ; preds = %421, %439, %442
  br i1 %422, label %457, label %444

444:                                              ; preds = %443
  %445 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %424, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %446 = load atomic i32, i32* %445 monotonic, align 4
  %447 = and i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %424, i64 0, i32 0
  %450 = load i32, i32* %449, align 4
  br i1 %448, label %451, label %453

451:                                              ; preds = %444
  %452 = add i32 %450, -1
  store i32 %452, i32* %449, align 4
  br label %453

453:                                              ; preds = %451, %444
  %454 = phi i32 [ %452, %451 ], [ %450, %444 ]
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %457

456:                                              ; preds = %453
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %424) #7
  br label %457

457:                                              ; preds = %443, %453, %456
  %458 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %459 = load i8*, i8** %458, align 8
  store i8* null, i8** %458, align 8
  %460 = icmp eq i8* %459, null
  br i1 %460, label %462, label %461

461:                                              ; preds = %457
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %459) #7
  br label %462

462:                                              ; preds = %461, %457
  %463 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %464 = icmp eq %"class.WTF::StringImpl"* %463, null
  br i1 %464, label %478, label %465

465:                                              ; preds = %462
  %466 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %463, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %467 = load atomic i32, i32* %466 monotonic, align 4
  %468 = and i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %463, i64 0, i32 0
  %471 = load i32, i32* %470, align 4
  br i1 %469, label %472, label %474

472:                                              ; preds = %465
  %473 = add i32 %471, -1
  store i32 %473, i32* %470, align 4
  br label %474

474:                                              ; preds = %472, %465
  %475 = phi i32 [ %473, %472 ], [ %471, %465 ]
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %474
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %463) #7
  br label %478

478:                                              ; preds = %462, %474, %477
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %362) #7
  br label %501

479:                                              ; preds = %361
  %480 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %481 = load i8*, i8** %480, align 8
  store i8* null, i8** %480, align 8
  %482 = icmp eq i8* %481, null
  br i1 %482, label %484, label %483

483:                                              ; preds = %479
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %481) #7
  br label %484

484:                                              ; preds = %483, %479
  %485 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %486 = icmp eq %"class.WTF::StringImpl"* %485, null
  br i1 %486, label %500, label %487

487:                                              ; preds = %484
  %488 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %485, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %489 = load atomic i32, i32* %488 monotonic, align 4
  %490 = and i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %485, i64 0, i32 0
  %493 = load i32, i32* %492, align 4
  br i1 %491, label %494, label %496

494:                                              ; preds = %487
  %495 = add i32 %493, -1
  store i32 %495, i32* %492, align 4
  br label %496

496:                                              ; preds = %494, %487
  %497 = phi i32 [ %495, %494 ], [ %493, %487 ]
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %499, label %500

499:                                              ; preds = %496
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %485) #7
  br label %500

500:                                              ; preds = %484, %496, %499
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %362) #7
  br label %1197

501:                                              ; preds = %478, %355
  %502 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 4, i32 0
  %503 = bitcast %"class.v8::Name"** %502 to %"class.v8::Value"**
  %504 = load %"class.v8::Value"*, %"class.v8::Value"** %503, align 8
  %505 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %504) #7
  %506 = icmp eq %"class.v8::Value"* %505, null
  br i1 %506, label %507, label %513

507:                                              ; preds = %501
  %508 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %509 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %510 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %509, align 8
  %511 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %510, i64 5
  %512 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %511, align 8
  call void %512(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %508) #7
  br label %1197

513:                                              ; preds = %501
  %514 = bitcast %"class.v8::Value"* %505 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = and i64 %515, 3
  %517 = icmp eq i64 %516, 1
  br i1 %517, label %518, label %535

518:                                              ; preds = %513
  %519 = add i64 %515, -1
  %520 = inttoptr i64 %519 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = and i64 %515, -4294967296
  %523 = zext i32 %521 to i64
  %524 = or i64 %522, %523
  %525 = add i64 %524, 7
  %526 = inttoptr i64 %525 to i16*
  %527 = load i16, i16* %526, align 2
  %528 = icmp eq i16 %527, 67
  br i1 %528, label %529, label %535

529:                                              ; preds = %518
  %530 = add i64 %515, 23
  %531 = inttoptr i64 %530 to i32*
  %532 = load i32, i32* %531, align 4
  %533 = and i32 %532, -2
  %534 = icmp eq i32 %533, 10
  br i1 %534, label %675, label %535

535:                                              ; preds = %518, %513, %529
  %536 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %536) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %536, i8 -86, i64 152, i1 false)
  %537 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %505, %"class.v8::Value"** %537, align 8
  %538 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %538, align 8
  %539 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %539, align 8
  %540 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %541 = bitcast %"class.std::__1::unique_ptr"* %540 to i64*
  store i64 0, i64* %541, align 8
  %542 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %542, label %543, label %653

543:                                              ; preds = %535
  %544 = load %"class.v8::Value"*, %"class.v8::Value"** %537, align 8
  %545 = icmp eq %"class.v8::Value"* %544, null
  br i1 %545, label %546, label %570, !prof !2

546:                                              ; preds = %543
  %547 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %539, align 8
  %548 = icmp eq %"class.WTF::StringImpl"* %547, null
  br i1 %548, label %549, label %551

549:                                              ; preds = %546
  %550 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 7
  br label %595

551:                                              ; preds = %546
  %552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %547, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %553 = load atomic i32, i32* %552 monotonic, align 4
  %554 = and i32 %553, 2
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %568

556:                                              ; preds = %551
  %557 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %547, i64 0, i32 0
  %558 = load i32, i32* %557, align 4
  %559 = zext i32 %558 to i33
  %560 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %559, i33 1) #7
  %561 = extractvalue { i33, i1 } %560, 1
  %562 = extractvalue { i33, i1 } %560, 0
  %563 = icmp slt i33 %562, 0
  %564 = or i1 %561, %563
  br i1 %564, label %565, label %566, !prof !2

565:                                              ; preds = %556
  call void @llvm.trap() #7
  unreachable

566:                                              ; preds = %556
  %567 = trunc i33 %562 to i32
  store i32 %567, i32* %557, align 4
  br label %568

568:                                              ; preds = %551, %566
  %569 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 7
  br label %576

570:                                              ; preds = %543
  %571 = bitcast %"class.v8::Value"* %544 to %"class.v8::String"*
  %572 = load i32, i32* %538, align 8
  %573 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %571, i32 %572) #7
  %574 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 7
  %575 = icmp eq %"class.WTF::StringImpl"* %573, null
  br i1 %575, label %595, label %576

576:                                              ; preds = %568, %570
  %577 = phi %"class.WTF::String"* [ %569, %568 ], [ %574, %570 ]
  %578 = phi %"class.WTF::StringImpl"* [ %547, %568 ], [ %573, %570 ]
  %579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %578, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %580 = load atomic i32, i32* %579 monotonic, align 4
  %581 = and i32 %580, 2
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %595

583:                                              ; preds = %576
  %584 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %578, i64 0, i32 0
  %585 = load i32, i32* %584, align 4
  %586 = zext i32 %585 to i33
  %587 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %586, i33 1) #7
  %588 = extractvalue { i33, i1 } %587, 1
  %589 = extractvalue { i33, i1 } %587, 0
  %590 = icmp slt i33 %589, 0
  %591 = or i1 %588, %590
  br i1 %591, label %592, label %593, !prof !2

592:                                              ; preds = %583
  call void @llvm.trap() #7
  unreachable

593:                                              ; preds = %583
  %594 = trunc i33 %589 to i32
  store i32 %594, i32* %584, align 4
  br label %595

595:                                              ; preds = %549, %593, %576, %570
  %596 = phi i1 [ false, %593 ], [ false, %576 ], [ true, %570 ], [ true, %549 ]
  %597 = phi %"class.WTF::String"* [ %577, %593 ], [ %577, %576 ], [ %574, %570 ], [ %550, %549 ]
  %598 = phi %"class.WTF::StringImpl"* [ %578, %593 ], [ %578, %576 ], [ null, %570 ], [ null, %549 ]
  %599 = ptrtoint %"class.WTF::StringImpl"* %598 to i64
  %600 = bitcast %"class.WTF::String"* %597 to i64*
  %601 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %597, i64 0, i32 0, i32 0
  %602 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %601, align 8
  store i64 %599, i64* %600, align 8
  %603 = icmp eq %"class.WTF::StringImpl"* %602, null
  br i1 %603, label %617, label %604

604:                                              ; preds = %595
  %605 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %602, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %606 = load atomic i32, i32* %605 monotonic, align 4
  %607 = and i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %602, i64 0, i32 0
  %610 = load i32, i32* %609, align 4
  br i1 %608, label %611, label %613

611:                                              ; preds = %604
  %612 = add i32 %610, -1
  store i32 %612, i32* %609, align 4
  br label %613

613:                                              ; preds = %611, %604
  %614 = phi i32 [ %612, %611 ], [ %610, %604 ]
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %616, label %617

616:                                              ; preds = %613
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %602) #7
  br label %617

617:                                              ; preds = %595, %613, %616
  br i1 %596, label %631, label %618

618:                                              ; preds = %617
  %619 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %598, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %620 = load atomic i32, i32* %619 monotonic, align 4
  %621 = and i32 %620, 2
  %622 = icmp eq i32 %621, 0
  %623 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %598, i64 0, i32 0
  %624 = load i32, i32* %623, align 4
  br i1 %622, label %625, label %627

625:                                              ; preds = %618
  %626 = add i32 %624, -1
  store i32 %626, i32* %623, align 4
  br label %627

627:                                              ; preds = %625, %618
  %628 = phi i32 [ %626, %625 ], [ %624, %618 ]
  %629 = icmp eq i32 %628, 0
  br i1 %629, label %630, label %631

630:                                              ; preds = %627
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %598) #7
  br label %631

631:                                              ; preds = %617, %627, %630
  %632 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %633 = load i8*, i8** %632, align 8
  store i8* null, i8** %632, align 8
  %634 = icmp eq i8* %633, null
  br i1 %634, label %636, label %635

635:                                              ; preds = %631
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %633) #7
  br label %636

636:                                              ; preds = %635, %631
  %637 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %539, align 8
  %638 = icmp eq %"class.WTF::StringImpl"* %637, null
  br i1 %638, label %652, label %639

639:                                              ; preds = %636
  %640 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %637, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %641 = load atomic i32, i32* %640 monotonic, align 4
  %642 = and i32 %641, 2
  %643 = icmp eq i32 %642, 0
  %644 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %637, i64 0, i32 0
  %645 = load i32, i32* %644, align 4
  br i1 %643, label %646, label %648

646:                                              ; preds = %639
  %647 = add i32 %645, -1
  store i32 %647, i32* %644, align 4
  br label %648

648:                                              ; preds = %646, %639
  %649 = phi i32 [ %647, %646 ], [ %645, %639 ]
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %651, label %652

651:                                              ; preds = %648
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %637) #7
  br label %652

652:                                              ; preds = %636, %648, %651
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %536) #7
  br label %675

653:                                              ; preds = %535
  %654 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %655 = load i8*, i8** %654, align 8
  store i8* null, i8** %654, align 8
  %656 = icmp eq i8* %655, null
  br i1 %656, label %658, label %657

657:                                              ; preds = %653
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %655) #7
  br label %658

658:                                              ; preds = %657, %653
  %659 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %539, align 8
  %660 = icmp eq %"class.WTF::StringImpl"* %659, null
  br i1 %660, label %674, label %661

661:                                              ; preds = %658
  %662 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %659, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %663 = load atomic i32, i32* %662 monotonic, align 4
  %664 = and i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %659, i64 0, i32 0
  %667 = load i32, i32* %666, align 4
  br i1 %665, label %668, label %670

668:                                              ; preds = %661
  %669 = add i32 %667, -1
  store i32 %669, i32* %666, align 4
  br label %670

670:                                              ; preds = %668, %661
  %671 = phi i32 [ %669, %668 ], [ %667, %661 ]
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %673, label %674

673:                                              ; preds = %670
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %659) #7
  br label %674

674:                                              ; preds = %658, %670, %673
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %536) #7
  br label %1197

675:                                              ; preds = %652, %529
  %676 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 5, i32 0
  %677 = bitcast %"class.v8::Name"** %676 to %"class.v8::Value"**
  %678 = load %"class.v8::Value"*, %"class.v8::Value"** %677, align 8
  %679 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %678) #7
  %680 = icmp eq %"class.v8::Value"* %679, null
  br i1 %680, label %681, label %687

681:                                              ; preds = %675
  %682 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %683 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %684 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %683, align 8
  %685 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %684, i64 5
  %686 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %685, align 8
  call void %686(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %682) #7
  br label %1197

687:                                              ; preds = %675
  %688 = bitcast %"class.v8::Value"* %679 to i64*
  %689 = load i64, i64* %688, align 8
  %690 = and i64 %689, 3
  %691 = icmp eq i64 %690, 1
  br i1 %691, label %692, label %709

692:                                              ; preds = %687
  %693 = add i64 %689, -1
  %694 = inttoptr i64 %693 to i32*
  %695 = load i32, i32* %694, align 4
  %696 = and i64 %689, -4294967296
  %697 = zext i32 %695 to i64
  %698 = or i64 %696, %697
  %699 = add i64 %698, 7
  %700 = inttoptr i64 %699 to i16*
  %701 = load i16, i16* %700, align 2
  %702 = icmp eq i16 %701, 67
  br i1 %702, label %703, label %709

703:                                              ; preds = %692
  %704 = add i64 %689, 23
  %705 = inttoptr i64 %704 to i32*
  %706 = load i32, i32* %705, align 4
  %707 = and i32 %706, -2
  %708 = icmp eq i32 %707, 10
  br i1 %708, label %849, label %709

709:                                              ; preds = %692, %687, %703
  %710 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %710) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %710, i8 -86, i64 152, i1 false)
  %711 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %679, %"class.v8::Value"** %711, align 8
  %712 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %712, align 8
  %713 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %713, align 8
  %714 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %715 = bitcast %"class.std::__1::unique_ptr"* %714 to i64*
  store i64 0, i64* %715, align 8
  %716 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %716, label %717, label %827

717:                                              ; preds = %709
  %718 = load %"class.v8::Value"*, %"class.v8::Value"** %711, align 8
  %719 = icmp eq %"class.v8::Value"* %718, null
  br i1 %719, label %720, label %744, !prof !2

720:                                              ; preds = %717
  %721 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %713, align 8
  %722 = icmp eq %"class.WTF::StringImpl"* %721, null
  br i1 %722, label %723, label %725

723:                                              ; preds = %720
  %724 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 8
  br label %769

725:                                              ; preds = %720
  %726 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %727 = load atomic i32, i32* %726 monotonic, align 4
  %728 = and i32 %727, 2
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %730, label %742

730:                                              ; preds = %725
  %731 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 0
  %732 = load i32, i32* %731, align 4
  %733 = zext i32 %732 to i33
  %734 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %733, i33 1) #7
  %735 = extractvalue { i33, i1 } %734, 1
  %736 = extractvalue { i33, i1 } %734, 0
  %737 = icmp slt i33 %736, 0
  %738 = or i1 %735, %737
  br i1 %738, label %739, label %740, !prof !2

739:                                              ; preds = %730
  call void @llvm.trap() #7
  unreachable

740:                                              ; preds = %730
  %741 = trunc i33 %736 to i32
  store i32 %741, i32* %731, align 4
  br label %742

742:                                              ; preds = %725, %740
  %743 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 8
  br label %750

744:                                              ; preds = %717
  %745 = bitcast %"class.v8::Value"* %718 to %"class.v8::String"*
  %746 = load i32, i32* %712, align 8
  %747 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %745, i32 %746) #7
  %748 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 8
  %749 = icmp eq %"class.WTF::StringImpl"* %747, null
  br i1 %749, label %769, label %750

750:                                              ; preds = %742, %744
  %751 = phi %"class.WTF::String"* [ %743, %742 ], [ %748, %744 ]
  %752 = phi %"class.WTF::StringImpl"* [ %721, %742 ], [ %747, %744 ]
  %753 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %752, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %754 = load atomic i32, i32* %753 monotonic, align 4
  %755 = and i32 %754, 2
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %757, label %769

757:                                              ; preds = %750
  %758 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %752, i64 0, i32 0
  %759 = load i32, i32* %758, align 4
  %760 = zext i32 %759 to i33
  %761 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %760, i33 1) #7
  %762 = extractvalue { i33, i1 } %761, 1
  %763 = extractvalue { i33, i1 } %761, 0
  %764 = icmp slt i33 %763, 0
  %765 = or i1 %762, %764
  br i1 %765, label %766, label %767, !prof !2

766:                                              ; preds = %757
  call void @llvm.trap() #7
  unreachable

767:                                              ; preds = %757
  %768 = trunc i33 %763 to i32
  store i32 %768, i32* %758, align 4
  br label %769

769:                                              ; preds = %723, %767, %750, %744
  %770 = phi i1 [ false, %767 ], [ false, %750 ], [ true, %744 ], [ true, %723 ]
  %771 = phi %"class.WTF::String"* [ %751, %767 ], [ %751, %750 ], [ %748, %744 ], [ %724, %723 ]
  %772 = phi %"class.WTF::StringImpl"* [ %752, %767 ], [ %752, %750 ], [ null, %744 ], [ null, %723 ]
  %773 = ptrtoint %"class.WTF::StringImpl"* %772 to i64
  %774 = bitcast %"class.WTF::String"* %771 to i64*
  %775 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %771, i64 0, i32 0, i32 0
  %776 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %775, align 8
  store i64 %773, i64* %774, align 8
  %777 = icmp eq %"class.WTF::StringImpl"* %776, null
  br i1 %777, label %791, label %778

778:                                              ; preds = %769
  %779 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %776, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %780 = load atomic i32, i32* %779 monotonic, align 4
  %781 = and i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %776, i64 0, i32 0
  %784 = load i32, i32* %783, align 4
  br i1 %782, label %785, label %787

785:                                              ; preds = %778
  %786 = add i32 %784, -1
  store i32 %786, i32* %783, align 4
  br label %787

787:                                              ; preds = %785, %778
  %788 = phi i32 [ %786, %785 ], [ %784, %778 ]
  %789 = icmp eq i32 %788, 0
  br i1 %789, label %790, label %791

790:                                              ; preds = %787
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %776) #7
  br label %791

791:                                              ; preds = %769, %787, %790
  br i1 %770, label %805, label %792

792:                                              ; preds = %791
  %793 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %772, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %794 = load atomic i32, i32* %793 monotonic, align 4
  %795 = and i32 %794, 2
  %796 = icmp eq i32 %795, 0
  %797 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %772, i64 0, i32 0
  %798 = load i32, i32* %797, align 4
  br i1 %796, label %799, label %801

799:                                              ; preds = %792
  %800 = add i32 %798, -1
  store i32 %800, i32* %797, align 4
  br label %801

801:                                              ; preds = %799, %792
  %802 = phi i32 [ %800, %799 ], [ %798, %792 ]
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %804, label %805

804:                                              ; preds = %801
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %772) #7
  br label %805

805:                                              ; preds = %791, %801, %804
  %806 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %807 = load i8*, i8** %806, align 8
  store i8* null, i8** %806, align 8
  %808 = icmp eq i8* %807, null
  br i1 %808, label %810, label %809

809:                                              ; preds = %805
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %807) #7
  br label %810

810:                                              ; preds = %809, %805
  %811 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %713, align 8
  %812 = icmp eq %"class.WTF::StringImpl"* %811, null
  br i1 %812, label %826, label %813

813:                                              ; preds = %810
  %814 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %811, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %815 = load atomic i32, i32* %814 monotonic, align 4
  %816 = and i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %811, i64 0, i32 0
  %819 = load i32, i32* %818, align 4
  br i1 %817, label %820, label %822

820:                                              ; preds = %813
  %821 = add i32 %819, -1
  store i32 %821, i32* %818, align 4
  br label %822

822:                                              ; preds = %820, %813
  %823 = phi i32 [ %821, %820 ], [ %819, %813 ]
  %824 = icmp eq i32 %823, 0
  br i1 %824, label %825, label %826

825:                                              ; preds = %822
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %811) #7
  br label %826

826:                                              ; preds = %810, %822, %825
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %710) #7
  br label %849

827:                                              ; preds = %709
  %828 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %829 = load i8*, i8** %828, align 8
  store i8* null, i8** %828, align 8
  %830 = icmp eq i8* %829, null
  br i1 %830, label %832, label %831

831:                                              ; preds = %827
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %829) #7
  br label %832

832:                                              ; preds = %831, %827
  %833 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %713, align 8
  %834 = icmp eq %"class.WTF::StringImpl"* %833, null
  br i1 %834, label %848, label %835

835:                                              ; preds = %832
  %836 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %833, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %837 = load atomic i32, i32* %836 monotonic, align 4
  %838 = and i32 %837, 2
  %839 = icmp eq i32 %838, 0
  %840 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %833, i64 0, i32 0
  %841 = load i32, i32* %840, align 4
  br i1 %839, label %842, label %844

842:                                              ; preds = %835
  %843 = add i32 %841, -1
  store i32 %843, i32* %840, align 4
  br label %844

844:                                              ; preds = %842, %835
  %845 = phi i32 [ %843, %842 ], [ %841, %835 ]
  %846 = icmp eq i32 %845, 0
  br i1 %846, label %847, label %848

847:                                              ; preds = %844
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %833) #7
  br label %848

848:                                              ; preds = %832, %844, %847
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %710) #7
  br label %1197

849:                                              ; preds = %826, %703
  %850 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 6, i32 0
  %851 = bitcast %"class.v8::Name"** %850 to %"class.v8::Value"**
  %852 = load %"class.v8::Value"*, %"class.v8::Value"** %851, align 8
  %853 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %852) #7
  %854 = icmp eq %"class.v8::Value"* %853, null
  br i1 %854, label %855, label %861

855:                                              ; preds = %849
  %856 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %857 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %858 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %857, align 8
  %859 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %858, i64 5
  %860 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %859, align 8
  call void %860(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %856) #7
  br label %1197

861:                                              ; preds = %849
  %862 = bitcast %"class.v8::Value"* %853 to i64*
  %863 = load i64, i64* %862, align 8
  %864 = and i64 %863, 3
  %865 = icmp eq i64 %864, 1
  br i1 %865, label %866, label %883

866:                                              ; preds = %861
  %867 = add i64 %863, -1
  %868 = inttoptr i64 %867 to i32*
  %869 = load i32, i32* %868, align 4
  %870 = and i64 %863, -4294967296
  %871 = zext i32 %869 to i64
  %872 = or i64 %870, %871
  %873 = add i64 %872, 7
  %874 = inttoptr i64 %873 to i16*
  %875 = load i16, i16* %874, align 2
  %876 = icmp eq i16 %875, 67
  br i1 %876, label %877, label %883

877:                                              ; preds = %866
  %878 = add i64 %863, 23
  %879 = inttoptr i64 %878 to i32*
  %880 = load i32, i32* %879, align 4
  %881 = and i32 %880, -2
  %882 = icmp eq i32 %881, 10
  br i1 %882, label %1023, label %883

883:                                              ; preds = %866, %861, %877
  %884 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %884) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %884, i8 -86, i64 152, i1 false)
  %885 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %853, %"class.v8::Value"** %885, align 8
  %886 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %886, align 8
  %887 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %887, align 8
  %888 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %889 = bitcast %"class.std::__1::unique_ptr"* %888 to i64*
  store i64 0, i64* %889, align 8
  %890 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %890, label %891, label %1001

891:                                              ; preds = %883
  %892 = load %"class.v8::Value"*, %"class.v8::Value"** %885, align 8
  %893 = icmp eq %"class.v8::Value"* %892, null
  br i1 %893, label %894, label %918, !prof !2

894:                                              ; preds = %891
  %895 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %896 = icmp eq %"class.WTF::StringImpl"* %895, null
  br i1 %896, label %897, label %899

897:                                              ; preds = %894
  %898 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 9
  br label %943

899:                                              ; preds = %894
  %900 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %895, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %901 = load atomic i32, i32* %900 monotonic, align 4
  %902 = and i32 %901, 2
  %903 = icmp eq i32 %902, 0
  br i1 %903, label %904, label %916

904:                                              ; preds = %899
  %905 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %895, i64 0, i32 0
  %906 = load i32, i32* %905, align 4
  %907 = zext i32 %906 to i33
  %908 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %907, i33 1) #7
  %909 = extractvalue { i33, i1 } %908, 1
  %910 = extractvalue { i33, i1 } %908, 0
  %911 = icmp slt i33 %910, 0
  %912 = or i1 %909, %911
  br i1 %912, label %913, label %914, !prof !2

913:                                              ; preds = %904
  call void @llvm.trap() #7
  unreachable

914:                                              ; preds = %904
  %915 = trunc i33 %910 to i32
  store i32 %915, i32* %905, align 4
  br label %916

916:                                              ; preds = %899, %914
  %917 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 9
  br label %924

918:                                              ; preds = %891
  %919 = bitcast %"class.v8::Value"* %892 to %"class.v8::String"*
  %920 = load i32, i32* %886, align 8
  %921 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %919, i32 %920) #7
  %922 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 9
  %923 = icmp eq %"class.WTF::StringImpl"* %921, null
  br i1 %923, label %943, label %924

924:                                              ; preds = %916, %918
  %925 = phi %"class.WTF::String"* [ %917, %916 ], [ %922, %918 ]
  %926 = phi %"class.WTF::StringImpl"* [ %895, %916 ], [ %921, %918 ]
  %927 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %926, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %928 = load atomic i32, i32* %927 monotonic, align 4
  %929 = and i32 %928, 2
  %930 = icmp eq i32 %929, 0
  br i1 %930, label %931, label %943

931:                                              ; preds = %924
  %932 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %926, i64 0, i32 0
  %933 = load i32, i32* %932, align 4
  %934 = zext i32 %933 to i33
  %935 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %934, i33 1) #7
  %936 = extractvalue { i33, i1 } %935, 1
  %937 = extractvalue { i33, i1 } %935, 0
  %938 = icmp slt i33 %937, 0
  %939 = or i1 %936, %938
  br i1 %939, label %940, label %941, !prof !2

940:                                              ; preds = %931
  call void @llvm.trap() #7
  unreachable

941:                                              ; preds = %931
  %942 = trunc i33 %937 to i32
  store i32 %942, i32* %932, align 4
  br label %943

943:                                              ; preds = %897, %941, %924, %918
  %944 = phi i1 [ false, %941 ], [ false, %924 ], [ true, %918 ], [ true, %897 ]
  %945 = phi %"class.WTF::String"* [ %925, %941 ], [ %925, %924 ], [ %922, %918 ], [ %898, %897 ]
  %946 = phi %"class.WTF::StringImpl"* [ %926, %941 ], [ %926, %924 ], [ null, %918 ], [ null, %897 ]
  %947 = ptrtoint %"class.WTF::StringImpl"* %946 to i64
  %948 = bitcast %"class.WTF::String"* %945 to i64*
  %949 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %945, i64 0, i32 0, i32 0
  %950 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %949, align 8
  store i64 %947, i64* %948, align 8
  %951 = icmp eq %"class.WTF::StringImpl"* %950, null
  br i1 %951, label %965, label %952

952:                                              ; preds = %943
  %953 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %950, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %954 = load atomic i32, i32* %953 monotonic, align 4
  %955 = and i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %950, i64 0, i32 0
  %958 = load i32, i32* %957, align 4
  br i1 %956, label %959, label %961

959:                                              ; preds = %952
  %960 = add i32 %958, -1
  store i32 %960, i32* %957, align 4
  br label %961

961:                                              ; preds = %959, %952
  %962 = phi i32 [ %960, %959 ], [ %958, %952 ]
  %963 = icmp eq i32 %962, 0
  br i1 %963, label %964, label %965

964:                                              ; preds = %961
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %950) #7
  br label %965

965:                                              ; preds = %943, %961, %964
  br i1 %944, label %979, label %966

966:                                              ; preds = %965
  %967 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %946, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %968 = load atomic i32, i32* %967 monotonic, align 4
  %969 = and i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %946, i64 0, i32 0
  %972 = load i32, i32* %971, align 4
  br i1 %970, label %973, label %975

973:                                              ; preds = %966
  %974 = add i32 %972, -1
  store i32 %974, i32* %971, align 4
  br label %975

975:                                              ; preds = %973, %966
  %976 = phi i32 [ %974, %973 ], [ %972, %966 ]
  %977 = icmp eq i32 %976, 0
  br i1 %977, label %978, label %979

978:                                              ; preds = %975
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %946) #7
  br label %979

979:                                              ; preds = %965, %975, %978
  %980 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %981 = load i8*, i8** %980, align 8
  store i8* null, i8** %980, align 8
  %982 = icmp eq i8* %981, null
  br i1 %982, label %984, label %983

983:                                              ; preds = %979
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %981) #7
  br label %984

984:                                              ; preds = %983, %979
  %985 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %986 = icmp eq %"class.WTF::StringImpl"* %985, null
  br i1 %986, label %1000, label %987

987:                                              ; preds = %984
  %988 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %985, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %989 = load atomic i32, i32* %988 monotonic, align 4
  %990 = and i32 %989, 2
  %991 = icmp eq i32 %990, 0
  %992 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %985, i64 0, i32 0
  %993 = load i32, i32* %992, align 4
  br i1 %991, label %994, label %996

994:                                              ; preds = %987
  %995 = add i32 %993, -1
  store i32 %995, i32* %992, align 4
  br label %996

996:                                              ; preds = %994, %987
  %997 = phi i32 [ %995, %994 ], [ %993, %987 ]
  %998 = icmp eq i32 %997, 0
  br i1 %998, label %999, label %1000

999:                                              ; preds = %996
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %985) #7
  br label %1000

1000:                                             ; preds = %984, %996, %999
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %884) #7
  br label %1023

1001:                                             ; preds = %883
  %1002 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1003 = load i8*, i8** %1002, align 8
  store i8* null, i8** %1002, align 8
  %1004 = icmp eq i8* %1003, null
  br i1 %1004, label %1006, label %1005

1005:                                             ; preds = %1001
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1003) #7
  br label %1006

1006:                                             ; preds = %1005, %1001
  %1007 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %1008 = icmp eq %"class.WTF::StringImpl"* %1007, null
  br i1 %1008, label %1022, label %1009

1009:                                             ; preds = %1006
  %1010 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1007, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1011 = load atomic i32, i32* %1010 monotonic, align 4
  %1012 = and i32 %1011, 2
  %1013 = icmp eq i32 %1012, 0
  %1014 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1007, i64 0, i32 0
  %1015 = load i32, i32* %1014, align 4
  br i1 %1013, label %1016, label %1018

1016:                                             ; preds = %1009
  %1017 = add i32 %1015, -1
  store i32 %1017, i32* %1014, align 4
  br label %1018

1018:                                             ; preds = %1016, %1009
  %1019 = phi i32 [ %1017, %1016 ], [ %1015, %1009 ]
  %1020 = icmp eq i32 %1019, 0
  br i1 %1020, label %1021, label %1022

1021:                                             ; preds = %1018
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1007) #7
  br label %1022

1022:                                             ; preds = %1006, %1018, %1021
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %884) #7
  br label %1197

1023:                                             ; preds = %1000, %877
  %1024 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %44, i64 7, i32 0
  %1025 = bitcast %"class.v8::Name"** %1024 to %"class.v8::Value"**
  %1026 = load %"class.v8::Value"*, %"class.v8::Value"** %1025, align 8
  %1027 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %38, %"class.v8::Context"* %46, %"class.v8::Value"* %1026) #7
  %1028 = icmp eq %"class.v8::Value"* %1027, null
  br i1 %1028, label %1029, label %1035

1029:                                             ; preds = %1023
  %1030 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1031 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1032 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1031, align 8
  %1033 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1032, i64 5
  %1034 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1033, align 8
  call void %1034(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1030) #7
  br label %1197

1035:                                             ; preds = %1023
  %1036 = bitcast %"class.v8::Value"* %1027 to i64*
  %1037 = load i64, i64* %1036, align 8
  %1038 = and i64 %1037, 3
  %1039 = icmp eq i64 %1038, 1
  br i1 %1039, label %1040, label %1057

1040:                                             ; preds = %1035
  %1041 = add i64 %1037, -1
  %1042 = inttoptr i64 %1041 to i32*
  %1043 = load i32, i32* %1042, align 4
  %1044 = and i64 %1037, -4294967296
  %1045 = zext i32 %1043 to i64
  %1046 = or i64 %1044, %1045
  %1047 = add i64 %1046, 7
  %1048 = inttoptr i64 %1047 to i16*
  %1049 = load i16, i16* %1048, align 2
  %1050 = icmp eq i16 %1049, 67
  br i1 %1050, label %1051, label %1057

1051:                                             ; preds = %1040
  %1052 = add i64 %1037, 23
  %1053 = inttoptr i64 %1052 to i32*
  %1054 = load i32, i32* %1053, align 4
  %1055 = and i32 %1054, -2
  %1056 = icmp eq i32 %1055, 10
  br i1 %1056, label %1197, label %1057

1057:                                             ; preds = %1040, %1035, %1051
  %1058 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1058) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1058, i8 -86, i64 152, i1 false)
  %1059 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1027, %"class.v8::Value"** %1059, align 8
  %1060 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %1060, align 8
  %1061 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1061, align 8
  %1062 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %1063 = bitcast %"class.std::__1::unique_ptr"* %1062 to i64*
  store i64 0, i64* %1063, align 8
  %1064 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1064, label %1065, label %1175

1065:                                             ; preds = %1057
  %1066 = load %"class.v8::Value"*, %"class.v8::Value"** %1059, align 8
  %1067 = icmp eq %"class.v8::Value"* %1066, null
  br i1 %1067, label %1068, label %1092, !prof !2

1068:                                             ; preds = %1065
  %1069 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1061, align 8
  %1070 = icmp eq %"class.WTF::StringImpl"* %1069, null
  br i1 %1070, label %1071, label %1073

1071:                                             ; preds = %1068
  %1072 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 10
  br label %1117

1073:                                             ; preds = %1068
  %1074 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1069, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1075 = load atomic i32, i32* %1074 monotonic, align 4
  %1076 = and i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  br i1 %1077, label %1078, label %1090

1078:                                             ; preds = %1073
  %1079 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1069, i64 0, i32 0
  %1080 = load i32, i32* %1079, align 4
  %1081 = zext i32 %1080 to i33
  %1082 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1081, i33 1) #7
  %1083 = extractvalue { i33, i1 } %1082, 1
  %1084 = extractvalue { i33, i1 } %1082, 0
  %1085 = icmp slt i33 %1084, 0
  %1086 = or i1 %1083, %1085
  br i1 %1086, label %1087, label %1088, !prof !2

1087:                                             ; preds = %1078
  call void @llvm.trap() #7
  unreachable

1088:                                             ; preds = %1078
  %1089 = trunc i33 %1084 to i32
  store i32 %1089, i32* %1079, align 4
  br label %1090

1090:                                             ; preds = %1073, %1088
  %1091 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 10
  br label %1098

1092:                                             ; preds = %1065
  %1093 = bitcast %"class.v8::Value"* %1066 to %"class.v8::String"*
  %1094 = load i32, i32* %1060, align 8
  %1095 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1093, i32 %1094) #7
  %1096 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %2, i64 0, i32 10
  %1097 = icmp eq %"class.WTF::StringImpl"* %1095, null
  br i1 %1097, label %1117, label %1098

1098:                                             ; preds = %1090, %1092
  %1099 = phi %"class.WTF::String"* [ %1091, %1090 ], [ %1096, %1092 ]
  %1100 = phi %"class.WTF::StringImpl"* [ %1069, %1090 ], [ %1095, %1092 ]
  %1101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1102 = load atomic i32, i32* %1101 monotonic, align 4
  %1103 = and i32 %1102, 2
  %1104 = icmp eq i32 %1103, 0
  br i1 %1104, label %1105, label %1117

1105:                                             ; preds = %1098
  %1106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1100, i64 0, i32 0
  %1107 = load i32, i32* %1106, align 4
  %1108 = zext i32 %1107 to i33
  %1109 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1108, i33 1) #7
  %1110 = extractvalue { i33, i1 } %1109, 1
  %1111 = extractvalue { i33, i1 } %1109, 0
  %1112 = icmp slt i33 %1111, 0
  %1113 = or i1 %1110, %1112
  br i1 %1113, label %1114, label %1115, !prof !2

1114:                                             ; preds = %1105
  call void @llvm.trap() #7
  unreachable

1115:                                             ; preds = %1105
  %1116 = trunc i33 %1111 to i32
  store i32 %1116, i32* %1106, align 4
  br label %1117

1117:                                             ; preds = %1071, %1115, %1098, %1092
  %1118 = phi i1 [ false, %1115 ], [ false, %1098 ], [ true, %1092 ], [ true, %1071 ]
  %1119 = phi %"class.WTF::String"* [ %1099, %1115 ], [ %1099, %1098 ], [ %1096, %1092 ], [ %1072, %1071 ]
  %1120 = phi %"class.WTF::StringImpl"* [ %1100, %1115 ], [ %1100, %1098 ], [ null, %1092 ], [ null, %1071 ]
  %1121 = ptrtoint %"class.WTF::StringImpl"* %1120 to i64
  %1122 = bitcast %"class.WTF::String"* %1119 to i64*
  %1123 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1119, i64 0, i32 0, i32 0
  %1124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1123, align 8
  store i64 %1121, i64* %1122, align 8
  %1125 = icmp eq %"class.WTF::StringImpl"* %1124, null
  br i1 %1125, label %1139, label %1126

1126:                                             ; preds = %1117
  %1127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1128 = load atomic i32, i32* %1127 monotonic, align 4
  %1129 = and i32 %1128, 2
  %1130 = icmp eq i32 %1129, 0
  %1131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1124, i64 0, i32 0
  %1132 = load i32, i32* %1131, align 4
  br i1 %1130, label %1133, label %1135

1133:                                             ; preds = %1126
  %1134 = add i32 %1132, -1
  store i32 %1134, i32* %1131, align 4
  br label %1135

1135:                                             ; preds = %1133, %1126
  %1136 = phi i32 [ %1134, %1133 ], [ %1132, %1126 ]
  %1137 = icmp eq i32 %1136, 0
  br i1 %1137, label %1138, label %1139

1138:                                             ; preds = %1135
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1124) #7
  br label %1139

1139:                                             ; preds = %1117, %1135, %1138
  br i1 %1118, label %1153, label %1140

1140:                                             ; preds = %1139
  %1141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1142 = load atomic i32, i32* %1141 monotonic, align 4
  %1143 = and i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1120, i64 0, i32 0
  %1146 = load i32, i32* %1145, align 4
  br i1 %1144, label %1147, label %1149

1147:                                             ; preds = %1140
  %1148 = add i32 %1146, -1
  store i32 %1148, i32* %1145, align 4
  br label %1149

1149:                                             ; preds = %1147, %1140
  %1150 = phi i32 [ %1148, %1147 ], [ %1146, %1140 ]
  %1151 = icmp eq i32 %1150, 0
  br i1 %1151, label %1152, label %1153

1152:                                             ; preds = %1149
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1120) #7
  br label %1153

1153:                                             ; preds = %1139, %1149, %1152
  %1154 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1155 = load i8*, i8** %1154, align 8
  store i8* null, i8** %1154, align 8
  %1156 = icmp eq i8* %1155, null
  br i1 %1156, label %1158, label %1157

1157:                                             ; preds = %1153
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1155) #7
  br label %1158

1158:                                             ; preds = %1157, %1153
  %1159 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1061, align 8
  %1160 = icmp eq %"class.WTF::StringImpl"* %1159, null
  br i1 %1160, label %1174, label %1161

1161:                                             ; preds = %1158
  %1162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1159, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1163 = load atomic i32, i32* %1162 monotonic, align 4
  %1164 = and i32 %1163, 2
  %1165 = icmp eq i32 %1164, 0
  %1166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1159, i64 0, i32 0
  %1167 = load i32, i32* %1166, align 4
  br i1 %1165, label %1168, label %1170

1168:                                             ; preds = %1161
  %1169 = add i32 %1167, -1
  store i32 %1169, i32* %1166, align 4
  br label %1170

1170:                                             ; preds = %1168, %1161
  %1171 = phi i32 [ %1169, %1168 ], [ %1167, %1161 ]
  %1172 = icmp eq i32 %1171, 0
  br i1 %1172, label %1173, label %1174

1173:                                             ; preds = %1170
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1159) #7
  br label %1174

1174:                                             ; preds = %1158, %1170, %1173
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1058) #7
  br label %1197

1175:                                             ; preds = %1057
  %1176 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1177 = load i8*, i8** %1176, align 8
  store i8* null, i8** %1176, align 8
  %1178 = icmp eq i8* %1177, null
  br i1 %1178, label %1180, label %1179

1179:                                             ; preds = %1175
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1177) #7
  br label %1180

1180:                                             ; preds = %1179, %1175
  %1181 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1061, align 8
  %1182 = icmp eq %"class.WTF::StringImpl"* %1181, null
  br i1 %1182, label %1196, label %1183

1183:                                             ; preds = %1180
  %1184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1181, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1185 = load atomic i32, i32* %1184 monotonic, align 4
  %1186 = and i32 %1185, 2
  %1187 = icmp eq i32 %1186, 0
  %1188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1181, i64 0, i32 0
  %1189 = load i32, i32* %1188, align 4
  br i1 %1187, label %1190, label %1192

1190:                                             ; preds = %1183
  %1191 = add i32 %1189, -1
  store i32 %1191, i32* %1188, align 4
  br label %1192

1192:                                             ; preds = %1190, %1183
  %1193 = phi i32 [ %1191, %1190 ], [ %1189, %1183 ]
  %1194 = icmp eq i32 %1193, 0
  br i1 %1194, label %1195, label %1196

1195:                                             ; preds = %1192
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1181) #7
  br label %1196

1196:                                             ; preds = %1180, %1192, %1195
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1058) #7
  br label %1197

1197:                                             ; preds = %319, %265, %225, %333, %500, %681, %848, %1029, %1196, %1174, %1051, %1022, %855, %674, %507, %279, %218, %51
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %45) #7
  br label %1198

1198:                                             ; preds = %29, %29, %4, %1197, %36
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink25TextFormatUpdateEventInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::TextFormatUpdateEventInit"* nocapture readonly, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink29toV8TextFormatUpdateEventInitEPKNS_25TextFormatUpdateEventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::TextFormatUpdateEventInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink29toV8TextFormatUpdateEventInitEPKNS_25TextFormatUpdateEventInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::TextFormatUpdateEventInit"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %12 to %"class.blink::V8PerIsolateData"**
  %14 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %13, align 8
  %15 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %14, i8* bitcast ([8 x i8*]* @_ZZN5blinkL38eternalV8TextFormatUpdateEventInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %16 = extractvalue { i64, %"class.v8::Eternal"* } %15, 1
  %17 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %18 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 3, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %39, label %21

21:                                               ; preds = %4
  %22 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #7
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %23, align 8
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %28 = bitcast i8** %27 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %26, %"class.WTF::StringImpl"** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %25, i32* %29, align 8
  %30 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #7
  %31 = bitcast %"class.v8::String"* %30 to %"class.v8::Value"*
  %32 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 0, i32 0
  %33 = load %"class.v8::Name"*, %"class.v8::Name"** %32, align 8
  %34 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %33, %"class.v8::Value"* %31) #7
  %35 = trunc i16 %34 to i8
  %36 = icmp ne i8 %35, 0
  %37 = icmp ugt i16 %34, 255
  %38 = and i1 %37, %36
  br i1 %38, label %39, label %182

39:                                               ; preds = %4, %21
  %40 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 1
  %41 = load i8, i8* %40, align 8, !range !4
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %55, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 4
  %45 = load i32, i32* %44, align 8
  %46 = call %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"* %3, i32 %45) #7
  %47 = bitcast %"class.v8::Integer"* %46 to %"class.v8::Value"*
  %48 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 1, i32 0
  %49 = load %"class.v8::Name"*, %"class.v8::Name"** %48, align 8
  %50 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %49, %"class.v8::Value"* %47) #7
  %51 = trunc i16 %50 to i8
  %52 = icmp ne i8 %51, 0
  %53 = icmp ugt i16 %50, 255
  %54 = and i1 %53, %52
  br i1 %54, label %55, label %182

55:                                               ; preds = %39, %43
  %56 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 2
  %57 = load i8, i8* %56, align 1, !range !4
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 5
  %61 = load i32, i32* %60, align 4
  %62 = call %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"* %3, i32 %61) #7
  %63 = bitcast %"class.v8::Integer"* %62 to %"class.v8::Value"*
  %64 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 2, i32 0
  %65 = load %"class.v8::Name"*, %"class.v8::Name"** %64, align 8
  %66 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %65, %"class.v8::Value"* %63) #7
  %67 = trunc i16 %66 to i8
  %68 = icmp ne i8 %67, 0
  %69 = icmp ugt i16 %66, 255
  %70 = and i1 %69, %68
  br i1 %70, label %71, label %182

71:                                               ; preds = %55, %59
  %72 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 6, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %93, label %75

75:                                               ; preds = %71
  %76 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #7
  %77 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %73, %"class.WTF::StringImpl"** %77, align 8
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  %81 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %82 = bitcast i8** %81 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %80, %"class.WTF::StringImpl"** %82, align 8
  %83 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %79, i32* %83, align 8
  %84 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #7
  %85 = bitcast %"class.v8::String"* %84 to %"class.v8::Value"*
  %86 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 3, i32 0
  %87 = load %"class.v8::Name"*, %"class.v8::Name"** %86, align 8
  %88 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %87, %"class.v8::Value"* %85) #7
  %89 = trunc i16 %88 to i8
  %90 = icmp ne i8 %89, 0
  %91 = icmp ugt i16 %88, 255
  %92 = and i1 %91, %90
  br i1 %92, label %93, label %182

93:                                               ; preds = %71, %75
  %94 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 7, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %115, label %97

97:                                               ; preds = %93
  %98 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98) #7
  %99 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %95, %"class.WTF::StringImpl"** %99, align 8
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 1
  %103 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %104 = bitcast i8** %103 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %102, %"class.WTF::StringImpl"** %104, align 8
  %105 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %101, i32* %105, align 8
  %106 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %98) #7
  %107 = bitcast %"class.v8::String"* %106 to %"class.v8::Value"*
  %108 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 4, i32 0
  %109 = load %"class.v8::Name"*, %"class.v8::Name"** %108, align 8
  %110 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %109, %"class.v8::Value"* %107) #7
  %111 = trunc i16 %110 to i8
  %112 = icmp ne i8 %111, 0
  %113 = icmp ugt i16 %110, 255
  %114 = and i1 %113, %112
  br i1 %114, label %115, label %182

115:                                              ; preds = %93, %97
  %116 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 8, i32 0, i32 0
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %118 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %118, label %137, label %119

119:                                              ; preds = %115
  %120 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %120) #7
  %121 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %117, %"class.WTF::StringImpl"** %121, align 8
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 1
  %123 = load i32, i32* %122, align 4
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 1
  %125 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %126 = bitcast i8** %125 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %124, %"class.WTF::StringImpl"** %126, align 8
  %127 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %123, i32* %127, align 8
  %128 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %120) #7
  %129 = bitcast %"class.v8::String"* %128 to %"class.v8::Value"*
  %130 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 5, i32 0
  %131 = load %"class.v8::Name"*, %"class.v8::Name"** %130, align 8
  %132 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %131, %"class.v8::Value"* %129) #7
  %133 = trunc i16 %132 to i8
  %134 = icmp ne i8 %133, 0
  %135 = icmp ugt i16 %132, 255
  %136 = and i1 %135, %134
  br i1 %136, label %137, label %182

137:                                              ; preds = %115, %119
  %138 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 9, i32 0, i32 0
  %139 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  %140 = icmp eq %"class.WTF::StringImpl"* %139, null
  br i1 %140, label %159, label %141

141:                                              ; preds = %137
  %142 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142) #7
  %143 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %139, %"class.WTF::StringImpl"** %143, align 8
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 0, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %139, i64 1
  %147 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %148 = bitcast i8** %147 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %146, %"class.WTF::StringImpl"** %148, align 8
  %149 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %145, i32* %149, align 8
  %150 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142) #7
  %151 = bitcast %"class.v8::String"* %150 to %"class.v8::Value"*
  %152 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 6, i32 0
  %153 = load %"class.v8::Name"*, %"class.v8::Name"** %152, align 8
  %154 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %153, %"class.v8::Value"* %151) #7
  %155 = trunc i16 %154 to i8
  %156 = icmp ne i8 %155, 0
  %157 = icmp ugt i16 %154, 255
  %158 = and i1 %157, %156
  br i1 %158, label %159, label %182

159:                                              ; preds = %137, %141
  %160 = getelementptr inbounds %"class.blink::TextFormatUpdateEventInit", %"class.blink::TextFormatUpdateEventInit"* %0, i64 0, i32 10, i32 0, i32 0
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %160, align 8
  %162 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %162, label %181, label %163

163:                                              ; preds = %159
  %164 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %164) #7
  %165 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %165, align 8
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 1
  %169 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %170 = bitcast i8** %169 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %168, %"class.WTF::StringImpl"** %170, align 8
  %171 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %167, i32* %171, align 8
  %172 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %164) #7
  %173 = bitcast %"class.v8::String"* %172 to %"class.v8::Value"*
  %174 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %16, i64 7, i32 0
  %175 = load %"class.v8::Name"*, %"class.v8::Name"** %174, align 8
  %176 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %17, %"class.v8::Name"* %175, %"class.v8::Value"* %173) #7
  %177 = trunc i16 %176 to i8
  %178 = icmp ne i8 %177, 0
  %179 = icmp ugt i16 %176, 255
  %180 = and i1 %179, %178
  br i1 %180, label %181, label %182

181:                                              ; preds = %159, %163
  br label %182

182:                                              ; preds = %43, %75, %119, %181, %163, %141, %97, %59, %21
  %183 = phi i1 [ false, %21 ], [ false, %43 ], [ false, %59 ], [ false, %75 ], [ false, %97 ], [ false, %119 ], [ false, %141 ], [ true, %181 ], [ false, %163 ]
  ret i1 %183
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

declare %"class.v8::Integer"* @_ZN2v87Integer15NewFromUnsignedEPNS_7IsolateEj(%"class.v8::Isolate"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::TextFormatUpdateEventInit"* @_ZN5blink17NativeValueTraitsINS_25TextFormatUpdateEventInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 72) #7
  %5 = bitcast i8* %4 to %"class.blink::TextFormatUpdateEventInit"*
  tail call void @_ZN5blink25TextFormatUpdateEventInitC1Ev(%"class.blink::TextFormatUpdateEventInit"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink27V8TextFormatUpdateEventInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_25TextFormatUpdateEventInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::TextFormatUpdateEventInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::TextFormatUpdateEventInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.313"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink25TextFormatUpdateEventInitC1Ev(%"class.blink::TextFormatUpdateEventInit"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !3

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !3

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsUint32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare i32 @_ZNK2v86Uint325ValueEv(%"class.v8::Uint32"*) local_unnamed_addr #1

declare i32 @_ZN5blink12ToUInt32SlowEPN2v87IsolateENS0_5LocalINS0_5ValueEEENS_30IntegerConversionConfigurationERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, i32, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
