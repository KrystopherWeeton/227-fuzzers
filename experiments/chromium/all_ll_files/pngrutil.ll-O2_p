; ModuleID = '../../third_party/libpng/pngrutil.c'
source_filename = "../../third_party/libpng/pngrutil.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.png_struct_def = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)*, i8*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, void (%struct.png_struct_def*)*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i32, i32, i8*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.png_row_info_struct = type { i32, i64, i8, i8, i8, i8 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.png_compression_buffer = type { %struct.png_compression_buffer*, [1 x i8] }
%struct.png_color_struct = type { i8, i8, i8 }
%struct.png_color_8_struct = type { i8, i8, i8, i8, i8 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.png_info_def = type { i32, i32, i32, i64, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], %struct.png_colorspace, i8*, i8*, i32, i32, i32, %struct.png_text_struct*, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, %struct.png_color_16_struct, i32, %struct.png_unknown_chunk_t*, i32, i8** }
%struct.png_text_struct = type { i32, i8*, i8*, i64, i64, i8*, i8* }
%struct.png_unknown_chunk_t = type { [5 x i8], i8*, i64, i8 }
%struct.png_colorspace = type { i32, %struct.png_xy, %struct.png_XYZ, i16, i16 }
%struct.png_xy = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_XYZ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [34 x i8] c"PNG unsigned integer out of range\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Not a PNG file\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"PNG file corrupted by ASCII conversion\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"CRC error\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"invalid window size (libpng)\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"out of place\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"missing IHDR\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"duplicate\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"ignored in grayscale PNG\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"tRNS must be after\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"invalid values\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"too many profiles\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"too short\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"extra compressed data\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"bad compression method\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"bad keyword\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"invalid with alpha channel\00", align 1
@.str.19 = private unnamed_addr constant [24 x i8] c"no space in chunk cache\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"Insufficient memory to process text chunk\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"unknown compression type\00", align 1
@.str.23 = private unnamed_addr constant [32 x i8] c"Read failure in png_handle_zTXt\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"insufficient memory\00", align 1
@.str.25 = private unnamed_addr constant [20 x i8] c"error in user chunk\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"Saving unknown chunk:\00", align 1
@.str.27 = private unnamed_addr constant [76 x i8] c"forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"unhandled critical chunk\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"invalid chunk type\00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c"chunk data is too large\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"internal row logic error\00", align 1
@.str.32 = private unnamed_addr constant [36 x i8] c"internal row size calculation error\00", align 1
@.str.33 = private unnamed_addr constant [25 x i8] c"internal row width error\00", align 1
@cr_png_combine_row.row_mask = internal unnamed_addr constant [2 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 16843009, i32 269488144, i32 286331153, i32 1145324612, i32 1431655765, i32 -1431655766], [6 x i32] [i32 196611, i32 50332416, i32 50529027, i32 808464432, i32 858993459, i32 -858993460], [6 x i32] [i32 15, i32 983040, i32 983055, i32 251662080, i32 252645135, i32 -252645136]], [3 x [6 x i32]] [[6 x i32] [i32 -2139062144, i32 134744072, i32 -2004318072, i32 572662306, i32 -1431655766, i32 1431655765], [6 x i32] [i32 12583104, i32 -1073692672, i32 -1061109568, i32 202116108, i32 -858993460, i32 858993459], [6 x i32] [i32 240, i32 15728640, i32 15728880, i32 -268374016, i32 -252645136, i32 252645135]]], align 16
@cr_png_combine_row.display_mask = internal unnamed_addr constant [2 x [3 x [3 x i32]]] [[3 x [3 x i32]] [[3 x i32] [i32 -252645136, i32 -858993460, i32 -1431655766], [3 x i32] [i32 -16711936, i32 -252645136, i32 -858993460], [3 x i32] [i32 -65536, i32 -16711936, i32 -252645136]], [3 x [3 x i32]] [[3 x i32] [i32 252645135, i32 858993459, i32 1431655765], [3 x i32] [i32 -16711936, i32 252645135, i32 858993459], [3 x i32] [i32 -65536, i32 -16711936, i32 252645135]]], align 16
@.str.34 = private unnamed_addr constant [35 x i8] c"invalid user transform pixel depth\00", align 1
@cr_png_do_read_interlace.png_pass_inc = internal unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@.str.35 = private unnamed_addr constant [22 x i8] c"Not enough image data\00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c"Extra compressed data\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"Too much image data\00", align 1
@cr_png_read_finish_row.png_pass_ystart = internal unnamed_addr constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@cr_png_read_finish_row.png_pass_yinc = internal unnamed_addr constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@cr_png_read_start_row.png_pass_start = internal unnamed_addr constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@cr_png_read_start_row.png_pass_inc = internal unnamed_addr constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@.str.38 = private unnamed_addr constant [45 x i8] c"Row has too many bytes to allocate in memory\00", align 1
@.str.40 = private unnamed_addr constant [15 x i8] c" using zstream\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.42 = private unnamed_addr constant [18 x i8] c"zstream unclaimed\00", align 1
@.str.43 = private unnamed_addr constant [34 x i8] c"insufficient memory to read chunk\00", align 1
@.str.44 = private unnamed_addr constant [36 x i8] c"unknown chunk exceeds memory limits\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_get_uint_31(%struct.png_struct_def* noalias, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = shl nuw i32 %4, 24
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 16
  %10 = or i32 %9, %5
  %11 = getelementptr inbounds i8, i8* %1, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 8
  %15 = or i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %15, %18
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %2
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

22:                                               ; preds = %2
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cr_png_get_uint_32(i8* nocapture readonly) local_unnamed_addr #2 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl nuw i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 16
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  ret i32 %18
}

; Function Attrs: noreturn
declare void @cr_png_error(%struct.png_struct_def*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cr_png_get_int_32(i8* nocapture readonly) local_unnamed_addr #2 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i32
  %4 = shl nuw i32 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = shl nuw nsw i32 %7, 16
  %9 = or i32 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = or i32 %14, %17
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %24, label %20

20:                                               ; preds = %1
  %21 = sub i32 0, %18
  %22 = icmp sgt i32 %21, -1
  %23 = select i1 %22, i32 %18, i32 0
  br label %24

24:                                               ; preds = %20, %1
  %25 = phi i32 [ %18, %1 ], [ %23, %20 ]
  ret i32 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @cr_png_get_uint_16(i8* nocapture readonly) local_unnamed_addr #2 {
  %2 = load i8, i8* %0, align 1
  %3 = zext i8 %2 to i16
  %4 = shl nuw i16 %3, 8
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i16
  %8 = or i16 %4, %7
  ret i16 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_sig(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  %4 = load i8, i8* %3, align 1
  %5 = icmp ugt i8 %4, 7
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = zext i8 %4 to i64
  %8 = sub nuw nsw i64 8, %7
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 15, i64 %7
  tail call void @cr_png_read_data(%struct.png_struct_def* %0, i8* %9, i64 %8) #8
  store i8 8, i8* %3, align 1
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 15, i64 0
  %11 = tail call i32 @cr_png_sig_cmp(i8* %10, i64 %7, i64 %8) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %21, label %13

13:                                               ; preds = %6
  %14 = icmp ult i8 %4, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %13
  %16 = sub nsw i64 4, %7
  %17 = tail call i32 @cr_png_sig_cmp(i8* %10, i64 %7, i64 %16) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #7
  unreachable

20:                                               ; preds = %15, %13
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

21:                                               ; preds = %6
  %22 = icmp ult i8 %4, 3
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %25 = load i32, i32* %24, align 4
  %26 = or i32 %25, 4096
  store i32 %26, i32* %24, align 4
  br label %27

27:                                               ; preds = %21, %23, %2
  ret void
}

declare void @cr_png_read_data(%struct.png_struct_def*, i8*, i64) local_unnamed_addr #4

declare i32 @cr_png_sig_cmp(i8*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_read_chunk_header(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to [8 x i8]*
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  store i64 -6148914691236517206, i64* %2, align 8
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %4, i64 8) #8
  %9 = load i8, i8* %4, align 8, !noalias !2
  %10 = zext i8 %9 to i32
  %11 = shl nuw i32 %10, 24
  %12 = load i8, i8* %5, align 1, !noalias !2
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 16
  %15 = or i32 %14, %11
  %16 = load i8, i8* %6, align 2, !noalias !2
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %15, %18
  %20 = load i8, i8* %7, align 1, !noalias !2
  %21 = zext i8 %20 to i32
  %22 = or i32 %19, %21
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %1
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

25:                                               ; preds = %1
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %29 = load i8, i8* %8, align 4
  %30 = zext i8 %29 to i32
  %31 = shl nuw i32 %30, 24
  %32 = load i8, i8* %28, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 16
  %35 = or i32 %34, %31
  %36 = load i8, i8* %27, align 2
  %37 = zext i8 %36 to i32
  %38 = shl nuw nsw i32 %37, 8
  %39 = or i32 %35, %38
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = or i32 %39, %41
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 %42, i32* %43, align 8
  call void @cr_png_reset_crc(%struct.png_struct_def* %0) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* %0, i8* %8, i64 4) #8
  %44 = load i32, i32* %43, align 8
  %45 = and i32 %44, 255
  %46 = add nsw i32 %45, -65
  %47 = icmp ugt i32 %46, 57
  %48 = add nsw i32 %45, -91
  %49 = icmp ult i32 %48, 6
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %68, %60, %52, %25
  call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0)) #7
  unreachable

52:                                               ; preds = %25
  %53 = lshr i32 %44, 8
  %54 = and i32 %53, 255
  %55 = add nsw i32 %54, -65
  %56 = icmp ugt i32 %55, 57
  %57 = add nsw i32 %54, -91
  %58 = icmp ult i32 %57, 6
  %59 = or i1 %56, %58
  br i1 %59, label %51, label %60

60:                                               ; preds = %52
  %61 = lshr i32 %44, 16
  %62 = and i32 %61, 255
  %63 = add nsw i32 %62, -65
  %64 = icmp ugt i32 %63, 57
  %65 = add nsw i32 %62, -91
  %66 = icmp ult i32 %65, 6
  %67 = or i1 %64, %66
  br i1 %67, label %51, label %68

68:                                               ; preds = %60
  %69 = lshr i32 %44, 24
  %70 = add nsw i32 %69, -65
  %71 = icmp ugt i32 %70, 57
  %72 = add nsw i32 %69, -91
  %73 = icmp ult i32 %72, 6
  %74 = or i1 %71, %73
  br i1 %74, label %51, label %75

75:                                               ; preds = %68
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 126
  %77 = load i64, i64* %76, align 8, !alias.scope !5
  %78 = add i64 %77, -1
  %79 = icmp ult i64 %78, 2147483646
  %80 = select i1 %79, i64 %77, i64 2147483647
  %81 = icmp eq i32 %44, 1229209940
  br i1 %81, label %82, label %118

82:                                               ; preds = %75
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %84 = load i32, i32* %83, align 8, !alias.scope !5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %87 = load i8, i8* %86, align 1, !alias.scope !5
  %88 = zext i8 %87 to i64
  %89 = mul nuw nsw i64 %88, %85
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %91 = load i8, i8* %90, align 2, !alias.scope !5
  %92 = icmp ugt i8 %91, 8
  %93 = select i1 %92, i64 2, i64 1
  %94 = mul nuw nsw i64 %89, %93
  %95 = add nuw nsw i64 %94, 1
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %97 = load i8, i8* %96, align 2, !alias.scope !5
  %98 = icmp eq i8 %97, 0
  %99 = select i1 %98, i64 0, i64 6
  %100 = add nuw nsw i64 %95, %99
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %102 = load i32, i32* %101, align 4, !alias.scope !5
  %103 = zext i32 %102 to i64
  %104 = udiv i64 4294967295, %100
  %105 = icmp ult i64 %104, %103
  %106 = mul i64 %100, %103
  %107 = select i1 %105, i64 2147483647, i64 %106
  %108 = icmp ult i64 %100, 32566
  %109 = select i1 %108, i64 %100, i64 32566
  %110 = udiv i64 %107, %109
  %111 = mul i64 %110, 5
  %112 = add i64 %111, 11
  %113 = add i64 %112, %107
  %114 = icmp ult i64 %113, 2147483647
  %115 = select i1 %114, i64 %113, i64 2147483647
  %116 = icmp ult i64 %80, %115
  %117 = select i1 %116, i64 %115, i64 %80
  br label %118

118:                                              ; preds = %82, %75
  %119 = phi i64 [ %117, %82 ], [ %80, %75 ]
  %120 = zext i32 %22 to i64
  %121 = icmp ult i64 %119, %120
  br i1 %121, label %122, label %123

122:                                              ; preds = %118
  call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0)) #8
  br label %123

123:                                              ; preds = %118, %122
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret i32 %22
}

declare void @cr_png_reset_crc(%struct.png_struct_def*) local_unnamed_addr #4

declare void @cr_png_calculate_crc(%struct.png_struct_def*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_check_chunk_name(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = and i32 %1, 255
  %4 = add nsw i32 %3, -65
  %5 = icmp ugt i32 %4, 57
  %6 = add nsw i32 %3, -91
  %7 = icmp ult i32 %6, 6
  %8 = or i1 %5, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %26, %18, %10, %2
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0)) #7
  unreachable

10:                                               ; preds = %2
  %11 = lshr i32 %1, 8
  %12 = and i32 %11, 255
  %13 = add nsw i32 %12, -65
  %14 = icmp ugt i32 %13, 57
  %15 = add nsw i32 %12, -91
  %16 = icmp ult i32 %15, 6
  %17 = or i1 %14, %16
  br i1 %17, label %9, label %18

18:                                               ; preds = %10
  %19 = lshr i32 %1, 16
  %20 = and i32 %19, 255
  %21 = add nsw i32 %20, -65
  %22 = icmp ugt i32 %21, 57
  %23 = add nsw i32 %20, -91
  %24 = icmp ult i32 %23, 6
  %25 = or i1 %22, %24
  br i1 %25, label %9, label %26

26:                                               ; preds = %18
  %27 = lshr i32 %1, 24
  %28 = add nsw i32 %27, -65
  %29 = icmp ugt i32 %28, 57
  %30 = add nsw i32 %27, -91
  %31 = icmp ult i32 %30, 6
  %32 = or i1 %29, %31
  br i1 %32, label %9, label %33

33:                                               ; preds = %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_check_chunk_length(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 126
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -1
  %6 = icmp ult i64 %5, 2147483646
  %7 = select i1 %6, i64 %4, i64 2147483647
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1229209940
  br i1 %10, label %11, label %47

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i64
  %18 = mul nuw nsw i64 %17, %14
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %20 = load i8, i8* %19, align 2
  %21 = icmp ugt i8 %20, 8
  %22 = select i1 %21, i64 2, i64 1
  %23 = mul nuw nsw i64 %18, %22
  %24 = add nuw nsw i64 %23, 1
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %26 = load i8, i8* %25, align 2
  %27 = icmp eq i8 %26, 0
  %28 = select i1 %27, i64 0, i64 6
  %29 = add nuw nsw i64 %24, %28
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = udiv i64 4294967295, %29
  %34 = icmp ult i64 %33, %32
  %35 = mul i64 %29, %32
  %36 = select i1 %34, i64 2147483647, i64 %35
  %37 = icmp ult i64 %29, 32566
  %38 = select i1 %37, i64 %29, i64 32566
  %39 = udiv i64 %36, %38
  %40 = mul i64 %39, 5
  %41 = add i64 %40, 11
  %42 = add i64 %41, %36
  %43 = icmp ult i64 %42, 2147483647
  %44 = select i1 %43, i64 %42, i64 2147483647
  %45 = icmp ult i64 %7, %44
  %46 = select i1 %45, i64 %44, i64 %7
  br label %47

47:                                               ; preds = %11, %2
  %48 = phi i64 [ %46, %11 ], [ %7, %2 ]
  %49 = zext i32 %1 to i64
  %50 = icmp ult i64 %48, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  tail call void @cr_png_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0)) #8
  br label %52

52:                                               ; preds = %51, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_crc_read(%struct.png_struct_def* noalias, i8*, i32) local_unnamed_addr #0 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  tail call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* %1, i64 %6) #8
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %1, i64 %6) #8
  br label %7

7:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_crc_finish(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca [1024 x i8], align 16
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %8 = icmp eq %struct.png_struct_def* %0, null
  br label %9

9:                                                ; preds = %6, %16
  %10 = phi i32 [ %1, %6 ], [ %13, %16 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 1024, i1 false)
  %11 = icmp ult i32 %10, 1024
  %12 = select i1 %11, i32 %10, i32 1024
  %13 = sub i32 %10, %12
  br i1 %8, label %16, label %14

14:                                               ; preds = %9
  %15 = zext i32 %12 to i64
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 %15) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 %15) #8
  br label %16

16:                                               ; preds = %9, %14
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %7) #8
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %18, label %9

18:                                               ; preds = %16, %2
  %19 = bitcast i32* %3 to [4 x i8]*
  %20 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #8, !noalias !8
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* %19, i64 0, i64 1
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %19, i64 0, i64 2
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %19, i64 0, i64 3
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 -1431655766, i32* %3, align 4, !noalias !8
  %25 = load i32, i32* %24, align 8, !alias.scope !8
  %26 = and i32 %25, 536870912
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %29 = load i32, i32* %28, align 8, !alias.scope !8
  br i1 %27, label %33, label %30

30:                                               ; preds = %18
  %31 = and i32 %29, 768
  %32 = icmp eq i32 %31, 768
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %20, i64 4) #8
  br i1 %32, label %36, label %37

33:                                               ; preds = %18
  %34 = and i32 %29, 2048
  %35 = icmp eq i32 %34, 0
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %20, i64 4) #8
  br i1 %35, label %37, label %36

36:                                               ; preds = %33, %30
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #8, !noalias !8
  br label %68

37:                                               ; preds = %30, %33
  %38 = load i8, i8* %20, align 4, !noalias !8
  %39 = zext i8 %38 to i32
  %40 = shl nuw i32 %39, 24
  %41 = load i8, i8* %21, align 1, !noalias !8
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 16
  %44 = or i32 %43, %40
  %45 = load i8, i8* %22, align 2, !noalias !8
  %46 = zext i8 %45 to i32
  %47 = shl nuw nsw i32 %46, 8
  %48 = or i32 %44, %47
  %49 = load i8, i8* %23, align 1, !noalias !8
  %50 = zext i8 %49 to i32
  %51 = or i32 %48, %50
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %53 = load i32, i32* %52, align 4, !alias.scope !8
  %54 = icmp eq i32 %51, %53
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #8, !noalias !8
  br i1 %54, label %68, label %55

55:                                               ; preds = %37
  %56 = load i32, i32* %24, align 8
  %57 = and i32 %56, 536870912
  %58 = icmp eq i32 %57, 0
  %59 = load i32, i32* %28, align 8
  br i1 %58, label %63, label %60

60:                                               ; preds = %55
  %61 = and i32 %59, 512
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %67

63:                                               ; preds = %55
  %64 = and i32 %59, 1024
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %63, %60
  call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0)) #8
  br label %68

67:                                               ; preds = %63, %60
  call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

68:                                               ; preds = %36, %37, %66
  %69 = phi i32 [ 1, %66 ], [ 0, %37 ], [ 0, %36 ]
  ret i32 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_crc_error(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to [4 x i8]*
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #8
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 -1431655766, i32* %2, align 4
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 536870912
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %13 = load i32, i32* %12, align 8
  br i1 %11, label %17, label %14

14:                                               ; preds = %1
  %15 = and i32 %13, 768
  %16 = icmp eq i32 %15, 768
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %4, i64 4) #8
  br i1 %16, label %39, label %20

17:                                               ; preds = %1
  %18 = and i32 %13, 2048
  %19 = icmp eq i32 %18, 0
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %4, i64 4) #8
  br i1 %19, label %20, label %39

20:                                               ; preds = %14, %17
  %21 = load i8, i8* %4, align 4
  %22 = zext i8 %21 to i32
  %23 = shl nuw i32 %22, 24
  %24 = load i8, i8* %5, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 16
  %27 = or i32 %26, %23
  %28 = load i8, i8* %6, align 2
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 8
  %31 = or i32 %27, %30
  %32 = load i8, i8* %7, align 1
  %33 = zext i8 %32 to i32
  %34 = or i32 %31, %33
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %36 = load i32, i32* %35, align 4
  %37 = icmp ne i32 %34, %36
  %38 = zext i1 %37 to i32
  br label %39

39:                                               ; preds = %14, %17, %20
  %40 = phi i32 [ %38, %20 ], [ 0, %17 ], [ 0, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #8
  ret i32 %40
}

declare void @cr_png_chunk_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @cr_png_chunk_error(%struct.png_struct_def*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cr_png_zlib_inflate(%struct.png_struct_def* noalias, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8** %16, align 8
  br label %21

17:                                               ; preds = %10
  store i8 0, i8* %3, align 2
  br label %18

18:                                               ; preds = %6, %2, %17
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %20 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %19, i32 %1) #8
  br label %21

21:                                               ; preds = %18, %15
  %22 = phi i32 [ -3, %15 ], [ %20, %18 ]
  ret i32 %22
}

declare i32 @Cr_z_inflate(%struct.z_stream_s*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_IHDR(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca [13 x i8], align 1
  %5 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %5) #8
  %6 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 3
  %9 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 4
  %10 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 5
  %11 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 6
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 7
  %13 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 8
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 9
  %15 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 10
  %16 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 11
  %17 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 12
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 -86, i64 13, i1 false)
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #7
  unreachable

23:                                               ; preds = %3
  %24 = icmp eq i32 %2, 13
  br i1 %24, label %26, label %25

25:                                               ; preds = %23
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #7
  unreachable

26:                                               ; preds = %23
  %27 = or i32 %19, 1
  store i32 %27, i32* %18, align 4
  %28 = icmp eq %struct.png_struct_def* %0, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 13) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 13) #8
  br label %30

30:                                               ; preds = %26, %29
  %31 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %32 = load i8, i8* %5, align 1, !noalias !11
  %33 = zext i8 %32 to i32
  %34 = shl nuw i32 %33, 24
  %35 = load i8, i8* %6, align 1, !noalias !11
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 16
  %38 = or i32 %37, %34
  %39 = load i8, i8* %7, align 1, !noalias !11
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %38, %41
  %43 = load i8, i8* %8, align 1, !noalias !11
  %44 = zext i8 %43 to i32
  %45 = or i32 %42, %44
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %30
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

48:                                               ; preds = %30
  %49 = load i8, i8* %9, align 1, !noalias !14
  %50 = zext i8 %49 to i32
  %51 = shl nuw i32 %50, 24
  %52 = load i8, i8* %10, align 1, !noalias !14
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 16
  %55 = or i32 %54, %51
  %56 = load i8, i8* %11, align 1, !noalias !14
  %57 = zext i8 %56 to i32
  %58 = shl nuw nsw i32 %57, 8
  %59 = or i32 %55, %58
  %60 = load i8, i8* %12, align 1, !noalias !14
  %61 = zext i8 %60 to i32
  %62 = or i32 %59, %61
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %48
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

65:                                               ; preds = %48
  %66 = load i8, i8* %13, align 1
  %67 = zext i8 %66 to i32
  %68 = load i8, i8* %14, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* %15, align 1
  %71 = zext i8 %70 to i32
  %72 = load i8, i8* %16, align 1
  %73 = zext i8 %72 to i32
  %74 = load i8, i8* %17, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i32 %45, i32* %76, align 8
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %62, i32* %77, align 4
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  store i8 %66, i8* %78, align 2
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  store i8 %74, i8* %79, align 2
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  store i8 %68, i8* %80, align 1
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 122
  store i8 %70, i8* %81, align 8
  %82 = add i8 %68, -2
  %83 = icmp ult i8 %82, 5
  br i1 %83, label %84, label %93

84:                                               ; preds = %65
  %85 = zext i8 %82 to i40
  %86 = shl nuw nsw i40 %85, 3
  %87 = lshr i40 17196777731, %86
  %88 = trunc i40 %87 to i8
  %89 = zext i8 %82 to i40
  %90 = shl nuw nsw i40 %89, 3
  %91 = lshr i40 17196777731, %90
  %92 = trunc i40 %91 to i8
  br label %93

93:                                               ; preds = %65, %84
  %94 = phi i8 [ %88, %84 ], [ 1, %65 ]
  %95 = phi i8 [ %92, %84 ], [ 1, %65 ]
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  store i8 %94, i8* %96, align 1
  %97 = mul i8 %95, %66
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  store i8 %97, i8* %98, align 4
  %99 = icmp ugt i8 %97, 7
  %100 = zext i32 %45 to i64
  %101 = zext i8 %97 to i64
  br i1 %99, label %102, label %105

102:                                              ; preds = %93
  %103 = lshr i64 %101, 3
  %104 = mul nuw nsw i64 %103, %100
  br label %109

105:                                              ; preds = %93
  %106 = mul nuw nsw i64 %101, %100
  %107 = add nuw nsw i64 %106, 7
  %108 = lshr i64 %107, 3
  br label %109

109:                                              ; preds = %105, %102
  %110 = phi i64 [ %104, %102 ], [ %108, %105 ]
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  store i64 %110, i64* %111, align 8
  call void @cr_png_set_IHDR(%struct.png_struct_def* %0, %struct.png_info_def* %1, i32 %45, i32 %62, i32 %67, i32 %69, i32 %75, i32 %71, i32 %73) #8
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %5) #8
  ret void
}

declare void @cr_png_set_IHDR(%struct.png_struct_def*, %struct.png_info_def*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_PLTE(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca [256 x %struct.png_color_struct], align 16
  %6 = alloca [3 x i8], align 1
  %7 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %5, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 768, i1 false)
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

13:                                               ; preds = %3
  %14 = and i32 %9, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %13
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)) #7
  unreachable

17:                                               ; preds = %13
  %18 = and i32 %9, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %17
  %21 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %149

22:                                               ; preds = %17
  %23 = or i32 %9, 2
  store i32 %23, i32* %8, align 4
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, 2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %149

30:                                               ; preds = %22
  %31 = icmp eq i8 %25, 3
  br i1 %31, label %34, label %32

32:                                               ; preds = %30
  %33 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %149

34:                                               ; preds = %30
  %35 = icmp ult i32 %2, 769
  %36 = urem i32 %2, 3
  %37 = icmp eq i32 %36, 0
  %38 = and i1 %35, %37
  br i1 %38, label %45, label %39

39:                                               ; preds = %34
  %40 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  %41 = load i8, i8* %24, align 1
  %42 = icmp eq i8 %41, 3
  br i1 %42, label %44, label %43

43:                                               ; preds = %39
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %149

44:                                               ; preds = %39
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #7
  unreachable

45:                                               ; preds = %34
  %46 = trunc i32 %2 to i16
  %47 = udiv i16 %46, 3
  %48 = zext i16 %47 to i32
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %50 = load i8, i8* %49, align 2
  %51 = zext i8 %50 to i32
  %52 = shl i32 1, %51
  %53 = icmp slt i32 %52, %48
  %54 = select i1 %53, i32 %52, i32 %48
  %55 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %5, i64 0, i64 0
  %56 = icmp sgt i32 %54, 0
  br i1 %56, label %57, label %81

57:                                               ; preds = %45
  %58 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 0
  %59 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 1
  %60 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 2
  %61 = icmp eq %struct.png_struct_def* %0, null
  br label %62

62:                                               ; preds = %57, %68
  %63 = phi %struct.png_color_struct* [ %55, %57 ], [ %76, %68 ]
  %64 = phi i32 [ 0, %57 ], [ %75, %68 ]
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %58) #8
  store i8 -86, i8* %58, align 1
  store i8 -86, i8* %59, align 1
  store i8 -86, i8* %60, align 1
  br i1 %61, label %68, label %65

65:                                               ; preds = %62
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %58, i64 3) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %58, i64 3) #8
  %66 = load i8, i8* %58, align 1
  %67 = load i8, i8* %59, align 1
  br label %68

68:                                               ; preds = %62, %65
  %69 = phi i8 [ -86, %62 ], [ %67, %65 ]
  %70 = phi i8 [ -86, %62 ], [ %66, %65 ]
  %71 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %63, i64 0, i32 0
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %63, i64 0, i32 1
  store i8 %69, i8* %72, align 1
  %73 = load i8, i8* %60, align 1
  %74 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %63, i64 0, i32 2
  store i8 %73, i8* %74, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %58) #8
  %75 = add nuw nsw i32 %64, 1
  %76 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %63, i64 1
  %77 = icmp slt i32 %75, %54
  br i1 %77, label %62, label %78

78:                                               ; preds = %68
  %79 = load i8, i8* %24, align 1
  %80 = icmp eq i8 %79, 3
  br i1 %80, label %81, label %85

81:                                               ; preds = %45, %78
  %82 = mul i32 %54, -3
  %83 = add i32 %82, %2
  %84 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %83)
  br label %132

85:                                               ; preds = %78
  %86 = bitcast i32* %4 to [4 x i8]*
  %87 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %87) #8, !noalias !17
  %88 = getelementptr inbounds [4 x i8], [4 x i8]* %86, i64 0, i64 1
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* %86, i64 0, i64 2
  %90 = getelementptr inbounds [4 x i8], [4 x i8]* %86, i64 0, i64 3
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 -1431655766, i32* %4, align 4, !noalias !17
  %92 = load i32, i32* %91, align 8, !alias.scope !17
  %93 = and i32 %92, 536870912
  %94 = icmp eq i32 %93, 0
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %96 = load i32, i32* %95, align 8, !alias.scope !17
  br i1 %94, label %100, label %97

97:                                               ; preds = %85
  %98 = and i32 %96, 768
  %99 = icmp eq i32 %98, 768
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %87, i64 4) #8
  br i1 %99, label %103, label %104

100:                                              ; preds = %85
  %101 = and i32 %96, 2048
  %102 = icmp eq i32 %101, 0
  call void @cr_png_read_data(%struct.png_struct_def* %0, i8* nonnull %87, i64 4) #8
  br i1 %102, label %104, label %103

103:                                              ; preds = %100, %97
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #8, !noalias !17
  br label %132

104:                                              ; preds = %97, %100
  %105 = load i8, i8* %87, align 4, !noalias !17
  %106 = zext i8 %105 to i32
  %107 = shl nuw i32 %106, 24
  %108 = load i8, i8* %88, align 1, !noalias !17
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 16
  %111 = or i32 %110, %107
  %112 = load i8, i8* %89, align 2, !noalias !17
  %113 = zext i8 %112 to i32
  %114 = shl nuw nsw i32 %113, 8
  %115 = or i32 %111, %114
  %116 = load i8, i8* %90, align 1, !noalias !17
  %117 = zext i8 %116 to i32
  %118 = or i32 %115, %117
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %120 = load i32, i32* %119, align 4, !alias.scope !17
  %121 = icmp eq i32 %118, %120
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #8, !noalias !17
  br i1 %121, label %132, label %122

122:                                              ; preds = %104
  %123 = load i32, i32* %95, align 8
  %124 = and i32 %123, 256
  %125 = icmp eq i32 %124, 0
  %126 = and i32 %123, 512
  %127 = icmp eq i32 %126, 0
  br i1 %125, label %128, label %130

128:                                              ; preds = %122
  br i1 %127, label %129, label %149

129:                                              ; preds = %128
  call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

130:                                              ; preds = %122
  br i1 %127, label %131, label %132

131:                                              ; preds = %130
  call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0)) #8
  br label %132

132:                                              ; preds = %103, %104, %130, %131, %81
  call void @cr_png_set_PLTE(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_color_struct* nonnull %55, i32 %54) #8
  %133 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %134 = load i16, i16* %133, align 2
  %135 = icmp eq i16 %134, 0
  br i1 %135, label %136, label %144

136:                                              ; preds = %132
  %137 = icmp eq %struct.png_info_def* %1, null
  br i1 %137, label %149, label %138

138:                                              ; preds = %136
  %139 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %140 = load i32, i32* %139, align 8
  %141 = and i32 %140, 16
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %149, label %143

143:                                              ; preds = %138
  store i16 0, i16* %133, align 2
  br label %146

144:                                              ; preds = %132
  store i16 0, i16* %133, align 2
  %145 = icmp eq %struct.png_info_def* %1, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %143, %144
  %147 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %147, align 2
  br label %148

148:                                              ; preds = %144, %146
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i64 0, i64 0)) #8
  br label %149

149:                                              ; preds = %148, %136, %138, %128, %43, %32, %28, %20
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %7) #8
  ret void
}

declare void @cr_png_chunk_benign_error(%struct.png_struct_def*, i8*) local_unnamed_addr #4

declare void @cr_png_set_PLTE(%struct.png_struct_def*, %struct.png_info_def*, %struct.png_color_struct*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_IEND(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture readnone, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 5
  %7 = icmp eq i32 %6, 5
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #7
  unreachable

9:                                                ; preds = %3
  %10 = or i32 %5, 24
  store i32 %10, i32* %4, align 4
  %11 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %14

14:                                               ; preds = %9, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_gAMA(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to [4 x i8]*
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  store i32 -1431655766, i32* %4, align 4
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

15:                                               ; preds = %3
  %16 = and i32 %11, 6
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %48

20:                                               ; preds = %15
  %21 = icmp eq i32 %2, 4
  br i1 %21, label %24, label %22

22:                                               ; preds = %20
  %23 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %48

24:                                               ; preds = %20
  %25 = icmp eq %struct.png_struct_def* %0, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %24
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 4) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 4) #8
  br label %27

27:                                               ; preds = %24, %26
  %28 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %48

30:                                               ; preds = %27
  %31 = load i8, i8* %6, align 4
  %32 = zext i8 %31 to i32
  %33 = shl nuw i32 %32, 24
  %34 = load i8, i8* %7, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 16
  %37 = or i32 %36, %33
  %38 = load i8, i8* %8, align 2
  %39 = zext i8 %38 to i32
  %40 = shl nuw nsw i32 %39, 8
  %41 = or i32 %37, %40
  %42 = load i8, i8* %9, align 1
  %43 = zext i8 %42 to i32
  %44 = or i32 %41, %43
  %45 = icmp sgt i32 %44, -1
  %46 = select i1 %45, i32 %44, i32 -1
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134
  call void @cr_png_colorspace_set_gamma(%struct.png_struct_def* %0, %struct.png_colorspace* %47, i32 %46) #8
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  br label %48

48:                                               ; preds = %27, %30, %22, %18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #8
  ret void
}

declare void @cr_png_colorspace_set_gamma(%struct.png_struct_def*, %struct.png_colorspace*, i32) local_unnamed_addr #4

declare void @cr_png_colorspace_sync(%struct.png_struct_def*, %struct.png_info_def*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_cHRM(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %struct.png_xy, align 4
  %6 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #8
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 2
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 3
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 4
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 5
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 6
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 7
  %14 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 8
  %15 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 9
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 10
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 11
  %18 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 12
  %19 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 13
  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 14
  %21 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 15
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 16
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 17
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 18
  %25 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 19
  %26 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 20
  %27 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 21
  %28 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 22
  %29 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 23
  %30 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 24
  %31 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 25
  %32 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 26
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 27
  %34 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 28
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 29
  %36 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 30
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 31
  %38 = bitcast %struct.png_xy* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %38) #8
  %39 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 0
  %40 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 1
  %41 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 2
  %42 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 3
  %43 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 4
  %44 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 5
  %45 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 6
  %46 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 7
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %48 = bitcast %struct.png_xy* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %48, i8 -86, i64 32, i1 false)
  %49 = load i32, i32* %47, align 4
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

53:                                               ; preds = %3
  %54 = and i32 %49, 6
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %219

58:                                               ; preds = %53
  %59 = icmp eq i32 %2, 32
  br i1 %59, label %62, label %60

60:                                               ; preds = %58
  %61 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %219

62:                                               ; preds = %58
  %63 = icmp eq %struct.png_struct_def* %0, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %62
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 32) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 32) #8
  br label %65

65:                                               ; preds = %62, %64
  %66 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %219

68:                                               ; preds = %65
  %69 = load i8, i8* %6, align 16
  %70 = zext i8 %69 to i32
  %71 = shl nuw i32 %70, 24
  %72 = load i8, i8* %7, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 16
  %75 = or i32 %74, %71
  %76 = load i8, i8* %8, align 2
  %77 = zext i8 %76 to i32
  %78 = shl nuw nsw i32 %77, 8
  %79 = or i32 %75, %78
  %80 = load i8, i8* %9, align 1
  %81 = zext i8 %80 to i32
  %82 = or i32 %79, %81
  %83 = icmp sgt i32 %82, -1
  %84 = select i1 %83, i32 %82, i32 -1
  store i32 %84, i32* %45, align 4
  %85 = load i8, i8* %10, align 4
  %86 = zext i8 %85 to i32
  %87 = shl nuw i32 %86, 24
  %88 = load i8, i8* %11, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 16
  %91 = or i32 %90, %87
  %92 = load i8, i8* %12, align 2
  %93 = zext i8 %92 to i32
  %94 = shl nuw nsw i32 %93, 8
  %95 = or i32 %91, %94
  %96 = load i8, i8* %13, align 1
  %97 = zext i8 %96 to i32
  %98 = or i32 %95, %97
  %99 = icmp sgt i32 %98, -1
  %100 = select i1 %99, i32 %98, i32 -1
  store i32 %100, i32* %46, align 4
  %101 = load i8, i8* %14, align 8
  %102 = zext i8 %101 to i32
  %103 = shl nuw i32 %102, 24
  %104 = load i8, i8* %15, align 1
  %105 = zext i8 %104 to i32
  %106 = shl nuw nsw i32 %105, 16
  %107 = or i32 %106, %103
  %108 = load i8, i8* %16, align 2
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 8
  %111 = or i32 %107, %110
  %112 = load i8, i8* %17, align 1
  %113 = zext i8 %112 to i32
  %114 = or i32 %111, %113
  %115 = icmp sgt i32 %114, -1
  %116 = select i1 %115, i32 %114, i32 -1
  store i32 %116, i32* %39, align 4
  %117 = load i8, i8* %18, align 4
  %118 = zext i8 %117 to i32
  %119 = shl nuw i32 %118, 24
  %120 = load i8, i8* %19, align 1
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 16
  %123 = or i32 %122, %119
  %124 = load i8, i8* %20, align 2
  %125 = zext i8 %124 to i32
  %126 = shl nuw nsw i32 %125, 8
  %127 = or i32 %123, %126
  %128 = load i8, i8* %21, align 1
  %129 = zext i8 %128 to i32
  %130 = or i32 %127, %129
  %131 = icmp sgt i32 %130, -1
  %132 = select i1 %131, i32 %130, i32 -1
  store i32 %132, i32* %40, align 4
  %133 = load i8, i8* %22, align 16
  %134 = zext i8 %133 to i32
  %135 = shl nuw i32 %134, 24
  %136 = load i8, i8* %23, align 1
  %137 = zext i8 %136 to i32
  %138 = shl nuw nsw i32 %137, 16
  %139 = or i32 %138, %135
  %140 = load i8, i8* %24, align 2
  %141 = zext i8 %140 to i32
  %142 = shl nuw nsw i32 %141, 8
  %143 = or i32 %139, %142
  %144 = load i8, i8* %25, align 1
  %145 = zext i8 %144 to i32
  %146 = or i32 %143, %145
  %147 = icmp sgt i32 %146, -1
  %148 = select i1 %147, i32 %146, i32 -1
  store i32 %148, i32* %41, align 4
  %149 = load i8, i8* %26, align 4
  %150 = zext i8 %149 to i32
  %151 = shl nuw i32 %150, 24
  %152 = load i8, i8* %27, align 1
  %153 = zext i8 %152 to i32
  %154 = shl nuw nsw i32 %153, 16
  %155 = or i32 %154, %151
  %156 = load i8, i8* %28, align 2
  %157 = zext i8 %156 to i32
  %158 = shl nuw nsw i32 %157, 8
  %159 = or i32 %155, %158
  %160 = load i8, i8* %29, align 1
  %161 = zext i8 %160 to i32
  %162 = or i32 %159, %161
  %163 = icmp sgt i32 %162, -1
  %164 = select i1 %163, i32 %162, i32 -1
  store i32 %164, i32* %42, align 4
  %165 = load i8, i8* %30, align 8
  %166 = zext i8 %165 to i32
  %167 = shl nuw i32 %166, 24
  %168 = load i8, i8* %31, align 1
  %169 = zext i8 %168 to i32
  %170 = shl nuw nsw i32 %169, 16
  %171 = or i32 %170, %167
  %172 = load i8, i8* %32, align 2
  %173 = zext i8 %172 to i32
  %174 = shl nuw nsw i32 %173, 8
  %175 = or i32 %171, %174
  %176 = load i8, i8* %33, align 1
  %177 = zext i8 %176 to i32
  %178 = or i32 %175, %177
  %179 = icmp sgt i32 %178, -1
  %180 = select i1 %179, i32 %178, i32 -1
  store i32 %180, i32* %43, align 4
  %181 = load i8, i8* %34, align 4
  %182 = zext i8 %181 to i32
  %183 = shl nuw i32 %182, 24
  %184 = load i8, i8* %35, align 1
  %185 = zext i8 %184 to i32
  %186 = shl nuw nsw i32 %185, 16
  %187 = or i32 %186, %183
  %188 = load i8, i8* %36, align 2
  %189 = zext i8 %188 to i32
  %190 = shl nuw nsw i32 %189, 8
  %191 = or i32 %187, %190
  %192 = load i8, i8* %37, align 1
  %193 = zext i8 %192 to i32
  %194 = or i32 %191, %193
  %195 = icmp sgt i32 %194, -1
  %196 = select i1 %195, i32 %194, i32 -1
  store i32 %196, i32* %44, align 4
  %197 = or i32 %87, %71
  %198 = or i32 %197, %103
  %199 = or i32 %198, %119
  %200 = or i32 %199, %135
  %201 = or i32 %200, %151
  %202 = or i32 %201, %167
  %203 = or i32 %202, %183
  %204 = icmp slt i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %68
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0)) #8
  br label %219

206:                                              ; preds = %68
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134
  %208 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 4
  %209 = load i16, i16* %208, align 2
  %210 = icmp slt i16 %209, 0
  br i1 %210, label %219, label %211

211:                                              ; preds = %206
  %212 = and i16 %209, 16
  %213 = icmp eq i16 %212, 0
  br i1 %213, label %216, label %214

214:                                              ; preds = %211
  %215 = or i16 %209, -32768
  store i16 %215, i16* %208, align 2
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %219

216:                                              ; preds = %211
  %217 = or i16 %209, 16
  store i16 %217, i16* %208, align 2
  %218 = call i32 @cr_png_colorspace_set_chromaticities(%struct.png_struct_def* %0, %struct.png_colorspace* %207, %struct.png_xy* nonnull %5, i32 1) #8
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  br label %219

219:                                              ; preds = %206, %65, %216, %214, %205, %60, %56
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %38) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #8
  ret void
}

declare i32 @cr_png_colorspace_set_chromaticities(%struct.png_struct_def*, %struct.png_colorspace*, %struct.png_xy*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_sRGB(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #8
  store i8 -86, i8* %4, align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

10:                                               ; preds = %3
  %11 = and i32 %6, 6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  %14 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %39

15:                                               ; preds = %10
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  %18 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %39

19:                                               ; preds = %15
  %20 = icmp eq %struct.png_struct_def* %0, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %19
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i64 1) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i64 1) #8
  br label %22

22:                                               ; preds = %19, %21
  %23 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %39

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 4
  %28 = load i16, i16* %27, align 2
  %29 = icmp slt i16 %28, 0
  br i1 %29, label %39, label %30

30:                                               ; preds = %25
  %31 = and i16 %28, 4
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %30
  %34 = or i16 %28, -32768
  store i16 %34, i16* %27, align 2
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0)) #8
  br label %39

35:                                               ; preds = %30
  %36 = load i8, i8* %4, align 1
  %37 = zext i8 %36 to i32
  %38 = call i32 @cr_png_colorspace_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %26, i32 %37) #8
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  br label %39

39:                                               ; preds = %25, %22, %35, %33, %17, %13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  ret void
}

declare i32 @cr_png_colorspace_set_sRGB(%struct.png_struct_def*, %struct.png_colorspace*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_iCCP(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca [81 x i8], align 16
  %6 = alloca [132 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i64, align 8
  store i32 %2, i32* %4, align 4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

14:                                               ; preds = %3
  %15 = and i32 %10, 6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %228

19:                                               ; preds = %14
  %20 = icmp ult i32 %2, 14
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)) #8
  br label %228

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 134, i32 4
  %26 = load i16, i16* %25, align 2
  %27 = icmp slt i16 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %23
  %29 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %228

30:                                               ; preds = %23
  %31 = and i16 %26, 4
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %33, label %218

33:                                               ; preds = %30
  %34 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 81, i8* nonnull %34) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 81, i1 false)
  %35 = icmp ult i32 %2, 81
  %36 = select i1 %35, i32 %2, i32 81
  %37 = icmp eq %struct.png_struct_def* %0, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = zext i32 %36 to i64
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %34, i64 %39) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %34, i64 %39) #8
  br label %40

40:                                               ; preds = %33, %38
  %41 = sub i32 %2, %36
  store i32 %41, i32* %4, align 4
  %42 = icmp ult i32 %41, 11
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = zext i32 %36 to i64
  br label %47

45:                                               ; preds = %40
  %46 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %41)
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)) #8
  br label %209

47:                                               ; preds = %43, %53
  %48 = phi i64 [ 0, %43 ], [ %54, %53 ]
  %49 = phi i32 [ 0, %43 ], [ %55, %53 ]
  %50 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %48
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %59, label %53

53:                                               ; preds = %47
  %54 = add nuw nsw i64 %48, 1
  %55 = add nuw nsw i32 %49, 1
  %56 = icmp ult i64 %54, 80
  %57 = icmp ult i64 %54, %44
  %58 = and i1 %56, %57
  br i1 %58, label %47, label %61

59:                                               ; preds = %47
  %60 = trunc i64 %48 to i32
  br label %61

61:                                               ; preds = %53, %59
  %62 = phi i32 [ %60, %59 ], [ %55, %53 ]
  %63 = add nsw i32 %62, -1
  %64 = icmp ult i32 %63, 79
  br i1 %64, label %65, label %210

65:                                               ; preds = %61
  %66 = add nuw nsw i32 %62, 1
  %67 = icmp ult i32 %66, %36
  br i1 %67, label %68, label %210

68:                                               ; preds = %65
  %69 = zext i32 %66 to i64
  %70 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %210

73:                                               ; preds = %68
  %74 = add nuw nsw i32 %62, 2
  %75 = call fastcc i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 1766015824)
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %206

77:                                               ; preds = %73
  %78 = sub nsw i32 %36, %74
  %79 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 132, i8* nonnull %79) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %79, i8 0, i64 132, i1 false)
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %80) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %80, i8 -86, i64 1024, i1 false)
  %81 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #8
  store i64 132, i64* %8, align 8
  %82 = zext i32 %74 to i64
  %83 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %82
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  store i8* %83, i8** %84, align 8
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 %78, i32* %85, align 8
  call fastcc void @png_inflate_read(%struct.png_struct_def* %0, i8* nonnull %80, i32* nonnull %4, i8* nonnull %79, i64* nonnull %8, i32 0)
  %86 = load i64, i64* %8, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %201

88:                                               ; preds = %77
  %89 = load i8, i8* %79, align 16
  %90 = zext i8 %89 to i32
  %91 = shl nuw i32 %90, 24
  %92 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 16
  %96 = or i32 %95, %91
  %97 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 2
  %98 = load i8, i8* %97, align 2
  %99 = zext i8 %98 to i32
  %100 = shl nuw nsw i32 %99, 8
  %101 = or i32 %96, %100
  %102 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 3
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = or i32 %101, %104
  %106 = call i32 @cr_png_icc_check_length(%struct.png_struct_def* %0, %struct.png_colorspace* %24, i8* nonnull %34, i32 %105) #8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %212, label %108

108:                                              ; preds = %88
  %109 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = call i32 @cr_png_icc_check_header(%struct.png_struct_def* %0, %struct.png_colorspace* %24, i8* nonnull %34, i32 %105, i8* nonnull %79, i32 %111) #8
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %212, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 128
  %116 = load i8, i8* %115, align 16
  %117 = zext i8 %116 to i64
  %118 = shl nuw nsw i64 %117, 24
  %119 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 129
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i64
  %122 = shl nuw nsw i64 %121, 16
  %123 = or i64 %122, %118
  %124 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 130
  %125 = load i8, i8* %124, align 2
  %126 = zext i8 %125 to i64
  %127 = shl nuw nsw i64 %126, 8
  %128 = or i64 %123, %127
  %129 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 131
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = or i64 %128, %131
  %133 = zext i32 %105 to i64
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 129
  %135 = load i8*, i8** %134, align 8, !alias.scope !20
  %136 = icmp eq i8* %135, null
  br i1 %136, label %143, label %137

137:                                              ; preds = %114
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  %139 = load i64, i64* %138, align 8, !alias.scope !20
  %140 = icmp ult i64 %139, %133
  br i1 %140, label %141, label %148

141:                                              ; preds = %137
  %142 = bitcast i8** %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 16, i1 false) #8, !alias.scope !20
  call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %135) #8
  br label %143

143:                                              ; preds = %141, %114
  %144 = call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %133) #8
  %145 = icmp eq i8* %144, null
  br i1 %145, label %212, label %146

146:                                              ; preds = %143
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %144, i8 0, i64 %133, i1 false) #8, !noalias !20
  store i8* %144, i8** %134, align 8, !alias.scope !20
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  store i64 %133, i64* %147, align 8, !alias.scope !20
  br label %148

148:                                              ; preds = %146, %137
  %149 = phi i8* [ %135, %137 ], [ %144, %146 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %149, i8* nonnull align 16 %79, i64 132, i1 false)
  %150 = mul nuw nsw i64 %132, 12
  %151 = and i64 %150, 4294967292
  store i64 %151, i64* %8, align 8
  %152 = getelementptr inbounds i8, i8* %149, i64 132
  call fastcc void @png_inflate_read(%struct.png_struct_def* %0, i8* nonnull %80, i32* nonnull %4, i8* %152, i64* nonnull %8, i32 0)
  %153 = load i64, i64* %8, align 8
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %198

155:                                              ; preds = %148
  %156 = call i32 @cr_png_icc_check_tag_table(%struct.png_struct_def* %0, %struct.png_colorspace* %24, i8* nonnull %34, i32 %105, i8* nonnull %149) #8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %212, label %158

158:                                              ; preds = %155
  %159 = add nsw i64 %133, -132
  %160 = sub nsw i64 %159, %151
  store i64 %160, i64* %8, align 8
  %161 = getelementptr inbounds i8, i8* %152, i64 %151
  call fastcc void @png_inflate_read(%struct.png_struct_def* %0, i8* nonnull %80, i32* nonnull %4, i8* %161, i64* nonnull %8, i32 1)
  %162 = load i32, i32* %4, align 4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %169, label %164

164:                                              ; preds = %158
  %165 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %166 = load i32, i32* %165, align 8
  %167 = and i32 %166, 1048576
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %212, label %169

169:                                              ; preds = %164, %158
  %170 = load i64, i64* %8, align 8
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %195

172:                                              ; preds = %169
  br i1 %163, label %174, label %173

173:                                              ; preds = %172
  call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #8
  br label %174

174:                                              ; preds = %172, %173
  %175 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %162)
  %176 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 12
  %177 = load i64, i64* %176, align 8
  call void @cr_png_icc_set_sRGB(%struct.png_struct_def* %0, %struct.png_colorspace* %24, i8* nonnull %149, i64 %177) #8
  %178 = icmp eq %struct.png_info_def* %1, null
  br i1 %178, label %204, label %179

179:                                              ; preds = %174
  call void @cr_png_free_data(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1, i32 16, i32 0) #8
  %180 = call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %69) #8
  %181 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  store i8* %180, i8** %181, align 8
  %182 = icmp eq i8* %180, null
  br i1 %182, label %192, label %183

183:                                              ; preds = %179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %180, i8* nonnull align 16 %34, i64 %69, i1 false)
  %184 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 19
  store i32 %105, i32* %184, align 8
  %185 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  store i8* %149, i8** %185, align 8
  store i8* null, i8** %134, align 8
  %186 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %187 = load i32, i32* %186, align 4
  %188 = or i32 %187, 16
  store i32 %188, i32* %186, align 4
  %189 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %190 = load i32, i32* %189, align 8
  %191 = or i32 %190, 4096
  store i32 %191, i32* %189, align 8
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1) #8
  br label %204

192:                                              ; preds = %179
  %193 = load i16, i16* %25, align 2
  %194 = or i16 %193, -32768
  store i16 %194, i16* %25, align 2
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1) #8
  br label %212

195:                                              ; preds = %169
  %196 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %197 = load i8*, i8** %196, align 8
  br label %212

198:                                              ; preds = %148
  %199 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %200 = load i8*, i8** %199, align 8
  br label %212

201:                                              ; preds = %77
  %202 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %203 = load i8*, i8** %202, align 8
  br label %212

204:                                              ; preds = %183, %174
  %205 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  store i32 0, i32* %205, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %80) #8
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %79) #8
  br label %209

206:                                              ; preds = %73
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %208 = load i8*, i8** %207, align 8
  br label %210

209:                                              ; preds = %204, %45
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %34) #8
  br label %228

210:                                              ; preds = %206, %68, %65, %61
  %211 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), %61 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), %65 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), %68 ], [ %208, %206 ]
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %34) #8
  br label %218

212:                                              ; preds = %201, %108, %88, %155, %198, %195, %143, %192, %164
  %213 = phi i8* [ %203, %201 ], [ null, %88 ], [ null, %108 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0), %143 ], [ %200, %198 ], [ null, %155 ], [ %197, %195 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0), %164 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0), %192 ]
  %214 = phi i1 [ true, %201 ], [ true, %88 ], [ true, %108 ], [ true, %143 ], [ true, %198 ], [ true, %155 ], [ true, %195 ], [ true, %164 ], [ false, %192 ]
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  store i32 0, i32* %215, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %80) #8
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %79) #8
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %34) #8
  br i1 %214, label %216, label %222

216:                                              ; preds = %212
  %217 = load i32, i32* %4, align 4
  br label %218

218:                                              ; preds = %216, %30, %210
  %219 = phi i32 [ %217, %216 ], [ %41, %210 ], [ %2, %30 ]
  %220 = phi i8* [ %213, %216 ], [ %211, %210 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), %30 ]
  %221 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %219)
  br label %222

222:                                              ; preds = %218, %212
  %223 = phi i8* [ %220, %218 ], [ %213, %212 ]
  %224 = load i16, i16* %25, align 2
  %225 = or i16 %224, -32768
  store i16 %225, i16* %25, align 2
  call void @cr_png_colorspace_sync(%struct.png_struct_def* %0, %struct.png_info_def* %1) #8
  %226 = icmp eq i8* %223, null
  br i1 %226, label %228, label %227

227:                                              ; preds = %222
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* nonnull %223) #8
  br label %228

228:                                              ; preds = %209, %227, %222, %28, %21, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_inflate_claim(%struct.png_struct_def* noalias, i32) unnamed_addr #0 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 64, i1 false)
  %9 = lshr i32 %5, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %8, align 16
  %11 = lshr i32 %5, 16
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 1
  store i8 %12, i8* %13, align 1
  %14 = lshr i32 %5, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 2
  store i8 %15, i8* %16, align 2
  %17 = trunc i32 %5 to i8
  %18 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 3
  store i8 %17, i8* %18, align 1
  %19 = call i64 @cr_png_safecat(i8* nonnull %8, i64 64, i64 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40, i64 0, i64 0)) #8
  call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* nonnull %8) #8
  store i32 0, i32* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #8
  br label %20

20:                                               ; preds = %2, %7
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 12
  %24 = icmp eq i32 %23, 12
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %26 = xor i1 %24, true
  %27 = zext i1 %26 to i8
  %28 = select i1 %24, i32 15, i32 0
  store i8 %27, i8* %25, align 2
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %30 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %29, i64 0, i32 0
  store i8* null, i8** %30, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* null, i8** %32, align 8
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %20
  %39 = call i32 @Cr_z_inflateReset2(%struct.z_stream_s* %29, i32 %28) #8
  br label %46

40:                                               ; preds = %20
  %41 = call i32 @Cr_z_inflateInit2_(%struct.z_stream_s* %29, i32 %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i32 112) #8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %40
  %44 = load i32, i32* %34, align 8
  %45 = or i32 %44, 2
  store i32 %45, i32* %34, align 8
  br label %46

46:                                               ; preds = %40, %43, %38
  %47 = phi i32 [ %39, %38 ], [ 0, %43 ], [ %41, %40 ]
  %48 = load i32, i32* %21, align 8
  %49 = and i32 %48, 768
  %50 = icmp eq i32 %49, 768
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = call i32 @Cr_z_inflateValidate(%struct.z_stream_s* %29, i32 0) #8
  br label %53

53:                                               ; preds = %51, %46
  %54 = phi i32 [ %52, %51 ], [ %47, %46 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  store i32 %1, i32* %4, align 8
  br label %58

57:                                               ; preds = %53
  call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %54) #8
  br label %58

58:                                               ; preds = %57, %56
  ret i32 %54
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @png_inflate_read(%struct.png_struct_def* noalias, i8*, i32* nocapture, i8*, i64* nocapture, i32) unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %81

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* %3, i8** %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  %16 = icmp eq %struct.png_struct_def* %0, null
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  %18 = icmp eq i32 %5, 0
  %19 = select i1 %18, i32 2, i32 4
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  br label %22

22:                                               ; preds = %71, %12
  %23 = phi i32 [ 1024, %12 ], [ %38, %71 ]
  %24 = load i32, i32* %15, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %22
  %27 = load i32, i32* %2, align 4
  %28 = icmp ugt i32 %23, %27
  %29 = select i1 %28, i32 %27, i32 %23
  %30 = sub i32 %27, %29
  store i32 %30, i32* %2, align 4
  %31 = icmp eq i32 %29, 0
  %32 = or i1 %16, %31
  br i1 %32, label %35, label %33

33:                                               ; preds = %26
  %34 = zext i32 %29 to i64
  tail call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* %1, i64 %34) #8
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %1, i64 %34) #8
  br label %35

35:                                               ; preds = %33, %26
  store i8* %1, i8** %17, align 8
  store i32 %29, i32* %15, align 8
  br label %36

36:                                               ; preds = %35, %22
  %37 = phi i32 [ %29, %35 ], [ %24, %22 ]
  %38 = phi i32 [ %29, %35 ], [ %23, %22 ]
  %39 = load i32, i32* %14, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = load i64, i64* %4, align 8
  %43 = icmp ult i64 %42, 4294967295
  %44 = select i1 %43, i64 %42, i64 4294967295
  %45 = trunc i64 %44 to i32
  %46 = sub i64 %42, %44
  store i64 %46, i64* %4, align 8
  store i32 %45, i32* %14, align 8
  br label %47

47:                                               ; preds = %41, %36
  %48 = phi i32 [ %45, %41 ], [ %39, %36 ]
  %49 = load i32, i32* %2, align 4
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %50, i32 %19, i32 0
  %52 = load i8, i8* %20, align 2, !alias.scope !23
  %53 = icmp eq i8 %52, 0
  %54 = icmp eq i32 %37, 0
  %55 = or i1 %53, %54
  br i1 %55, label %63, label %56

56:                                               ; preds = %47
  %57 = load i8*, i8** %17, align 8, !alias.scope !23
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8** %61, align 8, !alias.scope !23
  br label %75

62:                                               ; preds = %56
  store i8 0, i8* %20, align 2, !alias.scope !23
  br label %63

63:                                               ; preds = %47, %62
  %64 = tail call i32 @Cr_z_inflate(%struct.z_stream_s* %21, i32 %51) #8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = load i32, i32* %14, align 8
  br label %75

68:                                               ; preds = %63
  %69 = load i64, i64* %4, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %68, %72
  br label %22

72:                                               ; preds = %68
  %73 = load i32, i32* %14, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %71

75:                                               ; preds = %72, %66, %60
  %76 = phi i32 [ %48, %60 ], [ %67, %66 ], [ 0, %72 ]
  %77 = phi i32 [ -3, %60 ], [ %64, %66 ], [ 0, %72 ]
  %78 = zext i32 %76 to i64
  %79 = load i64, i64* %4, align 8
  %80 = add i64 %79, %78
  store i64 %80, i64* %4, align 8
  store i32 0, i32* %14, align 8
  tail call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %77) #8
  br label %83

81:                                               ; preds = %6
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.42, i64 0, i64 0), i8** %82, align 8
  br label %83

83:                                               ; preds = %81, %75
  ret void
}

declare i32 @cr_png_icc_check_length(%struct.png_struct_def*, %struct.png_colorspace*, i8*, i32) local_unnamed_addr #4

declare i32 @cr_png_icc_check_header(%struct.png_struct_def*, %struct.png_colorspace*, i8*, i32, i8*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @cr_png_icc_check_tag_table(%struct.png_struct_def*, %struct.png_colorspace*, i8*, i32, i8*) local_unnamed_addr #4

declare void @cr_png_icc_set_sRGB(%struct.png_struct_def*, %struct.png_colorspace*, i8*, i64) local_unnamed_addr #4

declare void @cr_png_free_data(%struct.png_struct_def*, %struct.png_info_def*, i32, i32) local_unnamed_addr #4

declare noalias i8* @cr_png_malloc_base(%struct.png_struct_def*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_tRNS(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca [2 x i8], align 1
  %6 = alloca [6 x i8], align 1
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 256, i1 false)
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

13:                                               ; preds = %3
  %14 = and i32 %9, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  %17 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %125

18:                                               ; preds = %13
  %19 = icmp eq %struct.png_info_def* %1, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)) #8
  br label %125

27:                                               ; preds = %20, %18
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %29 = load i8, i8* %28, align 1
  switch i8 %29, label %114 [
    i8 0, label %30
    i8 2, label %50
    i8 3, label %92
  ]

30:                                               ; preds = %27
  %31 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %31) #8
  store i8 -86, i8* %31, align 1
  %32 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 1
  store i8 -86, i8* %32, align 1
  %33 = icmp eq i32 %2, 2
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %31) #8
  br label %125

36:                                               ; preds = %30
  %37 = icmp eq %struct.png_struct_def* %0, null
  br i1 %37, label %44, label %38

38:                                               ; preds = %36
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %31, i64 2) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %31, i64 2) #8
  %39 = load i8, i8* %31, align 1
  %40 = load i8, i8* %32, align 1
  %41 = zext i8 %39 to i16
  %42 = shl nuw i16 %41, 8
  %43 = zext i8 %40 to i16
  br label %44

44:                                               ; preds = %36, %38
  %45 = phi i16 [ 170, %36 ], [ %43, %38 ]
  %46 = phi i16 [ -22016, %36 ], [ %42, %38 ]
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  store i16 1, i16* %47, align 2
  %48 = or i16 %46, %45
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89, i32 4
  store i16 %48, i16* %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %31) #8
  br label %116

50:                                               ; preds = %27
  %51 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %51) #8
  %52 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 1
  %53 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 2
  %54 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 3
  %55 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 4
  %56 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 5
  %57 = icmp eq i32 %2, 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %51, i8 -86, i64 6, i1 false)
  br i1 %57, label %60, label %58

58:                                               ; preds = %50
  %59 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %51) #8
  br label %125

60:                                               ; preds = %50
  %61 = icmp eq %struct.png_struct_def* %0, null
  br i1 %61, label %78, label %62

62:                                               ; preds = %60
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %51, i64 6) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %51, i64 6) #8
  %63 = load i8, i8* %51, align 1
  %64 = load i8, i8* %52, align 1
  %65 = load i8, i8* %53, align 1
  %66 = load i8, i8* %54, align 1
  %67 = load i8, i8* %55, align 1
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %63 to i16
  %70 = shl nuw i16 %69, 8
  %71 = zext i8 %64 to i16
  %72 = zext i8 %65 to i16
  %73 = shl nuw i16 %72, 8
  %74 = zext i8 %66 to i16
  %75 = zext i8 %67 to i16
  %76 = shl nuw i16 %75, 8
  %77 = zext i8 %68 to i16
  br label %78

78:                                               ; preds = %60, %62
  %79 = phi i16 [ 170, %60 ], [ %77, %62 ]
  %80 = phi i16 [ -22016, %60 ], [ %76, %62 ]
  %81 = phi i16 [ 170, %60 ], [ %74, %62 ]
  %82 = phi i16 [ -22016, %60 ], [ %73, %62 ]
  %83 = phi i16 [ 170, %60 ], [ %71, %62 ]
  %84 = phi i16 [ -22016, %60 ], [ %70, %62 ]
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  store i16 1, i16* %85, align 2
  %86 = or i16 %84, %83
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89, i32 1
  store i16 %86, i16* %87, align 2
  %88 = or i16 %82, %81
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89, i32 2
  store i16 %88, i16* %89, align 4
  %90 = or i16 %80, %79
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89, i32 3
  store i16 %90, i16* %91, align 2
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %51) #8
  br label %116

92:                                               ; preds = %27
  %93 = and i32 %9, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %92
  %96 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #8
  br label %125

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  %99 = load i16, i16* %98, align 8
  %100 = zext i16 %99 to i32
  %101 = icmp ugt i32 %2, 256
  %102 = add i32 %2, -1
  %103 = icmp uge i32 %102, %100
  %104 = or i1 %101, %103
  br i1 %104, label %105, label %107

105:                                              ; preds = %97
  %106 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)) #8
  br label %125

107:                                              ; preds = %97
  %108 = icmp eq %struct.png_struct_def* %0, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %107
  %110 = zext i32 %2 to i64
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 %110) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 %110) #8
  br label %111

111:                                              ; preds = %107, %109
  %112 = trunc i32 %2 to i16
  %113 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  store i16 %112, i16* %113, align 2
  br label %116

114:                                              ; preds = %27
  %115 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0)) #8
  br label %125

116:                                              ; preds = %78, %44, %111
  %117 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  br i1 %118, label %121, label %120

120:                                              ; preds = %116
  store i16 0, i16* %119, align 2
  br label %125

121:                                              ; preds = %116
  %122 = load i16, i16* %119, align 2
  %123 = zext i16 %122 to i32
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  call void @cr_png_set_tRNS(%struct.png_struct_def* %0, %struct.png_info_def* %1, i8* nonnull %7, i32 %123, %struct.png_color_16_struct* %124) #8
  br label %125

125:                                              ; preds = %58, %34, %121, %120, %114, %105, %95, %25, %16
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #8
  ret void
}

declare void @cr_png_set_tRNS(%struct.png_struct_def*, %struct.png_info_def*, i8*, i32, %struct.png_color_16_struct*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_tEXt(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.png_text_struct, align 8
  %5 = bitcast %struct.png_text_struct* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 56, i1 false)
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 125
  %7 = load i32, i32* %6, align 4
  switch i32 %7, label %10 [
    i32 0, label %15
    i32 1, label %8
  ]

8:                                                ; preds = %3
  %9 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %73

10:                                               ; preds = %3
  %11 = add i32 %7, -1
  store i32 %11, i32* %6, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0)) #8
  br label %73

15:                                               ; preds = %3, %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

21:                                               ; preds = %15
  %22 = and i32 %17, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = or i32 %17, 8
  store i32 %25, i32* %16, align 4
  br label %26

26:                                               ; preds = %21, %24
  %27 = add i32 %2, 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 129
  %30 = load i8*, i8** %29, align 8, !alias.scope !26
  %31 = icmp eq i8* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  %34 = load i64, i64* %33, align 8, !alias.scope !26
  %35 = icmp ult i64 %34, %28
  br i1 %35, label %36, label %44

36:                                               ; preds = %32
  %37 = bitcast i8** %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #8, !alias.scope !26
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %30) #8
  br label %38

38:                                               ; preds = %36, %26
  %39 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %28) #8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %39, i8 0, i64 %28, i1 false) #8, !noalias !26
  store i8* %39, i8** %29, align 8, !alias.scope !26
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  store i64 %28, i64* %42, align 8, !alias.scope !26
  br label %44

43:                                               ; preds = %38
  tail call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.43, i64 0, i64 0)) #8
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)) #8
  br label %73

44:                                               ; preds = %41, %32
  %45 = phi i8* [ %30, %32 ], [ %39, %41 ]
  %46 = icmp eq %struct.png_struct_def* %0, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %44
  %48 = zext i32 %2 to i64
  tail call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %45, i64 %48) #8
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %45, i64 %48) #8
  br label %49

49:                                               ; preds = %44, %47
  %50 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %73

52:                                               ; preds = %49
  %53 = zext i32 %2 to i64
  %54 = getelementptr inbounds i8, i8* %45, i64 %53
  store i8 0, i8* %54, align 1
  br label %55

55:                                               ; preds = %55, %52
  %56 = phi i8* [ %45, %52 ], [ %59, %55 ]
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  br i1 %58, label %60, label %55

60:                                               ; preds = %55
  %61 = icmp eq i8* %56, %54
  %62 = select i1 %61, i8* %56, i8* %59
  %63 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i64 0, i32 0
  store i32 -1, i32* %63, align 8
  %64 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i64 0, i32 1
  store i8* %45, i8** %64, align 8
  %65 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i64 0, i32 4
  %66 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i64 0, i32 2
  %67 = bitcast i64* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 24, i1 false)
  store i8* %62, i8** %66, align 8
  %68 = tail call i64 @strlen(i8* %62) #9
  %69 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %4, i64 0, i32 3
  store i64 %68, i64* %69, align 8
  %70 = call i32 @cr_png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* nonnull %4, i32 1) #8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %73, label %72

72:                                               ; preds = %60
  call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0)) #8
  br label %73

73:                                               ; preds = %72, %60, %49, %43, %13, %8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #8
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

declare i32 @cr_png_set_text_2(%struct.png_struct_def*, %struct.png_info_def*, %struct.png_text_struct*, i32) local_unnamed_addr #4

declare void @cr_png_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_zTXt(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %struct.png_text_struct, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 125
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %11 [
    i32 0, label %16
    i32 1, label %9
  ]

9:                                                ; preds = %3
  %10 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %168

11:                                               ; preds = %3
  %12 = add i32 %8, -1
  store i32 %12, i32* %7, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0)) #8
  br label %168

16:                                               ; preds = %3, %11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %18 = load i32, i32* %17, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

22:                                               ; preds = %16
  %23 = and i32 %18, 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = or i32 %18, 8
  store i32 %26, i32* %17, align 4
  br label %27

27:                                               ; preds = %22, %25
  %28 = zext i32 %2 to i64
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 129
  %30 = load i8*, i8** %29, align 8, !alias.scope !29
  %31 = icmp eq i8* %30, null
  br i1 %31, label %38, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  %34 = load i64, i64* %33, align 8, !alias.scope !29
  %35 = icmp ult i64 %34, %28
  br i1 %35, label %36, label %45

36:                                               ; preds = %32
  %37 = bitcast i8** %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #8, !alias.scope !29
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %30) #8
  br label %38

38:                                               ; preds = %36, %27
  %39 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %28) #8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %39, i8 0, i64 %28, i1 false) #8, !noalias !29
  store i8* %39, i8** %29, align 8, !alias.scope !29
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  store i64 %28, i64* %42, align 8, !alias.scope !29
  br label %45

43:                                               ; preds = %38
  %44 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)) #8
  br label %168

45:                                               ; preds = %41, %32
  %46 = phi i8* [ %30, %32 ], [ %39, %41 ]
  %47 = icmp eq %struct.png_struct_def* %0, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  tail call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %46, i64 %28) #8
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %46, i64 %28) #8
  br label %49

49:                                               ; preds = %45, %48
  %50 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %168

52:                                               ; preds = %49
  %53 = icmp eq i32 %2, 0
  br i1 %53, label %166, label %54

54:                                               ; preds = %52, %60
  %55 = phi i32 [ %61, %60 ], [ 0, %52 ]
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %46, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %54
  %61 = add i32 %55, 1
  %62 = icmp eq i32 %61, %2
  br i1 %62, label %63, label %54

63:                                               ; preds = %54, %60
  %64 = phi i32 [ %2, %60 ], [ %55, %54 ]
  %65 = add i32 %64, -1
  %66 = icmp ugt i32 %65, 78
  br i1 %66, label %166, label %67

67:                                               ; preds = %63
  %68 = add nuw nsw i32 %64, 3
  %69 = icmp ugt i32 %68, %2
  br i1 %69, label %166, label %70

70:                                               ; preds = %67
  %71 = add nuw nsw i32 %64, 1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %46, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %166

76:                                               ; preds = %70
  %77 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #8
  store i64 -1, i64* %5, align 8
  %78 = add nuw nsw i32 %64, 2
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 126
  %80 = load i64, i64* %79, align 8, !alias.scope !32
  switch i64 %80, label %83 [
    i64 0, label %81
    i64 -1, label %81
  ]

81:                                               ; preds = %76, %76
  %82 = zext i32 %68 to i64
  br label %86

83:                                               ; preds = %76
  %84 = zext i32 %68 to i64
  %85 = icmp ult i64 %80, %84
  br i1 %85, label %136, label %86

86:                                               ; preds = %83, %81
  %87 = phi i64 [ %82, %81 ], [ %84, %83 ]
  %88 = phi i64 [ -1, %81 ], [ %80, %83 ]
  %89 = sub i64 %88, %87
  %90 = icmp eq i64 %89, -1
  br i1 %90, label %92, label %91

91:                                               ; preds = %86
  store i64 %89, i64* %5, align 8, !noalias !32
  br label %92

92:                                               ; preds = %86, %91
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %94 = load i32, i32* %93, align 8, !alias.scope !32
  %95 = tail call fastcc i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 %94) #8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %160

97:                                               ; preds = %92
  %98 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %98) #8, !noalias !32
  %99 = sub i32 %2, %78
  store i32 %99, i32* %4, align 4, !noalias !32
  %100 = load i32, i32* %93, align 8, !alias.scope !32
  %101 = load i8*, i8** %29, align 8, !alias.scope !32
  %102 = zext i32 %78 to i64
  %103 = getelementptr inbounds i8, i8* %101, i64 %102
  %104 = call fastcc i32 @png_inflate(%struct.png_struct_def* %0, i32 %100, i8* %103, i32* nonnull %4, i8* null, i64* nonnull %5) #8
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %106, label %137

106:                                              ; preds = %97
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %108 = tail call i32 @Cr_z_inflateReset(%struct.z_stream_s* %107) #8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %135

110:                                              ; preds = %106
  %111 = load i64, i64* %5, align 8, !noalias !32
  %112 = add i64 %111, %102
  %113 = add i64 %112, 1
  %114 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %113) #8
  %115 = icmp eq i8* %114, null
  br i1 %115, label %134, label %116

116:                                              ; preds = %110
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %114, i8 0, i64 %113, i1 false) #8, !noalias !32
  %117 = load i32, i32* %93, align 8, !alias.scope !32
  %118 = load i8*, i8** %29, align 8, !alias.scope !32
  %119 = getelementptr inbounds i8, i8* %118, i64 %102
  %120 = getelementptr inbounds i8, i8* %114, i64 %102
  %121 = call fastcc i32 @png_inflate(%struct.png_struct_def* %0, i32 %117, i8* %119, i32* nonnull %4, i8* %120, i64* nonnull %5) #8
  %122 = icmp eq i32 %121, 1
  %123 = load i64, i64* %5, align 8
  %124 = icmp eq i64 %111, %123
  %125 = and i1 %122, %124
  br i1 %125, label %127, label %126

126:                                              ; preds = %116
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %114) #8
  br label %137

127:                                              ; preds = %116
  %128 = getelementptr inbounds i8, i8* %114, i64 %112
  store i8 0, i8* %128, align 1, !noalias !32
  %129 = load i8*, i8** %29, align 8, !alias.scope !32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %114, i8* align 1 %129, i64 %102, i1 false) #8
  store i8* %114, i8** %29, align 8, !alias.scope !32
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  store i64 %113, i64* %130, align 8, !alias.scope !32
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %129) #8
  %131 = load i32, i32* %4, align 4, !noalias !32
  %132 = icmp eq i32 %99, %131
  br i1 %132, label %139, label %133

133:                                              ; preds = %127
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #8
  br label %139

134:                                              ; preds = %110
  tail call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 -4) #8
  br label %137

135:                                              ; preds = %106
  tail call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 1) #8
  br label %137

136:                                              ; preds = %83
  tail call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 -4) #8
  br label %160

137:                                              ; preds = %97, %135, %134, %126
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  store i32 0, i32* %138, align 8, !alias.scope !32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #8, !noalias !32
  br label %160

139:                                              ; preds = %133, %127
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  store i32 0, i32* %140, align 8, !alias.scope !32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %98) #8, !noalias !32
  %141 = bitcast %struct.png_text_struct* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %141) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 -86, i64 56, i1 false)
  %142 = load i8*, i8** %29, align 8
  %143 = icmp eq i8* %142, null
  br i1 %143, label %158, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds i8, i8* %142, i64 %112
  store i8 0, i8* %145, align 1
  %146 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %6, i64 0, i32 0
  store i32 0, i32* %146, align 8
  %147 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %6, i64 0, i32 1
  store i8* %142, i8** %147, align 8
  %148 = zext i32 %64 to i64
  %149 = getelementptr inbounds i8, i8* %142, i64 %148
  %150 = getelementptr inbounds i8, i8* %149, i64 2
  %151 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %6, i64 0, i32 2
  store i8* %150, i8** %151, align 8
  %152 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %6, i64 0, i32 3
  store i64 %111, i64* %152, align 8
  %153 = getelementptr inbounds %struct.png_text_struct, %struct.png_text_struct* %6, i64 0, i32 4
  %154 = bitcast i64* %153 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false)
  %155 = call i32 @cr_png_set_text_2(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_text_struct* nonnull %6, i32 1) #8
  %156 = icmp eq i32 %155, 0
  %157 = select i1 %156, i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)
  br label %158

158:                                              ; preds = %144, %139
  %159 = phi i8* [ getelementptr inbounds ([32 x i8], [32 x i8]* @.str.23, i64 0, i64 0), %139 ], [ %157, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %141) #8
  br label %163

160:                                              ; preds = %92, %136, %137
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %162 = load i8*, i8** %161, align 8
  br label %163

163:                                              ; preds = %158, %160
  %164 = phi i8* [ %159, %158 ], [ %162, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #8
  %165 = icmp eq i8* %164, null
  br i1 %165, label %168, label %166

166:                                              ; preds = %52, %70, %67, %63, %163
  %167 = phi i8* [ %164, %163 ], [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0), %70 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i64 0, i64 0), %67 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), %63 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), %52 ]
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* nonnull %167) #8
  br label %168

168:                                              ; preds = %166, %163, %49, %43, %14, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_handle_unknown(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 110
  %6 = load i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)** %5, align 8
  %7 = icmp eq i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)* %6, null
  br i1 %7, label %26, label %8

8:                                                ; preds = %4
  %9 = tail call fastcc i32 @png_cache_unknown_chunk(%struct.png_struct_def* %0, i32 %2)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %58, label %11

11:                                               ; preds = %8
  %12 = load i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)** %5, align 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127
  %14 = tail call i32 %12(%struct.png_struct_def* %0, %struct.png_unknown_chunk_t* %13) #8
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.25, i64 0, i64 0)) #7
  unreachable

17:                                               ; preds = %11
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %19, label %58

19:                                               ; preds = %17
  %20 = icmp slt i32 %3, 2
  br i1 %20, label %21, label %43

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 111
  %23 = load i32, i32* %22, align 8
  %24 = icmp slt i32 %23, 2
  br i1 %24, label %25, label %45

25:                                               ; preds = %21
  tail call void @cr_png_chunk_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0)) #8
  tail call void @cr_png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.27, i64 0, i64 0)) #8
  br label %45

26:                                               ; preds = %4
  %27 = icmp eq i32 %3, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 111
  %30 = load i32, i32* %29, align 8
  br label %31

31:                                               ; preds = %28, %26
  %32 = phi i32 [ %30, %28 ], [ %3, %26 ]
  switch i32 %32, label %41 [
    i32 3, label %38
    i32 2, label %33
  ]

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 536870912
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %31, %33
  %39 = tail call fastcc i32 @png_cache_unknown_chunk(%struct.png_struct_def* %0, i32 %2)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %58, label %43

41:                                               ; preds = %31, %33
  %42 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %2)
  br label %43

43:                                               ; preds = %38, %19, %41
  %44 = phi i32 [ %32, %41 ], [ %3, %19 ], [ %32, %38 ]
  switch i32 %44, label %58 [
    i32 3, label %50
    i32 2, label %45
  ]

45:                                               ; preds = %21, %25, %43
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %47 = load i32, i32* %46, align 8
  %48 = and i32 %47, 536870912
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %58, label %50

50:                                               ; preds = %43, %45
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 125
  %52 = load i32, i32* %51, align 4
  switch i32 %52, label %54 [
    i32 2, label %53
    i32 1, label %58
    i32 0, label %56
  ]

53:                                               ; preds = %50
  store i32 1, i32* %51, align 4
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0)) #8
  br label %58

54:                                               ; preds = %50
  %55 = add i32 %52, -1
  store i32 %55, i32* %51, align 4
  br label %56

56:                                               ; preds = %50, %54
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127
  tail call void @cr_png_set_unknown_chunks(%struct.png_struct_def* %0, %struct.png_info_def* %1, %struct.png_unknown_chunk_t* %57, i32 1) #8
  br label %58

58:                                               ; preds = %38, %8, %17, %43, %45, %50, %53, %56
  %59 = phi i32 [ 1, %56 ], [ 0, %50 ], [ 0, %53 ], [ 0, %45 ], [ 0, %43 ], [ 0, %8 ], [ 1, %17 ], [ 0, %38 ]
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %58
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %61) #8
  br label %64

64:                                               ; preds = %58, %63
  store i8* null, i8** %60, align 8
  %65 = icmp eq i32 %59, 0
  br i1 %65, label %66, label %72

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, 536870912
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %66
  tail call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.28, i64 0, i64 0)) #7
  unreachable

72:                                               ; preds = %66, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_cache_unknown_chunk(%struct.png_struct_def* noalias, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %4) #8
  store i8* null, i8** %3, align 8
  br label %7

7:                                                ; preds = %2, %6
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 126
  %9 = load i64, i64* %8, align 8
  switch i64 %9, label %12 [
    i64 0, label %10
    i64 -1, label %10
  ]

10:                                               ; preds = %7, %7
  %11 = zext i32 %1 to i64
  br label %15

12:                                               ; preds = %7
  %13 = zext i32 %1 to i64
  %14 = icmp ult i64 %9, %13
  br i1 %14, label %40, label %15

15:                                               ; preds = %10, %12
  %16 = phi i64 [ %11, %10 ], [ %13, %12 ]
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %18 = load i32, i32* %17, align 8
  %19 = lshr i32 %18, 24
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 0, i64 0
  store i8 %20, i8* %21, align 8
  %22 = lshr i32 %18, 16
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 0, i64 1
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %18, 8
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 0, i64 2
  store i8 %26, i8* %27, align 2
  %28 = trunc i32 %18 to i8
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 0, i64 3
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 0, i64 4
  store i8 0, i8* %30, align 4
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 2
  store i64 %16, i64* %31, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 127, i32 3
  store i8 %34, i8* %35, align 8
  %36 = icmp eq i32 %1, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %15
  store i8* null, i8** %3, align 8
  br label %53

38:                                               ; preds = %15
  %39 = tail call noalias i8* @cr_png_malloc_warn(%struct.png_struct_def* %0, i64 %16) #8
  store i8* %39, i8** %3, align 8
  br label %40

40:                                               ; preds = %12, %38
  %41 = phi i8* [ null, %12 ], [ %39, %38 ]
  %42 = phi i64 [ %13, %12 ], [ %16, %38 ]
  %43 = icmp eq i8* %41, null
  %44 = icmp ne i32 %1, 0
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %40
  %47 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %1)
  tail call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.44, i64 0, i64 0)) #8
  br label %55

48:                                               ; preds = %40
  %49 = xor i1 %44, true
  %50 = icmp eq %struct.png_struct_def* %0, null
  %51 = or i1 %50, %49
  br i1 %51, label %53, label %52

52:                                               ; preds = %48
  tail call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* %41, i64 %42) #8
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %41, i64 %42) #8
  br label %53

53:                                               ; preds = %48, %37, %52
  %54 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  br label %55

55:                                               ; preds = %53, %46
  %56 = phi i32 [ 0, %46 ], [ 1, %53 ]
  ret i32 %56
}

declare void @cr_png_app_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #4

declare void @cr_png_set_unknown_chunks(%struct.png_struct_def*, %struct.png_info_def*, %struct.png_unknown_chunk_t*, i32) local_unnamed_addr #4

declare void @cr_png_free(%struct.png_struct_def*, i8*) local_unnamed_addr #4

declare void @cr_png_benign_error(%struct.png_struct_def*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_combine_row(%struct.png_struct_def* noalias, i8*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 68
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = icmp eq i8 %5, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i64 0, i64 0)) #7
  unreachable

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %18
  %23 = icmp ugt i8 %5, 7
  %24 = zext i8 %5 to i64
  br i1 %23, label %25, label %28

25:                                               ; preds = %22
  %26 = lshr i64 %24, 3
  %27 = mul nuw nsw i64 %26, %12
  br label %32

28:                                               ; preds = %22
  %29 = mul nuw nsw i64 %12, %24
  %30 = add nuw nsw i64 %29, 7
  %31 = lshr i64 %30, 3
  br label %32

32:                                               ; preds = %28, %25
  %33 = phi i64 [ %27, %25 ], [ %31, %28 ]
  %34 = icmp eq i64 %20, %33
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.32, i64 0, i64 0)) #7
  unreachable

36:                                               ; preds = %32, %18
  %37 = icmp eq i32 %11, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i64 0, i64 0)) #7
  unreachable

39:                                               ; preds = %36
  %40 = zext i8 %5 to i64
  %41 = mul nuw nsw i64 %12, %40
  %42 = trunc i64 %41 to i32
  %43 = and i32 %42, 7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %63, label %45

45:                                               ; preds = %39
  %46 = icmp ugt i8 %5, 7
  %47 = lshr i64 %40, 3
  %48 = mul nuw nsw i64 %47, %12
  %49 = add nuw nsw i64 %41, 7
  %50 = lshr i64 %49, 3
  %51 = select i1 %46, i64 %48, i64 %50
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %56, 65536
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %45
  %60 = shl i32 255, %43
  br label %63

61:                                               ; preds = %45
  %62 = lshr i32 255, %43
  br label %63

63:                                               ; preds = %39, %59, %61
  %64 = phi i8* [ %53, %59 ], [ %53, %61 ], [ null, %39 ]
  %65 = phi i8 [ %54, %59 ], [ %54, %61 ], [ 0, %39 ]
  %66 = phi i32 [ %60, %59 ], [ %62, %61 ], [ 0, %39 ]
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %68 = load i8, i8* %67, align 2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %618, label %70

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 2
  %74 = icmp ne i32 %73, 0
  %75 = icmp ult i8 %14, 6
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %618

77:                                               ; preds = %70
  switch i32 %2, label %618 [
    i32 0, label %78
    i32 1, label %80
  ]

78:                                               ; preds = %77
  %79 = and i32 %15, 1
  br label %83

80:                                               ; preds = %77
  %81 = and i32 %15, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %618, label %83

83:                                               ; preds = %78, %80
  %84 = phi i32 [ %79, %78 ], [ 1, %80 ]
  %85 = add nuw nsw i32 %15, 1
  %86 = lshr i32 %85, 1
  %87 = sub nsw i32 3, %86
  %88 = shl i32 %84, %87
  %89 = and i32 %88, 7
  %90 = icmp ugt i32 %11, %89
  br i1 %90, label %91, label %636

91:                                               ; preds = %83
  %92 = icmp ult i8 %5, 8
  br i1 %92, label %93, label %151

93:                                               ; preds = %91
  %94 = udiv i8 8, %5
  %95 = and i32 %72, 65536
  %96 = icmp eq i32 %95, 0
  %97 = icmp ne i32 %2, 0
  %98 = icmp eq i8 %5, 1
  %99 = icmp eq i8 %5, 2
  %100 = select i1 %99, i64 1, i64 2
  %101 = select i1 %98, i64 0, i64 %100
  br i1 %96, label %110, label %102

102:                                              ; preds = %93
  br i1 %97, label %103, label %107

103:                                              ; preds = %102
  %104 = lshr i32 %15, 1
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [2 x [3 x [3 x i32]]], [2 x [3 x [3 x i32]]]* @cr_png_combine_row.display_mask, i64 0, i64 0, i64 %101, i64 %105
  br label %118

107:                                              ; preds = %102
  %108 = zext i8 %14 to i64
  %109 = getelementptr inbounds [2 x [3 x [6 x i32]]], [2 x [3 x [6 x i32]]]* @cr_png_combine_row.row_mask, i64 0, i64 0, i64 %101, i64 %108
  br label %118

110:                                              ; preds = %93
  br i1 %97, label %111, label %115

111:                                              ; preds = %110
  %112 = lshr i32 %15, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [2 x [3 x [3 x i32]]], [2 x [3 x [3 x i32]]]* @cr_png_combine_row.display_mask, i64 0, i64 1, i64 %101, i64 %113
  br label %118

115:                                              ; preds = %110
  %116 = zext i8 %14 to i64
  %117 = getelementptr inbounds [2 x [3 x [6 x i32]]], [2 x [3 x [6 x i32]]]* @cr_png_combine_row.row_mask, i64 0, i64 1, i64 %101, i64 %116
  br label %118

118:                                              ; preds = %111, %115, %103, %107
  %119 = phi i32* [ %106, %103 ], [ %109, %107 ], [ %114, %111 ], [ %117, %115 ]
  %120 = load i32, i32* %119, align 4
  %121 = zext i8 %94 to i64
  br label %122

122:                                              ; preds = %147, %118
  %123 = phi i8* [ %9, %118 ], [ %150, %147 ]
  %124 = phi i64 [ %12, %118 ], [ %148, %147 ]
  %125 = phi i32 [ %120, %118 ], [ %129, %147 ]
  %126 = phi i8* [ %1, %118 ], [ %149, %147 ]
  %127 = lshr i32 %125, 8
  %128 = shl i32 %125, 24
  %129 = or i32 %127, %128
  %130 = trunc i32 %125 to i8
  switch i8 %130, label %131 [
    i8 0, label %145
    i8 -1, label %141
  ]

131:                                              ; preds = %122
  %132 = load i8, i8* %126, align 1
  %133 = zext i8 %132 to i32
  %134 = xor i32 %125, 255
  %135 = and i32 %134, %133
  %136 = load i8, i8* %123, align 1
  %137 = zext i8 %136 to i32
  %138 = and i32 %125, %137
  %139 = or i32 %138, %135
  %140 = trunc i32 %139 to i8
  br label %143

141:                                              ; preds = %122
  %142 = load i8, i8* %123, align 1
  br label %143

143:                                              ; preds = %141, %131
  %144 = phi i8 [ %140, %131 ], [ %142, %141 ]
  store i8 %144, i8* %126, align 1
  br label %145

145:                                              ; preds = %143, %122
  %146 = icmp ugt i64 %124, %121
  br i1 %146, label %147, label %625

147:                                              ; preds = %145
  %148 = sub i64 %124, %121
  %149 = getelementptr inbounds i8, i8* %126, i64 1
  %150 = getelementptr inbounds i8, i8* %123, i64 1
  br label %122

151:                                              ; preds = %91
  %152 = and i32 %6, 7
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %155, label %154

154:                                              ; preds = %151
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i64 0, i64 0)) #7
  unreachable

155:                                              ; preds = %151
  %156 = lshr i32 %6, 3
  %157 = zext i32 %156 to i64
  %158 = mul nuw nsw i64 %12, %157
  %159 = mul nuw nsw i32 %89, %156
  %160 = zext i32 %159 to i64
  %161 = sub nsw i64 %158, %160
  %162 = getelementptr inbounds i8, i8* %1, i64 %160
  %163 = getelementptr inbounds i8, i8* %9, i64 %160
  %164 = icmp eq i32 %2, 0
  br i1 %164, label %173, label %165

165:                                              ; preds = %155
  %166 = sub nsw i32 6, %15
  %167 = lshr i32 %166, 1
  %168 = shl i32 %156, %167
  %169 = zext i32 %168 to i64
  %170 = icmp ult i64 %161, %169
  %171 = trunc i64 %161 to i32
  %172 = select i1 %170, i32 %171, i32 %168
  br label %173

173:                                              ; preds = %165, %155
  %174 = phi i32 [ %156, %155 ], [ %172, %165 ]
  %175 = sub nsw i32 7, %15
  %176 = lshr i32 %175, 1
  %177 = shl i32 %156, %176
  switch i32 %174, label %234 [
    i32 1, label %190
    i32 2, label %188
    i32 3, label %178
  ]

178:                                              ; preds = %173
  %179 = load i8, i8* %163, align 1
  store i8 %179, i8* %162, align 1
  %180 = getelementptr inbounds i8, i8* %163, i64 1
  %181 = load i8, i8* %180, align 1
  %182 = getelementptr inbounds i8, i8* %162, i64 1
  store i8 %181, i8* %182, align 1
  %183 = getelementptr inbounds i8, i8* %163, i64 2
  %184 = load i8, i8* %183, align 1
  %185 = getelementptr inbounds i8, i8* %162, i64 2
  store i8 %184, i8* %185, align 1
  %186 = zext i32 %177 to i64
  %187 = icmp ugt i64 %161, %186
  br i1 %187, label %219, label %636

188:                                              ; preds = %173
  %189 = zext i32 %177 to i64
  br label %203

190:                                              ; preds = %173
  %191 = load i8, i8* %163, align 1
  store i8 %191, i8* %162, align 1
  %192 = zext i32 %177 to i64
  %193 = icmp ugt i64 %161, %192
  br i1 %193, label %194, label %636

194:                                              ; preds = %190, %194
  %195 = phi i8* [ %198, %194 ], [ %162, %190 ]
  %196 = phi i64 [ %200, %194 ], [ %161, %190 ]
  %197 = phi i8* [ %199, %194 ], [ %163, %190 ]
  %198 = getelementptr inbounds i8, i8* %195, i64 %192
  %199 = getelementptr inbounds i8, i8* %197, i64 %192
  %200 = sub i64 %196, %192
  %201 = load i8, i8* %199, align 1
  store i8 %201, i8* %198, align 1
  %202 = icmp ugt i64 %200, %192
  br i1 %202, label %194, label %636

203:                                              ; preds = %188, %212
  %204 = phi i8* [ %213, %212 ], [ %163, %188 ]
  %205 = phi i64 [ %215, %212 ], [ %161, %188 ]
  %206 = phi i8* [ %214, %212 ], [ %162, %188 ]
  %207 = load i8, i8* %204, align 1
  store i8 %207, i8* %206, align 1
  %208 = getelementptr inbounds i8, i8* %204, i64 1
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds i8, i8* %206, i64 1
  store i8 %209, i8* %210, align 1
  %211 = icmp ugt i64 %205, %189
  br i1 %211, label %212, label %636

212:                                              ; preds = %203
  %213 = getelementptr inbounds i8, i8* %204, i64 %189
  %214 = getelementptr inbounds i8, i8* %206, i64 %189
  %215 = sub i64 %205, %189
  %216 = icmp ugt i64 %215, 1
  br i1 %216, label %203, label %217

217:                                              ; preds = %212
  %218 = load i8, i8* %213, align 1
  store i8 %218, i8* %214, align 1
  br label %636

219:                                              ; preds = %178, %219
  %220 = phi i8* [ %224, %219 ], [ %162, %178 ]
  %221 = phi i64 [ %225, %219 ], [ %161, %178 ]
  %222 = phi i8* [ %223, %219 ], [ %163, %178 ]
  %223 = getelementptr inbounds i8, i8* %222, i64 %186
  %224 = getelementptr inbounds i8, i8* %220, i64 %186
  %225 = sub i64 %221, %186
  %226 = load i8, i8* %223, align 1
  store i8 %226, i8* %224, align 1
  %227 = getelementptr inbounds i8, i8* %223, i64 1
  %228 = load i8, i8* %227, align 1
  %229 = getelementptr inbounds i8, i8* %224, i64 1
  store i8 %228, i8* %229, align 1
  %230 = getelementptr inbounds i8, i8* %223, i64 2
  %231 = load i8, i8* %230, align 1
  %232 = getelementptr inbounds i8, i8* %224, i64 2
  store i8 %231, i8* %232, align 1
  %233 = icmp ugt i64 %225, %186
  br i1 %233, label %219, label %636

234:                                              ; preds = %173
  %235 = icmp ult i32 %174, 16
  br i1 %235, label %236, label %600

236:                                              ; preds = %234
  %237 = ptrtoint i8* %162 to i64
  %238 = and i64 %237, 1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %600

240:                                              ; preds = %236
  %241 = ptrtoint i8* %163 to i64
  %242 = and i64 %241, 1
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %600

244:                                              ; preds = %240
  %245 = zext i32 %174 to i64
  %246 = and i64 %245, 1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %600

248:                                              ; preds = %244
  %249 = zext i32 %177 to i64
  %250 = and i64 %249, 1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %252, label %600

252:                                              ; preds = %248
  %253 = or i64 %241, %249
  %254 = or i64 %253, %237
  %255 = or i64 %254, %245
  %256 = and i64 %255, 3
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %429

258:                                              ; preds = %252
  %259 = bitcast i8* %162 to i32*
  %260 = bitcast i8* %163 to i32*
  %261 = sub i32 %177, %174
  %262 = lshr i32 %261, 2
  %263 = zext i32 %262 to i64
  br label %264

264:                                              ; preds = %279, %258
  %265 = phi i64 [ %161, %258 ], [ %282, %279 ]
  %266 = phi i32* [ %259, %258 ], [ %280, %279 ]
  %267 = phi i32* [ %260, %258 ], [ %281, %279 ]
  br label %268

268:                                              ; preds = %268, %264
  %269 = phi i32* [ %266, %264 ], [ %274, %268 ]
  %270 = phi i32* [ %267, %264 ], [ %272, %268 ]
  %271 = phi i64 [ %245, %264 ], [ %275, %268 ]
  %272 = getelementptr inbounds i32, i32* %270, i64 1
  %273 = load i32, i32* %270, align 4
  %274 = getelementptr inbounds i32, i32* %269, i64 1
  store i32 %273, i32* %269, align 4
  %275 = add i64 %271, -4
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %268

277:                                              ; preds = %268
  %278 = icmp ugt i64 %265, %249
  br i1 %278, label %279, label %636

279:                                              ; preds = %277
  %280 = getelementptr inbounds i32, i32* %274, i64 %263
  %281 = getelementptr inbounds i32, i32* %272, i64 %263
  %282 = sub i64 %265, %249
  %283 = icmp ult i64 %282, %245
  br i1 %283, label %284, label %264

284:                                              ; preds = %279
  %285 = bitcast i32* %281 to i8*
  %286 = bitcast i32* %280 to i8*
  %287 = icmp ult i64 %282, 32
  br i1 %287, label %376, label %288

288:                                              ; preds = %284
  %289 = getelementptr i8, i8* %286, i64 %282
  %290 = getelementptr i8, i8* %285, i64 %282
  %291 = icmp ugt i8* %290, %286
  %292 = icmp ugt i8* %289, %285
  %293 = and i1 %291, %292
  br i1 %293, label %376, label %294

294:                                              ; preds = %288
  %295 = and i64 %282, -32
  %296 = getelementptr i8, i8* %285, i64 %295
  %297 = sub i64 %282, %295
  %298 = getelementptr i8, i8* %286, i64 %295
  %299 = add i64 %295, -32
  %300 = lshr exact i64 %299, 5
  %301 = add nuw nsw i64 %300, 1
  %302 = and i64 %301, 3
  %303 = icmp ult i64 %299, 96
  br i1 %303, label %355, label %304

304:                                              ; preds = %294
  %305 = sub nsw i64 %301, %302
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %352, %306 ]
  %308 = phi i64 [ %305, %304 ], [ %353, %306 ]
  %309 = getelementptr i8, i8* %285, i64 %307
  %310 = getelementptr i8, i8* %286, i64 %307
  %311 = bitcast i8* %309 to <16 x i8>*
  %312 = load <16 x i8>, <16 x i8>* %311, align 1, !alias.scope !35
  %313 = getelementptr i8, i8* %309, i64 16
  %314 = bitcast i8* %313 to <16 x i8>*
  %315 = load <16 x i8>, <16 x i8>* %314, align 1, !alias.scope !35
  %316 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %312, <16 x i8>* %316, align 1, !alias.scope !38, !noalias !35
  %317 = getelementptr i8, i8* %310, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %315, <16 x i8>* %318, align 1, !alias.scope !38, !noalias !35
  %319 = or i64 %307, 32
  %320 = getelementptr i8, i8* %285, i64 %319
  %321 = getelementptr i8, i8* %286, i64 %319
  %322 = bitcast i8* %320 to <16 x i8>*
  %323 = load <16 x i8>, <16 x i8>* %322, align 1, !alias.scope !35
  %324 = getelementptr i8, i8* %320, i64 16
  %325 = bitcast i8* %324 to <16 x i8>*
  %326 = load <16 x i8>, <16 x i8>* %325, align 1, !alias.scope !35
  %327 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %323, <16 x i8>* %327, align 1, !alias.scope !38, !noalias !35
  %328 = getelementptr i8, i8* %321, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  store <16 x i8> %326, <16 x i8>* %329, align 1, !alias.scope !38, !noalias !35
  %330 = or i64 %307, 64
  %331 = getelementptr i8, i8* %285, i64 %330
  %332 = getelementptr i8, i8* %286, i64 %330
  %333 = bitcast i8* %331 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !35
  %335 = getelementptr i8, i8* %331, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !35
  %338 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %338, align 1, !alias.scope !38, !noalias !35
  %339 = getelementptr i8, i8* %332, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %340, align 1, !alias.scope !38, !noalias !35
  %341 = or i64 %307, 96
  %342 = getelementptr i8, i8* %285, i64 %341
  %343 = getelementptr i8, i8* %286, i64 %341
  %344 = bitcast i8* %342 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !35
  %346 = getelementptr i8, i8* %342, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !35
  %349 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !38, !noalias !35
  %350 = getelementptr i8, i8* %343, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1, !alias.scope !38, !noalias !35
  %352 = add i64 %307, 128
  %353 = add i64 %308, -4
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %306, !llvm.loop !40

355:                                              ; preds = %306, %294
  %356 = phi i64 [ 0, %294 ], [ %352, %306 ]
  %357 = icmp eq i64 %302, 0
  br i1 %357, label %374, label %358

358:                                              ; preds = %355, %358
  %359 = phi i64 [ %371, %358 ], [ %356, %355 ]
  %360 = phi i64 [ %372, %358 ], [ %302, %355 ]
  %361 = getelementptr i8, i8* %285, i64 %359
  %362 = getelementptr i8, i8* %286, i64 %359
  %363 = bitcast i8* %361 to <16 x i8>*
  %364 = load <16 x i8>, <16 x i8>* %363, align 1, !alias.scope !35
  %365 = getelementptr i8, i8* %361, i64 16
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1, !alias.scope !35
  %368 = bitcast i8* %362 to <16 x i8>*
  store <16 x i8> %364, <16 x i8>* %368, align 1, !alias.scope !38, !noalias !35
  %369 = getelementptr i8, i8* %362, i64 16
  %370 = bitcast i8* %369 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %370, align 1, !alias.scope !38, !noalias !35
  %371 = add i64 %359, 32
  %372 = add i64 %360, -1
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %358, !llvm.loop !42

374:                                              ; preds = %358, %355
  %375 = icmp eq i64 %282, %295
  br i1 %375, label %636, label %376

376:                                              ; preds = %374, %288, %284
  %377 = phi i8* [ %285, %288 ], [ %285, %284 ], [ %296, %374 ]
  %378 = phi i64 [ %282, %288 ], [ %282, %284 ], [ %297, %374 ]
  %379 = phi i8* [ %286, %288 ], [ %286, %284 ], [ %298, %374 ]
  %380 = add i64 %378, -1
  %381 = and i64 %378, 7
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %394, label %383

383:                                              ; preds = %376, %383
  %384 = phi i8* [ %388, %383 ], [ %377, %376 ]
  %385 = phi i64 [ %391, %383 ], [ %378, %376 ]
  %386 = phi i8* [ %390, %383 ], [ %379, %376 ]
  %387 = phi i64 [ %392, %383 ], [ %381, %376 ]
  %388 = getelementptr inbounds i8, i8* %384, i64 1
  %389 = load i8, i8* %384, align 1
  %390 = getelementptr inbounds i8, i8* %386, i64 1
  store i8 %389, i8* %386, align 1
  %391 = add i64 %385, -1
  %392 = add i64 %387, -1
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %394, label %383, !llvm.loop !44

394:                                              ; preds = %383, %376
  %395 = phi i8* [ %377, %376 ], [ %388, %383 ]
  %396 = phi i64 [ %378, %376 ], [ %391, %383 ]
  %397 = phi i8* [ %379, %376 ], [ %390, %383 ]
  %398 = icmp ult i64 %380, 7
  br i1 %398, label %636, label %399

399:                                              ; preds = %394, %399
  %400 = phi i8* [ %424, %399 ], [ %395, %394 ]
  %401 = phi i64 [ %427, %399 ], [ %396, %394 ]
  %402 = phi i8* [ %426, %399 ], [ %397, %394 ]
  %403 = getelementptr inbounds i8, i8* %400, i64 1
  %404 = load i8, i8* %400, align 1
  %405 = getelementptr inbounds i8, i8* %402, i64 1
  store i8 %404, i8* %402, align 1
  %406 = getelementptr inbounds i8, i8* %400, i64 2
  %407 = load i8, i8* %403, align 1
  %408 = getelementptr inbounds i8, i8* %402, i64 2
  store i8 %407, i8* %405, align 1
  %409 = getelementptr inbounds i8, i8* %400, i64 3
  %410 = load i8, i8* %406, align 1
  %411 = getelementptr inbounds i8, i8* %402, i64 3
  store i8 %410, i8* %408, align 1
  %412 = getelementptr inbounds i8, i8* %400, i64 4
  %413 = load i8, i8* %409, align 1
  %414 = getelementptr inbounds i8, i8* %402, i64 4
  store i8 %413, i8* %411, align 1
  %415 = getelementptr inbounds i8, i8* %400, i64 5
  %416 = load i8, i8* %412, align 1
  %417 = getelementptr inbounds i8, i8* %402, i64 5
  store i8 %416, i8* %414, align 1
  %418 = getelementptr inbounds i8, i8* %400, i64 6
  %419 = load i8, i8* %415, align 1
  %420 = getelementptr inbounds i8, i8* %402, i64 6
  store i8 %419, i8* %417, align 1
  %421 = getelementptr inbounds i8, i8* %400, i64 7
  %422 = load i8, i8* %418, align 1
  %423 = getelementptr inbounds i8, i8* %402, i64 7
  store i8 %422, i8* %420, align 1
  %424 = getelementptr inbounds i8, i8* %400, i64 8
  %425 = load i8, i8* %421, align 1
  %426 = getelementptr inbounds i8, i8* %402, i64 8
  store i8 %425, i8* %423, align 1
  %427 = add i64 %401, -8
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %636, label %399, !llvm.loop !45

429:                                              ; preds = %252
  %430 = bitcast i8* %162 to i16*
  %431 = bitcast i8* %163 to i16*
  %432 = sub i32 %177, %174
  %433 = lshr i32 %432, 1
  %434 = zext i32 %433 to i64
  br label %435

435:                                              ; preds = %450, %429
  %436 = phi i64 [ %161, %429 ], [ %453, %450 ]
  %437 = phi i16* [ %430, %429 ], [ %451, %450 ]
  %438 = phi i16* [ %431, %429 ], [ %452, %450 ]
  br label %439

439:                                              ; preds = %439, %435
  %440 = phi i16* [ %437, %435 ], [ %445, %439 ]
  %441 = phi i16* [ %438, %435 ], [ %443, %439 ]
  %442 = phi i64 [ %245, %435 ], [ %446, %439 ]
  %443 = getelementptr inbounds i16, i16* %441, i64 1
  %444 = load i16, i16* %441, align 2
  %445 = getelementptr inbounds i16, i16* %440, i64 1
  store i16 %444, i16* %440, align 2
  %446 = add i64 %442, -2
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %439

448:                                              ; preds = %439
  %449 = icmp ugt i64 %436, %249
  br i1 %449, label %450, label %636

450:                                              ; preds = %448
  %451 = getelementptr inbounds i16, i16* %445, i64 %434
  %452 = getelementptr inbounds i16, i16* %443, i64 %434
  %453 = sub i64 %436, %249
  %454 = icmp ult i64 %453, %245
  br i1 %454, label %455, label %435

455:                                              ; preds = %450
  %456 = bitcast i16* %452 to i8*
  %457 = bitcast i16* %451 to i8*
  %458 = icmp ult i64 %453, 32
  br i1 %458, label %547, label %459

459:                                              ; preds = %455
  %460 = getelementptr i8, i8* %457, i64 %453
  %461 = getelementptr i8, i8* %456, i64 %453
  %462 = icmp ugt i8* %461, %457
  %463 = icmp ugt i8* %460, %456
  %464 = and i1 %462, %463
  br i1 %464, label %547, label %465

465:                                              ; preds = %459
  %466 = and i64 %453, -32
  %467 = getelementptr i8, i8* %456, i64 %466
  %468 = sub i64 %453, %466
  %469 = getelementptr i8, i8* %457, i64 %466
  %470 = add i64 %466, -32
  %471 = lshr exact i64 %470, 5
  %472 = add nuw nsw i64 %471, 1
  %473 = and i64 %472, 3
  %474 = icmp ult i64 %470, 96
  br i1 %474, label %526, label %475

475:                                              ; preds = %465
  %476 = sub nsw i64 %472, %473
  br label %477

477:                                              ; preds = %477, %475
  %478 = phi i64 [ 0, %475 ], [ %523, %477 ]
  %479 = phi i64 [ %476, %475 ], [ %524, %477 ]
  %480 = getelementptr i8, i8* %456, i64 %478
  %481 = getelementptr i8, i8* %457, i64 %478
  %482 = bitcast i8* %480 to <16 x i8>*
  %483 = load <16 x i8>, <16 x i8>* %482, align 1, !alias.scope !46
  %484 = getelementptr i8, i8* %480, i64 16
  %485 = bitcast i8* %484 to <16 x i8>*
  %486 = load <16 x i8>, <16 x i8>* %485, align 1, !alias.scope !46
  %487 = bitcast i8* %481 to <16 x i8>*
  store <16 x i8> %483, <16 x i8>* %487, align 1, !alias.scope !49, !noalias !46
  %488 = getelementptr i8, i8* %481, i64 16
  %489 = bitcast i8* %488 to <16 x i8>*
  store <16 x i8> %486, <16 x i8>* %489, align 1, !alias.scope !49, !noalias !46
  %490 = or i64 %478, 32
  %491 = getelementptr i8, i8* %456, i64 %490
  %492 = getelementptr i8, i8* %457, i64 %490
  %493 = bitcast i8* %491 to <16 x i8>*
  %494 = load <16 x i8>, <16 x i8>* %493, align 1, !alias.scope !46
  %495 = getelementptr i8, i8* %491, i64 16
  %496 = bitcast i8* %495 to <16 x i8>*
  %497 = load <16 x i8>, <16 x i8>* %496, align 1, !alias.scope !46
  %498 = bitcast i8* %492 to <16 x i8>*
  store <16 x i8> %494, <16 x i8>* %498, align 1, !alias.scope !49, !noalias !46
  %499 = getelementptr i8, i8* %492, i64 16
  %500 = bitcast i8* %499 to <16 x i8>*
  store <16 x i8> %497, <16 x i8>* %500, align 1, !alias.scope !49, !noalias !46
  %501 = or i64 %478, 64
  %502 = getelementptr i8, i8* %456, i64 %501
  %503 = getelementptr i8, i8* %457, i64 %501
  %504 = bitcast i8* %502 to <16 x i8>*
  %505 = load <16 x i8>, <16 x i8>* %504, align 1, !alias.scope !46
  %506 = getelementptr i8, i8* %502, i64 16
  %507 = bitcast i8* %506 to <16 x i8>*
  %508 = load <16 x i8>, <16 x i8>* %507, align 1, !alias.scope !46
  %509 = bitcast i8* %503 to <16 x i8>*
  store <16 x i8> %505, <16 x i8>* %509, align 1, !alias.scope !49, !noalias !46
  %510 = getelementptr i8, i8* %503, i64 16
  %511 = bitcast i8* %510 to <16 x i8>*
  store <16 x i8> %508, <16 x i8>* %511, align 1, !alias.scope !49, !noalias !46
  %512 = or i64 %478, 96
  %513 = getelementptr i8, i8* %456, i64 %512
  %514 = getelementptr i8, i8* %457, i64 %512
  %515 = bitcast i8* %513 to <16 x i8>*
  %516 = load <16 x i8>, <16 x i8>* %515, align 1, !alias.scope !46
  %517 = getelementptr i8, i8* %513, i64 16
  %518 = bitcast i8* %517 to <16 x i8>*
  %519 = load <16 x i8>, <16 x i8>* %518, align 1, !alias.scope !46
  %520 = bitcast i8* %514 to <16 x i8>*
  store <16 x i8> %516, <16 x i8>* %520, align 1, !alias.scope !49, !noalias !46
  %521 = getelementptr i8, i8* %514, i64 16
  %522 = bitcast i8* %521 to <16 x i8>*
  store <16 x i8> %519, <16 x i8>* %522, align 1, !alias.scope !49, !noalias !46
  %523 = add i64 %478, 128
  %524 = add i64 %479, -4
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %477, !llvm.loop !51

526:                                              ; preds = %477, %465
  %527 = phi i64 [ 0, %465 ], [ %523, %477 ]
  %528 = icmp eq i64 %473, 0
  br i1 %528, label %545, label %529

529:                                              ; preds = %526, %529
  %530 = phi i64 [ %542, %529 ], [ %527, %526 ]
  %531 = phi i64 [ %543, %529 ], [ %473, %526 ]
  %532 = getelementptr i8, i8* %456, i64 %530
  %533 = getelementptr i8, i8* %457, i64 %530
  %534 = bitcast i8* %532 to <16 x i8>*
  %535 = load <16 x i8>, <16 x i8>* %534, align 1, !alias.scope !46
  %536 = getelementptr i8, i8* %532, i64 16
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !46
  %539 = bitcast i8* %533 to <16 x i8>*
  store <16 x i8> %535, <16 x i8>* %539, align 1, !alias.scope !49, !noalias !46
  %540 = getelementptr i8, i8* %533, i64 16
  %541 = bitcast i8* %540 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %541, align 1, !alias.scope !49, !noalias !46
  %542 = add i64 %530, 32
  %543 = add i64 %531, -1
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %529, !llvm.loop !52

545:                                              ; preds = %529, %526
  %546 = icmp eq i64 %453, %466
  br i1 %546, label %636, label %547

547:                                              ; preds = %545, %459, %455
  %548 = phi i8* [ %456, %459 ], [ %456, %455 ], [ %467, %545 ]
  %549 = phi i64 [ %453, %459 ], [ %453, %455 ], [ %468, %545 ]
  %550 = phi i8* [ %457, %459 ], [ %457, %455 ], [ %469, %545 ]
  %551 = add i64 %549, -1
  %552 = and i64 %549, 7
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %565, label %554

554:                                              ; preds = %547, %554
  %555 = phi i8* [ %559, %554 ], [ %548, %547 ]
  %556 = phi i64 [ %562, %554 ], [ %549, %547 ]
  %557 = phi i8* [ %561, %554 ], [ %550, %547 ]
  %558 = phi i64 [ %563, %554 ], [ %552, %547 ]
  %559 = getelementptr inbounds i8, i8* %555, i64 1
  %560 = load i8, i8* %555, align 1
  %561 = getelementptr inbounds i8, i8* %557, i64 1
  store i8 %560, i8* %557, align 1
  %562 = add i64 %556, -1
  %563 = add i64 %558, -1
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %554, !llvm.loop !53

565:                                              ; preds = %554, %547
  %566 = phi i8* [ %548, %547 ], [ %559, %554 ]
  %567 = phi i64 [ %549, %547 ], [ %562, %554 ]
  %568 = phi i8* [ %550, %547 ], [ %561, %554 ]
  %569 = icmp ult i64 %551, 7
  br i1 %569, label %636, label %570

570:                                              ; preds = %565, %570
  %571 = phi i8* [ %595, %570 ], [ %566, %565 ]
  %572 = phi i64 [ %598, %570 ], [ %567, %565 ]
  %573 = phi i8* [ %597, %570 ], [ %568, %565 ]
  %574 = getelementptr inbounds i8, i8* %571, i64 1
  %575 = load i8, i8* %571, align 1
  %576 = getelementptr inbounds i8, i8* %573, i64 1
  store i8 %575, i8* %573, align 1
  %577 = getelementptr inbounds i8, i8* %571, i64 2
  %578 = load i8, i8* %574, align 1
  %579 = getelementptr inbounds i8, i8* %573, i64 2
  store i8 %578, i8* %576, align 1
  %580 = getelementptr inbounds i8, i8* %571, i64 3
  %581 = load i8, i8* %577, align 1
  %582 = getelementptr inbounds i8, i8* %573, i64 3
  store i8 %581, i8* %579, align 1
  %583 = getelementptr inbounds i8, i8* %571, i64 4
  %584 = load i8, i8* %580, align 1
  %585 = getelementptr inbounds i8, i8* %573, i64 4
  store i8 %584, i8* %582, align 1
  %586 = getelementptr inbounds i8, i8* %571, i64 5
  %587 = load i8, i8* %583, align 1
  %588 = getelementptr inbounds i8, i8* %573, i64 5
  store i8 %587, i8* %585, align 1
  %589 = getelementptr inbounds i8, i8* %571, i64 6
  %590 = load i8, i8* %586, align 1
  %591 = getelementptr inbounds i8, i8* %573, i64 6
  store i8 %590, i8* %588, align 1
  %592 = getelementptr inbounds i8, i8* %571, i64 7
  %593 = load i8, i8* %589, align 1
  %594 = getelementptr inbounds i8, i8* %573, i64 7
  store i8 %593, i8* %591, align 1
  %595 = getelementptr inbounds i8, i8* %571, i64 8
  %596 = load i8, i8* %592, align 1
  %597 = getelementptr inbounds i8, i8* %573, i64 8
  store i8 %596, i8* %594, align 1
  %598 = add i64 %572, -8
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %636, label %570, !llvm.loop !54

600:                                              ; preds = %248, %244, %240, %236, %234
  %601 = zext i32 %174 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %162, i8* align 1 %163, i64 %601, i1 false)
  %602 = zext i32 %177 to i64
  %603 = icmp ugt i64 %161, %602
  br i1 %603, label %604, label %636

604:                                              ; preds = %600, %604
  %605 = phi i64 [ %616, %604 ], [ %601, %600 ]
  %606 = phi i8* [ %611, %604 ], [ %162, %600 ]
  %607 = phi i32 [ %615, %604 ], [ %174, %600 ]
  %608 = phi i64 [ %612, %604 ], [ %161, %600 ]
  %609 = phi i8* [ %610, %604 ], [ %163, %600 ]
  %610 = getelementptr inbounds i8, i8* %609, i64 %602
  %611 = getelementptr inbounds i8, i8* %606, i64 %602
  %612 = sub i64 %608, %602
  %613 = icmp ult i64 %612, %605
  %614 = trunc i64 %612 to i32
  %615 = select i1 %613, i32 %614, i32 %607
  %616 = zext i32 %615 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %611, i8* align 1 %610, i64 %616, i1 false)
  %617 = icmp ugt i64 %612, %602
  br i1 %617, label %604, label %636

618:                                              ; preds = %77, %80, %63, %70
  %619 = icmp ugt i8 %5, 7
  %620 = lshr i64 %40, 3
  %621 = mul nuw nsw i64 %620, %12
  %622 = add nuw nsw i64 %41, 7
  %623 = lshr i64 %622, 3
  %624 = select i1 %619, i64 %621, i64 %623
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %9, i64 %624, i1 false)
  br label %625

625:                                              ; preds = %145, %618
  %626 = icmp eq i8* %64, null
  br i1 %626, label %636, label %627

627:                                              ; preds = %625
  %628 = zext i8 %65 to i32
  %629 = and i32 %66, %628
  %630 = load i8, i8* %64, align 1
  %631 = zext i8 %630 to i32
  %632 = xor i32 %66, 255
  %633 = and i32 %632, %631
  %634 = or i32 %633, %629
  %635 = trunc i32 %634 to i8
  store i8 %635, i8* %64, align 1
  br label %636

636:                                              ; preds = %219, %203, %194, %604, %448, %565, %570, %277, %394, %399, %545, %374, %178, %190, %600, %627, %625, %217, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_do_read_interlace(%struct.png_row_info_struct*, i8*, i32, i32) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = icmp ne i8* %1, null
  %7 = icmp ne %struct.png_row_info_struct* %0, null
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %271

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [7 x i32], [7 x i32]* @cr_png_do_read_interlace.png_pass_inc, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %14, %11
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %17 = load i8, i8* %16, align 1
  switch i8 %17, label %220 [
    i8 1, label %18
    i8 2, label %84
    i8 4, label %153
  ]

18:                                               ; preds = %9
  %19 = add i32 %11, -1
  %20 = lshr i32 %19, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %1, i64 %21
  %23 = add i32 %15, -1
  %24 = lshr i32 %23, 3
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %1, i64 %25
  %27 = and i32 %3, 65536
  %28 = icmp eq i32 %27, 0
  %29 = add i32 %11, 7
  %30 = and i32 %29, 7
  br i1 %28, label %34, label %31

31:                                               ; preds = %18
  %32 = add i32 %15, 7
  %33 = and i32 %32, 7
  br label %39

34:                                               ; preds = %18
  %35 = xor i32 %30, 7
  %36 = add i32 %15, 7
  %37 = and i32 %36, 7
  %38 = xor i32 %37, 7
  br label %39

39:                                               ; preds = %34, %31
  %40 = phi i32 [ %30, %31 ], [ %35, %34 ]
  %41 = phi i32 [ %33, %31 ], [ %38, %34 ]
  %42 = phi i32 [ 7, %31 ], [ 0, %34 ]
  %43 = phi i32 [ 0, %31 ], [ 7, %34 ]
  %44 = phi i32 [ -1, %31 ], [ 1, %34 ]
  %45 = icmp eq i32 %11, 0
  br i1 %45, label %254, label %46

46:                                               ; preds = %39, %75
  %47 = phi i8* [ %81, %75 ], [ %22, %39 ]
  %48 = phi i8* [ %72, %75 ], [ %26, %39 ]
  %49 = phi i32 [ %82, %75 ], [ 0, %39 ]
  %50 = phi i32 [ %71, %75 ], [ %41, %39 ]
  %51 = phi i32 [ %80, %75 ], [ %40, %39 ]
  %52 = load i8, i8* %47, align 1
  %53 = zext i8 %52 to i32
  %54 = lshr i32 %53, %51
  %55 = and i32 %54, 1
  br label %56

56:                                               ; preds = %46, %56
  %57 = phi i8* [ %72, %56 ], [ %48, %46 ]
  %58 = phi i32 [ %73, %56 ], [ 0, %46 ]
  %59 = phi i32 [ %71, %56 ], [ %50, %46 ]
  %60 = load i8, i8* %57, align 1
  %61 = zext i8 %60 to i32
  %62 = sub i32 7, %59
  %63 = lshr i32 32639, %62
  %64 = and i32 %63, %61
  %65 = shl i32 %55, %59
  %66 = or i32 %64, %65
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %57, align 1
  %68 = icmp eq i32 %59, %43
  %69 = getelementptr inbounds i8, i8* %57, i64 -1
  %70 = add nsw i32 %59, %44
  %71 = select i1 %68, i32 %42, i32 %70
  %72 = select i1 %68, i8* %69, i8* %57
  %73 = add nuw nsw i32 %58, 1
  %74 = icmp slt i32 %73, %14
  br i1 %74, label %56, label %75

75:                                               ; preds = %56
  %76 = load i32, i32* %10, align 8
  %77 = icmp eq i32 %51, %43
  %78 = getelementptr inbounds i8, i8* %47, i64 -1
  %79 = add nsw i32 %51, %44
  %80 = select i1 %77, i32 %42, i32 %79
  %81 = select i1 %77, i8* %78, i8* %47
  %82 = add nuw i32 %49, 1
  %83 = icmp ult i32 %82, %76
  br i1 %83, label %46, label %254

84:                                               ; preds = %9
  %85 = add i32 %11, -1
  %86 = lshr i32 %85, 2
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = add i32 %15, -1
  %90 = lshr i32 %89, 2
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %1, i64 %91
  %93 = and i32 %3, 65536
  %94 = icmp eq i32 %93, 0
  %95 = shl i32 %11, 1
  %96 = add i32 %95, 6
  %97 = and i32 %96, 6
  br i1 %94, label %102, label %98

98:                                               ; preds = %84
  %99 = shl i32 %15, 1
  %100 = add i32 %99, 6
  %101 = and i32 %100, 6
  br label %108

102:                                              ; preds = %84
  %103 = xor i32 %97, 6
  %104 = shl i32 %15, 1
  %105 = add i32 %104, 6
  %106 = and i32 %105, 6
  %107 = xor i32 %106, 6
  br label %108

108:                                              ; preds = %102, %98
  %109 = phi i32 [ %97, %98 ], [ %103, %102 ]
  %110 = phi i32 [ %101, %98 ], [ %107, %102 ]
  %111 = phi i32 [ 6, %98 ], [ 0, %102 ]
  %112 = phi i32 [ 0, %98 ], [ 6, %102 ]
  %113 = phi i32 [ -2, %98 ], [ 2, %102 ]
  %114 = icmp eq i32 %11, 0
  br i1 %114, label %254, label %115

115:                                              ; preds = %108, %144
  %116 = phi i32 [ %151, %144 ], [ 0, %108 ]
  %117 = phi i32 [ %141, %144 ], [ %110, %108 ]
  %118 = phi i32 [ %150, %144 ], [ %109, %108 ]
  %119 = phi i8* [ %140, %144 ], [ %92, %108 ]
  %120 = phi i8* [ %149, %144 ], [ %88, %108 ]
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = lshr i32 %122, %118
  %124 = and i32 %123, 3
  br label %125

125:                                              ; preds = %115, %125
  %126 = phi i32 [ %142, %125 ], [ 0, %115 ]
  %127 = phi i32 [ %141, %125 ], [ %117, %115 ]
  %128 = phi i8* [ %140, %125 ], [ %119, %115 ]
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = sub i32 6, %127
  %132 = lshr i32 16191, %131
  %133 = and i32 %132, %130
  %134 = shl i32 %124, %127
  %135 = or i32 %133, %134
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %128, align 1
  %137 = icmp eq i32 %127, %112
  %138 = getelementptr inbounds i8, i8* %128, i64 -1
  %139 = add nsw i32 %127, %113
  %140 = select i1 %137, i8* %138, i8* %128
  %141 = select i1 %137, i32 %111, i32 %139
  %142 = add nuw nsw i32 %126, 1
  %143 = icmp slt i32 %142, %14
  br i1 %143, label %125, label %144

144:                                              ; preds = %125
  %145 = load i32, i32* %10, align 8
  %146 = icmp eq i32 %118, %112
  %147 = getelementptr inbounds i8, i8* %120, i64 -1
  %148 = add nsw i32 %118, %113
  %149 = select i1 %146, i8* %147, i8* %120
  %150 = select i1 %146, i32 %111, i32 %148
  %151 = add nuw i32 %116, 1
  %152 = icmp ult i32 %151, %145
  br i1 %152, label %115, label %254

153:                                              ; preds = %9
  %154 = add i32 %11, -1
  %155 = lshr i32 %154, 1
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %1, i64 %156
  %158 = add i32 %15, -1
  %159 = lshr i32 %158, 1
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %1, i64 %160
  %162 = and i32 %3, 65536
  %163 = icmp eq i32 %162, 0
  %164 = and i32 %11, 1
  br i1 %163, label %170, label %165

165:                                              ; preds = %153
  %166 = xor i32 %164, 1
  %167 = shl i32 %15, 2
  %168 = and i32 %167, 4
  %169 = xor i32 %168, 4
  br label %173

170:                                              ; preds = %153
  %171 = shl i32 %15, 2
  %172 = and i32 %171, 4
  br label %173

173:                                              ; preds = %170, %165
  %174 = phi i32 [ %166, %165 ], [ %164, %170 ]
  %175 = phi i32 [ %169, %165 ], [ %172, %170 ]
  %176 = phi i32 [ 4, %165 ], [ 0, %170 ]
  %177 = phi i32 [ 0, %165 ], [ 4, %170 ]
  %178 = phi i32 [ -4, %165 ], [ 4, %170 ]
  %179 = icmp eq i32 %11, 0
  br i1 %179, label %254, label %180

180:                                              ; preds = %173
  %181 = shl nsw i32 %174, 2
  br label %182

182:                                              ; preds = %211, %180
  %183 = phi i32 [ 0, %180 ], [ %218, %211 ]
  %184 = phi i32 [ %175, %180 ], [ %208, %211 ]
  %185 = phi i32 [ %181, %180 ], [ %217, %211 ]
  %186 = phi i8* [ %161, %180 ], [ %207, %211 ]
  %187 = phi i8* [ %157, %180 ], [ %216, %211 ]
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = lshr i32 %189, %185
  %191 = and i32 %190, 15
  br label %192

192:                                              ; preds = %182, %192
  %193 = phi i32 [ %209, %192 ], [ 0, %182 ]
  %194 = phi i32 [ %208, %192 ], [ %184, %182 ]
  %195 = phi i8* [ %207, %192 ], [ %186, %182 ]
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = sub i32 4, %194
  %199 = lshr i32 3855, %198
  %200 = and i32 %199, %197
  %201 = shl i32 %191, %194
  %202 = or i32 %200, %201
  %203 = trunc i32 %202 to i8
  store i8 %203, i8* %195, align 1
  %204 = icmp eq i32 %194, %177
  %205 = getelementptr inbounds i8, i8* %195, i64 -1
  %206 = add nsw i32 %194, %178
  %207 = select i1 %204, i8* %205, i8* %195
  %208 = select i1 %204, i32 %176, i32 %206
  %209 = add nuw nsw i32 %193, 1
  %210 = icmp slt i32 %209, %14
  br i1 %210, label %192, label %211

211:                                              ; preds = %192
  %212 = load i32, i32* %10, align 8
  %213 = icmp eq i32 %185, %177
  %214 = getelementptr inbounds i8, i8* %187, i64 -1
  %215 = add nsw i32 %185, %178
  %216 = select i1 %213, i8* %214, i8* %187
  %217 = select i1 %213, i32 %176, i32 %215
  %218 = add nuw i32 %183, 1
  %219 = icmp ult i32 %218, %212
  br i1 %219, label %182, label %254

220:                                              ; preds = %9
  %221 = lshr i8 %17, 3
  %222 = zext i8 %221 to i64
  %223 = icmp eq i32 %11, 0
  br i1 %223, label %256, label %224

224:                                              ; preds = %220
  %225 = add i32 %15, -1
  %226 = zext i32 %225 to i64
  %227 = mul nuw nsw i64 %226, %222
  %228 = getelementptr inbounds i8, i8* %1, i64 %227
  %229 = add i32 %11, -1
  %230 = zext i32 %229 to i64
  %231 = mul nuw nsw i64 %222, %230
  %232 = getelementptr inbounds i8, i8* %1, i64 %231
  %233 = bitcast i64* %5 to i8*
  %234 = sub nsw i64 0, %222
  %235 = icmp ugt i8 %17, 63
  %236 = sub nsw i64 8, %222
  %237 = select i1 %235, i64 0, i64 %236
  %238 = getelementptr i8, i8* %233, i64 %222
  br label %239

239:                                              ; preds = %249, %224
  %240 = phi i32 [ 0, %224 ], [ %252, %249 ]
  %241 = phi i8* [ %228, %224 ], [ %246, %249 ]
  %242 = phi i8* [ %232, %224 ], [ %251, %249 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %233)
  call void @llvm.memset.p0i8.i64(i8* align 1 %238, i8 -86, i64 %237, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %233, i8* align 1 %242, i64 %222, i1 false)
  br label %243

243:                                              ; preds = %239, %243
  %244 = phi i32 [ %247, %243 ], [ 0, %239 ]
  %245 = phi i8* [ %246, %243 ], [ %241, %239 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %245, i8* nonnull align 8 %233, i64 %222, i1 false)
  %246 = getelementptr inbounds i8, i8* %245, i64 %234
  %247 = add nuw nsw i32 %244, 1
  %248 = icmp slt i32 %247, %14
  br i1 %248, label %243, label %249

249:                                              ; preds = %243
  %250 = load i32, i32* %10, align 8
  %251 = getelementptr inbounds i8, i8* %242, i64 %234
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %233)
  %252 = add nuw i32 %240, 1
  %253 = icmp ult i32 %252, %250
  br i1 %253, label %239, label %254

254:                                              ; preds = %211, %144, %75, %249, %173, %108, %39
  %255 = load i8, i8* %16, align 1
  br label %256

256:                                              ; preds = %254, %220
  %257 = phi i8 [ %255, %254 ], [ %17, %220 ]
  store i32 %15, i32* %10, align 8
  %258 = icmp ugt i8 %257, 7
  %259 = zext i32 %15 to i64
  %260 = zext i8 %257 to i64
  br i1 %258, label %261, label %264

261:                                              ; preds = %256
  %262 = lshr i64 %260, 3
  %263 = mul nuw nsw i64 %262, %259
  br label %268

264:                                              ; preds = %256
  %265 = mul nuw nsw i64 %260, %259
  %266 = add nuw nsw i64 %265, 7
  %267 = lshr i64 %266, 3
  br label %268

268:                                              ; preds = %264, %261
  %269 = phi i64 [ %263, %261 ], [ %267, %264 ]
  %270 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %269, i64* %270, align 8
  br label %271

271:                                              ; preds = %268, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_filter_row(%struct.png_struct_def* noalias, %struct.png_row_info_struct*, i8*, i8*, i32) local_unnamed_addr #0 {
  %6 = add i32 %4, -1
  %7 = icmp ult i32 %6, 4
  br i1 %7, label %8, label %27

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 133, i64 0
  %10 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %9, align 8
  %11 = icmp eq void (%struct.png_row_info_struct*, i8*, i8*)* %10, null
  br i1 %11, label %12, label %23

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %14 = load i8, i8* %13, align 4, !alias.scope !55
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %15, 7
  %17 = lshr i32 %16, 3
  %18 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %9 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_sub, void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_up>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %18, align 8, !alias.scope !55
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 133, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_avg, void (%struct.png_row_info_struct*, i8*, i8*)** %19, align 8, !alias.scope !55
  %20 = icmp eq i32 %17, 1
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 133, i64 3
  %22 = select i1 %20, void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth_1byte_pixel, void (%struct.png_row_info_struct*, i8*, i8*)* @png_read_filter_row_paeth_multibyte_pixel
  store void (%struct.png_row_info_struct*, i8*, i8*)* %22, void (%struct.png_row_info_struct*, i8*, i8*)** %21, align 8, !alias.scope !55
  tail call void @cr_png_init_filter_functions_sse2(%struct.png_struct_def* %0, i32 %17) #8
  br label %23

23:                                               ; preds = %12, %8
  %24 = sext i32 %6 to i64
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 133, i64 %24
  %26 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %25, align 8
  tail call void %26(%struct.png_row_info_struct* %1, i8* %2, i8* %3) #8
  br label %27

27:                                               ; preds = %23, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_IDAT_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca [1024 x i8], align 16
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 0, i32* %6, align 8
  %7 = icmp eq i8* %1, null
  %8 = select i1 %7, i64 0, i64 %2
  %9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 131
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 129
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 130
  %16 = bitcast i8** %14 to i8*
  %17 = icmp eq %struct.png_struct_def* %0, null
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  %19 = icmp ne i8* %1, null
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  br label %22

22:                                               ; preds = %107, %3
  %23 = phi i64 [ %8, %3 ], [ %87, %107 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 1024, i1 false)
  %24 = load i32, i32* %10, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %59

26:                                               ; preds = %22
  %27 = load i32, i32* %11, align 8
  br label %28

28:                                               ; preds = %26, %31
  %29 = phi i32 [ %27, %26 ], [ %33, %31 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 0)
  %33 = call i32 @cr_png_read_chunk_header(%struct.png_struct_def* %0)
  store i32 %33, i32* %11, align 8
  %34 = load i32, i32* %12, align 8
  %35 = icmp eq i32 %34, 1229209940
  br i1 %35, label %28, label %36

36:                                               ; preds = %31
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.35, i64 0, i64 0)) #7
  unreachable

37:                                               ; preds = %28
  %38 = load i32, i32* %13, align 8
  %39 = icmp ugt i32 %38, %29
  %40 = select i1 %39, i32 %29, i32 %38
  %41 = zext i32 %40 to i64
  %42 = load i8*, i8** %14, align 8, !alias.scope !58
  %43 = icmp eq i8* %42, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %37
  %45 = load i64, i64* %15, align 8, !alias.scope !58
  %46 = icmp ult i64 %45, %41
  br i1 %46, label %47, label %53

47:                                               ; preds = %44
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #8, !alias.scope !58
  call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %42) #8
  br label %48

48:                                               ; preds = %47, %37
  %49 = call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %41) #8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %52, label %51

51:                                               ; preds = %48
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 0, i64 %41, i1 false) #8, !noalias !58
  store i8* %49, i8** %14, align 8, !alias.scope !58
  store i64 %41, i64* %15, align 8, !alias.scope !58
  br label %53

52:                                               ; preds = %48
  call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.43, i64 0, i64 0)) #7
  unreachable

53:                                               ; preds = %44, %51
  %54 = phi i8* [ %49, %51 ], [ %42, %44 ]
  br i1 %17, label %56, label %55

55:                                               ; preds = %53
  call void @cr_png_read_data(%struct.png_struct_def* nonnull %0, i8* nonnull %54, i64 %41) #8
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %54, i64 %41) #8
  br label %56

56:                                               ; preds = %53, %55
  %57 = load i32, i32* %11, align 8
  %58 = sub i32 %57, %40
  store i32 %58, i32* %11, align 8
  store i8* %54, i8** %18, align 8
  store i32 %40, i32* %10, align 8
  br label %59

59:                                               ; preds = %56, %22
  %60 = phi i32 [ %40, %56 ], [ %24, %22 ]
  br i1 %19, label %61, label %66

61:                                               ; preds = %59
  %62 = icmp ult i64 %23, 4294967295
  %63 = select i1 %62, i64 %23, i64 4294967295
  %64 = trunc i64 %63 to i32
  %65 = sub i64 %23, %63
  br label %67

66:                                               ; preds = %59
  store i8* %9, i8** %5, align 8
  br label %67

67:                                               ; preds = %66, %61
  %68 = phi i32 [ 1024, %66 ], [ %64, %61 ]
  %69 = phi i64 [ %23, %66 ], [ %65, %61 ]
  store i32 %68, i32* %6, align 8
  %70 = load i8, i8* %20, align 2, !alias.scope !61
  %71 = icmp eq i8 %70, 0
  %72 = icmp eq i32 %60, 0
  %73 = or i1 %71, %72
  br i1 %73, label %81, label %74

74:                                               ; preds = %67
  %75 = load i8*, i8** %18, align 8, !alias.scope !61
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8** %79, align 8, !alias.scope !61
  store i32 0, i32* %6, align 8
  br label %101

80:                                               ; preds = %74
  store i8 0, i8* %20, align 2, !alias.scope !61
  br label %81

81:                                               ; preds = %67, %80
  %82 = call i32 @Cr_z_inflate(%struct.z_stream_s* %21, i32 0) #8
  %83 = load i32, i32* %6, align 8
  %84 = zext i32 %83 to i64
  %85 = sub nsw i64 1024, %84
  %86 = select i1 %19, i64 %84, i64 %85
  %87 = add i64 %86, %69
  store i32 0, i32* %6, align 8
  switch i32 %82, label %101 [
    i32 1, label %88
    i32 0, label %107
  ]

88:                                               ; preds = %81
  store i8* null, i8** %5, align 8
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %90 = load i32, i32* %89, align 4
  %91 = or i32 %90, 8
  store i32 %91, i32* %89, align 4
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %93 = load i32, i32* %92, align 8
  %94 = or i32 %93, 8
  store i32 %94, i32* %92, align 8
  %95 = load i32, i32* %10, align 8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %100

97:                                               ; preds = %88
  %98 = load i32, i32* %11, align 8
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %109, label %100

100:                                              ; preds = %97, %88
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #8
  br label %109

101:                                              ; preds = %81, %78
  %102 = phi i32 [ -3, %78 ], [ %82, %81 ]
  call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %102) #8
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %104 = load i8*, i8** %103, align 8
  br i1 %19, label %105, label %106

105:                                              ; preds = %101
  call void @cr_png_chunk_error(%struct.png_struct_def* %0, i8* %104) #7
  unreachable

106:                                              ; preds = %101
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* %104) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #8
  br label %114

107:                                              ; preds = %81
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #8
  %108 = icmp eq i64 %87, 0
  br i1 %108, label %114, label %22

109:                                              ; preds = %97, %100
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %9) #8
  %110 = icmp eq i64 %87, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %109
  br i1 %19, label %112, label %113

112:                                              ; preds = %111
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.35, i64 0, i64 0)) #7
  unreachable

113:                                              ; preds = %111
  call void @cr_png_chunk_benign_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.37, i64 0, i64 0)) #8
  br label %114

114:                                              ; preds = %107, %106, %109, %113
  ret void
}

declare void @cr_png_zstream_error(%struct.png_struct_def*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_finish_IDAT(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %16

6:                                                ; preds = %1
  tail call void @cr_png_read_IDAT_data(%struct.png_struct_def* %0, i8* null, i64 0)
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* null, i8** %7, align 8
  %8 = load i32, i32* %2, align 8
  %9 = and i32 %8, 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %13, 8
  store i32 %14, i32* %12, align 4
  %15 = or i32 %8, 8
  store i32 %15, i32* %2, align 8
  br label %16

16:                                               ; preds = %6, %11, %1
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 1229209940
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  store i8* null, i8** %21, align 8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %22, align 8
  store i32 0, i32* %17, align 8
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %24 = load i32, i32* %23, align 8
  %25 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %24)
  br label %26

26:                                               ; preds = %20, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_finish_row(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 43
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %86, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %10 = load i8, i8* %9, align 2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %60, label %12

12:                                               ; preds = %8
  store i32 0, i32* %2, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 %17, i1 false)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %23 = load i8, i8* %18, align 1
  br label %24

24:                                               ; preds = %44, %12
  %25 = phi i8 [ %26, %44 ], [ %23, %12 ]
  %26 = add i8 %25, 1
  %27 = icmp ugt i8 %26, 6
  br i1 %27, label %59, label %28

28:                                               ; preds = %24
  %29 = load i32, i32* %19, align 8
  %30 = zext i8 %26 to i64
  %31 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_start_row.png_pass_inc, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add i32 %29, %33
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_start_row.png_pass_start, i64 0, i64 %30
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = xor i32 %37, -1
  %39 = add i32 %34, %38
  %40 = udiv i32 %39, %33
  store i32 %40, i32* %20, align 8
  %41 = load i32, i32* %21, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %85

44:                                               ; preds = %28
  %45 = load i32, i32* %22, align 4
  %46 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_finish_row.png_pass_yinc, i64 0, i64 %30
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add i32 %45, %48
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_finish_row.png_pass_ystart, i64 0, i64 %30
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = xor i32 %52, -1
  %54 = add i32 %49, %53
  %55 = udiv i32 %54, %48
  store i32 %55, i32* %5, align 8
  %56 = icmp ult i32 %54, %48
  %57 = icmp ult i32 %39, %33
  %58 = or i1 %57, %56
  br i1 %58, label %24, label %85

59:                                               ; preds = %24
  store i8 %26, i8* %18, align 1
  br label %60

60:                                               ; preds = %59, %8
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %62 = load i32, i32* %61, align 8, !alias.scope !64
  %63 = and i32 %62, 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %75

65:                                               ; preds = %60
  tail call void @cr_png_read_IDAT_data(%struct.png_struct_def* %0, i8* null, i64 0) #8
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* null, i8** %66, align 8, !alias.scope !64
  %67 = load i32, i32* %61, align 8, !alias.scope !64
  %68 = and i32 %67, 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %72 = load i32, i32* %71, align 4, !alias.scope !64
  %73 = or i32 %72, 8
  store i32 %73, i32* %71, align 4, !alias.scope !64
  %74 = or i32 %67, 8
  store i32 %74, i32* %61, align 8, !alias.scope !64
  br label %75

75:                                               ; preds = %70, %65, %60
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %77 = load i32, i32* %76, align 8, !alias.scope !64
  %78 = icmp eq i32 %77, 1229209940
  br i1 %78, label %79, label %86

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  store i8* null, i8** %80, align 8, !alias.scope !64
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %81, align 8, !alias.scope !64
  store i32 0, i32* %76, align 8, !alias.scope !64
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %83 = load i32, i32* %82, align 8, !alias.scope !64
  %84 = tail call i32 @cr_png_crc_finish(%struct.png_struct_def* %0, i32 %83) #8
  br label %86

85:                                               ; preds = %28, %44
  store i8 %26, i8* %18, align 1
  br label %86

86:                                               ; preds = %85, %79, %75, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_read_start_row(%struct.png_struct_def* noalias) local_unnamed_addr #0 {
  tail call void @cr_png_init_read_transformations(%struct.png_struct_def* %0) #8
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %3 = load i8, i8* %2, align 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %32, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, 7
  %13 = lshr i32 %12, 3
  %14 = select i1 %9, i32 %13, i32 %11
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %14, i32* %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_start_row.png_pass_inc, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add i32 %17, %23
  %25 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_read_start_row.png_pass_start, i64 0, i64 %20
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = xor i32 %27, -1
  %29 = add i32 %24, %28
  %30 = udiv i32 %29, %23
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  store i32 %30, i32* %31, align 8
  br label %41

32:                                               ; preds = %1
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %32, %5
  %42 = phi i32 [ %37, %32 ], [ %17, %5 ]
  %43 = phi i32 [ %40, %32 ], [ %7, %5 ]
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %45 = load i8, i8* %44, align 4
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %47 = and i32 %43, 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %51 = load i8, i8* %50, align 2
  %52 = icmp ult i8 %51, 8
  %53 = select i1 %52, i8 8, i8 %45
  br label %54

54:                                               ; preds = %49, %41
  %55 = phi i8 [ %45, %41 ], [ %53, %49 ]
  %56 = zext i8 %55 to i32
  %57 = and i32 %43, 4096
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %84, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %61 = load i8, i8* %60, align 1
  switch i8 %61, label %84 [
    i8 3, label %62
    i8 0, label %67
    i8 2, label %75
  ]

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %64 = load i16, i16* %63, align 2
  %65 = icmp eq i16 %64, 0
  %66 = select i1 %65, i32 24, i32 32
  br label %84

67:                                               ; preds = %59
  %68 = icmp ugt i32 %56, 8
  %69 = select i1 %68, i32 %56, i32 8
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %71 = load i16, i16* %70, align 2
  %72 = icmp ne i16 %71, 0
  %73 = zext i1 %72 to i32
  %74 = shl nuw nsw i32 %69, %73
  br label %84

75:                                               ; preds = %59
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %77 = load i16, i16* %76, align 2
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %84, label %79

79:                                               ; preds = %75
  %80 = zext i8 %55 to i16
  %81 = shl nuw nsw i16 %80, 2
  %82 = udiv i16 %81, 3
  %83 = zext i16 %82 to i32
  br label %84

84:                                               ; preds = %67, %59, %62, %75, %54, %79
  %85 = phi i32 [ %83, %79 ], [ %56, %75 ], [ %56, %54 ], [ %66, %62 ], [ %56, %59 ], [ %74, %67 ]
  %86 = and i32 %43, 512
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %97, label %88

88:                                               ; preds = %84
  br i1 %58, label %95, label %89

89:                                               ; preds = %88
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %91 = load i8, i8* %90, align 2
  %92 = icmp ult i8 %91, 16
  %93 = zext i1 %92 to i32
  %94 = shl i32 %85, %93
  br label %97

95:                                               ; preds = %88
  %96 = and i32 %43, -513
  store i32 %96, i32* %46, align 4
  br label %97

97:                                               ; preds = %89, %84, %95
  %98 = phi i32 [ %85, %95 ], [ %85, %84 ], [ %94, %89 ]
  %99 = load i32, i32* %46, align 4
  %100 = trunc i32 %99 to i16
  %101 = icmp slt i16 %100, 0
  br i1 %101, label %102, label %111

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %104 = load i8, i8* %103, align 1
  switch i8 %104, label %111 [
    i8 0, label %105
    i8 2, label %108
    i8 3, label %108
  ]

105:                                              ; preds = %102
  %106 = icmp ult i32 %98, 9
  %107 = select i1 %106, i32 16, i32 32
  br label %111

108:                                              ; preds = %102, %102
  %109 = icmp ult i32 %98, 33
  %110 = select i1 %109, i32 32, i32 64
  br label %111

111:                                              ; preds = %108, %102, %105, %97
  %112 = phi i32 [ %98, %97 ], [ %107, %105 ], [ %98, %102 ], [ %110, %108 ]
  %113 = and i32 %99, 16384
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %137, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %117 = load i16, i16* %116, align 2
  %118 = icmp ne i16 %117, 0
  %119 = and i32 %99, 4096
  %120 = icmp ne i32 %119, 0
  %121 = and i1 %120, %118
  %122 = or i1 %101, %121
  br i1 %122, label %127, label %123

123:                                              ; preds = %115
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %125 = load i8, i8* %124, align 1
  %126 = icmp eq i8 %125, 4
  br i1 %126, label %127, label %130

127:                                              ; preds = %115, %123
  %128 = icmp ult i32 %112, 17
  %129 = select i1 %128, i32 32, i32 64
  br label %137

130:                                              ; preds = %123
  %131 = icmp ult i32 %112, 9
  %132 = icmp eq i8 %125, 6
  br i1 %131, label %133, label %135

133:                                              ; preds = %130
  %134 = select i1 %132, i32 32, i32 24
  br label %137

135:                                              ; preds = %130
  %136 = select i1 %132, i32 64, i32 48
  br label %137

137:                                              ; preds = %135, %133, %127, %111
  %138 = phi i32 [ %112, %111 ], [ %129, %127 ], [ %134, %133 ], [ %136, %135 ]
  %139 = and i32 %99, 1048576
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %151, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  %143 = load i8, i8* %142, align 8
  %144 = zext i8 %143 to i32
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = mul nuw nsw i32 %147, %144
  %149 = icmp ugt i32 %148, %138
  %150 = select i1 %149, i32 %148, i32 %138
  br label %151

151:                                              ; preds = %137, %141
  %152 = phi i32 [ %150, %141 ], [ %138, %137 ]
  %153 = trunc i32 %152 to i8
  %154 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67
  store i8 %153, i8* %154, align 8
  %155 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 68
  store i8 0, i8* %155, align 1
  %156 = add i32 %42, 7
  %157 = and i32 %156, -8
  %158 = zext i32 %157 to i64
  %159 = icmp ugt i32 %152, 7
  %160 = zext i32 %152 to i64
  %161 = lshr i64 %160, 3
  %162 = mul nuw nsw i64 %161, %158
  %163 = mul nuw i64 %158, %160
  %164 = lshr exact i64 %163, 3
  %165 = select i1 %159, i64 %162, i64 %164
  %166 = add nuw nsw i32 %152, 7
  %167 = lshr i32 %166, 3
  %168 = add nuw nsw i32 %167, 49
  %169 = zext i32 %168 to i64
  %170 = add nuw nsw i64 %165, %169
  %171 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 128
  %172 = load i64, i64* %171, align 8
  %173 = icmp ugt i64 %170, %172
  br i1 %173, label %174, label %203

174:                                              ; preds = %151
  %175 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 121
  %176 = load i8*, i8** %175, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %176) #8
  %177 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 132
  %178 = load i8*, i8** %177, align 8
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %178) #8
  %179 = load i8, i8* %2, align 2
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %183, label %181

181:                                              ; preds = %174
  %182 = tail call noalias i8* @cr_png_calloc(%struct.png_struct_def* %0, i64 %170) #8
  br label %185

183:                                              ; preds = %174
  %184 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %170) #8
  br label %185

185:                                              ; preds = %183, %181
  %186 = phi i8* [ %184, %183 ], [ %182, %181 ]
  store i8* %186, i8** %175, align 8
  %187 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %170) #8
  store i8* %187, i8** %177, align 8
  %188 = load i8*, i8** %175, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 32
  %190 = ptrtoint i8* %189 to i64
  %191 = and i64 %190, 15
  %192 = sub nsw i64 0, %191
  %193 = getelementptr inbounds i8, i8* %189, i64 %192
  %194 = getelementptr inbounds i8, i8* %193, i64 -1
  %195 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8* %194, i8** %195, align 8
  %196 = getelementptr inbounds i8, i8* %187, i64 32
  %197 = ptrtoint i8* %196 to i64
  %198 = and i64 %197, 15
  %199 = sub nsw i64 0, %198
  %200 = getelementptr inbounds i8, i8* %196, i64 %199
  %201 = getelementptr inbounds i8, i8* %200, i64 -1
  %202 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  store i8* %201, i8** %202, align 8
  store i64 %170, i64* %171, align 8
  br label %203

203:                                              ; preds = %185, %151
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %205 = load i64, i64* %204, align 8
  %206 = icmp eq i64 %205, -1
  br i1 %206, label %207, label %208

207:                                              ; preds = %203
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.38, i64 0, i64 0)) #7
  unreachable

208:                                              ; preds = %203
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %210 = load i8*, i8** %209, align 8
  %211 = add nuw i64 %205, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %210, i8 0, i64 %211, i1 false)
  %212 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 129
  %213 = load i8*, i8** %212, align 8
  %214 = icmp eq i8* %213, null
  br i1 %214, label %217, label %215

215:                                              ; preds = %208
  %216 = bitcast i8** %212 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %216, i8 0, i64 16, i1 false)
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* nonnull %213) #8
  br label %217

217:                                              ; preds = %208, %215
  %218 = tail call fastcc i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 1229209940)
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %223, label %220

220:                                              ; preds = %217
  %221 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %222 = load i8*, i8** %221, align 8
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* %222) #7
  unreachable

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %225 = load i32, i32* %224, align 8
  %226 = or i32 %225, 64
  store i32 %226, i32* %224, align 8
  ret void
}

declare void @cr_png_init_read_transformations(%struct.png_struct_def*) local_unnamed_addr #4

declare noalias i8* @cr_png_calloc(%struct.png_struct_def*, i64) local_unnamed_addr #4

declare noalias i8* @cr_png_malloc(%struct.png_struct_def*, i64) local_unnamed_addr #4

declare i64 @cr_png_safecat(i8*, i64, i64, i8*) local_unnamed_addr #4

declare i32 @Cr_z_inflateReset2(%struct.z_stream_s*, i32) local_unnamed_addr #4

declare i32 @Cr_z_inflateInit2_(%struct.z_stream_s*, i32, i8*, i32) local_unnamed_addr #4

declare i32 @Cr_z_inflateValidate(%struct.z_stream_s*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_inflate(%struct.png_struct_def* noalias, i32, i8*, i32* nocapture, i8*, i64* nocapture) unnamed_addr #0 {
  %7 = alloca [1024 x i8], align 16
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %11, label %79

11:                                               ; preds = %6
  %12 = load i64, i64* %5, align 8
  %13 = load i32, i32* %3, align 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 0
  store i8* %2, i8** %14, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 0, i32* %16, align 8
  %17 = icmp eq i8* %4, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* %4, i8** %19, align 8
  br label %20

20:                                               ; preds = %11, %18
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  br label %25

25:                                               ; preds = %58, %20
  %26 = phi i32 [ 0, %20 ], [ %60, %58 ]
  %27 = phi i32 [ 0, %20 ], [ %59, %58 ]
  %28 = phi i64 [ %12, %20 ], [ %41, %58 ]
  %29 = phi i32 [ %13, %20 ], [ 0, %58 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 1024, i1 false)
  %30 = add i32 %27, %29
  store i32 %30, i32* %15, align 8
  %31 = zext i32 %26 to i64
  %32 = add i64 %28, %31
  br i1 %17, label %33, label %34

33:                                               ; preds = %25
  store i8* %21, i8** %22, align 8
  br label %34

34:                                               ; preds = %33, %25
  %35 = phi i32 [ 1024, %33 ], [ -1, %25 ]
  %36 = zext i32 %35 to i64
  %37 = icmp ult i64 %32, %36
  %38 = trunc i64 %32 to i32
  %39 = select i1 %37, i32 %38, i32 %35
  store i32 %39, i32* %16, align 8
  %40 = zext i32 %39 to i64
  %41 = sub i64 %32, %40
  %42 = icmp eq i64 %41, 0
  %43 = select i1 %42, i32 4, i32 0
  %44 = load i8, i8* %23, align 2, !alias.scope !67
  %45 = icmp eq i8 %44, 0
  %46 = icmp eq i32 %30, 0
  %47 = or i1 %46, %45
  br i1 %47, label %55, label %48

48:                                               ; preds = %34
  %49 = load i8*, i8** %14, align 8, !alias.scope !67
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8** %53, align 8, !alias.scope !67
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %21) #8
  br label %61

54:                                               ; preds = %48
  store i8 0, i8* %23, align 2, !alias.scope !67
  br label %55

55:                                               ; preds = %34, %54
  %56 = call i32 @Cr_z_inflate(%struct.z_stream_s* %24, i32 %43) #8
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %21) #8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = load i32, i32* %15, align 8
  %60 = load i32, i32* %16, align 8
  br label %25

61:                                               ; preds = %55, %52
  %62 = phi i32 [ -3, %52 ], [ %56, %55 ]
  br i1 %17, label %63, label %64

63:                                               ; preds = %61
  store i8* null, i8** %22, align 8
  br label %64

64:                                               ; preds = %63, %61
  %65 = load i32, i32* %15, align 8
  %66 = load i32, i32* %16, align 8
  %67 = zext i32 %66 to i64
  %68 = add i64 %41, %67
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %64
  %71 = load i64, i64* %5, align 8
  %72 = sub i64 %71, %68
  store i64 %72, i64* %5, align 8
  br label %73

73:                                               ; preds = %64, %70
  %74 = icmp eq i32 %65, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %73
  %76 = load i32, i32* %3, align 4
  %77 = sub i32 %76, %65
  store i32 %77, i32* %3, align 4
  br label %78

78:                                               ; preds = %73, %75
  call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %62) #8
  br label %81

79:                                               ; preds = %6
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.42, i64 0, i64 0), i8** %80, align 8
  br label %81

81:                                               ; preds = %79, %78
  %82 = phi i32 [ %62, %78 ], [ -2, %79 ]
  ret i32 %82
}

declare i32 @Cr_z_inflateReset(%struct.z_stream_s*) local_unnamed_addr #4

declare noalias i8* @cr_png_malloc_warn(%struct.png_struct_def*, i64) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @png_read_filter_row_sub(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readnone) #6 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = add nuw nsw i64 %8, 7
  %10 = lshr i64 %9, 3
  %11 = icmp ugt i64 %5, %10
  br i1 %11, label %12, label %145

12:                                               ; preds = %3
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  %14 = sub nsw i64 0, %10
  %15 = sub i64 %5, %10
  %16 = icmp ult i64 %15, 32
  br i1 %16, label %96, label %17

17:                                               ; preds = %12
  %18 = getelementptr i8, i8* %1, i64 %5
  %19 = sub i64 %5, %10
  %20 = getelementptr i8, i8* %1, i64 %19
  %21 = icmp ult i8* %13, %20
  %22 = icmp ugt i8* %18, %1
  %23 = and i1 %21, %22
  br i1 %23, label %96, label %24

24:                                               ; preds = %17
  %25 = and i64 %15, -32
  %26 = getelementptr i8, i8* %13, i64 %25
  %27 = add i64 %10, %25
  %28 = add i64 %25, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %74, label %33

33:                                               ; preds = %24
  %34 = sub nuw nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %71, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %72, %35 ]
  %38 = getelementptr i8, i8* %13, i64 %36
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1, !alias.scope !70, !noalias !73
  %41 = getelementptr i8, i8* %38, i64 16
  %42 = bitcast i8* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1, !alias.scope !70, !noalias !73
  %44 = getelementptr inbounds i8, i8* %38, i64 %14
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !73
  %47 = getelementptr inbounds i8, i8* %44, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !73
  %50 = add <16 x i8> %46, %40
  %51 = add <16 x i8> %49, %43
  %52 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1, !alias.scope !70, !noalias !73
  %53 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %53, align 1, !alias.scope !70, !noalias !73
  %54 = or i64 %36, 32
  %55 = getelementptr i8, i8* %13, i64 %54
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !70, !noalias !73
  %58 = getelementptr i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !70, !noalias !73
  %61 = getelementptr inbounds i8, i8* %55, i64 %14
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !73
  %64 = getelementptr inbounds i8, i8* %61, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !73
  %67 = add <16 x i8> %63, %57
  %68 = add <16 x i8> %66, %60
  %69 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 1, !alias.scope !70, !noalias !73
  %70 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1, !alias.scope !70, !noalias !73
  %71 = add i64 %36, 64
  %72 = add i64 %37, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %35, !llvm.loop !75

74:                                               ; preds = %35, %24
  %75 = phi i64 [ 0, %24 ], [ %71, %35 ]
  %76 = icmp eq i64 %31, 0
  br i1 %76, label %94, label %77

77:                                               ; preds = %74
  %78 = getelementptr i8, i8* %13, i64 %75
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !70, !noalias !73
  %81 = getelementptr i8, i8* %78, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !70, !noalias !73
  %84 = getelementptr inbounds i8, i8* %78, i64 %14
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !73
  %87 = getelementptr inbounds i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !73
  %90 = add <16 x i8> %86, %80
  %91 = add <16 x i8> %89, %83
  %92 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %92, align 1, !alias.scope !70, !noalias !73
  %93 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %93, align 1, !alias.scope !70, !noalias !73
  br label %94

94:                                               ; preds = %74, %77
  %95 = icmp eq i64 %15, %25
  br i1 %95, label %145, label %96

96:                                               ; preds = %94, %17, %12
  %97 = phi i8* [ %13, %17 ], [ %13, %12 ], [ %26, %94 ]
  %98 = phi i64 [ %10, %17 ], [ %10, %12 ], [ %27, %94 ]
  %99 = sub i64 %5, %98
  %100 = xor i64 %98, -1
  %101 = add i64 %5, %100
  %102 = and i64 %99, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %116, label %104

104:                                              ; preds = %96, %104
  %105 = phi i8* [ %112, %104 ], [ %97, %96 ]
  %106 = phi i64 [ %113, %104 ], [ %98, %96 ]
  %107 = phi i64 [ %114, %104 ], [ %102, %96 ]
  %108 = load i8, i8* %105, align 1
  %109 = getelementptr inbounds i8, i8* %105, i64 %14
  %110 = load i8, i8* %109, align 1
  %111 = add i8 %110, %108
  store i8 %111, i8* %105, align 1
  %112 = getelementptr inbounds i8, i8* %105, i64 1
  %113 = add nuw i64 %106, 1
  %114 = add i64 %107, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %104, !llvm.loop !76

116:                                              ; preds = %104, %96
  %117 = phi i8* [ %97, %96 ], [ %112, %104 ]
  %118 = phi i64 [ %98, %96 ], [ %113, %104 ]
  %119 = icmp ult i64 %101, 3
  br i1 %119, label %145, label %120

120:                                              ; preds = %116, %120
  %121 = phi i8* [ %142, %120 ], [ %117, %116 ]
  %122 = phi i64 [ %143, %120 ], [ %118, %116 ]
  %123 = load i8, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %121, i64 %14
  %125 = load i8, i8* %124, align 1
  %126 = add i8 %125, %123
  store i8 %126, i8* %121, align 1
  %127 = getelementptr inbounds i8, i8* %121, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %127, i64 %14
  %130 = load i8, i8* %129, align 1
  %131 = add i8 %130, %128
  store i8 %131, i8* %127, align 1
  %132 = getelementptr inbounds i8, i8* %121, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds i8, i8* %132, i64 %14
  %135 = load i8, i8* %134, align 1
  %136 = add i8 %135, %133
  store i8 %136, i8* %132, align 1
  %137 = getelementptr inbounds i8, i8* %121, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds i8, i8* %137, i64 %14
  %140 = load i8, i8* %139, align 1
  %141 = add i8 %140, %138
  store i8 %141, i8* %137, align 1
  %142 = getelementptr inbounds i8, i8* %121, i64 4
  %143 = add nuw i64 %122, 4
  %144 = icmp eq i64 %143, %5
  br i1 %144, label %145, label %120, !llvm.loop !77

145:                                              ; preds = %116, %120, %94, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @png_read_filter_row_up(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #6 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %139, label %7

7:                                                ; preds = %3
  %8 = icmp ult i64 %5, 32
  br i1 %8, label %87, label %9

9:                                                ; preds = %7
  %10 = getelementptr i8, i8* %1, i64 %5
  %11 = getelementptr i8, i8* %2, i64 %5
  %12 = icmp ugt i8* %11, %1
  %13 = icmp ugt i8* %10, %2
  %14 = and i1 %12, %13
  br i1 %14, label %87, label %15

15:                                               ; preds = %9
  %16 = and i64 %5, -32
  %17 = getelementptr i8, i8* %2, i64 %16
  %18 = getelementptr i8, i8* %1, i64 %16
  %19 = add i64 %16, -32
  %20 = lshr exact i64 %19, 5
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %65, label %24

24:                                               ; preds = %15
  %25 = sub nuw nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %62, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %63, %26 ]
  %29 = getelementptr i8, i8* %2, i64 %27
  %30 = getelementptr i8, i8* %1, i64 %27
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1, !alias.scope !78, !noalias !81
  %33 = getelementptr i8, i8* %30, i64 16
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !78, !noalias !81
  %36 = bitcast i8* %29 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1, !alias.scope !81
  %38 = getelementptr i8, i8* %29, i64 16
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1, !alias.scope !81
  %41 = add <16 x i8> %37, %32
  %42 = add <16 x i8> %40, %35
  %43 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %43, align 1, !alias.scope !78, !noalias !81
  %44 = bitcast i8* %33 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %44, align 1, !alias.scope !78, !noalias !81
  %45 = or i64 %27, 32
  %46 = getelementptr i8, i8* %2, i64 %45
  %47 = getelementptr i8, i8* %1, i64 %45
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !78, !noalias !81
  %50 = getelementptr i8, i8* %47, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1, !alias.scope !78, !noalias !81
  %53 = bitcast i8* %46 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !81
  %55 = getelementptr i8, i8* %46, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !81
  %58 = add <16 x i8> %54, %49
  %59 = add <16 x i8> %57, %52
  %60 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !78, !noalias !81
  %61 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %61, align 1, !alias.scope !78, !noalias !81
  %62 = add i64 %27, 64
  %63 = add i64 %28, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %26, !llvm.loop !83

65:                                               ; preds = %26, %15
  %66 = phi i64 [ 0, %15 ], [ %62, %26 ]
  %67 = icmp eq i64 %22, 0
  br i1 %67, label %85, label %68

68:                                               ; preds = %65
  %69 = getelementptr i8, i8* %2, i64 %66
  %70 = getelementptr i8, i8* %1, i64 %66
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !78, !noalias !81
  %73 = getelementptr i8, i8* %70, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !78, !noalias !81
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !81
  %78 = getelementptr i8, i8* %69, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !81
  %81 = add <16 x i8> %77, %72
  %82 = add <16 x i8> %80, %75
  %83 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %83, align 1, !alias.scope !78, !noalias !81
  %84 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1, !alias.scope !78, !noalias !81
  br label %85

85:                                               ; preds = %65, %68
  %86 = icmp eq i64 %5, %16
  br i1 %86, label %139, label %87

87:                                               ; preds = %85, %9, %7
  %88 = phi i8* [ %2, %9 ], [ %2, %7 ], [ %17, %85 ]
  %89 = phi i8* [ %1, %9 ], [ %1, %7 ], [ %18, %85 ]
  %90 = phi i64 [ 0, %9 ], [ 0, %7 ], [ %16, %85 ]
  %91 = xor i64 %90, -1
  %92 = add i64 %5, %91
  %93 = and i64 %5, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %108, label %95

95:                                               ; preds = %87, %95
  %96 = phi i8* [ %101, %95 ], [ %88, %87 ]
  %97 = phi i8* [ %104, %95 ], [ %89, %87 ]
  %98 = phi i64 [ %105, %95 ], [ %90, %87 ]
  %99 = phi i64 [ %106, %95 ], [ %93, %87 ]
  %100 = load i8, i8* %97, align 1
  %101 = getelementptr inbounds i8, i8* %96, i64 1
  %102 = load i8, i8* %96, align 1
  %103 = add i8 %102, %100
  store i8 %103, i8* %97, align 1
  %104 = getelementptr inbounds i8, i8* %97, i64 1
  %105 = add nuw i64 %98, 1
  %106 = add i64 %99, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %95, !llvm.loop !84

108:                                              ; preds = %95, %87
  %109 = phi i8* [ %88, %87 ], [ %101, %95 ]
  %110 = phi i8* [ %89, %87 ], [ %104, %95 ]
  %111 = phi i64 [ %90, %87 ], [ %105, %95 ]
  %112 = icmp ult i64 %92, 3
  br i1 %112, label %139, label %113

113:                                              ; preds = %108, %113
  %114 = phi i8* [ %133, %113 ], [ %109, %108 ]
  %115 = phi i8* [ %136, %113 ], [ %110, %108 ]
  %116 = phi i64 [ %137, %113 ], [ %111, %108 ]
  %117 = load i8, i8* %115, align 1
  %118 = getelementptr inbounds i8, i8* %114, i64 1
  %119 = load i8, i8* %114, align 1
  %120 = add i8 %119, %117
  store i8 %120, i8* %115, align 1
  %121 = getelementptr inbounds i8, i8* %115, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %114, i64 2
  %124 = load i8, i8* %118, align 1
  %125 = add i8 %124, %122
  store i8 %125, i8* %121, align 1
  %126 = getelementptr inbounds i8, i8* %115, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %114, i64 3
  %129 = load i8, i8* %123, align 1
  %130 = add i8 %129, %127
  store i8 %130, i8* %126, align 1
  %131 = getelementptr inbounds i8, i8* %115, i64 3
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %114, i64 4
  %134 = load i8, i8* %128, align 1
  %135 = add i8 %134, %132
  store i8 %135, i8* %131, align 1
  %136 = getelementptr inbounds i8, i8* %115, i64 4
  %137 = add nuw i64 %116, 4
  %138 = icmp eq i64 %137, %5
  br i1 %138, label %139, label %113, !llvm.loop !85

139:                                              ; preds = %108, %113, %85, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @png_read_filter_row_avg(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #6 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = add nuw nsw i64 %6, 7
  %8 = lshr i64 %7, 3
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %128, label %13

13:                                               ; preds = %3
  %14 = icmp ult i64 %7, 256
  br i1 %14, label %15, label %44

15:                                               ; preds = %126, %44, %13
  %16 = phi i8* [ %2, %44 ], [ %2, %13 ], [ %52, %126 ]
  %17 = phi i8* [ %1, %44 ], [ %1, %13 ], [ %53, %126 ]
  %18 = phi i64 [ 0, %44 ], [ 0, %13 ], [ %51, %126 ]
  %19 = xor i64 %18, -1
  %20 = add nsw i64 %8, %19
  %21 = and i64 %8, 3
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %15, %23
  %24 = phi i8* [ %29, %23 ], [ %16, %15 ]
  %25 = phi i8* [ %33, %23 ], [ %17, %15 ]
  %26 = phi i64 [ %34, %23 ], [ %18, %15 ]
  %27 = phi i64 [ %35, %23 ], [ %21, %15 ]
  %28 = load i8, i8* %25, align 1
  %29 = getelementptr inbounds i8, i8* %24, i64 1
  %30 = load i8, i8* %24, align 1
  %31 = lshr i8 %30, 1
  %32 = add i8 %31, %28
  store i8 %32, i8* %25, align 1
  %33 = getelementptr inbounds i8, i8* %25, i64 1
  %34 = add nuw nsw i64 %26, 1
  %35 = add i64 %27, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %23, !llvm.loop !86

37:                                               ; preds = %23, %15
  %38 = phi i8* [ undef, %15 ], [ %29, %23 ]
  %39 = phi i8* [ undef, %15 ], [ %33, %23 ]
  %40 = phi i8* [ %16, %15 ], [ %29, %23 ]
  %41 = phi i8* [ %17, %15 ], [ %33, %23 ]
  %42 = phi i64 [ %18, %15 ], [ %34, %23 ]
  %43 = icmp ult i64 %20, 3
  br i1 %43, label %128, label %249

44:                                               ; preds = %13
  %45 = getelementptr i8, i8* %1, i64 %8
  %46 = getelementptr i8, i8* %2, i64 %8
  %47 = icmp ugt i8* %46, %1
  %48 = icmp ugt i8* %45, %2
  %49 = and i1 %47, %48
  br i1 %49, label %15, label %50

50:                                               ; preds = %44
  %51 = and i64 %8, 32
  %52 = getelementptr i8, i8* %2, i64 %51
  %53 = getelementptr i8, i8* %1, i64 %51
  %54 = add nsw i64 %51, -32
  %55 = lshr exact i64 %54, 5
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %104, label %59

59:                                               ; preds = %50
  %60 = sub nuw nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %101, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %102, %61 ]
  %64 = getelementptr i8, i8* %2, i64 %62
  %65 = getelementptr i8, i8* %1, i64 %62
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1, !alias.scope !87, !noalias !90
  %68 = getelementptr i8, i8* %65, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !87, !noalias !90
  %71 = bitcast i8* %64 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !90
  %73 = getelementptr i8, i8* %64, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !90
  %76 = lshr <16 x i8> %72, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %77 = lshr <16 x i8> %75, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %78 = add <16 x i8> %76, %67
  %79 = add <16 x i8> %77, %70
  %80 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 1, !alias.scope !87, !noalias !90
  %81 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %81, align 1, !alias.scope !87, !noalias !90
  %82 = or i64 %62, 32
  %83 = getelementptr i8, i8* %2, i64 %82
  %84 = getelementptr i8, i8* %1, i64 %82
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !87, !noalias !90
  %87 = getelementptr i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !87, !noalias !90
  %90 = bitcast i8* %83 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !90
  %92 = getelementptr i8, i8* %83, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !90
  %95 = lshr <16 x i8> %91, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %96 = lshr <16 x i8> %94, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %97 = add <16 x i8> %95, %86
  %98 = add <16 x i8> %96, %89
  %99 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %99, align 1, !alias.scope !87, !noalias !90
  %100 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %98, <16 x i8>* %100, align 1, !alias.scope !87, !noalias !90
  %101 = add i64 %62, 64
  %102 = add i64 %63, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %61, !llvm.loop !92

104:                                              ; preds = %61, %50
  %105 = phi i64 [ 0, %50 ], [ %101, %61 ]
  %106 = icmp eq i64 %57, 0
  br i1 %106, label %126, label %107

107:                                              ; preds = %104
  %108 = getelementptr i8, i8* %2, i64 %105
  %109 = getelementptr i8, i8* %1, i64 %105
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !87, !noalias !90
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !87, !noalias !90
  %115 = bitcast i8* %108 to <16 x i8>*
  %116 = load <16 x i8>, <16 x i8>* %115, align 1, !alias.scope !90
  %117 = getelementptr i8, i8* %108, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1, !alias.scope !90
  %120 = lshr <16 x i8> %116, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %121 = lshr <16 x i8> %119, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %122 = add <16 x i8> %120, %111
  %123 = add <16 x i8> %121, %114
  %124 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %124, align 1, !alias.scope !87, !noalias !90
  %125 = bitcast i8* %112 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %125, align 1, !alias.scope !87, !noalias !90
  br label %126

126:                                              ; preds = %104, %107
  %127 = icmp eq i64 %8, %51
  br i1 %127, label %128, label %15

128:                                              ; preds = %37, %249, %126, %3
  %129 = phi i8* [ %1, %3 ], [ %53, %126 ], [ %39, %37 ], [ %276, %249 ]
  %130 = phi i8* [ %2, %3 ], [ %52, %126 ], [ %38, %37 ], [ %272, %249 ]
  %131 = icmp eq i64 %11, 0
  br i1 %131, label %309, label %132

132:                                              ; preds = %128
  %133 = sub nsw i64 0, %8
  %134 = icmp ult i64 %11, 16
  br i1 %134, label %135, label %163

135:                                              ; preds = %247, %163, %132
  %136 = phi i8* [ %130, %163 ], [ %130, %132 ], [ %179, %247 ]
  %137 = phi i8* [ %129, %163 ], [ %129, %132 ], [ %180, %247 ]
  %138 = phi i64 [ 0, %163 ], [ 0, %132 ], [ %178, %247 ]
  %139 = sub i64 %10, %8
  %140 = xor i64 %138, -1
  %141 = add i64 %10, %140
  %142 = and i64 %139, 1
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %158, label %144

144:                                              ; preds = %135
  %145 = load i8, i8* %137, align 1
  %146 = getelementptr inbounds i8, i8* %136, i64 1
  %147 = load i8, i8* %136, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %137, i64 %133
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nuw nsw i32 %151, %148
  %153 = lshr i32 %152, 1
  %154 = trunc i32 %153 to i8
  %155 = add i8 %145, %154
  store i8 %155, i8* %137, align 1
  %156 = getelementptr inbounds i8, i8* %137, i64 1
  %157 = or i64 %138, 1
  br label %158

158:                                              ; preds = %135, %144
  %159 = phi i8* [ %136, %135 ], [ %146, %144 ]
  %160 = phi i8* [ %137, %135 ], [ %156, %144 ]
  %161 = phi i64 [ %138, %135 ], [ %157, %144 ]
  %162 = icmp eq i64 %141, %8
  br i1 %162, label %309, label %279

163:                                              ; preds = %132
  %164 = getelementptr i8, i8* %129, i64 %11
  %165 = getelementptr i8, i8* %130, i64 %11
  %166 = getelementptr i8, i8* %129, i64 %133
  %167 = shl nuw nsw i64 %8, 1
  %168 = sub i64 %10, %167
  %169 = getelementptr i8, i8* %129, i64 %168
  %170 = icmp ult i8* %129, %165
  %171 = icmp ult i8* %130, %164
  %172 = and i1 %170, %171
  %173 = icmp ult i8* %129, %169
  %174 = icmp ult i8* %166, %164
  %175 = and i1 %173, %174
  %176 = or i1 %172, %175
  br i1 %176, label %135, label %177

177:                                              ; preds = %163
  %178 = and i64 %11, -16
  %179 = getelementptr i8, i8* %130, i64 %178
  %180 = getelementptr i8, i8* %129, i64 %178
  %181 = add i64 %178, -16
  %182 = lshr exact i64 %181, 4
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 1
  %185 = icmp eq i64 %181, 0
  br i1 %185, label %227, label %186

186:                                              ; preds = %177
  %187 = sub nuw nsw i64 %183, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %224, %188 ]
  %190 = phi i64 [ %187, %186 ], [ %225, %188 ]
  %191 = getelementptr i8, i8* %130, i64 %189
  %192 = getelementptr i8, i8* %129, i64 %189
  %193 = bitcast i8* %192 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !93, !noalias !96
  %195 = bitcast i8* %191 to <16 x i8>*
  %196 = load <16 x i8>, <16 x i8>* %195, align 1, !alias.scope !99
  %197 = zext <16 x i8> %196 to <16 x i32>
  %198 = getelementptr inbounds i8, i8* %192, i64 %133
  %199 = bitcast i8* %198 to <16 x i8>*
  %200 = load <16 x i8>, <16 x i8>* %199, align 1, !alias.scope !100
  %201 = zext <16 x i8> %200 to <16 x i32>
  %202 = add nuw nsw <16 x i32> %201, %197
  %203 = lshr <16 x i32> %202, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %204 = trunc <16 x i32> %203 to <16 x i8>
  %205 = add <16 x i8> %194, %204
  %206 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %206, align 1, !alias.scope !93, !noalias !96
  %207 = or i64 %189, 16
  %208 = getelementptr i8, i8* %130, i64 %207
  %209 = getelementptr i8, i8* %129, i64 %207
  %210 = bitcast i8* %209 to <16 x i8>*
  %211 = load <16 x i8>, <16 x i8>* %210, align 1, !alias.scope !93, !noalias !96
  %212 = bitcast i8* %208 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 1, !alias.scope !99
  %214 = zext <16 x i8> %213 to <16 x i32>
  %215 = getelementptr inbounds i8, i8* %209, i64 %133
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !100
  %218 = zext <16 x i8> %217 to <16 x i32>
  %219 = add nuw nsw <16 x i32> %218, %214
  %220 = lshr <16 x i32> %219, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %221 = trunc <16 x i32> %220 to <16 x i8>
  %222 = add <16 x i8> %211, %221
  %223 = bitcast i8* %209 to <16 x i8>*
  store <16 x i8> %222, <16 x i8>* %223, align 1, !alias.scope !93, !noalias !96
  %224 = add i64 %189, 32
  %225 = add i64 %190, -2
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %188, !llvm.loop !101

227:                                              ; preds = %188, %177
  %228 = phi i64 [ 0, %177 ], [ %224, %188 ]
  %229 = icmp eq i64 %184, 0
  br i1 %229, label %247, label %230

230:                                              ; preds = %227
  %231 = getelementptr i8, i8* %130, i64 %228
  %232 = getelementptr i8, i8* %129, i64 %228
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1, !alias.scope !93, !noalias !96
  %235 = bitcast i8* %231 to <16 x i8>*
  %236 = load <16 x i8>, <16 x i8>* %235, align 1, !alias.scope !99
  %237 = zext <16 x i8> %236 to <16 x i32>
  %238 = getelementptr inbounds i8, i8* %232, i64 %133
  %239 = bitcast i8* %238 to <16 x i8>*
  %240 = load <16 x i8>, <16 x i8>* %239, align 1, !alias.scope !100
  %241 = zext <16 x i8> %240 to <16 x i32>
  %242 = add nuw nsw <16 x i32> %241, %237
  %243 = lshr <16 x i32> %242, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %244 = trunc <16 x i32> %243 to <16 x i8>
  %245 = add <16 x i8> %234, %244
  %246 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %245, <16 x i8>* %246, align 1, !alias.scope !93, !noalias !96
  br label %247

247:                                              ; preds = %227, %230
  %248 = icmp eq i64 %11, %178
  br i1 %248, label %309, label %135

249:                                              ; preds = %37, %249
  %250 = phi i8* [ %272, %249 ], [ %40, %37 ]
  %251 = phi i8* [ %276, %249 ], [ %41, %37 ]
  %252 = phi i64 [ %277, %249 ], [ %42, %37 ]
  %253 = load i8, i8* %251, align 1
  %254 = getelementptr inbounds i8, i8* %250, i64 1
  %255 = load i8, i8* %250, align 1
  %256 = lshr i8 %255, 1
  %257 = add i8 %256, %253
  store i8 %257, i8* %251, align 1
  %258 = getelementptr inbounds i8, i8* %251, i64 1
  %259 = load i8, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %250, i64 2
  %261 = load i8, i8* %254, align 1
  %262 = lshr i8 %261, 1
  %263 = add i8 %262, %259
  store i8 %263, i8* %258, align 1
  %264 = getelementptr inbounds i8, i8* %251, i64 2
  %265 = load i8, i8* %264, align 1
  %266 = getelementptr inbounds i8, i8* %250, i64 3
  %267 = load i8, i8* %260, align 1
  %268 = lshr i8 %267, 1
  %269 = add i8 %268, %265
  store i8 %269, i8* %264, align 1
  %270 = getelementptr inbounds i8, i8* %251, i64 3
  %271 = load i8, i8* %270, align 1
  %272 = getelementptr inbounds i8, i8* %250, i64 4
  %273 = load i8, i8* %266, align 1
  %274 = lshr i8 %273, 1
  %275 = add i8 %274, %271
  store i8 %275, i8* %270, align 1
  %276 = getelementptr inbounds i8, i8* %251, i64 4
  %277 = add nuw nsw i64 %252, 4
  %278 = icmp eq i64 %277, %8
  br i1 %278, label %128, label %249, !llvm.loop !102

279:                                              ; preds = %158, %279
  %280 = phi i8* [ %296, %279 ], [ %159, %158 ]
  %281 = phi i8* [ %306, %279 ], [ %160, %158 ]
  %282 = phi i64 [ %307, %279 ], [ %161, %158 ]
  %283 = load i8, i8* %281, align 1
  %284 = getelementptr inbounds i8, i8* %280, i64 1
  %285 = load i8, i8* %280, align 1
  %286 = zext i8 %285 to i32
  %287 = getelementptr inbounds i8, i8* %281, i64 %133
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i32
  %290 = add nuw nsw i32 %289, %286
  %291 = lshr i32 %290, 1
  %292 = trunc i32 %291 to i8
  %293 = add i8 %283, %292
  store i8 %293, i8* %281, align 1
  %294 = getelementptr inbounds i8, i8* %281, i64 1
  %295 = load i8, i8* %294, align 1
  %296 = getelementptr inbounds i8, i8* %280, i64 2
  %297 = load i8, i8* %284, align 1
  %298 = zext i8 %297 to i32
  %299 = getelementptr inbounds i8, i8* %294, i64 %133
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = add nuw nsw i32 %301, %298
  %303 = lshr i32 %302, 1
  %304 = trunc i32 %303 to i8
  %305 = add i8 %295, %304
  store i8 %305, i8* %294, align 1
  %306 = getelementptr inbounds i8, i8* %281, i64 2
  %307 = add nuw i64 %282, 2
  %308 = icmp eq i64 %307, %11
  br i1 %308, label %309, label %279, !llvm.loop !103

309:                                              ; preds = %158, %279, %247, %128
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @png_read_filter_row_paeth_1byte_pixel(%struct.png_row_info_struct* nocapture readonly, i8*, i8* nocapture readonly) #6 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = load i8, i8* %2, align 1
  %8 = zext i8 %7 to i32
  %9 = load i8, i8* %1, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %8
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %1, align 1
  %13 = icmp sgt i64 %5, 1
  br i1 %13, label %14, label %48

14:                                               ; preds = %3
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  br label %16

16:                                               ; preds = %14, %16
  %17 = phi i8* [ %21, %16 ], [ %2, %14 ]
  %18 = phi i8* [ %46, %16 ], [ %15, %14 ]
  %19 = phi i32 [ %24, %16 ], [ %8, %14 ]
  %20 = phi i32 [ %44, %16 ], [ %11, %14 ]
  %21 = getelementptr inbounds i8, i8* %17, i64 1
  %22 = and i32 %20, 255
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %24, %19
  %26 = sub nsw i32 %22, %19
  %27 = icmp slt i32 %25, 0
  %28 = sub nsw i32 0, %25
  %29 = select i1 %27, i32 %28, i32 %25
  %30 = icmp slt i32 %26, 0
  %31 = sub nsw i32 0, %26
  %32 = select i1 %30, i32 %31, i32 %26
  %33 = add nsw i32 %25, %26
  %34 = icmp slt i32 %33, 0
  %35 = sub nsw i32 0, %33
  %36 = select i1 %34, i32 %35, i32 %33
  %37 = icmp slt i32 %32, %29
  %38 = select i1 %37, i32 %24, i32 %22
  %39 = select i1 %37, i32 %32, i32 %29
  %40 = icmp slt i32 %36, %39
  %41 = select i1 %40, i32 %19, i32 %38
  %42 = load i8, i8* %18, align 1
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %41, %43
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %18, align 1
  %46 = getelementptr inbounds i8, i8* %18, i64 1
  %47 = icmp ult i8* %46, %6
  br i1 %47, label %16, label %48

48:                                               ; preds = %16, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @png_read_filter_row_paeth_multibyte_pixel(%struct.png_row_info_struct* nocapture readonly, i8*, i8* nocapture readonly) #6 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = add nuw nsw i64 %7, 7
  %9 = lshr i64 %8, 3
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %113, label %12

12:                                               ; preds = %3
  %13 = getelementptr i8, i8* %1, i64 1
  %14 = icmp ugt i8* %10, %13
  %15 = select i1 %14, i8* %10, i8* %13
  %16 = ptrtoint i8* %15 to i64
  %17 = sub i64 %16, %4
  %18 = icmp ult i64 %17, 32
  br i1 %18, label %101, label %19

19:                                               ; preds = %12
  %20 = getelementptr i8, i8* %1, i64 1
  %21 = icmp ugt i8* %10, %20
  %22 = select i1 %21, i8* %10, i8* %20
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = getelementptr i8, i8* %2, i64 %24
  %26 = icmp ugt i8* %25, %1
  %27 = icmp ugt i8* %22, %2
  %28 = and i1 %26, %27
  br i1 %28, label %101, label %29

29:                                               ; preds = %19
  %30 = and i64 %17, -32
  %31 = getelementptr i8, i8* %1, i64 %30
  %32 = getelementptr i8, i8* %2, i64 %30
  %33 = add i64 %30, -32
  %34 = lshr exact i64 %33, 5
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %29
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = getelementptr i8, i8* %1, i64 %41
  %44 = getelementptr i8, i8* %2, i64 %41
  %45 = bitcast i8* %43 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !104, !noalias !107
  %47 = getelementptr i8, i8* %43, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !104, !noalias !107
  %50 = bitcast i8* %44 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !107
  %52 = getelementptr i8, i8* %44, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !107
  %55 = add <16 x i8> %51, %46
  %56 = add <16 x i8> %54, %49
  %57 = bitcast i8* %43 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %57, align 1, !alias.scope !104, !noalias !107
  %58 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %58, align 1, !alias.scope !104, !noalias !107
  %59 = or i64 %41, 32
  %60 = getelementptr i8, i8* %1, i64 %59
  %61 = getelementptr i8, i8* %2, i64 %59
  %62 = bitcast i8* %60 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !104, !noalias !107
  %64 = getelementptr i8, i8* %60, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !104, !noalias !107
  %67 = bitcast i8* %61 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !alias.scope !107
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1, !alias.scope !107
  %72 = add <16 x i8> %68, %63
  %73 = add <16 x i8> %71, %66
  %74 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %74, align 1, !alias.scope !104, !noalias !107
  %75 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %75, align 1, !alias.scope !104, !noalias !107
  %76 = add i64 %41, 64
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !109

79:                                               ; preds = %40, %29
  %80 = phi i64 [ 0, %29 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

82:                                               ; preds = %79
  %83 = getelementptr i8, i8* %1, i64 %80
  %84 = getelementptr i8, i8* %2, i64 %80
  %85 = bitcast i8* %83 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !104, !noalias !107
  %87 = getelementptr i8, i8* %83, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !104, !noalias !107
  %90 = bitcast i8* %84 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !107
  %92 = getelementptr i8, i8* %84, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !107
  %95 = add <16 x i8> %91, %86
  %96 = add <16 x i8> %94, %89
  %97 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %97, align 1, !alias.scope !104, !noalias !107
  %98 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %98, align 1, !alias.scope !104, !noalias !107
  br label %99

99:                                               ; preds = %79, %82
  %100 = icmp eq i64 %17, %30
  br i1 %100, label %113, label %101

101:                                              ; preds = %99, %19, %12
  %102 = phi i8* [ %1, %19 ], [ %1, %12 ], [ %31, %99 ]
  %103 = phi i8* [ %2, %19 ], [ %2, %12 ], [ %32, %99 ]
  br label %104

104:                                              ; preds = %101, %104
  %105 = phi i8* [ %111, %104 ], [ %102, %101 ]
  %106 = phi i8* [ %108, %104 ], [ %103, %101 ]
  %107 = load i8, i8* %105, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 1
  %109 = load i8, i8* %106, align 1
  %110 = add i8 %109, %107
  %111 = getelementptr inbounds i8, i8* %105, i64 1
  store i8 %110, i8* %105, align 1
  %112 = icmp ult i8* %111, %10
  br i1 %112, label %104, label %113, !llvm.loop !110

113:                                              ; preds = %104, %99, %3
  %114 = phi i8* [ %2, %3 ], [ %32, %99 ], [ %108, %104 ]
  %115 = phi i8* [ %1, %3 ], [ %31, %99 ], [ %111, %104 ]
  %116 = ptrtoint i8* %115 to i64
  %117 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = icmp ult i8* %115, %119
  br i1 %120, label %121, label %232

121:                                              ; preds = %113
  %122 = sub nsw i64 0, %9
  %123 = sub i64 %118, %116
  %124 = getelementptr i8, i8* %1, i64 %123
  %125 = ptrtoint i8* %124 to i64
  %126 = icmp ult i8* %124, inttoptr (i64 16 to i8*)
  br i1 %126, label %196, label %127

127:                                              ; preds = %121
  %128 = getelementptr i8, i8* %114, i64 %122
  %129 = sub i64 %118, %116
  %130 = sub i64 %129, %9
  %131 = getelementptr i8, i8* %1, i64 %130
  %132 = ptrtoint i8* %131 to i64
  %133 = getelementptr i8, i8* %114, i64 %132
  %134 = getelementptr i8, i8* %115, i64 %122
  %135 = sub i64 %118, %9
  %136 = getelementptr i8, i8* %1, i64 %135
  %137 = sub i64 %118, %116
  %138 = getelementptr i8, i8* %1, i64 %137
  %139 = ptrtoint i8* %138 to i64
  %140 = getelementptr i8, i8* %114, i64 %139
  %141 = icmp ult i8* %115, %133
  %142 = icmp ult i8* %128, %119
  %143 = and i1 %141, %142
  %144 = icmp ult i8* %115, %136
  %145 = icmp ult i8* %134, %119
  %146 = and i1 %144, %145
  %147 = or i1 %143, %146
  %148 = icmp ult i8* %115, %140
  %149 = icmp ult i8* %114, %119
  %150 = and i1 %148, %149
  %151 = or i1 %147, %150
  br i1 %151, label %196, label %152

152:                                              ; preds = %127
  %153 = and i64 %125, -16
  %154 = getelementptr i8, i8* %115, i64 %153
  %155 = getelementptr i8, i8* %114, i64 %153
  br label %156

156:                                              ; preds = %156, %152
  %157 = phi i64 [ 0, %152 ], [ %192, %156 ]
  %158 = getelementptr i8, i8* %115, i64 %157
  %159 = getelementptr i8, i8* %114, i64 %157
  %160 = getelementptr inbounds i8, i8* %159, i64 %122
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1, !alias.scope !111
  %163 = zext <16 x i8> %162 to <16 x i32>
  %164 = getelementptr inbounds i8, i8* %158, i64 %122
  %165 = bitcast i8* %164 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 1, !alias.scope !114
  %167 = zext <16 x i8> %166 to <16 x i32>
  %168 = bitcast i8* %159 to <16 x i8>*
  %169 = load <16 x i8>, <16 x i8>* %168, align 1, !alias.scope !116
  %170 = zext <16 x i8> %169 to <16 x i32>
  %171 = sub nsw <16 x i32> %170, %163
  %172 = sub nsw <16 x i32> %167, %163
  %173 = icmp slt <16 x i32> %171, zeroinitializer
  %174 = sub nsw <16 x i32> zeroinitializer, %171
  %175 = select <16 x i1> %173, <16 x i32> %174, <16 x i32> %171
  %176 = icmp slt <16 x i32> %172, zeroinitializer
  %177 = sub nsw <16 x i32> zeroinitializer, %172
  %178 = select <16 x i1> %176, <16 x i32> %177, <16 x i32> %172
  %179 = add nsw <16 x i32> %171, %172
  %180 = icmp slt <16 x i32> %179, zeroinitializer
  %181 = sub nsw <16 x i32> zeroinitializer, %179
  %182 = select <16 x i1> %180, <16 x i32> %181, <16 x i32> %179
  %183 = icmp slt <16 x i32> %178, %175
  %184 = select <16 x i1> %183, <16 x i8> %169, <16 x i8> %166
  %185 = select <16 x i1> %183, <16 x i32> %178, <16 x i32> %175
  %186 = icmp slt <16 x i32> %182, %185
  %187 = select <16 x i1> %186, <16 x i8> %162, <16 x i8> %184
  %188 = bitcast i8* %158 to <16 x i8>*
  %189 = load <16 x i8>, <16 x i8>* %188, align 1, !alias.scope !118, !noalias !120
  %190 = add <16 x i8> %187, %189
  %191 = bitcast i8* %158 to <16 x i8>*
  store <16 x i8> %190, <16 x i8>* %191, align 1, !alias.scope !118, !noalias !120
  %192 = add i64 %157, 16
  %193 = icmp eq i64 %192, %153
  br i1 %193, label %194, label %156, !llvm.loop !121

194:                                              ; preds = %156
  %195 = icmp eq i64 %153, %125
  br i1 %195, label %232, label %196

196:                                              ; preds = %194, %127, %121
  %197 = phi i8* [ %115, %127 ], [ %115, %121 ], [ %154, %194 ]
  %198 = phi i8* [ %114, %127 ], [ %114, %121 ], [ %155, %194 ]
  br label %199

199:                                              ; preds = %196, %199
  %200 = phi i8* [ %230, %199 ], [ %197, %196 ]
  %201 = phi i8* [ %208, %199 ], [ %198, %196 ]
  %202 = getelementptr inbounds i8, i8* %201, i64 %122
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = getelementptr inbounds i8, i8* %200, i64 %122
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = getelementptr inbounds i8, i8* %201, i64 1
  %209 = load i8, i8* %201, align 1
  %210 = zext i8 %209 to i32
  %211 = sub nsw i32 %210, %204
  %212 = sub nsw i32 %207, %204
  %213 = icmp slt i32 %211, 0
  %214 = sub nsw i32 0, %211
  %215 = select i1 %213, i32 %214, i32 %211
  %216 = icmp slt i32 %212, 0
  %217 = sub nsw i32 0, %212
  %218 = select i1 %216, i32 %217, i32 %212
  %219 = add nsw i32 %211, %212
  %220 = icmp slt i32 %219, 0
  %221 = sub nsw i32 0, %219
  %222 = select i1 %220, i32 %221, i32 %219
  %223 = icmp slt i32 %218, %215
  %224 = select i1 %223, i8 %209, i8 %206
  %225 = select i1 %223, i32 %218, i32 %215
  %226 = icmp slt i32 %222, %225
  %227 = select i1 %226, i8 %203, i8 %224
  %228 = load i8, i8* %200, align 1
  %229 = add i8 %227, %228
  %230 = getelementptr inbounds i8, i8* %200, i64 1
  store i8 %229, i8* %200, align 1
  %231 = icmp eq i8* %230, %119
  br i1 %231, label %232, label %199, !llvm.loop !122

232:                                              ; preds = %199, %194, %113
  ret void
}

declare void @cr_png_init_filter_functions_sse2(%struct.png_struct_def*, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"cr_png_get_uint_31: argument 0"}
!4 = distinct !{!4, !"cr_png_get_uint_31"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"cr_png_check_chunk_length: argument 0"}
!7 = distinct !{!7, !"cr_png_check_chunk_length"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"cr_png_crc_error: argument 0"}
!10 = distinct !{!10, !"cr_png_crc_error"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"cr_png_get_uint_31: argument 0"}
!13 = distinct !{!13, !"cr_png_get_uint_31"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"cr_png_get_uint_31: argument 0"}
!16 = distinct !{!16, !"cr_png_get_uint_31"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"cr_png_crc_error: argument 0"}
!19 = distinct !{!19, !"cr_png_crc_error"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"png_read_buffer: argument 0"}
!22 = distinct !{!22, !"png_read_buffer"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"cr_png_zlib_inflate: argument 0"}
!25 = distinct !{!25, !"cr_png_zlib_inflate"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"png_read_buffer: argument 0"}
!28 = distinct !{!28, !"png_read_buffer"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"png_read_buffer: argument 0"}
!31 = distinct !{!31, !"png_read_buffer"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"png_decompress_chunk: argument 0"}
!34 = distinct !{!34, !"png_decompress_chunk"}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.isvectorized", i32 1}
!42 = distinct !{!42, !43}
!43 = !{!"llvm.loop.unroll.disable"}
!44 = distinct !{!44, !43}
!45 = distinct !{!45, !41}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !41}
!52 = distinct !{!52, !43}
!53 = distinct !{!53, !43}
!54 = distinct !{!54, !41}
!55 = !{!56}
!56 = distinct !{!56, !57, !"png_init_filter_functions: argument 0"}
!57 = distinct !{!57, !"png_init_filter_functions"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"png_read_buffer: argument 0"}
!60 = distinct !{!60, !"png_read_buffer"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"cr_png_zlib_inflate: argument 0"}
!63 = distinct !{!63, !"cr_png_zlib_inflate"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"cr_png_read_finish_IDAT: argument 0"}
!66 = distinct !{!66, !"cr_png_read_finish_IDAT"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"cr_png_zlib_inflate: argument 0"}
!69 = distinct !{!69, !"cr_png_zlib_inflate"}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !41}
!76 = distinct !{!76, !43}
!77 = distinct !{!77, !41}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !41}
!84 = distinct !{!84, !43}
!85 = distinct !{!85, !41}
!86 = distinct !{!86, !43}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !41}
!93 = !{!94}
!94 = distinct !{!94, !95}
!95 = distinct !{!95, !"LVerDomain"}
!96 = !{!97, !98}
!97 = distinct !{!97, !95}
!98 = distinct !{!98, !95}
!99 = !{!97}
!100 = !{!98}
!101 = distinct !{!101, !41}
!102 = distinct !{!102, !41}
!103 = distinct !{!103, !41}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !41}
!110 = distinct !{!110, !41}
!111 = !{!112}
!112 = distinct !{!112, !113}
!113 = distinct !{!113, !"LVerDomain"}
!114 = !{!115}
!115 = distinct !{!115, !113}
!116 = !{!117}
!117 = distinct !{!117, !113}
!118 = !{!119}
!119 = distinct !{!119, !113}
!120 = !{!112, !115, !117}
!121 = distinct !{!121, !41}
!122 = distinct !{!122, !41}
