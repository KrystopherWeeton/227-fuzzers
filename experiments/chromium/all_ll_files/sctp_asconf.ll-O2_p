; ModuleID = '../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_asconf.c'
source_filename = "../../third_party/usrsctp/usrsctplib/usrsctplib/netinet/sctp_asconf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sctp_base_info = type { %struct.sctp_epinfo, %struct.sctpstat, %struct.sctp_sysctl, i8, i8, %union.pthread_mutex_t, i64, i32, i32, i32, %union.pthread_mutexattr_t, i32 (i8*, i8*, i64, i8, i8)*, void (i8*, ...)*, i32 }
%struct.sctp_epinfo = type { %struct.sctpasochead*, i64, %struct.sctppcbhead*, i64, %struct.sctppcbhead*, i64, i32, %struct.sctp_vrflist*, i64, %struct.sctp_ifnlist*, i64, %struct.sctppcbhead, %struct.sctpladdr, i64, i64, i64, i64, i64, i64, i64, i64, i64, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.sctpvtaghead], %struct.sctp_timer, %struct.calloutlist }
%struct.sctpasochead = type { %struct.sctp_tcb* }
%struct.sctp_tcb = type { %struct.socket*, %struct.sctp_inpcb*, %struct.anon.37, %struct.anon.38, %struct.anon.39, %struct.anon.40, %struct.sctp_block_entry*, %struct.sctp_association, i32, i32, i32, i32, i16, i16, %union.pthread_mutex_t, %union.pthread_mutex_t }
%struct.socket = type { i32, i16, i16, i16, i16, i32, i8*, i32, %struct.socket*, %struct.anon.2, %struct.anon.3, %struct.anon.4, i16, i16, i16, i16, %union.pthread_cond_t, i16, %struct.sigio*, i64, %struct.anon.9, %struct.sockbuf, %struct.sockbuf, void (%struct.socket*, i8*, i32)*, i8*, %struct.ucred*, %struct.label*, %struct.label*, i32, i8*, %struct.so_accf* }
%struct.anon.2 = type { %struct.socket*, %struct.socket** }
%struct.anon.3 = type { %struct.socket*, %struct.socket** }
%struct.anon.4 = type { %struct.socket*, %struct.socket** }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.5, %union.anon.7, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.5 = type { i64 }
%union.anon.7 = type { i64 }
%struct.sigio = type opaque
%struct.anon.9 = type { %struct.aiocblist*, %struct.aiocblist** }
%struct.aiocblist = type opaque
%struct.sockbuf = type { %union.pthread_cond_t, %union.pthread_mutex_t, i16, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.mbuf = type { %struct.m_hdr, %union.anon }
%struct.m_hdr = type { %struct.mbuf*, %struct.mbuf*, i8*, i32, i32, i16, [6 x i8] }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.pkthdr, %union.anon.1 }
%struct.pkthdr = type { %struct.ifnet*, i8*, i32, i32, i32, i16, i16, %struct.packet_tags }
%struct.ifnet = type opaque
%struct.packet_tags = type { %struct.m_tag* }
%struct.m_tag = type { %struct.anon.0, i16, i16, i32, void (%struct.m_tag*)* }
%struct.anon.0 = type { %struct.m_tag* }
%union.anon.1 = type { %struct.m_ext, [128 x i8] }
%struct.m_ext = type { i8*, void (i8*, i8*)*, i8*, i32, i32*, i32 }
%struct.ucred = type { i32, i32, i32 }
%struct.label = type opaque
%struct.so_accf = type { %struct.accept_filter*, i8*, i8* }
%struct.accept_filter = type opaque
%struct.sctp_inpcb = type { %union.anon.10, %struct.sctp_readhead, %struct.anon.32, %struct.anon.33, i32, %struct.sctpladdr, %struct.sctp_laddr*, %struct.socket*, i64, i32, i32, %struct.sctp_pcb, %struct.sctpasochead*, i64, %struct.sctpasochead, %struct.sctp_iterator*, i32, i32, i32, i32, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_nonpad_sndrcvinfo, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %union.pthread_mutex_t, %union.pthread_mutex_t, %union.pthread_mutex_t, i32, i32, i16, i32, i32, i32, i32, %struct.sctpasochead*, i64, i32, i8*, i32 (%struct.socket*, %union.sctp_sockstore*, i8*, i64, %struct.sctp_rcvinfo*, i32, i8*)*, i32, i32 (%struct.socket*, i32, i8*)* }
%union.anon.10 = type { %struct.inpcb, [24 x i8] }
%struct.inpcb = type { %struct.anon.11, %struct.anon.12, i8*, %struct.inpcbinfo*, %struct.socket*, i32, i32, i8, i8, i8, i8, i32, [2 x i8*], %struct.in_conninfo, %struct.label*, %struct.inpcbpolicy*, %struct.anon.17, %struct.anon.18, %struct.anon.19, %struct.inpcbport*, %struct.mtx }
%struct.anon.11 = type { %struct.inpcb*, %struct.inpcb** }
%struct.anon.12 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbinfo = type { %struct.inpcbhead*, i32, %struct.inpcbhead*, i64, %struct.inpcbporthead*, i64, i16, i16, i16, %struct.uma_zone*, %struct.mtx, [2 x i8*] }
%struct.inpcbhead = type { %struct.inpcb* }
%struct.inpcbporthead = type { %struct.inpcbport* }
%struct.uma_zone = type opaque
%struct.in_conninfo = type { i8, i8, i16, %struct.in_endpoints }
%struct.in_endpoints = type { i16, i16, %union.anon.14, %union.anon.16 }
%union.anon.14 = type { %struct.in_addr_4in6 }
%struct.in_addr_4in6 = type { [3 x i32], %struct.in_addr }
%struct.in_addr = type { i32 }
%union.anon.16 = type { %struct.in_addr_4in6 }
%struct.inpcbpolicy = type opaque
%struct.anon.17 = type { i8, %struct.mbuf*, %struct.ip_moptions* }
%struct.ip_moptions = type opaque
%struct.anon.18 = type { %struct.mbuf*, %struct.ip6_pktopts*, %struct.icmp6_filter*, i32, i16 }
%struct.ip6_pktopts = type opaque
%struct.icmp6_filter = type opaque
%struct.anon.19 = type { %struct.inpcb*, %struct.inpcb** }
%struct.inpcbport = type { %struct.anon.13, %struct.inpcbhead, i16 }
%struct.anon.13 = type { %struct.inpcbport*, %struct.inpcbport** }
%struct.mtx = type { i32 }
%struct.sctp_readhead = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctp_queued_to_read = type { i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_nets*, %struct.mbuf*, %struct.mbuf*, %struct.mbuf*, %struct.sctp_tcb*, %struct.anon.28, %struct.anon.29, %struct.sctpchunk_listhead, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sctp_nets = type { %struct.anon.20, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_net_route, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, %struct.sctp_timer, %struct.timeval, %union.cc_control_data, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.timeval, i32, i32, i32, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.20 = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.sctp_net_route = type { %struct.sctp_rtentry*, %union.sctp_sockstore, %struct.sctp_ifa* }
%struct.sctp_rtentry = type { %struct.ifnet*, %struct.ifaddr*, %struct.sctp_rt_metrics_lite, i64, %struct.mtx }
%struct.ifaddr = type { %struct.sockaddr, %union.anon.22, %struct.iface*, %struct.ifaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.anon.22 = type { %struct.sockaddr }
%struct.iface = type opaque
%struct.sctp_rt_metrics_lite = type { i32 }
%union.sctp_sockstore = type { %struct.sockaddr_conn, [16 x i8] }
%struct.sockaddr_conn = type { i16, i16, i8* }
%struct.sctp_ifa = type { %struct.anon.23, %struct.anon.24, %struct.sctp_ifn*, i8*, %union.sctp_sockstore, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.anon.23 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.anon.24 = type { %struct.sctp_ifa*, %struct.sctp_ifa** }
%struct.sctp_ifn = type { %struct.sctp_ifalist, %struct.sctp_vrf*, %struct.anon.26, %struct.anon.27, i8*, i32, i32, i32, i32, i32, i32, i32, i32, [16 x i8] }
%struct.sctp_ifalist = type { %struct.sctp_ifa* }
%struct.sctp_vrf = type { %struct.anon.25, %struct.sctp_ifalist*, %struct.sctp_ifnlist, i32, i32, i32, i32, i64, i32 }
%struct.anon.25 = type { %struct.sctp_vrf*, %struct.sctp_vrf** }
%struct.sctp_ifnlist = type { %struct.sctp_ifn* }
%struct.anon.26 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%struct.anon.27 = type { %struct.sctp_ifn*, %struct.sctp_ifn** }
%union.cc_control_data = type { %struct.rtcc_cc }
%struct.rtcc_cc = type { %struct.timeval, i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i8, i8, i8, i8, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.anon.28 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.anon.29 = type { %struct.sctp_queued_to_read*, %struct.sctp_queued_to_read** }
%struct.sctpchunk_listhead = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.sctp_tmit_chunk = type { %union.anon.30, %struct.sctp_association*, %struct.timeval, %struct.mbuf*, %struct.mbuf*, %struct.sctp_nets*, %struct.anon.31, i32, i16, i16, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%union.anon.30 = type { %struct.sctp_data_chunkrec }
%struct.sctp_data_chunkrec = type { i32, i32, i16, i32, i32, i32, i32, %struct.timeval, i32, i8, i8, i8, i8, i8 }
%struct.anon.31 = type { %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** }
%struct.anon.32 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.anon.33 = type { %struct.sctp_inpcb*, %struct.sctp_inpcb** }
%struct.sctp_laddr = type { %struct.anon.34, %struct.sctp_ifa*, i32, %struct.timeval }
%struct.anon.34 = type { %struct.sctp_laddr*, %struct.sctp_laddr** }
%struct.sctp_pcb = type { i32, [2 x [8 x i32]], i32, [7 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.sctp_keyhead, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, i16, i32, i16, i16, i16, i16, i16, i16, i32, [20 x i8], [20 x i8], %struct.sctp_timer, i32, i32, i32, i32, i8, i32, i32, i32, i8, i8, i8, i16 }
%struct.sctp_keyhead = type { %struct.sctp_shared_key* }
%struct.sctp_shared_key = type { %struct.anon.35, %struct.sctp_key*, i32, i16, i8 }
%struct.anon.35 = type { %struct.sctp_shared_key*, %struct.sctp_shared_key** }
%struct.sctp_key = type { i32, [0 x i8] }
%struct.sctp_auth_chklist = type { [256 x i8], i8 }
%struct.sctp_hmaclist = type { i16, i16, [0 x i16] }
%struct.sctp_iterator = type { %struct.anon.36, %struct.sctp_timer, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_inpcb*, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, void (i8*, i32)*, i8*, i32, i32, i32, i32, i32, i8, i8 }
%struct.anon.36 = type { %struct.sctp_iterator*, %struct.sctp_iterator** }
%struct.sctp_nonpad_sndrcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32, i32, i16, i16 }
%struct.sctp_rcvinfo = type { i16, i16, i16, i32, i32, i32, i32, i32 }
%struct.anon.37 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.38 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.39 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.anon.40 = type { %struct.sctp_tcb*, %struct.sctp_tcb** }
%struct.sctp_block_entry = type { i32 }
%struct.sctp_association = type { i32, %struct.sctp_asconf_addrhead, %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval, %struct.sctp_nonpad_sndrcvinfo, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctp_timer, %struct.sctpladdr, %struct.sctp_ifa*, %struct.sctp_nets*, %struct.sctpnetlisthead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.sctpchunk_listhead, %struct.scheduling_data, %struct.sctp_iterator*, %struct.sctp_asconf_ackhead, %struct.sctp_tmit_chunk*, %struct.sctp_laddr*, %struct.sctp_stream_in*, %struct.sctp_stream_out*, i8*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_nets*, %struct.sctp_resethead, %struct.sctp_readhead, %struct.sctp_cc_functions, i32, %struct.sctp_ss_functions, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, %struct.sctp_queued_to_read*, i32, i32, i32, [2 x i32], [2 x i32], [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, %struct.sctp_auth_chklist*, %struct.sctp_auth_chklist*, %struct.sctp_hmaclist*, %struct.sctp_hmaclist*, %struct.sctp_keyhead, %struct.sctp_authinformation, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i8, i32, i32, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.sctp_scoping, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], i8, i8, i64, i32, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.timeval, %struct.timeval, [4 x i64], [4 x i64] }
%struct.sctp_asconf_addrhead = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr = type { %struct.anon.41, %struct.sctp_asconf_addr_param, %struct.sctp_ifa*, i8, i8 }
%struct.anon.41 = type { %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** }
%struct.sctp_asconf_addr_param = type { %struct.sctp_asconf_paramhdr, %struct.sctp_ipv6addr_param }
%struct.sctp_asconf_paramhdr = type { %struct.sctp_paramhdr, i32 }
%struct.sctp_paramhdr = type { i16, i16 }
%struct.sctp_ipv6addr_param = type { %struct.sctp_paramhdr, [16 x i8] }
%struct.sctpnetlisthead = type { %struct.sctp_nets*, %struct.sctp_nets** }
%struct.scheduling_data = type { %struct.sctp_stream_out*, %struct.sctp_stream_out*, %union.anon.47 }
%union.anon.47 = type { %struct.sctpwheel_listhead }
%struct.sctpwheel_listhead = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_asconf_ackhead = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_asconf_ack = type { %struct.anon.48, i32, %struct.sctp_nets*, %struct.mbuf*, i16 }
%struct.anon.48 = type { %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** }
%struct.sctp_stream_in = type { %struct.sctp_readhead, %struct.sctp_readhead, i32, i16, i8, i8 }
%struct.sctp_stream_out = type { %struct.sctp_streamhead, %union.scheduling_parameters, i32, [1 x i32], [1 x i32], i32, i32, i16, i8, i8 }
%struct.sctp_streamhead = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.sctp_stream_queue_pending = type { %struct.mbuf*, %struct.mbuf*, %struct.timeval, %struct.sctp_nets*, %struct.anon.42, %struct.anon.43, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i8 }
%struct.anon.42 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%struct.anon.43 = type { %struct.sctp_stream_queue_pending*, %struct.sctp_stream_queue_pending** }
%union.scheduling_parameters = type { %struct.ss_prio }
%struct.ss_prio = type { %struct.anon.45, i16 }
%struct.anon.45 = type { %struct.sctp_stream_out*, %struct.sctp_stream_out** }
%struct.sctp_resethead = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_stream_reset_list = type { %struct.anon.49, i32, i32, i32, [0 x i16] }
%struct.anon.49 = type { %struct.sctp_stream_reset_list*, %struct.sctp_stream_reset_list** }
%struct.sctp_cc_functions = type { void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_pktdrop_chunk*, i32*, i32*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_nets*, %struct.sctp_tmit_chunk*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)*, i32 (%struct.sctp_tcb*, i32, %struct.sctp_cc_option*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.timeval*)* }
%struct.sctp_pktdrop_chunk = type { %struct.sctp_chunkhdr, i32, i32, i16, i16, [0 x i8] }
%struct.sctp_chunkhdr = type { i8, i8, i16 }
%struct.sctp_cc_option = type { i32, %struct.sctp_assoc_value }
%struct.sctp_assoc_value = type { i32, i32 }
%struct.sctp_ss_functions = type { void (%struct.sctp_tcb*, %struct.sctp_association*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_association*, i32, i32)*, void (%struct.sctp_tcb*, %struct.sctp_stream_out*, %struct.sctp_stream_out*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, %struct.sctp_stream_queue_pending*, i32)*, %struct.sctp_stream_out* (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*, %struct.sctp_stream_out*, i32)*, void (%struct.sctp_tcb*, %struct.sctp_nets*, %struct.sctp_association*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16*)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*, %struct.sctp_stream_out*, i16)*, i32 (%struct.sctp_tcb*, %struct.sctp_association*)* }
%struct.sctp_authinformation = type { %struct.sctp_key*, i32, %struct.sctp_key*, %struct.sctp_key*, %struct.sctp_key*, i16, i16, i16 }
%struct.sctp_scoping = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.sctp_vrflist = type { %struct.sctp_vrf* }
%struct.sctppcbhead = type { %struct.sctp_inpcb* }
%struct.sctpladdr = type { %struct.sctp_laddr* }
%struct.sctpvtaghead = type { %struct.sctp_tagblock* }
%struct.sctp_tagblock = type { %struct.anon.50, [15 x %struct.sctp_timewait] }
%struct.anon.50 = type { %struct.sctp_tagblock*, %struct.sctp_tagblock** }
%struct.sctp_timewait = type { i32, i32, i16, i16 }
%struct.sctp_timer = type { %struct.sctp_callout, i32, i8*, i8*, i8*, i8*, i32, i32 }
%struct.sctp_callout = type { %struct.anon.21, i32, i8*, void (i8*)*, i32 }
%struct.anon.21 = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.calloutlist = type { %struct.sctp_callout*, %struct.sctp_callout** }
%struct.sctpstat = type { %struct.sctp_timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [11 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [31 x i32] }
%struct.sctp_timeval = type { i32, i32 }
%struct.sctp_sysctl = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_mutexattr_t = type { i32 }
%struct.sctp_asconf_chunk = type { %struct.sctp_chunkhdr, i32 }
%struct.sctp_asconf_ack_chunk = type { %struct.sctp_chunkhdr, i32 }

@system_base_info = external global %struct.sctp_base_info, align 8
@.str = private unnamed_addr constant [31 x i8] c"Never sent serial number %8.8x\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"Failed to initiate iterator for addr_mgmt_ep_sa\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"lo\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"process_initack_addrs: bad len (%d) type=%xh\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_handle_asconf(%struct.mbuf*, i32, %struct.sockaddr*, %struct.sctp_asconf_chunk* nocapture readonly, %struct.sctp_tcb*, i32) local_unnamed_addr #0 {
  %7 = alloca [512 x i8], align 16
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 512, i1 false)
  %9 = getelementptr inbounds %struct.sctp_asconf_chunk, %struct.sctp_asconf_chunk* %3, i64 0, i32 0, i32 2
  %10 = load i16, i16* %9, align 1
  %11 = tail call i16 @llvm.bswap.i16(i16 %10) #8
  %12 = icmp ult i16 %11, 8
  br i1 %12, label %310, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.sctp_asconf_chunk, %struct.sctp_asconf_chunk* %3, i64 0, i32 1
  %15 = load i32, i32* %14, align 1
  %16 = tail call i32 @llvm.bswap.i32(i32 %15) #8
  %17 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %4, i64 0, i32 7, i32 45
  %18 = load i32, i32* %17, align 4
  %19 = icmp ugt i32 %16, %18
  %20 = sub i32 %16, %18
  %21 = icmp ugt i32 %20, -2147483648
  %22 = and i1 %19, %21
  br i1 %22, label %310, label %23

23:                                               ; preds = %13
  %24 = icmp ugt i32 %18, %16
  %25 = sub i32 %18, %16
  %26 = icmp sgt i32 %25, -1
  %27 = and i1 %24, %26
  br i1 %27, label %310, label %28

28:                                               ; preds = %23
  %29 = icmp ne i32 %18, %16
  %30 = add i32 %18, 1
  %31 = icmp eq i32 %16, %30
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %310

33:                                               ; preds = %28
  store i32 %16, i32* %17, align 4
  %34 = load i16, i16* %9, align 1
  %35 = tail call i16 @llvm.bswap.i16(i16 %34) #8
  %36 = zext i16 %35 to i32
  %37 = add i32 %36, %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %70, label %39

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %4, i64 0, i32 7, i32 24, i32 0
  %41 = load %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** %40, align 8
  %42 = icmp eq %struct.sctp_asconf_ack* %41, null
  br i1 %42, label %70, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %4, i64 0, i32 7, i32 24, i32 1
  br label %45

45:                                               ; preds = %43, %68
  %46 = phi %struct.sctp_asconf_ack* [ %41, %43 ], [ %48, %68 ]
  %47 = getelementptr inbounds %struct.sctp_asconf_ack, %struct.sctp_asconf_ack* %46, i64 0, i32 0, i32 0
  %48 = load %struct.sctp_asconf_ack*, %struct.sctp_asconf_ack** %47, align 8
  %49 = getelementptr inbounds %struct.sctp_asconf_ack, %struct.sctp_asconf_ack* %46, i64 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, %16
  br i1 %51, label %70, label %52

52:                                               ; preds = %45
  %53 = icmp eq %struct.sctp_asconf_ack* %48, null
  %54 = getelementptr inbounds %struct.sctp_asconf_ack, %struct.sctp_asconf_ack* %46, i64 0, i32 0, i32 1
  %55 = bitcast %struct.sctp_asconf_ack*** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.sctp_asconf_ack, %struct.sctp_asconf_ack* %48, i64 0, i32 0, i32 1
  %58 = select i1 %53, %struct.sctp_asconf_ack*** %44, %struct.sctp_asconf_ack*** %57
  %59 = bitcast %struct.sctp_asconf_ack*** %58 to i64*
  store i64 %56, i64* %59, align 8
  %60 = bitcast %struct.sctp_asconf_ack* %46 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %struct.sctp_asconf_ack*** %54 to i64**
  %63 = load i64*, i64** %62, align 8
  store i64 %61, i64* %63, align 8
  %64 = getelementptr inbounds %struct.sctp_asconf_ack, %struct.sctp_asconf_ack* %46, i64 0, i32 3
  %65 = load %struct.mbuf*, %struct.mbuf** %64, align 8
  %66 = icmp eq %struct.mbuf* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %52
  tail call void @m_freem(%struct.mbuf* nonnull %65) #8
  br label %68

68:                                               ; preds = %52, %67
  %69 = bitcast %struct.sctp_asconf_ack* %46 to i8*
  tail call void @free(i8* %69) #8
  br i1 %53, label %70, label %45

70:                                               ; preds = %45, %68, %39, %33
  %71 = tail call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 8, i32 0, i32 1, i32 1, i32 1) #8
  %72 = icmp eq %struct.mbuf* %71, null
  br i1 %72, label %310, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %71, i64 0, i32 0, i32 2
  %75 = bitcast i8** %74 to %struct.sctp_asconf_ack_chunk**
  %76 = load %struct.sctp_asconf_ack_chunk*, %struct.sctp_asconf_ack_chunk** %75, align 8
  %77 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %76, i64 0, i32 0, i32 0
  store i8 -128, i8* %77, align 1
  %78 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %76, i64 0, i32 0, i32 1
  store i8 0, i8* %78, align 1
  %79 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %76, i64 0, i32 1
  store i32 %15, i32* %79, align 1
  %80 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %71, i64 0, i32 0, i32 3
  store i32 8, i32* %80, align 8
  %81 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %76, i64 0, i32 0, i32 2
  store i16 8, i16* %81, align 1
  %82 = add i32 %1, 8
  %83 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %82, i32 4, i8* nonnull %8) #8
  %84 = icmp eq i8* %83, null
  br i1 %84, label %85, label %86

85:                                               ; preds = %73
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

86:                                               ; preds = %73
  %87 = getelementptr inbounds i8, i8* %83, i64 2
  %88 = bitcast i8* %87 to i16*
  %89 = load i16, i16* %88, align 1
  %90 = call i16 @llvm.bswap.i16(i16 %89) #8
  %91 = zext i16 %90 to i32
  %92 = add nuw nsw i32 %91, 3
  %93 = and i32 %92, 131068
  %94 = add i32 %93, %82
  %95 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %94, i32 8, i8* nonnull %8) #8
  %96 = icmp eq i8* %95, null
  br i1 %96, label %270, label %97

97:                                               ; preds = %86, %267
  %98 = phi i32 [ %261, %267 ], [ %37, %86 ]
  %99 = phi i8* [ %268, %267 ], [ %95, %86 ]
  %100 = phi %struct.mbuf* [ %262, %267 ], [ %71, %86 ]
  %101 = phi i32 [ %265, %267 ], [ %94, %86 ]
  %102 = bitcast i8* %99 to i16*
  %103 = load i16, i16* %102, align 1
  %104 = call i16 @llvm.bswap.i16(i16 %103) #8
  %105 = getelementptr inbounds i8, i8* %99, i64 2
  %106 = bitcast i8* %105 to i16*
  %107 = load i16, i16* %106, align 1
  %108 = call i16 @llvm.bswap.i16(i16 %107) #8
  %109 = zext i16 %108 to i32
  %110 = add i32 %101, %109
  %111 = icmp ugt i32 %110, %98
  br i1 %111, label %112, label %113

112:                                              ; preds = %97
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

113:                                              ; preds = %97
  %114 = icmp ugt i16 %108, 512
  br i1 %114, label %115, label %116

115:                                              ; preds = %113
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

116:                                              ; preds = %113
  %117 = icmp ult i16 %108, 8
  br i1 %117, label %118, label %119

118:                                              ; preds = %116
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

119:                                              ; preds = %116
  %120 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %101, i32 %109, i8* nonnull %8) #8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

123:                                              ; preds = %119
  switch i16 %104, label %247 [
    i16 -16383, label %124
    i16 -16382, label %165
    i16 -16381, label %260
    i16 -16380, label %206
    i16 -16376, label %260
    i16 -16379, label %260
    i16 -16378, label %260
  ]

124:                                              ; preds = %123
  %125 = getelementptr inbounds i8, i8* %120, i64 2
  %126 = bitcast i8* %125 to i16*
  %127 = load i16, i16* %126, align 1
  %128 = call i16 @llvm.bswap.i16(i16 %127) #8
  %129 = icmp ult i16 %128, 12
  br i1 %129, label %260, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds i8, i8* %120, i64 4
  %132 = bitcast i8* %131 to i32*
  %133 = load i32, i32* %132, align 1
  %134 = zext i16 %128 to i64
  %135 = add i16 %128, 4
  %136 = add i16 %128, 12
  %137 = and i16 %128, 3
  %138 = icmp eq i16 %137, 0
  %139 = sub nuw nsw i16 4, %137
  %140 = select i1 %138, i16 0, i16 %139
  %141 = zext i16 %136 to i32
  %142 = zext i16 %140 to i32
  %143 = add nuw nsw i32 %142, %141
  %144 = icmp ugt i32 %143, 216
  br i1 %144, label %260, label %145

145:                                              ; preds = %130
  %146 = call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 %143, i32 0, i32 1, i32 1, i32 1) #8
  %147 = icmp eq %struct.mbuf* %146, null
  br i1 %147, label %260, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %146, i64 0, i32 0, i32 2
  %150 = bitcast i8** %149 to %struct.sctp_asconf_paramhdr**
  %151 = load %struct.sctp_asconf_paramhdr*, %struct.sctp_asconf_paramhdr** %150, align 8
  %152 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 0, i32 0, i32 0
  store i16 960, i16* %152, align 1
  %153 = call i16 @llvm.bswap.i16(i16 %136) #8
  %154 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 0, i32 0, i32 1
  store i16 %153, i16* %154, align 1
  %155 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 0, i32 1
  store i32 %133, i32* %155, align 1
  %156 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 1, i32 0, i32 0
  store i16 1792, i16* %156, align 1
  %157 = call i16 @llvm.bswap.i16(i16 %135) #8
  %158 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 1, i32 0, i32 1
  store i16 %157, i16* %158, align 1
  %159 = getelementptr %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %151, i64 1, i32 1
  %160 = bitcast i32* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* nonnull align 1 %120, i64 %134, i1 false) #8
  %161 = icmp eq i16 %140, 0
  br i1 %161, label %250, label %162

162:                                              ; preds = %148
  %163 = zext i16 %140 to i64
  %164 = getelementptr i8, i8* %160, i64 %134
  call void @llvm.memset.p0i8.i64(i8* align 1 %164, i8 0, i64 %163, i1 false) #8
  br label %250

165:                                              ; preds = %123
  %166 = getelementptr inbounds i8, i8* %120, i64 2
  %167 = bitcast i8* %166 to i16*
  %168 = load i16, i16* %167, align 1
  %169 = call i16 @llvm.bswap.i16(i16 %168) #8
  %170 = icmp ult i16 %169, 12
  br i1 %170, label %260, label %171

171:                                              ; preds = %165
  %172 = getelementptr inbounds i8, i8* %120, i64 4
  %173 = bitcast i8* %172 to i32*
  %174 = load i32, i32* %173, align 1
  %175 = zext i16 %169 to i64
  %176 = add i16 %169, 4
  %177 = add i16 %169, 12
  %178 = and i16 %169, 3
  %179 = icmp eq i16 %178, 0
  %180 = sub nuw nsw i16 4, %178
  %181 = select i1 %179, i16 0, i16 %180
  %182 = zext i16 %177 to i32
  %183 = zext i16 %181 to i32
  %184 = add nuw nsw i32 %183, %182
  %185 = icmp ugt i32 %184, 216
  br i1 %185, label %260, label %186

186:                                              ; preds = %171
  %187 = call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 %184, i32 0, i32 1, i32 1, i32 1) #8
  %188 = icmp eq %struct.mbuf* %187, null
  br i1 %188, label %260, label %189

189:                                              ; preds = %186
  %190 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %187, i64 0, i32 0, i32 2
  %191 = bitcast i8** %190 to %struct.sctp_asconf_paramhdr**
  %192 = load %struct.sctp_asconf_paramhdr*, %struct.sctp_asconf_paramhdr** %191, align 8
  %193 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 0, i32 0, i32 0
  store i16 960, i16* %193, align 1
  %194 = call i16 @llvm.bswap.i16(i16 %177) #8
  %195 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 0, i32 0, i32 1
  store i16 %194, i16* %195, align 1
  %196 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 0, i32 1
  store i32 %174, i32* %196, align 1
  %197 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 1, i32 0, i32 0
  store i16 1280, i16* %197, align 1
  %198 = call i16 @llvm.bswap.i16(i16 %176) #8
  %199 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 1, i32 0, i32 1
  store i16 %198, i16* %199, align 1
  %200 = getelementptr %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %192, i64 1, i32 1
  %201 = bitcast i32* %200 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %201, i8* nonnull align 1 %120, i64 %175, i1 false) #8
  %202 = icmp eq i16 %181, 0
  br i1 %202, label %250, label %203

203:                                              ; preds = %189
  %204 = zext i16 %181 to i64
  %205 = getelementptr i8, i8* %201, i64 %175
  call void @llvm.memset.p0i8.i64(i8* align 1 %205, i8 0, i64 %204, i1 false) #8
  br label %250

206:                                              ; preds = %123
  %207 = getelementptr inbounds i8, i8* %120, i64 2
  %208 = bitcast i8* %207 to i16*
  %209 = load i16, i16* %208, align 1
  %210 = call i16 @llvm.bswap.i16(i16 %209) #8
  %211 = icmp ult i16 %210, 12
  br i1 %211, label %260, label %212

212:                                              ; preds = %206
  %213 = getelementptr inbounds i8, i8* %120, i64 4
  %214 = bitcast i8* %213 to i32*
  %215 = load i32, i32* %214, align 1
  %216 = zext i16 %210 to i64
  %217 = add i16 %210, 4
  %218 = add i16 %210, 12
  %219 = and i16 %210, 3
  %220 = icmp eq i16 %219, 0
  %221 = sub nuw nsw i16 4, %219
  %222 = select i1 %220, i16 0, i16 %221
  %223 = zext i16 %218 to i32
  %224 = zext i16 %222 to i32
  %225 = add nuw nsw i32 %224, %223
  %226 = icmp ugt i32 %225, 216
  br i1 %226, label %260, label %227

227:                                              ; preds = %212
  %228 = call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 %225, i32 0, i32 1, i32 1, i32 1) #8
  %229 = icmp eq %struct.mbuf* %228, null
  br i1 %229, label %260, label %230

230:                                              ; preds = %227
  %231 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %228, i64 0, i32 0, i32 2
  %232 = bitcast i8** %231 to %struct.sctp_asconf_paramhdr**
  %233 = load %struct.sctp_asconf_paramhdr*, %struct.sctp_asconf_paramhdr** %232, align 8
  %234 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 0, i32 0, i32 0
  store i16 960, i16* %234, align 1
  %235 = call i16 @llvm.bswap.i16(i16 %218) #8
  %236 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 0, i32 0, i32 1
  store i16 %235, i16* %236, align 1
  %237 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 0, i32 1
  store i32 %215, i32* %237, align 1
  %238 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 1, i32 0, i32 0
  store i16 1280, i16* %238, align 1
  %239 = call i16 @llvm.bswap.i16(i16 %217) #8
  %240 = getelementptr inbounds %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 1, i32 0, i32 1
  store i16 %239, i16* %240, align 1
  %241 = getelementptr %struct.sctp_asconf_paramhdr, %struct.sctp_asconf_paramhdr* %233, i64 1, i32 1
  %242 = bitcast i32* %241 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %242, i8* nonnull align 1 %120, i64 %216, i1 false) #8
  %243 = icmp eq i16 %222, 0
  br i1 %243, label %250, label %244

244:                                              ; preds = %230
  %245 = zext i16 %222 to i64
  %246 = getelementptr i8, i8* %242, i64 %216
  call void @llvm.memset.p0i8.i64(i8* align 1 %246, i8 0, i64 %245, i1 false) #8
  br label %250

247:                                              ; preds = %123
  %248 = icmp sgt i16 %104, -1
  %249 = select i1 %248, i32 %101, i32 %98
  br label %260

250:                                              ; preds = %162, %148, %230, %244, %189, %203
  %251 = phi %struct.mbuf* [ %187, %203 ], [ %187, %189 ], [ %228, %244 ], [ %228, %230 ], [ %146, %148 ], [ %146, %162 ]
  %252 = phi i32 [ %184, %203 ], [ %184, %189 ], [ %225, %244 ], [ %225, %230 ], [ %143, %148 ], [ %143, %162 ]
  %253 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %251, i64 0, i32 0, i32 3
  store i32 %252, i32* %253, align 8
  %254 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %100, i64 0, i32 0, i32 0
  store %struct.mbuf* %251, %struct.mbuf** %254, align 8
  %255 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %251, i64 0, i32 0, i32 3
  %256 = load i32, i32* %255, align 8
  %257 = load i16, i16* %81, align 1
  %258 = trunc i32 %256 to i16
  %259 = add i16 %257, %258
  store i16 %259, i16* %81, align 1
  br label %260

260:                                              ; preds = %145, %130, %124, %227, %212, %206, %186, %171, %165, %247, %123, %123, %123, %123, %250
  %261 = phi i32 [ %98, %250 ], [ %98, %123 ], [ %98, %123 ], [ %98, %123 ], [ %98, %123 ], [ %249, %247 ], [ %98, %165 ], [ %98, %171 ], [ %98, %186 ], [ %98, %206 ], [ %98, %212 ], [ %98, %227 ], [ %98, %124 ], [ %98, %130 ], [ %98, %145 ]
  %262 = phi %struct.mbuf* [ %251, %250 ], [ %100, %123 ], [ %100, %123 ], [ %100, %123 ], [ %100, %123 ], [ %100, %247 ], [ %100, %165 ], [ %100, %171 ], [ %100, %186 ], [ %100, %206 ], [ %100, %212 ], [ %100, %227 ], [ %100, %124 ], [ %100, %130 ], [ %100, %145 ]
  %263 = add nuw nsw i32 %109, 3
  %264 = and i32 %263, 131068
  %265 = add i32 %264, %101
  %266 = icmp ult i32 %265, %261
  br i1 %266, label %267, label %270

267:                                              ; preds = %260
  %268 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %265, i32 8, i8* nonnull %8) #8
  %269 = icmp eq i8* %268, null
  br i1 %269, label %270, label %97

270:                                              ; preds = %267, %260, %86
  %271 = load i16, i16* %81, align 1
  %272 = call i16 @llvm.bswap.i16(i16 %271) #8
  store i16 %272, i16* %81, align 1
  %273 = load i64, i64* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 21), align 8
  %274 = call noalias i8* @malloc(i64 %273) #8
  %275 = icmp eq i8* %274, null
  br i1 %275, label %276, label %277

276:                                              ; preds = %270
  call void @m_freem(%struct.mbuf* nonnull %71) #8
  br label %310

277:                                              ; preds = %270
  %278 = getelementptr inbounds i8, i8* %274, i64 16
  %279 = bitcast i8* %278 to i32*
  store i32 %16, i32* %279, align 8
  %280 = getelementptr inbounds i8, i8* %274, i64 24
  %281 = bitcast i8* %280 to %struct.sctp_nets**
  store %struct.sctp_nets* null, %struct.sctp_nets** %281, align 8
  %282 = getelementptr inbounds i8, i8* %274, i64 32
  %283 = bitcast i8* %282 to %struct.mbuf**
  store %struct.mbuf* %71, %struct.mbuf** %283, align 8
  %284 = getelementptr inbounds i8, i8* %274, i64 40
  %285 = bitcast i8* %284 to i16*
  store i16 0, i16* %285, align 8
  br label %286

286:                                              ; preds = %277, %286
  %287 = phi i16 [ %292, %286 ], [ 0, %277 ]
  %288 = phi %struct.mbuf* [ %294, %286 ], [ %71, %277 ]
  %289 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %288, i64 0, i32 0, i32 3
  %290 = load i32, i32* %289, align 8
  %291 = trunc i32 %290 to i16
  %292 = add i16 %287, %291
  store i16 %292, i16* %285, align 8
  %293 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %288, i64 0, i32 0, i32 0
  %294 = load %struct.mbuf*, %struct.mbuf** %293, align 8
  %295 = icmp eq %struct.mbuf* %294, null
  br i1 %295, label %296, label %286

296:                                              ; preds = %286
  %297 = bitcast i8* %274 to %struct.sctp_asconf_ack**
  store %struct.sctp_asconf_ack* null, %struct.sctp_asconf_ack** %297, align 8
  %298 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %4, i64 0, i32 7, i32 24, i32 1
  %299 = bitcast %struct.sctp_asconf_ack*** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = getelementptr inbounds i8, i8* %274, i64 8
  %302 = bitcast i8* %301 to i64*
  store i64 %300, i64* %302, align 8
  %303 = inttoptr i64 %300 to i8**
  store i8* %274, i8** %303, align 8
  %304 = bitcast %struct.sctp_asconf_ack*** %298 to i8**
  store i8* %274, i8** %304, align 8
  %305 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %4, i64 0, i32 7, i32 34
  %306 = load %struct.sctp_nets*, %struct.sctp_nets** %305, align 8
  %307 = icmp eq %struct.sctp_nets* %306, null
  br i1 %307, label %308, label %310

308:                                              ; preds = %296
  %309 = call %struct.sctp_nets* @sctp_findnet(%struct.sctp_tcb* %4, %struct.sockaddr* %2) #8
  store %struct.sctp_nets* %309, %struct.sctp_nets** %305, align 8
  br label %310

310:                                              ; preds = %122, %118, %115, %112, %28, %296, %308, %70, %13, %23, %6, %276, %85
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @m_freem(%struct.mbuf*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare %struct.mbuf* @sctp_get_mbuf_for_msg(i32, i32, i32, i32, i32) local_unnamed_addr #2

declare i8* @sctp_m_getptr(%struct.mbuf*, i32, i32, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare %struct.sctp_nets* @sctp_findnet(%struct.sctp_tcb*, %struct.sockaddr*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_asconf_cleanup(%struct.sctp_tcb*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %3 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %2, align 8
  tail call void @sctp_timer_stop(i32 10, %struct.sctp_inpcb* %3, %struct.sctp_tcb* %0, %struct.sctp_nets* null, i32 -2147483646) #8
  %4 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 43
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 44
  store i32 %5, i32* %6, align 8
  tail call void @sctp_toss_old_asconf(%struct.sctp_tcb* %0) #8
  ret void
}

declare void @sctp_timer_stop(i32, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_nets*, i32) local_unnamed_addr #2

declare void @sctp_toss_old_asconf(%struct.sctp_tcb*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_assoc_immediate_retrans(%struct.sctp_tcb*, %struct.sctp_nets* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %1, i64 0, i32 37
  %4 = load i16, i16* %3, align 4
  %5 = and i16 %4, 512
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 15
  %9 = load %struct.sctp_nets*, %struct.sctp_nets** %8, align 8
  %10 = icmp eq %struct.sctp_nets* %9, null
  br i1 %10, label %52, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 20, i32 0
  %13 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %12, align 8
  %14 = icmp eq %struct.sctp_tmit_chunk* %13, null
  br i1 %14, label %52, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %17 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %16, align 8
  tail call void @sctp_timer_stop(i32 1, %struct.sctp_inpcb* %17, %struct.sctp_tcb* %0, %struct.sctp_nets* nonnull %9, i32 -2147483645) #8
  %18 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 140
  %19 = load i16, i16* %18, align 8
  %20 = add i16 %19, -1
  %21 = icmp sgt i16 %20, 0
  %22 = select i1 %21, i16 %20, i16 0
  store i16 %22, i16* %18, align 8
  %23 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %16, align 8
  %24 = load %struct.sctp_nets*, %struct.sctp_nets** %8, align 8
  %25 = tail call i32 @sctp_t3rxt_timer(%struct.sctp_inpcb* %23, %struct.sctp_tcb* %0, %struct.sctp_nets* %24) #8
  %26 = icmp eq i32 %25, 0
  %27 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %16, align 8
  br i1 %26, label %31, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %27, i64 0, i32 37
  %30 = atomicrmw add i32* %29, i32 -1 seq_cst
  br label %52

31:                                               ; preds = %15
  tail call void @sctp_chunk_output(%struct.sctp_inpcb* %27, %struct.sctp_tcb* %0, i32 1, i32 0) #8
  %32 = load i16, i16* %18, align 8
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %34, label %52

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 86
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %34
  %39 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %12, align 8
  %40 = icmp eq %struct.sctp_tmit_chunk* %39, null
  br i1 %40, label %52, label %45

41:                                               ; preds = %45
  %42 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %46, i64 0, i32 6, i32 0
  %43 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %42, align 8
  %44 = icmp eq %struct.sctp_tmit_chunk* %43, null
  br i1 %44, label %52, label %45

45:                                               ; preds = %38, %41
  %46 = phi %struct.sctp_tmit_chunk* [ %43, %41 ], [ %39, %38 ]
  %47 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %46, i64 0, i32 5
  %48 = load %struct.sctp_nets*, %struct.sctp_nets** %47, align 8
  %49 = icmp eq %struct.sctp_nets* %48, null
  br i1 %49, label %41, label %50

50:                                               ; preds = %45
  %51 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %16, align 8
  tail call void @sctp_timer_start(i32 1, %struct.sctp_inpcb* %51, %struct.sctp_tcb* %0, %struct.sctp_nets* nonnull %48) #8
  br label %52

52:                                               ; preds = %41, %38, %11, %31, %34, %50, %7, %2, %28
  ret void
}

declare i32 @sctp_t3rxt_timer(%struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_nets*) local_unnamed_addr #2

declare void @sctp_chunk_output(%struct.sctp_inpcb*, %struct.sctp_tcb*, i32, i32) local_unnamed_addr #2

declare void @sctp_timer_start(i32, %struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.sctp_nets*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_net_immediate_retrans(%struct.sctp_tcb*, %struct.sctp_nets*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %4 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %3, align 8
  tail call void @sctp_timer_stop(i32 1, %struct.sctp_inpcb* %4, %struct.sctp_tcb* %0, %struct.sctp_nets* %1, i32 -2147483644) #8
  %5 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 37, i32 0
  %6 = load void (%struct.sctp_tcb*, %struct.sctp_nets*)*, void (%struct.sctp_tcb*, %struct.sctp_nets*)** %5, align 8
  tail call void %6(%struct.sctp_tcb* %0, %struct.sctp_nets* %1) #8
  %7 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %1, i64 0, i32 40
  store i16 0, i16* %7, align 2
  %8 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 20, i32 0
  %9 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %8, align 8
  %10 = icmp eq %struct.sctp_tmit_chunk* %9, null
  br i1 %10, label %59, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 88
  %13 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 92
  %14 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 93
  %15 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %1, i64 0, i32 34
  %16 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 197
  br label %17

17:                                               ; preds = %11, %55
  %18 = phi %struct.sctp_tmit_chunk* [ %9, %11 ], [ %57, %55 ]
  %19 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %18, i64 0, i32 5
  %20 = load %struct.sctp_nets*, %struct.sctp_nets** %19, align 8
  %21 = icmp eq %struct.sctp_nets* %20, %1
  br i1 %21, label %22, label %55

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %18, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = icmp slt i32 %24, 4
  br i1 %25, label %26, label %55

26:                                               ; preds = %22
  store i32 4, i32* %23, align 8
  %27 = load i32, i32* %12, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %12, align 4
  %29 = load %struct.sctp_nets*, %struct.sctp_nets** %19, align 8
  %30 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %29, i64 0, i32 18
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %18, i64 0, i32 11
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = tail call i32 @llvm.usub.sat.i32(i32 %31, i32 %34)
  store i32 %35, i32* %30, align 4
  %36 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %18, i64 0, i32 20
  store i8 0, i8* %36, align 2
  %37 = load i32, i32* %13, align 4
  %38 = load i16, i16* %32, align 2
  %39 = zext i16 %38 to i32
  %40 = icmp ult i32 %37, %39
  br i1 %40, label %47, label %41

41:                                               ; preds = %26
  %42 = sub i32 %37, %39
  store i32 %42, i32* %13, align 4
  %43 = load i32, i32* %14, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %41
  %46 = add i32 %43, -1
  br label %48

47:                                               ; preds = %26
  store i32 0, i32* %13, align 4
  br label %48

48:                                               ; preds = %47, %45
  %49 = phi i32 [ %46, %45 ], [ 0, %47 ]
  store i32 %49, i32* %14, align 8
  br label %50

50:                                               ; preds = %48, %41
  %51 = load i32, i32* %15, align 8
  %52 = add i32 %51, 1
  store i32 %52, i32* %15, align 8
  %53 = load i32, i32* %16, align 8
  %54 = add i32 %53, 1
  store i32 %54, i32* %16, align 8
  br label %55

55:                                               ; preds = %17, %50, %22
  %56 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %18, i64 0, i32 6, i32 0
  %57 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %56, align 8
  %58 = icmp eq %struct.sctp_tmit_chunk* %57, null
  br i1 %58, label %59, label %17

59:                                               ; preds = %55, %2
  %60 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %1, i64 0, i32 34
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %3, align 8
  tail call void @sctp_chunk_output(%struct.sctp_inpcb* %64, %struct.sctp_tcb* %0, i32 1, i32 0) #8
  br label %65

65:                                               ; preds = %59, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_handle_asconf_ack(%struct.mbuf*, i32, %struct.sctp_asconf_ack_chunk* nocapture readonly, %struct.sctp_tcb*, %struct.sctp_nets*, i32* nocapture) local_unnamed_addr #0 {
  %7 = alloca [512 x i8], align 16
  %8 = alloca [256 x i8], align 16
  %9 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 512, i1 false)
  %10 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %2, i64 0, i32 0, i32 2
  %11 = load i16, i16* %10, align 1
  %12 = tail call i16 @llvm.bswap.i16(i16 %11) #8
  %13 = icmp ult i16 %12, 8
  br i1 %13, label %190, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.sctp_asconf_ack_chunk, %struct.sctp_asconf_ack_chunk* %2, i64 0, i32 1
  %16 = load i32, i32* %15, align 1
  %17 = tail call i32 @llvm.bswap.i32(i32 %16) #8
  %18 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 43
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 1
  %21 = icmp eq i32 %17, %20
  br i1 %21, label %22, label %31

22:                                               ; preds = %14
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -86, i64 256, i1 false)
  %24 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %23, i64 256, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), i32 %17) #8
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i8 0, i8* %23, align 16
  br label %27

27:                                               ; preds = %26, %22
  %28 = call %struct.mbuf* @sctp_generate_cause(i16 zeroext 13, i8* nonnull %23) #8
  %29 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 1
  %30 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %29, align 8
  call void @sctp_abort_an_association(%struct.sctp_inpcb* %30, %struct.sctp_tcb* %3, %struct.mbuf* %28, i32 0) #8
  store i32 1, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #8
  br label %190

31:                                               ; preds = %14
  %32 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 44
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  %35 = icmp eq i32 %17, %34
  br i1 %35, label %36, label %190

36:                                               ; preds = %31
  %37 = add i32 %19, -1
  %38 = icmp eq i32 %17, %37
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 1
  %41 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %40, align 8
  tail call void @sctp_timer_stop(i32 10, %struct.sctp_inpcb* %41, %struct.sctp_tcb* %3, %struct.sctp_nets* null, i32 -2147483643) #8
  %42 = load i16, i16* %10, align 1
  %43 = tail call i16 @llvm.bswap.i16(i16 %42) #8
  br label %44

44:                                               ; preds = %39, %36
  %45 = phi i16 [ %43, %39 ], [ %12, %36 ]
  %46 = add i16 %45, -8
  %47 = icmp ugt i16 %46, 7
  br i1 %47, label %48, label %144

48:                                               ; preds = %44
  %49 = add i32 %1, 8
  %50 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 1, i32 0
  %51 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 1, i32 1
  br label %52

52:                                               ; preds = %48, %137
  %53 = phi i32 [ 0, %48 ], [ %133, %137 ]
  %54 = phi i16 [ %46, %48 ], [ %139, %137 ]
  %55 = phi i32 [ %49, %48 ], [ %140, %137 ]
  %56 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %55, i32 8, i8* nonnull %9) #8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %190, label %58

58:                                               ; preds = %52
  %59 = bitcast i8* %56 to i16*
  %60 = load i16, i16* %59, align 1
  %61 = call i16 @llvm.bswap.i16(i16 %60) #8
  %62 = getelementptr inbounds i8, i8* %56, i64 2
  %63 = bitcast i8* %62 to i16*
  %64 = load i16, i16* %63, align 1
  %65 = call i16 @llvm.bswap.i16(i16 %64) #8
  %66 = zext i16 %65 to i32
  %67 = zext i16 %54 to i32
  %68 = icmp ugt i16 %65, %54
  %69 = add i16 %65, -8
  %70 = icmp ugt i16 %69, 504
  %71 = or i1 %68, %70
  br i1 %71, label %190, label %72

72:                                               ; preds = %58
  %73 = call i8* @sctp_m_getptr(%struct.mbuf* %0, i32 %55, i32 %66, i8* nonnull %9) #8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %190, label %75

75:                                               ; preds = %72
  %76 = getelementptr inbounds i8, i8* %73, i64 4
  %77 = bitcast i8* %76 to i32*
  %78 = load i32, i32* %77, align 1
  switch i16 %61, label %132 [
    i16 -16381, label %79
    i16 -16379, label %115
  ]

79:                                               ; preds = %75
  %80 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %50, align 8
  %81 = icmp eq %struct.sctp_asconf_addr* %80, null
  br i1 %81, label %132, label %82

82:                                               ; preds = %79, %91
  %83 = phi %struct.sctp_asconf_addr* [ %93, %91 ], [ %80, %79 ]
  %84 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 1, i32 0, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, %78
  br i1 %86, label %87, label %91

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 3
  %89 = load i8, i8* %88, align 8
  %90 = icmp eq i8 %89, 1
  br i1 %90, label %95, label %91

91:                                               ; preds = %87, %82
  %92 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 0, i32 0
  %93 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %92, align 8
  %94 = icmp eq %struct.sctp_asconf_addr* %93, null
  br i1 %94, label %132, label %82

95:                                               ; preds = %87
  %96 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 0, i32 0
  %97 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %96, align 8
  %98 = icmp eq %struct.sctp_asconf_addr* %97, null
  %99 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 0, i32 1
  %100 = bitcast %struct.sctp_asconf_addr*** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %97, i64 0, i32 0, i32 1
  %103 = select i1 %98, %struct.sctp_asconf_addr*** %51, %struct.sctp_asconf_addr*** %102
  %104 = bitcast %struct.sctp_asconf_addr*** %103 to i64*
  store i64 %101, i64* %104, align 8
  %105 = bitcast %struct.sctp_asconf_addr* %83 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %struct.sctp_asconf_addr*** %99 to i64**
  %108 = load i64*, i64** %107, align 8
  store i64 %106, i64* %108, align 8
  %109 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %83, i64 0, i32 2
  %110 = load %struct.sctp_ifa*, %struct.sctp_ifa** %109, align 8
  %111 = icmp eq %struct.sctp_ifa* %110, null
  br i1 %111, label %113, label %112

112:                                              ; preds = %95
  call void @sctp_free_ifa(%struct.sctp_ifa* nonnull %110) #8
  br label %113

113:                                              ; preds = %95, %112
  %114 = bitcast %struct.sctp_asconf_addr* %83 to i8*
  call void @free(i8* %114) #8
  br label %132

115:                                              ; preds = %75
  %116 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %50, align 8
  %117 = icmp eq %struct.sctp_asconf_addr* %116, null
  br i1 %117, label %132, label %118

118:                                              ; preds = %115, %127
  %119 = phi %struct.sctp_asconf_addr* [ %129, %127 ], [ %116, %115 ]
  %120 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %119, i64 0, i32 1, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, %78
  br i1 %122, label %123, label %127

123:                                              ; preds = %118
  %124 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %119, i64 0, i32 3
  %125 = load i8, i8* %124, align 8
  %126 = icmp eq i8 %125, 1
  br i1 %126, label %131, label %127

127:                                              ; preds = %123, %118
  %128 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %119, i64 0, i32 0, i32 0
  %129 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %128, align 8
  %130 = icmp eq %struct.sctp_asconf_addr* %129, null
  br i1 %130, label %132, label %118

131:                                              ; preds = %123
  call fastcc void @sctp_asconf_process_param_ack(%struct.sctp_tcb* %3, %struct.sctp_asconf_addr* nonnull %119, i32 1)
  br label %132

132:                                              ; preds = %127, %91, %115, %79, %75, %131, %113
  %133 = phi i32 [ %53, %75 ], [ %53, %131 ], [ %78, %113 ], [ %78, %79 ], [ %53, %115 ], [ %78, %91 ], [ %53, %127 ]
  %134 = add nuw nsw i32 %66, 3
  %135 = and i32 %134, 131068
  %136 = icmp ult i32 %135, %67
  br i1 %136, label %137, label %142

137:                                              ; preds = %132
  %138 = trunc i32 %135 to i16
  %139 = sub i16 %54, %138
  %140 = add i32 %135, %55
  %141 = icmp ugt i16 %139, 7
  br i1 %141, label %52, label %142

142:                                              ; preds = %137, %132
  %143 = icmp eq i32 %133, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %44, %142
  br label %145

145:                                              ; preds = %142, %144
  %146 = phi i32 [ -1, %144 ], [ %133, %142 ]
  %147 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 1, i32 0
  %148 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %147, align 8
  %149 = icmp eq %struct.sctp_asconf_addr* %148, null
  br i1 %149, label %184, label %150

150:                                              ; preds = %145
  %151 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %3, i64 0, i32 7, i32 1, i32 1
  br label %152

152:                                              ; preds = %150, %182
  %153 = phi %struct.sctp_asconf_addr* [ %148, %150 ], [ %155, %182 ]
  %154 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %153, i64 0, i32 0, i32 0
  %155 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %154, align 8
  %156 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %153, i64 0, i32 3
  %157 = load i8, i8* %156, align 8
  %158 = icmp eq i8 %157, 1
  br i1 %158, label %159, label %184

159:                                              ; preds = %152
  %160 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %153, i64 0, i32 1, i32 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = icmp ult i32 %161, %146
  br i1 %162, label %163, label %164

163:                                              ; preds = %159
  call fastcc void @sctp_asconf_process_param_ack(%struct.sctp_tcb* %3, %struct.sctp_asconf_addr* nonnull %153, i32 1)
  br label %182

164:                                              ; preds = %159
  %165 = icmp eq %struct.sctp_asconf_addr* %155, null
  %166 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %153, i64 0, i32 0, i32 1
  %167 = bitcast %struct.sctp_asconf_addr*** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %155, i64 0, i32 0, i32 1
  %170 = select i1 %165, %struct.sctp_asconf_addr*** %151, %struct.sctp_asconf_addr*** %169
  %171 = bitcast %struct.sctp_asconf_addr*** %170 to i64*
  store i64 %168, i64* %171, align 8
  %172 = bitcast %struct.sctp_asconf_addr* %153 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %struct.sctp_asconf_addr*** %166 to i64**
  %175 = load i64*, i64** %174, align 8
  store i64 %173, i64* %175, align 8
  %176 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %153, i64 0, i32 2
  %177 = load %struct.sctp_ifa*, %struct.sctp_ifa** %176, align 8
  %178 = icmp eq %struct.sctp_ifa* %177, null
  br i1 %178, label %180, label %179

179:                                              ; preds = %164
  call void @sctp_free_ifa(%struct.sctp_ifa* nonnull %177) #8
  br label %180

180:                                              ; preds = %164, %179
  %181 = bitcast %struct.sctp_asconf_addr* %153 to i8*
  call void @free(i8* %181) #8
  br label %182

182:                                              ; preds = %180, %163
  %183 = icmp eq %struct.sctp_asconf_addr* %155, null
  br i1 %183, label %184, label %152

184:                                              ; preds = %152, %182, %145
  %185 = load i32, i32* %32, align 8
  %186 = add i32 %185, 1
  store i32 %186, i32* %32, align 8
  call void @sctp_toss_old_asconf(%struct.sctp_tcb* %3) #8
  %187 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %147, align 8
  %188 = icmp eq %struct.sctp_asconf_addr* %187, null
  br i1 %188, label %190, label %189

189:                                              ; preds = %184
  call void @sctp_send_asconf(%struct.sctp_tcb* %3, %struct.sctp_nets* %4, i32 0) #8
  br label %190

190:                                              ; preds = %72, %58, %52, %184, %189, %31, %6, %27
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #8
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #4

declare %struct.mbuf* @sctp_generate_cause(i16 zeroext, i8*) local_unnamed_addr #2

declare void @sctp_abort_an_association(%struct.sctp_inpcb*, %struct.sctp_tcb*, %struct.mbuf*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @sctp_asconf_process_param_ack(%struct.sctp_tcb*, %struct.sctp_asconf_addr* nocapture, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, -16383
  br i1 %6, label %7, label %144

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %1, i64 0, i32 2
  %9 = load %struct.sctp_ifa*, %struct.sctp_ifa** %8, align 8
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %144, label %11

11:                                               ; preds = %7
  tail call void @sctp_del_local_addr_restricted(%struct.sctp_tcb* %0, %struct.sctp_ifa* %9) #8
  %12 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %13 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %12, align 8
  %14 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %13, i64 0, i32 10
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %101, label %18

18:                                               ; preds = %11
  %19 = tail call i32 @sctp_local_addr_count(%struct.sctp_tcb* %0) #8
  %20 = icmp eq i32 %19, 1
  %21 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 16, i32 0
  %22 = load %struct.sctp_nets*, %struct.sctp_nets** %21, align 8
  %23 = icmp eq %struct.sctp_nets* %22, null
  br i1 %20, label %25, label %24

24:                                               ; preds = %18
  br i1 %23, label %144, label %59

25:                                               ; preds = %18
  br i1 %23, label %144, label %26

26:                                               ; preds = %25, %55
  %27 = phi %struct.sctp_nets* [ %57, %55 ], [ %22, %25 ]
  %28 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %27, i64 0, i32 3, i32 0
  %29 = load %struct.sctp_rtentry*, %struct.sctp_rtentry** %28, align 8
  %30 = icmp eq %struct.sctp_rtentry* %29, null
  br i1 %30, label %41, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.sctp_rtentry, %struct.sctp_rtentry* %29, i64 0, i32 3
  %33 = load i64, i64* %32, align 8
  %34 = icmp sgt i64 %33, 1
  %35 = add nsw i64 %33, -1
  store i64 %35, i64* %32, align 8
  %36 = icmp sgt i64 %35, 0
  %37 = or i1 %34, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %31
  %39 = bitcast %struct.sctp_rtentry* %29 to i8*
  tail call void @free(i8* %39) #8
  br label %40

40:                                               ; preds = %38, %31
  store %struct.sctp_rtentry* null, %struct.sctp_rtentry** %28, align 8
  br label %41

41:                                               ; preds = %40, %26
  %42 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %27, i64 0, i32 47
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %27, i64 0, i32 3, i32 2
  %47 = load %struct.sctp_ifa*, %struct.sctp_ifa** %46, align 8
  tail call void @sctp_free_ifa(%struct.sctp_ifa* %47) #8
  store %struct.sctp_ifa* null, %struct.sctp_ifa** %46, align 8
  store i8 0, i8* %42, align 1
  br label %48

48:                                               ; preds = %45, %41
  %49 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %12, align 8
  %50 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %49, i64 0, i32 10
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %48
  tail call void @sctp_net_immediate_retrans(%struct.sctp_tcb* %0, %struct.sctp_nets* nonnull %27) #8
  br label %55

55:                                               ; preds = %54, %48
  %56 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %27, i64 0, i32 0, i32 0
  %57 = load %struct.sctp_nets*, %struct.sctp_nets** %56, align 8
  %58 = icmp eq %struct.sctp_nets* %57, null
  br i1 %58, label %144, label %26

59:                                               ; preds = %24, %97
  %60 = phi %struct.sctp_nets* [ %99, %97 ], [ %22, %24 ]
  %61 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %60, i64 0, i32 3
  %62 = getelementptr inbounds %struct.sctp_net_route, %struct.sctp_net_route* %61, i64 0, i32 0
  %63 = load %struct.sctp_rtentry*, %struct.sctp_rtentry** %62, align 8
  %64 = icmp eq %struct.sctp_rtentry* %63, null
  br i1 %64, label %75, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.sctp_rtentry, %struct.sctp_rtentry* %63, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = icmp sgt i64 %67, 1
  %69 = add nsw i64 %67, -1
  store i64 %69, i64* %66, align 8
  %70 = icmp sgt i64 %69, 0
  %71 = or i1 %68, %70
  br i1 %71, label %74, label %72

72:                                               ; preds = %65
  %73 = bitcast %struct.sctp_rtentry* %63 to i8*
  tail call void @free(i8* %73) #8
  br label %74

74:                                               ; preds = %72, %65
  store %struct.sctp_rtentry* null, %struct.sctp_rtentry** %62, align 8
  br label %75

75:                                               ; preds = %74, %59
  %76 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %60, i64 0, i32 47
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %88, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %60, i64 0, i32 3, i32 2
  %81 = load %struct.sctp_ifa*, %struct.sctp_ifa** %80, align 8
  tail call void @sctp_free_ifa(%struct.sctp_ifa* %81) #8
  store %struct.sctp_ifa* null, %struct.sctp_ifa** %80, align 8
  store i8 0, i8* %76, align 1
  %82 = load %struct.sctp_rtentry*, %struct.sctp_rtentry** %62, align 8
  %83 = icmp eq %struct.sctp_rtentry* %82, null
  br i1 %83, label %88, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.sctp_rtentry, %struct.sctp_rtentry* %82, i64 0, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = add nsw i64 %86, 1
  store i64 %87, i64* %85, align 8
  br label %97

88:                                               ; preds = %79, %75
  %89 = tail call noalias i8* @malloc(i64 40) #8
  %90 = bitcast %struct.sctp_net_route* %61 to i8**
  store i8* %89, i8** %90, align 8
  %91 = icmp eq i8* %89, null
  br i1 %91, label %97, label %92

92:                                               ; preds = %88
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 0, i64 40, i1 false) #8
  %93 = getelementptr inbounds i8, i8* %89, i64 24
  %94 = bitcast i8* %93 to i64*
  store i64 1, i64* %94, align 8
  %95 = getelementptr inbounds i8, i8* %89, i64 16
  %96 = bitcast i8* %95 to i32*
  store i32 1500, i32* %96, align 8
  br label %97

97:                                               ; preds = %92, %88, %84
  %98 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %60, i64 0, i32 0, i32 0
  %99 = load %struct.sctp_nets*, %struct.sctp_nets** %98, align 8
  %100 = icmp eq %struct.sctp_nets* %99, null
  br i1 %100, label %144, label %59

101:                                              ; preds = %11
  %102 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %9, i64 0, i32 2
  %103 = load %struct.sctp_ifn*, %struct.sctp_ifn** %102, align 8
  %104 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 16, i32 0
  %105 = load %struct.sctp_nets*, %struct.sctp_nets** %104, align 8
  %106 = icmp eq %struct.sctp_nets* %105, null
  br i1 %106, label %144, label %107

107:                                              ; preds = %101
  %108 = icmp eq %struct.sctp_ifn* %103, null
  %109 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %103, i64 0, i32 7
  br label %110

110:                                              ; preds = %140, %107
  %111 = phi %struct.sctp_nets* [ %105, %107 ], [ %142, %140 ]
  %112 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %111, i64 0, i32 3, i32 0
  %113 = load %struct.sctp_rtentry*, %struct.sctp_rtentry** %112, align 8
  %114 = icmp eq %struct.sctp_rtentry* %113, null
  br i1 %114, label %133, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %struct.sctp_rtentry, %struct.sctp_rtentry* %113, i64 0, i32 0
  %117 = load %struct.ifnet*, %struct.ifnet** %116, align 8
  %118 = icmp eq %struct.ifnet* %117, null
  br i1 %118, label %133, label %119

119:                                              ; preds = %115
  br i1 %108, label %123, label %120

120:                                              ; preds = %119
  %121 = load i32, i32* %109, align 8
  %122 = icmp eq i32 %121, 1
  br i1 %122, label %133, label %123

123:                                              ; preds = %120, %119
  %124 = getelementptr inbounds %struct.sctp_rtentry, %struct.sctp_rtentry* %113, i64 0, i32 3
  %125 = load i64, i64* %124, align 8
  %126 = icmp sgt i64 %125, 1
  %127 = add nsw i64 %125, -1
  store i64 %127, i64* %124, align 8
  %128 = icmp sgt i64 %127, 0
  %129 = or i1 %126, %128
  br i1 %129, label %132, label %130

130:                                              ; preds = %123
  %131 = bitcast %struct.sctp_rtentry* %113 to i8*
  tail call void @free(i8* %131) #8
  br label %132

132:                                              ; preds = %130, %123
  store %struct.sctp_rtentry* null, %struct.sctp_rtentry** %112, align 8
  br label %133

133:                                              ; preds = %132, %120, %115, %110
  %134 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %111, i64 0, i32 47
  %135 = load i8, i8* %134, align 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %111, i64 0, i32 3, i32 2
  %139 = load %struct.sctp_ifa*, %struct.sctp_ifa** %138, align 8
  tail call void @sctp_free_ifa(%struct.sctp_ifa* %139) #8
  store %struct.sctp_ifa* null, %struct.sctp_ifa** %138, align 8
  store i8 0, i8* %134, align 1
  br label %140

140:                                              ; preds = %137, %133
  %141 = getelementptr inbounds %struct.sctp_nets, %struct.sctp_nets* %111, i64 0, i32 0, i32 0
  %142 = load %struct.sctp_nets*, %struct.sctp_nets** %141, align 8
  %143 = icmp eq %struct.sctp_nets* %142, null
  br i1 %143, label %144, label %110

144:                                              ; preds = %97, %55, %140, %101, %25, %24, %7, %3
  %145 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %1, i64 0, i32 0, i32 0
  %146 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %145, align 8
  %147 = icmp eq %struct.sctp_asconf_addr* %146, null
  %148 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %1, i64 0, i32 0, i32 1
  %149 = bitcast %struct.sctp_asconf_addr*** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 1, i32 1
  %152 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %146, i64 0, i32 0, i32 1
  %153 = select i1 %147, %struct.sctp_asconf_addr*** %151, %struct.sctp_asconf_addr*** %152
  %154 = bitcast %struct.sctp_asconf_addr*** %153 to i64*
  store i64 %150, i64* %154, align 8
  %155 = bitcast %struct.sctp_asconf_addr* %1 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %struct.sctp_asconf_addr*** %148 to i64**
  %158 = load i64*, i64** %157, align 8
  store i64 %156, i64* %158, align 8
  %159 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %1, i64 0, i32 2
  %160 = load %struct.sctp_ifa*, %struct.sctp_ifa** %159, align 8
  %161 = icmp eq %struct.sctp_ifa* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %144
  tail call void @sctp_free_ifa(%struct.sctp_ifa* nonnull %160) #8
  br label %163

163:                                              ; preds = %144, %162
  %164 = bitcast %struct.sctp_asconf_addr* %1 to i8*
  tail call void @free(i8* %164) #8
  ret void
}

declare void @sctp_send_asconf(%struct.sctp_tcb*, %struct.sctp_nets*, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @sctp_asconf_iterator_ep(%struct.sctp_inpcb* nocapture readnone, i8* nocapture readonly, i32) #5 {
  %4 = bitcast i8* %1 to %struct.sctp_laddr**
  %5 = load %struct.sctp_laddr*, %struct.sctp_laddr** %4, align 8
  %6 = icmp eq %struct.sctp_laddr* %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds i8, i8* %1, i64 8
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 8
  br label %15

11:                                               ; preds = %15
  %12 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %16, i64 0, i32 0, i32 0
  %13 = load %struct.sctp_laddr*, %struct.sctp_laddr** %12, align 8
  %14 = icmp eq %struct.sctp_laddr* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %7, %11
  %16 = phi %struct.sctp_laddr* [ %5, %7 ], [ %13, %11 ]
  %17 = phi i32 [ 0, %7 ], [ %18, %11 ]
  %18 = add nuw nsw i32 %17, 1
  %19 = icmp eq i32 %10, %18
  br i1 %19, label %20, label %11

20:                                               ; preds = %15, %11, %3
  %21 = phi i32 [ 0, %3 ], [ 0, %11 ], [ 1, %15 ]
  ret i32 %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden void @sctp_asconf_iterator_stcb(%struct.sctp_inpcb* nocapture, %struct.sctp_tcb* nocapture, i8* nocapture, i32) #5 {
  %5 = bitcast i8* %2 to %struct.sctp_laddr**
  %6 = load %struct.sctp_laddr*, %struct.sctp_laddr** %5, align 8
  %7 = icmp eq %struct.sctp_laddr* %6, null
  br i1 %7, label %30, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %1, i64 0, i32 7, i32 41
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i8, i8* %2, i64 8
  %12 = bitcast i8* %11 to i32*
  br label %13

13:                                               ; preds = %8, %25
  %14 = phi %struct.sctp_laddr* [ %6, %8 ], [ %28, %25 ]
  %15 = phi i32 [ 0, %8 ], [ %26, %25 ]
  %16 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %14, i64 0, i32 1
  %17 = load %struct.sctp_ifa*, %struct.sctp_ifa** %16, align 8
  %18 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %17, i64 0, i32 8
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, %10
  br i1 %20, label %21, label %25

21:                                               ; preds = %13
  %22 = add nsw i32 %15, 1
  %23 = load i32, i32* %12, align 8
  %24 = icmp eq i32 %23, %22
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %21
  %26 = phi i32 [ %15, %13 ], [ %22, %21 ]
  %27 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %14, i64 0, i32 0, i32 0
  %28 = load %struct.sctp_laddr*, %struct.sctp_laddr** %27, align 8
  %29 = icmp eq %struct.sctp_laddr* %28, null
  br i1 %29, label %30, label %13

30:                                               ; preds = %21, %25, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_asconf_iterator_end(i8* nocapture, i32) #0 {
  %3 = bitcast i8* %0 to %struct.sctp_laddr**
  %4 = load %struct.sctp_laddr*, %struct.sctp_laddr** %3, align 8
  %5 = icmp eq %struct.sctp_laddr* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2, %20
  %7 = phi %struct.sctp_laddr* [ %10, %20 ], [ %4, %2 ]
  %8 = bitcast %struct.sctp_laddr* %7 to i8*
  %9 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %7, i64 0, i32 0, i32 0
  %10 = load %struct.sctp_laddr*, %struct.sctp_laddr** %9, align 8
  %11 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %7, i64 0, i32 1
  %12 = load %struct.sctp_ifa*, %struct.sctp_ifa** %11, align 8
  %13 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %7, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 49153
  br i1 %15, label %16, label %20

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %12, i64 0, i32 7
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, -5
  store i32 %19, i32* %17, align 8
  br label %20

20:                                               ; preds = %16, %6
  tail call void @sctp_free_ifa(%struct.sctp_ifa* %12) #8
  tail call void @free(i8* %8) #8
  %21 = atomicrmw sub i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 29), i32 1 seq_cst
  %22 = icmp eq %struct.sctp_laddr* %10, null
  br i1 %22, label %23, label %6

23:                                               ; preds = %20, %2
  tail call void @free(i8* %0) #8
  ret void
}

declare void @sctp_free_ifa(%struct.sctp_ifa*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_set_primary_ip_address_sa(%struct.sctp_tcb* nocapture readonly, %struct.sockaddr*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 41
  %4 = load i32, i32* %3, align 4
  %5 = tail call %struct.sctp_ifa* @sctp_find_ifa_by_addr(%struct.sockaddr* %1, i32 %4, i32 0) #8
  %6 = icmp eq %struct.sctp_ifa* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 164
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 1, i32 0
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi %struct.sctp_asconf_addr** [ %12, %11 ], [ %17, %13 ]
  %15 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %14, align 8
  %16 = icmp eq %struct.sctp_asconf_addr* %15, null
  %17 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %15, i64 0, i32 0, i32 0
  br i1 %16, label %18, label %13

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %5, i64 0, i32 5
  %20 = atomicrmw add i32* %19, i32 1 seq_cst
  tail call void @sctp_free_ifa(%struct.sctp_ifa* nonnull %5) #8
  br label %21

21:                                               ; preds = %18, %7, %2
  ret i32 -1
}

declare %struct.sctp_ifa* @sctp_find_ifa_by_addr(%struct.sockaddr*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_is_addr_pending(%struct.sctp_tcb* nocapture readonly, %struct.sctp_ifa* nocapture readnone) local_unnamed_addr #0 {
  %3 = alloca [512 x i8], align 16
  %4 = getelementptr inbounds [512 x i8], [512 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 19, i32 0
  %6 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %5, align 8
  %7 = icmp eq %struct.sctp_tmit_chunk* %6, null
  br i1 %7, label %63, label %8

8:                                                ; preds = %2, %61
  %9 = phi %struct.sctp_tmit_chunk* [ %11, %61 ], [ %6, %2 ]
  %10 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %9, i64 0, i32 6, i32 0
  %11 = load %struct.sctp_tmit_chunk*, %struct.sctp_tmit_chunk** %10, align 8
  %12 = getelementptr inbounds %struct.sctp_tmit_chunk, %struct.sctp_tmit_chunk* %9, i64 0, i32 3
  %13 = load %struct.mbuf*, %struct.mbuf** %12, align 8
  %14 = icmp eq %struct.mbuf* %13, null
  br i1 %14, label %61, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %13, i64 0, i32 0, i32 2
  %17 = bitcast i8** %16 to %struct.sctp_asconf_chunk**
  %18 = load %struct.sctp_asconf_chunk*, %struct.sctp_asconf_chunk** %17, align 8
  %19 = getelementptr inbounds %struct.sctp_asconf_chunk, %struct.sctp_asconf_chunk* %18, i64 0, i32 0, i32 2
  %20 = load i16, i16* %19, align 1
  %21 = call i16 @llvm.bswap.i16(i16 %20) #8
  %22 = zext i16 %21 to i32
  %23 = call i8* @sctp_m_getptr(%struct.mbuf* nonnull %13, i32 8, i32 4, i8* nonnull %4) #8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %61, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds i8, i8* %23, i64 2
  %27 = bitcast i8* %26 to i16*
  %28 = load i16, i16* %27, align 1
  %29 = call i16 @llvm.bswap.i16(i16 %28) #8
  %30 = zext i16 %29 to i32
  %31 = add nuw nsw i32 %30, 8
  %32 = load %struct.mbuf*, %struct.mbuf** %12, align 8
  %33 = call i8* @sctp_m_getptr(%struct.mbuf* %32, i32 %31, i32 8, i8* nonnull %4) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %61, label %35

35:                                               ; preds = %25, %57
  %36 = phi i8* [ %59, %57 ], [ %33, %25 ]
  %37 = phi i32 [ %55, %57 ], [ %31, %25 ]
  %38 = getelementptr inbounds i8, i8* %36, i64 2
  %39 = bitcast i8* %38 to i16*
  %40 = load i16, i16* %39, align 1
  %41 = call i16 @llvm.bswap.i16(i16 %40) #8
  %42 = zext i16 %41 to i32
  %43 = add i32 %37, %42
  %44 = icmp ugt i32 %43, %22
  %45 = add i16 %41, -5
  %46 = icmp ugt i16 %45, 507
  %47 = or i1 %46, %44
  br i1 %47, label %61, label %48

48:                                               ; preds = %35
  %49 = load %struct.mbuf*, %struct.mbuf** %12, align 8
  %50 = call i8* @sctp_m_getptr(%struct.mbuf* %49, i32 %37, i32 %42, i8* nonnull %4) #8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %61, label %52

52:                                               ; preds = %48
  %53 = add nuw nsw i32 %42, 3
  %54 = and i32 %53, 131068
  %55 = add i32 %54, %37
  %56 = icmp ult i32 %55, %22
  br i1 %56, label %57, label %61

57:                                               ; preds = %52
  %58 = load %struct.mbuf*, %struct.mbuf** %12, align 8
  %59 = call i8* @sctp_m_getptr(%struct.mbuf* %58, i32 %55, i32 8, i8* nonnull %4) #8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %61, label %35

61:                                               ; preds = %57, %35, %48, %52, %25, %15, %8
  %62 = icmp eq %struct.sctp_tmit_chunk* %11, null
  br i1 %62, label %63, label %8

63:                                               ; preds = %61, %2
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #8
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.mbuf* @sctp_compose_asconf(%struct.sctp_tcb*, i32* nocapture, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 1, i32 0
  %5 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %4, align 8
  %6 = icmp eq %struct.sctp_asconf_addr* %5, null
  br i1 %6, label %202, label %11

7:                                                ; preds = %11
  %8 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %12, i64 0, i32 0, i32 0
  %9 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %8, align 8
  %10 = icmp eq %struct.sctp_asconf_addr* %9, null
  br i1 %10, label %202, label %11

11:                                               ; preds = %3, %7
  %12 = phi %struct.sctp_asconf_addr* [ %9, %7 ], [ %5, %3 ]
  %13 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %12, i64 0, i32 3
  %14 = load i8, i8* %13, align 8
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %7

16:                                               ; preds = %11
  %17 = tail call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 8, i32 0, i32 1, i32 1, i32 1) #8
  %18 = icmp eq %struct.mbuf* %17, null
  br i1 %18, label %202, label %19

19:                                               ; preds = %16
  %20 = tail call %struct.mbuf* @sctp_get_mbuf_for_msg(i32 2048, i32 0, i32 1, i32 1, i32 1) #8
  %21 = icmp eq %struct.mbuf* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @m_freem(%struct.mbuf* nonnull %17) #8
  br label %202

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %17, i64 0, i32 0, i32 3
  store i32 8, i32* %24, align 8
  %25 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %20, i64 0, i32 0, i32 3
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %17, i64 0, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast i8* %27 to i64*
  store i64 0, i64* %28, align 1
  %29 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %20, i64 0, i32 0, i32 2
  %30 = load i8*, i8** %29, align 8
  store i8 -63, i8* %27, align 1
  %31 = getelementptr inbounds i8, i8* %27, i64 1
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 43
  %33 = load i32, i32* %32, align 4
  %34 = tail call i32 @llvm.bswap.i32(i32 %33) #8
  %35 = getelementptr inbounds i8, i8* %27, i64 4
  %36 = bitcast i8* %35 to i32*
  store i32 %34, i32* %36, align 1
  %37 = load i32, i32* %32, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* %32, align 4
  %39 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %4, align 8
  %40 = icmp eq %struct.sctp_asconf_addr* %39, null
  br i1 %40, label %126, label %41

41:                                               ; preds = %23
  %42 = getelementptr inbounds i8, i8* %27, i64 8
  %43 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 53
  %44 = bitcast i8* %42 to i16*
  %45 = getelementptr inbounds i8, i8* %27, i64 10
  %46 = bitcast i8* %45 to i16*
  %47 = getelementptr inbounds i8, i8* %27, i64 12
  br label %48

48:                                               ; preds = %41, %116
  %49 = phi %struct.sctp_asconf_addr* [ %39, %41 ], [ %121, %116 ]
  %50 = phi i8 [ 0, %41 ], [ %119, %116 ]
  %51 = phi i8* [ %30, %41 ], [ %118, %116 ]
  %52 = phi i32 [ 1, %41 ], [ %117, %116 ]
  %53 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 3
  %54 = load i8, i8* %53, align 8
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %116

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 1
  %58 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 1, i32 0, i32 0, i32 1
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = add nuw nsw i32 %60, 3
  %62 = and i32 %61, 131068
  %63 = load i32, i32* %25, align 8
  %64 = add i32 %62, %63
  %65 = load i32, i32* %43, align 4
  %66 = icmp ugt i32 %64, %65
  %67 = icmp ugt i32 %64, 2048
  %68 = or i1 %66, %67
  br i1 %68, label %123, label %69

69:                                               ; preds = %56
  %70 = add i32 %52, 1
  %71 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 1, i32 0, i32 1
  store i32 %52, i32* %71, align 4
  %72 = icmp eq i8 %50, 0
  br i1 %72, label %73, label %94

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 4
  %75 = load i8, i8* %74, align 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %94

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.sctp_asconf_addr_param, %struct.sctp_asconf_addr_param* %57, i64 0, i32 0, i32 0, i32 0
  %79 = load i16, i16* %78, align 8
  %80 = icmp eq i16 %79, -16382
  br i1 %80, label %81, label %94

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 1, i32 1, i32 0, i32 0
  %83 = load i16, i16* %82, align 8
  %84 = tail call i16 @llvm.bswap.i16(i16 %83) #8
  store i16 %84, i16* %44, align 1
  %85 = load i16, i16* %82, align 8
  %86 = icmp eq i16 %85, 6
  %87 = select i1 %86, i32 20, i32 8
  %88 = select i1 %86, i64 16, i64 4
  %89 = trunc i32 %87 to i16
  %90 = tail call i16 @llvm.bswap.i16(i16 %89) #8
  store i16 %90, i16* %46, align 1
  %91 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 1, i32 1, i32 1, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 4 %91, i64 %88, i1 false)
  %92 = load i32, i32* %24, align 8
  %93 = add nsw i32 %92, %87
  store i32 %93, i32* %24, align 8
  br label %94

94:                                               ; preds = %81, %77, %73, %69
  %95 = phi i8 [ 1, %81 ], [ 0, %77 ], [ 0, %73 ], [ %50, %69 ]
  %96 = bitcast %struct.sctp_asconf_addr_param* %57 to i8*
  %97 = zext i32 %62 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 8 %96, i64 %97, i1 false)
  %98 = bitcast i8* %51 to i16*
  %99 = load i16, i16* %98, align 1
  %100 = tail call i16 @llvm.bswap.i16(i16 %99) #8
  store i16 %100, i16* %98, align 1
  %101 = getelementptr inbounds i8, i8* %51, i64 2
  %102 = bitcast i8* %101 to i16*
  %103 = load i16, i16* %102, align 1
  %104 = tail call i16 @llvm.bswap.i16(i16 %103) #8
  store i16 %104, i16* %102, align 1
  %105 = getelementptr inbounds i8, i8* %51, i64 8
  %106 = bitcast i8* %105 to i16*
  %107 = load i16, i16* %106, align 1
  %108 = tail call i16 @llvm.bswap.i16(i16 %107) #8
  store i16 %108, i16* %106, align 1
  %109 = getelementptr inbounds i8, i8* %51, i64 10
  %110 = bitcast i8* %109 to i16*
  %111 = load i16, i16* %110, align 1
  %112 = tail call i16 @llvm.bswap.i16(i16 %111) #8
  store i16 %112, i16* %110, align 1
  %113 = load i32, i32* %25, align 8
  %114 = add i32 %113, %62
  store i32 %114, i32* %25, align 8
  %115 = getelementptr inbounds i8, i8* %51, i64 %97
  store i8 1, i8* %53, align 8
  br label %116

116:                                              ; preds = %48, %94
  %117 = phi i32 [ %52, %48 ], [ %70, %94 ]
  %118 = phi i8* [ %51, %48 ], [ %115, %94 ]
  %119 = phi i8 [ %50, %48 ], [ %95, %94 ]
  %120 = getelementptr inbounds %struct.sctp_asconf_addr, %struct.sctp_asconf_addr* %49, i64 0, i32 0, i32 0
  %121 = load %struct.sctp_asconf_addr*, %struct.sctp_asconf_addr** %120, align 8
  %122 = icmp eq %struct.sctp_asconf_addr* %121, null
  br i1 %122, label %123, label %48

123:                                              ; preds = %56, %116
  %124 = phi i8 [ %50, %56 ], [ %119, %116 ]
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %126, label %193

126:                                              ; preds = %23, %123
  %127 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %128 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %127, align 8
  %129 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %128, i64 0, i32 9
  %130 = load i32, i32* %129, align 8
  %131 = and i32 %130, 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %173, label %133

133:                                              ; preds = %126
  %134 = icmp eq i32 %2, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %133
  %136 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  br label %137

137:                                              ; preds = %135, %133
  %138 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 41
  %139 = load i32, i32* %138, align 4
  %140 = tail call %struct.sctp_vrf* @sctp_find_vrf(i32 %139) #8
  %141 = icmp eq %struct.sctp_vrf* %140, null
  br i1 %141, label %142, label %145

142:                                              ; preds = %137
  br i1 %134, label %143, label %192

143:                                              ; preds = %142
  %144 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  br label %192

145:                                              ; preds = %137
  %146 = getelementptr inbounds %struct.sctp_vrf, %struct.sctp_vrf* %140, i64 0, i32 2, i32 0
  %147 = load %struct.sctp_ifn*, %struct.sctp_ifn** %146, align 8
  %148 = icmp eq %struct.sctp_ifn* %147, null
  br i1 %148, label %170, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 172, i32 3
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 0
  br label %153

153:                                              ; preds = %166, %149
  %154 = phi %struct.sctp_ifn* [ %147, %149 ], [ %168, %166 ]
  br i1 %152, label %155, label %159

155:                                              ; preds = %153
  %156 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %154, i64 0, i32 13, i64 0
  %157 = tail call i32 @strncmp(i8* %156, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i64 2) #9
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %166, label %159

159:                                              ; preds = %155, %153
  %160 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %154, i64 0, i32 0, i32 0
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi %struct.sctp_ifa** [ %160, %159 ], [ %165, %161 ]
  %163 = load %struct.sctp_ifa*, %struct.sctp_ifa** %162, align 8
  %164 = icmp eq %struct.sctp_ifa* %163, null
  %165 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %163, i64 0, i32 0, i32 0
  br i1 %164, label %166, label %161

166:                                              ; preds = %161, %155
  %167 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %154, i64 0, i32 2, i32 0
  %168 = load %struct.sctp_ifn*, %struct.sctp_ifn** %167, align 8
  %169 = icmp eq %struct.sctp_ifn* %168, null
  br i1 %169, label %170, label %153

170:                                              ; preds = %166, %145
  br i1 %134, label %171, label %192

171:                                              ; preds = %170
  %172 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  br label %192

173:                                              ; preds = %126
  %174 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %128, i64 0, i32 5, i32 0
  %175 = load %struct.sctp_laddr*, %struct.sctp_laddr** %174, align 8
  %176 = icmp eq %struct.sctp_laddr* %175, null
  br i1 %176, label %192, label %177

177:                                              ; preds = %173, %188
  %178 = phi %struct.sctp_laddr* [ %190, %188 ], [ %175, %173 ]
  %179 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %178, i64 0, i32 1
  %180 = load %struct.sctp_ifa*, %struct.sctp_ifa** %179, align 8
  %181 = icmp eq %struct.sctp_ifa* %180, null
  br i1 %181, label %188, label %182

182:                                              ; preds = %177
  %183 = tail call i32 @sctp_is_addr_restricted(%struct.sctp_tcb* %0, %struct.sctp_ifa* nonnull %180) #8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %192, label %185

185:                                              ; preds = %182
  %186 = load %struct.sctp_ifa*, %struct.sctp_ifa** %179, align 8
  %187 = tail call i32 @sctp_is_addr_pending(%struct.sctp_tcb* %0, %struct.sctp_ifa* %186) #8
  br label %188

188:                                              ; preds = %185, %177
  %189 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %178, i64 0, i32 0, i32 0
  %190 = load %struct.sctp_laddr*, %struct.sctp_laddr** %189, align 8
  %191 = icmp eq %struct.sctp_laddr* %190, null
  br i1 %191, label %192, label %177

192:                                              ; preds = %188, %182, %173, %171, %170, %143, %142
  tail call void @m_freem(%struct.mbuf* nonnull %17) #8
  tail call void @m_freem(%struct.mbuf* nonnull %20) #8
  br label %202

193:                                              ; preds = %123
  %194 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %17, i64 0, i32 0, i32 0
  store %struct.mbuf* %20, %struct.mbuf** %194, align 8
  %195 = load i32, i32* %24, align 8
  %196 = load i32, i32* %25, align 8
  %197 = add nsw i32 %196, %195
  store i32 %197, i32* %1, align 4
  %198 = trunc i32 %197 to i16
  %199 = tail call i16 @llvm.bswap.i16(i16 %198) #8
  %200 = getelementptr inbounds i8, i8* %27, i64 2
  %201 = bitcast i8* %200 to i16*
  store i16 %199, i16* %201, align 1
  br label %202

202:                                              ; preds = %7, %3, %16, %193, %192, %22
  %203 = phi %struct.mbuf* [ null, %22 ], [ null, %192 ], [ %17, %193 ], [ null, %16 ], [ null, %3 ], [ null, %7 ]
  ret %struct.mbuf* %203
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @sctp_check_address_list(%struct.sctp_tcb* readonly, %struct.mbuf*, i32, i32, %struct.sockaddr*, i16 zeroext, i16 zeroext, i16 zeroext, i16 zeroext) local_unnamed_addr #0 {
  %10 = alloca %struct.sctp_paramhdr, align 2
  %11 = bitcast %struct.sctp_paramhdr* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #8
  %12 = getelementptr inbounds %struct.sctp_paramhdr, %struct.sctp_paramhdr* %10, i64 0, i32 0
  store i16 -21846, i16* %12, align 2
  %13 = getelementptr inbounds %struct.sctp_paramhdr, %struct.sctp_paramhdr* %10, i64 0, i32 1
  store i16 -21846, i16* %13, align 2
  %14 = icmp eq %struct.sctp_tcb* %0, null
  br i1 %14, label %51, label %15

15:                                               ; preds = %9
  %16 = add i32 %3, %2
  %17 = zext i32 %2 to i64
  %18 = add nuw nsw i64 %17, 4
  %19 = zext i32 %16 to i64
  %20 = icmp ugt i64 %18, %19
  br i1 %20, label %51, label %21

21:                                               ; preds = %15
  %22 = call i8* @sctp_m_getptr(%struct.mbuf* %1, i32 %2, i32 4, i8* nonnull %11) #8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %51, label %24

24:                                               ; preds = %21, %48
  %25 = phi i32 [ %44, %48 ], [ %2, %21 ]
  %26 = phi i8* [ %49, %48 ], [ %22, %21 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 2
  %28 = bitcast i8* %27 to i16*
  %29 = load i16, i16* %28, align 1
  %30 = call i16 @llvm.bswap.i16(i16 %29) #8
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %31, 3
  %33 = and i32 %32, 131068
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %43

35:                                               ; preds = %24
  %36 = load void (i8*, ...)*, void (i8*, ...)** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 12), align 8
  %37 = icmp eq void (i8*, ...)* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %35
  %39 = bitcast i8* %26 to i16*
  %40 = load i16, i16* %39, align 1
  %41 = call i16 @llvm.bswap.i16(i16 %40) #8
  %42 = zext i16 %41 to i32
  call void (i8*, ...) %36(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i32 %31, i32 %42) #8
  br label %51

43:                                               ; preds = %24
  %44 = add i32 %33, %25
  %45 = zext i32 %44 to i64
  %46 = add nuw nsw i64 %45, 4
  %47 = icmp ugt i64 %46, %19
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = call i8* @sctp_m_getptr(%struct.mbuf* %1, i32 %44, i32 4, i8* nonnull %11) #8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %24

51:                                               ; preds = %43, %48, %9, %15, %21, %35, %38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #8
  %52 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 1
  %53 = load %struct.sctp_inpcb*, %struct.sctp_inpcb** %52, align 8
  %54 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %53, i64 0, i32 9
  %55 = load i32, i32* %54, align 8
  %56 = and i32 %55, 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %97, label %58

58:                                               ; preds = %51
  br i1 %14, label %119, label %59

59:                                               ; preds = %58
  %60 = getelementptr inbounds %struct.sctp_tcb, %struct.sctp_tcb* %0, i64 0, i32 7, i32 41
  %61 = load i32, i32* %60, align 4
  %62 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  %63 = call %struct.sctp_vrf* @sctp_find_vrf(i32 %61) #8
  %64 = icmp eq %struct.sctp_vrf* %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %59
  %66 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  br label %119

67:                                               ; preds = %59
  %68 = getelementptr inbounds %struct.sctp_vrf, %struct.sctp_vrf* %63, i64 0, i32 2, i32 0
  %69 = load %struct.sctp_ifn*, %struct.sctp_ifn** %68, align 8
  %70 = icmp eq %struct.sctp_ifn* %69, null
  br i1 %70, label %95, label %71

71:                                               ; preds = %67
  %72 = icmp eq i16 %8, 0
  br label %73

73:                                               ; preds = %91, %71
  %74 = phi %struct.sctp_ifn* [ %69, %71 ], [ %93, %91 ]
  br i1 %72, label %75, label %79

75:                                               ; preds = %73
  %76 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %74, i64 0, i32 13, i64 0
  %77 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i64 2) #9
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %91, label %79

79:                                               ; preds = %75, %73
  %80 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %74, i64 0, i32 0, i32 0
  %81 = load %struct.sctp_ifa*, %struct.sctp_ifa** %80, align 8
  %82 = icmp eq %struct.sctp_ifa* %81, null
  br i1 %82, label %91, label %83

83:                                               ; preds = %79, %83
  %84 = phi %struct.sctp_ifa* [ %89, %83 ], [ %81, %79 ]
  %85 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %84, i64 0, i32 4
  %86 = bitcast %union.sctp_sockstore* %85 to %struct.sockaddr*
  %87 = call i32 @sctp_cmpaddr(%struct.sockaddr* %86, %struct.sockaddr* %4) #8
  %88 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %84, i64 0, i32 0, i32 0
  %89 = load %struct.sctp_ifa*, %struct.sctp_ifa** %88, align 8
  %90 = icmp eq %struct.sctp_ifa* %89, null
  br i1 %90, label %91, label %83

91:                                               ; preds = %83, %79, %75
  %92 = getelementptr inbounds %struct.sctp_ifn, %struct.sctp_ifn* %74, i64 0, i32 2, i32 0
  %93 = load %struct.sctp_ifn*, %struct.sctp_ifn** %92, align 8
  %94 = icmp eq %struct.sctp_ifn* %93, null
  br i1 %94, label %95, label %73

95:                                               ; preds = %91, %67
  %96 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 23)) #8
  br label %119

97:                                               ; preds = %51
  %98 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %53, i64 0, i32 8
  %99 = load i64, i64* %98, align 8
  %100 = and i64 %99, 32
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %119, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %53, i64 0, i32 5, i32 0
  %104 = load %struct.sctp_laddr*, %struct.sctp_laddr** %103, align 8
  %105 = icmp eq %struct.sctp_laddr* %104, null
  br i1 %105, label %119, label %106

106:                                              ; preds = %102, %115
  %107 = phi %struct.sctp_laddr* [ %117, %115 ], [ %104, %102 ]
  %108 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %107, i64 0, i32 1
  %109 = load %struct.sctp_ifa*, %struct.sctp_ifa** %108, align 8
  %110 = icmp eq %struct.sctp_ifa* %109, null
  br i1 %110, label %115, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %109, i64 0, i32 4
  %113 = bitcast %union.sctp_sockstore* %112 to %struct.sockaddr*
  %114 = call i32 @sctp_cmpaddr(%struct.sockaddr* %113, %struct.sockaddr* %4) #8
  br label %115

115:                                              ; preds = %111, %106
  %116 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %107, i64 0, i32 0, i32 0
  %117 = load %struct.sctp_laddr*, %struct.sctp_laddr** %116, align 8
  %118 = icmp eq %struct.sctp_laddr* %117, null
  br i1 %118, label %119, label %106

119:                                              ; preds = %115, %102, %95, %65, %58, %97
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @sctp_addr_mgmt_ep_sa(%struct.sctp_inpcb*, %struct.sockaddr*, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %2, 49153
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call %struct.sctp_ifa* @sctp_find_ifa_by_addr(%struct.sockaddr* %1, i32 %3, i32 0) #8
  br label %12

8:                                                ; preds = %4
  %9 = icmp eq i32 %2, 49154
  br i1 %9, label %10, label %112

10:                                               ; preds = %8
  %11 = tail call %struct.sctp_ifa* @sctp_find_ifa_in_ep(%struct.sctp_inpcb* %0, %struct.sockaddr* %1, i32 0) #8
  br label %12

12:                                               ; preds = %10, %6
  %13 = phi %struct.sctp_ifa* [ %7, %6 ], [ %11, %10 ]
  %14 = icmp eq %struct.sctp_ifa* %13, null
  br i1 %14, label %112, label %15

15:                                               ; preds = %12
  br i1 %5, label %16, label %17

16:                                               ; preds = %15
  tail call void @sctp_add_local_addr_ep(%struct.sctp_inpcb* %0, %struct.sctp_ifa* nonnull %13, i32 49153) #8
  br label %36

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %0, i64 0, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %112, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %0, i64 0, i32 5, i32 0
  %23 = load %struct.sctp_laddr*, %struct.sctp_laddr** %22, align 8
  %24 = icmp eq %struct.sctp_laddr* %23, null
  br i1 %24, label %36, label %25

25:                                               ; preds = %21, %32
  %26 = phi %struct.sctp_laddr* [ %34, %32 ], [ %23, %21 ]
  %27 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %26, i64 0, i32 1
  %28 = load %struct.sctp_ifa*, %struct.sctp_ifa** %27, align 8
  %29 = icmp eq %struct.sctp_ifa* %13, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %26, i64 0, i32 2
  store i32 49154, i32* %31, align 8
  br label %32

32:                                               ; preds = %25, %30
  %33 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %26, i64 0, i32 0, i32 0
  %34 = load %struct.sctp_laddr*, %struct.sctp_laddr** %33, align 8
  %35 = icmp eq %struct.sctp_laddr* %34, null
  br i1 %35, label %36, label %25

36:                                               ; preds = %32, %21, %16
  %37 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %0, i64 0, i32 14, i32 0
  %38 = load %struct.sctp_tcb*, %struct.sctp_tcb** %37, align 8
  %39 = icmp eq %struct.sctp_tcb* %38, null
  br i1 %39, label %40, label %56

40:                                               ; preds = %36
  %41 = icmp eq i32 %2, 49154
  br i1 %41, label %42, label %112

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %0, i64 0, i32 5, i32 0
  %44 = load %struct.sctp_laddr*, %struct.sctp_laddr** %43, align 8
  %45 = icmp eq %struct.sctp_laddr* %44, null
  br i1 %45, label %112, label %46

46:                                               ; preds = %42, %54
  %47 = phi %struct.sctp_laddr* [ %49, %54 ], [ %44, %42 ]
  %48 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %47, i64 0, i32 0, i32 0
  %49 = load %struct.sctp_laddr*, %struct.sctp_laddr** %48, align 8
  %50 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %47, i64 0, i32 1
  %51 = load %struct.sctp_ifa*, %struct.sctp_ifa** %50, align 8
  %52 = icmp eq %struct.sctp_ifa* %51, %13
  br i1 %52, label %53, label %54

53:                                               ; preds = %46
  tail call void @sctp_del_local_addr_ep(%struct.sctp_inpcb* %0, %struct.sctp_ifa* nonnull %13) #8
  br label %54

54:                                               ; preds = %46, %53
  %55 = icmp eq %struct.sctp_laddr* %49, null
  br i1 %55, label %112, label %46

56:                                               ; preds = %36
  %57 = tail call noalias i8* @malloc(i64 16) #8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %112, label %59

59:                                               ; preds = %56
  %60 = load i64, i64* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 15), align 8
  %61 = tail call noalias i8* @malloc(i64 %60) #8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @free(i8* nonnull %57) #8
  br label %112

64:                                               ; preds = %59
  %65 = bitcast i8* %57 to %struct.sctp_laddr**
  store %struct.sctp_laddr* null, %struct.sctp_laddr** %65, align 8
  %66 = getelementptr inbounds i8, i8* %57, i64 8
  %67 = bitcast i8* %66 to i32*
  store i32 1, i32* %67, align 8
  %68 = atomicrmw add i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 29), i32 1 seq_cst
  %69 = getelementptr inbounds i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to %struct.sctp_ifa**
  store %struct.sctp_ifa* %13, %struct.sctp_ifa** %70, align 8
  %71 = getelementptr inbounds i8, i8* %61, i64 24
  %72 = bitcast i8* %71 to i32*
  store i32 %2, i32* %72, align 8
  %73 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %13, i64 0, i32 5
  %74 = atomicrmw add i32* %73, i32 1 seq_cst
  %75 = load %struct.sctp_laddr*, %struct.sctp_laddr** %65, align 8
  %76 = bitcast i8* %61 to %struct.sctp_laddr**
  store %struct.sctp_laddr* %75, %struct.sctp_laddr** %76, align 8
  %77 = icmp eq %struct.sctp_laddr* %75, null
  br i1 %77, label %81, label %78

78:                                               ; preds = %64
  %79 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %75, i64 0, i32 0, i32 1
  %80 = bitcast %struct.sctp_laddr*** %79 to i8**
  store i8* %61, i8** %80, align 8
  br label %81

81:                                               ; preds = %64, %78
  %82 = bitcast i8* %57 to i8**
  store i8* %61, i8** %82, align 8
  %83 = getelementptr inbounds i8, i8* %61, i64 8
  %84 = bitcast i8* %83 to i8**
  store i8* %57, i8** %84, align 8
  %85 = tail call i32 @sctp_initiate_iterator(i32 (%struct.sctp_inpcb*, i8*, i32)* nonnull @sctp_asconf_iterator_ep, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)* nonnull @sctp_asconf_iterator_stcb, i32 (%struct.sctp_inpcb*, i8*, i32)* nonnull @sctp_asconf_iterator_ep_end, i32 0, i32 0, i32 0, i8* nonnull %57, i32 0, void (i8*, i32)* nonnull @sctp_asconf_iterator_end, %struct.sctp_inpcb* %0, i8 zeroext 0) #8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %112, label %87

87:                                               ; preds = %81
  %88 = load void (i8*, ...)*, void (i8*, ...)** getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 12), align 8
  %89 = icmp eq void (i8*, ...)* %88, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %87
  tail call void (i8*, ...) %88(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %91

91:                                               ; preds = %87, %90
  %92 = load %struct.sctp_laddr*, %struct.sctp_laddr** %65, align 8
  %93 = icmp eq %struct.sctp_laddr* %92, null
  br i1 %93, label %111, label %94

94:                                               ; preds = %91, %108
  %95 = phi %struct.sctp_laddr* [ %98, %108 ], [ %92, %91 ]
  %96 = bitcast %struct.sctp_laddr* %95 to i8*
  %97 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %95, i64 0, i32 0, i32 0
  %98 = load %struct.sctp_laddr*, %struct.sctp_laddr** %97, align 8
  %99 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %95, i64 0, i32 1
  %100 = load %struct.sctp_ifa*, %struct.sctp_ifa** %99, align 8
  %101 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %95, i64 0, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 49153
  br i1 %103, label %104, label %108

104:                                              ; preds = %94
  %105 = getelementptr inbounds %struct.sctp_ifa, %struct.sctp_ifa* %100, i64 0, i32 7
  %106 = load i32, i32* %105, align 8
  %107 = and i32 %106, -5
  store i32 %107, i32* %105, align 8
  br label %108

108:                                              ; preds = %104, %94
  tail call void @sctp_free_ifa(%struct.sctp_ifa* %100) #8
  tail call void @free(i8* %96) #8
  %109 = atomicrmw sub i32* getelementptr inbounds (%struct.sctp_base_info, %struct.sctp_base_info* @system_base_info, i64 0, i32 0, i32 29), i32 1 seq_cst
  %110 = icmp eq %struct.sctp_laddr* %98, null
  br i1 %110, label %111, label %94

111:                                              ; preds = %108, %91
  tail call void @free(i8* %57) #8
  br label %112

112:                                              ; preds = %54, %42, %56, %111, %63, %8, %40, %81, %12, %17
  %113 = phi i32 [ 22, %17 ], [ 99, %12 ], [ 0, %81 ], [ 0, %40 ], [ 99, %8 ], [ 12, %56 ], [ 14, %111 ], [ 12, %63 ], [ 0, %42 ], [ 0, %54 ]
  ret i32 %113
}

declare %struct.sctp_ifa* @sctp_find_ifa_in_ep(%struct.sctp_inpcb*, %struct.sockaddr*, i32) local_unnamed_addr #2

declare void @sctp_add_local_addr_ep(%struct.sctp_inpcb*, %struct.sctp_ifa*, i32) local_unnamed_addr #2

declare void @sctp_del_local_addr_ep(%struct.sctp_inpcb*, %struct.sctp_ifa*) local_unnamed_addr #2

declare i32 @sctp_initiate_iterator(i32 (%struct.sctp_inpcb*, i8*, i32)*, void (%struct.sctp_inpcb*, %struct.sctp_tcb*, i8*, i32)*, i32 (%struct.sctp_inpcb*, i8*, i32)*, i32, i32, i32, i8*, i32, void (i8*, i32)*, %struct.sctp_inpcb*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @sctp_asconf_iterator_ep_end(%struct.sctp_inpcb*, i8* nocapture readonly, i32) #0 {
  %4 = bitcast i8* %1 to %struct.sctp_laddr**
  %5 = load %struct.sctp_laddr*, %struct.sctp_laddr** %4, align 8
  %6 = icmp eq %struct.sctp_laddr* %5, null
  br i1 %6, label %46, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.sctp_inpcb, %struct.sctp_inpcb* %0, i64 0, i32 5, i32 0
  br label %9

9:                                                ; preds = %7, %42
  %10 = phi %struct.sctp_laddr* [ %5, %7 ], [ %44, %42 ]
  %11 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %10, i64 0, i32 1
  %12 = load %struct.sctp_ifa*, %struct.sctp_ifa** %11, align 8
  %13 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %10, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %42 [
    i32 49153, label %15
    i32 49154, label %29
  ]

15:                                               ; preds = %9
  %16 = load %struct.sctp_laddr*, %struct.sctp_laddr** %8, align 8
  %17 = icmp eq %struct.sctp_laddr* %16, null
  br i1 %17, label %42, label %18

18:                                               ; preds = %15, %25
  %19 = phi %struct.sctp_laddr* [ %27, %25 ], [ %16, %15 ]
  %20 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %19, i64 0, i32 1
  %21 = load %struct.sctp_ifa*, %struct.sctp_ifa** %20, align 8
  %22 = icmp eq %struct.sctp_ifa* %21, %12
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %19, i64 0, i32 2
  store i32 0, i32* %24, align 8
  br label %42

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %19, i64 0, i32 0, i32 0
  %27 = load %struct.sctp_laddr*, %struct.sctp_laddr** %26, align 8
  %28 = icmp eq %struct.sctp_laddr* %27, null
  br i1 %28, label %42, label %18

29:                                               ; preds = %9
  %30 = load %struct.sctp_laddr*, %struct.sctp_laddr** %8, align 8
  %31 = icmp eq %struct.sctp_laddr* %30, null
  br i1 %31, label %42, label %32

32:                                               ; preds = %29, %40
  %33 = phi %struct.sctp_laddr* [ %35, %40 ], [ %30, %29 ]
  %34 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %33, i64 0, i32 0, i32 0
  %35 = load %struct.sctp_laddr*, %struct.sctp_laddr** %34, align 8
  %36 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %33, i64 0, i32 1
  %37 = load %struct.sctp_ifa*, %struct.sctp_ifa** %36, align 8
  %38 = icmp eq %struct.sctp_ifa* %37, %12
  br i1 %38, label %39, label %40

39:                                               ; preds = %32
  tail call void @sctp_del_local_addr_ep(%struct.sctp_inpcb* %0, %struct.sctp_ifa* %12) #8
  br label %40

40:                                               ; preds = %32, %39
  %41 = icmp eq %struct.sctp_laddr* %35, null
  br i1 %41, label %42, label %32

42:                                               ; preds = %40, %25, %29, %15, %9, %23
  %43 = getelementptr inbounds %struct.sctp_laddr, %struct.sctp_laddr* %10, i64 0, i32 0, i32 0
  %44 = load %struct.sctp_laddr*, %struct.sctp_laddr** %43, align 8
  %45 = icmp eq %struct.sctp_laddr* %44, null
  br i1 %45, label %46, label %9

46:                                               ; preds = %42, %3
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden void @sctp_asconf_send_nat_state_update(%struct.sctp_tcb* nocapture, %struct.sctp_nets* nocapture) local_unnamed_addr #5 {
  ret void
}

declare void @sctp_del_local_addr_restricted(%struct.sctp_tcb*, %struct.sctp_ifa*) local_unnamed_addr #2

declare i32 @sctp_local_addr_count(%struct.sctp_tcb*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #3

declare %struct.sctp_vrf* @sctp_find_vrf(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

declare i32 @sctp_is_addr_restricted(%struct.sctp_tcb*, %struct.sctp_ifa*) local_unnamed_addr #2

declare i32 @sctp_cmpaddr(%struct.sockaddr*, %struct.sockaddr*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
