; ModuleID = '../../third_party/vulkan-deps/vulkan-loader/src/loader/cJSON.c'
source_filename = "../../third_party/vulkan-deps/vulkan-loader/src/loader/cJSON.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.cJSON_Hooks = type { i8* (i64)*, void (i8*)* }
%struct.cJSON = type { %struct.cJSON*, %struct.cJSON*, %struct.cJSON*, i32, i8*, i32, double, i8* }
%struct.printbuffer = type { i8*, i64, i64 }

@ep = internal unnamed_addr global i8* null, align 8
@cJSON_malloc = internal unnamed_addr global i8* (i64)* @malloc, align 8
@cJSON_free = internal unnamed_addr global void (i8*)* @free, align 8
@.str = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@firstByteMark = internal unnamed_addr constant [7 x i8] c"\00\00\C0\E0\F0\F8\FC", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%.0f\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%e\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"\22\22\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"\22\5C\08\0C\0A\0D\09\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"u%04x\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"[]\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @cJSON_GetErrorPtr() local_unnamed_addr #0 {
  %1 = load i8*, i8** @ep, align 8
  ret i8* %1
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cJSON_InitHooks(%struct.cJSON_Hooks* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.cJSON_Hooks* %0, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  store i8* (i64)* @malloc, i8* (i64)** @cJSON_malloc, align 8
  br label %13

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %0, i64 0, i32 0
  %6 = load i8* (i64)*, i8* (i64)** %5, align 8
  %7 = icmp eq i8* (i64)* %6, null
  %8 = select i1 %7, i8* (i64)* @malloc, i8* (i64)* %6
  store i8* (i64)* %8, i8* (i64)** @cJSON_malloc, align 8
  %9 = getelementptr inbounds %struct.cJSON_Hooks, %struct.cJSON_Hooks* %0, i64 0, i32 1
  %10 = load void (i8*)*, void (i8*)** %9, align 8
  %11 = icmp eq void (i8*)* %10, null
  %12 = select i1 %11, void (i8*)* @free, void (i8*)* %10
  br label %13

13:                                               ; preds = %4, %3
  %14 = phi void (i8*)* [ @free, %3 ], [ %12, %4 ]
  store void (i8*)* %14, void (i8*)** @cJSON_free, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_Delete(%struct.cJSON*) local_unnamed_addr #4 {
  %2 = icmp eq %struct.cJSON* %0, null
  br i1 %2, label %42, label %3

3:                                                ; preds = %1, %38
  %4 = phi %struct.cJSON* [ %6, %38 ], [ %0, %1 ]
  %5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i64 0, i32 0
  %6 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %7 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 256
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i64 0, i32 2
  %13 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %14 = icmp eq %struct.cJSON* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %13)
  %16 = load i32, i32* %7, align 8
  br label %17

17:                                               ; preds = %11, %3, %15
  %18 = phi i32 [ %8, %11 ], [ %8, %3 ], [ %16, %15 ]
  %19 = and i32 %18, 256
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i64 0, i32 4
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %26(i8* nonnull %23) #11
  %27 = load i32, i32* %7, align 8
  br label %28

28:                                               ; preds = %21, %17, %25
  %29 = phi i32 [ %18, %21 ], [ %18, %17 ], [ %27, %25 ]
  %30 = and i32 %29, 512
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i64 0, i32 7
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %37(i8* nonnull %34) #11
  br label %38

38:                                               ; preds = %32, %28, %36
  %39 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %40 = bitcast %struct.cJSON* %4 to i8*
  tail call void %39(i8* nonnull %40) #11
  %41 = icmp eq %struct.cJSON* %6, null
  br i1 %41, label %42, label %3

42:                                               ; preds = %38, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_Free(i8*) local_unnamed_addr #4 {
  %2 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %2(i8* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_ParseWithOpts(i8*, i8**, i32) local_unnamed_addr #4 {
  %4 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %5 = tail call i8* %4(i64 64) #11
  %6 = bitcast i8* %5 to %struct.cJSON*
  %7 = icmp eq i8* %5, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %3
  store i8* null, i8** @ep, align 8
  br label %37

9:                                                ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 64, i1 false) #11
  store i8* null, i8** @ep, align 8
  %10 = icmp eq i8* %0, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %9, %11
  %12 = phi i8* [ %16, %11 ], [ %0, %9 ]
  %13 = load i8, i8* %12, align 1
  %14 = add i8 %13, -1
  %15 = icmp ult i8 %14, 32
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  br i1 %15, label %11, label %17

17:                                               ; preds = %11, %9
  %18 = phi i8* [ null, %9 ], [ %12, %11 ]
  %19 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %6, i8* %18)
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %6)
  br label %37

22:                                               ; preds = %17
  %23 = icmp eq i32 %2, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %22, %24
  %25 = phi i8* [ %29, %24 ], [ %19, %22 ]
  %26 = load i8, i8* %25, align 1
  %27 = add i8 %26, -1
  %28 = icmp ult i8 %27, 32
  %29 = getelementptr inbounds i8, i8* %25, i64 1
  br i1 %28, label %24, label %30

30:                                               ; preds = %24
  %31 = icmp eq i8 %26, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %30
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %6)
  store i8* %25, i8** @ep, align 8
  br label %37

33:                                               ; preds = %30, %22
  %34 = phi i8* [ %25, %30 ], [ %19, %22 ]
  %35 = icmp eq i8** %1, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  store i8* %34, i8** %1, align 8
  br label %37

37:                                               ; preds = %8, %36, %33, %32, %21
  %38 = phi %struct.cJSON* [ null, %32 ], [ null, %21 ], [ %6, %33 ], [ %6, %36 ], [ null, %8 ]
  ret %struct.cJSON* %38
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @parse_value(%struct.cJSON* nocapture, i8*) unnamed_addr #4 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %332, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @strncmp(i8* nonnull %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 2, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 4
  br label %332

10:                                               ; preds = %4
  %11 = tail call i32 @strncmp(i8* nonnull %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %1, i64 5
  br label %332

16:                                               ; preds = %10
  %17 = tail call i32 @strncmp(i8* nonnull %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 4) #12
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 1, i32* %20, align 8
  %21 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 5
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 4
  br label %332

23:                                               ; preds = %16
  %24 = load i8, i8* %1, align 1
  switch i8 %24, label %27 [
    i8 34, label %25
    i8 45, label %30
  ]

25:                                               ; preds = %23
  %26 = tail call fastcc i8* @parse_string(%struct.cJSON* %0, i8* nonnull %1)
  br label %332

27:                                               ; preds = %23
  %28 = add i8 %24, -48
  %29 = icmp ult i8 %28, 10
  br i1 %29, label %30, label %126

30:                                               ; preds = %27, %23
  %31 = icmp eq i8 %24, 45
  %32 = getelementptr inbounds i8, i8* %1, i64 1
  %33 = select i1 %31, i8* %32, i8* %1
  %34 = select i1 %31, double -1.000000e+00, double 1.000000e+00
  %35 = load i8, i8* %33, align 1
  %36 = icmp eq i8 %35, 48
  %37 = getelementptr inbounds i8, i8* %33, i64 1
  %38 = select i1 %36, i8* %37, i8* %33
  %39 = load i8, i8* %38, align 1
  %40 = add i8 %39, -49
  %41 = icmp ult i8 %40, 9
  br i1 %41, label %42, label %55

42:                                               ; preds = %30, %42
  %43 = phi i8 [ %52, %42 ], [ %39, %30 ]
  %44 = phi i8* [ %47, %42 ], [ %38, %30 ]
  %45 = phi double [ %51, %42 ], [ 0.000000e+00, %30 ]
  %46 = fmul double %45, 1.000000e+01
  %47 = getelementptr inbounds i8, i8* %44, i64 1
  %48 = sext i8 %43 to i32
  %49 = add nsw i32 %48, -48
  %50 = sitofp i32 %49 to double
  %51 = fadd double %46, %50
  %52 = load i8, i8* %47, align 1
  %53 = add i8 %52, -48
  %54 = icmp ult i8 %53, 10
  br i1 %54, label %42, label %55

55:                                               ; preds = %42, %30
  %56 = phi i8 [ %39, %30 ], [ %52, %42 ]
  %57 = phi i8* [ %38, %30 ], [ %47, %42 ]
  %58 = phi double [ 0.000000e+00, %30 ], [ %51, %42 ]
  %59 = icmp eq i8 %56, 46
  br i1 %59, label %60, label %80

60:                                               ; preds = %55
  %61 = getelementptr inbounds i8, i8* %57, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = add i8 %62, -48
  %64 = icmp ult i8 %63, 10
  br i1 %64, label %65, label %110

65:                                               ; preds = %60, %65
  %66 = phi i8 [ %77, %65 ], [ %62, %60 ]
  %67 = phi i8* [ %71, %65 ], [ %61, %60 ]
  %68 = phi double [ %75, %65 ], [ %58, %60 ]
  %69 = phi double [ %76, %65 ], [ 0.000000e+00, %60 ]
  %70 = fmul double %68, 1.000000e+01
  %71 = getelementptr inbounds i8, i8* %67, i64 1
  %72 = sext i8 %66 to i32
  %73 = add nsw i32 %72, -48
  %74 = sitofp i32 %73 to double
  %75 = fadd double %70, %74
  %76 = fadd double %69, -1.000000e+00
  %77 = load i8, i8* %71, align 1
  %78 = add i8 %77, -48
  %79 = icmp ult i8 %78, 10
  br i1 %79, label %65, label %80

80:                                               ; preds = %65, %55
  %81 = phi i8 [ %56, %55 ], [ %77, %65 ]
  %82 = phi i8* [ %57, %55 ], [ %71, %65 ]
  %83 = phi double [ %58, %55 ], [ %75, %65 ]
  %84 = phi double [ 0.000000e+00, %55 ], [ %76, %65 ]
  switch i8 %81, label %110 [
    i8 101, label %85
    i8 69, label %85
  ]

85:                                               ; preds = %80, %80
  %86 = getelementptr inbounds i8, i8* %82, i64 1
  %87 = load i8, i8* %86, align 1
  switch i8 %87, label %92 [
    i8 43, label %88
    i8 45, label %90
  ]

88:                                               ; preds = %85
  %89 = getelementptr inbounds i8, i8* %82, i64 2
  br label %92

90:                                               ; preds = %85
  %91 = getelementptr inbounds i8, i8* %82, i64 2
  br label %92

92:                                               ; preds = %90, %88, %85
  %93 = phi i8* [ %89, %88 ], [ %91, %90 ], [ %86, %85 ]
  %94 = phi i32 [ 1, %88 ], [ -1, %90 ], [ 1, %85 ]
  %95 = load i8, i8* %93, align 1
  %96 = add i8 %95, -48
  %97 = icmp ult i8 %96, 10
  br i1 %97, label %98, label %110

98:                                               ; preds = %92, %98
  %99 = phi i8 [ %107, %98 ], [ %95, %92 ]
  %100 = phi i32 [ %106, %98 ], [ 0, %92 ]
  %101 = phi i8* [ %104, %98 ], [ %93, %92 ]
  %102 = sext i8 %99 to i32
  %103 = mul nsw i32 %100, 10
  %104 = getelementptr inbounds i8, i8* %101, i64 1
  %105 = add nsw i32 %102, -48
  %106 = add i32 %105, %103
  %107 = load i8, i8* %104, align 1
  %108 = add i8 %107, -48
  %109 = icmp ult i8 %108, 10
  br i1 %109, label %98, label %110

110:                                              ; preds = %98, %60, %80, %92
  %111 = phi double [ %84, %80 ], [ %84, %92 ], [ 0.000000e+00, %60 ], [ %84, %98 ]
  %112 = phi double [ %83, %80 ], [ %83, %92 ], [ %58, %60 ], [ %83, %98 ]
  %113 = phi i8* [ %82, %80 ], [ %93, %92 ], [ %57, %60 ], [ %104, %98 ]
  %114 = phi i32 [ 0, %80 ], [ 0, %92 ], [ 0, %60 ], [ %106, %98 ]
  %115 = phi i32 [ 1, %80 ], [ %94, %92 ], [ 1, %60 ], [ %94, %98 ]
  %116 = fmul double %34, %112
  %117 = mul nsw i32 %115, %114
  %118 = sitofp i32 %117 to double
  %119 = fadd double %111, %118
  %120 = tail call double @pow(double 1.000000e+01, double %119) #11
  %121 = fmul double %116, %120
  %122 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 6
  store double %121, double* %122, align 8
  %123 = fptosi double %121 to i32
  %124 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 5
  store i32 %123, i32* %124, align 8
  %125 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 3, i32* %125, align 8
  br label %332

126:                                              ; preds = %27
  switch i8 %24, label %331 [
    i8 91, label %127
    i8 123, label %202
  ]

127:                                              ; preds = %126
  %128 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 5, i32* %128, align 8
  br label %129

129:                                              ; preds = %129, %127
  %130 = phi i8* [ %1, %127 ], [ %131, %129 ]
  %131 = getelementptr inbounds i8, i8* %130, i64 1
  %132 = load i8, i8* %131, align 1
  %133 = add i8 %132, -1
  %134 = icmp ult i8 %133, 32
  br i1 %134, label %129, label %135

135:                                              ; preds = %129
  %136 = icmp eq i8 %132, 93
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = getelementptr inbounds i8, i8* %130, i64 2
  br label %332

139:                                              ; preds = %135
  %140 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %141 = tail call i8* %140(i64 64) #11
  %142 = bitcast i8* %141 to %struct.cJSON*
  %143 = icmp eq i8* %141, null
  br i1 %143, label %144, label %147

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %146 = bitcast %struct.cJSON** %145 to i8**
  store i8* %141, i8** %146, align 8
  br label %332

147:                                              ; preds = %139
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 0, i64 64, i1 false) #11
  %148 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %149 = bitcast %struct.cJSON** %148 to i8**
  store i8* %141, i8** %149, align 8
  %150 = icmp eq i8* %131, null
  br i1 %150, label %157, label %151

151:                                              ; preds = %147, %151
  %152 = phi i8* [ %156, %151 ], [ %131, %147 ]
  %153 = load i8, i8* %152, align 1
  %154 = add i8 %153, -1
  %155 = icmp ult i8 %154, 32
  %156 = getelementptr inbounds i8, i8* %152, i64 1
  br i1 %155, label %151, label %157

157:                                              ; preds = %151, %147
  %158 = phi i8* [ null, %147 ], [ %152, %151 ]
  %159 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %142, i8* %158) #11
  %160 = icmp eq i8* %159, null
  br i1 %160, label %332, label %161

161:                                              ; preds = %157, %161
  %162 = phi i8* [ %166, %161 ], [ %159, %157 ]
  %163 = load i8, i8* %162, align 1
  %164 = add i8 %163, -1
  %165 = icmp ult i8 %164, 32
  %166 = getelementptr inbounds i8, i8* %162, i64 1
  br i1 %165, label %161, label %167

167:                                              ; preds = %161
  %168 = icmp eq i8* %162, null
  br i1 %168, label %332, label %169

169:                                              ; preds = %167, %197
  %170 = phi i8 [ %193, %197 ], [ %163, %167 ]
  %171 = phi i8* [ %192, %197 ], [ %162, %167 ]
  %172 = phi %struct.cJSON* [ %176, %197 ], [ %142, %167 ]
  switch i8 %170, label %201 [
    i8 44, label %173
    i8 93, label %199
  ]

173:                                              ; preds = %169
  %174 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %175 = tail call i8* %174(i64 64) #11
  %176 = bitcast i8* %175 to %struct.cJSON*
  %177 = icmp eq i8* %175, null
  br i1 %177, label %332, label %178

178:                                              ; preds = %173
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %175, i8 0, i64 64, i1 false) #11
  %179 = bitcast %struct.cJSON* %172 to i8**
  store i8* %175, i8** %179, align 8
  %180 = getelementptr inbounds i8, i8* %175, i64 8
  %181 = bitcast i8* %180 to %struct.cJSON**
  store %struct.cJSON* %172, %struct.cJSON** %181, align 8
  br label %182

182:                                              ; preds = %182, %178
  %183 = phi i8* [ %171, %178 ], [ %184, %182 ]
  %184 = getelementptr inbounds i8, i8* %183, i64 1
  %185 = load i8, i8* %184, align 1
  %186 = add i8 %185, -1
  %187 = icmp ult i8 %186, 32
  br i1 %187, label %182, label %188

188:                                              ; preds = %182
  %189 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %176, i8* %184) #11
  %190 = icmp eq i8* %189, null
  br i1 %190, label %332, label %191

191:                                              ; preds = %188, %191
  %192 = phi i8* [ %196, %191 ], [ %189, %188 ]
  %193 = load i8, i8* %192, align 1
  %194 = add i8 %193, -1
  %195 = icmp ult i8 %194, 32
  %196 = getelementptr inbounds i8, i8* %192, i64 1
  br i1 %195, label %191, label %197

197:                                              ; preds = %191
  %198 = icmp eq i8* %192, null
  br i1 %198, label %332, label %169

199:                                              ; preds = %169
  %200 = getelementptr inbounds i8, i8* %171, i64 1
  br label %332

201:                                              ; preds = %169
  store i8* %171, i8** @ep, align 8
  br label %332

202:                                              ; preds = %126
  %203 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 6, i32* %203, align 8
  br label %204

204:                                              ; preds = %204, %202
  %205 = phi i8* [ %1, %202 ], [ %206, %204 ]
  %206 = getelementptr inbounds i8, i8* %205, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = add i8 %207, -1
  %209 = icmp ult i8 %208, 32
  br i1 %209, label %204, label %210

210:                                              ; preds = %204
  %211 = icmp eq i8 %207, 125
  br i1 %211, label %212, label %214

212:                                              ; preds = %210
  %213 = getelementptr inbounds i8, i8* %205, i64 2
  br label %332

214:                                              ; preds = %210
  %215 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %216 = tail call i8* %215(i64 64) #11
  %217 = bitcast i8* %216 to %struct.cJSON*
  %218 = icmp eq i8* %216, null
  br i1 %218, label %219, label %222

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %221 = bitcast %struct.cJSON** %220 to i8**
  store i8* %216, i8** %221, align 8
  br label %332

222:                                              ; preds = %214
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %216, i8 0, i64 64, i1 false) #11
  %223 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %224 = bitcast %struct.cJSON** %223 to i8**
  store i8* %216, i8** %224, align 8
  %225 = icmp eq i8* %206, null
  br i1 %225, label %232, label %226

226:                                              ; preds = %222, %226
  %227 = phi i8* [ %231, %226 ], [ %206, %222 ]
  %228 = load i8, i8* %227, align 1
  %229 = add i8 %228, -1
  %230 = icmp ult i8 %229, 32
  %231 = getelementptr inbounds i8, i8* %227, i64 1
  br i1 %230, label %226, label %232

232:                                              ; preds = %226, %222
  %233 = phi i8* [ null, %222 ], [ %227, %226 ]
  %234 = tail call fastcc i8* @parse_string(%struct.cJSON* nonnull %217, i8* %233) #11
  %235 = icmp eq i8* %234, null
  br i1 %235, label %332, label %236

236:                                              ; preds = %232, %236
  %237 = phi i8* [ %241, %236 ], [ %234, %232 ]
  %238 = load i8, i8* %237, align 1
  %239 = add i8 %238, -1
  %240 = icmp ult i8 %239, 32
  %241 = getelementptr inbounds i8, i8* %237, i64 1
  br i1 %240, label %236, label %242

242:                                              ; preds = %236
  %243 = icmp eq i8* %237, null
  br i1 %243, label %332, label %244

244:                                              ; preds = %242
  %245 = getelementptr inbounds i8, i8* %216, i64 32
  %246 = bitcast i8* %245 to i8**
  %247 = bitcast i8* %245 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds i8, i8* %216, i64 56
  %250 = bitcast i8* %249 to i64*
  store i64 %248, i64* %250, align 8
  store i8* null, i8** %246, align 8
  %251 = load i8, i8* %237, align 1
  %252 = icmp eq i8 %251, 58
  br i1 %252, label %254, label %253

253:                                              ; preds = %244
  store i8* %237, i8** @ep, align 8
  br label %332

254:                                              ; preds = %244, %254
  %255 = phi i8* [ %256, %254 ], [ %237, %244 ]
  %256 = getelementptr inbounds i8, i8* %255, i64 1
  %257 = load i8, i8* %256, align 1
  %258 = add i8 %257, -1
  %259 = icmp ult i8 %258, 32
  br i1 %259, label %254, label %260

260:                                              ; preds = %254
  %261 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %217, i8* %256) #11
  %262 = icmp eq i8* %261, null
  br i1 %262, label %332, label %263

263:                                              ; preds = %260, %263
  %264 = phi i8* [ %268, %263 ], [ %261, %260 ]
  %265 = load i8, i8* %264, align 1
  %266 = add i8 %265, -1
  %267 = icmp ult i8 %266, 32
  %268 = getelementptr inbounds i8, i8* %264, i64 1
  br i1 %267, label %263, label %269

269:                                              ; preds = %263
  %270 = icmp eq i8* %264, null
  br i1 %270, label %332, label %271

271:                                              ; preds = %269, %326
  %272 = phi i8 [ %322, %326 ], [ %265, %269 ]
  %273 = phi i8* [ %321, %326 ], [ %264, %269 ]
  %274 = phi %struct.cJSON* [ %278, %326 ], [ %217, %269 ]
  switch i8 %272, label %330 [
    i8 44, label %275
    i8 125, label %328
  ]

275:                                              ; preds = %271
  %276 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %277 = tail call i8* %276(i64 64) #11
  %278 = bitcast i8* %277 to %struct.cJSON*
  %279 = icmp eq i8* %277, null
  br i1 %279, label %332, label %280

280:                                              ; preds = %275
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %277, i8 0, i64 64, i1 false) #11
  %281 = bitcast %struct.cJSON* %274 to i8**
  store i8* %277, i8** %281, align 8
  %282 = getelementptr inbounds i8, i8* %277, i64 8
  %283 = bitcast i8* %282 to %struct.cJSON**
  store %struct.cJSON* %274, %struct.cJSON** %283, align 8
  br label %284

284:                                              ; preds = %284, %280
  %285 = phi i8* [ %273, %280 ], [ %286, %284 ]
  %286 = getelementptr inbounds i8, i8* %285, i64 1
  %287 = load i8, i8* %286, align 1
  %288 = add i8 %287, -1
  %289 = icmp ult i8 %288, 32
  br i1 %289, label %284, label %290

290:                                              ; preds = %284
  %291 = tail call fastcc i8* @parse_string(%struct.cJSON* nonnull %278, i8* %286) #11
  %292 = icmp eq i8* %291, null
  br i1 %292, label %332, label %293

293:                                              ; preds = %290, %293
  %294 = phi i8* [ %298, %293 ], [ %291, %290 ]
  %295 = load i8, i8* %294, align 1
  %296 = add i8 %295, -1
  %297 = icmp ult i8 %296, 32
  %298 = getelementptr inbounds i8, i8* %294, i64 1
  br i1 %297, label %293, label %299

299:                                              ; preds = %293
  %300 = icmp eq i8* %294, null
  br i1 %300, label %332, label %301

301:                                              ; preds = %299
  %302 = getelementptr inbounds i8, i8* %277, i64 32
  %303 = bitcast i8* %302 to i8**
  %304 = bitcast i8* %302 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = getelementptr inbounds i8, i8* %277, i64 56
  %307 = bitcast i8* %306 to i64*
  store i64 %305, i64* %307, align 8
  store i8* null, i8** %303, align 8
  %308 = load i8, i8* %294, align 1
  %309 = icmp eq i8 %308, 58
  br i1 %309, label %311, label %310

310:                                              ; preds = %301
  store i8* %294, i8** @ep, align 8
  br label %332

311:                                              ; preds = %301, %311
  %312 = phi i8* [ %313, %311 ], [ %294, %301 ]
  %313 = getelementptr inbounds i8, i8* %312, i64 1
  %314 = load i8, i8* %313, align 1
  %315 = add i8 %314, -1
  %316 = icmp ult i8 %315, 32
  br i1 %316, label %311, label %317

317:                                              ; preds = %311
  %318 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %278, i8* %313) #11
  %319 = icmp eq i8* %318, null
  br i1 %319, label %332, label %320

320:                                              ; preds = %317, %320
  %321 = phi i8* [ %325, %320 ], [ %318, %317 ]
  %322 = load i8, i8* %321, align 1
  %323 = add i8 %322, -1
  %324 = icmp ult i8 %323, 32
  %325 = getelementptr inbounds i8, i8* %321, i64 1
  br i1 %324, label %320, label %326

326:                                              ; preds = %320
  %327 = icmp eq i8* %321, null
  br i1 %327, label %332, label %271

328:                                              ; preds = %271
  %329 = getelementptr inbounds i8, i8* %273, i64 1
  br label %332

330:                                              ; preds = %271
  store i8* %273, i8** @ep, align 8
  br label %332

331:                                              ; preds = %126
  store i8* %1, i8** @ep, align 8
  br label %332

332:                                              ; preds = %275, %326, %290, %299, %317, %173, %197, %188, %219, %144, %310, %260, %232, %157, %330, %328, %269, %253, %242, %212, %201, %199, %167, %137, %2, %331, %110, %25, %19, %13, %7
  %333 = phi i8* [ %26, %25 ], [ %113, %110 ], [ null, %331 ], [ %22, %19 ], [ %15, %13 ], [ %9, %7 ], [ null, %2 ], [ %138, %137 ], [ %200, %199 ], [ null, %201 ], [ null, %167 ], [ %213, %212 ], [ null, %253 ], [ %329, %328 ], [ null, %330 ], [ null, %242 ], [ null, %269 ], [ null, %157 ], [ null, %232 ], [ null, %260 ], [ null, %310 ], [ null, %144 ], [ null, %219 ], [ null, %188 ], [ null, %197 ], [ null, %173 ], [ null, %317 ], [ null, %299 ], [ null, %290 ], [ null, %326 ], [ null, %275 ]
  ret i8* %333
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_Parse(i8*) local_unnamed_addr #4 {
  %2 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %3 = tail call i8* %2(i64 64) #11
  %4 = bitcast i8* %3 to %struct.cJSON*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store i8* null, i8** @ep, align 8
  br label %20

7:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 64, i1 false) #11
  store i8* null, i8** @ep, align 8
  %8 = icmp eq i8* %0, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %7, %9
  %10 = phi i8* [ %14, %9 ], [ %0, %7 ]
  %11 = load i8, i8* %10, align 1
  %12 = add i8 %11, -1
  %13 = icmp ult i8 %12, 32
  %14 = getelementptr inbounds i8, i8* %10, i64 1
  br i1 %13, label %9, label %15

15:                                               ; preds = %9, %7
  %16 = phi i8* [ null, %7 ], [ %10, %9 ]
  %17 = tail call fastcc i8* @parse_value(%struct.cJSON* nonnull %4, i8* %16) #11
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %15
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %4) #11
  br label %20

20:                                               ; preds = %15, %6, %19
  %21 = phi %struct.cJSON* [ null, %19 ], [ null, %6 ], [ %4, %15 ]
  ret %struct.cJSON* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cJSON_Print(%struct.cJSON* readonly) local_unnamed_addr #4 {
  %2 = tail call fastcc i8* @print_value(%struct.cJSON* %0, i32 0, i32 1, %struct.printbuffer* null)
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @print_value(%struct.cJSON* readonly, i32, i32, %struct.printbuffer*) unnamed_addr #4 {
  %5 = icmp eq %struct.cJSON* %0, null
  br i1 %5, label %180, label %6

6:                                                ; preds = %4
  %7 = icmp eq %struct.printbuffer* %3, null
  %8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = trunc i32 %9 to i8
  br i1 %7, label %154, label %11

11:                                               ; preds = %6
  switch i8 %10, label %180 [
    i8 2, label %12
    i8 0, label %56
    i8 1, label %100
    i8 3, label %144
    i8 4, label %146
    i8 5, label %150
    i8 6, label %152
  ]

12:                                               ; preds = %11
  %13 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %180, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 5
  %20 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ugt i64 %19, %21
  br i1 %22, label %25, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds i8, i8* %14, i64 %18
  br label %52

25:                                               ; preds = %16
  %26 = add i64 %18, 4
  %27 = lshr i64 %26, 1
  %28 = or i64 %27, %26
  %29 = lshr i64 %28, 2
  %30 = or i64 %29, %28
  %31 = lshr i64 %30, 4
  %32 = or i64 %31, %30
  %33 = lshr i64 %32, 8
  %34 = or i64 %33, %32
  %35 = lshr i64 %34, 16
  %36 = or i64 %35, %34
  %37 = add i64 %36, 1
  %38 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %39 = tail call i8* %38(i64 %37) #11
  %40 = icmp eq i8* %39, null
  br i1 %40, label %41, label %45

41:                                               ; preds = %25
  %42 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %43 = load i8*, i8** %13, align 8
  tail call void %42(i8* %43) #11
  %44 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 16, i1 false) #11
  br label %180

45:                                               ; preds = %25
  %46 = load i8*, i8** %13, align 8
  %47 = load i64, i64* %20, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %39, i8* align 1 %46, i64 %47, i1 false) #11
  %48 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %49 = load i8*, i8** %13, align 8
  tail call void %48(i8* %49) #11
  store i64 %37, i64* %20, align 8
  store i8* %39, i8** %13, align 8
  %50 = load i64, i64* %17, align 8
  %51 = getelementptr inbounds i8, i8* %39, i64 %50
  br label %52

52:                                               ; preds = %23, %45
  %53 = phi i8* [ %24, %23 ], [ %51, %45 ]
  %54 = icmp eq i8* %53, null
  br i1 %54, label %180, label %55

55:                                               ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 5, i1 false)
  br label %180

56:                                               ; preds = %11
  %57 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %180, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 6
  %64 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp ugt i64 %63, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds i8, i8* %58, i64 %62
  br label %96

69:                                               ; preds = %60
  %70 = add i64 %62, 5
  %71 = lshr i64 %70, 1
  %72 = or i64 %71, %70
  %73 = lshr i64 %72, 2
  %74 = or i64 %73, %72
  %75 = lshr i64 %74, 4
  %76 = or i64 %75, %74
  %77 = lshr i64 %76, 8
  %78 = or i64 %77, %76
  %79 = lshr i64 %78, 16
  %80 = or i64 %79, %78
  %81 = add i64 %80, 1
  %82 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %83 = tail call i8* %82(i64 %81) #11
  %84 = icmp eq i8* %83, null
  br i1 %84, label %85, label %89

85:                                               ; preds = %69
  %86 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %87 = load i8*, i8** %57, align 8
  tail call void %86(i8* %87) #11
  %88 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 0, i64 16, i1 false) #11
  br label %180

89:                                               ; preds = %69
  %90 = load i8*, i8** %57, align 8
  %91 = load i64, i64* %64, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %83, i8* align 1 %90, i64 %91, i1 false) #11
  %92 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %93 = load i8*, i8** %57, align 8
  tail call void %92(i8* %93) #11
  store i64 %81, i64* %64, align 8
  store i8* %83, i8** %57, align 8
  %94 = load i64, i64* %61, align 8
  %95 = getelementptr inbounds i8, i8* %83, i64 %94
  br label %96

96:                                               ; preds = %67, %89
  %97 = phi i8* [ %68, %67 ], [ %95, %89 ]
  %98 = icmp eq i8* %97, null
  br i1 %98, label %180, label %99

99:                                               ; preds = %96
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %97, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 6, i1 false)
  br label %180

100:                                              ; preds = %11
  %101 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %180, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, 5
  %108 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = icmp ugt i64 %107, %109
  br i1 %110, label %113, label %111

111:                                              ; preds = %104
  %112 = getelementptr inbounds i8, i8* %102, i64 %106
  br label %140

113:                                              ; preds = %104
  %114 = add i64 %106, 4
  %115 = lshr i64 %114, 1
  %116 = or i64 %115, %114
  %117 = lshr i64 %116, 2
  %118 = or i64 %117, %116
  %119 = lshr i64 %118, 4
  %120 = or i64 %119, %118
  %121 = lshr i64 %120, 8
  %122 = or i64 %121, %120
  %123 = lshr i64 %122, 16
  %124 = or i64 %123, %122
  %125 = add i64 %124, 1
  %126 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %127 = tail call i8* %126(i64 %125) #11
  %128 = icmp eq i8* %127, null
  br i1 %128, label %129, label %133

129:                                              ; preds = %113
  %130 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %131 = load i8*, i8** %101, align 8
  tail call void %130(i8* %131) #11
  %132 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 0, i64 16, i1 false) #11
  br label %180

133:                                              ; preds = %113
  %134 = load i8*, i8** %101, align 8
  %135 = load i64, i64* %108, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %127, i8* align 1 %134, i64 %135, i1 false) #11
  %136 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %137 = load i8*, i8** %101, align 8
  tail call void %136(i8* %137) #11
  store i64 %125, i64* %108, align 8
  store i8* %127, i8** %101, align 8
  %138 = load i64, i64* %105, align 8
  %139 = getelementptr inbounds i8, i8* %127, i64 %138
  br label %140

140:                                              ; preds = %111, %133
  %141 = phi i8* [ %112, %111 ], [ %139, %133 ]
  %142 = icmp eq i8* %141, null
  br i1 %142, label %180, label %143

143:                                              ; preds = %140
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %141, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 5, i1 false)
  br label %180

144:                                              ; preds = %11
  %145 = tail call fastcc i8* @print_number(%struct.cJSON* nonnull %0, %struct.printbuffer* nonnull %3)
  br label %180

146:                                              ; preds = %11
  %147 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 4
  %148 = load i8*, i8** %147, align 8
  %149 = tail call fastcc i8* @print_string_ptr(i8* %148, %struct.printbuffer* nonnull %3) #11
  br label %180

150:                                              ; preds = %11
  %151 = tail call fastcc i8* @print_array(%struct.cJSON* nonnull %0, i32 %1, i32 %2, %struct.printbuffer* nonnull %3)
  br label %180

152:                                              ; preds = %11
  %153 = tail call fastcc i8* @print_object(%struct.cJSON* nonnull %0, i32 %1, i32 %2, %struct.printbuffer* nonnull %3)
  br label %180

154:                                              ; preds = %6
  switch i8 %10, label %180 [
    i8 2, label %155
    i8 0, label %160
    i8 1, label %165
    i8 3, label %170
    i8 4, label %172
    i8 5, label %176
    i8 6, label %178
  ]

155:                                              ; preds = %154
  %156 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %157 = tail call i8* %156(i64 5) #11
  %158 = icmp eq i8* %157, null
  br i1 %158, label %180, label %159

159:                                              ; preds = %155
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %157, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #11
  br label %180

160:                                              ; preds = %154
  %161 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %162 = tail call i8* %161(i64 6) #11
  %163 = icmp eq i8* %162, null
  br i1 %163, label %180, label %164

164:                                              ; preds = %160
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %162, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 6, i1 false) #11
  br label %180

165:                                              ; preds = %154
  %166 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %167 = tail call i8* %166(i64 5) #11
  %168 = icmp eq i8* %167, null
  br i1 %168, label %180, label %169

169:                                              ; preds = %165
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %167, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 5, i1 false) #11
  br label %180

170:                                              ; preds = %154
  %171 = tail call fastcc i8* @print_number(%struct.cJSON* nonnull %0, %struct.printbuffer* null)
  br label %180

172:                                              ; preds = %154
  %173 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 4
  %174 = load i8*, i8** %173, align 8
  %175 = tail call fastcc i8* @print_string_ptr(i8* %174, %struct.printbuffer* null) #11
  br label %180

176:                                              ; preds = %154
  %177 = tail call fastcc i8* @print_array(%struct.cJSON* nonnull %0, i32 %1, i32 %2, %struct.printbuffer* null)
  br label %180

178:                                              ; preds = %154
  %179 = tail call fastcc i8* @print_object(%struct.cJSON* nonnull %0, i32 %1, i32 %2, %struct.printbuffer* null)
  br label %180

180:                                              ; preds = %100, %129, %56, %85, %12, %41, %169, %165, %164, %160, %159, %155, %143, %99, %55, %11, %152, %150, %146, %144, %154, %178, %176, %172, %170, %140, %96, %52, %4
  %181 = phi i8* [ null, %4 ], [ null, %11 ], [ %153, %152 ], [ %151, %150 ], [ %149, %146 ], [ %145, %144 ], [ %141, %143 ], [ null, %140 ], [ %97, %99 ], [ null, %96 ], [ %53, %55 ], [ null, %52 ], [ null, %154 ], [ %179, %178 ], [ %177, %176 ], [ %175, %172 ], [ %171, %170 ], [ null, %155 ], [ %157, %159 ], [ null, %160 ], [ %162, %164 ], [ null, %165 ], [ %167, %169 ], [ null, %41 ], [ null, %12 ], [ null, %85 ], [ null, %56 ], [ null, %129 ], [ null, %100 ]
  ret i8* %181
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cJSON_PrintUnformatted(%struct.cJSON* readonly) local_unnamed_addr #4 {
  %2 = tail call fastcc i8* @print_value(%struct.cJSON* %0, i32 0, i32 0, %struct.printbuffer* null)
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cJSON_PrintBuffered(%struct.cJSON* readonly, i32, i32) local_unnamed_addr #4 {
  %4 = alloca %struct.printbuffer, align 8
  %5 = bitcast %struct.printbuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #11
  %6 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %4, i64 0, i32 1
  %8 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %4, i64 0, i32 2
  %9 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %10 = sext i32 %1 to i64
  %11 = tail call i8* %9(i64 %10) #11
  store i8* %11, i8** %6, align 8
  store i64 %10, i64* %7, align 8
  store i64 0, i64* %8, align 8
  %12 = call fastcc i8* @print_value(%struct.cJSON* %0, i32 0, i32 %2, %struct.printbuffer* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #11
  ret i8* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @cJSON_GetArraySize(%struct.cJSON* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %3 = load %struct.cJSON*, %struct.cJSON** %2, align 8
  %4 = icmp eq %struct.cJSON* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1, %5
  %6 = phi %struct.cJSON* [ %10, %5 ], [ %3, %1 ]
  %7 = phi i32 [ %8, %5 ], [ 0, %1 ]
  %8 = add nuw nsw i32 %7, 1
  %9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %6, i64 0, i32 0
  %10 = load %struct.cJSON*, %struct.cJSON** %9, align 8
  %11 = icmp eq %struct.cJSON* %10, null
  br i1 %11, label %12, label %5

12:                                               ; preds = %5, %1
  %13 = phi i32 [ 0, %1 ], [ %8, %5 ]
  ret i32 %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.cJSON* @cJSON_GetArrayItem(%struct.cJSON* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp ne %struct.cJSON* %4, null
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %17

8:                                                ; preds = %2, %8
  %9 = phi %struct.cJSON* [ %13, %8 ], [ %4, %2 ]
  %10 = phi i32 [ %11, %8 ], [ %1, %2 ]
  %11 = add nsw i32 %10, -1
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i64 0, i32 0
  %13 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %14 = icmp ne %struct.cJSON* %13, null
  %15 = icmp sgt i32 %11, 0
  %16 = and i1 %15, %14
  br i1 %16, label %8, label %17

17:                                               ; preds = %8, %2
  %18 = phi %struct.cJSON* [ %4, %2 ], [ %13, %8 ]
  ret %struct.cJSON* %18
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden %struct.cJSON* @cJSON_GetObjectItem(%struct.cJSON* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp eq %struct.cJSON* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2, %12
  %7 = phi %struct.cJSON* [ %14, %12 ], [ %4, %2 ]
  %8 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 7
  %9 = load i8*, i8** %8, align 8
  %10 = tail call i32 @strcmp(i8* %9, i8* %1) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 0
  %14 = load %struct.cJSON*, %struct.cJSON** %13, align 8
  %15 = icmp eq %struct.cJSON* %14, null
  br i1 %15, label %16, label %6

16:                                               ; preds = %12, %6, %2
  %17 = phi %struct.cJSON* [ null, %2 ], [ %7, %6 ], [ null, %12 ]
  ret %struct.cJSON* %17
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cJSON_AddItemToArray(%struct.cJSON* nocapture, %struct.cJSON*) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp eq %struct.cJSON* %1, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %2
  %7 = icmp eq %struct.cJSON* %4, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  store %struct.cJSON* %1, %struct.cJSON** %3, align 8
  br label %17

9:                                                ; preds = %6, %9
  %10 = phi %struct.cJSON* [ %12, %9 ], [ %4, %6 ]
  %11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i64 0, i32 0
  %12 = load %struct.cJSON*, %struct.cJSON** %11, align 8
  %13 = icmp eq %struct.cJSON* %12, null
  br i1 %13, label %14, label %9

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i64 0, i32 0
  store %struct.cJSON* %1, %struct.cJSON** %15, align 8
  %16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i64 0, i32 1
  store %struct.cJSON* %10, %struct.cJSON** %16, align 8
  br label %17

17:                                               ; preds = %8, %14, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_AddItemToObject(%struct.cJSON* nocapture, i8* nocapture readonly, %struct.cJSON*) local_unnamed_addr #4 {
  %4 = icmp eq %struct.cJSON* %2, null
  br i1 %4, label %31, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 7
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %10(i8* nonnull %7) #11
  br label %11

11:                                               ; preds = %5, %9
  %12 = tail call i64 @strlen(i8* %1) #12
  %13 = add i64 %12, 1
  %14 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %15 = tail call i8* %14(i64 %13) #11
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %15, i8* align 1 %1, i64 %13, i1 false) #11
  br label %18

18:                                               ; preds = %17, %11
  store i8* %15, i8** %6, align 8
  %19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %20 = load %struct.cJSON*, %struct.cJSON** %19, align 8
  %21 = icmp eq %struct.cJSON* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  store %struct.cJSON* %2, %struct.cJSON** %19, align 8
  br label %31

23:                                               ; preds = %18, %23
  %24 = phi %struct.cJSON* [ %26, %23 ], [ %20, %18 ]
  %25 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i64 0, i32 0
  %26 = load %struct.cJSON*, %struct.cJSON** %25, align 8
  %27 = icmp eq %struct.cJSON* %26, null
  br i1 %27, label %28, label %23

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %24, i64 0, i32 0
  store %struct.cJSON* %2, %struct.cJSON** %29, align 8
  %30 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  store %struct.cJSON* %24, %struct.cJSON** %30, align 8
  br label %31

31:                                               ; preds = %28, %22, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_AddItemToObjectCS(%struct.cJSON* nocapture, i8*, %struct.cJSON*) local_unnamed_addr #4 {
  %4 = icmp eq %struct.cJSON* %2, null
  br i1 %4, label %33, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 512
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 7
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %15(i8* nonnull %12) #11
  %16 = load i32, i32* %6, align 8
  br label %17

17:                                               ; preds = %14, %5, %10
  %18 = phi i32 [ %16, %14 ], [ %7, %5 ], [ %7, %10 ]
  %19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 7
  store i8* %1, i8** %19, align 8
  %20 = or i32 %18, 512
  store i32 %20, i32* %6, align 8
  %21 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %22 = load %struct.cJSON*, %struct.cJSON** %21, align 8
  %23 = icmp eq %struct.cJSON* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %17
  store %struct.cJSON* %2, %struct.cJSON** %21, align 8
  br label %33

25:                                               ; preds = %17, %25
  %26 = phi %struct.cJSON* [ %28, %25 ], [ %22, %17 ]
  %27 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %26, i64 0, i32 0
  %28 = load %struct.cJSON*, %struct.cJSON** %27, align 8
  %29 = icmp eq %struct.cJSON* %28, null
  br i1 %29, label %30, label %25

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %26, i64 0, i32 0
  store %struct.cJSON* %2, %struct.cJSON** %31, align 8
  %32 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  store %struct.cJSON* %26, %struct.cJSON** %32, align 8
  br label %33

33:                                               ; preds = %30, %24, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_AddItemReferenceToArray(%struct.cJSON* nocapture, %struct.cJSON* nocapture readonly) local_unnamed_addr #4 {
  %3 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %4 = tail call i8* %3(i64 64) #11
  %5 = icmp eq i8* %4, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = bitcast %struct.cJSON* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %7, i64 56, i1 false) #11
  %8 = getelementptr inbounds i8, i8* %4, i64 56
  %9 = bitcast i8* %8 to i8**
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = or i32 %12, 256
  store i32 %13, i32* %11, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #11
  %14 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %15 = load %struct.cJSON*, %struct.cJSON** %14, align 8
  %16 = icmp eq %struct.cJSON* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %6
  %18 = bitcast %struct.cJSON** %14 to i8**
  store i8* %4, i8** %18, align 8
  br label %28

19:                                               ; preds = %6, %19
  %20 = phi %struct.cJSON* [ %22, %19 ], [ %15, %6 ]
  %21 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %20, i64 0, i32 0
  %22 = load %struct.cJSON*, %struct.cJSON** %21, align 8
  %23 = icmp eq %struct.cJSON* %22, null
  br i1 %23, label %24, label %19

24:                                               ; preds = %19
  %25 = bitcast %struct.cJSON* %20 to i8**
  store i8* %4, i8** %25, align 8
  %26 = getelementptr inbounds i8, i8* %4, i64 8
  %27 = bitcast i8* %26 to %struct.cJSON**
  store %struct.cJSON* %20, %struct.cJSON** %27, align 8
  br label %28

28:                                               ; preds = %2, %17, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_AddItemReferenceToObject(%struct.cJSON* nocapture, i8* nocapture readonly, %struct.cJSON* nocapture readonly) local_unnamed_addr #4 {
  %4 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %5 = tail call i8* %4(i64 64) #11
  %6 = icmp eq i8* %5, null
  br i1 %6, label %36, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.cJSON* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %8, i64 56, i1 false) #11
  %9 = getelementptr inbounds i8, i8* %5, i64 56
  %10 = bitcast i8* %9 to i8**
  store i8* null, i8** %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 24
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = or i32 %13, 256
  store i32 %14, i32* %12, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #11
  %15 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %16 = tail call i64 @strlen(i8* %1) #12
  %17 = add i64 %16, 1
  %18 = tail call i8* %15(i64 %17) #11
  %19 = icmp eq i8* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %18, i8* align 1 %1, i64 %17, i1 false) #11
  br label %21

21:                                               ; preds = %20, %7
  store i8* %18, i8** %10, align 8
  %22 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %23 = load %struct.cJSON*, %struct.cJSON** %22, align 8
  %24 = icmp eq %struct.cJSON* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %21
  %26 = bitcast %struct.cJSON** %22 to i8**
  store i8* %5, i8** %26, align 8
  br label %36

27:                                               ; preds = %21, %27
  %28 = phi %struct.cJSON* [ %30, %27 ], [ %23, %21 ]
  %29 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %28, i64 0, i32 0
  %30 = load %struct.cJSON*, %struct.cJSON** %29, align 8
  %31 = icmp eq %struct.cJSON* %30, null
  br i1 %31, label %32, label %27

32:                                               ; preds = %27
  %33 = bitcast %struct.cJSON* %28 to i8**
  store i8* %5, i8** %33, align 8
  %34 = getelementptr inbounds i8, i8* %5, i64 8
  %35 = bitcast i8* %34 to %struct.cJSON**
  store %struct.cJSON* %28, %struct.cJSON** %35, align 8
  br label %36

36:                                               ; preds = %3, %25, %32
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_DetachItemFromArray(%struct.cJSON* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp ne %struct.cJSON* %4, null
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %17

8:                                                ; preds = %2, %8
  %9 = phi %struct.cJSON* [ %13, %8 ], [ %4, %2 ]
  %10 = phi i32 [ %12, %8 ], [ %1, %2 ]
  %11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i64 0, i32 0
  %12 = add nsw i32 %10, -1
  %13 = load %struct.cJSON*, %struct.cJSON** %11, align 8
  %14 = icmp ne %struct.cJSON* %13, null
  %15 = icmp sgt i32 %12, 0
  %16 = and i1 %15, %14
  br i1 %16, label %8, label %17

17:                                               ; preds = %8, %2
  %18 = phi %struct.cJSON* [ %4, %2 ], [ %13, %8 ]
  %19 = phi i1 [ %5, %2 ], [ %14, %8 ]
  br i1 %19, label %20, label %46

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i64 0, i32 1
  %22 = load %struct.cJSON*, %struct.cJSON** %21, align 8
  %23 = icmp eq %struct.cJSON* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = bitcast %struct.cJSON* %18 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %struct.cJSON* %22 to i64*
  store i64 %26, i64* %27, align 8
  br label %28

28:                                               ; preds = %20, %24
  %29 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i64 0, i32 0
  %30 = load %struct.cJSON*, %struct.cJSON** %29, align 8
  %31 = icmp eq %struct.cJSON* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = bitcast %struct.cJSON** %21 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i64 0, i32 1
  %36 = bitcast %struct.cJSON** %35 to i64*
  store i64 %34, i64* %36, align 8
  br label %37

37:                                               ; preds = %28, %32
  %38 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %39 = icmp eq %struct.cJSON* %18, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %37
  %41 = bitcast %struct.cJSON* %18 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %struct.cJSON** %3 to i64*
  store i64 %42, i64* %43, align 8
  br label %44

44:                                               ; preds = %40, %37
  %45 = bitcast %struct.cJSON* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false)
  br label %46

46:                                               ; preds = %17, %44
  ret %struct.cJSON* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_DeleteItemFromArray(%struct.cJSON* nocapture, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp ne %struct.cJSON* %4, null
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %17

8:                                                ; preds = %2, %8
  %9 = phi %struct.cJSON* [ %13, %8 ], [ %4, %2 ]
  %10 = phi i32 [ %12, %8 ], [ %1, %2 ]
  %11 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i64 0, i32 0
  %12 = add nsw i32 %10, -1
  %13 = load %struct.cJSON*, %struct.cJSON** %11, align 8
  %14 = icmp ne %struct.cJSON* %13, null
  %15 = icmp sgt i32 %12, 0
  %16 = and i1 %15, %14
  br i1 %16, label %8, label %17

17:                                               ; preds = %8, %2
  %18 = phi %struct.cJSON* [ %4, %2 ], [ %13, %8 ]
  %19 = phi i1 [ %5, %2 ], [ %14, %8 ]
  br i1 %19, label %20, label %46

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i64 0, i32 1
  %22 = load %struct.cJSON*, %struct.cJSON** %21, align 8
  %23 = icmp eq %struct.cJSON* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = bitcast %struct.cJSON* %18 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %struct.cJSON* %22 to i64*
  store i64 %26, i64* %27, align 8
  br label %28

28:                                               ; preds = %24, %20
  %29 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %18, i64 0, i32 0
  %30 = load %struct.cJSON*, %struct.cJSON** %29, align 8
  %31 = icmp eq %struct.cJSON* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = bitcast %struct.cJSON** %21 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %30, i64 0, i32 1
  %36 = bitcast %struct.cJSON** %35 to i64*
  store i64 %34, i64* %36, align 8
  br label %37

37:                                               ; preds = %32, %28
  %38 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %39 = icmp eq %struct.cJSON* %18, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %37
  %41 = bitcast %struct.cJSON* %18 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %struct.cJSON** %3 to i64*
  store i64 %42, i64* %43, align 8
  br label %44

44:                                               ; preds = %40, %37
  %45 = bitcast %struct.cJSON* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #11
  br label %46

46:                                               ; preds = %17, %44
  tail call void @cJSON_Delete(%struct.cJSON* %18)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_DetachItemFromObject(%struct.cJSON* nocapture, i8* nocapture readonly) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp eq %struct.cJSON* %4, null
  br i1 %5, label %57, label %6

6:                                                ; preds = %2, %13
  %7 = phi %struct.cJSON* [ %16, %13 ], [ %4, %2 ]
  %8 = phi i32 [ %14, %13 ], [ 0, %2 ]
  %9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 7
  %10 = load i8*, i8** %9, align 8
  %11 = tail call i32 @strcmp(i8* %10, i8* %1) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %6
  %14 = add nuw nsw i32 %8, 1
  %15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 0
  %16 = load %struct.cJSON*, %struct.cJSON** %15, align 8
  %17 = icmp eq %struct.cJSON* %16, null
  br i1 %17, label %57, label %6

18:                                               ; preds = %6
  %19 = icmp eq i32 %8, 0
  br i1 %19, label %30, label %20

20:                                               ; preds = %18, %20
  %21 = phi %struct.cJSON* [ %25, %20 ], [ %4, %18 ]
  %22 = phi i32 [ %24, %20 ], [ %8, %18 ]
  %23 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %21, i64 0, i32 0
  %24 = add nsw i32 %22, -1
  %25 = load %struct.cJSON*, %struct.cJSON** %23, align 8
  %26 = icmp ne %struct.cJSON* %25, null
  %27 = icmp sgt i32 %24, 0
  %28 = and i1 %27, %26
  br i1 %28, label %20, label %29

29:                                               ; preds = %20
  br i1 %26, label %30, label %57

30:                                               ; preds = %18, %29
  %31 = phi %struct.cJSON* [ %25, %29 ], [ %4, %18 ]
  %32 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %31, i64 0, i32 1
  %33 = load %struct.cJSON*, %struct.cJSON** %32, align 8
  %34 = icmp eq %struct.cJSON* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %30
  %36 = bitcast %struct.cJSON* %31 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %struct.cJSON* %33 to i64*
  store i64 %37, i64* %38, align 8
  br label %39

39:                                               ; preds = %35, %30
  %40 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %31, i64 0, i32 0
  %41 = load %struct.cJSON*, %struct.cJSON** %40, align 8
  %42 = icmp eq %struct.cJSON* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = bitcast %struct.cJSON** %32 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %41, i64 0, i32 1
  %47 = bitcast %struct.cJSON** %46 to i64*
  store i64 %45, i64* %47, align 8
  br label %48

48:                                               ; preds = %43, %39
  %49 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %50 = icmp eq %struct.cJSON* %31, %49
  br i1 %50, label %51, label %55

51:                                               ; preds = %48
  %52 = bitcast %struct.cJSON* %31 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %struct.cJSON** %3 to i64*
  store i64 %53, i64* %54, align 8
  br label %55

55:                                               ; preds = %51, %48
  %56 = bitcast %struct.cJSON* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false) #11
  br label %57

57:                                               ; preds = %13, %2, %55, %29
  %58 = phi %struct.cJSON* [ %25, %29 ], [ %31, %55 ], [ null, %2 ], [ null, %13 ]
  ret %struct.cJSON* %58
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_DeleteItemFromObject(%struct.cJSON* nocapture, i8* nocapture readonly) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %4 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %5 = icmp eq %struct.cJSON* %4, null
  br i1 %5, label %57, label %6

6:                                                ; preds = %2, %13
  %7 = phi %struct.cJSON* [ %16, %13 ], [ %4, %2 ]
  %8 = phi i32 [ %14, %13 ], [ 0, %2 ]
  %9 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 7
  %10 = load i8*, i8** %9, align 8
  %11 = tail call i32 @strcmp(i8* %10, i8* %1) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %6
  %14 = add nuw nsw i32 %8, 1
  %15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %7, i64 0, i32 0
  %16 = load %struct.cJSON*, %struct.cJSON** %15, align 8
  %17 = icmp eq %struct.cJSON* %16, null
  br i1 %17, label %57, label %6

18:                                               ; preds = %6
  %19 = icmp eq i32 %8, 0
  br i1 %19, label %30, label %20

20:                                               ; preds = %18, %20
  %21 = phi %struct.cJSON* [ %25, %20 ], [ %4, %18 ]
  %22 = phi i32 [ %24, %20 ], [ %8, %18 ]
  %23 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %21, i64 0, i32 0
  %24 = add nsw i32 %22, -1
  %25 = load %struct.cJSON*, %struct.cJSON** %23, align 8
  %26 = icmp ne %struct.cJSON* %25, null
  %27 = icmp sgt i32 %24, 0
  %28 = and i1 %27, %26
  br i1 %28, label %20, label %29

29:                                               ; preds = %20
  br i1 %26, label %30, label %57

30:                                               ; preds = %29, %18
  %31 = phi %struct.cJSON* [ %25, %29 ], [ %4, %18 ]
  %32 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %31, i64 0, i32 1
  %33 = load %struct.cJSON*, %struct.cJSON** %32, align 8
  %34 = icmp eq %struct.cJSON* %33, null
  br i1 %34, label %39, label %35

35:                                               ; preds = %30
  %36 = bitcast %struct.cJSON* %31 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %struct.cJSON* %33 to i64*
  store i64 %37, i64* %38, align 8
  br label %39

39:                                               ; preds = %35, %30
  %40 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %31, i64 0, i32 0
  %41 = load %struct.cJSON*, %struct.cJSON** %40, align 8
  %42 = icmp eq %struct.cJSON* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = bitcast %struct.cJSON** %32 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %41, i64 0, i32 1
  %47 = bitcast %struct.cJSON** %46 to i64*
  store i64 %45, i64* %47, align 8
  br label %48

48:                                               ; preds = %43, %39
  %49 = load %struct.cJSON*, %struct.cJSON** %3, align 8
  %50 = icmp eq %struct.cJSON* %31, %49
  br i1 %50, label %51, label %55

51:                                               ; preds = %48
  %52 = bitcast %struct.cJSON* %31 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %struct.cJSON** %3 to i64*
  store i64 %53, i64* %54, align 8
  br label %55

55:                                               ; preds = %51, %48
  %56 = bitcast %struct.cJSON* %31 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false) #11
  br label %57

57:                                               ; preds = %13, %2, %29, %55
  %58 = phi %struct.cJSON* [ null, %29 ], [ %31, %55 ], [ null, %2 ], [ null, %13 ]
  tail call void @cJSON_Delete(%struct.cJSON* %58)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cJSON_InsertItemInArray(%struct.cJSON* nocapture, i32, %struct.cJSON*) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %5 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %6 = icmp ne %struct.cJSON* %5, null
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %18

9:                                                ; preds = %3, %9
  %10 = phi %struct.cJSON* [ %14, %9 ], [ %5, %3 ]
  %11 = phi i32 [ %13, %9 ], [ %1, %3 ]
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i64 0, i32 0
  %13 = add nsw i32 %11, -1
  %14 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %15 = icmp ne %struct.cJSON* %14, null
  %16 = icmp sgt i32 %13, 0
  %17 = and i1 %16, %15
  br i1 %17, label %9, label %18

18:                                               ; preds = %9, %3
  %19 = phi %struct.cJSON* [ %5, %3 ], [ %14, %9 ]
  %20 = phi i1 [ %6, %3 ], [ %15, %9 ]
  br i1 %20, label %34, label %21

21:                                               ; preds = %18
  %22 = icmp eq %struct.cJSON* %2, null
  br i1 %22, label %47, label %23

23:                                               ; preds = %21
  %24 = icmp eq %struct.cJSON* %5, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %23
  store %struct.cJSON* %2, %struct.cJSON** %4, align 8
  br label %47

26:                                               ; preds = %23, %26
  %27 = phi %struct.cJSON* [ %29, %26 ], [ %5, %23 ]
  %28 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %27, i64 0, i32 0
  %29 = load %struct.cJSON*, %struct.cJSON** %28, align 8
  %30 = icmp eq %struct.cJSON* %29, null
  br i1 %30, label %31, label %26

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %27, i64 0, i32 0
  store %struct.cJSON* %2, %struct.cJSON** %32, align 8
  %33 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  store %struct.cJSON* %27, %struct.cJSON** %33, align 8
  br label %47

34:                                               ; preds = %18
  %35 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 0
  store %struct.cJSON* %19, %struct.cJSON** %35, align 8
  %36 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i64 0, i32 1
  %37 = bitcast %struct.cJSON** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  %40 = bitcast %struct.cJSON** %39 to i64*
  store i64 %38, i64* %40, align 8
  store %struct.cJSON* %2, %struct.cJSON** %36, align 8
  %41 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %42 = icmp eq %struct.cJSON* %19, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %34
  store %struct.cJSON* %2, %struct.cJSON** %4, align 8
  br label %47

44:                                               ; preds = %34
  %45 = load %struct.cJSON*, %struct.cJSON** %39, align 8
  %46 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %45, i64 0, i32 0
  store %struct.cJSON* %2, %struct.cJSON** %46, align 8
  br label %47

47:                                               ; preds = %31, %25, %21, %43, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_ReplaceItemInArray(%struct.cJSON* nocapture, i32, %struct.cJSON*) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %5 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %6 = icmp ne %struct.cJSON* %5, null
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %18

9:                                                ; preds = %3, %9
  %10 = phi %struct.cJSON* [ %14, %9 ], [ %5, %3 ]
  %11 = phi i32 [ %13, %9 ], [ %1, %3 ]
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %10, i64 0, i32 0
  %13 = add nsw i32 %11, -1
  %14 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %15 = icmp ne %struct.cJSON* %14, null
  %16 = icmp sgt i32 %13, 0
  %17 = and i1 %16, %15
  br i1 %17, label %9, label %18

18:                                               ; preds = %9, %3
  %19 = phi %struct.cJSON* [ %5, %3 ], [ %14, %9 ]
  %20 = phi i1 [ %6, %3 ], [ %15, %9 ]
  br i1 %20, label %21, label %43

21:                                               ; preds = %18
  %22 = bitcast %struct.cJSON* %19 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %struct.cJSON* %2 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %19, i64 0, i32 1
  %26 = bitcast %struct.cJSON** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  %29 = bitcast %struct.cJSON** %28 to i64*
  store i64 %27, i64* %29, align 8
  %30 = icmp eq i64 %23, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %21
  %32 = inttoptr i64 %23 to %struct.cJSON*
  %33 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %32, i64 0, i32 1
  store %struct.cJSON* %2, %struct.cJSON** %33, align 8
  br label %34

34:                                               ; preds = %21, %31
  %35 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %36 = icmp eq %struct.cJSON* %19, %35
  br i1 %36, label %40, label %37

37:                                               ; preds = %34
  %38 = load %struct.cJSON*, %struct.cJSON** %28, align 8
  %39 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %38, i64 0, i32 0
  br label %40

40:                                               ; preds = %34, %37
  %41 = phi %struct.cJSON** [ %39, %37 ], [ %4, %34 ]
  store %struct.cJSON* %2, %struct.cJSON** %41, align 8
  %42 = bitcast %struct.cJSON* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 16, i1 false)
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %19)
  br label %43

43:                                               ; preds = %18, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cJSON_ReplaceItemInObject(%struct.cJSON* nocapture, i8* nocapture readonly, %struct.cJSON*) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %5 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %6 = icmp eq %struct.cJSON* %5, null
  br i1 %6, label %66, label %7

7:                                                ; preds = %3, %14
  %8 = phi %struct.cJSON* [ %17, %14 ], [ %5, %3 ]
  %9 = phi i32 [ %15, %14 ], [ 0, %3 ]
  %10 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %8, i64 0, i32 7
  %11 = load i8*, i8** %10, align 8
  %12 = tail call i32 @strcmp(i8* %11, i8* %1) #12
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %7
  %15 = add nuw nsw i32 %9, 1
  %16 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %8, i64 0, i32 0
  %17 = load %struct.cJSON*, %struct.cJSON** %16, align 8
  %18 = icmp eq %struct.cJSON* %17, null
  br i1 %18, label %66, label %7

19:                                               ; preds = %7
  %20 = tail call i64 @strlen(i8* %1) #12
  %21 = add i64 %20, 1
  %22 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %23 = tail call i8* %22(i64 %21) #11
  %24 = icmp eq i8* %23, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %19
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* align 1 %1, i64 %21, i1 false) #11
  br label %26

26:                                               ; preds = %19, %25
  %27 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 7
  store i8* %23, i8** %27, align 8
  %28 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %29 = icmp ne %struct.cJSON* %28, null
  %30 = icmp ne i32 %9, 0
  %31 = and i1 %30, %29
  br i1 %31, label %32, label %41

32:                                               ; preds = %26, %32
  %33 = phi %struct.cJSON* [ %37, %32 ], [ %28, %26 ]
  %34 = phi i32 [ %36, %32 ], [ %9, %26 ]
  %35 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %33, i64 0, i32 0
  %36 = add nsw i32 %34, -1
  %37 = load %struct.cJSON*, %struct.cJSON** %35, align 8
  %38 = icmp ne %struct.cJSON* %37, null
  %39 = icmp sgt i32 %36, 0
  %40 = and i1 %39, %38
  br i1 %40, label %32, label %41

41:                                               ; preds = %32, %26
  %42 = phi %struct.cJSON* [ %28, %26 ], [ %37, %32 ]
  %43 = phi i1 [ %29, %26 ], [ %38, %32 ]
  br i1 %43, label %44, label %66

44:                                               ; preds = %41
  %45 = bitcast %struct.cJSON* %42 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %struct.cJSON* %2 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %42, i64 0, i32 1
  %49 = bitcast %struct.cJSON** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i64 0, i32 1
  %52 = bitcast %struct.cJSON** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = icmp eq i64 %46, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %44
  %55 = inttoptr i64 %46 to %struct.cJSON*
  %56 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %55, i64 0, i32 1
  store %struct.cJSON* %2, %struct.cJSON** %56, align 8
  br label %57

57:                                               ; preds = %54, %44
  %58 = load %struct.cJSON*, %struct.cJSON** %4, align 8
  %59 = icmp eq %struct.cJSON* %42, %58
  br i1 %59, label %63, label %60

60:                                               ; preds = %57
  %61 = load %struct.cJSON*, %struct.cJSON** %51, align 8
  %62 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %61, i64 0, i32 0
  br label %63

63:                                               ; preds = %57, %60
  %64 = phi %struct.cJSON** [ %62, %60 ], [ %4, %57 ]
  store %struct.cJSON* %2, %struct.cJSON** %64, align 8
  %65 = bitcast %struct.cJSON* %42 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 16, i1 false) #11
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %42) #11
  br label %66

66:                                               ; preds = %14, %3, %63, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateNull() local_unnamed_addr #4 {
  %1 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %2 = tail call i8* %1(i64 64) #11
  %3 = bitcast i8* %2 to %struct.cJSON*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false) #11
  %6 = getelementptr inbounds i8, i8* %2, i64 24
  %7 = bitcast i8* %6 to i32*
  store i32 2, i32* %7, align 8
  br label %8

8:                                                ; preds = %0, %5
  ret %struct.cJSON* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateTrue() local_unnamed_addr #4 {
  %1 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %2 = tail call i8* %1(i64 64) #11
  %3 = bitcast i8* %2 to %struct.cJSON*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false) #11
  %6 = getelementptr inbounds i8, i8* %2, i64 24
  %7 = bitcast i8* %6 to i32*
  store i32 1, i32* %7, align 8
  br label %8

8:                                                ; preds = %0, %5
  ret %struct.cJSON* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateFalse() local_unnamed_addr #4 {
  %1 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %2 = tail call i8* %1(i64 64) #11
  %3 = bitcast i8* %2 to %struct.cJSON*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  br label %6

6:                                                ; preds = %0, %5
  ret %struct.cJSON* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateBool(i32) local_unnamed_addr #4 {
  %2 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %3 = tail call i8* %2(i64 64) #11
  %4 = bitcast i8* %3 to %struct.cJSON*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 64, i1 false) #11
  %7 = icmp ne i32 %0, 0
  %8 = zext i1 %7 to i32
  %9 = getelementptr inbounds i8, i8* %3, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 %8, i32* %10, align 8
  br label %11

11:                                               ; preds = %1, %6
  ret %struct.cJSON* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateNumber(double) local_unnamed_addr #4 {
  %2 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %3 = tail call i8* %2(i64 64) #11
  %4 = bitcast i8* %3 to %struct.cJSON*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 64, i1 false) #11
  %7 = getelementptr inbounds i8, i8* %3, i64 24
  %8 = bitcast i8* %7 to i32*
  store i32 3, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %3, i64 48
  %10 = bitcast i8* %9 to double*
  store double %0, double* %10, align 8
  %11 = fptosi double %0 to i32
  %12 = getelementptr inbounds i8, i8* %3, i64 40
  %13 = bitcast i8* %12 to i32*
  store i32 %11, i32* %13, align 8
  br label %14

14:                                               ; preds = %1, %6
  ret %struct.cJSON* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateString(i8* nocapture readonly) local_unnamed_addr #4 {
  %2 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %3 = tail call i8* %2(i64 64) #11
  %4 = bitcast i8* %3 to %struct.cJSON*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 64, i1 false) #11
  %7 = getelementptr inbounds i8, i8* %3, i64 24
  %8 = bitcast i8* %7 to i32*
  store i32 4, i32* %8, align 8
  %9 = tail call i64 @strlen(i8* %0) #12
  %10 = add i64 %9, 1
  %11 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %12 = tail call i8* %11(i64 %10) #11
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %12, i8* align 1 %0, i64 %10, i1 false) #11
  br label %15

15:                                               ; preds = %6, %14
  %16 = getelementptr inbounds i8, i8* %3, i64 32
  %17 = bitcast i8* %16 to i8**
  store i8* %12, i8** %17, align 8
  br label %18

18:                                               ; preds = %1, %15
  ret %struct.cJSON* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateArray() local_unnamed_addr #4 {
  %1 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %2 = tail call i8* %1(i64 64) #11
  %3 = bitcast i8* %2 to %struct.cJSON*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false) #11
  %6 = getelementptr inbounds i8, i8* %2, i64 24
  %7 = bitcast i8* %6 to i32*
  store i32 5, i32* %7, align 8
  br label %8

8:                                                ; preds = %0, %5
  ret %struct.cJSON* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateObject() local_unnamed_addr #4 {
  %1 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %2 = tail call i8* %1(i64 64) #11
  %3 = bitcast i8* %2 to %struct.cJSON*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %0
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false) #11
  %6 = getelementptr inbounds i8, i8* %2, i64 24
  %7 = bitcast i8* %6 to i32*
  store i32 6, i32* %7, align 8
  br label %8

8:                                                ; preds = %0, %5
  ret %struct.cJSON* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateIntArray(i32* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %4 = tail call i8* %3(i64 64) #11
  %5 = bitcast i8* %4 to %struct.cJSON*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %42, label %7

7:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 64, i1 false) #11
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to i32*
  store i32 5, i32* %9, align 8
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %42

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = bitcast i8* %12 to i8**
  %14 = sext i32 %1 to i64
  br label %15

15:                                               ; preds = %11, %39
  %16 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %17 = phi %struct.cJSON* [ null, %11 ], [ %22, %39 ]
  %18 = getelementptr inbounds i32, i32* %0, i64 %16
  %19 = load i32, i32* %18, align 4
  %20 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %21 = tail call i8* %20(i64 64) #11
  %22 = bitcast i8* %21 to %struct.cJSON*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %15
  %25 = sitofp i32 %19 to double
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 64, i1 false) #11
  %26 = getelementptr inbounds i8, i8* %21, i64 24
  %27 = bitcast i8* %26 to i32*
  store i32 3, i32* %27, align 8
  %28 = getelementptr inbounds i8, i8* %21, i64 48
  %29 = bitcast i8* %28 to double*
  store double %25, double* %29, align 8
  %30 = getelementptr inbounds i8, i8* %21, i64 40
  %31 = bitcast i8* %30 to i32*
  store i32 %19, i32* %31, align 8
  br label %32

32:                                               ; preds = %15, %24
  %33 = icmp eq i64 %16, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  store i8* %21, i8** %13, align 8
  br label %39

35:                                               ; preds = %32
  %36 = bitcast %struct.cJSON* %17 to i8**
  store i8* %21, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %21, i64 8
  %38 = bitcast i8* %37 to %struct.cJSON**
  store %struct.cJSON* %17, %struct.cJSON** %38, align 8
  br label %39

39:                                               ; preds = %35, %34
  %40 = add nuw nsw i64 %16, 1
  %41 = icmp slt i64 %40, %14
  br i1 %41, label %15, label %42

42:                                               ; preds = %39, %2, %7
  ret %struct.cJSON* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateFloatArray(float* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %4 = tail call i8* %3(i64 64) #11
  %5 = bitcast i8* %4 to %struct.cJSON*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 64, i1 false) #11
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to i32*
  store i32 5, i32* %9, align 8
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %43

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = bitcast i8* %12 to i8**
  %14 = sext i32 %1 to i64
  br label %15

15:                                               ; preds = %11, %40
  %16 = phi i64 [ 0, %11 ], [ %41, %40 ]
  %17 = phi %struct.cJSON* [ null, %11 ], [ %22, %40 ]
  %18 = getelementptr inbounds float, float* %0, i64 %16
  %19 = load float, float* %18, align 4
  %20 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %21 = tail call i8* %20(i64 64) #11
  %22 = bitcast i8* %21 to %struct.cJSON*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %33, label %24

24:                                               ; preds = %15
  %25 = fpext float %19 to double
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 64, i1 false) #11
  %26 = getelementptr inbounds i8, i8* %21, i64 24
  %27 = bitcast i8* %26 to i32*
  store i32 3, i32* %27, align 8
  %28 = getelementptr inbounds i8, i8* %21, i64 48
  %29 = bitcast i8* %28 to double*
  store double %25, double* %29, align 8
  %30 = fptosi float %19 to i32
  %31 = getelementptr inbounds i8, i8* %21, i64 40
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 8
  br label %33

33:                                               ; preds = %15, %24
  %34 = icmp eq i64 %16, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %33
  store i8* %21, i8** %13, align 8
  br label %40

36:                                               ; preds = %33
  %37 = bitcast %struct.cJSON* %17 to i8**
  store i8* %21, i8** %37, align 8
  %38 = getelementptr inbounds i8, i8* %21, i64 8
  %39 = bitcast i8* %38 to %struct.cJSON**
  store %struct.cJSON* %17, %struct.cJSON** %39, align 8
  br label %40

40:                                               ; preds = %36, %35
  %41 = add nuw nsw i64 %16, 1
  %42 = icmp slt i64 %41, %14
  br i1 %42, label %15, label %43

43:                                               ; preds = %40, %2, %7
  ret %struct.cJSON* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateDoubleArray(double* nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %4 = tail call i8* %3(i64 64) #11
  %5 = bitcast i8* %4 to %struct.cJSON*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %42, label %7

7:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 64, i1 false) #11
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to i32*
  store i32 5, i32* %9, align 8
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %42

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = bitcast i8* %12 to i8**
  %14 = sext i32 %1 to i64
  br label %15

15:                                               ; preds = %11, %39
  %16 = phi i64 [ 0, %11 ], [ %40, %39 ]
  %17 = phi %struct.cJSON* [ null, %11 ], [ %22, %39 ]
  %18 = getelementptr inbounds double, double* %0, i64 %16
  %19 = load double, double* %18, align 8
  %20 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %21 = tail call i8* %20(i64 64) #11
  %22 = bitcast i8* %21 to %struct.cJSON*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %15
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 64, i1 false) #11
  %25 = getelementptr inbounds i8, i8* %21, i64 24
  %26 = bitcast i8* %25 to i32*
  store i32 3, i32* %26, align 8
  %27 = getelementptr inbounds i8, i8* %21, i64 48
  %28 = bitcast i8* %27 to double*
  store double %19, double* %28, align 8
  %29 = fptosi double %19 to i32
  %30 = getelementptr inbounds i8, i8* %21, i64 40
  %31 = bitcast i8* %30 to i32*
  store i32 %29, i32* %31, align 8
  br label %32

32:                                               ; preds = %15, %24
  %33 = icmp eq i64 %16, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  store i8* %21, i8** %13, align 8
  br label %39

35:                                               ; preds = %32
  %36 = bitcast %struct.cJSON* %17 to i8**
  store i8* %21, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %21, i64 8
  %38 = bitcast i8* %37 to %struct.cJSON**
  store %struct.cJSON* %17, %struct.cJSON** %38, align 8
  br label %39

39:                                               ; preds = %35, %34
  %40 = add nuw nsw i64 %16, 1
  %41 = icmp slt i64 %40, %14
  br i1 %41, label %15, label %42

42:                                               ; preds = %39, %2, %7
  ret %struct.cJSON* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_CreateStringArray(i8** nocapture readonly, i32) local_unnamed_addr #4 {
  %3 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %4 = tail call i8* %3(i64 64) #11
  %5 = bitcast i8* %4 to %struct.cJSON*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %46, label %7

7:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 64, i1 false) #11
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to i32*
  store i32 5, i32* %9, align 8
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %46

11:                                               ; preds = %7
  %12 = getelementptr inbounds i8, i8* %4, i64 16
  %13 = bitcast i8* %12 to i8**
  %14 = sext i32 %1 to i64
  br label %15

15:                                               ; preds = %11, %43
  %16 = phi i64 [ 0, %11 ], [ %44, %43 ]
  %17 = phi %struct.cJSON* [ null, %11 ], [ %22, %43 ]
  %18 = getelementptr inbounds i8*, i8** %0, i64 %16
  %19 = load i8*, i8** %18, align 8
  %20 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %21 = tail call i8* %20(i64 64) #11
  %22 = bitcast i8* %21 to %struct.cJSON*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %36, label %24

24:                                               ; preds = %15
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 64, i1 false) #11
  %25 = getelementptr inbounds i8, i8* %21, i64 24
  %26 = bitcast i8* %25 to i32*
  store i32 4, i32* %26, align 8
  %27 = tail call i64 @strlen(i8* %19) #12
  %28 = add i64 %27, 1
  %29 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %30 = tail call i8* %29(i64 %28) #11
  %31 = icmp eq i8* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %30, i8* align 1 %19, i64 %28, i1 false) #11
  br label %33

33:                                               ; preds = %32, %24
  %34 = getelementptr inbounds i8, i8* %21, i64 32
  %35 = bitcast i8* %34 to i8**
  store i8* %30, i8** %35, align 8
  br label %36

36:                                               ; preds = %15, %33
  %37 = icmp eq i64 %16, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  store i8* %21, i8** %13, align 8
  br label %43

39:                                               ; preds = %36
  %40 = bitcast %struct.cJSON* %17 to i8**
  store i8* %21, i8** %40, align 8
  %41 = getelementptr inbounds i8, i8* %21, i64 8
  %42 = bitcast i8* %41 to %struct.cJSON**
  store %struct.cJSON* %17, %struct.cJSON** %42, align 8
  br label %43

43:                                               ; preds = %39, %38
  %44 = add nuw nsw i64 %16, 1
  %45 = icmp slt i64 %44, %14
  br i1 %45, label %15, label %46

46:                                               ; preds = %43, %2, %7
  ret %struct.cJSON* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.cJSON* @cJSON_Duplicate(%struct.cJSON* readonly, i32) local_unnamed_addr #4 {
  %3 = icmp eq %struct.cJSON* %0, null
  br i1 %3, label %80, label %4

4:                                                ; preds = %2
  %5 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %6 = tail call i8* %5(i64 64) #11
  %7 = bitcast i8* %6 to %struct.cJSON*
  %8 = icmp eq i8* %6, null
  br i1 %8, label %80, label %9

9:                                                ; preds = %4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 64, i1 false) #11
  %10 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, -257
  %13 = getelementptr inbounds i8, i8* %6, i64 24
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 8
  %15 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 5
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds i8, i8* %6, i64 40
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 8
  %19 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 6
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %6, i64 48
  %23 = bitcast i8* %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 4
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %39, label %27

27:                                               ; preds = %9
  %28 = tail call i64 @strlen(i8* nonnull %25) #12
  %29 = add i64 %28, 1
  %30 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %31 = tail call i8* %30(i64 %29) #11
  %32 = icmp eq i8* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %31, i8* nonnull align 1 %25, i64 %29, i1 false) #11
  %34 = getelementptr inbounds i8, i8* %6, i64 32
  %35 = bitcast i8* %34 to i8**
  store i8* %31, i8** %35, align 8
  br label %39

36:                                               ; preds = %27
  %37 = getelementptr inbounds i8, i8* %6, i64 32
  %38 = bitcast i8* %37 to i8**
  store i8* null, i8** %38, align 8
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %7)
  br label %80

39:                                               ; preds = %33, %9
  %40 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 7
  %41 = load i8*, i8** %40, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %55, label %43

43:                                               ; preds = %39
  %44 = tail call i64 @strlen(i8* nonnull %41) #12
  %45 = add i64 %44, 1
  %46 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %47 = tail call i8* %46(i64 %45) #11
  %48 = icmp eq i8* %47, null
  br i1 %48, label %52, label %49

49:                                               ; preds = %43
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %47, i8* nonnull align 1 %41, i64 %45, i1 false) #11
  %50 = getelementptr inbounds i8, i8* %6, i64 56
  %51 = bitcast i8* %50 to i8**
  store i8* %47, i8** %51, align 8
  br label %55

52:                                               ; preds = %43
  %53 = getelementptr inbounds i8, i8* %6, i64 56
  %54 = bitcast i8* %53 to i8**
  store i8* null, i8** %54, align 8
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %7)
  br label %80

55:                                               ; preds = %49, %39
  %56 = icmp eq i32 %1, 0
  br i1 %56, label %80, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %59 = load %struct.cJSON*, %struct.cJSON** %58, align 8
  %60 = icmp eq %struct.cJSON* %59, null
  br i1 %60, label %80, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %6, i64 16
  %63 = bitcast i8* %62 to %struct.cJSON**
  br label %64

64:                                               ; preds = %61, %76
  %65 = phi %struct.cJSON* [ %59, %61 ], [ %78, %76 ]
  %66 = phi %struct.cJSON* [ null, %61 ], [ %67, %76 ]
  %67 = tail call %struct.cJSON* @cJSON_Duplicate(%struct.cJSON* nonnull %65, i32 1)
  %68 = icmp eq %struct.cJSON* %67, null
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  tail call void @cJSON_Delete(%struct.cJSON* nonnull %7)
  br label %80

70:                                               ; preds = %64
  %71 = icmp eq %struct.cJSON* %66, null
  br i1 %71, label %75, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %66, i64 0, i32 0
  store %struct.cJSON* %67, %struct.cJSON** %73, align 8
  %74 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %67, i64 0, i32 1
  store %struct.cJSON* %66, %struct.cJSON** %74, align 8
  br label %76

75:                                               ; preds = %70
  store %struct.cJSON* %67, %struct.cJSON** %63, align 8
  br label %76

76:                                               ; preds = %75, %72
  %77 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %65, i64 0, i32 0
  %78 = load %struct.cJSON*, %struct.cJSON** %77, align 8
  %79 = icmp eq %struct.cJSON* %78, null
  br i1 %79, label %80, label %64

80:                                               ; preds = %76, %57, %4, %55, %2, %69, %52, %36
  %81 = phi %struct.cJSON* [ null, %69 ], [ null, %52 ], [ null, %36 ], [ null, %2 ], [ %7, %55 ], [ null, %4 ], [ %7, %57 ], [ %7, %76 ]
  ret %struct.cJSON* %81
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @cJSON_Minify(i8* nocapture) local_unnamed_addr #1 {
  br label %2

2:                                                ; preds = %25, %1
  %3 = phi i8* [ %0, %1 ], [ %26, %25 ]
  %4 = phi i8* [ %0, %1 ], [ %27, %25 ]
  %5 = load i8, i8* %3, align 1
  switch i8 %5, label %43 [
    i8 0, label %64
    i8 32, label %6
    i8 9, label %8
    i8 13, label %10
    i8 10, label %12
    i8 47, label %14
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds i8, i8* %3, i64 1
  br label %25

8:                                                ; preds = %2
  %9 = getelementptr inbounds i8, i8* %3, i64 1
  br label %25

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, i8* %3, i64 1
  br label %25

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %3, i64 1
  br label %25

14:                                               ; preds = %2
  %15 = getelementptr inbounds i8, i8* %3, i64 1
  %16 = load i8, i8* %15, align 1
  switch i8 %16, label %23 [
    i8 47, label %17
    i8 42, label %28
  ]

17:                                               ; preds = %14, %20
  %18 = phi i8 [ %22, %20 ], [ %16, %14 ]
  %19 = phi i8* [ %21, %20 ], [ %3, %14 ]
  switch i8 %18, label %20 [
    i8 0, label %25
    i8 10, label %25
  ]

20:                                               ; preds = %17
  %21 = getelementptr inbounds i8, i8* %19, i64 1
  %22 = load i8, i8* %21, align 1
  br label %17

23:                                               ; preds = %14
  %24 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 47, i8* %4, align 1
  br label %25

25:                                               ; preds = %17, %17, %23, %8, %12, %41, %43, %61, %10, %6
  %26 = phi i8* [ %7, %6 ], [ %9, %8 ], [ %11, %10 ], [ %13, %12 ], [ %42, %41 ], [ %62, %61 ], [ %45, %43 ], [ %15, %23 ], [ %19, %17 ], [ %19, %17 ]
  %27 = phi i8* [ %4, %6 ], [ %4, %8 ], [ %4, %10 ], [ %4, %12 ], [ %4, %41 ], [ %63, %61 ], [ %46, %43 ], [ %24, %23 ], [ %4, %17 ], [ %4, %17 ]
  br label %2

28:                                               ; preds = %14, %38
  %29 = phi i8 [ %39, %38 ], [ 47, %14 ]
  %30 = phi i8* [ %40, %38 ], [ %3, %14 ]
  switch i8 %29, label %31 [
    i8 0, label %41
    i8 42, label %34
  ]

31:                                               ; preds = %28
  %32 = getelementptr inbounds i8, i8* %30, i64 1
  %33 = load i8, i8* %32, align 1
  br label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds i8, i8* %30, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 47
  br i1 %37, label %41, label %38

38:                                               ; preds = %31, %34
  %39 = phi i8 [ %33, %31 ], [ %36, %34 ]
  %40 = getelementptr inbounds i8, i8* %30, i64 1
  br label %28

41:                                               ; preds = %34, %28
  %42 = getelementptr inbounds i8, i8* %30, i64 2
  br label %25

43:                                               ; preds = %2
  %44 = icmp eq i8 %5, 34
  %45 = getelementptr inbounds i8, i8* %3, i64 1
  %46 = getelementptr inbounds i8, i8* %4, i64 1
  store i8 %5, i8* %4, align 1
  br i1 %44, label %47, label %25

47:                                               ; preds = %43, %55
  %48 = phi i8* [ %59, %55 ], [ %45, %43 ]
  %49 = phi i8* [ %60, %55 ], [ %46, %43 ]
  %50 = load i8, i8* %48, align 1
  switch i8 %50, label %55 [
    i8 34, label %61
    i8 0, label %61
    i8 92, label %51
  ]

51:                                               ; preds = %47
  %52 = getelementptr inbounds i8, i8* %48, i64 1
  %53 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 92, i8* %49, align 1
  %54 = load i8, i8* %52, align 1
  br label %55

55:                                               ; preds = %47, %51
  %56 = phi i8 [ %54, %51 ], [ %50, %47 ]
  %57 = phi i8* [ %52, %51 ], [ %48, %47 ]
  %58 = phi i8* [ %53, %51 ], [ %49, %47 ]
  %59 = getelementptr inbounds i8, i8* %57, i64 1
  %60 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %56, i8* %58, align 1
  br label %47

61:                                               ; preds = %47, %47
  %62 = getelementptr inbounds i8, i8* %48, i64 1
  %63 = getelementptr inbounds i8, i8* %49, i64 1
  store i8 %50, i8* %49, align 1
  br label %25

64:                                               ; preds = %2
  store i8 0, i8* %4, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @parse_string(%struct.cJSON* nocapture, i8*) unnamed_addr #4 {
  %3 = getelementptr inbounds i8, i8* %1, i64 1
  %4 = load i8, i8* %1, align 1
  %5 = icmp eq i8 %4, 34
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  store i8* %1, i8** @ep, align 8
  br label %130

7:                                                ; preds = %2, %11
  %8 = phi i8* [ %14, %11 ], [ %3, %2 ]
  %9 = phi i32 [ %15, %11 ], [ 1, %2 ]
  %10 = load i8, i8* %8, align 1
  switch i8 %10, label %11 [
    i8 34, label %16
    i8 0, label %16
  ]

11:                                               ; preds = %7
  %12 = icmp eq i8 %10, 92
  %13 = select i1 %12, i64 2, i64 1
  %14 = getelementptr inbounds i8, i8* %8, i64 %13
  %15 = add i32 %9, 1
  br label %7

16:                                               ; preds = %7, %7
  %17 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %18 = sext i32 %9 to i64
  %19 = tail call i8* %17(i64 %18) #11
  %20 = icmp eq i8* %19, null
  br i1 %20, label %130, label %21

21:                                               ; preds = %16, %120
  %22 = phi i8* [ %121, %120 ], [ %3, %16 ]
  %23 = phi i8* [ %122, %120 ], [ %19, %16 ]
  %24 = load i8, i8* %22, align 1
  switch i8 %24, label %25 [
    i8 34, label %123
    i8 0, label %123
  ]

25:                                               ; preds = %21
  %26 = icmp eq i8 %24, 92
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  br i1 %26, label %30, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 %24, i8* %23, align 1
  br label %120

30:                                               ; preds = %25
  %31 = load i8, i8* %27, align 1
  %32 = sext i8 %31 to i32
  switch i32 %32, label %114 [
    i32 98, label %33
    i32 102, label %35
    i32 110, label %37
    i32 114, label %39
    i32 116, label %41
    i32 117, label %43
  ]

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 8, i8* %23, align 1
  br label %116

35:                                               ; preds = %30
  %36 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 12, i8* %23, align 1
  br label %116

37:                                               ; preds = %30
  %38 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 10, i8* %23, align 1
  br label %116

39:                                               ; preds = %30
  %40 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 13, i8* %23, align 1
  br label %116

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 9, i8* %23, align 1
  br label %116

43:                                               ; preds = %30
  %44 = getelementptr inbounds i8, i8* %22, i64 2
  %45 = tail call fastcc i32 @parse_hex4(i8* %44)
  %46 = getelementptr inbounds i8, i8* %22, i64 5
  %47 = and i32 %45, -1024
  %48 = icmp eq i32 %47, 56320
  %49 = icmp eq i32 %45, 0
  %50 = or i1 %49, %48
  br i1 %50, label %116, label %51

51:                                               ; preds = %43
  %52 = icmp eq i32 %47, 55296
  br i1 %52, label %53, label %73

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %22, i64 6
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 92
  br i1 %56, label %57, label %116

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %22, i64 7
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 117
  br i1 %60, label %61, label %116

61:                                               ; preds = %57
  %62 = getelementptr inbounds i8, i8* %22, i64 8
  %63 = tail call fastcc i32 @parse_hex4(i8* %62)
  %64 = getelementptr inbounds i8, i8* %22, i64 11
  %65 = and i32 %63, -1024
  %66 = icmp eq i32 %65, 56320
  br i1 %66, label %67, label %116

67:                                               ; preds = %61
  %68 = shl i32 %45, 10
  %69 = and i32 %68, 1047552
  %70 = and i32 %63, 1023
  %71 = or i32 %70, %69
  %72 = add nuw nsw i32 %71, 65536
  br label %79

73:                                               ; preds = %51
  %74 = icmp ult i32 %45, 128
  br i1 %74, label %105, label %75

75:                                               ; preds = %73
  %76 = icmp ult i32 %45, 2048
  br i1 %76, label %96, label %77

77:                                               ; preds = %75
  %78 = icmp ult i32 %45, 65536
  br i1 %78, label %87, label %79

79:                                               ; preds = %67, %77
  %80 = phi i32 [ %72, %67 ], [ %45, %77 ]
  %81 = phi i8* [ %64, %67 ], [ %46, %77 ]
  %82 = trunc i32 %80 to i8
  %83 = and i8 %82, 63
  %84 = or i8 %83, -128
  %85 = getelementptr inbounds i8, i8* %23, i64 3
  store i8 %84, i8* %85, align 1
  %86 = lshr i32 %80, 6
  br label %87

87:                                               ; preds = %77, %79
  %88 = phi i8* [ %81, %79 ], [ %46, %77 ]
  %89 = phi i64 [ 4, %79 ], [ 3, %77 ]
  %90 = phi i32 [ %86, %79 ], [ %45, %77 ]
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 63
  %93 = or i8 %92, -128
  %94 = getelementptr inbounds i8, i8* %23, i64 2
  store i8 %93, i8* %94, align 1
  %95 = lshr i32 %90, 6
  br label %96

96:                                               ; preds = %75, %87
  %97 = phi i64 [ %89, %87 ], [ 2, %75 ]
  %98 = phi i8* [ %88, %87 ], [ %46, %75 ]
  %99 = phi i32 [ %95, %87 ], [ %45, %75 ]
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 63
  %102 = or i8 %101, -128
  %103 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 %102, i8* %103, align 1
  %104 = lshr i32 %99, 6
  br label %105

105:                                              ; preds = %73, %96
  %106 = phi i64 [ %97, %96 ], [ 1, %73 ]
  %107 = phi i8* [ %98, %96 ], [ %46, %73 ]
  %108 = phi i32 [ %104, %96 ], [ %45, %73 ]
  %109 = getelementptr inbounds [7 x i8], [7 x i8]* @firstByteMark, i64 0, i64 %106
  %110 = load i8, i8* %109, align 1
  %111 = trunc i32 %108 to i8
  %112 = or i8 %110, %111
  store i8 %112, i8* %23, align 1
  %113 = getelementptr inbounds i8, i8* %23, i64 %106
  br label %116

114:                                              ; preds = %30
  %115 = getelementptr inbounds i8, i8* %23, i64 1
  store i8 %31, i8* %23, align 1
  br label %116

116:                                              ; preds = %61, %57, %53, %43, %114, %105, %41, %39, %37, %35, %33
  %117 = phi i8* [ %27, %114 ], [ %46, %43 ], [ %46, %53 ], [ %46, %57 ], [ %64, %61 ], [ %107, %105 ], [ %27, %41 ], [ %27, %39 ], [ %27, %37 ], [ %27, %35 ], [ %27, %33 ]
  %118 = phi i8* [ %115, %114 ], [ %23, %43 ], [ %23, %53 ], [ %23, %57 ], [ %23, %61 ], [ %113, %105 ], [ %42, %41 ], [ %40, %39 ], [ %38, %37 ], [ %36, %35 ], [ %34, %33 ]
  %119 = getelementptr inbounds i8, i8* %117, i64 1
  br label %120

120:                                              ; preds = %116, %28
  %121 = phi i8* [ %27, %28 ], [ %119, %116 ]
  %122 = phi i8* [ %29, %28 ], [ %118, %116 ]
  br label %21

123:                                              ; preds = %21, %21
  store i8 0, i8* %23, align 1
  %124 = load i8, i8* %22, align 1
  %125 = icmp eq i8 %124, 34
  %126 = getelementptr inbounds i8, i8* %22, i64 1
  %127 = select i1 %125, i8* %126, i8* %22
  %128 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 4
  store i8* %19, i8** %128, align 8
  %129 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 3
  store i32 4, i32* %129, align 8
  br label %130

130:                                              ; preds = %16, %123, %6
  %131 = phi i8* [ null, %6 ], [ %127, %123 ], [ null, %16 ]
  ret i8* %131
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @parse_hex4(i8* nocapture readonly) unnamed_addr #0 {
  %2 = load i8, i8* %0, align 1
  %3 = sext i8 %2 to i32
  %4 = add i8 %2, -48
  %5 = icmp ult i8 %4, 10
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = add i8 %2, -65
  %8 = icmp ult i8 %7, 6
  br i1 %8, label %12, label %9

9:                                                ; preds = %6
  %10 = add i8 %2, -97
  %11 = icmp ult i8 %10, 6
  br i1 %11, label %12, label %63

12:                                               ; preds = %9, %6, %1
  %13 = phi i32 [ -48, %1 ], [ -55, %6 ], [ -87, %9 ]
  %14 = add nsw i32 %13, %3
  %15 = shl nsw i32 %14, 4
  %16 = getelementptr inbounds i8, i8* %0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = add i8 %17, -48
  %20 = icmp ult i8 %19, 10
  br i1 %20, label %27, label %21

21:                                               ; preds = %12
  %22 = add i8 %17, -65
  %23 = icmp ult i8 %22, 6
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = add i8 %17, -97
  %26 = icmp ult i8 %25, 6
  br i1 %26, label %27, label %63

27:                                               ; preds = %24, %21, %12
  %28 = phi i32 [ -48, %12 ], [ -55, %21 ], [ -87, %24 ]
  %29 = add nsw i32 %28, %18
  %30 = add nsw i32 %29, %15
  %31 = shl nsw i32 %30, 4
  %32 = getelementptr inbounds i8, i8* %0, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = add i8 %33, -48
  %36 = icmp ult i8 %35, 10
  br i1 %36, label %43, label %37

37:                                               ; preds = %27
  %38 = add i8 %33, -65
  %39 = icmp ult i8 %38, 6
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = add i8 %33, -97
  %42 = icmp ult i8 %41, 6
  br i1 %42, label %43, label %63

43:                                               ; preds = %40, %37, %27
  %44 = phi i32 [ -48, %27 ], [ -55, %37 ], [ -87, %40 ]
  %45 = add nsw i32 %44, %34
  %46 = add nsw i32 %45, %31
  %47 = shl i32 %46, 4
  %48 = getelementptr inbounds i8, i8* %0, i64 3
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = add i8 %49, -48
  %52 = icmp ult i8 %51, 10
  br i1 %52, label %59, label %53

53:                                               ; preds = %43
  %54 = add i8 %49, -65
  %55 = icmp ult i8 %54, 6
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = add i8 %49, -97
  %58 = icmp ult i8 %57, 6
  br i1 %58, label %59, label %63

59:                                               ; preds = %56, %53, %43
  %60 = phi i32 [ -48, %43 ], [ -55, %53 ], [ -87, %56 ]
  %61 = add nsw i32 %60, %50
  %62 = add i32 %61, %47
  br label %63

63:                                               ; preds = %56, %40, %24, %9, %59
  %64 = phi i32 [ %62, %59 ], [ 0, %9 ], [ 0, %24 ], [ 0, %40 ], [ 0, %56 ]
  ret i32 %64
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @print_number(%struct.cJSON* nocapture readonly, %struct.printbuffer*) unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 6
  %4 = load double, double* %3, align 8
  %5 = fcmp oeq double %4, 0.000000e+00
  br i1 %5, label %6, label %56

6:                                                ; preds = %2
  %7 = icmp eq %struct.printbuffer* %1, null
  br i1 %7, label %48, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %183, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, 2
  %16 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %15, %17
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds i8, i8* %10, i64 %14
  br label %51

21:                                               ; preds = %12
  %22 = add i64 %14, 1
  %23 = lshr i64 %22, 1
  %24 = or i64 %23, %22
  %25 = lshr i64 %24, 2
  %26 = or i64 %25, %24
  %27 = lshr i64 %26, 4
  %28 = or i64 %27, %26
  %29 = lshr i64 %28, 8
  %30 = or i64 %29, %28
  %31 = lshr i64 %30, 16
  %32 = or i64 %31, %30
  %33 = add i64 %32, 1
  %34 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %35 = tail call i8* %34(i64 %33) #11
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %41

37:                                               ; preds = %21
  %38 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %39 = load i8*, i8** %9, align 8
  tail call void %38(i8* %39) #11
  %40 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false) #11
  br label %183

41:                                               ; preds = %21
  %42 = load i8*, i8** %9, align 8
  %43 = load i64, i64* %16, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %35, i8* align 1 %42, i64 %43, i1 false) #11
  %44 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %45 = load i8*, i8** %9, align 8
  tail call void %44(i8* %45) #11
  store i64 %33, i64* %16, align 8
  store i8* %35, i8** %9, align 8
  %46 = load i64, i64* %13, align 8
  %47 = getelementptr inbounds i8, i8* %35, i64 %46
  br label %51

48:                                               ; preds = %6
  %49 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %50 = tail call i8* %49(i64 2) #11
  br label %51

51:                                               ; preds = %41, %19, %48
  %52 = phi i8* [ %50, %48 ], [ %20, %19 ], [ %47, %41 ]
  %53 = icmp eq i8* %52, null
  br i1 %53, label %183, label %54

54:                                               ; preds = %51
  %55 = bitcast i8* %52 to i16*
  store i16 48, i16* %55, align 1
  br label %183

56:                                               ; preds = %2
  %57 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 5
  %58 = load i32, i32* %57, align 8
  %59 = sitofp i32 %58 to double
  %60 = fsub double %59, %4
  %61 = tail call double @llvm.fabs.f64(double %60)
  %62 = fcmp ole double %61, 0x3CB0000000000000
  %63 = fcmp ole double %4, 0x41DFFFFFFFC00000
  %64 = and i1 %63, %62
  %65 = fcmp oge double %4, 0xC1E0000000000000
  %66 = and i1 %65, %64
  %67 = icmp ne %struct.printbuffer* %1, null
  br i1 %66, label %68, label %118

68:                                               ; preds = %56
  br i1 %67, label %69, label %109

69:                                               ; preds = %68
  %70 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %183, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 21
  %77 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp ugt i64 %76, %78
  br i1 %79, label %82, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds i8, i8* %71, i64 %75
  br label %112

82:                                               ; preds = %73
  %83 = add i64 %75, 20
  %84 = lshr i64 %83, 1
  %85 = or i64 %84, %83
  %86 = lshr i64 %85, 2
  %87 = or i64 %86, %85
  %88 = lshr i64 %87, 4
  %89 = or i64 %88, %87
  %90 = lshr i64 %89, 8
  %91 = or i64 %90, %89
  %92 = lshr i64 %91, 16
  %93 = or i64 %92, %91
  %94 = add i64 %93, 1
  %95 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %96 = tail call i8* %95(i64 %94) #11
  %97 = icmp eq i8* %96, null
  br i1 %97, label %98, label %102

98:                                               ; preds = %82
  %99 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %100 = load i8*, i8** %70, align 8
  tail call void %99(i8* %100) #11
  %101 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 0, i64 16, i1 false) #11
  br label %183

102:                                              ; preds = %82
  %103 = load i8*, i8** %70, align 8
  %104 = load i64, i64* %77, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %96, i8* align 1 %103, i64 %104, i1 false) #11
  %105 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %106 = load i8*, i8** %70, align 8
  tail call void %105(i8* %106) #11
  store i64 %94, i64* %77, align 8
  store i8* %96, i8** %70, align 8
  %107 = load i64, i64* %74, align 8
  %108 = getelementptr inbounds i8, i8* %96, i64 %107
  br label %112

109:                                              ; preds = %68
  %110 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %111 = tail call i8* %110(i64 21) #11
  br label %112

112:                                              ; preds = %102, %80, %109
  %113 = phi i8* [ %111, %109 ], [ %81, %80 ], [ %108, %102 ]
  %114 = icmp eq i8* %113, null
  br i1 %114, label %183, label %115

115:                                              ; preds = %112
  %116 = load i32, i32* %57, align 8
  %117 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %113, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 %116) #11
  br label %183

118:                                              ; preds = %56
  br i1 %67, label %119, label %159

119:                                              ; preds = %118
  %120 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %121 = load i8*, i8** %120, align 8
  %122 = icmp eq i8* %121, null
  br i1 %122, label %183, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %125 = load i64, i64* %124, align 8
  %126 = add i64 %125, 64
  %127 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = icmp ugt i64 %126, %128
  br i1 %129, label %132, label %130

130:                                              ; preds = %123
  %131 = getelementptr inbounds i8, i8* %121, i64 %125
  br label %162

132:                                              ; preds = %123
  %133 = add i64 %125, 63
  %134 = lshr i64 %133, 1
  %135 = or i64 %134, %133
  %136 = lshr i64 %135, 2
  %137 = or i64 %136, %135
  %138 = lshr i64 %137, 4
  %139 = or i64 %138, %137
  %140 = lshr i64 %139, 8
  %141 = or i64 %140, %139
  %142 = lshr i64 %141, 16
  %143 = or i64 %142, %141
  %144 = add i64 %143, 1
  %145 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %146 = tail call i8* %145(i64 %144) #11
  %147 = icmp eq i8* %146, null
  br i1 %147, label %148, label %152

148:                                              ; preds = %132
  %149 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %150 = load i8*, i8** %120, align 8
  tail call void %149(i8* %150) #11
  %151 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 16, i1 false) #11
  br label %183

152:                                              ; preds = %132
  %153 = load i8*, i8** %120, align 8
  %154 = load i64, i64* %127, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %146, i8* align 1 %153, i64 %154, i1 false) #11
  %155 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %156 = load i8*, i8** %120, align 8
  tail call void %155(i8* %156) #11
  store i64 %144, i64* %127, align 8
  store i8* %146, i8** %120, align 8
  %157 = load i64, i64* %124, align 8
  %158 = getelementptr inbounds i8, i8* %146, i64 %157
  br label %162

159:                                              ; preds = %118
  %160 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %161 = tail call i8* %160(i64 64) #11
  br label %162

162:                                              ; preds = %152, %130, %159
  %163 = phi i8* [ %161, %159 ], [ %131, %130 ], [ %158, %152 ]
  %164 = icmp eq i8* %163, null
  br i1 %164, label %183, label %165

165:                                              ; preds = %162
  %166 = tail call double @llvm.floor.f64(double %4)
  %167 = fsub double %166, %4
  %168 = tail call double @llvm.fabs.f64(double %167)
  %169 = fcmp ole double %168, 0x3CB0000000000000
  %170 = tail call double @llvm.fabs.f64(double %4)
  %171 = fcmp olt double %170, 0x4C63E9E4E4C2F344
  %172 = and i1 %171, %169
  br i1 %172, label %173, label %175

173:                                              ; preds = %165
  %174 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %163, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), double %4) #11
  br label %183

175:                                              ; preds = %165
  %176 = fcmp olt double %170, 0x3EB0C6F7A0B5ED8D
  %177 = fcmp ogt double %170, 1.000000e+09
  %178 = or i1 %176, %177
  br i1 %178, label %179, label %181

179:                                              ; preds = %175
  %180 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %163, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), double %4) #11
  br label %183

181:                                              ; preds = %175
  %182 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %163, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), double %4) #11
  br label %183

183:                                              ; preds = %119, %148, %69, %98, %8, %37, %51, %112, %162, %115, %173, %181, %179, %54
  %184 = phi i8* [ %52, %54 ], [ null, %51 ], [ %113, %115 ], [ null, %112 ], [ %163, %173 ], [ %163, %179 ], [ %163, %181 ], [ null, %162 ], [ null, %37 ], [ null, %8 ], [ null, %98 ], [ null, %69 ], [ null, %148 ], [ null, %119 ]
  ret i8* %184
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @print_array(%struct.cJSON* nocapture readonly, i32, i32, %struct.printbuffer*) unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %6 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %7 = icmp eq %struct.cJSON* %6, null
  br i1 %7, label %15, label %8

8:                                                ; preds = %4, %8
  %9 = phi %struct.cJSON* [ %13, %8 ], [ %6, %4 ]
  %10 = phi i32 [ %11, %8 ], [ 0, %4 ]
  %11 = add nuw nsw i32 %10, 1
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i64 0, i32 0
  %13 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %14 = icmp eq %struct.cJSON* %13, null
  br i1 %14, label %64, label %8

15:                                               ; preds = %4
  %16 = icmp eq %struct.printbuffer* %3, null
  br i1 %16, label %57, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %297, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, 3
  %25 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ugt i64 %24, %26
  br i1 %27, label %30, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %19, i64 %23
  br label %60

30:                                               ; preds = %21
  %31 = add i64 %23, 2
  %32 = lshr i64 %31, 1
  %33 = or i64 %32, %31
  %34 = lshr i64 %33, 2
  %35 = or i64 %34, %33
  %36 = lshr i64 %35, 4
  %37 = or i64 %36, %35
  %38 = lshr i64 %37, 8
  %39 = or i64 %38, %37
  %40 = lshr i64 %39, 16
  %41 = or i64 %40, %39
  %42 = add i64 %41, 1
  %43 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %44 = tail call i8* %43(i64 %42) #11
  %45 = icmp eq i8* %44, null
  br i1 %45, label %46, label %50

46:                                               ; preds = %30
  %47 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %48 = load i8*, i8** %18, align 8
  tail call void %47(i8* %48) #11
  %49 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 16, i1 false) #11
  br label %297

50:                                               ; preds = %30
  %51 = load i8*, i8** %18, align 8
  %52 = load i64, i64* %25, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %44, i8* align 1 %51, i64 %52, i1 false) #11
  %53 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %54 = load i8*, i8** %18, align 8
  tail call void %53(i8* %54) #11
  store i64 %42, i64* %25, align 8
  store i8* %44, i8** %18, align 8
  %55 = load i64, i64* %22, align 8
  %56 = getelementptr inbounds i8, i8* %44, i64 %55
  br label %60

57:                                               ; preds = %15
  %58 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %59 = tail call i8* %58(i64 3) #11
  br label %60

60:                                               ; preds = %50, %28, %57
  %61 = phi i8* [ %59, %57 ], [ %29, %28 ], [ %56, %50 ]
  %62 = icmp eq i8* %61, null
  br i1 %62, label %297, label %63

63:                                               ; preds = %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %61, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 3, i1 false)
  br label %297

64:                                               ; preds = %8
  %65 = icmp eq %struct.printbuffer* %3, null
  br i1 %65, label %223, label %66

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %297, label %72

72:                                               ; preds = %66
  %73 = add i64 %68, 1
  %74 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = icmp ugt i64 %73, %75
  br i1 %76, label %79, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds i8, i8* %70, i64 %68
  br label %105

79:                                               ; preds = %72
  %80 = lshr i64 %68, 1
  %81 = or i64 %80, %68
  %82 = lshr i64 %81, 2
  %83 = or i64 %82, %81
  %84 = lshr i64 %83, 4
  %85 = or i64 %84, %83
  %86 = lshr i64 %85, 8
  %87 = or i64 %86, %85
  %88 = lshr i64 %87, 16
  %89 = or i64 %88, %87
  %90 = add i64 %89, 1
  %91 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %92 = tail call i8* %91(i64 %90) #11
  %93 = icmp eq i8* %92, null
  br i1 %93, label %94, label %98

94:                                               ; preds = %79
  %95 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %96 = load i8*, i8** %69, align 8
  tail call void %95(i8* %96) #11
  %97 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %97, i8 0, i64 16, i1 false) #11
  br label %297

98:                                               ; preds = %79
  %99 = load i8*, i8** %69, align 8
  %100 = load i64, i64* %74, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %92, i8* align 1 %99, i64 %100, i1 false) #11
  %101 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %102 = load i8*, i8** %69, align 8
  tail call void %101(i8* %102) #11
  store i64 %90, i64* %74, align 8
  store i8* %92, i8** %69, align 8
  %103 = load i64, i64* %67, align 8
  %104 = getelementptr inbounds i8, i8* %92, i64 %103
  br label %105

105:                                              ; preds = %77, %98
  %106 = phi i8* [ %78, %77 ], [ %104, %98 ]
  %107 = icmp eq i8* %106, null
  br i1 %107, label %297, label %108

108:                                              ; preds = %105
  store i8 91, i8* %106, align 1
  %109 = load i64, i64* %67, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %67, align 8
  %111 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %112 = icmp eq %struct.cJSON* %111, null
  br i1 %112, label %179, label %113

113:                                              ; preds = %108
  %114 = add nsw i32 %1, 1
  %115 = icmp ne i32 %2, 0
  %116 = select i1 %115, i64 2, i64 1
  br label %117

117:                                              ; preds = %113, %173
  %118 = phi %struct.cJSON* [ %111, %113 ], [ %177, %173 ]
  %119 = tail call fastcc i8* @print_value(%struct.cJSON* nonnull %118, i32 %114, i32 %2, %struct.printbuffer* nonnull %3)
  %120 = load i8*, i8** %69, align 8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %127, label %122

122:                                              ; preds = %117
  %123 = load i64, i64* %67, align 8
  %124 = getelementptr inbounds i8, i8* %120, i64 %123
  %125 = tail call i64 @strlen(i8* %124) #12
  %126 = add i64 %125, %123
  br label %127

127:                                              ; preds = %117, %122
  %128 = phi i64 [ %126, %122 ], [ 0, %117 ]
  store i64 %128, i64* %67, align 8
  %129 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %118, i64 0, i32 0
  %130 = load %struct.cJSON*, %struct.cJSON** %129, align 8
  %131 = icmp eq %struct.cJSON* %130, null
  br i1 %131, label %179, label %132

132:                                              ; preds = %127
  br i1 %121, label %297, label %133

133:                                              ; preds = %132
  %134 = add i64 %128, %116
  %135 = add i64 %134, 1
  %136 = load i64, i64* %74, align 8
  %137 = icmp ugt i64 %135, %136
  br i1 %137, label %140, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds i8, i8* %120, i64 %128
  br label %166

140:                                              ; preds = %133
  %141 = lshr i64 %134, 1
  %142 = or i64 %141, %134
  %143 = lshr i64 %142, 2
  %144 = or i64 %143, %142
  %145 = lshr i64 %144, 4
  %146 = or i64 %145, %144
  %147 = lshr i64 %146, 8
  %148 = or i64 %147, %146
  %149 = lshr i64 %148, 16
  %150 = or i64 %149, %148
  %151 = add i64 %150, 1
  %152 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %153 = tail call i8* %152(i64 %151) #11
  %154 = icmp eq i8* %153, null
  br i1 %154, label %155, label %159

155:                                              ; preds = %140
  %156 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %157 = load i8*, i8** %69, align 8
  tail call void %156(i8* %157) #11
  %158 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %158, i8 0, i64 16, i1 false) #11
  br label %297

159:                                              ; preds = %140
  %160 = load i8*, i8** %69, align 8
  %161 = load i64, i64* %74, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %153, i8* align 1 %160, i64 %161, i1 false) #11
  %162 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %163 = load i8*, i8** %69, align 8
  tail call void %162(i8* %163) #11
  store i64 %151, i64* %74, align 8
  store i8* %153, i8** %69, align 8
  %164 = load i64, i64* %67, align 8
  %165 = getelementptr inbounds i8, i8* %153, i64 %164
  br label %166

166:                                              ; preds = %138, %159
  %167 = phi i8* [ %139, %138 ], [ %165, %159 ]
  %168 = icmp eq i8* %167, null
  br i1 %168, label %297, label %169

169:                                              ; preds = %166
  %170 = getelementptr inbounds i8, i8* %167, i64 1
  store i8 44, i8* %167, align 1
  br i1 %115, label %171, label %173

171:                                              ; preds = %169
  %172 = getelementptr inbounds i8, i8* %167, i64 2
  store i8 32, i8* %170, align 1
  br label %173

173:                                              ; preds = %169, %171
  %174 = phi i8* [ %172, %171 ], [ %170, %169 ]
  store i8 0, i8* %174, align 1
  %175 = load i64, i64* %67, align 8
  %176 = add i64 %175, %116
  store i64 %176, i64* %67, align 8
  %177 = load %struct.cJSON*, %struct.cJSON** %129, align 8
  %178 = icmp eq %struct.cJSON* %177, null
  br i1 %178, label %179, label %117

179:                                              ; preds = %127, %173, %108
  %180 = phi i64 [ %110, %108 ], [ %128, %127 ], [ %176, %173 ]
  %181 = load i8*, i8** %69, align 8
  %182 = icmp eq i8* %181, null
  br i1 %182, label %297, label %183

183:                                              ; preds = %179
  %184 = add i64 %180, 2
  %185 = load i64, i64* %74, align 8
  %186 = icmp ugt i64 %184, %185
  br i1 %186, label %189, label %187

187:                                              ; preds = %183
  %188 = getelementptr inbounds i8, i8* %181, i64 %180
  br label %216

189:                                              ; preds = %183
  %190 = add i64 %180, 1
  %191 = lshr i64 %190, 1
  %192 = or i64 %191, %190
  %193 = lshr i64 %192, 2
  %194 = or i64 %193, %192
  %195 = lshr i64 %194, 4
  %196 = or i64 %195, %194
  %197 = lshr i64 %196, 8
  %198 = or i64 %197, %196
  %199 = lshr i64 %198, 16
  %200 = or i64 %199, %198
  %201 = add i64 %200, 1
  %202 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %203 = tail call i8* %202(i64 %201) #11
  %204 = icmp eq i8* %203, null
  br i1 %204, label %205, label %209

205:                                              ; preds = %189
  %206 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %207 = load i8*, i8** %69, align 8
  tail call void %206(i8* %207) #11
  %208 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %208, i8 0, i64 16, i1 false) #11
  br label %297

209:                                              ; preds = %189
  %210 = load i8*, i8** %69, align 8
  %211 = load i64, i64* %74, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %203, i8* align 1 %210, i64 %211, i1 false) #11
  %212 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %213 = load i8*, i8** %69, align 8
  tail call void %212(i8* %213) #11
  store i64 %201, i64* %74, align 8
  store i8* %203, i8** %69, align 8
  %214 = load i64, i64* %67, align 8
  %215 = getelementptr inbounds i8, i8* %203, i64 %214
  br label %216

216:                                              ; preds = %187, %209
  %217 = phi i8* [ %188, %187 ], [ %215, %209 ]
  %218 = icmp eq i8* %217, null
  br i1 %218, label %297, label %219

219:                                              ; preds = %216
  %220 = getelementptr inbounds i8, i8* %217, i64 1
  store i8 93, i8* %217, align 1
  store i8 0, i8* %220, align 1
  %221 = load i8*, i8** %69, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 %68
  br label %297

223:                                              ; preds = %64
  %224 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %225 = zext i32 %11 to i64
  %226 = shl nuw nsw i64 %225, 3
  %227 = tail call i8* %224(i64 %226) #11
  %228 = bitcast i8* %227 to i8**
  %229 = icmp eq i8* %227, null
  br i1 %229, label %297, label %230

230:                                              ; preds = %223
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %227, i8 0, i64 %226, i1 false)
  %231 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %232 = icmp eq %struct.cJSON* %231, null
  br i1 %232, label %252, label %233

233:                                              ; preds = %230
  %234 = add nsw i32 %1, 1
  %235 = icmp eq i32 %2, 0
  %236 = select i1 %235, i64 2, i64 3
  br label %237

237:                                              ; preds = %244, %233
  %238 = phi %struct.cJSON* [ %231, %233 ], [ %250, %244 ]
  %239 = phi i64 [ 0, %233 ], [ %245, %244 ]
  %240 = phi i64 [ 5, %233 ], [ %248, %244 ]
  %241 = tail call fastcc i8* @print_value(%struct.cJSON* nonnull %238, i32 %234, i32 %2, %struct.printbuffer* null)
  %242 = getelementptr inbounds i8*, i8** %228, i64 %239
  store i8* %241, i8** %242, align 8
  %243 = icmp eq i8* %241, null
  br i1 %243, label %257, label %244

244:                                              ; preds = %237
  %245 = add i64 %239, 1
  %246 = tail call i64 @strlen(i8* nonnull %241) #12
  %247 = add i64 %236, %240
  %248 = add i64 %247, %246
  %249 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %238, i64 0, i32 0
  %250 = load %struct.cJSON*, %struct.cJSON** %249, align 8
  %251 = icmp eq %struct.cJSON* %250, null
  br i1 %251, label %252, label %237

252:                                              ; preds = %244, %230
  %253 = phi i64 [ 5, %230 ], [ %248, %244 ]
  %254 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %255 = tail call i8* %254(i64 %253) #11
  %256 = icmp eq i8* %255, null
  br i1 %256, label %257, label %270

257:                                              ; preds = %237, %252
  br label %258

258:                                              ; preds = %257, %265
  %259 = phi i64 [ %266, %265 ], [ 0, %257 ]
  %260 = getelementptr inbounds i8*, i8** %228, i64 %259
  %261 = load i8*, i8** %260, align 8
  %262 = icmp eq i8* %261, null
  br i1 %262, label %265, label %263

263:                                              ; preds = %258
  %264 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %264(i8* nonnull %261) #11
  br label %265

265:                                              ; preds = %258, %263
  %266 = add nuw nsw i64 %259, 1
  %267 = icmp eq i64 %266, %225
  br i1 %267, label %268, label %258

268:                                              ; preds = %265
  %269 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %269(i8* nonnull %227) #11
  br label %297

270:                                              ; preds = %252
  store i8 91, i8* %255, align 1
  %271 = getelementptr inbounds i8, i8* %255, i64 1
  store i8 0, i8* %271, align 1
  %272 = icmp eq i32 %2, 0
  %273 = zext i32 %10 to i64
  br label %274

274:                                              ; preds = %288, %270
  %275 = phi i64 [ 0, %270 ], [ %292, %288 ]
  %276 = phi i8* [ %271, %270 ], [ %289, %288 ]
  %277 = getelementptr inbounds i8*, i8** %228, i64 %275
  %278 = load i8*, i8** %277, align 8
  %279 = tail call i64 @strlen(i8* %278) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %276, i8* align 1 %278, i64 %279, i1 false)
  %280 = getelementptr inbounds i8, i8* %276, i64 %279
  %281 = icmp eq i64 %275, %273
  br i1 %281, label %288, label %282

282:                                              ; preds = %274
  %283 = getelementptr inbounds i8, i8* %280, i64 1
  store i8 44, i8* %280, align 1
  br i1 %272, label %286, label %284

284:                                              ; preds = %282
  %285 = getelementptr inbounds i8, i8* %283, i64 1
  store i8 32, i8* %283, align 1
  br label %286

286:                                              ; preds = %282, %284
  %287 = phi i8* [ %285, %284 ], [ %283, %282 ]
  store i8 0, i8* %287, align 1
  br label %288

288:                                              ; preds = %274, %286
  %289 = phi i8* [ %287, %286 ], [ %280, %274 ]
  %290 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %291 = load i8*, i8** %277, align 8
  tail call void %290(i8* %291) #11
  %292 = add nuw nsw i64 %275, 1
  %293 = icmp eq i64 %292, %225
  br i1 %293, label %294, label %274

294:                                              ; preds = %288
  %295 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %295(i8* nonnull %227) #11
  %296 = getelementptr inbounds i8, i8* %289, i64 1
  store i8 93, i8* %289, align 1
  store i8 0, i8* %296, align 1
  br label %297

297:                                              ; preds = %132, %166, %179, %205, %155, %66, %94, %17, %46, %219, %294, %223, %216, %105, %63, %60, %268
  %298 = phi i8* [ null, %268 ], [ null, %60 ], [ %61, %63 ], [ null, %105 ], [ null, %216 ], [ null, %223 ], [ %222, %219 ], [ %255, %294 ], [ null, %46 ], [ null, %17 ], [ null, %94 ], [ null, %66 ], [ null, %155 ], [ null, %205 ], [ null, %179 ], [ null, %166 ], [ null, %132 ]
  ret i8* %298
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @print_object(%struct.cJSON* nocapture readonly, i32, i32, %struct.printbuffer*) unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i64 0, i32 2
  %6 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %7 = icmp eq %struct.cJSON* %6, null
  br i1 %7, label %15, label %8

8:                                                ; preds = %4, %8
  %9 = phi %struct.cJSON* [ %13, %8 ], [ %6, %4 ]
  %10 = phi i32 [ %11, %8 ], [ 0, %4 ]
  %11 = add nuw nsw i32 %10, 1
  %12 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %9, i64 0, i32 0
  %13 = load %struct.cJSON*, %struct.cJSON** %12, align 8
  %14 = icmp eq %struct.cJSON* %13, null
  br i1 %14, label %104, label %8

15:                                               ; preds = %4
  %16 = icmp eq %struct.printbuffer* %3, null
  br i1 %16, label %61, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %591, label %21

21:                                               ; preds = %17
  %22 = icmp eq i32 %2, 0
  %23 = add nsw i32 %1, 4
  %24 = select i1 %22, i32 3, i32 %23
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  %29 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %28, %30
  br i1 %31, label %34, label %32

32:                                               ; preds = %21
  %33 = getelementptr inbounds i8, i8* %19, i64 %27
  br label %68

34:                                               ; preds = %21
  %35 = add i64 %28, -1
  %36 = lshr i64 %35, 1
  %37 = or i64 %36, %35
  %38 = lshr i64 %37, 2
  %39 = or i64 %38, %37
  %40 = lshr i64 %39, 4
  %41 = or i64 %40, %39
  %42 = lshr i64 %41, 8
  %43 = or i64 %42, %41
  %44 = lshr i64 %43, 16
  %45 = or i64 %44, %43
  %46 = add i64 %45, 1
  %47 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %48 = tail call i8* %47(i64 %46) #11
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %54

50:                                               ; preds = %34
  %51 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %52 = load i8*, i8** %18, align 8
  tail call void %51(i8* %52) #11
  %53 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 0, i64 16, i1 false) #11
  br label %591

54:                                               ; preds = %34
  %55 = load i8*, i8** %18, align 8
  %56 = load i64, i64* %29, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %55, i64 %56, i1 false) #11
  %57 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %58 = load i8*, i8** %18, align 8
  tail call void %57(i8* %58) #11
  store i64 %46, i64* %29, align 8
  store i8* %48, i8** %18, align 8
  %59 = load i64, i64* %26, align 8
  %60 = getelementptr inbounds i8, i8* %48, i64 %59
  br label %68

61:                                               ; preds = %15
  %62 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %63 = icmp eq i32 %2, 0
  %64 = add nsw i32 %1, 4
  %65 = select i1 %63, i32 3, i32 %64
  %66 = sext i32 %65 to i64
  %67 = tail call i8* %62(i64 %66) #11
  br label %68

68:                                               ; preds = %54, %32, %61
  %69 = phi i8* [ %67, %61 ], [ %33, %32 ], [ %60, %54 ]
  %70 = icmp eq i8* %69, null
  br i1 %70, label %591, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds i8, i8* %69, i64 1
  store i8 123, i8* %69, align 1
  %73 = icmp eq i32 %2, 0
  br i1 %73, label %101, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds i8, i8* %69, i64 2
  store i8 10, i8* %72, align 1
  %76 = add i32 %1, -1
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %101

78:                                               ; preds = %74
  %79 = zext i32 %76 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 9, i64 %79, i1 false)
  %80 = add i32 %1, -2
  %81 = and i32 %76, 7
  %82 = icmp ult i32 %80, 7
  br i1 %82, label %91, label %83

83:                                               ; preds = %78
  %84 = sub i32 %76, %81
  br label %85

85:                                               ; preds = %85, %83
  %86 = phi i8* [ %75, %83 ], [ %88, %85 ]
  %87 = phi i32 [ %84, %83 ], [ %89, %85 ]
  %88 = getelementptr inbounds i8, i8* %86, i64 8
  %89 = add i32 %87, -8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %85

91:                                               ; preds = %85, %78
  %92 = phi i8* [ undef, %78 ], [ %88, %85 ]
  %93 = phi i8* [ %75, %78 ], [ %88, %85 ]
  %94 = icmp eq i32 %81, 0
  br i1 %94, label %101, label %95

95:                                               ; preds = %91, %95
  %96 = phi i8* [ %98, %95 ], [ %93, %91 ]
  %97 = phi i32 [ %99, %95 ], [ %81, %91 ]
  %98 = getelementptr inbounds i8, i8* %96, i64 1
  %99 = add i32 %97, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %95, !llvm.loop !2

101:                                              ; preds = %91, %95, %74, %71
  %102 = phi i8* [ %72, %71 ], [ %75, %74 ], [ %92, %91 ], [ %98, %95 ]
  %103 = getelementptr inbounds i8, i8* %102, i64 1
  store i8 125, i8* %102, align 1
  store i8 0, i8* %103, align 1
  br label %591

104:                                              ; preds = %8
  %105 = icmp eq %struct.printbuffer* %3, null
  br i1 %105, label %408, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 2
  %108 = load i64, i64* %107, align 8
  %109 = icmp ne i32 %2, 0
  %110 = select i1 %109, i64 2, i64 1
  %111 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %591, label %114

114:                                              ; preds = %106
  %115 = add i64 %108, %110
  %116 = add i64 %115, 1
  %117 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %3, i64 0, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = icmp ugt i64 %116, %118
  br i1 %119, label %122, label %120

120:                                              ; preds = %114
  %121 = getelementptr inbounds i8, i8* %112, i64 %108
  br label %148

122:                                              ; preds = %114
  %123 = lshr i64 %115, 1
  %124 = or i64 %123, %115
  %125 = lshr i64 %124, 2
  %126 = or i64 %125, %124
  %127 = lshr i64 %126, 4
  %128 = or i64 %127, %126
  %129 = lshr i64 %128, 8
  %130 = or i64 %129, %128
  %131 = lshr i64 %130, 16
  %132 = or i64 %131, %130
  %133 = add i64 %132, 1
  %134 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %135 = tail call i8* %134(i64 %133) #11
  %136 = icmp eq i8* %135, null
  br i1 %136, label %137, label %141

137:                                              ; preds = %122
  %138 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %139 = load i8*, i8** %111, align 8
  tail call void %138(i8* %139) #11
  %140 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 16, i1 false) #11
  br label %591

141:                                              ; preds = %122
  %142 = load i8*, i8** %111, align 8
  %143 = load i64, i64* %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %135, i8* align 1 %142, i64 %143, i1 false) #11
  %144 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %145 = load i8*, i8** %111, align 8
  tail call void %144(i8* %145) #11
  store i64 %133, i64* %117, align 8
  store i8* %135, i8** %111, align 8
  %146 = load i64, i64* %107, align 8
  %147 = getelementptr inbounds i8, i8* %135, i64 %146
  br label %148

148:                                              ; preds = %120, %141
  %149 = phi i8* [ %121, %120 ], [ %147, %141 ]
  %150 = icmp eq i8* %149, null
  br i1 %150, label %591, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds i8, i8* %149, i64 1
  store i8 123, i8* %149, align 1
  br i1 %109, label %153, label %155

153:                                              ; preds = %151
  %154 = getelementptr inbounds i8, i8* %149, i64 2
  store i8 10, i8* %152, align 1
  br label %155

155:                                              ; preds = %153, %151
  %156 = phi i8* [ %154, %153 ], [ %152, %151 ]
  store i8 0, i8* %156, align 1
  %157 = load i64, i64* %107, align 8
  %158 = add i64 %157, %110
  store i64 %158, i64* %107, align 8
  %159 = add i32 %1, 1
  %160 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %161 = icmp eq %struct.cJSON* %160, null
  br i1 %161, label %334, label %162

162:                                              ; preds = %155
  %163 = sext i32 %159 to i64
  %164 = icmp slt i32 %1, 0
  %165 = zext i1 %109 to i64
  %166 = zext i32 %1 to i64
  %167 = add nuw nsw i64 %166, 1
  br label %168

168:                                              ; preds = %162, %328
  %169 = phi i64 [ %158, %162 ], [ %331, %328 ]
  %170 = phi %struct.cJSON* [ %160, %162 ], [ %332, %328 ]
  br i1 %109, label %171, label %217

171:                                              ; preds = %168
  %172 = load i8*, i8** %111, align 8
  %173 = icmp eq i8* %172, null
  br i1 %173, label %591, label %174

174:                                              ; preds = %171
  %175 = add i64 %169, %163
  %176 = load i64, i64* %117, align 8
  %177 = icmp ugt i64 %175, %176
  br i1 %177, label %180, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds i8, i8* %172, i64 %169
  br label %207

180:                                              ; preds = %174
  %181 = add i64 %175, -1
  %182 = lshr i64 %181, 1
  %183 = or i64 %182, %181
  %184 = lshr i64 %183, 2
  %185 = or i64 %184, %183
  %186 = lshr i64 %185, 4
  %187 = or i64 %186, %185
  %188 = lshr i64 %187, 8
  %189 = or i64 %188, %187
  %190 = lshr i64 %189, 16
  %191 = or i64 %190, %189
  %192 = add i64 %191, 1
  %193 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %194 = tail call i8* %193(i64 %192) #11
  %195 = icmp eq i8* %194, null
  br i1 %195, label %196, label %200

196:                                              ; preds = %180
  %197 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %198 = load i8*, i8** %111, align 8
  tail call void %197(i8* %198) #11
  %199 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %199, i8 0, i64 16, i1 false) #11
  br label %591

200:                                              ; preds = %180
  %201 = load i8*, i8** %111, align 8
  %202 = load i64, i64* %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %194, i8* align 1 %201, i64 %202, i1 false) #11
  %203 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %204 = load i8*, i8** %111, align 8
  tail call void %203(i8* %204) #11
  store i64 %192, i64* %117, align 8
  store i8* %194, i8** %111, align 8
  %205 = load i64, i64* %107, align 8
  %206 = getelementptr inbounds i8, i8* %194, i64 %205
  br label %207

207:                                              ; preds = %178, %200
  %208 = phi i64 [ %169, %178 ], [ %205, %200 ]
  %209 = phi i8* [ %179, %178 ], [ %206, %200 ]
  %210 = icmp eq i8* %209, null
  br i1 %210, label %591, label %211

211:                                              ; preds = %207
  br i1 %164, label %214, label %212

212:                                              ; preds = %211
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %209, i8 9, i64 %167, i1 false)
  %213 = load i64, i64* %107, align 8
  br label %214

214:                                              ; preds = %212, %211
  %215 = phi i64 [ %213, %212 ], [ %208, %211 ]
  %216 = add i64 %215, %163
  store i64 %216, i64* %107, align 8
  br label %217

217:                                              ; preds = %168, %214
  %218 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %170, i64 0, i32 7
  %219 = load i8*, i8** %218, align 8
  %220 = tail call fastcc i8* @print_string_ptr(i8* %219, %struct.printbuffer* nonnull %3)
  %221 = load i8*, i8** %111, align 8
  %222 = icmp eq i8* %221, null
  br i1 %222, label %223, label %224

223:                                              ; preds = %217
  store i64 0, i64* %107, align 8
  br label %591

224:                                              ; preds = %217
  %225 = load i64, i64* %107, align 8
  %226 = getelementptr inbounds i8, i8* %221, i64 %225
  %227 = tail call i64 @strlen(i8* %226) #12
  %228 = add i64 %227, %225
  store i64 %228, i64* %107, align 8
  %229 = add i64 %228, %110
  %230 = load i64, i64* %117, align 8
  %231 = icmp ugt i64 %229, %230
  br i1 %231, label %234, label %232

232:                                              ; preds = %224
  %233 = getelementptr inbounds i8, i8* %221, i64 %228
  br label %261

234:                                              ; preds = %224
  %235 = add i64 %229, -1
  %236 = lshr i64 %235, 1
  %237 = or i64 %236, %235
  %238 = lshr i64 %237, 2
  %239 = or i64 %238, %237
  %240 = lshr i64 %239, 4
  %241 = or i64 %240, %239
  %242 = lshr i64 %241, 8
  %243 = or i64 %242, %241
  %244 = lshr i64 %243, 16
  %245 = or i64 %244, %243
  %246 = add i64 %245, 1
  %247 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %248 = tail call i8* %247(i64 %246) #11
  %249 = icmp eq i8* %248, null
  br i1 %249, label %250, label %254

250:                                              ; preds = %234
  %251 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %252 = load i8*, i8** %111, align 8
  tail call void %251(i8* %252) #11
  %253 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 0, i64 16, i1 false) #11
  br label %591

254:                                              ; preds = %234
  %255 = load i8*, i8** %111, align 8
  %256 = load i64, i64* %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %248, i8* align 1 %255, i64 %256, i1 false) #11
  %257 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %258 = load i8*, i8** %111, align 8
  tail call void %257(i8* %258) #11
  store i64 %246, i64* %117, align 8
  store i8* %248, i8** %111, align 8
  %259 = load i64, i64* %107, align 8
  %260 = getelementptr inbounds i8, i8* %248, i64 %259
  br label %261

261:                                              ; preds = %232, %254
  %262 = phi i8* [ %233, %232 ], [ %260, %254 ]
  %263 = icmp eq i8* %262, null
  br i1 %263, label %591, label %264

264:                                              ; preds = %261
  store i8 58, i8* %262, align 1
  br i1 %109, label %265, label %267

265:                                              ; preds = %264
  %266 = getelementptr inbounds i8, i8* %262, i64 1
  store i8 9, i8* %266, align 1
  br label %267

267:                                              ; preds = %264, %265
  %268 = load i64, i64* %107, align 8
  %269 = add i64 %268, %110
  store i64 %269, i64* %107, align 8
  %270 = tail call fastcc i8* @print_value(%struct.cJSON* nonnull %170, i32 %159, i32 %2, %struct.printbuffer* nonnull %3)
  %271 = load i8*, i8** %111, align 8
  %272 = icmp eq i8* %271, null
  br i1 %272, label %273, label %274

273:                                              ; preds = %267
  store i64 0, i64* %107, align 8
  br label %591

274:                                              ; preds = %267
  %275 = load i64, i64* %107, align 8
  %276 = getelementptr inbounds i8, i8* %271, i64 %275
  %277 = tail call i64 @strlen(i8* %276) #12
  %278 = add i64 %277, %275
  store i64 %278, i64* %107, align 8
  %279 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %170, i64 0, i32 0
  %280 = load %struct.cJSON*, %struct.cJSON** %279, align 8
  %281 = icmp ne %struct.cJSON* %280, null
  %282 = zext i1 %281 to i64
  %283 = add nuw nsw i64 %282, %165
  %284 = add i64 %283, %278
  %285 = add i64 %284, 1
  %286 = load i64, i64* %117, align 8
  %287 = icmp ugt i64 %285, %286
  br i1 %287, label %290, label %288

288:                                              ; preds = %274
  %289 = getelementptr inbounds i8, i8* %271, i64 %278
  br label %316

290:                                              ; preds = %274
  %291 = lshr i64 %284, 1
  %292 = or i64 %291, %284
  %293 = lshr i64 %292, 2
  %294 = or i64 %293, %292
  %295 = lshr i64 %294, 4
  %296 = or i64 %295, %294
  %297 = lshr i64 %296, 8
  %298 = or i64 %297, %296
  %299 = lshr i64 %298, 16
  %300 = or i64 %299, %298
  %301 = add i64 %300, 1
  %302 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %303 = tail call i8* %302(i64 %301) #11
  %304 = icmp eq i8* %303, null
  br i1 %304, label %305, label %309

305:                                              ; preds = %290
  %306 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %307 = load i8*, i8** %111, align 8
  tail call void %306(i8* %307) #11
  %308 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %308, i8 0, i64 16, i1 false) #11
  br label %591

309:                                              ; preds = %290
  %310 = load i8*, i8** %111, align 8
  %311 = load i64, i64* %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %303, i8* align 1 %310, i64 %311, i1 false) #11
  %312 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %313 = load i8*, i8** %111, align 8
  tail call void %312(i8* %313) #11
  store i64 %301, i64* %117, align 8
  store i8* %303, i8** %111, align 8
  %314 = load i64, i64* %107, align 8
  %315 = getelementptr inbounds i8, i8* %303, i64 %314
  br label %316

316:                                              ; preds = %288, %309
  %317 = phi i8* [ %289, %288 ], [ %315, %309 ]
  %318 = icmp eq i8* %317, null
  br i1 %318, label %591, label %319

319:                                              ; preds = %316
  %320 = load %struct.cJSON*, %struct.cJSON** %279, align 8
  %321 = icmp eq %struct.cJSON* %320, null
  br i1 %321, label %324, label %322

322:                                              ; preds = %319
  %323 = getelementptr inbounds i8, i8* %317, i64 1
  store i8 44, i8* %317, align 1
  br label %324

324:                                              ; preds = %319, %322
  %325 = phi i8* [ %323, %322 ], [ %317, %319 ]
  br i1 %109, label %326, label %328

326:                                              ; preds = %324
  %327 = getelementptr inbounds i8, i8* %325, i64 1
  store i8 10, i8* %325, align 1
  br label %328

328:                                              ; preds = %326, %324
  %329 = phi i8* [ %327, %326 ], [ %325, %324 ]
  store i8 0, i8* %329, align 1
  %330 = load i64, i64* %107, align 8
  %331 = add i64 %330, %283
  store i64 %331, i64* %107, align 8
  %332 = load %struct.cJSON*, %struct.cJSON** %279, align 8
  %333 = icmp eq %struct.cJSON* %332, null
  br i1 %333, label %334, label %168

334:                                              ; preds = %328, %155
  %335 = phi i64 [ %158, %155 ], [ %331, %328 ]
  %336 = load i8*, i8** %111, align 8
  %337 = icmp eq i8* %336, null
  br i1 %337, label %591, label %338

338:                                              ; preds = %334
  %339 = add nsw i32 %1, 2
  %340 = select i1 %109, i32 %339, i32 2
  %341 = sext i32 %340 to i64
  %342 = add i64 %335, %341
  %343 = load i64, i64* %117, align 8
  %344 = icmp ugt i64 %342, %343
  br i1 %344, label %347, label %345

345:                                              ; preds = %338
  %346 = getelementptr inbounds i8, i8* %336, i64 %335
  br label %374

347:                                              ; preds = %338
  %348 = add i64 %342, -1
  %349 = lshr i64 %348, 1
  %350 = or i64 %349, %348
  %351 = lshr i64 %350, 2
  %352 = or i64 %351, %350
  %353 = lshr i64 %352, 4
  %354 = or i64 %353, %352
  %355 = lshr i64 %354, 8
  %356 = or i64 %355, %354
  %357 = lshr i64 %356, 16
  %358 = or i64 %357, %356
  %359 = add i64 %358, 1
  %360 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %361 = tail call i8* %360(i64 %359) #11
  %362 = icmp eq i8* %361, null
  br i1 %362, label %363, label %367

363:                                              ; preds = %347
  %364 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %365 = load i8*, i8** %111, align 8
  tail call void %364(i8* %365) #11
  %366 = bitcast %struct.printbuffer* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %366, i8 0, i64 16, i1 false) #11
  br label %591

367:                                              ; preds = %347
  %368 = load i8*, i8** %111, align 8
  %369 = load i64, i64* %117, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %361, i8* align 1 %368, i64 %369, i1 false) #11
  %370 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %371 = load i8*, i8** %111, align 8
  tail call void %370(i8* %371) #11
  store i64 %359, i64* %117, align 8
  store i8* %361, i8** %111, align 8
  %372 = load i64, i64* %107, align 8
  %373 = getelementptr inbounds i8, i8* %361, i64 %372
  br label %374

374:                                              ; preds = %345, %367
  %375 = phi i8* [ %346, %345 ], [ %373, %367 ]
  %376 = icmp eq i8* %375, null
  br i1 %376, label %591, label %377

377:                                              ; preds = %374
  %378 = icmp sgt i32 %1, 0
  %379 = and i1 %109, %378
  br i1 %379, label %380, label %403

380:                                              ; preds = %377
  %381 = zext i32 %1 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %375, i8 9, i64 %381, i1 false)
  %382 = add i32 %1, -1
  %383 = and i32 %1, 7
  %384 = icmp ult i32 %382, 7
  br i1 %384, label %393, label %385

385:                                              ; preds = %380
  %386 = sub i32 %1, %383
  br label %387

387:                                              ; preds = %387, %385
  %388 = phi i8* [ %375, %385 ], [ %390, %387 ]
  %389 = phi i32 [ %386, %385 ], [ %391, %387 ]
  %390 = getelementptr inbounds i8, i8* %388, i64 8
  %391 = add i32 %389, -8
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %387

393:                                              ; preds = %387, %380
  %394 = phi i8* [ undef, %380 ], [ %390, %387 ]
  %395 = phi i8* [ %375, %380 ], [ %390, %387 ]
  %396 = icmp eq i32 %383, 0
  br i1 %396, label %403, label %397

397:                                              ; preds = %393, %397
  %398 = phi i8* [ %400, %397 ], [ %395, %393 ]
  %399 = phi i32 [ %401, %397 ], [ %383, %393 ]
  %400 = getelementptr inbounds i8, i8* %398, i64 1
  %401 = add i32 %399, -1
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %397, !llvm.loop !4

403:                                              ; preds = %393, %397, %377
  %404 = phi i8* [ %375, %377 ], [ %394, %393 ], [ %400, %397 ]
  %405 = getelementptr inbounds i8, i8* %404, i64 1
  store i8 125, i8* %404, align 1
  store i8 0, i8* %405, align 1
  %406 = load i8*, i8** %111, align 8
  %407 = getelementptr inbounds i8, i8* %406, i64 %108
  br label %591

408:                                              ; preds = %104
  %409 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %410 = zext i32 %11 to i64
  %411 = shl nuw nsw i64 %410, 3
  %412 = tail call i8* %409(i64 %411) #11
  %413 = bitcast i8* %412 to i8**
  %414 = icmp eq i8* %412, null
  br i1 %414, label %591, label %415

415:                                              ; preds = %408
  %416 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %417 = tail call i8* %416(i64 %411) #11
  %418 = bitcast i8* %417 to i8**
  %419 = icmp eq i8* %417, null
  br i1 %419, label %420, label %422

420:                                              ; preds = %415
  %421 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %421(i8* nonnull %412) #11
  br label %591

422:                                              ; preds = %415
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %412, i8 0, i64 %411, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %417, i8 0, i64 %411, i1 false)
  %423 = add i32 %1, 1
  %424 = icmp ne i32 %2, 0
  %425 = sext i32 %1 to i64
  %426 = add nsw i64 %425, 8
  %427 = select i1 %424, i64 %426, i64 7
  %428 = load %struct.cJSON*, %struct.cJSON** %5, align 8
  %429 = icmp eq %struct.cJSON* %428, null
  br i1 %429, label %464, label %430

430:                                              ; preds = %422
  %431 = add nsw i32 %1, 3
  %432 = select i1 %424, i32 %431, i32 0
  %433 = sext i32 %432 to i64
  %434 = add nsw i64 %433, 2
  br label %435

435:                                              ; preds = %430, %456
  %436 = phi %struct.cJSON* [ %428, %430 ], [ %460, %456 ]
  %437 = phi i64 [ %427, %430 ], [ %458, %456 ]
  %438 = phi i64 [ 0, %430 ], [ %445, %456 ]
  %439 = phi i32 [ 0, %430 ], [ %457, %456 ]
  %440 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %436, i64 0, i32 7
  %441 = load i8*, i8** %440, align 8
  %442 = tail call fastcc i8* @print_string_ptr(i8* %441, %struct.printbuffer* null)
  %443 = getelementptr inbounds i8*, i8** %418, i64 %438
  store i8* %442, i8** %443, align 8
  %444 = tail call fastcc i8* @print_value(%struct.cJSON* nonnull %436, i32 %423, i32 %2, %struct.printbuffer* null)
  %445 = add i64 %438, 1
  %446 = getelementptr inbounds i8*, i8** %413, i64 %438
  store i8* %444, i8** %446, align 8
  %447 = icmp ne i8* %442, null
  %448 = icmp ne i8* %444, null
  %449 = and i1 %447, %448
  br i1 %449, label %450, label %456

450:                                              ; preds = %435
  %451 = tail call i64 @strlen(i8* nonnull %444) #12
  %452 = tail call i64 @strlen(i8* nonnull %442) #12
  %453 = add i64 %434, %437
  %454 = add i64 %453, %451
  %455 = add i64 %454, %452
  br label %456

456:                                              ; preds = %435, %450
  %457 = phi i32 [ %439, %450 ], [ 1, %435 ]
  %458 = phi i64 [ %455, %450 ], [ %437, %435 ]
  %459 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %436, i64 0, i32 0
  %460 = load %struct.cJSON*, %struct.cJSON** %459, align 8
  %461 = icmp eq %struct.cJSON* %460, null
  br i1 %461, label %462, label %435

462:                                              ; preds = %456
  %463 = icmp eq i32 %457, 0
  br i1 %463, label %464, label %470

464:                                              ; preds = %422, %462
  %465 = phi i64 [ %458, %462 ], [ %427, %422 ]
  %466 = phi i64 [ %445, %462 ], [ 0, %422 ]
  %467 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %468 = tail call i8* %467(i64 %465) #11
  %469 = icmp eq i8* %468, null
  br i1 %469, label %470, label %493

470:                                              ; preds = %464, %462
  %471 = phi i64 [ %466, %464 ], [ %445, %462 ]
  %472 = getelementptr inbounds i8*, i8** %418, i64 %471
  br label %473

473:                                              ; preds = %487, %470
  %474 = phi i64 [ 0, %470 ], [ %488, %487 ]
  %475 = load i8*, i8** %472, align 8
  %476 = icmp eq i8* %475, null
  br i1 %476, label %481, label %477

477:                                              ; preds = %473
  %478 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %479 = getelementptr inbounds i8*, i8** %418, i64 %474
  %480 = load i8*, i8** %479, align 8
  tail call void %478(i8* %480) #11
  br label %481

481:                                              ; preds = %473, %477
  %482 = getelementptr inbounds i8*, i8** %413, i64 %474
  %483 = load i8*, i8** %482, align 8
  %484 = icmp eq i8* %483, null
  br i1 %484, label %487, label %485

485:                                              ; preds = %481
  %486 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %486(i8* nonnull %483) #11
  br label %487

487:                                              ; preds = %481, %485
  %488 = add nuw nsw i64 %474, 1
  %489 = icmp eq i64 %488, %410
  br i1 %489, label %490, label %473

490:                                              ; preds = %487
  %491 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %491(i8* nonnull %417) #11
  %492 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %492(i8* nonnull %412) #11
  br label %591

493:                                              ; preds = %464
  store i8 123, i8* %468, align 1
  %494 = getelementptr inbounds i8, i8* %468, i64 1
  br i1 %424, label %495, label %497

495:                                              ; preds = %493
  %496 = getelementptr inbounds i8, i8* %468, i64 2
  store i8 10, i8* %494, align 1
  br label %497

497:                                              ; preds = %493, %495
  %498 = phi i8* [ %496, %495 ], [ %494, %493 ]
  store i8 0, i8* %498, align 1
  %499 = icmp slt i32 %1, 0
  %500 = zext i32 %1 to i64
  %501 = add nuw nsw i64 %500, 1
  %502 = zext i32 %10 to i64
  %503 = xor i1 %424, true
  %504 = or i1 %499, %503
  %505 = and i32 %423, 7
  %506 = icmp ult i32 %1, 7
  %507 = sub i32 %423, %505
  %508 = icmp eq i32 %505, 0
  br label %509

509:                                              ; preds = %552, %497
  %510 = phi i64 [ 0, %497 ], [ %558, %552 ]
  %511 = phi i8* [ %498, %497 ], [ %553, %552 ]
  br i1 %504, label %528, label %512

512:                                              ; preds = %509
  call void @llvm.memset.p0i8.i64(i8* align 1 %511, i8 9, i64 %501, i1 false)
  br i1 %506, label %519, label %513

513:                                              ; preds = %512, %513
  %514 = phi i8* [ %516, %513 ], [ %511, %512 ]
  %515 = phi i32 [ %517, %513 ], [ %507, %512 ]
  %516 = getelementptr inbounds i8, i8* %514, i64 8
  %517 = add i32 %515, -8
  %518 = icmp eq i32 %517, 0
  br i1 %518, label %519, label %513

519:                                              ; preds = %513, %512
  %520 = phi i8* [ undef, %512 ], [ %516, %513 ]
  %521 = phi i8* [ %511, %512 ], [ %516, %513 ]
  br i1 %508, label %528, label %522

522:                                              ; preds = %519, %522
  %523 = phi i8* [ %525, %522 ], [ %521, %519 ]
  %524 = phi i32 [ %526, %522 ], [ %505, %519 ]
  %525 = getelementptr inbounds i8, i8* %523, i64 1
  %526 = add i32 %524, -1
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %528, label %522, !llvm.loop !5

528:                                              ; preds = %519, %522, %509
  %529 = phi i8* [ %511, %509 ], [ %520, %519 ], [ %525, %522 ]
  %530 = getelementptr inbounds i8*, i8** %418, i64 %510
  %531 = load i8*, i8** %530, align 8
  %532 = tail call i64 @strlen(i8* %531) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %529, i8* align 1 %531, i64 %532, i1 false)
  %533 = getelementptr inbounds i8, i8* %529, i64 %532
  %534 = getelementptr inbounds i8, i8* %533, i64 1
  store i8 58, i8* %533, align 1
  br i1 %424, label %535, label %537

535:                                              ; preds = %528
  %536 = getelementptr inbounds i8, i8* %534, i64 1
  store i8 9, i8* %534, align 1
  br label %537

537:                                              ; preds = %535, %528
  %538 = phi i8* [ %536, %535 ], [ %534, %528 ]
  %539 = getelementptr inbounds i8*, i8** %413, i64 %510
  %540 = load i8*, i8** %539, align 8
  %541 = tail call i8* @strcpy(i8* %538, i8* %540) #11
  %542 = load i8*, i8** %539, align 8
  %543 = tail call i64 @strlen(i8* %542) #12
  %544 = getelementptr inbounds i8, i8* %538, i64 %543
  %545 = icmp eq i64 %510, %502
  br i1 %545, label %548, label %546

546:                                              ; preds = %537
  %547 = getelementptr inbounds i8, i8* %544, i64 1
  store i8 44, i8* %544, align 1
  br label %548

548:                                              ; preds = %537, %546
  %549 = phi i8* [ %547, %546 ], [ %544, %537 ]
  br i1 %424, label %550, label %552

550:                                              ; preds = %548
  %551 = getelementptr inbounds i8, i8* %549, i64 1
  store i8 10, i8* %549, align 1
  br label %552

552:                                              ; preds = %550, %548
  %553 = phi i8* [ %551, %550 ], [ %549, %548 ]
  store i8 0, i8* %553, align 1
  %554 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %555 = load i8*, i8** %530, align 8
  tail call void %554(i8* %555) #11
  %556 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %557 = load i8*, i8** %539, align 8
  tail call void %556(i8* %557) #11
  %558 = add nuw nsw i64 %510, 1
  %559 = icmp eq i64 %558, %410
  br i1 %559, label %560, label %509

560:                                              ; preds = %552
  %561 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %561(i8* nonnull %417) #11
  %562 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  tail call void %562(i8* nonnull %412) #11
  %563 = icmp sgt i32 %1, 0
  %564 = and i1 %424, %563
  br i1 %564, label %565, label %588

565:                                              ; preds = %560
  %566 = zext i32 %1 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %553, i8 9, i64 %566, i1 false)
  %567 = add i32 %1, -1
  %568 = and i32 %1, 7
  %569 = icmp ult i32 %567, 7
  br i1 %569, label %578, label %570

570:                                              ; preds = %565
  %571 = sub i32 %1, %568
  br label %572

572:                                              ; preds = %572, %570
  %573 = phi i8* [ %553, %570 ], [ %575, %572 ]
  %574 = phi i32 [ %571, %570 ], [ %576, %572 ]
  %575 = getelementptr inbounds i8, i8* %573, i64 8
  %576 = add i32 %574, -8
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %578, label %572

578:                                              ; preds = %572, %565
  %579 = phi i8* [ undef, %565 ], [ %575, %572 ]
  %580 = phi i8* [ %553, %565 ], [ %575, %572 ]
  %581 = icmp eq i32 %568, 0
  br i1 %581, label %588, label %582

582:                                              ; preds = %578, %582
  %583 = phi i8* [ %585, %582 ], [ %580, %578 ]
  %584 = phi i32 [ %586, %582 ], [ %568, %578 ]
  %585 = getelementptr inbounds i8, i8* %583, i64 1
  %586 = add i32 %584, -1
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %588, label %582, !llvm.loop !6

588:                                              ; preds = %578, %582, %560
  %589 = phi i8* [ %553, %560 ], [ %579, %578 ], [ %585, %582 ]
  %590 = getelementptr inbounds i8, i8* %589, i64 1
  store i8 125, i8* %589, align 1
  store i8 0, i8* %590, align 1
  br label %591

591:                                              ; preds = %171, %316, %261, %207, %223, %273, %334, %363, %305, %250, %196, %106, %137, %17, %50, %403, %588, %408, %374, %148, %68, %490, %420, %101
  %592 = phi i8* [ null, %490 ], [ null, %420 ], [ %69, %101 ], [ null, %68 ], [ null, %148 ], [ null, %374 ], [ null, %408 ], [ %407, %403 ], [ %468, %588 ], [ null, %50 ], [ null, %17 ], [ null, %137 ], [ null, %106 ], [ null, %196 ], [ null, %250 ], [ null, %305 ], [ null, %363 ], [ null, %334 ], [ null, %273 ], [ null, %223 ], [ null, %207 ], [ null, %261 ], [ null, %316 ], [ null, %171 ]
  ret i8* %592
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #8

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @print_string_ptr(i8*, %struct.printbuffer*) unnamed_addr #4 {
  %3 = load i8, i8* %0, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %24, label %5

5:                                                ; preds = %2, %15
  %6 = phi i8 [ %20, %15 ], [ %3, %2 ]
  %7 = phi i64 [ %18, %15 ], [ 0, %2 ]
  %8 = phi i8* [ %19, %15 ], [ %0, %2 ]
  %9 = add i8 %6, -1
  %10 = icmp ult i8 %9, 31
  br i1 %10, label %15, label %11

11:                                               ; preds = %5
  %12 = icmp eq i8 %6, 34
  %13 = icmp eq i8 %6, 92
  %14 = or i1 %12, %13
  br label %15

15:                                               ; preds = %11, %5
  %16 = phi i1 [ true, %5 ], [ %14, %11 ]
  %17 = zext i1 %16 to i64
  %18 = or i64 %7, %17
  %19 = getelementptr inbounds i8, i8* %8, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %5

22:                                               ; preds = %15
  %23 = icmp eq i64 %18, 0
  br i1 %23, label %24, label %84

24:                                               ; preds = %2, %22
  %25 = phi i8* [ %19, %22 ], [ %0, %2 ]
  %26 = ptrtoint i8* %25 to i64
  %27 = ptrtoint i8* %0 to i64
  %28 = sub i64 %26, %27
  %29 = icmp eq %struct.printbuffer* %1, null
  br i1 %29, label %71, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %249, label %34

34:                                               ; preds = %30
  %35 = add i64 %28, 3
  %36 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %35, %37
  %39 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp ugt i64 %38, %40
  br i1 %41, label %44, label %42

42:                                               ; preds = %34
  %43 = getelementptr inbounds i8, i8* %32, i64 %37
  br label %75

44:                                               ; preds = %34
  %45 = add i64 %38, -1
  %46 = lshr i64 %45, 1
  %47 = or i64 %46, %45
  %48 = lshr i64 %47, 2
  %49 = or i64 %48, %47
  %50 = lshr i64 %49, 4
  %51 = or i64 %50, %49
  %52 = lshr i64 %51, 8
  %53 = or i64 %52, %51
  %54 = lshr i64 %53, 16
  %55 = or i64 %54, %53
  %56 = add i64 %55, 1
  %57 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %58 = tail call i8* %57(i64 %56) #11
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %64

60:                                               ; preds = %44
  %61 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %62 = load i8*, i8** %31, align 8
  tail call void %61(i8* %62) #11
  %63 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %63, i8 0, i64 16, i1 false) #11
  br label %249

64:                                               ; preds = %44
  %65 = load i8*, i8** %31, align 8
  %66 = load i64, i64* %39, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %65, i64 %66, i1 false) #11
  %67 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %68 = load i8*, i8** %31, align 8
  tail call void %67(i8* %68) #11
  store i64 %56, i64* %39, align 8
  store i8* %58, i8** %31, align 8
  %69 = load i64, i64* %36, align 8
  %70 = getelementptr inbounds i8, i8* %58, i64 %69
  br label %75

71:                                               ; preds = %24
  %72 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %73 = add i64 %28, 3
  %74 = tail call i8* %72(i64 %73) #11
  br label %75

75:                                               ; preds = %64, %42, %71
  %76 = phi i8* [ %74, %71 ], [ %43, %42 ], [ %70, %64 ]
  %77 = icmp eq i8* %76, null
  br i1 %77, label %249, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds i8, i8* %76, i64 1
  store i8 34, i8* %76, align 1
  %80 = tail call i8* @strcpy(i8* %79, i8* %0) #11
  %81 = getelementptr inbounds i8, i8* %79, i64 %28
  store i8 34, i8* %81, align 1
  %82 = add i64 %28, 1
  %83 = getelementptr inbounds i8, i8* %79, i64 %82
  store i8 0, i8* %83, align 1
  br label %249

84:                                               ; preds = %22
  %85 = icmp eq i8* %0, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %84
  br i1 %4, label %157, label %136

87:                                               ; preds = %84
  %88 = icmp eq %struct.printbuffer* %1, null
  br i1 %88, label %129, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %249, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 3
  %97 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = icmp ugt i64 %96, %98
  br i1 %99, label %102, label %100

100:                                              ; preds = %93
  %101 = getelementptr inbounds i8, i8* %91, i64 %95
  br label %132

102:                                              ; preds = %93
  %103 = add i64 %95, 2
  %104 = lshr i64 %103, 1
  %105 = or i64 %104, %103
  %106 = lshr i64 %105, 2
  %107 = or i64 %106, %105
  %108 = lshr i64 %107, 4
  %109 = or i64 %108, %107
  %110 = lshr i64 %109, 8
  %111 = or i64 %110, %109
  %112 = lshr i64 %111, 16
  %113 = or i64 %112, %111
  %114 = add i64 %113, 1
  %115 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %116 = tail call i8* %115(i64 %114) #11
  %117 = icmp eq i8* %116, null
  br i1 %117, label %118, label %122

118:                                              ; preds = %102
  %119 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %120 = load i8*, i8** %90, align 8
  tail call void %119(i8* %120) #11
  %121 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 0, i64 16, i1 false) #11
  br label %249

122:                                              ; preds = %102
  %123 = load i8*, i8** %90, align 8
  %124 = load i64, i64* %97, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %116, i8* align 1 %123, i64 %124, i1 false) #11
  %125 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %126 = load i8*, i8** %90, align 8
  tail call void %125(i8* %126) #11
  store i64 %114, i64* %97, align 8
  store i8* %116, i8** %90, align 8
  %127 = load i64, i64* %94, align 8
  %128 = getelementptr inbounds i8, i8* %116, i64 %127
  br label %132

129:                                              ; preds = %87
  %130 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %131 = tail call i8* %130(i64 3) #11
  br label %132

132:                                              ; preds = %122, %100, %129
  %133 = phi i8* [ %131, %129 ], [ %101, %100 ], [ %128, %122 ]
  %134 = icmp eq i8* %133, null
  br i1 %134, label %249, label %135

135:                                              ; preds = %132
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %133, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i64 3, i1 false)
  br label %249

136:                                              ; preds = %86, %152
  %137 = phi i8 [ %155, %152 ], [ %3, %86 ]
  %138 = phi i64 [ %153, %152 ], [ 0, %86 ]
  %139 = phi i8* [ %154, %152 ], [ %0, %86 ]
  %140 = add i64 %138, 1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %157, label %142

142:                                              ; preds = %136
  %143 = zext i8 %137 to i32
  %144 = tail call i8* @memchr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 %143, i64 8)
  %145 = icmp eq i8* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = add i64 %138, 2
  br label %152

148:                                              ; preds = %142
  %149 = icmp ult i8 %137, 32
  %150 = add i64 %138, 6
  %151 = select i1 %149, i64 %150, i64 %140
  br label %152

152:                                              ; preds = %148, %146
  %153 = phi i64 [ %147, %146 ], [ %151, %148 ]
  %154 = getelementptr inbounds i8, i8* %139, i64 1
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %157, label %136

157:                                              ; preds = %152, %136, %86
  %158 = phi i64 [ 0, %86 ], [ 0, %136 ], [ %153, %152 ]
  %159 = icmp eq %struct.printbuffer* %1, null
  br i1 %159, label %201, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = icmp eq i8* %162, null
  br i1 %163, label %249, label %164

164:                                              ; preds = %160
  %165 = add i64 %158, 3
  %166 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 2
  %167 = load i64, i64* %166, align 8
  %168 = add i64 %165, %167
  %169 = getelementptr inbounds %struct.printbuffer, %struct.printbuffer* %1, i64 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp ugt i64 %168, %170
  br i1 %171, label %174, label %172

172:                                              ; preds = %164
  %173 = getelementptr inbounds i8, i8* %162, i64 %167
  br label %205

174:                                              ; preds = %164
  %175 = add i64 %168, -1
  %176 = lshr i64 %175, 1
  %177 = or i64 %176, %175
  %178 = lshr i64 %177, 2
  %179 = or i64 %178, %177
  %180 = lshr i64 %179, 4
  %181 = or i64 %180, %179
  %182 = lshr i64 %181, 8
  %183 = or i64 %182, %181
  %184 = lshr i64 %183, 16
  %185 = or i64 %184, %183
  %186 = add i64 %185, 1
  %187 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %188 = tail call i8* %187(i64 %186) #11
  %189 = icmp eq i8* %188, null
  br i1 %189, label %190, label %194

190:                                              ; preds = %174
  %191 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %192 = load i8*, i8** %161, align 8
  tail call void %191(i8* %192) #11
  %193 = bitcast %struct.printbuffer* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %193, i8 0, i64 16, i1 false) #11
  br label %249

194:                                              ; preds = %174
  %195 = load i8*, i8** %161, align 8
  %196 = load i64, i64* %169, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %188, i8* align 1 %195, i64 %196, i1 false) #11
  %197 = load void (i8*)*, void (i8*)** @cJSON_free, align 8
  %198 = load i8*, i8** %161, align 8
  tail call void %197(i8* %198) #11
  store i64 %186, i64* %169, align 8
  store i8* %188, i8** %161, align 8
  %199 = load i64, i64* %166, align 8
  %200 = getelementptr inbounds i8, i8* %188, i64 %199
  br label %205

201:                                              ; preds = %157
  %202 = load i8* (i64)*, i8* (i64)** @cJSON_malloc, align 8
  %203 = add i64 %158, 3
  %204 = tail call i8* %202(i64 %203) #11
  br label %205

205:                                              ; preds = %194, %172, %201
  %206 = phi i8* [ %204, %201 ], [ %173, %172 ], [ %200, %194 ]
  %207 = icmp eq i8* %206, null
  br i1 %207, label %249, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds i8, i8* %206, i64 1
  store i8 34, i8* %206, align 1
  %210 = load i8, i8* %0, align 1
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %246, label %212

212:                                              ; preds = %208, %241
  %213 = phi i8 [ %244, %241 ], [ %210, %208 ]
  %214 = phi i8* [ %243, %241 ], [ %209, %208 ]
  %215 = phi i8* [ %242, %241 ], [ %0, %208 ]
  %216 = icmp ult i8 %213, 32
  br i1 %216, label %221, label %217

217:                                              ; preds = %212
  switch i8 %213, label %218 [
    i8 92, label %221
    i8 34, label %221
  ]

218:                                              ; preds = %217
  %219 = getelementptr inbounds i8, i8* %215, i64 1
  %220 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 %213, i8* %214, align 1
  br label %241

221:                                              ; preds = %217, %217, %212
  %222 = getelementptr inbounds i8, i8* %215, i64 1
  switch i8 %213, label %237 [
    i8 92, label %223
    i8 34, label %225
    i8 8, label %227
    i8 12, label %229
    i8 10, label %231
    i8 13, label %233
    i8 9, label %235
  ]

223:                                              ; preds = %221
  %224 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 92, i8* %214, align 1
  br label %241

225:                                              ; preds = %221
  %226 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 34, i8* %214, align 1
  br label %241

227:                                              ; preds = %221
  %228 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 8, i8* %214, align 1
  br label %241

229:                                              ; preds = %221
  %230 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 12, i8* %214, align 1
  br label %241

231:                                              ; preds = %221
  %232 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 10, i8* %214, align 1
  br label %241

233:                                              ; preds = %221
  %234 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 13, i8* %214, align 1
  br label %241

235:                                              ; preds = %221
  %236 = getelementptr inbounds i8, i8* %214, i64 1
  store i8 9, i8* %214, align 1
  br label %241

237:                                              ; preds = %221
  %238 = zext i8 %213 to i32
  %239 = tail call i32 (i8*, i8*, ...) @sprintf(i8* %214, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i32 %238) #11
  %240 = getelementptr inbounds i8, i8* %214, i64 5
  br label %241

241:                                              ; preds = %223, %225, %227, %229, %231, %233, %235, %237, %218
  %242 = phi i8* [ %219, %218 ], [ %222, %237 ], [ %222, %235 ], [ %222, %233 ], [ %222, %231 ], [ %222, %229 ], [ %222, %227 ], [ %222, %225 ], [ %222, %223 ]
  %243 = phi i8* [ %220, %218 ], [ %240, %237 ], [ %236, %235 ], [ %234, %233 ], [ %232, %231 ], [ %230, %229 ], [ %228, %227 ], [ %226, %225 ], [ %224, %223 ]
  %244 = load i8, i8* %242, align 1
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %246, label %212

246:                                              ; preds = %241, %208
  %247 = phi i8* [ %209, %208 ], [ %243, %241 ]
  %248 = getelementptr inbounds i8, i8* %247, i64 1
  store i8 34, i8* %247, align 1
  store i8 0, i8* %248, align 1
  br label %249

249:                                              ; preds = %160, %190, %89, %118, %30, %60, %205, %132, %75, %246, %135, %78
  %250 = phi i8* [ %206, %246 ], [ %133, %135 ], [ %76, %78 ], [ null, %75 ], [ null, %132 ], [ null, %205 ], [ null, %60 ], [ null, %30 ], [ null, %118 ], [ null, %89 ], [ null, %190 ], [ null, %160 ]
  ret i8* %250
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #10

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
